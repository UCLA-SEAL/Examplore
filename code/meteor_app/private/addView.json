[{"dataset": "addView", "exampleID": 4801, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kanika23oct/beamto/tree/master/libs/slidingmenu/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4802, "initialization": ["LinearLayout linearLayout = LinearLayout.findViewById(int)", "View child = inflate(*,*)"], "initializationStart": [224, 633], "initializationEnd": [263, 670], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.findViewById(int)", "child.findViewById(int)"], "configurationStart": [270, 706], "configurationEnd": [306, 756], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1079, "focalAPIEnd": 1104, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benweissmann/zephyr-mobile/tree/master/android-client/src/com/benweissmann/zmobile/components/ListHeader.java", "rawCode": "  public static void populate(final Activity activity, List<Breadcrumb> breadcrumbs) {\n    LayoutInflater vi = (LayoutInflater) activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    LinearLayout v = (LinearLayout) activity.findViewById(R.id.list_header);\n\n    v.findViewById(R.id.breadcrumb_home)\n        .setOnClickListener(\n            new View.OnClickListener() {\n              public void onClick(View v) {\n                goToBreadcrumbActivity(activity, new Intent(activity, ClassListActivity.class));\n              }\n            });\n\n    for (final Breadcrumb breadcrumb : breadcrumbs) {\n      View breadcrumbView = vi.inflate(R.layout.breadcrumb, null);\n      TextView label = (TextView) breadcrumbView.findViewById(R.id.breadcrumb_label);\n      label.setText(breadcrumb.getLabel());\n\n      if (breadcrumb.hasIntent()) {\n        label.setOnClickListener(\n            new View.OnClickListener() {\n              public void onClick(View v) {\n                goToBreadcrumbActivity(activity, breadcrumb.getIntent());\n              }\n            });\n      }\n\n      v.addView(breadcrumbView);\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4803, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dodyg/AndroidRivers/tree/master/HoloEverywhere-master/contrib/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4804, "initialization": ["View child = TaskEditControlSet.getDisplayView()"], "initializationStart": [1228], "initializationEnd": [1249], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1260, "guardExpressionEnd": 1283, "guardBlockStart": 1260, "guardBlockEnd": 1552, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1444, "focalAPIEnd": 1471, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/todoroo/astrid/tree/master/astrid/src/com/todoroo/astrid/activity/TaskEditFragment.java", "rawCode": "  private void loadEditPageOrder(boolean removeViews) {\n    LinearLayout basicControls = (LinearLayout) getView().findViewById(R.id.basic_controls);\n    if (removeViews) {\n      basicControls.removeAllViews();\n      moreControls.removeAllViews();\n    }\n\n    ArrayList<String> controlOrder =\n        BeastModePreferences.constructOrderedControlList(getActivity());\n    String[] itemOrder = controlOrder.toArray(new String[controlOrder.size()]);\n\n    String moreSectionTrigger = getString(R.string.TEA_ctrl_more_pref);\n    String hideAlwaysTrigger = getString(R.string.TEA_ctrl_hide_section_pref);\n    LinearLayout section = basicControls;\n\n    moreSectionHasControls = false;\n\n    Class<?> openControl =\n        (Class<?>) getActivity().getIntent().getSerializableExtra(TOKEN_OPEN_CONTROL);\n\n    for (int i = 0; i < itemOrder.length; i++) {\n      String item = itemOrder[i];\n      if (item.equals(hideAlwaysTrigger)) {\n        break; // As soon as we hit the hide section, we're done\n      } else if (item.equals(moreSectionTrigger)) {\n        section = moreControls;\n      } else {\n        View controlSet = null;\n        TaskEditControlSet curr = controlSetMap.get(item);\n\n        if (curr != null) controlSet = (LinearLayout) curr.getDisplayView();\n\n        if (controlSet != null) {\n          if ((i + 1 >= itemOrder.length || itemOrder[i + 1].equals(moreSectionTrigger))) {\n            removeTeaSeparator(controlSet);\n          }\n          section.addView(controlSet);\n          if (section == moreControls) moreSectionHasControls = true;\n        }\n\n        if (curr != null\n            && curr.getClass().equals(openControl)\n            && curr instanceof PopupControlSet) {\n          ((PopupControlSet) curr).getDisplayView().performClick();\n        }\n      }\n    }\n\n    getActivity().getIntent().removeExtra(TOKEN_OPEN_CONTROL);\n  }\n"}, {"dataset": "addView", "exampleID": 4805, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 120, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bi2one/Matji_Sandwich/tree/master/android/src/com/matji/sandwich/widget/title/TitleContainer.java", "rawCode": "  /**\n   * 왼쪽 컨테이너에 뷰를 추가한다.\n   *\n   * @param v 추가할 뷰\n   */\n  protected final void addViewInLeftContainer(View v) {\n    leftContainer.addView(v);\n  }\n"}, {"dataset": "addView", "exampleID": 4806, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/srdperea/Informatics-191-ZotFinder-Repository/tree/master/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4807, "initialization": ["View child = getItemView(int)"], "initializationStart": [285], "initializationEnd": [303], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 309, "guardExpressionEnd": 326, "guardBlockStart": 309, "guardBlockEnd": 469, "focalAPI": " = linearLayout.addView(child,index)", "focalAPIStart": 356, "focalAPIEnd": 384, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)"], "useStart": [409], "useEnd": [434], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/andronmobi/android-vlc-parrot-asteroid/tree/master/java-libs/WheelView/src/kankan/wheel/widget/WheelView.java", "rawCode": "  /**\n   * Adds view for item to items layout\n   *\n   * @param index the item index\n   * @param first the flag indicates if view should be first\n   * @return true if corresponding item exists and is added\n   */\n  private boolean addViewItem(int index, boolean first) {\n    View view = getItemView(index);\n    if (view != null) {\n      if (first) {\n        itemsLayout.addView(view, 0);\n      } else {\n        itemsLayout.addView(view);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n"}, {"dataset": "addView", "exampleID": 4808, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [605], "initializationEnd": [631], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.setBackgroundColor(int)", "linearLayout.setLayoutParams(LinearLayout.LayoutParams)", "linearLayout.setGravity(int)", "linearLayout.setPadding(int,int,int,int)", "linearLayout.setId(int)"], "configurationStart": [641, 698, 749, 923, 969, 1011], "configurationEnd": [688, 739, 913, 959, 1001, 1041], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 9969, "guardExpressionEnd": 9993, "guardBlockStart": 9969, "guardBlockEnd": 12210, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 10035, "focalAPIEnd": 10065, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(TextView)", "linearLayout.addView(TextView)", "linearLayout.setBackgroundResource(int)", "linearLayout.setBackgroundResource(int)", "linearLayout.setBackgroundResource(int)", "RelativeLayout.addView(linearLayout)"], "useStart": [10384, 10903, 11183, 11372, 11565, 11945], "useEnd": [10411, 10930, 11243, 11432, 11629, 11965], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cangevine/STEAMnet/tree/master/android/src/org/friendscentral/steamnet/JawnAdapter.java", "rawCode": "  @SuppressWarnings(\"deprecation\")\n  public View getView(int position, View convertView, ViewGroup parent) {\n    final int SPARK_INFO_ID = 4;\n\n    RelativeLayout v = new RelativeLayout(mContext);\n    GridView.LayoutParams r = new GridView.LayoutParams(232, 270);\n    v.setLayoutParams(r);\n    v.setPadding(8, 0, 8, 8);\n    v.setGravity(Gravity.CENTER);\n    if (position < jawns.length) {\n      if (getJawnAt(position).getType() == 'S') {\n        Spark spark = getJawnAt(position).getSelfSpark();\n        char con = spark.getContentType();\n        View contentView = null;\n        LinearLayout sparkInfo = new LinearLayout(mContext);\n        sparkInfo.setOrientation(LinearLayout.VERTICAL);\n        sparkInfo.setBackgroundColor(Color.WHITE);\n        sparkInfo.setLayoutParams(\n            new LinearLayout.LayoutParams(\n                LinearLayout.LayoutParams.FILL_PARENT, LinearLayout.LayoutParams.FILL_PARENT));\n        sparkInfo.setGravity(Gravity.CENTER);\n        sparkInfo.setPadding(8, 0, 8, 8);\n        sparkInfo.setId(SPARK_INFO_ID);\n\n        if (con == \"P\".charAt(0)) {\n          FrameLayout frameLayout = new FrameLayout(mContext);\n          frameLayout.setLayoutParams(new FrameLayout.LayoutParams(image_size, image_size));\n          Drawable imageSymbol = mContext.getResources().getDrawable(R.drawable.symbol_image);\n          imageSymbol.setAlpha(155);\n          frameLayout.setForeground(imageSymbol);\n          frameLayout.setForegroundGravity(Gravity.CENTER);\n          frameLayout.setBackgroundResource(R.drawable.spark_content_bg);\n          frameLayout.setPadding(4, 4, 4, 4);\n\n          ImageView imageView;\n          imageView = new ImageView(mContext);\n          imageView.setLayoutParams(new FrameLayout.LayoutParams(image_size, image_size));\n          imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n\n          /*\n           * This part needs to be updated with the S3 link:\n           * Get spark bitmap and set it as resource\n           */\n          if (spark.getBitmap() != null) {\n            // multimediaLoaded.set(position, true);\n            imageView.setImageBitmap(spark.getBitmap());\n            frameLayout.addView(imageView);\n          } else {\n            ProgressBar pb = new ProgressBar(mContext);\n            pb.setPadding(50, 50, 50, 50);\n            frameLayout.addView(pb);\n          }\n\n          contentView = frameLayout;\n\n        } else if (con == \"V\".charAt(0)) {\n          FrameLayout frameLayout = new FrameLayout(mContext);\n          frameLayout.setLayoutParams(new FrameLayout.LayoutParams(image_size, image_size));\n          Drawable imageSymbol = mContext.getResources().getDrawable(R.drawable.symbol_video);\n          imageSymbol.setAlpha(155);\n          frameLayout.setForeground(imageSymbol);\n          frameLayout.setForegroundGravity(Gravity.CENTER);\n          frameLayout.setBackgroundResource(R.drawable.spark_content_bg);\n          frameLayout.setPadding(4, 4, 4, 4);\n\n          /*\n           * Normally within an app, embedded Youtube videos either begin playing or launch the Youtube app on click\n           * Within the spark grid, we don't need that functionality\n           * Therefore the manifestation of the video will just be a thumbnail (in the grid)\n           * The thumbnail will need to be received from the Youtube API, however\n           * In the Detail View, it will be a normal, dynamic video\n           */\n\n          ImageView imageView;\n          imageView = new ImageView(mContext);\n          imageView.setLayoutParams(new FrameLayout.LayoutParams(image_size, image_size));\n          imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n\n          /*\n           * This part needs to be updated with the youtube API\n           * Something like setImageResource(youtubeAPI.getThumbnail())\n           */\n\n          if (spark.getBitmap() != null) {\n            // multimediaLoaded.set(position, true);\n            imageView.setImageBitmap(spark.getBitmap());\n            frameLayout.addView(imageView);\n          } else {\n            ProgressBar pb = new ProgressBar(mContext);\n            pb.setPadding(50, 50, 50, 50);\n            frameLayout.addView(pb);\n          }\n\n          contentView = frameLayout;\n\n        } else if (con == \"A\".charAt(0)) {\n          /*\n           * Audio is pretty much the same deal as the Video.\n           * It's a little different in that most of the soundcloud generated thumbnails are gonna be pretty similar.\n           *\n           * First make the title:\n           * Uncomment this and clean it up once it's working:\n           * String audioTitle = soundcloudAPI.getTrackTitle();\n           * headerTitle.setText(\"Audio: \"+audioTitle, 0, Math.min(audioTitle.length(), 100);\n           */\n          String audioTitle = spark.getContent();\n\n          FrameLayout frameLayout = new FrameLayout(mContext);\n          frameLayout.setLayoutParams(new FrameLayout.LayoutParams(image_size, image_size));\n          Drawable imageSymbol = mContext.getResources().getDrawable(R.drawable.symbol_video);\n          imageSymbol.setAlpha(155);\n          frameLayout.setForeground(imageSymbol);\n          frameLayout.setForegroundGravity(Gravity.CENTER);\n          frameLayout.setBackgroundResource(R.drawable.spark_content_bg);\n          frameLayout.setPadding(4, 4, 4, 4);\n\n          /*\n           * Then add the thumbnail:\n           */\n          /*ImageView imageView;\n          imageView = new ImageView(mContext);\n          imageView.setLayoutParams(new FrameLayout.LayoutParams(image_size, image_size));\n          imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n          frameLayout.addView(imageView);\n          frameLayout.setBackgroundResource(R.drawable.spark_content_bg);\n          frameLayout.setPadding(4, 4, 4, 4);*/\n\n          /*\n           * Placeholder until Soundcloud API is working\n           */\n          // imageView.setImageResource(R.drawable.btn_blue_audio);\n          TextView t = new TextView(mContext);\n          t.setText(spark.getContent());\n          t.setGravity(Gravity.CENTER_HORIZONTAL);\n          t.setPadding(4, 4, 4, 4);\n          t.setTextSize(15f);\n          frameLayout.addView(t);\n\n          // multimediaLoaded.set(position, true);\n          contentView = frameLayout;\n\n        } else if (con == \"T\".charAt(0)) {\n          FrameLayout frameLayout = new FrameLayout(mContext);\n          frameLayout.setLayoutParams(new FrameLayout.LayoutParams(image_size, image_size));\n          frameLayout.setBackgroundResource(R.drawable.spark_content_bg);\n          frameLayout.setPadding(4, 4, 4, 4);\n\n          TextView textview;\n          textview = new TextView(mContext);\n          textview.setLayoutParams(new FrameLayout.LayoutParams(image_size, image_size));\n          textview.setPadding(4, 4, 4, 4);\n          textview.setTextSize(20);\n\n          String content = spark.getContent();\n          textview.setText(content.toCharArray(), 0, Math.min(200, content.length()));\n\n          frameLayout.addView(textview);\n\n          // multimediaLoaded.set(position, true);\n          contentView = frameLayout;\n\n        } else if (con == \"C\".charAt(0)) {\n          /*\n           * At the moment, code snippets are handled just like text. Eventually they will make use of Github\n           */\n          FrameLayout frameLayout = new FrameLayout(mContext);\n          frameLayout.setLayoutParams(new FrameLayout.LayoutParams(image_size, image_size));\n          frameLayout.setBackgroundResource(R.drawable.spark_content_bg);\n          frameLayout.setPadding(4, 4, 4, 4);\n\n          ImageView imageView;\n          imageView = new ImageView(mContext);\n          imageView.setLayoutParams(new FrameLayout.LayoutParams(image_size, image_size));\n          imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n\n          if (spark.getBitmap() != null) {\n            // multimediaLoaded.set(position, true);\n            imageView.setImageBitmap(spark.getBitmap());\n            frameLayout.addView(imageView);\n          } else {\n            ProgressBar pb = new ProgressBar(mContext);\n            pb.setPadding(50, 50, 50, 50);\n            frameLayout.addView(pb);\n          }\n\n          contentView = frameLayout;\n\n        } else if (con == \"L\".charAt(0)) {\n          /*\n           * Not sure how to handle this one\n           * In the mockup, Colin had it as a screenshot of the page.\n           * IF that proves too difficult to generate, we can also use the fav_icon with the website\n           * Either way, it looks like it'll turn out similar to the soundcloud implementation\n           */\n\n          /*\n           * First make the title:\n           * Get the page title\n           * something like \"Wikipedia - Kittens\"\n           */\n\n          FrameLayout frameLayout = new FrameLayout(mContext);\n          frameLayout.setLayoutParams(new FrameLayout.LayoutParams(image_size, image_size));\n          Drawable imageSymbol = mContext.getResources().getDrawable(R.drawable.symbol_link);\n          imageSymbol.setAlpha(155);\n          frameLayout.setForeground(imageSymbol);\n          frameLayout.setForegroundGravity(Gravity.CENTER);\n          frameLayout.setBackgroundResource(R.drawable.spark_content_bg);\n          frameLayout.setPadding(4, 4, 4, 4);\n\n          ImageView imageView;\n          imageView = new ImageView(mContext);\n          imageView.setLayoutParams(new FrameLayout.LayoutParams(image_size, image_size));\n          imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n\n          /*\n           * This is what will be set to the favicon or the screenshot:\n           */\n          if (spark.getBitmap() != null) {\n            // multimediaLoaded.set(position, true);\n            imageView.setImageBitmap(spark.getBitmap());\n            frameLayout.addView(imageView);\n          } else {\n            ProgressBar pb = new ProgressBar(mContext);\n            pb.setPadding(50, 50, 50, 50);\n            frameLayout.addView(pb);\n          }\n\n          contentView = frameLayout;\n        }\n\n        if (contentView != null) {\n          // Attach content:\n          sparkInfo.addView(contentView);\n\n          // Attach user info:\n          String user = \"by \";\n          if (spark.getUsername() != null) {\n            user += spark.getUsername();\n          } else {\n            user += \"an unknown user\";\n          }\n          TextView userInfo = new TextView(mContext);\n          userInfo.setText(user);\n          sparkInfo.addView(userInfo);\n\n          // Attach date info:\n          String dateString = spark.getDate();\n          TextView dateInfo = new TextView(mContext);\n          try {\n            Date date = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\").parse(dateString);\n            String formattedDate = new SimpleDateFormat(\"h:ma; MMMM dd, yyyy\").format(date);\n            dateInfo.setText(formattedDate);\n          } catch (ParseException e) {\n            dateInfo.setText(\"Unknown date\");\n          }\n          sparkInfo.addView(dateInfo);\n\n          // Attach ribbon:\n          ImageView ribbon = new ImageView(mContext);\n          char sparkType = spark.getSparkType();\n          if (sparkType == \"W\".charAt(0)) {\n            ribbon.setImageResource(R.drawable.ribbon_whatif);\n            sparkInfo.setBackgroundResource(R.drawable.spark_what_if_bg);\n          } else if (sparkType == \"P\".charAt(0)) {\n            ribbon.setImageResource(R.drawable.ribbon_problem);\n            sparkInfo.setBackgroundResource(R.drawable.spark_problem_bg);\n          } else if (sparkType == \"I\".charAt(0)) {\n            ribbon.setImageResource(R.drawable.ribbon_inspiration);\n            sparkInfo.setBackgroundResource(R.drawable.spark_inspiration_bg);\n          }\n\n          RelativeLayout.LayoutParams ribbonPosition = new RelativeLayout.LayoutParams(30, 40);\n          ribbonPosition.addRule(RelativeLayout.ALIGN_TOP, SPARK_INFO_ID);\n          ribbonPosition.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);\n          ribbon.setLayoutParams(ribbonPosition);\n\n          v.addView(sparkInfo);\n          v.addView(ribbon);\n        } else {\n          TextView t = new TextView(mContext);\n          t.setText(\"Error with this one\");\n          Log.v(\"Content Type\", String.valueOf(spark.getContentType()));\n          v.addView(t);\n        }\n\n      } else if (getJawns()[position].getType() == 'I') {\n        // multimediaLoaded.set(position, true);\n\n        Idea idea = getJawnAt(position).getSelfIdea();\n        View contentView = null;\n        LinearLayout ideaInfo = new LinearLayout(mContext);\n        ideaInfo.setOrientation(LinearLayout.VERTICAL);\n        ideaInfo.setBackgroundColor(Color.WHITE);\n        ideaInfo.setLayoutParams(\n            new LinearLayout.LayoutParams(\n                LinearLayout.LayoutParams.FILL_PARENT, LinearLayout.LayoutParams.FILL_PARENT));\n        ideaInfo.setGravity(Gravity.CENTER);\n\n        FrameLayout frameLayout = new FrameLayout(mContext);\n        frameLayout.setLayoutParams(new FrameLayout.LayoutParams(image_size, image_size));\n        frameLayout.setForegroundGravity(Gravity.CENTER);\n        frameLayout.setBackgroundResource(R.drawable.spark_content_bg);\n\n        LayoutInflater inflater = LayoutInflater.from(mContext);\n        LinearLayout grid = null;\n        if (idea.getSparks() != null) {\n          int id = -1;\n          if (idea.getSparks().length == 1) {\n            id = R.layout.idea_grid_1;\n          } else if (idea.getSparks().length == 2) {\n            id = R.layout.idea_grid_2;\n          } else if (idea.getSparks().length >= 3) {\n            id = R.layout.idea_grid_3;\n          }\n          grid = (LinearLayout) inflater.inflate(id, null);\n          loadSparkToIdea(idea.getSparks(), grid);\n          ((TextView) grid.findViewById(R.id.idea_title_textview)).setText(idea.getDescription());\n          frameLayout.addView(grid);\n        } else {\n          ProgressBar pb = new ProgressBar(mContext);\n          pb.setPadding(50, 50, 50, 50);\n          frameLayout.addView(pb);\n        }\n\n        contentView = frameLayout;\n\n        // Attach content\n        ideaInfo.addView(contentView);\n\n        // Attach user info:\n        TextView userInfo = new TextView(mContext);\n        String user = \"an unknown user\";\n        if (idea.getUsername() != null) {\n          user = idea.getUsername();\n        }\n        userInfo.setText(\"by \" + user);\n        userInfo.setPadding(8, 0, 8, 0);\n        ideaInfo.addView(userInfo);\n\n        // Attach date info:\n        String date = idea.getCreatedAt();\n        String a = \"a\";\n        TextView dateInfo = new TextView(mContext);\n        dateInfo.setText(date);\n        dateInfo.setPadding(8, 0, 8, 0);\n        ideaInfo.addView(dateInfo);\n\n        ideaInfo.setBackgroundResource(R.drawable.idea_bg);\n\n        v.addView(ideaInfo);\n      }\n    } else {\n      MainActivity ma = (MainActivity) mContext;\n      if (ma.getIndexGrid() != null) {\n        if (ma.getIndexGrid().getScrollListener() != null) {\n          if (!ma.getIndexGrid().getScrollListener().hasReachedEnd()) {\n            v.addView(new ProgressBar(mContext));\n          }\n        }\n      }\n    }\n    return v;\n  }\n"}, {"dataset": "addView", "exampleID": 4809, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1709], "initializationEnd": [1734], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1744, 2033], "configurationEnd": [1810, 2080], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1648, "guardExpressionEnd": 1669, "guardBlockStart": 1648, "guardBlockEnd": 2866, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 2094, "focalAPIEnd": 2125, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2196, 2241], "useEnd": [2227, 2288], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dodyg/AndroidRivers/tree/master/HoloEverywhere-master/library/src/org/holoeverywhere/widget/ListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n    if (mDropDownList == null) {\n      Context context = mContext;\n      mShowDropDownRunnable =\n          new Runnable() {\n            @Override\n            public void run() {\n              View view = getAnchorView();\n              if (view != null && view.getWindowToken() != null) {\n                show();\n              }\n            }\n          };\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            @Override\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            @Override\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n      dropDownView = mDropDownList;\n      View hintView = mPromptView;\n      if (hintView != null) {\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(android.widget.LinearLayout.VERTICAL);\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n          default:\n            Log.e(ListPopupWindow.TAG, \"Invalid hint position \" + mPromptPosition);\n            break;\n        }\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n        dropDownView = hintContainer;\n      }\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    } else {\n      mTempRect.setEmpty();\n    }\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight =\n        getMaxAvailableHeight(getAnchorView(), mDropDownVerticalOffset, ignoreBottomDecorations);\n    if (mDropDownAlwaysVisible || mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n    final int childWidthSpec;\n    switch (mDropDownWidth) {\n      case ViewGroup.LayoutParams.WRAP_CONTENT:\n        childWidthSpec =\n            MeasureSpec.makeMeasureSpec(\n                mContext.getResources().getDisplayMetrics().widthPixels\n                    - (mTempRect.left + mTempRect.right),\n                MeasureSpec.AT_MOST);\n        break;\n      case ViewGroup.LayoutParams.MATCH_PARENT:\n        childWidthSpec =\n            MeasureSpec.makeMeasureSpec(\n                mContext.getResources().getDisplayMetrics().widthPixels\n                    - (mTempRect.left + mTempRect.right),\n                MeasureSpec.EXACTLY);\n        break;\n      default:\n        childWidthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.EXACTLY);\n        break;\n    }\n    final int listContent =\n        measureHeightOfChildren(childWidthSpec, 0, -1, maxHeight - otherHeights, -1);\n    if (listContent > 0) {\n      otherHeights += padding;\n    }\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4810, "initialization": ["View child = new View(*)"], "initializationStart": [168], "initializationEnd": [182], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.setBackgroundDrawable(BitmapDrawable)", "child.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [334, 370], "configurationEnd": [363, 477], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 483, "focalAPIEnd": 503, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/development/tree/master/samples/ApiDemos/src/com/example/android/apis/graphics/DensityActivity.java", "rawCode": "  private void addBitmapDrawable(LinearLayout layout, int resource, boolean scale) {\n    Bitmap bitmap;\n    bitmap = loadAndPrintDpi(resource, scale);\n\n    View view = new View(this);\n\n    final BitmapDrawable d = new BitmapDrawable(getResources(), bitmap);\n    if (!scale) d.setTargetDensity(getResources().getDisplayMetrics());\n    view.setBackgroundDrawable(d);\n\n    view.setLayoutParams(\n        new LinearLayout.LayoutParams(d.getIntrinsicWidth(), d.getIntrinsicHeight()));\n    layout.addView(view);\n  }\n"}, {"dataset": "addView", "exampleID": 4811, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/neeraj2608/realtrack/tree/master/libs/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4812, "initialization": ["View child = inflate(*,*,boolean)"], "initializationStart": [732], "initializationEnd": [819], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.getChildCount()", "linearLayout.getChildAt(int)", "linearLayout.removeViewAt(int)", "child.findViewById(int)", "child.findViewById(int)"], "configurationStart": [194, 441, 585, 862, 1020], "configurationEnd": [220, 465, 611, 912, 1074], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1119, "focalAPIEnd": 1143, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.getChildCount()", "linearLayout.removeViewAt(int)", "linearLayout.getChildAt(int)"], "useStart": [1269, 1334, 1541], "useEnd": [1295, 1371, 1565], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/java/android/app/FragmentBreadCrumbs.java", "rawCode": "  void updateCrumbs() {\n    FragmentManager fm = mActivity.getFragmentManager();\n    int numEntries = fm.getBackStackEntryCount();\n    int numPreEntries = getPreEntryCount();\n    int numViews = mContainer.getChildCount();\n    for (int i = 0; i < numEntries + numPreEntries; i++) {\n      BackStackEntry bse =\n          i < numPreEntries ? getPreEntry(i) : fm.getBackStackEntryAt(i - numPreEntries);\n      if (i < numViews) {\n        View v = mContainer.getChildAt(i);\n        Object tag = v.getTag();\n        if (tag != bse) {\n          for (int j = i; j < numViews; j++) {\n            mContainer.removeViewAt(i);\n          }\n          numViews = i;\n        }\n      }\n      if (i >= numViews) {\n        final View item =\n            mInflater.inflate(com.android.internal.R.layout.fragment_bread_crumb_item, this, false);\n        final TextView text = (TextView) item.findViewById(com.android.internal.R.id.title);\n        text.setText(bse.getBreadCrumbTitle());\n        text.setTag(bse);\n        if (i == 0) {\n          item.findViewById(com.android.internal.R.id.left_icon).setVisibility(View.GONE);\n        }\n        mContainer.addView(item);\n        text.setOnClickListener(mOnClickListener);\n      }\n    }\n    int viewI = numEntries + numPreEntries;\n    numViews = mContainer.getChildCount();\n    while (numViews > viewI) {\n      mContainer.removeViewAt(numViews - 1);\n      numViews--;\n    }\n    // Adjust the visibility and availability of the bread crumbs and divider\n    for (int i = 0; i < numViews; i++) {\n      final View child = mContainer.getChildAt(i);\n      // Disable the last one\n      child.findViewById(com.android.internal.R.id.title).setEnabled(i < numViews - 1);\n      if (mMaxVisible > 0) {\n        // Make only the last mMaxVisible crumbs visible\n        child.setVisibility(i < numViews - mMaxVisible ? View.GONE : View.VISIBLE);\n        final View leftIcon = child.findViewById(com.android.internal.R.id.left_icon);\n        // Remove the divider for all but the last mMaxVisible - 1\n        leftIcon.setVisibility(i > numViews - mMaxVisible && i != 0 ? View.VISIBLE : View.GONE);\n      }\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4813, "initialization": ["LinearLayout linearLayout = getSystemService(*)"], "initializationStart": [9858], "initializationEnd": [9907], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.findViewById(int)", "linearLayout.findViewById(int)", "linearLayout.findViewById(int)", "linearLayout.findViewById(int)", "linearLayout.findViewById(int)", "linearLayout.setTag(*,*)"], "configurationStart": [7986, 8120, 8258, 8587, 8818, 8924], "configurationEnd": [8024, 8160, 8297, 8631, 8864, 9004], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 10187, "focalAPIEnd": 10228, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.setOnClickListener(OnClickListener)", "linearLayout.setOnLongClickListener(OnLongClickListener)", "linearLayout.setClickable(boolean)", "linearLayout.addView(View)", "addApprovedVoidPaymentProperies(linearLayout)", "LinearLayout.addView(linearLayout)", "linearLayout.findViewById(int)", "linearLayout.findViewById(int)", "linearLayout.findViewById(int)", "LinearLayout.addView(linearLayout)"], "useStart": [10242, 10286, 10334, 10790, 10845, 10940, 11764, 11980, 12056, 12319], "useEnd": [10272, 10320, 10359, 10831, 10883, 10971, 11802, 12020, 12096, 12342], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ramesesinc/clfc/tree/master/platform/android/PaymentCollectionApp/src/com/rameses/paymentcollectionapp/CollectionSheetInfo.java", "rawCode": "  @Override\n  protected void onStart() {\n    super.onStart();\n    getApp().setCurrentActivity(this);\n    SQLiteDatabase db = getDbHelper().getReadableDatabase();\n    Cursor result = getDbHelper().getCollectionsheetByLoanappid(db, loanappid);\n    db.close();\n\n    String acctname = \"\";\n    String appno = \"\";\n    BigDecimal amountdue = new BigDecimal(\"0\").setScale(2);\n    BigDecimal loanamount = new BigDecimal(\"0\").setScale(2);\n    BigDecimal balance = new BigDecimal(\"0\").setScale(2);\n    BigDecimal interest = new BigDecimal(\"0\").setScale(2);\n    BigDecimal penalty = new BigDecimal(\"0\").setScale(2);\n    BigDecimal others = new BigDecimal(\"0\").setScale(2);\n    int term = 0;\n    String duedate = \"\";\n    String homeaddress = \"\";\n    String collectionaddress = \"\";\n\n    if (result != null && result.getCount() > 0) {\n      result.moveToFirst();\n      sessionid = result.getString(result.getColumnIndex(\"sessionid\"));\n      acctname = result.getString(result.getColumnIndex(\"acctname\"));\n      appno = result.getString(result.getColumnIndex(\"appno\"));\n      String amt = result.getString(result.getColumnIndex(\"amountdue\"));\n      amountdue = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"loanamount\"));\n      loanamount = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"balance\"));\n      balance = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"dailydue\"));\n      dailydue = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"overpaymentamount\"));\n      overpayment = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"interest\"));\n      interest = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"penalty\"));\n      penalty = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"others\"));\n      others = new BigDecimal(amt).setScale(2);\n      term = result.getInt(result.getColumnIndex(\"term\"));\n      refno = result.getString(result.getColumnIndex(\"refno\"));\n      homeaddress = result.getString(result.getColumnIndex(\"homeaddress\"));\n      collectionaddress = result.getString(result.getColumnIndex(\"collectionaddress\"));\n      Calendar c = Calendar.getInstance();\n      try {\n        Object date = result.getString(result.getColumnIndex(\"duedate\"));\n        if (!(date instanceof Date))\n          date = new SimpleDateFormat(\"yyyy-MM-dd\").parse(date.toString());\n        c.setTime((Date) date);\n      } catch (Exception e) {\n        ApplicationUtil.showShortMsg(context, \"Error: ParseException\");\n      }\n      /*catch (Exception e) {\n      e.printStackTrace();\n      Toast.makeText(context, \"Error: ParseException\", Toast.LENGTH_SHORT).show();\n      }*/\n      duedate = df.format(c.getTime());\n      totaldays = amountdue.divide(dailydue, 2, BigDecimal.ROUND_HALF_UP).intValue();\n      if (paymenttype.equals(null) || paymenttype.equals(\"\"))\n        paymenttype = result.getString(result.getColumnIndex(\"paymentmethod\"));\n      result.close();\n    }\n\n    ((TextView) findViewById(R.id.tv_info_acctname)).setText(acctname);\n    ((TextView) findViewById(R.id.tv_info_appno)).setText(appno);\n    ((TextView) findViewById(R.id.tv_info_loanamount)).setText(formatValue(loanamount));\n    ((TextView) findViewById(R.id.tv_info_balance)).setText(formatValue(balance));\n    ((TextView) findViewById(R.id.tv_info_dailydue)).setText(formatValue(dailydue));\n    ((TextView) findViewById(R.id.tv_info_amountdue)).setText(formatValue(amountdue));\n    ((TextView) findViewById(R.id.tv_info_overpayment)).setText(formatValue(overpayment));\n    ((TextView) findViewById(R.id.tv_info_duedate)).setText(duedate);\n    ((TextView) findViewById(R.id.tv_info_homeaddress)).setText(homeaddress);\n    ((TextView) findViewById(R.id.tv_info_collectionaddress)).setText(collectionaddress);\n    ((TextView) findViewById(R.id.tv_info_interest)).setText(formatValue(interest));\n    ((TextView) findViewById(R.id.tv_info_penalty)).setText(formatValue(penalty));\n    ((TextView) findViewById(R.id.tv_info_others)).setText(formatValue(others));\n    ((TextView) findViewById(R.id.tv_info_term)).setText(term + \" days\");\n\n    db = getDbHelper().getReadableDatabase();\n    payment = getDbHelper().getPaymentsByAppid(db, loanappid);\n    remarks = getDbHelper().getRemarksByAppid(db, loanappid);\n    notes = getDbHelper().getNotesByAppid(db, loanappid);\n    db.close();\n\n    rl_remarks.setVisibility(View.GONE);\n    RelativeLayout remarks_child = (RelativeLayout) findViewById(R.id.rl_info_remarks);\n    remarks_child.setClickable(true);\n    remarks_child.setOnClickListener(\n        new View.OnClickListener() {\n          @Override\n          public void onClick(View v) {\n            // TODO Auto-generated method stub\n            v.setBackgroundResource(android.R.drawable.list_selector_background);\n          }\n        });\n    remarks_child.setOnLongClickListener(\n        new View.OnLongClickListener() {\n          @Override\n          public boolean onLongClick(View v) {\n            // TODO Auto-generated method stub\n            final View view = v;\n            v.setBackgroundResource(android.R.drawable.list_selector_background);\n            CharSequence[] items = {\"Edit Remarks\", \"Remove Remarks\"};\n            DialogInterface.OnClickListener listener =\n                new DialogInterface.OnClickListener() {\n                  @Override\n                  public void onClick(DialogInterface d, int which) {\n                    // TODO Auto-generated method stub\n                    if (which == 0) {\n                      showRemarksDialog(\"edit\");\n                    } else if (which == 1) {\n                      SQLiteDatabase db = getDbHelper().getWritableDatabase();\n                      /*try {\n                      Map<String, Object> params = new HashMap<String, Object>();\n                      params.put(\"detailid\", detailid);\n                      postingProxy.invoke(\"removeRemarks\", new Object[]{params});\n                      } catch (Exception e) {}\n                      finally{\n                      db.removeRemarksByAppid(loanappid);\n                      }*/\n                      getDbHelper().removeRemarksByAppid(db, loanappid);\n                      Map<String, Object> map = new HashMap<String, Object>();\n                      map.put(\"loanappid\", loanappid);\n                      map.put(\"state\", \"PENDING\");\n                      map.put(\"longitude\", getApp().getLongitude());\n                      map.put(\"latitude\", getApp().getLatitude());\n                      getDbHelper().insertRemarksRemoved(db, map);\n                      db.close();\n                      remarks = null;\n                      rl_remarks.setVisibility(View.GONE);\n                      ApplicationUtil.showShortMsg(context, \"Successfully removed remarks.\");\n                    }\n                  }\n                };\n            ApplicationUtil.showOptionDialog(context, items, listener);\n            return false;\n          }\n        });\n    if (remarks != null && remarks.getCount() > 0) {\n      rl_remarks.setVisibility(View.VISIBLE);\n      ((TextView) findViewById(R.id.tv_info_remarks))\n          .setText(remarks.getString(remarks.getColumnIndex(\"remarks\")));\n    }\n\n    // ListView lv_info_payments = (ListView) findViewById(R.id.lv_info_payments);\n    LinearLayout ll_info_payments = (LinearLayout) findViewById(R.id.ll_specialcollection);\n    ll_info_payments.removeAllViewsInLayout();\n    rl_payment.setVisibility(View.GONE);\n\n    if (payment != null && payment.getCount() > 0) {\n      View child = null;\n      String paymenttype = \"\";\n      BigDecimal paymentamount = new BigDecimal(\"0\").setScale(2);\n      rl_payment.setVisibility(View.VISIBLE);\n      do {\n        child =\n            ((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE))\n                .inflate(R.layout.item_payment, null);\n        ((TextView) child.findViewById(R.id.tv_info_refno))\n            .setText(payment.getString(payment.getColumnIndex(\"refno\")));\n        ((TextView) child.findViewById(R.id.tv_info_txndate))\n            .setText(payment.getString(payment.getColumnIndex(\"txndate\")));\n        ((TextView) child.findViewById(R.id.tv_info_paidby))\n            .setText(payment.getString(payment.getColumnIndex(\"paidby\")));\n        String type = payment.getString(payment.getColumnIndex(\"paymenttype\"));\n        if (type.equals(\"schedule\")) paymenttype = \"Schedule/Advance\";\n        else paymenttype = \"Overpayment\";\n        ((TextView) child.findViewById(R.id.tv_info_paymenttype)).setText(paymenttype);\n        String amt = payment.getDouble(payment.getColumnIndex(\"paymentamount\")) + \"\";\n        paymentamount = new BigDecimal(amt).setScale(2);\n        ((TextView) child.findViewById(R.id.tv_info_paymentamount))\n            .setText(formatValue(paymentamount));\n        child.setTag(R.id.paymentid, payment.getString(payment.getColumnIndex(\"objid\")));\n        addPaymentProperties(child);\n        db = getDbHelper().getReadableDatabase();\n        Cursor vp =\n            getDbHelper()\n                .getVoidPaymentByPaymentidAndAppid(\n                    db, payment.getString(payment.getColumnIndex(\"objid\")), loanappid);\n        db.close();\n\n        if (vp != null && vp.getCount() > 0) {\n          vp.moveToFirst();\n          String state = vp.getString(vp.getColumnIndex(\"state\"));\n          View overlay = null;\n          RelativeLayout.LayoutParams layoutParams =\n              new RelativeLayout.LayoutParams(\n                  RelativeLayout.LayoutParams.MATCH_PARENT,\n                  RelativeLayout.LayoutParams.MATCH_PARENT);\n          layoutParams.addRule(RelativeLayout.CENTER_VERTICAL, 1);\n          if (state.equals(\"PENDING\")) {\n            overlay =\n                ((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE))\n                    .inflate(R.layout.overlay_void_text, null);\n            ((TextView) overlay).setTextColor(getResources().getColor(R.color.red));\n            ((TextView) overlay).setText(\"VOID REQUEST PENDING\");\n            overlay.setLayoutParams(layoutParams);\n            ((RelativeLayout) child).addView(overlay);\n            child.setOnClickListener(null);\n            child.setOnLongClickListener(null);\n            child.setClickable(false);\n          } else if (state.equals(\"APPROVED\")) {\n            overlay =\n                ((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE))\n                    .inflate(R.layout.overlay_void_text, null);\n            ((TextView) overlay).setTextColor(getResources().getColor(R.color.green));\n            ((TextView) overlay).setText(\"VOID APPROVED\");\n            overlay.setLayoutParams(layoutParams);\n            ((RelativeLayout) child).addView(overlay);\n            addApprovedVoidPaymentProperies(child);\n          }\n          // vp.close();\n        }\n        ll_info_payments.addView(child);\n        // list.add(pp);\n      } while (payment.moveToNext());\n    }\n\n    rl_notes.setVisibility(View.GONE);\n    LinearLayout ll_notes = (LinearLayout) findViewById(R.id.ll_info_notes);\n    if (notes != null && notes.getCount() > 0) {\n      rl_notes.setVisibility(View.VISIBLE);\n      notes.moveToFirst();\n      ll_notes.removeAllViewsInLayout();\n      View child = null;\n      Date date = null;\n      String str = \"\";\n      int idx = 0;\n      do {\n        child =\n            ((LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE))\n                .inflate(R.layout.item_note, null);\n        // addNoteProperties(child);\n        str = \"\";\n        date = parseDate(notes.getString(notes.getColumnIndex(\"fromdate\")));\n        if (date != null) str = df.format(date);\n        ((TextView) child.findViewById(R.id.tv_info_refno)).setText(str);\n        str = \"\";\n        date = parseDate(notes.getString(notes.getColumnIndex(\"todate\")));\n        if (date != null) str = df.format(date);\n        ((TextView) child.findViewById(R.id.tv_info_txndate)).setText(str);\n        ((TextView) child.findViewById(R.id.tv_info_remarks))\n            .setText(notes.getString(notes.getColumnIndex(\"remarks\")));\n        // child.setTag(R.id.noteid, notes.getString(notes.getColumnIndex(\"objid\")));\n        // child.setTag(R.id.idx, idx);\n        idx++;\n        ll_notes.addView(child);\n      } while (notes.moveToNext());\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4814, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1709], "initializationEnd": [1734], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1744, 2033], "configurationEnd": [1810, 2080], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1648, "guardExpressionEnd": 1669, "guardBlockStart": 1648, "guardBlockEnd": 2866, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 2094, "focalAPIEnd": 2125, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2196, 2241], "useEnd": [2227, 2288], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Prototik/HoloEverywhere/tree/master/library/src/org/holoeverywhere/widget/ListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n    if (mDropDownList == null) {\n      Context context = mContext;\n      mShowDropDownRunnable =\n          new Runnable() {\n            @Override\n            public void run() {\n              View view = getAnchorView();\n              if (view != null && view.getWindowToken() != null) {\n                show();\n              }\n            }\n          };\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            @Override\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            @Override\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n      dropDownView = mDropDownList;\n      View hintView = mPromptView;\n      if (hintView != null) {\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(android.widget.LinearLayout.VERTICAL);\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n          default:\n            Log.e(ListPopupWindow.TAG, \"Invalid hint position \" + mPromptPosition);\n            break;\n        }\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n        dropDownView = hintContainer;\n      }\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    } else {\n      mTempRect.setEmpty();\n    }\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight =\n        getMaxAvailableHeight(getAnchorView(), mDropDownVerticalOffset, ignoreBottomDecorations);\n    if (mDropDownAlwaysVisible || mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n    final int childWidthSpec;\n    switch (mDropDownWidth) {\n      case ViewGroup.LayoutParams.WRAP_CONTENT:\n        childWidthSpec =\n            MeasureSpec.makeMeasureSpec(\n                mContext.getResources().getDisplayMetrics().widthPixels\n                    - (mTempRect.left + mTempRect.right),\n                MeasureSpec.AT_MOST);\n        break;\n      case ViewGroup.LayoutParams.MATCH_PARENT:\n        childWidthSpec =\n            MeasureSpec.makeMeasureSpec(\n                mContext.getResources().getDisplayMetrics().widthPixels\n                    - (mTempRect.left + mTempRect.right),\n                MeasureSpec.EXACTLY);\n        break;\n      default:\n        childWidthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.EXACTLY);\n        break;\n    }\n    final int listContent =\n        measureHeightOfChildren(childWidthSpec, 0, -1, maxHeight - otherHeights, -1);\n    if (listContent > 0) {\n      otherHeights += padding;\n    }\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4815, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)", "View child = new View(Context)"], "initializationStart": [1826, 2243], "initializationEnd": [1845, 2254], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "child.setLayoutParams(LinearLayout.LayoutParams)", "child.setBackgroundColor(int)", "linearLayout.addView(TextView)"], "configurationStart": [1746, 2260, 2344, 2398], "configurationEnd": [1801, 2338, 2391, 2429], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 2435, "focalAPIEnd": 2474, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(TextView)", "LinearLayout.addView(linearLayout)"], "useStart": [2480, 2618], "useEnd": [2507, 2646], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ThinksInBits/OU-Mobile-App/tree/master/src/com/geared/ou/GetStringDialogFragment.java", "rawCode": "  @Override\n  public View onCreateView(\n      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    a = (NewsActivity) getActivity();\n    c = a.getApplicationContext();\n    app = (OUApplication) a.getApplication();\n    getDialog().setTitle(title);\n\n    mTextField = new EditText(c);\n    mTextField.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 55));\n    mTextField.setTextSize(20);\n    mTextField.setPadding(10, 0, 5, 0);\n    mTextField.setText(oldData);\n    mTextField.setTextColor(Color.BLACK);\n    if (title == getResources().getString(R.string.password))\n      mTextField.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);\n\n    TextView ok = new TextView(c);\n    TextView cancel = new TextView(c);\n\n    ok.setLayoutParams(\n        new TableRow.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));\n    cancel.setLayoutParams(\n        new TableRow.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 0.5f));\n\n    ok.setBackgroundResource(R.drawable.content_list_button_selector);\n    ok.setText(R.string.ok);\n    ok.setOnClickListener(this);\n    ok.setId(OK_BUTTON);\n    ok.setClickable(true);\n    ok.setTextColor(Color.BLACK);\n    ok.setTextSize(14);\n    ok.setGravity(Gravity.CENTER);\n    ok.setPadding(0, 20, 0, 20);\n\n    cancel.setBackgroundResource(R.drawable.content_list_button_selector);\n    cancel.setText(R.string.cancel);\n    cancel.setOnClickListener(this);\n    cancel.setId(CANCEL_BUTTON);\n    cancel.setClickable(true);\n    cancel.setTextColor(Color.BLACK);\n    cancel.setTextSize(14);\n    cancel.setGravity(Gravity.CENTER);\n    cancel.setPadding(0, 20, 0, 20);\n\n    LinearLayout buttonContainer = new LinearLayout(c);\n    buttonContainer.setOrientation(LinearLayout.HORIZONTAL);\n    LinearLayout tlc = new LinearLayout(c);\n    tlc.setOrientation(LinearLayout.VERTICAL);\n\n    View horizontalSpacer = new View(c);\n    horizontalSpacer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 1));\n    horizontalSpacer.setBackgroundColor(Color.LTGRAY);\n\n    View horizontalSpacerBlank = new View(c);\n    horizontalSpacerBlank.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 10));\n\n    View verticalSpacer = new View(c);\n    verticalSpacer.setLayoutParams(new LayoutParams(1, LayoutParams.MATCH_PARENT));\n    verticalSpacer.setBackgroundColor(Color.LTGRAY);\n\n    buttonContainer.addView(cancel);\n    buttonContainer.addView(verticalSpacer);\n    buttonContainer.addView(ok);\n\n    tlc.addView(mTextField);\n    tlc.addView(horizontalSpacerBlank);\n    tlc.addView(horizontalSpacer);\n    tlc.addView(buttonContainer);\n\n    return tlc;\n  }\n"}, {"dataset": "addView", "exampleID": 4816, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.removeAllViews()"], "configurationStart": [70], "configurationEnd": [100], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 44, "guardExpressionEnd": 61, "guardBlockStart": 44, "guardBlockEnd": 142, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 108, "focalAPIEnd": 135, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/geometer/FBReaderJ-alex/tree/master/src/org/geometerplus/android/fbreader/ControlPanel.java", "rawCode": "  public void setExtension(View view) {\n    if (view != null) {\n      myPlateLayout.removeAllViews();\n      myPlateLayout.addView(view);\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4817, "initialization": ["View child = LinearLayout.getChildAt(int)", "View child = getView(*,View,LinearLayout)"], "initializationStart": [197, 522], "initializationEnd": [228, 595], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.getChildAt(int)", "child.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [197, 605], "configurationEnd": [228, 633], "guardCondition": "child==null", "guardType": "IF {", "guardExpressionStart": 237, "guardExpressionEnd": 254, "guardBlockStart": 237, "guardBlockEnd": 782, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 644, "focalAPIEnd": 675, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getView(*,View,linearLayout)", "linearLayout.getChildCount()", "linearLayout.removeViewAt(int)"], "useStart": [700, 843, 936], "useEnd": [773, 876, 969], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ZPI/ZPI-Android/tree/master/ChartViewLib/src/com/fima/chartview/ChartView.java", "rawCode": "  private void drawRightLabels(Canvas canvas) {\n    // Add views from adapter\n    final int labelCount = mRightLabelAdapter.getCount();\n    for (int i = 0; i < labelCount; i++) {\n      View view = mRightLabelLayout.getChildAt(i);\n\n      if (view == null) {\n        LinearLayout.LayoutParams params =\n            new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, 0);\n        if (i == 0 || i == labelCount - 1) {\n          params.weight = 0.5f;\n        } else {\n          params.weight = 1;\n        }\n\n        view = mRightLabelAdapter.getView((labelCount - 1) - i, view, mRightLabelLayout);\n        view.setLayoutParams(params);\n\n        mRightLabelLayout.addView(view);\n      } else {\n        mRightLabelAdapter.getView((labelCount - 1) - i, view, mRightLabelLayout);\n      }\n    }\n\n    // Remove extra views\n    final int childCount = mRightLabelLayout.getChildCount();\n    for (int i = labelCount; i < childCount; i++) {\n      mRightLabelLayout.removeViewAt(i);\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4818, "initialization": ["LinearLayout linearLayout = LinearLayout.findViewById(int)", "View child = inflate(*,*)"], "initializationStart": [3714, 4574], "initializationEnd": [3757, 4614], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.findViewById(int)"], "configurationStart": [4654], "configurationEnd": [4690], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 4930, "focalAPIEnd": 4971, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RobertMcDermot/CS1530Project/tree/master/AddendumMobileProject/AddendumMobile/src/main/java/com/cs1530/group4/addendummobile/PostViewAdapter.java", "rawCode": "  @Override\n  public View getView(final int position, View convertView, ViewGroup parent) {\n    LayoutInflater vi =\n        (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    View v = vi.inflate(R.layout.post, null);\n\n    TextView title = (TextView) v.findViewById(R.id.title);\n    TextView content = (TextView) v.findViewById(R.id.content);\n    TextView username = (TextView) v.findViewById(R.id.username);\n    ImageView profileImage = (ImageView) v.findViewById(R.id.profileImage);\n    TextView time = (TextView) v.findViewById(R.id.time);\n    TextView score = (TextView) v.findViewById(R.id.score);\n    ImageView voteUp = (ImageView) v.findViewById(R.id.voteUp);\n    ImageView voteDown = (ImageView) v.findViewById(R.id.voteDown);\n    TextView numComments = (TextView) v.findViewById(R.id.numComments);\n\n    String streamLevel = posts.get(position).getStreamLevel();\n    if (streamLevel.equals(\"all\")) streamLevel = \"Everyone\";\n    title.setText(streamLevel);\n\n    content.setText(\n        Html.fromHtml(\n            posts.get(position).getPostContent(), new MyImageGetter(content, context), null));\n    // content.loadDataWithBaseURL(null, posts.get(position).getPostContent(), \"text/html\", \"utf-8\",\n    // null);\n    username.setText(posts.get(position).getUsername());\n    String timeFormatString = \"h:mm a\";\n    String editFormatString = \"h:mm a\";\n    Date now = new Date(System.currentTimeMillis());\n    if (posts.get(position).getPostTime().getDate() != now.getDate())\n      timeFormatString = \"MMM d, yyyy\";\n    if (posts.get(position).getLastEdit() != null\n        && posts.get(position).getLastEdit().getDate() != now.getDate())\n      editFormatString = \"MMM d, yyyy\";\n    String timeString =\n        String.valueOf(\n            android.text.format.DateFormat.format(\n                timeFormatString, posts.get(position).getPostTime()));\n    if (posts.get(position).getLastEdit() != null)\n      timeString +=\n          \"(last edit - \"\n              + String.valueOf(\n                  android.text.format.DateFormat.format(\n                      editFormatString, posts.get(position).getLastEdit()))\n              + \")\";\n    time.setText(timeString);\n    UrlImageViewHelper.setUrlDrawable(\n        profileImage,\n        \"https://studentclassnet.appspot.com/addendum/getImage?username=\"\n            + posts.get(position).getUsername());\n\n    String scoreString = posts.get(position).getUpvotes() - posts.get(position).getDownvotes() + \"\";\n    if (posts.get(position).getUpvotes() - posts.get(position).getDownvotes() > 0)\n      scoreString = \"+\" + scoreString;\n    score.setText(scoreString);\n    if (posts.get(position).isDownvoted()) voteDown.setImageResource(R.drawable.voted_down);\n    else voteDown.setImageResource(R.drawable.default_down);\n    if (posts.get(position).isUpvoted()) voteUp.setImageResource(R.drawable.voted_up);\n    else voteUp.setImageResource(R.drawable.default_up);\n\n    View.OnClickListener voteListener = new VoteListener(voteUp, voteDown, posts.get(position), v);\n    voteUp.setOnClickListener(voteListener);\n    voteDown.setOnClickListener(voteListener);\n\n    numComments.setText(String.valueOf(posts.get(position).getComments().size()));\n\n    profileImage.setOnClickListener(\n        new View.OnClickListener() {\n          @Override\n          public void onClick(View v) {\n            new ProfileTask(context).execute(posts.get(position).getUsername());\n          }\n        });\n\n    if (posts.get(position).getComments().size() > 0) {\n      ViewFlipper commentFlipper = (ViewFlipper) v.findViewById(R.id.commentFlipper);\n      commentFlipper.setVisibility(View.VISIBLE);\n      LinearLayout commentProfileLayout =\n          (LinearLayout) v.findViewById(R.id.commenterProfileLayout);\n      final ArrayList<View> profileImages = new ArrayList<View>(3);\n      ArrayList<Comment> comments = posts.get(position).getComments();\n\n      int start = comments.size() - 3;\n      if (start < 0) start = 0;\n      for (int i = start; i < comments.size(); i++) {\n        View commentView = vi.inflate(R.layout.single_comment, null);\n        TextView commentUsername = (TextView) commentView.findViewById(R.id.commentUsername);\n        TextView commentContent = (TextView) commentView.findViewById(R.id.commentContent);\n        commentUsername.setText(comments.get(i).getUsername());\n        commentContent.setText(\n            Html.fromHtml(\n                comments.get(i).getContent(), new MyImageGetter(commentContent, context), null));\n        commentFlipper.addView(commentView);\n\n        View imageLayout = vi.inflate(R.layout.profile_image, null);\n        ImageView image = (ImageView) imageLayout.findViewById(R.id.image);\n        UrlImageViewHelper.setUrlDrawable(\n            image,\n            \"https://studentclassnet.appspot.com/addendum/getImage?username=\"\n                + comments.get(i).getUsername());\n        profileImages.add(imageLayout);\n        commentProfileLayout.addView(imageLayout);\n      }\n\n      profileImages.get(0).findViewById(R.id.underline).setVisibility(View.VISIBLE);\n      if (comments.size() > 1) {\n        commentFlipper.setInAnimation(\n            AnimationUtils.loadAnimation(context, android.R.anim.fade_in));\n        commentFlipper.setOutAnimation(\n            AnimationUtils.loadAnimation(context, android.R.anim.fade_out));\n        commentFlipper.setFlipInterval(4000);\n        commentFlipper\n            .getInAnimation()\n            .setAnimationListener(\n                new Animation.AnimationListener() {\n                  int count = 1;\n\n                  public void onAnimationStart(Animation animation) {\n                    if (count == 0) {\n                      profileImages\n                          .get(count)\n                          .findViewById(R.id.underline)\n                          .setVisibility(View.VISIBLE);\n                      profileImages\n                          .get(profileImages.size() - 1)\n                          .findViewById(R.id.underline)\n                          .setVisibility(View.GONE);\n                    } else {\n                      profileImages\n                          .get(count)\n                          .findViewById(R.id.underline)\n                          .setVisibility(View.VISIBLE);\n                      profileImages\n                          .get((count - 1))\n                          .findViewById(R.id.underline)\n                          .setVisibility(View.GONE);\n                    }\n                    count++;\n                    if (count == profileImages.size()) count = 0;\n                  }\n\n                  public void onAnimationRepeat(Animation animation) {}\n\n                  public void onAnimationEnd(Animation animation) {}\n                });\n        commentFlipper.startFlipping();\n      }\n    }\n    return v;\n  }\n"}, {"dataset": "addView", "exampleID": 4819, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ICCL/IPPS/tree/master/app/libraries/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4820, "initialization": ["View child = getDecorView()"], "initializationStart": [166], "initializationEnd": [234], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.removeAllViews()"], "configurationStart": [67], "configurationEnd": [100], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 448, "focalAPIEnd": 542, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openproject/world/tree/master/baseworld/src/com/tianxia/lib/baseworld/main/MainTabFrame.java", "rawCode": "  public void setContainerView(String id, Class<?> activity) {\n    mainTabContainer.removeAllViews();\n    mainTabIntent = new Intent(this, activity);\n    View view = localActivityManager.startActivity(id, mainTabIntent).getDecorView();\n\n    // make sure the subactivity will fill parent layout, it is a important tips\n    view.setLayoutParams(\n        new ViewGroup.LayoutParams(LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.FILL_PARENT));\n\n    mainTabContainer.addView(localActivityManager.startActivity(id, mainTabIntent).getDecorView());\n  }\n"}, {"dataset": "addView", "exampleID": 4821, "initialization": ["LinearLayout linearLayout = new LinearLayout(*)", "View child = new View(*)"], "initializationStart": [117, 798], "initializationEnd": [139, 812], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.setLayoutParams(LinearLayout.LayoutParams)", "child.setId(int)", "child.setBackgroundColor(int)", "child.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [145, 196, 629, 653, 694], "configurationEnd": [190, 343, 647, 688, 772], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1310, "focalAPIEnd": 1331, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "ScrollView.addView(linearLayout)"], "useStart": [1337, 1365], "useEnd": [1359, 1390], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/tests/coretests/src/android/view/BigCache.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    final LinearLayout testBed = new LinearLayout(this);\n    testBed.setOrientation(LinearLayout.VERTICAL);\n    testBed.setLayoutParams(\n        new ViewGroup.LayoutParams(\n            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));\n\n    final int cacheSize = ViewConfiguration.getMaximumDrawingCacheSize();\n    final Display display = getWindowManager().getDefaultDisplay();\n    final int screenWidth = display.getWidth();\n    final int screenHeight = display.getHeight();\n\n    final View tiny = new View(this);\n    tiny.setId(R.id.a);\n    tiny.setBackgroundColor(0xFFFF0000);\n    tiny.setLayoutParams(new LinearLayout.LayoutParams(screenWidth, screenHeight));\n\n    final View large = new View(this);\n    large.setId(R.id.b);\n    large.setBackgroundColor(0xFF00FF00);\n    // Compute the height of the view assuming a cache size based on ARGB8888\n    final int height = 2 * (cacheSize / 2) / screenWidth;\n    large.setLayoutParams(new LinearLayout.LayoutParams(screenWidth, height));\n\n    final ScrollView scroller = new ScrollView(this);\n    scroller.setLayoutParams(\n        new ViewGroup.LayoutParams(\n            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\n\n    testBed.addView(tiny);\n    testBed.addView(large);\n    scroller.addView(testBed);\n\n    setContentView(scroller);\n  }\n"}, {"dataset": "addView", "exampleID": 4822, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rcg0/arc/tree/master/android application/library2/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4823, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rinkdotrink/ComeTogether/tree/master/ActionBarSherlock/library/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4824, "initialization": ["LinearLayout linearLayout = LinearLayout.findViewById(int)", "View child = getLayoutInflater()"], "initializationStart": [624, 815], "initializationEnd": [662, 834], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["getMessage()", "d(String,*)", "printStackTrace()"], "tryExpressionStart": 400, "tryExpressionEnd": 404, "tryBlockStart": 400, "tryBlockEnd": 1898, "catchExpressionStart": 1781, "catchExpressionEnd": 1805, "catchBlockStart": 1781, "catchBlockEnd": 1898, "exceptionHandlingCallStart": [1845, 1815, 1870], "exceptionHandlingCallEnd": [1859, 1860, 1889], "configuration": ["child.findViewById(int)", "child.findViewById(int)"], "configurationStart": [925, 1130], "configurationEnd": [966, 1171], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1732, "focalAPIEnd": 1760, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/y4nn/MobWebApp_ComemStar/tree/master/MobWebAndroid/src/ch/comem/android/QuestionActivity.java", "rawCode": "    /**\n     * The system calls this to perform work in the UI thread and delivers the result from\n     * doInBackground()\n     */\n    protected void onPostExecute(String jsonString) {\n      Log.d(\"QQQuestions\", jsonString);\n\n      SharedPreferences settings = getSharedPreferences(\"comemPref\", 0);\n      String idStudent = settings.getString(\"idStudent\", \"0\");\n\n      Log.d(\"idS\", idStudent);\n      try {\n        JSONObject joSerie = new JSONObject(jsonString);\n        jaQuestions = joSerie.getJSONArray(\"questionDTO\");\n\n        // Inflate the Hidden Layout Information View\n        LinearLayout myLayout = (LinearLayout) findViewById(R.id.layoutQuestionnaire);\n        for (int i = 0; i < jaQuestions.length(); i++) {\n\n          JSONObject joQuestion = jaQuestions.getJSONObject(i);\n\n          View hiddenInfo = getLayoutInflater().inflate(R.layout.question_model, null, false);\n          TextView myTextView = (TextView) hiddenInfo.findViewById(R.id.tvQuestion1);\n          myTextView.setPadding(10, 10, 10, 10);\n          myTextView.setText(joQuestion.getString(\"question\"));\n\n          RadioGroup rgQuestions = (RadioGroup) hiddenInfo.findViewById(R.id.rgQuestion1);\n          rgQuestions.setId(joQuestion.getInt(\"id\"));\n          JSONArray jaReponses = joQuestion.getJSONArray(\"reponse\");\n          for (int j = 0; j < jaReponses.length(); j++) {\n            JSONObject joReponse = jaReponses.getJSONObject(j);\n            RadioButton rbtnReponse = new RadioButton(QuestionActivity.this);\n            rbtnReponse.setText(joReponse.getString(\"answer\"));\n            rbtnReponse.setId(joReponse.getInt(\"id\"));\n            rbtnReponse.setPadding(30, 0, 0, 0);\n            rgQuestions.addView(rbtnReponse);\n          }\n          myLayout.addView(hiddenInfo);\n        }\n\n      } catch (JSONException e) {\n        Log.d(\"er jaQ\", e + \" /// \" + e.getMessage());\n        e.printStackTrace();\n      }\n    }\n"}, {"dataset": "addView", "exampleID": 4825, "initialization": ["View child = getItemViewFriend(*)"], "initializationStart": [460], "initializationEnd": [499], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.removeAllViews()"], "configurationStart": [258], "configurationEnd": [294], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 507, "focalAPIEnd": 537, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lbaye/repo/tree/master/android/src/com/socmaps/ui/MeetupRequestNewActivity.java", "rawCode": "  private void doSearch() {\n\n    List<Object> dataList = new ArrayList<Object>();\n    dataList.addAll(StaticValues.myInfo.getFriendList());\n\n    List<Object> list =\n        (Utility.getSearchResult(dataList, etFriendSearch.getText().toString().trim()));\n    friendListContainer.removeAllViews();\n\n    backupSelectedFriends = new HashMap<String, Boolean>(selectedFriends);\n    selectedFriends.clear();\n    for (int i = 0; i < list.size(); i++) {\n      View v = getItemViewFriend((People) list.get(i));\n      friendListContainer.addView(v);\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4826, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.setId(int)", "child.setLayoutParams(LinearLayout.LayoutParams)", "child.setWebChromeClient(*)", "child.setInitialScale(int)", "child.setVerticalScrollBarEnabled(boolean)", "child.requestFocusFromTouch()", "child.getSettings()", "child.setVisibility(int)"], "configurationStart": [184, 214, 422, 556, 595, 648, 739, 1442], "configurationEnd": [207, 373, 483, 589, 642, 684, 765, 1484], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1490, "focalAPIEnd": 1516, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setContentView(linearLayout)"], "useStart": [1522], "useEnd": [1542], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brodybits/phonegap-lite-android/tree/master/framework/src/com/phonegap/DroidGap.java", "rawCode": "  /** Create and initialize web container. */\n  public void init() {\n    LOG.d(TAG, \"DroidGap.init()\");\n\n    // Create web container\n    this.appView = new WebView(DroidGap.this);\n    this.appView.setId(100);\n\n    this.appView.setLayoutParams(\n        new LinearLayout.LayoutParams(\n            ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.FILL_PARENT, 1.0F));\n\n    WebViewReflect.checkCompatibility();\n\n    this.appView.setWebChromeClient(new GapClient(DroidGap.this));\n    this.setWebViewClient(this.appView, new GapViewClient(this));\n\n    this.appView.setInitialScale(100);\n    this.appView.setVerticalScrollBarEnabled(false);\n    this.appView.requestFocusFromTouch();\n\n    // Enable JavaScript\n    WebSettings settings = this.appView.getSettings();\n    settings.setJavaScriptEnabled(true);\n    settings.setJavaScriptCanOpenWindowsAutomatically(true);\n    settings.setLayoutAlgorithm(LayoutAlgorithm.NORMAL);\n\n    // Set the nav dump for HTC\n    settings.setNavDump(true);\n\n    // Enable database\n    settings.setDatabaseEnabled(true);\n    String databasePath =\n        this.getApplicationContext().getDir(\"database\", Context.MODE_PRIVATE).getPath();\n    settings.setDatabasePath(databasePath);\n\n    // Enable DOM storage\n    WebViewReflect.setDomStorage(settings);\n\n    // Enable built-in geolocation\n    WebViewReflect.setGeolocationEnabled(settings, true);\n\n    // Add web view but make it invisible while loading URL\n    this.appView.setVisibility(View.INVISIBLE);\n    root.addView(this.appView);\n    setContentView(root);\n\n    // Clear cancel flag\n    this.cancelLoadUrl = false;\n  }\n"}, {"dataset": "addView", "exampleID": 4827, "initialization": ["View child = getItemView(int)"], "initializationStart": [285], "initializationEnd": [303], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 309, "guardExpressionEnd": 326, "guardBlockStart": 309, "guardBlockEnd": 469, "focalAPI": " = linearLayout.addView(child,index)", "focalAPIStart": 356, "focalAPIEnd": 384, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)"], "useStart": [409], "useEnd": [434], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spidermandl/TimeMaster/tree/master/src/com/time/master/wheel/widget/WheelView.java", "rawCode": "  /**\n   * Adds view for item to items layout\n   *\n   * @param index the item index\n   * @param first the flag indicates if view should be first\n   * @return true if corresponding item exists and is added\n   */\n  private boolean addViewItem(int index, boolean first) {\n    View view = getItemView(index);\n    if (view != null) {\n      if (first) {\n        itemsLayout.addView(view, 0);\n      } else {\n        itemsLayout.addView(view);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n"}, {"dataset": "addView", "exampleID": 4828, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.getChildAt(int)"], "configurationStart": [571], "configurationEnd": [591], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1927, "focalAPIEnd": 1953, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/venukumar/bartsy-venue-android/tree/master/src/com/vendsy/bartsy/venue/view/BartenderSectionFragment.java", "rawCode": "  /** Optionally bundles orders of a user together using the same order number for convenience */\n  int insertOrderInLayout(Order order, LinearLayout layout) {\n\n    // How many orders we're inserted in the layout\n    int count = 0;\n\n    // Never bundle expired or cancelled orders\n    if (Constants.bundle\n        && order.status != Order.ORDER_STATUS_CANCELLED\n        && order.status != Order.ORDER_STATUS_TIMEOUT) {\n\n      // Try to insert the order in a previous order from the same user\n\n      for (int i = 0; i < layout.getChildCount(); i++) {\n\n        View view = layout.getChildAt(i);\n        Order layoutOrder = (Order) view.getTag();\n\n        if (layoutOrder.status != Order.ORDER_STATUS_CANCELLED\n            && // Don't insert in expired orders\n            layoutOrder.status != Order.ORDER_STATUS_TIMEOUT\n            && layoutOrder.orderRecipient.userID.equalsIgnoreCase(order.orderRecipient.userID)) {\n\n          // Found an existing order from the same user. Insert a mini-view of the order\n          order.addItemsView((LinearLayout) view.findViewById(R.id.view_order_mini), mInflater);\n\n          // Update the view (not the order itself) of the master order total values to include the\n          // order just added\n          Float tipAmount = (Float) view.findViewById(R.id.view_order_tip_amount).getTag();\n          Float taxAmount = (Float) view.findViewById(R.id.view_order_tax_amount).getTag();\n          Float totalAmount = (Float) view.findViewById(R.id.view_order_total_amount).getTag();\n          layoutOrder.updateTipTaxTotalView(\n              tipAmount + order.tipAmount,\n              taxAmount + order.taxAmount,\n              totalAmount + order.totalAmount);\n\n          return count;\n        }\n      }\n    }\n\n    // No previous order was found, insert the order at the top level\n    if (order.view.getParent() != null)\n      ((LinearLayout) order.view.getParent()).removeView(order.view);\n    layout.addView(order.view);\n    count++;\n\n    // Update order view buttons\n    order.view.findViewById(R.id.view_order_button_positive).setOnClickListener(this);\n    order.view.findViewById(R.id.view_order_button_positive).setTag(order);\n\n    order.view.findViewById(R.id.view_order_button_negative).setOnClickListener(this);\n    order.view.findViewById(R.id.view_order_button_negative).setTag(order);\n\n    order.view.findViewById(R.id.view_order_button_expired).setOnClickListener(this);\n    order.view.findViewById(R.id.view_order_button_expired).setTag(order);\n\n    order.view.findViewById(R.id.view_order_button_customer_dets).setOnClickListener(this);\n    order.view.findViewById(R.id.view_order_button_customer_dets).setTag(order);\n\n    return count;\n  }\n"}, {"dataset": "addView", "exampleID": 4829, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/francho/unutopia-android/tree/master/erralberto/library/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4830, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 253, "focalAPIEnd": 271, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cookyt/DiceRoller/tree/master/src/com/group5/diceroller/StatisticsFragment.java", "rawCode": "    public void add(View v) {\n      if (col == 0 || col == max_cols) {\n        ++row;\n        cur_row = new LinearLayout(getActivity().getApplicationContext());\n        grid.addView(cur_row);\n        col = 1;\n      } else {\n        ++col;\n      }\n      cur_row.addView(v);\n    }\n"}, {"dataset": "addView", "exampleID": 4831, "initialization": ["LinearLayout linearLayout = LinearLayout.findViewById(int)", "View child = inflate(*,*)"], "initializationStart": [1038, 1194], "initializationEnd": [1071, 1236], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.removeAllViews()", "child.findViewById(int)", "child.findViewById(int)"], "configurationStart": [1077, 1279, 1357], "configurationEnd": [1102, 1316, 1392], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1743, "focalAPIEnd": 1762, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)"], "useStart": [2144], "useEnd": [2163], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/R-a-dio/Android-app/tree/master/src/src/io/radio/android/MainActivity.java", "rawCode": "  private void updateNP(ApiPacket packet) {\n    updateRemoteMetadata(\n        Html.fromHtml(packet.main.artist).toString(), Html.fromHtml(packet.main.title).toString());\n\n    progress = packet.main.progress;\n    length = packet.main.length;\n    title.setText(Html.fromHtml(packet.main.title));\n    artist.setText(Html.fromHtml(packet.main.artist));\n    dj.setText(Html.fromHtml(packet.main.dj.name));\n    songProgressBar.setMax(length);\n    songProgressBar.setProgress(progress);\n    if (lastDj != packet.main.dj.id) {\n      lastDj = packet.main.dj.id;\n      DJImageLoader imageLoader = new DJImageLoader();\n      imageLoader.execute(packet);\n    }\n    listeners.setText(\"Listeners: \" + packet.main.listeners);\n    songLength.setText(ApiUtil.intTimeDurationToString(length));\n    songElapsed.setText(ApiUtil.intTimeDurationToString(progress));\n\n    // Display the Last Played and Queue from API Packet\n    LayoutInflater vi = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n\n    LinearLayout lpLayout = (LinearLayout) findViewById(R.id.lastPlayedList);\n    lpLayout.removeAllViews();\n    if (packet.main.lp != null) {\n      for (Track t : packet.main.lp) {\n        View v = vi.inflate(R.layout.track_tableview, null);\n        TextView artistName = (TextView) v.findViewById(R.id.track_artistName);\n        TextView songName = (TextView) v.findViewById(R.id.track_songName);\n        configureQueueTextView(artistName);\n        configureQueueTextView(songName);\n        artistName.setText(Html.fromHtml(t.artistName));\n        songName.setText(Html.fromHtml(t.songName));\n        if (t.isRequest) {\n          artistName.setTypeface(null, Typeface.BOLD);\n          songName.setTypeface(null, Typeface.BOLD);\n        }\n        lpLayout.addView(v);\n      }\n    } else {\n      View v = vi.inflate(R.layout.track_tableview, null);\n      TextView artistName = (TextView) v.findViewById(R.id.track_artistName);\n      TextView songName = (TextView) v.findViewById(R.id.track_songName);\n      configureQueueTextView(artistName);\n      configureQueueTextView(songName);\n      artistName.setText(\"-\");\n      songName.setText(\"-\");\n      lpLayout.addView(v);\n    }\n\n    LinearLayout queueLayout = (LinearLayout) findViewById(R.id.queueList);\n    queueLayout.removeAllViews();\n\n    if (packet.main.queue != null) {\n      for (Track t : packet.main.queue) {\n        View v = vi.inflate(R.layout.track_tableview, null);\n        TextView artistName = (TextView) v.findViewById(R.id.track_artistName);\n        TextView songName = (TextView) v.findViewById(R.id.track_songName);\n        configureQueueTextView(artistName);\n        configureQueueTextView(songName);\n        artistName.setText(Html.fromHtml(t.artistName));\n        songName.setText(Html.fromHtml(t.songName));\n        if (t.isRequest) {\n          artistName.setTypeface(null, Typeface.BOLD);\n          songName.setTypeface(null, Typeface.BOLD);\n        }\n        queueLayout.addView(v);\n      }\n    } else {\n      View v = vi.inflate(R.layout.track_tableview, null);\n      TextView artistName = (TextView) v.findViewById(R.id.track_artistName);\n      TextView songName = (TextView) v.findViewById(R.id.track_songName);\n      artistName.setText(\"-\");\n      songName.setText(\"-\");\n      configureQueueTextView(artistName);\n      configureQueueTextView(songName);\n      queueLayout.addView(v);\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4832, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/WSO2Mobile/wso2mobileserver/tree/master/products/mdm/modules/android-client/plugins/ActionBarSherlock/library/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4833, "initialization": ["LinearLayout linearLayout = LinearLayout.findViewById(int)", "View child = inflatePreference(LayoutInflater,LinearLayout,Switch)"], "initializationStart": [1811, 1938], "initializationEnd": [1854, 1997], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 2074, "focalAPIEnd": 2116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["inflatePreference(LayoutInflater,linearLayout,CheckBox)", "linearLayout.addView(View)"], "useStart": [2294, 2527], "useEnd": [2356, 2572], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_packages_apps_Settings/tree/master/src/com/android/settings/DataUsageSummary.java", "rawCode": "  @Override\n  public View onCreateView(\n      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n    final Context context = inflater.getContext();\n    final View view = inflater.inflate(R.layout.data_usage_summary, container, false);\n\n    mUidDetailProvider = new UidDetailProvider(context);\n\n    mTabHost = (TabHost) view.findViewById(android.R.id.tabhost);\n    mTabsContainer = (ViewGroup) view.findViewById(R.id.tabs_container);\n    mTabWidget = (TabWidget) view.findViewById(android.R.id.tabs);\n    mListView = (ListView) view.findViewById(android.R.id.list);\n\n    // decide if we need to manually inset our content, or if we should rely\n    // on parent container for inset.\n    final boolean shouldInset = mListView.getScrollBarStyle() == View.SCROLLBARS_OUTSIDE_OVERLAY;\n    if (shouldInset) {\n      mInsetSide =\n          view.getResources()\n              .getDimensionPixelOffset(\n                  com.android.internal.R.dimen.preference_fragment_padding_side);\n    } else {\n      mInsetSide = 0;\n    }\n\n    // adjust padding around tabwidget as needed\n    prepareCustomPreferencesList(container, view, mListView, true);\n\n    mTabHost.setup();\n    mTabHost.setOnTabChangedListener(mTabListener);\n\n    mHeader = (ViewGroup) inflater.inflate(R.layout.data_usage_header, mListView, false);\n    mHeader.setClickable(true);\n\n    mListView.addHeaderView(mHeader, null, true);\n    mListView.setItemsCanFocus(true);\n\n    if (mInsetSide > 0) {\n      // inset selector and divider drawables\n      insetListViewDrawables(mListView, mInsetSide);\n      mHeader.setPadding(mInsetSide, 0, mInsetSide, 0);\n    }\n\n    {\n      // bind network switches\n      mNetworkSwitchesContainer = (ViewGroup) mHeader.findViewById(R.id.network_switches_container);\n      mNetworkSwitches = (LinearLayout) mHeader.findViewById(R.id.network_switches);\n\n      mDataEnabled = new Switch(inflater.getContext());\n      mDataEnabledView = inflatePreference(inflater, mNetworkSwitches, mDataEnabled);\n      mDataEnabled.setOnCheckedChangeListener(mDataEnabledListener);\n      mNetworkSwitches.addView(mDataEnabledView);\n\n      mDisableAtLimit = new CheckBox(inflater.getContext());\n      mDisableAtLimit.setClickable(false);\n      mDisableAtLimit.setFocusable(false);\n      mDisableAtLimitView = inflatePreference(inflater, mNetworkSwitches, mDisableAtLimit);\n      mDisableAtLimitView.setClickable(true);\n      mDisableAtLimitView.setFocusable(true);\n      mDisableAtLimitView.setOnClickListener(mDisableAtLimitListener);\n      mNetworkSwitches.addView(mDisableAtLimitView);\n    }\n\n    // bind cycle dropdown\n    mCycleView = mHeader.findViewById(R.id.cycles);\n    mCycleSpinner = (Spinner) mCycleView.findViewById(R.id.cycles_spinner);\n    mCycleAdapter = new CycleAdapter(context);\n    mCycleSpinner.setAdapter(mCycleAdapter);\n    mCycleSpinner.setOnItemSelectedListener(mCycleListener);\n\n    mChart = (ChartDataUsageView) mHeader.findViewById(R.id.chart);\n    mChart.setListener(mChartListener);\n    mChart.bindNetworkPolicy(null);\n\n    {\n      // bind app detail controls\n      mAppDetail = mHeader.findViewById(R.id.app_detail);\n      mAppIcon = (ImageView) mAppDetail.findViewById(R.id.app_icon);\n      mAppTitles = (ViewGroup) mAppDetail.findViewById(R.id.app_titles);\n      mAppPieChart = (PieChartView) mAppDetail.findViewById(R.id.app_pie_chart);\n      mAppForeground = (TextView) mAppDetail.findViewById(R.id.app_foreground);\n      mAppBackground = (TextView) mAppDetail.findViewById(R.id.app_background);\n      mAppSwitches = (LinearLayout) mAppDetail.findViewById(R.id.app_switches);\n\n      mAppSettings = (Button) mAppDetail.findViewById(R.id.app_settings);\n      mAppSettings.setOnClickListener(mAppSettingsListener);\n\n      mAppRestrict = new CheckBox(inflater.getContext());\n      mAppRestrict.setClickable(false);\n      mAppRestrict.setFocusable(false);\n      mAppRestrictView = inflatePreference(inflater, mAppSwitches, mAppRestrict);\n      mAppRestrictView.setClickable(true);\n      mAppRestrictView.setFocusable(true);\n      mAppRestrictView.setOnClickListener(mAppRestrictListener);\n      mAppSwitches.addView(mAppRestrictView);\n    }\n\n    mUsageSummary = (TextView) mHeader.findViewById(R.id.usage_summary);\n    mEmpty = (TextView) mHeader.findViewById(android.R.id.empty);\n\n    mAdapter = new DataUsageAdapter(mUidDetailProvider, mInsetSide);\n    mListView.setOnItemClickListener(mListListener);\n    mListView.setAdapter(mAdapter);\n\n    return view;\n  }\n"}, {"dataset": "addView", "exampleID": 4834, "initialization": ["LinearLayout linearLayout = LinearLayout.findViewById(int)", "View child = new View(*)"], "initializationStart": [753, 1549], "initializationEnd": [786, 1582], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.setLayoutParams(LinearLayout.LayoutParams)", "child.setBackgroundColor(int)"], "configurationStart": [1750, 1799], "configurationEnd": [1792, 1842], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1940, "focalAPIEnd": 1968, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["populateBadges(ArrayList<String>,linearLayout)"], "useStart": [1975], "useEnd": [2014], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mturek/gras/tree/master/NestedFragments/src/com/example/newspinproj/TaskDetailsActivity.java", "rawCode": "  public void addListenerOnButton() {\n\n    toggleButton = (ToggleButton) findViewById(R.id.toggleButton);\n    toggleButton2 = (ToggleButton) findViewById(R.id.toggleButton2);\n    toggleButton3 = (ToggleButton) findViewById(R.id.toggleButton3);\n    // btnDisplay = (Button) findViewById(R.id.btnDisplay);\n\n    toggleButton.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n\n            StringBuffer result = new StringBuffer();\n            result.append(\"Reminder in\").append(toggleButton.getText());\n\n            /*Toast.makeText(TaskDetailsActivity.this, result.toString(),\n            Toast.LENGTH_SHORT).show();*/\n\n          }\n        });\n\n    final LinearLayout layout = (LinearLayout) findViewById(R.id.taskPrototypes);\n\n    System.out.println(\"The task utid is: \" + utid);\n\n    // ArrayList<String> members = ;\n    Task task = DataContainer.taskbyutid(utid);\n\n    if (task == null) System.out.println(\"The task by utid is null\");\n\n    System.out.println(\"Task is in group: \" + task.getGroup());\n\n    ArrayList<String> leaders = DataContainer.getFullLeaderNames(task.getGroup());\n    System.out.println(\"Leaders: \" + leaders.toString());\n\n    ArrayList<String> member = task.getuser();\n    System.out.println(\"Members: \" + member.toString());\n    ArrayList<String> fullMemberNames = new ArrayList<String>();\n    for (String memberName : member)\n      fullMemberNames.add(DataContainer.getFullnameForUser(memberName));\n\n    populateBadges(leaders, layout);\n\n    View verticalLine = new View(getApplicationContext());\n    LinearLayout.LayoutParams layoutParams =\n        new LinearLayout.LayoutParams(3, LinearLayout.LayoutParams.MATCH_PARENT);\n    layoutParams.rightMargin = 10;\n    verticalLine.setLayoutParams(layoutParams);\n\n    verticalLine.setBackgroundColor(0xFF060000); // darker_gray 0x01060000 17170432\n    // view.setBackgroundResource(R.color.darker_gray);\n\n    layout.addView(verticalLine);\n\n    populateBadges(fullMemberNames, layout);\n\n    Button buttonDone = (Button) findViewById(R.id.buttonDone);\n\n    String username = DataContainer.username;\n    String fullname = DataContainer.getFullnameForUser(username);\n\n    if (leaders.contains(fullname)) buttonDone.setText(\"Delete task\");\n    else buttonDone.setText(\"Mark finished\");\n\n    buttonDone.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View view) {\n            DeleteTaskReq dtr = new DeleteTaskReq(getUtid());\n            dtr.send();\n            DataContainer.removeTask(getUtid());\n            finish();\n          }\n        });\n  }\n"}, {"dataset": "addView", "exampleID": 4835, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 36, "focalAPIEnd": 54, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/QuantumBadger/RedReader/tree/master/src/main/java/org/quantumbadger/redreader/views/bezelmenu/VerticalToolbar.java", "rawCode": "  public void addItem(View v) {\n    buttons.addView(v);\n  }\n"}, {"dataset": "addView", "exampleID": 4836, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kvite/astridclone/tree/master/actionbarsherlock/library/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4837, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child,index)", "focalAPIStart": 81, "focalAPIEnd": 131, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nebogeo/littlej/tree/master/android/Libraries/abs/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  public void addTab(ActionBar.Tab tab, int position, boolean setSelected) {\n    mTabsView.addView(((TabImpl) tab).mView, position);\n    if (setSelected) {\n      tab.select();\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4838, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benetech/martus-android/tree/master/actionbarSherlock/library/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4839, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brk3/finch/tree/master/libs/JakeWharton-ActionBarSherlock-2eabf25/library/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4840, "initialization": ["View child = getCurrentPreset()"], "initializationStart": [161], "initializationEnd": [184], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.setBackgroundColor(int)", "child.setPadding(int,int,int,int)", "child.setId(int)"], "configurationStart": [644, 721, 755], "configurationEnd": [715, 749, 782], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 788, "focalAPIEnd": 813, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dittaeva/vespucci/tree/master/src/de/blau/android/TagEditor.java", "rawCode": "  private void createRecentPresetView() {\n    if (Main.getCurrentPreset() == null) return;\n\n    ElementType filterType = element.getType();\n    View v =\n        Main.getCurrentPreset()\n            .getRecentPresetView(\n                this,\n                new PresetClickHandler() {\n\n                  @Override\n                  public void onItemClick(PresetItem item) {\n                    applyPreset(item);\n                  }\n\n                  @Override\n                  public void onGroupClick(PresetGroup group) {\n                    // should not have groups\n                  }\n                },\n                filterType);\n    v.setBackgroundColor(getResources().getColor(R.color.tagedit_field_bg));\n    v.setPadding(20, 20, 20, 20);\n    v.setId(R.id.recentPresets);\n    verticalLayout.addView(v);\n  }\n"}, {"dataset": "addView", "exampleID": 4841, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DavidTPate/diablo3_builder/tree/master/d3_android/libs/ActionBarSherlock/library/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4842, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PROMAND/MINK/tree/master/libs/action_bar/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4843, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setVisibility(int)", "linearLayout.removeAllViews()"], "configurationStart": [36, 79], "configurationEnd": [72, 107], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.setVisibility(int)"], "useStart": [192], "useEnd": [231], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/evgs/BombusLime/tree/master/src/org/bombusim/lime/activity/EditContactActivity.java", "rawCode": "  private void updateGroups() {\n    groupLayout.setVisibility(View.GONE);\n\n    groupLayout.removeAllViews();\n\n    for (CheckBox g : groups.values()) {\n      groupLayout.addView(g);\n    }\n\n    groupLayout.setVisibility(View.VISIBLE);\n  }\n"}, {"dataset": "addView", "exampleID": 4844, "initialization": ["LinearLayout linearLayout = new LinearLayout(*)"], "initializationStart": [2142], "initializationEnd": [2164], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.setText(*)", "child.setButtonDrawable(*)", "child.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [1271, 1313, 1406], "configurationEnd": [1305, 1398, 1439], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 2245, "focalAPIEnd": 2278, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(TextView)", "linearLayout.addView(View)", "LinearLayout.addView(linearLayout)", "linearLayout.addView(View)", "linearLayout.addView(TextView)", "linearLayout.addView(View)", "LinearLayout.addView(linearLayout)"], "useStart": [2286, 2319, 2358, 3479, 3520, 3553, 3592], "useEnd": [2311, 2350, 2400, 3512, 3545, 3584, 3636], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sntc06/Icequeen/tree/master/src/com/mis/icequeen/ChapterSelectionActivity.java", "rawCode": "  /** Generate chapters */\n  private void setupView() {\n\n    data = new ArrayList<String>();\n\n    getIntent().setData(Uri.parse(\"content://com.mis.icequeen.testprovider/getAllChapter\"));\n    Uri uri = getIntent().getData();\n    Cursor c = managedQuery(uri, null, null, null, null);\n    c.moveToFirst();\n    // Insert data\n    for (int i = 0; i < c.getCount(); i++) {\n      System.out.println(c.getString(0));\n      data.add(c.getString(0));\n      if (c.getPosition() != c.getCount() - 1) c.moveToNext();\n    }\n    c.close();\n\n    /*\n     * data.clear(); for (int i=1; i<=11; i++) data.add(\"Chapter \"+i);\n     * Log.i(\"FILL_CH\", data.toString());\n     */\n    LinearLayout chapterLinearLayoutMid = (LinearLayout) findViewById(R.id.chapterLinearLayoutMid);\n    LinearLayout chapterLinearLayoutFinal =\n        (LinearLayout) findViewById(R.id.chapterLinearLayoutFinal);\n    final CheckBox[] checkboxes = new CheckBox[data.size()];\n    final TextView[] tvScores = new TextView[data.size()];\n\n    final int half = data.size() / 2;\n    LinearLayout.LayoutParams lp =\n        new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n    lp.setMargins(0, 0, 20, 0);\n\n    for (int i = 0; i < half; i++) {\n      checkboxes[i] = new CheckBox(this);\n      checkboxes[i].setText(data.get(i));\n      checkboxes[i].setButtonDrawable(this.getResources().getDrawable(R.drawable.checkbox));\n      checkboxes[i].setLayoutParams(lp);\n      tvScores[i] = new TextView(this);\n      getIntent()\n          .setData(Uri.parse(\"content://com.mis.icequeen.testprovider/getLastTest:\" + (i + 1)));\n      uri = getIntent().getData();\n      c = managedQuery(uri, null, null, null, null);\n      if (c.getCount() != 0) {\n        c.moveToFirst();\n        tvScores[i].setText(c.getString(0));\n      } else tvScores[i].setText(\"尚未測驗!\");\n      c.close();\n      System.out.println(\"SCORE:\");\n      if (!tvScores[i].getText().equals(\"尚未測驗!\")\n          && Integer.valueOf(tvScores[i].getText().toString().substring(0, 2)) < 70)\n        tvScores[i].setTextColor(Color.RED);\n      else tvScores[i].setTextColor(Color.BLACK);\n      LinearLayout tempLayout = new LinearLayout(this);\n      TextView label = new TextView(this);\n      label.setText(\"正確率: \");\n      tempLayout.addView(checkboxes[i]);\n      tempLayout.addView(label);\n      tempLayout.addView(tvScores[i]);\n      chapterLinearLayoutMid.addView(tempLayout);\n    }\n\n    for (int i = half; i < data.size(); i++) {\n      checkboxes[i] = new CheckBox(this);\n      checkboxes[i].setText(data.get(i));\n      checkboxes[i].setButtonDrawable(this.getResources().getDrawable(R.drawable.checkbox));\n      checkboxes[i].setLayoutParams(lp);\n      tvScores[i] = new TextView(this);\n      getIntent()\n          .setData(Uri.parse(\"content://com.mis.icequeen.testprovider/getLastTest:\" + (i + 1)));\n      uri = getIntent().getData();\n      c = managedQuery(uri, null, null, null, null);\n      if (c.getCount() != 0) {\n        c.moveToFirst();\n        tvScores[i].setText(c.getString(0));\n      } else tvScores[i].setText(\"尚未測驗!\");\n      c.close();\n      System.out.println(\"SCORE:\");\n      if (!tvScores[i].getText().equals(\"尚未測驗!\")\n          && Integer.valueOf(tvScores[i].getText().toString().substring(0, 2)) < 70)\n        tvScores[i].setTextColor(Color.RED);\n      else tvScores[i].setTextColor(Color.BLACK);\n      LinearLayout tempLayout = new LinearLayout(this);\n      TextView label = new TextView(this);\n      label.setText(\"正確率: \");\n\n      tempLayout.addView(checkboxes[i]);\n      tempLayout.addView(label);\n      tempLayout.addView(tvScores[i]);\n      chapterLinearLayoutFinal.addView(tempLayout);\n    }\n\n    CheckBox checkBoxMid = (CheckBox) findViewById(R.id.checkBoxMid);\n    CheckBox checkBoxFinal = (CheckBox) findViewById(R.id.checkBoxFinal);\n    checkBoxMid.setOnCheckedChangeListener(\n        new OnCheckedChangeListener() {\n          public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            for (int i = 0; i < half; i++) {\n              checkboxes[i].setChecked(isChecked);\n            }\n          }\n        });\n    checkBoxFinal.setOnCheckedChangeListener(\n        new OnCheckedChangeListener() {\n          public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            for (int i = half; i < data.size(); i++) {\n              checkboxes[i].setChecked(isChecked);\n            }\n          }\n        });\n\n    // 顯示相對應的課本與其圖片\n    // TODO\n\n    switch (BOOK) {\n      case 0: // 第一本書\n        imageView.setImageResource(R.drawable.book_1);\n        tvSelectedTitle.setText(\"Economics\");\n        tvSelectedAuthor.setText(\"John Sloman\");\n        tvSelectedVersion.setText(\"Version 6\");\n        break;\n      case 1:\n        imageView.setImageResource(R.drawable.book_2);\n        tvSelectedTitle.setText(\"Marketing\");\n        tvSelectedAuthor.setText(\"Iceking162\");\n        tvSelectedVersion.setText(\"Version 20\");\n        break;\n      default:\n        break;\n    }\n\n    // 點了確定按鈕\n    // Confirm chapter selection\n    Button btnConfirmChapter = (Button) findViewById(R.id.btnConfirmChapter);\n    btnConfirmChapter.setOnClickListener(\n        new OnClickListener() {\n          public void onClick(View arg0) {\n            int cptrange[] = new int[data.size()];\n            // Intent it = new Intent(ChapterSelectionActivity.this, LearningActivity.class);\n            Intent it = new Intent();\n            boolean checkempty = true;\n            if (MODE.equals(\"LEARN\"))\n              it.setClass(ChapterSelectionActivity.this, LearningActivity.class);\n            else if (MODE.equals(\"REVIEW\"))\n              it.setClass(ChapterSelectionActivity.this, PreReview.class);\n            else if (MODE.equals(\"TEST\")) it.setClass(ChapterSelectionActivity.this, PreTest.class);\n\n            for (int i = 0; i < data.size(); i++) {\n              if (checkboxes[i].isChecked()) {\n                cptrange[i] = 1;\n                checkempty = false;\n              } else cptrange[i] = 0;\n            }\n            it.putExtra(\"init\", true);\n            it.putExtra(\"index\", 0);\n            it.putExtra(\"selected\", cptrange);\n            it.putExtra(\"side\", \"right\");\n\n            it.putExtra(\"MODE\", MODE);\n            it.putExtra(\"BOOK\", BOOK);\n            Log.i(\"INT\", \"received intent MODE=\" + MODE + \";BOOK=\" + BOOK);\n            if (checkempty)\n              Toast.makeText(arg0.getContext(), \"請至少選擇一章節\", Toast.LENGTH_SHORT).show();\n            else {\n              finish();\n              startActivity(it);\n            }\n          }\n        });\n  }\n"}, {"dataset": "addView", "exampleID": 4845, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/racamirko/Common-Sense-Net-2/tree/master/AndroidBarSherlock/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4846, "initialization": ["LinearLayout linearLayout = new LinearLayout(*)"], "initializationStart": [81], "initializationEnd": [116], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setLayoutParams(LinearLayout.LayoutParams)", "linearLayout.setGravity(int)", "linearLayout.setBackgroundColor(int)", "linearLayout.setOrientation(int)"], "configurationStart": [122, 236, 291, 338], "configurationEnd": [230, 285, 332, 387], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 474, "focalAPIEnd": 496, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new PopupWindow(linearLayout,int,*,boolean)"], "useStart": [749], "useEnd": [797], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IntersectAustralia/faims-android/tree/master/faims-android-app/src/au/org/intersect/faims/android/ui/map/button/ToolGroupButton.java", "rawCode": "  private void showMenu(ToolBarButton button) {\n    update();\n\n    popupLayout = new LinearLayout(this.getContext());\n    popupLayout.setLayoutParams(\n        new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n    popupLayout.setGravity(Gravity.CENTER_HORIZONTAL);\n    popupLayout.setBackgroundColor(BAR_COLOR);\n    popupLayout.setOrientation(LinearLayout.VERTICAL);\n    for (ToolBarButton b : buttons) {\n      if (selectedButton == b) continue;\n      popupLayout.addView(b);\n    }\n\n    int w = button.getWidth();\n    int h = button.getHeight();\n\n    int count = 0;\n    for (int i = 0; i < popupLayout.getChildCount(); i++) {\n      if (popupLayout.getChildAt(i).getVisibility() == View.VISIBLE) count++;\n    }\n\n    popupMenu = new PopupWindow(popupLayout, w, h * count, true);\n    popupMenu.setOutsideTouchable(true);\n    popupMenu.setTouchable(true);\n    popupMenu.setBackgroundDrawable(new BitmapDrawable(getContext().getResources()));\n    popupMenu.showAsDropDown(anchor, this.getLeft(), 0);\n  }\n"}, {"dataset": "addView", "exampleID": 4847, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thomasbreitbach/hci_advanced/tree/master/JakeWharton-ActionBarSherlock-071a61c/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4848, "initialization": ["LinearLayout linearLayout = LinearLayout.findViewById(int)", "View child = getLayoutInflater()"], "initializationStart": [786, 911], "initializationEnd": [812, 930], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.removeAllViews()", "child.findViewById(int)", "child.findViewById(int)"], "configurationStart": [818, 990, 1103], "configurationEnd": [837, 1019, 1134], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1202, "focalAPIEnd": 1219, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/m13/DisTetris/tree/master/src/games/distetris/presentation/NewGameWaiting.java", "rawCode": "  /**\n   * Parse a newly received WaitingRoom class\n   *\n   * @param b Bundle containing the WaitingRoom class\n   */\n  private void updateWaitingRoom(Bundle b) {\n\n    this.room = (WaitingRoom) b.getSerializable(\"room\");\n\n    TextView tv;\n    tv = (TextView) findViewById(R.id.WaitingServername);\n    tv.setText(String.valueOf(room.name));\n    tv = (TextView) findViewById(R.id.WaitingNumTeams);\n    tv.setText(String.valueOf(room.numTeams));\n    tv = (TextView) findViewById(R.id.WaitingNumTurns);\n    tv.setText(String.valueOf(room.numTurns));\n\n    tv = (TextView) findViewById(R.id.PlayerID);\n    tv.setText(String.valueOf(room.currentPlayerID));\n    tv = (TextView) findViewById(R.id.TeamID);\n    tv.setText(String.valueOf(room.currentTeamID));\n\n    LinearLayout ll = (LinearLayout) findViewById(R.id.Players);\n    ll.removeAllViews();\n\n    for (int i = 0; i < room.players.size(); i++) {\n      View child = getLayoutInflater().inflate(R.layout.row_player, null);\n\n      tv = (TextView) child.findViewById(R.id.Team);\n      tv.setText(String.valueOf(room.players.get(i).team));\n      tv = (TextView) child.findViewById(R.id.Player);\n      tv.setText(String.valueOf(room.players.get(i).name));\n      ll.addView(child);\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4849, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jfmyers9/ThePantry/tree/master/SherlockActionBarLibrary/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4850, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.removeAllViews()"], "configurationStart": [172], "configurationEnd": [198], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 264, "focalAPIEnd": 291, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)"], "useStart": [425], "useEnd": [452], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/WableMaker/wableAndroid/tree/master/Wable/src/com/thx/bizcat/MainActivity.java", "rawCode": "  @Override\n  public void onClick(View v) {\n\n    if (viewId == v.getId()) return;\n\n    originView.setBackgroundDrawable(viewImage);\n    viewImage = v.getBackground();\n\n    container.removeAllViews();\n    switch (v.getId()) {\n      case R.id.btnMainMypage:\n        container.addView(views[0]);\n        v.setBackgroundResource(R.drawable.menu_tabbar_mybizcat_selected_btn);\n        break;\n\n      case R.id.btnMainPost:\n        container.addView(views[1]);\n        v.setBackgroundResource(R.drawable.menu_tabbar_gobizcat_selected_btn);\n        break;\n\n      case R.id.btnMainSetting:\n        // container.addView(views[2]);\n        // v.setBackgroundResource(R.drawable.menu_tabbar_setting_selected_btn);\n\n        Intent in = new Intent(this, ChatActivity.class);\n        startActivity(in);\n\n        break;\n    }\n    viewId = v.getId();\n    originView = v;\n  }\n"}, {"dataset": "addView", "exampleID": 4851, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child,index)", "focalAPIStart": 2424, "focalAPIEnd": 2460, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/services/java/com/android/server/status/StatusBarService.java", "rawCode": "  /* private */ void performAddUpdateIcon(IBinder key, IconData data, NotificationData n)\n      throws StatusBarException {\n    if (DBG) {\n      Log.d(TAG, \"performAddUpdateIcon icon=\" + data + \" notification=\" + n + \" key=\" + key);\n    }\n    // notification\n    if (n != null) {\n      StatusBarNotification notification = getNotification(key);\n      NotificationData oldData = null;\n      if (notification == null) {\n        // add\n        notification = new StatusBarNotification();\n        notification.key = key;\n        notification.data = n;\n        synchronized (mNotificationData) {\n          mNotificationData.add(notification);\n        }\n        addNotificationView(notification);\n        setAreThereNotifications();\n      } else {\n        // update\n        oldData = notification.data;\n        notification.data = n;\n        updateNotificationView(notification, oldData);\n      }\n      // Show the ticker if one is requested, and the text is different\n      // than the currently displayed ticker. Also don't do this\n      // until status bar window is attached to the window manager,\n      // because... well, what's the point otherwise? And trying to\n      // run a ticker without being attached will crash!\n      if (n.tickerText != null\n          && mStatusBarView.getWindowToken() != null\n          && (oldData == null\n              || oldData.tickerText == null\n              || !CharSequences.equals(oldData.tickerText, n.tickerText))) {\n        if ((mDisabled & StatusBarManager.DISABLE_NOTIFICATION_ICONS) == 0) {\n          mTicker.addEntry(n, StatusBarIcon.getIcon(mContext, data), n.tickerText);\n        }\n      }\n    }\n\n    // icon\n    synchronized (mIconMap) {\n      StatusBarIcon icon = mIconMap.get(key);\n      if (icon == null) {\n        // add\n        LinearLayout v = n == null ? mStatusIcons : mNotificationIcons;\n\n        icon = new StatusBarIcon(mContext, data, v);\n        mIconMap.put(key, icon);\n        mIconList.add(icon);\n\n        if (n == null) {\n          int slotIndex = getRightIconIndex(data.slot);\n          StatusBarIcon[] rightIcons = mRightIcons;\n          if (rightIcons[slotIndex] == null) {\n            int pos = 0;\n            for (int i = mRightIcons.length - 1; i > slotIndex; i--) {\n              StatusBarIcon ic = rightIcons[i];\n              if (ic != null) {\n                pos++;\n              }\n            }\n            rightIcons[slotIndex] = icon;\n            mStatusIcons.addView(icon.view, pos);\n          } else {\n            Log.e(TAG, \"duplicate icon in slot \" + slotIndex + \"/\" + data.slot);\n            mIconMap.remove(key);\n            mIconList.remove(icon);\n            return;\n          }\n        } else {\n          int iconIndex = mNotificationData.getIconIndex(n);\n          mNotificationIcons.addView(icon.view, iconIndex);\n        }\n      } else {\n        if (n == null) {\n          // right hand side icons -- these don't reorder\n          icon.update(mContext, data);\n        } else {\n          // remove old\n          ViewGroup parent = (ViewGroup) icon.view.getParent();\n          parent.removeView(icon.view);\n          // add new\n          icon.update(mContext, data);\n          int iconIndex = mNotificationData.getIconIndex(n);\n          mNotificationIcons.addView(icon.view, iconIndex);\n        }\n      }\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4852, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 224, "focalAPIEnd": 266, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ksallberg/beatr2/tree/master/BeatrProj/src/se/purestyle/beatr/view/editors/SynthEditorView.java", "rawCode": "  /**\n   * This is very adapted and local to this View. I need a slider and I need to add it to this\n   * layout The slider itself is created in the controller\n   */\n  public void addTwoDimensionalSlider(View slider) {\n\n    twoDimensionalSliderHolder.addView(slider);\n  }\n"}, {"dataset": "addView", "exampleID": 4853, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Guillermoo/unutopia-android/tree/master/erralberto/library/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4854, "initialization": ["LinearLayout linearLayout = new LinearLayout(*)", "View child = new View(*)"], "initializationStart": [117, 797], "initializationEnd": [139, 811], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.setLayoutParams(LinearLayout.LayoutParams)", "child.setId(int)", "child.setBackgroundColor(int)", "child.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [145, 196, 628, 652, 693], "configurationEnd": [190, 342, 646, 687, 771], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1307, "focalAPIEnd": 1328, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "ScrollView.addView(linearLayout)"], "useStart": [1334, 1362], "useEnd": [1356, 1387], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/tests/FrameworkTest/src/com/android/frameworktest/view/BigCache.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    final LinearLayout testBed = new LinearLayout(this);\n    testBed.setOrientation(LinearLayout.VERTICAL);\n    testBed.setLayoutParams(\n        new ViewGroup.LayoutParams(\n            ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));\n\n    final int cacheSize = ViewConfiguration.getMaximumDrawingCacheSize();\n    final Display display = getWindowManager().getDefaultDisplay();\n    final int screenWidth = display.getWidth();\n    final int screenHeight = display.getHeight();\n\n    final View tiny = new View(this);\n    tiny.setId(R.id.a);\n    tiny.setBackgroundColor(0xFFFF0000);\n    tiny.setLayoutParams(new LinearLayout.LayoutParams(screenWidth, screenHeight));\n\n    final View large = new View(this);\n    large.setId(R.id.b);\n    large.setBackgroundColor(0xFF00FF00);\n    // Compute the height of the view assuming a cache size based on ARGB8888\n    final int height = 2 * (cacheSize / 2) / screenWidth;\n    large.setLayoutParams(new LinearLayout.LayoutParams(screenWidth, height));\n\n    final ScrollView scroller = new ScrollView(this);\n    scroller.setLayoutParams(\n        new ViewGroup.LayoutParams(\n            ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.FILL_PARENT));\n\n    testBed.addView(tiny);\n    testBed.addView(large);\n    scroller.addView(testBed);\n\n    setContentView(scroller);\n  }\n"}, {"dataset": "addView", "exampleID": 4855, "initialization": ["View child = getLayoutInflater()"], "initializationStart": [347], "initializationEnd": [366], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.findViewById(int)", "child.findViewById(int)", "child.setTag(Attachment)"], "configurationStart": [469, 549, 702], "configurationEnd": [508, 590, 725], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 731, "focalAPIEnd": 757, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mtwebster/IEmail/tree/master/src/com/mwebster/iemail/activity/MessageCompose.java", "rawCode": "  private void addAttachment(Attachment attachment) {\n    // Before attaching the attachment, make sure it meets any other pre-attach criteria\n    if (attachment.mSize > Email.MAX_ATTACHMENT_UPLOAD_SIZE) {\n      Toast.makeText(this, R.string.message_compose_attachment_size, Toast.LENGTH_LONG).show();\n      return;\n    }\n\n    View view =\n        getLayoutInflater().inflate(R.layout.message_compose_attachment, mAttachments, false);\n    TextView nameView = (TextView) view.findViewById(R.id.attachment_name);\n    ImageButton delete = (ImageButton) view.findViewById(R.id.attachment_delete);\n    nameView.setText(attachment.mFileName);\n    delete.setOnClickListener(this);\n    delete.setTag(view);\n    view.setTag(attachment);\n    mAttachments.addView(view);\n  }\n"}, {"dataset": "addView", "exampleID": 4856, "initialization": ["View child = LinearLayout.getChildAt(int)", "View child = LabelAdapter.getView(int,View,LinearLayout)"], "initializationStart": [205, 531], "initializationEnd": [237, 587], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.getChildAt(int)", "child.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [205, 597], "configurationEnd": [237, 625], "guardCondition": "child==null", "guardType": "IF {", "guardExpressionStart": 246, "guardExpressionEnd": 263, "guardBlockStart": 246, "guardBlockEnd": 758, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 636, "focalAPIEnd": 668, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["LabelAdapter.getView(int,View,linearLayout)", "linearLayout.getChildCount()", "linearLayout.removeViewAt(int)"], "useStart": [693, 819, 913], "useEnd": [749, 853, 947], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ZPI/ZPI-Android/tree/master/ChartViewLib/src/com/fima/chartview/ChartView.java", "rawCode": "  private void drawBottomLabels(final Canvas canvas) {\n    // Add views from adapter\n    final int labelCount = mBottomLabelAdapter.getCount();\n    for (int i = 0; i < labelCount; i++) {\n      View view = mBottomLabelLayout.getChildAt(i);\n\n      if (view == null) {\n        LinearLayout.LayoutParams params =\n            new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);\n        if (i == 0 || i == labelCount - 1) {\n          params.weight = 0.5f;\n        } else {\n          params.weight = 1;\n        }\n\n        view = mBottomLabelAdapter.getView(i, view, mBottomLabelLayout);\n        view.setLayoutParams(params);\n\n        mBottomLabelLayout.addView(view);\n      } else {\n        mBottomLabelAdapter.getView(i, view, mBottomLabelLayout);\n      }\n    }\n\n    // Remove extra views\n    final int childCount = mBottomLabelLayout.getChildCount();\n    for (int i = labelCount; i < childCount; i++) {\n      mBottomLabelLayout.removeViewAt(i);\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4857, "initialization": ["View child = inflate(*,*,boolean)"], "initializationStart": [732], "initializationEnd": [819], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.getChildCount()", "linearLayout.getChildAt(int)", "linearLayout.removeViewAt(int)", "child.findViewById(int)", "child.findViewById(int)"], "configurationStart": [194, 441, 585, 862, 1020], "configurationEnd": [220, 465, 611, 912, 1074], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1119, "focalAPIEnd": 1143, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.getChildCount()", "linearLayout.removeViewAt(int)", "linearLayout.getChildAt(int)"], "useStart": [1269, 1334, 1541], "useEnd": [1295, 1371, 1565], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/java/android/app/FragmentBreadCrumbs.java", "rawCode": "  void updateCrumbs() {\n    FragmentManager fm = mActivity.getFragmentManager();\n    int numEntries = fm.getBackStackEntryCount();\n    int numPreEntries = getPreEntryCount();\n    int numViews = mContainer.getChildCount();\n    for (int i = 0; i < numEntries + numPreEntries; i++) {\n      BackStackEntry bse =\n          i < numPreEntries ? getPreEntry(i) : fm.getBackStackEntryAt(i - numPreEntries);\n      if (i < numViews) {\n        View v = mContainer.getChildAt(i);\n        Object tag = v.getTag();\n        if (tag != bse) {\n          for (int j = i; j < numViews; j++) {\n            mContainer.removeViewAt(i);\n          }\n          numViews = i;\n        }\n      }\n      if (i >= numViews) {\n        final View item =\n            mInflater.inflate(com.android.internal.R.layout.fragment_bread_crumb_item, this, false);\n        final TextView text = (TextView) item.findViewById(com.android.internal.R.id.title);\n        text.setText(bse.getBreadCrumbTitle());\n        text.setTag(bse);\n        if (i == 0) {\n          item.findViewById(com.android.internal.R.id.left_icon).setVisibility(View.GONE);\n        }\n        mContainer.addView(item);\n        text.setOnClickListener(mOnClickListener);\n      }\n    }\n    int viewI = numEntries + numPreEntries;\n    numViews = mContainer.getChildCount();\n    while (numViews > viewI) {\n      mContainer.removeViewAt(numViews - 1);\n      numViews--;\n    }\n    // Adjust the visibility and availability of the bread crumbs and divider\n    for (int i = 0; i < numViews; i++) {\n      final View child = mContainer.getChildAt(i);\n      // Disable the last one\n      child.findViewById(com.android.internal.R.id.title).setEnabled(i < numViews - 1);\n      if (mMaxVisible > 0) {\n        // Make only the last mMaxVisible crumbs visible\n        child.setVisibility(i < numViews - mMaxVisible ? View.GONE : View.VISIBLE);\n        final View leftIcon = child.findViewById(com.android.internal.R.id.left_icon);\n        // Remove the divider for all but the last mMaxVisible - 1\n        leftIcon.setVisibility(i > numViews - mMaxVisible && i != 0 ? View.VISIBLE : View.GONE);\n      }\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4858, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1090, "focalAPIEnd": 1114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(View)", "linearLayout.addView(ImageView)", "linearLayout.addView(View)"], "useStart": [1143, 1175, 1207, 1236], "useEnd": [1167, 1199, 1228, 1260], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dashford/asteroid-new/tree/master/Asteroid/src/ie/ucd/asteroid/Calc.java", "rawCode": "  public void MakeBuses(int rnd_bus_size, LinearLayout layout, Context c) {\n\n    ImageView[] buses = new ImageView[5];\n\n    for (int i = 0; i < 5; i++) {\n\n      ImageView bus = new ImageView(c);\n\n      bus.setImageResource(R.drawable.bus);\n      LinearLayout.LayoutParams busLayoutParams =\n          new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n      if (i < 4) {\n        busLayoutParams.setMargins(0, 0, 8, 0);\n      }\n      bus.setLayoutParams(busLayoutParams);\n\n      buses[i] = bus;\n    }\n\n    // setting layout for buses programmatically.\n    ImageView arrow = new ImageView(c);\n\n    arrow.setImageResource(R.drawable.arrow);\n\n    LinearLayout.LayoutParams arrowLayoutParams =\n        new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n\n    arrowLayoutParams.setMargins(0, 8, 8, 0);\n\n    arrow.setLayoutParams(arrowLayoutParams);\n\n    // if less than 6 buses in size, then show all the buses, else show the bus with the arrows\n    if (rnd_bus_size < 6) {\n\n      for (int i = 0; i < rnd_bus_size; i++) {\n        layout.addView(buses[i]);\n      }\n    } else {\n      layout.addView(buses[0]);\n      layout.addView(buses[1]);\n      layout.addView(arrow);\n      layout.addView(buses[3]);\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4859, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [87], "configurationEnd": [205], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 211, "focalAPIEnd": 238, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/crosswalk-project/crosswalk/tree/master/runtime/android/core_shell/src/org/xwalk/core/xwview/test/XWalkViewTestRunnerActivity.java", "rawCode": "  /** Adds a view to the main linear layout. */\n  public void addView(View view) {\n    view.setLayoutParams(\n        new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1f));\n    mLinearLayout.addView(view);\n  }\n"}, {"dataset": "addView", "exampleID": 4860, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.setId(int)", "child.setLayoutParams(LinearLayout.LayoutParams)", "child.setWebChromeClient(*)", "child.setInitialScale(int)", "child.setVerticalScrollBarEnabled(boolean)", "child.requestFocusFromTouch()", "child.getSettings()", "child.setVisibility(int)"], "configurationStart": [340, 370, 536, 673, 710, 763, 854, 1538], "configurationEnd": [363, 529, 597, 704, 757, 799, 880, 1580], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1586, "focalAPIEnd": 1612, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setContentView(linearLayout)"], "useStart": [1618], "useEnd": [1638], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cloudspokes/mobile_campus/tree/master/aau/android/SalesforceSDK/libs/incubator-cordova-android-framework/src/org/apache/cordova/DroidGap.java", "rawCode": "  /**\n   * Initialize web container with web view objects.\n   *\n   * @param webView\n   * @param webViewClient\n   * @param webChromeClient\n   */\n  public void init(WebView webView, WebViewClient webViewClient, WebChromeClient webChromeClient) {\n    LOG.d(TAG, \"DroidGap.init()\");\n\n    // Set up web container\n    this.appView = webView;\n    this.appView.setId(100);\n\n    this.appView.setLayoutParams(\n        new LinearLayout.LayoutParams(\n            ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.FILL_PARENT, 1.0F));\n\n    this.appView.setWebChromeClient(this.createWebChromeClient());\n    this.setWebViewClient(this.appView, this.createWebViewClient());\n\n    this.appView.setInitialScale(0);\n    this.appView.setVerticalScrollBarEnabled(false);\n    this.appView.requestFocusFromTouch();\n\n    // Enable JavaScript\n    WebSettings settings = this.appView.getSettings();\n    settings.setJavaScriptEnabled(true);\n    settings.setJavaScriptCanOpenWindowsAutomatically(true);\n    settings.setLayoutAlgorithm(LayoutAlgorithm.NORMAL);\n\n    // Set the nav dump for HTC\n    settings.setNavDump(true);\n\n    // Enable database\n    settings.setDatabaseEnabled(true);\n    String databasePath =\n        this.getApplicationContext().getDir(\"database\", Context.MODE_PRIVATE).getPath();\n    settings.setDatabasePath(databasePath);\n\n    // Enable DOM storage\n    settings.setDomStorageEnabled(true);\n\n    // Enable built-in geolocation\n    settings.setGeolocationEnabled(true);\n\n    // Add web view but make it invisible while loading URL\n    this.appView.setVisibility(View.INVISIBLE);\n    root.addView(this.appView);\n    setContentView(root);\n\n    // Clear cancel flag\n    this.cancelLoadUrl = false;\n\n    // Create plugin manager\n    this.pluginManager = new PluginManager(this.appView, this);\n  }\n"}, {"dataset": "addView", "exampleID": 4861, "initialization": ["View child = getLayoutInflater()"], "initializationStart": [347], "initializationEnd": [366], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.findViewById(int)", "child.findViewById(int)", "child.setTag(Attachment)"], "configurationStart": [469, 549, 702], "configurationEnd": [508, 590, 725], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 731, "focalAPIEnd": 757, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmobile/themes-platform-packages-apps-Email/tree/master/src/com/android/email/activity/MessageCompose.java", "rawCode": "  private void addAttachment(Attachment attachment) {\n    // Before attaching the attachment, make sure it meets any other pre-attach criteria\n    if (attachment.mSize > Email.MAX_ATTACHMENT_UPLOAD_SIZE) {\n      Toast.makeText(this, R.string.message_compose_attachment_size, Toast.LENGTH_LONG).show();\n      return;\n    }\n\n    View view =\n        getLayoutInflater().inflate(R.layout.message_compose_attachment, mAttachments, false);\n    TextView nameView = (TextView) view.findViewById(R.id.attachment_name);\n    ImageButton delete = (ImageButton) view.findViewById(R.id.attachment_delete);\n    nameView.setText(attachment.mFileName);\n    delete.setOnClickListener(this);\n    delete.setTag(view);\n    view.setTag(attachment);\n    mAttachments.addView(view);\n  }\n"}, {"dataset": "addView", "exampleID": 4862, "initialization": ["View child = from(Context)"], "initializationStart": [131], "initializationEnd": [159], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.removeAllViews()", "child.setVisibility(int)", "child.findViewById(int)", "child.findViewById(int)"], "configurationStart": [93, 220, 301, 366], "configurationEnd": [116, 246, 331, 397], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 930, "focalAPIEnd": 947, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fywb251/bsl_impc_android/tree/master/cube-android/src/com/foreveross/chameleon/util/PushUtil.java", "rawCode": "  public static void drawCountWithImg(Context context, LinearLayout layout, int count) {\n    layout.removeAllViews();\n    View v = LayoutInflater.from(context).inflate(R.layout.count, null);\n\n    if (count == 0) {\n      v.setVisibility(View.GONE);\n    } else {\n      ImageView countView = (ImageView) v.findViewById(R.id.count_img);\n      TextView text = (TextView) v.findViewById(R.id.count_text);\n      text.setText(String.valueOf(count));\n      int tmpCount = 1;\n      while (count >= 10) {\n        count = count / 10;\n        tmpCount++;\n      }\n      switch (tmpCount) {\n        case 1:\n          countView.setBackgroundResource(R.drawable.push_count_1);\n          break;\n        case 2:\n          countView.setBackgroundResource(R.drawable.push_count_10);\n          break;\n        case 3:\n          countView.setBackgroundResource(R.drawable.push_count_100);\n          break;\n        default:\n          break;\n      }\n      layout.addView(v);\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4863, "initialization": ["LinearLayout linearLayout = LinearLayout.findViewById(int)", "View child = new View(Context)"], "initializationStart": [508, 3940], "initializationEnd": [544, 3958], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [3968], "configurationEnd": [4028], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child,index)", "focalAPIStart": 4038, "focalAPIEnd": 4072, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)"], "useStart": [4082], "useEnd": [4114], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/packages/SystemUI/src/com/android/systemui/statusbar/NavigationBarView.java", "rawCode": "  private void makeBar() {\n\n    ((LinearLayout) rot0.findViewById(R.id.nav_buttons)).removeAllViews();\n    ((LinearLayout) rot0.findViewById(R.id.lights_out)).removeAllViews();\n    ((LinearLayout) rot90.findViewById(R.id.nav_buttons)).removeAllViews();\n    ((LinearLayout) rot90.findViewById(R.id.lights_out)).removeAllViews();\n\n    for (int i = 0; i <= 1; i++) {\n      boolean landscape = (i == 1);\n\n      LinearLayout navButtonLayout =\n          (LinearLayout)\n              (landscape\n                  ? rot90.findViewById(R.id.nav_buttons)\n                  : rot0.findViewById(R.id.nav_buttons));\n\n      LinearLayout lightsOut =\n          (LinearLayout)\n              (landscape\n                  ? rot90.findViewById(R.id.lights_out)\n                  : rot0.findViewById(R.id.lights_out));\n\n      // Add the Main Nav Buttons\n      mHasBigMenuButton = false;\n      String iconUri = \"\";\n      for (int j = 0; j < mNumberOfButtons; j++) {\n        ExtensibleKeyButtonView v =\n            generateKey(landscape, mClickActions[j], mLongpressActions[j], mPortraitIcons[j]);\n        v.setTag((landscape ? \"key_land_\" : \"key_\") + j);\n        iconUri = mPortraitIcons[j];\n        if (iconUri != null && iconUri.length() > 0) {\n          // custom icon from the URI here\n          File f = new File(Uri.parse(iconUri).getPath());\n          if (f.exists()) {\n            v.setImageDrawable(new BitmapDrawable(getResources(), f.getAbsolutePath()));\n          }\n          v.setTint(mColorAllIcons);\n        } else {\n          v.setImageDrawable(NavBarHelpers.getIconImage(mContext, mClickActions[j]));\n          v.setTint(mClickActions[j].startsWith(\"**\") || mColorAllIcons);\n        }\n        addButton(navButtonLayout, v, landscape && !mLeftyMode);\n        // if we are in LeftyMode, then we want to add to end, like Portrait\n        addLightsOutButton(lightsOut, v, landscape && !mLeftyMode, false);\n\n        if (v.getId() == R.id.back) {\n          mBackIcon = mBackLandIcon = v.getDrawable();\n        }\n        if (v.getId() == R.id.navbar_menu_big) {\n          mHasBigMenuButton = true;\n        }\n        if (mNumberOfButtons == 3 && j != (mNumberOfButtons - 1)) {\n          // add separator view here\n          View separator = new View(mContext);\n          separator.setLayoutParams(getSeparatorLayoutParams(landscape));\n          addButton(navButtonLayout, separator, landscape);\n          addLightsOutButton(lightsOut, separator, landscape, true);\n        }\n      }\n      if (mMenuLocation != SHOW_DONT) {\n        // add left menu\n        View leftMenuKey = generateKey(landscape, KEY_MENU_LEFT);\n        // since we didn't add these at the beginning, we need to insert it now\n        // the behavior is backwards from landscape (ie, insert at beginning\n        // if portrait, add to end if landscape\n        addButton(navButtonLayout, leftMenuKey, !landscape || (landscape && mLeftyMode));\n        addLightsOutButton(lightsOut, leftMenuKey, !landscape || (landscape && mLeftyMode), true);\n        // add right menu\n        View rightMenuKey = generateKey(landscape, KEY_MENU_RIGHT);\n        addButton(navButtonLayout, rightMenuKey, landscape && !mLeftyMode);\n        addLightsOutButton(lightsOut, rightMenuKey, landscape && !mLeftyMode, true);\n      } else if (mMenuArrowKeys) {\n        addButton(navButtonLayout, generateKey(landscape, KEY_ARROW_LEFT), !landscape);\n        addButton(navButtonLayout, generateKey(landscape, KEY_ARROW_RIGHT), landscape);\n      }\n      if (mSystemUiLayout >= 1000) {\n        // add spacer views to the outside edges to help with Glowscale cutoff\n        // We'll only do this for Tablet UI for now. It was suffering the worst from\n        // glowscale cutoff. I may add some user adjustable padding at a later date that\n        // we'll apply to all styles of NavBar.\n        View spacer = new View(mContext);\n        spacer.setLayoutParams(getSeparatorLayoutParams(landscape));\n        View spacer1 = new View(mContext);\n        spacer1.setLayoutParams(getSeparatorLayoutParams(landscape));\n        navButtonLayout.addView(spacer, 0);\n        navButtonLayout.addView(spacer1);\n      }\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4864, "initialization": ["View child = from(*)"], "initializationStart": [49], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.findViewById(int)", "child.findViewById(int)", "child.findViewById(int)", "child.findViewById(int)", "child.findViewById(int)", "child.findViewById(int)", "linearLayout.removeAllViews()"], "configurationStart": [159, 235, 314, 389, 462, 540, 904], "configurationEnd": [198, 277, 356, 427, 502, 583, 933], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 939, "focalAPIEnd": 965, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openproject/world/tree/master/floworld/src/com/tianxia/app/floworld/appreciate/AppreciateLatestActivity.java", "rawCode": "  private void setHeaderView() {\n    View view = LayoutInflater.from(this).inflate(R.layout.appreciate_ad_company_shop, null);\n    mAdCompanyName = (TextView) view.findViewById(R.id.ad_company_name);\n    mAdCompanyContact = (TextView) view.findViewById(R.id.ad_company_contact);\n    mAdCompanyAddress = (TextView) view.findViewById(R.id.ad_company_address);\n    mAdCompanyTel = (TextView) view.findViewById(R.id.ad_company_tel);\n    mAdCompanyPhone = (TextView) view.findViewById(R.id.ad_company_phone);\n    mAdCompanyBusiness = (TextView) view.findViewById(R.id.ad_company_business);\n\n    mAdCompanyName.setText(mAdCompanyInfo.name);\n    mAdCompanyContact.setText(mAdCompanyInfo.contact);\n    mAdCompanyAddress.setText(mAdCompanyInfo.address);\n    mAdCompanyTel.setText(mAdCompanyInfo.tel);\n    mAdCompanyPhone.setText(mAdCompanyInfo.phone);\n    mAdCompanyBusiness.setText(mAdCompanyInfo.business);\n    mAdContainer.removeAllViews();\n    mAdContainer.addView(view);\n  }\n"}, {"dataset": "addView", "exampleID": 4865, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pixmob/freemobilenetstat/tree/master/deps/httpclient/demo/deps/abs/library/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4866, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 140, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chrispbailey/ToDo-List-Widget/tree/master/src/org/chrisbailey/todo/activities/SizesConfiguration.java", "rawCode": "  private void addWidget(LinearLayout layout, Class<? extends AppWidgetProvider> c, int res) {\n    Widget w = new Widget(c, this, res);\n    layout.addView(w.cb);\n    widgetList.add(w);\n  }\n"}, {"dataset": "addView", "exampleID": 4867, "initialization": ["LinearLayout linearLayout = LinearLayout.findViewById(int)"], "initializationStart": [415], "initializationEnd": [454], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()", "toString()", "onException(*)"], "tryExpressionStart": 1112, "tryExpressionEnd": 1116, "tryBlockStart": 1112, "tryBlockEnd": 1854, "catchExpressionStart": 1684, "catchExpressionEnd": 1708, "catchBlockStart": 1684, "catchBlockEnd": 1854, "exceptionHandlingCallStart": [1720, 1777, 1751], "exceptionHandlingCallEnd": [1739, 1789, 1790], "configuration": ["child.setText(*)", "child.setChecked(*)"], "configurationStart": [1228, 1289], "configurationEnd": [1275, 1330], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1344, "focalAPIEnd": 1374, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mikofski/SifterReader/tree/master/src/com/BreakingBytes/SifterReader/IssuesActivity.java", "rawCode": "  @Override\n  protected Dialog onCreateDialog(int id) {\n    Dialog dialog = null;\n    switch (id) {\n      case NUMBER_DIALOG_ID:\n        Dialog perpageDialog = new Dialog(this);\n        perpageDialog.setOnDismissListener(mNumberSetListener);\n        perpageDialog.setContentView(R.layout.perpage_dialog);\n        perpageDialog.setTitle(R.string.issues_menu_settings);\n        LinearLayout statusLL = (LinearLayout) perpageDialog.findViewById(R.id.status);\n        LinearLayout priorityLL = (LinearLayout) perpageDialog.findViewById(R.id.priority);\n        EditText perpage = (EditText) perpageDialog.findViewById(R.id.perpage);\n        perpage.setText(String.valueOf(mPerPage));\n        Button okButton = (Button) perpageDialog.findViewById(R.id.perpage_ok);\n        okButton.setOnClickListener(\n            new View.OnClickListener() {\n              // anonymous inner class\n              public void onClick(View view) {\n                dismissDialog(NUMBER_DIALOG_ID);\n              }\n            });\n        mStatusCB = new CheckBox[mNumStatuses];\n        mPriorityCB = new CheckBox[mNumPriorities];\n        try {\n          for (int i = 0; i < mNumStatuses; i++) {\n            mStatusCB[i] = new CheckBox(this);\n            mStatusCB[i].setText(mStatusNames.getString(i));\n            mStatusCB[i].setChecked(mFilterStatus[i]);\n            statusLL.addView(mStatusCB[i]);\n          }\n          for (int i = 0; i < mNumPriorities; i++) {\n            mPriorityCB[i] = new CheckBox(this);\n            mPriorityCB[i].setText(mPriorityNames.getString(i));\n            mPriorityCB[i].setChecked(mFilterPriority[i]);\n            priorityLL.addView(mPriorityCB[i]);\n          }\n        } catch (JSONException e) {\n          e.printStackTrace();\n          mSifterHelper.onException(e.toString());\n          return dialog; // return null on exception\n        }\n        return perpageDialog;\n      default:\n        dialog = null;\n    }\n    return dialog;\n  }\n"}, {"dataset": "addView", "exampleID": 4868, "initialization": ["View child = new View(*)"], "initializationStart": [168], "initializationEnd": [182], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.setBackgroundDrawable(BitmapDrawable)", "child.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [334, 370], "configurationEnd": [363, 477], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 483, "focalAPIEnd": 503, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/tests/DpiTest/src/com/google/android/test/dpi/DpiTestActivity.java", "rawCode": "  private void addBitmapDrawable(LinearLayout layout, int resource, boolean scale) {\n    Bitmap bitmap;\n    bitmap = loadAndPrintDpi(resource, scale);\n\n    View view = new View(this);\n\n    final BitmapDrawable d = new BitmapDrawable(getResources(), bitmap);\n    if (!scale) d.setTargetDensity(getResources().getDisplayMetrics());\n    view.setBackgroundDrawable(d);\n\n    view.setLayoutParams(\n        new LinearLayout.LayoutParams(d.getIntrinsicWidth(), d.getIntrinsicHeight()));\n    layout.addView(view);\n  }\n"}, {"dataset": "addView", "exampleID": 4869, "initialization": ["LinearLayout linearLayout = new ViewFlipper(*)"], "initializationStart": [392], "initializationEnd": [413], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 2409, "focalAPIEnd": 2426, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tkymx/card-of-diffence/tree/master/GLSurfaceView/src/com/example/glsurfaceview/StageSelect.java", "rawCode": "  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    requestWindowFeature(Window.FEATURE_NO_TITLE);\n\n    WindowManager windowmanager = (WindowManager) getSystemService(WINDOW_SERVICE);\n    Point point = new Point();\n    Display disp = windowmanager.getDefaultDisplay();\n    disp.getSize(point);\n\n    width = point.x;\n    height = point.y;\n\n    vf = new ViewFlipper(this);\n    title = new TextView(this);\n    ll = new LinearLayout(this);\n    ll.setOrientation(LinearLayout.VERTICAL);\n    secondll = new LinearLayout(this);\n    left = new Button(this);\n    right = new Button(this);\n    deck = new Button(this);\n\n    // 大きさ\n    LinearLayout.LayoutParams titleParam =\n        new LinearLayout.LayoutParams(Const.rx(0.8), Const.ry(0.15));\n    titleParam.setMargins(Const.rx(0.1), Const.ry(0.05), 0, 0);\n    title.setTextSize(Const.ry(0.04));\n\n    LinearLayout.LayoutParams vfParam = new LinearLayout.LayoutParams(Const.rx(0.5), Const.ry(0.5));\n    vfParam.setMargins(Const.rx(0.05), Const.ry(0.05), 0, 0);\n\n    // 左パネル\n    LinearLayout.LayoutParams leftParam =\n        new LinearLayout.LayoutParams(Const.rx(0.1), Const.ry(0.2));\n    leftParam.setMargins(Const.rx(0.1), Const.ry(0.22), 0, 0);\n\n    // 右パネル\n    LinearLayout.LayoutParams rightParam =\n        new LinearLayout.LayoutParams(Const.rx(0.1), Const.ry(0.2));\n    rightParam.setMargins(Const.rx(0.05), Const.ry(0.22), 0, 0);\n\n    // デッキ情報\n    LinearLayout.LayoutParams deckParam =\n        new LinearLayout.LayoutParams(Const.rx(0.4), Const.ry(0.15));\n    deckParam.setMargins(Const.rx(0.3), Const.ry(0.03), 0, 0);\n\n    // title.setBackgroundResource(R.drawable.back_result);\n    ll.setBackgroundResource(R.drawable.oldmap);\n    right.setBackgroundResource(R.drawable.right_button);\n    left.setBackgroundResource(R.drawable.left_button);\n    deck.setBackgroundResource(R.drawable.deckbutton);\n\n    setContentView(ll);\n\n    // コンテンツに追加\n    ll.addView(title, titleParam);\n    ll.addView(secondll);\n    ll.addView(deck, deckParam);\n    secondll.addView(left, leftParam);\n    secondll.addView(vf, vfParam);\n    secondll.addView(right, rightParam);\n\n    // title.setText(\"ステージ選択画面\");\n    // deck.setText(\"デッキ編集\");\n\n    // ステージの追加\n    for (int i = 0; i < DataBase.getPresentStageNum(); i++) {\n      sv[i] = new StageView(this, i + 1, StageInformaion.GetStage(i));\n      sv[i].setOnTouchListener(new SampleTL());\n      vf.addView(sv[i]);\n    }\n\n    // 基本的なクリックリスナー\n\n    // vf.setOnTouchListener(new SampleTL());\n    right.setOnClickListener(new SampleClickListener());\n    left.setOnClickListener(new SampleClickListener());\n    deck.setOnClickListener(new SampleClickListener());\n  }\n"}, {"dataset": "addView", "exampleID": 4870, "initialization": ["View child = inflate(*,*,boolean)"], "initializationStart": [732], "initializationEnd": [819], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.getChildCount()", "linearLayout.getChildAt(int)", "linearLayout.removeViewAt(int)", "child.findViewById(int)", "child.findViewById(int)"], "configurationStart": [194, 441, 585, 862, 1020], "configurationEnd": [220, 465, 611, 912, 1074], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1119, "focalAPIEnd": 1143, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.getChildCount()", "linearLayout.removeViewAt(int)", "linearLayout.getChildAt(int)"], "useStart": [1269, 1334, 1541], "useEnd": [1295, 1371, 1565], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/java/android/app/FragmentBreadCrumbs.java", "rawCode": "  void updateCrumbs() {\n    FragmentManager fm = mActivity.getFragmentManager();\n    int numEntries = fm.getBackStackEntryCount();\n    int numPreEntries = getPreEntryCount();\n    int numViews = mContainer.getChildCount();\n    for (int i = 0; i < numEntries + numPreEntries; i++) {\n      BackStackEntry bse =\n          i < numPreEntries ? getPreEntry(i) : fm.getBackStackEntryAt(i - numPreEntries);\n      if (i < numViews) {\n        View v = mContainer.getChildAt(i);\n        Object tag = v.getTag();\n        if (tag != bse) {\n          for (int j = i; j < numViews; j++) {\n            mContainer.removeViewAt(i);\n          }\n          numViews = i;\n        }\n      }\n      if (i >= numViews) {\n        final View item =\n            mInflater.inflate(com.android.internal.R.layout.fragment_bread_crumb_item, this, false);\n        final TextView text = (TextView) item.findViewById(com.android.internal.R.id.title);\n        text.setText(bse.getBreadCrumbTitle());\n        text.setTag(bse);\n        if (i == 0) {\n          item.findViewById(com.android.internal.R.id.left_icon).setVisibility(View.GONE);\n        }\n        mContainer.addView(item);\n        text.setOnClickListener(mOnClickListener);\n      }\n    }\n    int viewI = numEntries + numPreEntries;\n    numViews = mContainer.getChildCount();\n    while (numViews > viewI) {\n      mContainer.removeViewAt(numViews - 1);\n      numViews--;\n    }\n    // Adjust the visibility and availability of the bread crumbs and divider\n    for (int i = 0; i < numViews; i++) {\n      final View child = mContainer.getChildAt(i);\n      // Disable the last one\n      child.findViewById(com.android.internal.R.id.title).setEnabled(i < numViews - 1);\n      if (mMaxVisible > 0) {\n        // Make only the last mMaxVisible crumbs visible\n        child.setVisibility(i < numViews - mMaxVisible ? View.GONE : View.VISIBLE);\n        final View leftIcon = child.findViewById(com.android.internal.R.id.left_icon);\n        // Remove the divider for all but the last mMaxVisible - 1\n        leftIcon.setVisibility(i > numViews - mMaxVisible && i != 0 ? View.VISIBLE : View.GONE);\n      }\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4871, "initialization": ["View child = new View(*)"], "initializationStart": [1548], "initializationEnd": [1571], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.setBackgroundColor(int)", "child.setLayoutParams(LinearLayout.LayoutParams)", "linearLayout.addView(LinearLayout)"], "configurationStart": [1577, 1656, 1705], "configurationEnd": [1650, 1698, 1729], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1735, "focalAPIEnd": 1767, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jerryofouc/AmazingMiniSkirt/tree/master/AmazingClient/src/com/netease/amazing/component/ContactFragment.java", "rawCode": "  /**\n   * 设置相应联系人的信息\n   *\n   * @param i 设置当前联系人在contactList中的位置，便于activity跳转时传递数据\n   * @param contact\n   * @param contactLayout\n   * @param blackLineLayout\n   * @param textViewLayout\n   */\n  private void setContactLayout(\n      int i,\n      Contact contact,\n      LinearLayout contactLayout,\n      LinearLayout.LayoutParams linearLayout,\n      LinearLayout.LayoutParams blackLineLayout,\n      LinearLayout.LayoutParams textViewLayout) {\n    LinearLayout l = new LinearLayout(getActivity());\n    l.setOrientation(0);\n    l.setLayoutParams(linearLayout);\n\n    Resources res = getResources();\n    float value =\n        TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 8, res.getDisplayMetrics());\n    l.setPadding((int) value, (int) value, (int) value, (int) value);\n\n    ImageView img = new ImageView(getActivity());\n    value = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, res.getDisplayMetrics());\n    img.setLayoutParams(new LayoutParams((int) value, (int) value));\n    new InitImageView(img).execute(contact.getImgDir());\n    l.addView(img);\n\n    TextView nameView = new TextView(getActivity());\n    nameView.setText(contact.getName());\n    value = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 20, res.getDisplayMetrics());\n    textViewLayout.setMargins((int) value, 0, 0, 0);\n    nameView.setLayoutParams(textViewLayout);\n    nameView.setGravity(Gravity.CENTER_VERTICAL);\n    nameView.setTextSize(20);\n    nameView.setOnClickListener(new ContactViewItemListener(i));\n    l.addView(nameView);\n\n    View blackLine = new View(getActivity());\n    blackLine.setBackgroundColor(getResources().getColor(R.color.black_line));\n    blackLine.setLayoutParams(blackLineLayout);\n\n    contactLayout.addView(l);\n    contactLayout.addView(blackLine);\n  }\n"}, {"dataset": "addView", "exampleID": 4872, "initialization": ["View child = inflate(*,*,boolean)"], "initializationStart": [732], "initializationEnd": [819], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.getChildCount()", "linearLayout.getChildAt(int)", "linearLayout.removeViewAt(int)", "child.findViewById(int)", "child.findViewById(int)"], "configurationStart": [194, 441, 585, 862, 1020], "configurationEnd": [220, 465, 611, 912, 1074], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1119, "focalAPIEnd": 1143, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.getChildCount()", "linearLayout.removeViewAt(int)", "linearLayout.getChildAt(int)"], "useStart": [1269, 1334, 1541], "useEnd": [1295, 1371, 1565], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/java/android/app/FragmentBreadCrumbs.java", "rawCode": "  void updateCrumbs() {\n    FragmentManager fm = mActivity.getFragmentManager();\n    int numEntries = fm.getBackStackEntryCount();\n    int numPreEntries = getPreEntryCount();\n    int numViews = mContainer.getChildCount();\n    for (int i = 0; i < numEntries + numPreEntries; i++) {\n      BackStackEntry bse =\n          i < numPreEntries ? getPreEntry(i) : fm.getBackStackEntryAt(i - numPreEntries);\n      if (i < numViews) {\n        View v = mContainer.getChildAt(i);\n        Object tag = v.getTag();\n        if (tag != bse) {\n          for (int j = i; j < numViews; j++) {\n            mContainer.removeViewAt(i);\n          }\n          numViews = i;\n        }\n      }\n      if (i >= numViews) {\n        final View item =\n            mInflater.inflate(com.android.internal.R.layout.fragment_bread_crumb_item, this, false);\n        final TextView text = (TextView) item.findViewById(com.android.internal.R.id.title);\n        text.setText(bse.getBreadCrumbTitle());\n        text.setTag(bse);\n        if (i == 0) {\n          item.findViewById(com.android.internal.R.id.left_icon).setVisibility(View.GONE);\n        }\n        mContainer.addView(item);\n        text.setOnClickListener(mOnClickListener);\n      }\n    }\n    int viewI = numEntries + numPreEntries;\n    numViews = mContainer.getChildCount();\n    while (numViews > viewI) {\n      mContainer.removeViewAt(numViews - 1);\n      numViews--;\n    }\n    // Adjust the visibility and availability of the bread crumbs and divider\n    for (int i = 0; i < numViews; i++) {\n      final View child = mContainer.getChildAt(i);\n      // Disable the last one\n      child.findViewById(com.android.internal.R.id.title).setEnabled(i < numViews - 1);\n      if (mMaxVisible > 0) {\n        // Make only the last mMaxVisible crumbs visible\n        child.setVisibility(i < numViews - mMaxVisible ? View.GONE : View.VISIBLE);\n        final View leftIcon = child.findViewById(com.android.internal.R.id.left_icon);\n        // Remove the divider for all but the last mMaxVisible - 1\n        leftIcon.setVisibility(i > numViews - mMaxVisible && i != 0 ? View.VISIBLE : View.GONE);\n      }\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4873, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schoentoon/Connectbot/tree/master/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4874, "initialization": ["View child = getMenuItem(*,*)"], "initializationStart": [127], "initializationEnd": [170], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.removeAllViews()", "child.setFocusable(boolean)", "child.setEnabled(boolean)", "child.setClickable(boolean)"], "configurationStart": [38, 179, 210, 239], "configurationEnd": [64, 202, 231, 262], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 270, "focalAPIEnd": 293, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIT-Mobile/MIT-Mobile-for-Android/tree/master/src/edu/mit/mitmobile2/MITPopupMenu.java", "rawCode": "  public void refreshMenuList() {\n    mMenuList.removeAllViews();\n\n    for (MITMenuItem item : mMenuItems) {\n      View view = getMenuItem(item, mMenuItems.indexOf(item));\n\n      view.setFocusable(true);\n      view.setEnabled(true);\n      view.setClickable(true);\n      mMenuList.addView(view);\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4875, "initialization": ["View child = getLayoutInflater()"], "initializationStart": [347], "initializationEnd": [366], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.findViewById(int)", "child.findViewById(int)", "child.setTag(Attachment)"], "configurationStart": [469, 549, 702], "configurationEnd": [508, 590, 725], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 731, "focalAPIEnd": 757, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_packages_apps_Email/tree/master/src/com/android/email/activity/MessageCompose.java", "rawCode": "  private void addAttachment(Attachment attachment) {\n    // Before attaching the attachment, make sure it meets any other pre-attach criteria\n    if (attachment.mSize > Email.MAX_ATTACHMENT_UPLOAD_SIZE) {\n      Toast.makeText(this, R.string.message_compose_attachment_size, Toast.LENGTH_LONG).show();\n      return;\n    }\n\n    View view =\n        getLayoutInflater().inflate(R.layout.message_compose_attachment, mAttachments, false);\n    TextView nameView = (TextView) view.findViewById(R.id.attachment_name);\n    ImageButton delete = (ImageButton) view.findViewById(R.id.attachment_delete);\n    nameView.setText(attachment.mFileName);\n    delete.setOnClickListener(this);\n    delete.setTag(view);\n    view.setTag(attachment);\n    mAttachments.addView(view);\n  }\n"}, {"dataset": "addView", "exampleID": 4876, "initialization": ["View child = getLayoutInflater()"], "initializationStart": [225], "initializationEnd": [244], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.findViewById(int)", "child.findViewById(int)"], "configurationStart": [402, 535], "configurationEnd": [478, 610], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1038, "focalAPIEnd": 1081, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)"], "useStart": [1118], "useEnd": [1161], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/asorici/envived-client/tree/master/src/com/envived/android/features/program/PresentationDetailsActivity.java", "rawCode": "  private void setupSpeakerViews() {\n\n    int len = mSpeakerInfoList.size();\n    for (int i = 0; i < len; i++) {\n      PresentationSpeakerInfo speakerInfo = mSpeakerInfoList.get(i);\n\n      View speakerInfoRowView =\n          getLayoutInflater()\n              .inflate(R.layout.program_presentation_details_speaker_row, mSpeakersLayout, false);\n\n      ImageView speakerImageView =\n          (ImageView) speakerInfoRowView.findViewById(R.id.presentation_details_speaker_row_image);\n      TextView speakerImageName =\n          (TextView) speakerInfoRowView.findViewById(R.id.presentation_details_speaker_row_name);\n\n      if (mImageFetcher != null && speakerInfo.getImageUrl() != null) {\n        mImageFetcher.loadImage(speakerInfo.getImageUrl(), speakerImageView);\n      }\n\n      speakerImageName.setText(speakerInfo.getFirstName() + \" \" + speakerInfo.getLastName());\n      speakerImageName.setOnClickListener(\n          new PresentationSpeakerClickListener(speakerInfo.getSpeakerId()));\n\n      // add speaker row view speaker layout\n      mSpeakersLayout.addView(speakerInfoRowView);\n\n      if (i != len - 1) {\n        mSpeakersLayout.addView(getSeparatorView());\n      }\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4877, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/galievruslan/mss-android/tree/master/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4878, "initialization": ["LinearLayout linearLayout = new LinearLayout(*)", "View child = getLayoutInflater()"], "initializationStart": [429, 682], "initializationEnd": [451, 701], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [457, 508], "configurationEnd": [502, 655], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 794, "focalAPIEnd": 815, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["View.addView(linearLayout)"], "useStart": [822], "useEnd": [863], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/tests/ImfTest/src/com/android/imftest/samples/BigEditTextActivityScrollablePanScan.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);\n\n    mRootView = new ScrollView(this);\n    ((ScrollView) mRootView).setFillViewport(true);\n    mRootView.setLayoutParams(\n        new ViewGroup.LayoutParams(\n            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\n\n    mLayout = new LinearLayout(this);\n    mLayout.setOrientation(LinearLayout.VERTICAL);\n    mLayout.setLayoutParams(\n        new ViewGroup.LayoutParams(\n            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\n\n    View view =\n        getLayoutInflater()\n            .inflate(R.layout.full_screen_edit_text, ((ScrollView) mRootView), false);\n\n    mLayout.addView(view);\n\n    ((ScrollView) mRootView).addView(mLayout);\n    mDefaultFocusedView = view.findViewById(R.id.data);\n\n    setContentView(mRootView);\n  }\n"}, {"dataset": "addView", "exampleID": 4879, "initialization": ["LinearLayout linearLayout = new FrameLayout(*)"], "initializationStart": [744], "initializationEnd": [773], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setLayoutParams(LinearLayout.LayoutParams)", "linearLayout.setLayoutParams(LinearLayout.LayoutParams)", "linearLayout.setOnClickListener(OnClickListener)", "linearLayout.addView(ImageView)"], "configurationStart": [781, 844, 949, 1257], "configurationEnd": [807, 907, 976, 1271], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1669, "focalAPIEnd": 1689, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/onecoders/ViewPageIndicator/tree/master/Share SDK/Libs/OneKeyShare/src/cn/sharesdk/onekeyshare/EditPage.java", "rawCode": "  /** 显示平台列表 */\n  public void afterPlatformListGot() {\n    String name = String.valueOf(reqData.get(\"platform\"));\n    int size = platformList == null ? 0 : platformList.length;\n    views = new View[size];\n\n    final int dp_36 = cn.sharesdk.framework.utils.R.dipToPx(getContext(), 36);\n    LinearLayout.LayoutParams lpItem = new LinearLayout.LayoutParams(dp_36, dp_36);\n    final int dp_9 = cn.sharesdk.framework.utils.R.dipToPx(getContext(), 9);\n    lpItem.setMargins(0, 0, dp_9, 0);\n    FrameLayout.LayoutParams lpMask =\n        new FrameLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);\n    lpMask.gravity = Gravity.LEFT | Gravity.TOP;\n    int selection = 0;\n    for (int i = 0; i < size; i++) {\n      FrameLayout fl = new FrameLayout(getContext());\n      fl.setLayoutParams(lpItem);\n      if (i >= size - 1) {\n        fl.setLayoutParams(new LinearLayout.LayoutParams(dp_36, dp_36));\n      }\n      llPlat.addView(fl);\n      fl.setOnClickListener(this);\n\n      ImageView iv = new ImageView(getContext());\n      iv.setScaleType(ScaleType.CENTER_INSIDE);\n      iv.setImageBitmap(getPlatLogo(platformList[i]));\n      iv.setLayoutParams(\n          new FrameLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));\n      fl.addView(iv);\n\n      views[i] = new View(getContext());\n      views[i].setBackgroundColor(0xcfffffff);\n      views[i].setOnClickListener(this);\n      if (name != null && name.equals(platformList[i].getName())) {\n        views[i].setVisibility(View.INVISIBLE);\n        selection = i;\n\n        // 编辑分享内容的统计\n        ShareSDK.logDemoEvent(3, platformList[i]);\n      }\n      views[i].setLayoutParams(lpMask);\n      fl.addView(views[i]);\n    }\n\n    final int postSel = selection;\n    UIHandler.sendEmptyMessageDelayed(\n        0,\n        333,\n        new Callback() {\n          public boolean handleMessage(Message msg) {\n            HorizontalScrollView hsv = (HorizontalScrollView) llPlat.getParent();\n            hsv.scrollTo(postSel * (dp_36 + dp_9), 0);\n            return false;\n          }\n        });\n  }\n"}, {"dataset": "addView", "exampleID": 4880, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 45, "focalAPIEnd": 64, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/onecoders/ViewPageIndicator/tree/master/WaypointsActivity/src/com/loopj/android/http/sample/SampleParentActivity.java", "rawCode": "  protected final void addView(View v) {\n    contents.addView(v);\n  }\n"}, {"dataset": "addView", "exampleID": 4881, "initialization": ["View child = inflate(*,*)"], "initializationStart": [278], "initializationEnd": [330], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.findViewById(int)", "child.findViewById(int)", "child.findViewById(int)"], "configurationStart": [336, 416, 565], "configurationEnd": [370, 454, 598], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 766, "focalAPIEnd": 797, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)"], "useStart": [1966], "useEnd": [1989], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/markmcd/android_packages_apps_Calendar/tree/master/src/com/android/calendar/EventInfoActivity.java", "rawCode": "  private void addAttendeesToLayout(\n      ArrayList<Attendee> attendees, LinearLayout attendeeList, CharSequence sectionTitle) {\n    if (attendees.size() == 0) {\n      return;\n    }\n\n    ContentResolver cr = getContentResolver();\n    // Yes/No/Maybe Title\n    View titleView = mLayoutInflater.inflate(R.layout.contact_item, null);\n    titleView.findViewById(R.id.badge).setVisibility(View.GONE);\n    View divider = titleView.findViewById(R.id.separator);\n    divider.getBackground().setColorFilter(mColor, PorterDuff.Mode.SRC_IN);\n\n    TextView title = (TextView) titleView.findViewById(R.id.name);\n    title.setText(getString(R.string.response_label, sectionTitle, attendees.size()));\n    title.setTextAppearance(this, R.style.TextAppearance_EventInfo_Label);\n    attendeeList.addView(titleView);\n\n    // Attendees\n    int numOfAttendees = attendees.size();\n    StringBuilder selection = new StringBuilder(Email.DATA + \" IN (\");\n    String[] selectionArgs = new String[numOfAttendees];\n\n    for (int i = 0; i < numOfAttendees; ++i) {\n      Attendee attendee = attendees.get(i);\n      selectionArgs[i] = attendee.mEmail;\n\n      View v = mLayoutInflater.inflate(R.layout.contact_item, null);\n      v.setTag(attendee);\n\n      View separator = v.findViewById(R.id.separator);\n      separator.getBackground().setColorFilter(mColor, PorterDuff.Mode.SRC_IN);\n\n      // Text\n      TextView tv = (TextView) v.findViewById(R.id.name);\n      String name = attendee.mName;\n      if (name == null || name.length() == 0) {\n        name = attendee.mEmail;\n      }\n      tv.setText(name);\n\n      ViewHolder vh = new ViewHolder();\n      vh.badge = (QuickContactBadge) v.findViewById(R.id.badge);\n      vh.badge.assignContactFromEmail(attendee.mEmail, true);\n      vh.presence = (ImageView) v.findViewById(R.id.presence);\n      mViewHolders.put(attendee.mEmail, vh);\n\n      if (i == 0) {\n        selection.append('?');\n      } else {\n        selection.append(\", ?\");\n      }\n\n      attendeeList.addView(v);\n    }\n    selection.append(')');\n\n    mPresenceQueryHandler.startQuery(\n        mUpdateCounts,\n        attendees,\n        CONTACT_DATA_WITH_PRESENCE_URI,\n        PRESENCE_PROJECTION,\n        selection.toString(),\n        selectionArgs,\n        null);\n  }\n"}, {"dataset": "addView", "exampleID": 4882, "initialization": ["LinearLayout linearLayout = getView()", "View child = new View(*)"], "initializationStart": [90, 1313], "initializationEnd": [99, 1331], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [1517], "configurationEnd": [1555], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1563, "focalAPIEnd": 1589, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(ToggleButton)"], "useStart": [1597], "useEnd": [1622], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/todoroo/astrid/tree/master/astrid/src/com/todoroo/astrid/ui/ImportanceControlSet.java", "rawCode": "  @Override\n  protected void afterInflate() {\n    LinearLayout container = (LinearLayout) getView().findViewById(R.id.importance_container);\n\n    int min = Task.IMPORTANCE_MOST;\n    int max = Task.IMPORTANCE_LEAST;\n\n    DisplayMetrics metrics = new DisplayMetrics();\n    activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);\n\n    for (int i = max; i >= min; i--) {\n      final ToggleButton button = new ToggleButton(activity);\n      LinearLayout.LayoutParams params;\n\n      int dimension = 38;\n      params =\n          new LinearLayout.LayoutParams(\n              (int) (metrics.density * dimension), (int) (metrics.density * dimension));\n      button.setLayoutParams(params);\n\n      StringBuilder label = new StringBuilder();\n      if (i == max) label.append('\\u25CB');\n      for (int j = Task.IMPORTANCE_LEAST - 1; j >= i; j--) label.append('!');\n\n      button.setTextColor(colors[i]);\n      button.setTextOff(label);\n      button.setTextOn(label);\n      button.setPadding(0, 1, 0, 0);\n\n      button.setOnClickListener(\n          new View.OnClickListener() {\n            public void onClick(View v) {\n              setImportance((Integer) button.getTag());\n            }\n          });\n      button.setTag(i);\n      button.setTextSize(TEXT_SIZE);\n\n      buttons.add(button);\n\n      View padding = new View(activity);\n      LinearLayout.LayoutParams paddingParams =\n          new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n      paddingParams.weight = 1.0f;\n      padding.setLayoutParams(paddingParams);\n      container.addView(padding);\n      container.addView(button);\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4883, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/asafge/NewsBlurPlus/tree/master/NewsBlurPlus/libs/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4884, "initialization": ["LinearLayout linearLayout = LinearLayout.findViewById(int)", "View child = from(*)"], "initializationStart": [74, 352], "initializationEnd": [109, 377], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.findViewById(int)", "child.findViewById(int)", "child.findViewById(int)"], "configurationStart": [458, 554, 628], "configurationEnd": [504, 596, 668], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1628, "focalAPIEnd": 1651, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/coolya/subsonic/tree/master/subsonic-android/src/net/sourceforge/subsonic/androidapp/activity/EqualizerActivity.java", "rawCode": "  private void initEqualizer() {\n    LinearLayout layout = (LinearLayout) findViewById(R.id.equalizer_layout);\n\n    final short minEQLevel = equalizer.getBandLevelRange()[0];\n    final short maxEQLevel = equalizer.getBandLevelRange()[1];\n\n    for (short i = 0; i < equalizer.getNumberOfBands(); i++) {\n      final short band = i;\n\n      View bandBar = LayoutInflater.from(this).inflate(R.layout.equalizer_bar, null);\n      TextView freqTextView = (TextView) bandBar.findViewById(R.id.equalizer_frequency);\n      final TextView levelTextView = (TextView) bandBar.findViewById(R.id.equalizer_level);\n      SeekBar bar = (SeekBar) bandBar.findViewById(R.id.equalizer_bar);\n\n      freqTextView.setText((equalizer.getCenterFreq(band) / 1000) + \" Hz\");\n\n      bars.put(band, bar);\n      bar.setMax(maxEQLevel - minEQLevel);\n      short level = equalizer.getBandLevel(band);\n      bar.setProgress(level - minEQLevel);\n      bar.setEnabled(equalizer.getEnabled());\n      updateLevelText(levelTextView, level);\n\n      bar.setOnSeekBarChangeListener(\n          new SeekBar.OnSeekBarChangeListener() {\n            @Override\n            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n              short level = (short) (progress + minEQLevel);\n              if (fromUser) {\n                equalizer.setBandLevel(band, level);\n              }\n              updateLevelText(levelTextView, level);\n            }\n\n            @Override\n            public void onStartTrackingTouch(SeekBar seekBar) {}\n\n            @Override\n            public void onStopTrackingTouch(SeekBar seekBar) {}\n          });\n      layout.addView(bandBar);\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4885, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 30, "focalAPIEnd": 55, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Browser/tree/master/src/com/android/browser/TabScrollView.java", "rawCode": "  void addTab(View tab) {\n    mContentView.addView(tab);\n    tab.setActivated(false);\n  }\n"}, {"dataset": "addView", "exampleID": 4886, "initialization": ["LinearLayout linearLayout = LinearLayout.findViewById(int)", "View child = getLayoutInflater()"], "initializationStart": [71, 344], "initializationEnd": [95, 363], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.removeAllViews()", "child.findViewById(int)"], "configurationStart": [101, 417], "configurationEnd": [123, 460], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 493, "focalAPIEnd": 519, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["newEditor(*,linearLayout,*)", "linearLayout.addView(View)"], "useStart": [593, 661], "useEnd": [629, 686], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Cyberspice/platform_tools_base/tree/master/apps/NotificationStudio/src/com/android/notificationstudio/NotificationStudioActivity.java", "rawCode": "  private void initEditors() {\n    LinearLayout items = (LinearLayout) findViewById(R.id.items);\n    items.removeAllViews();\n    String currentCategory = null;\n    for (EditableItem item : EditableItem.values()) {\n      String itemCategory = item.getCategory(this);\n      if (!itemCategory.equals(currentCategory)) {\n        View dividerView = getLayoutInflater().inflate(R.layout.divider, null);\n        ((TextView) dividerView.findViewById(R.id.divider_text)).setText(itemCategory);\n        items.addView(dividerView);\n        currentCategory = itemCategory;\n      }\n      View editorView = Editors.newEditor(this, items, item);\n      if (editorView != null) items.addView(editorView);\n    }\n    refreshNotification();\n  }\n"}, {"dataset": "addView", "exampleID": 4887, "initialization": ["View child = LinearLayout.getChildAt(int)", "View child = LabelAdapter.getView(int,View,LinearLayout)"], "initializationStart": [199, 522], "initializationEnd": [228, 572], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.getChildAt(int)", "child.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [199, 582], "configurationEnd": [228, 610], "guardCondition": "child==null", "guardType": "IF {", "guardExpressionStart": 237, "guardExpressionEnd": 254, "guardBlockStart": 237, "guardBlockEnd": 734, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 621, "focalAPIEnd": 650, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["LabelAdapter.getView(int,View,linearLayout)", "linearLayout.getChildCount()", "linearLayout.removeViewAt(int)"], "useStart": [675, 795, 886], "useEnd": [725, 826, 917], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ZPI/ZPI-Android/tree/master/ChartViewLib/src/com/fima/chartview/ChartView.java", "rawCode": "  private void drawTopLabels(final Canvas canvas) {\n    // Add views from adapter\n    final int labelCount = mTopLabelAdapter.getCount();\n    for (int i = 0; i < labelCount; i++) {\n      View view = mTopLabelLayout.getChildAt(i);\n\n      if (view == null) {\n        LinearLayout.LayoutParams params =\n            new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);\n        if (i == 0 || i == labelCount - 1) {\n          params.weight = 0.5f;\n        } else {\n          params.weight = 1;\n        }\n\n        view = mTopLabelAdapter.getView(i, view, mTopLabelLayout);\n        view.setLayoutParams(params);\n\n        mTopLabelLayout.addView(view);\n      } else {\n        mTopLabelAdapter.getView(i, view, mTopLabelLayout);\n      }\n    }\n\n    // Remove extra views\n    final int childCount = mTopLabelLayout.getChildCount();\n    for (int i = labelCount; i < childCount; i++) {\n      mTopLabelLayout.removeViewAt(i);\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4888, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 967, "focalAPIEnd": 1012, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iBot/WP_SHC/tree/master/old/wspace/SmartHomeController/src/de/ba/ui/SmartHomeControllerActivity.java", "rawCode": "  /** */\n  @Override\n  public void setNewPointer(Node<String, NodeProperties> pointer) {\n    // wenn root Knoten gewählt ist und keine Bedienelemente in diesem\n    // vorhanden sind, lösche das Bedienfeld\n    if (pointer.isRoot()) {\n      if (pointer.getData() == null) {\n        controlarea.removeAllViews();\n      }\n    }\n    // Wenn Knoten auf den Pointer zeigt, Bedienelemente enthält\n    // wird der Pfad in der Anzeige neu gesetzt, pointer aktualisiert, sowie\n    // neue\n    // Bedienelemente gemalt.\n    // Falls der Knoten keine Daten enthällt, soll die alte Anzeige bleiben\n    if (pointer.getData() != null) {\n      if (!pointer.getData().getElementGroupList().isEmpty()) {\n        controlareatext.setText(liste.getFullPath(pointer));\n        controlarea.removeAllViews();\n        this.pointer = pointer;\n        this.selectedTab.setPointer(liste.getFullPath(pointer));\n        for (ElementGroup item : pointer.getData().getElementGroupList()) {\n          this.controlarea.addView((LinearLayout) item);\n        }\n      }\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4889, "initialization": ["View child = new View(*)"], "initializationStart": [97], "initializationEnd": [111], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.setBackgroundDrawable(Drawable)", "child.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [179, 420], "configurationEnd": [208, 535], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 541, "focalAPIEnd": 561, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/tests/DpiTest/src/com/google/android/test/dpi/DpiTestActivity.java", "rawCode": "  private void addNinePatchResourceDrawable(LinearLayout layout, int resource) {\n    View view = new View(this);\n\n    final Drawable d = getResources().getDrawable(resource);\n    view.setBackgroundDrawable(d);\n\n    Log.i(\n        \"foo\",\n        \"9-patch #\"\n            + Integer.toHexString(resource)\n            + \" w=\"\n            + d.getIntrinsicWidth()\n            + \" h=\"\n            + d.getIntrinsicHeight());\n    view.setLayoutParams(\n        new LinearLayout.LayoutParams(d.getIntrinsicWidth() * 2, d.getIntrinsicHeight() * 2));\n    layout.addView(view);\n  }\n"}, {"dataset": "addView", "exampleID": 4890, "initialization": ["LinearLayout linearLayout = new LinearLayout(*)"], "initializationStart": [436], "initializationEnd": [458], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(Button)"], "configurationStart": [464, 514], "configurationEnd": [508, 533], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 539, "focalAPIEnd": 556, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ScrollView.addView(linearLayout)"], "useStart": [610], "useEnd": [633], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/strickyak/TerseTalk-Alpha/tree/master/terse-a1/src/terse/a1/TerseActivity.java", "rawCode": "  void SetContentViewWithHomeButtonAndScroll(View v) {\n    Button btn = new Button(this);\n    btn.setText(\"[HOME]\");\n    // btn.setTextSize(15);\n    // btn.setHeight(25);\n    // btn.setMaxHeight(25);\n    btn.setOnClickListener(\n        new OnClickListener() {\n          public void onClick(View v) {\n            // Perform action on clicks\n            startTerseActivity(\"/Top\", \"\");\n          };\n        });\n\n    LinearLayout linear = new LinearLayout(this);\n    linear.setOrientation(LinearLayout.VERTICAL);\n    linear.addView(btn);\n    linear.addView(v);\n\n    ScrollView scrollv = new ScrollView(this);\n    scrollv.addView(linear);\n    setContentView(scrollv);\n  }\n"}, {"dataset": "addView", "exampleID": 4891, "initialization": ["View child = getActivity()"], "initializationStart": [80], "initializationEnd": [93], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 565, "focalAPIEnd": 597, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/buzdin/java-day-app/tree/master/src/main/java/lv/jug/javaday/androidapp/presentation/speaker/SpeakerDetailsFragment.java", "rawCode": "  private void renderPresentation(final Event event) {\n    View panel =\n        getActivity().getLayoutInflater().inflate(R.layout.presentation_title_bubble, null);\n    String presentationTitle = event.getTitle();\n\n    TextView speakerPresentation = Views.findById(panel, R.id.speaker_presentation);\n    speakerPresentation.setText(presentationTitle);\n    speakerPresentation.setOnClickListener(\n        new View.OnClickListener() {\n          @Override\n          public void onClick(View v) {\n            showPresentationDetails(event);\n          }\n        });\n    presentationPanel.addView(panel);\n  }\n"}, {"dataset": "addView", "exampleID": 4892, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Xomo/ActionBarSherlock-v4/tree/master/library/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4893, "initialization": ["View child = new View(*)"], "initializationStart": [88], "initializationEnd": [102], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.setBackgroundDrawable(Drawable)", "child.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [170, 206], "configurationEnd": [199, 313], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 319, "focalAPIEnd": 339, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/tests/DpiTest/src/com/google/android/test/dpi/DpiTestActivity.java", "rawCode": "  private void addResourceDrawable(LinearLayout layout, int resource) {\n    View view = new View(this);\n\n    final Drawable d = getResources().getDrawable(resource);\n    view.setBackgroundDrawable(d);\n\n    view.setLayoutParams(\n        new LinearLayout.LayoutParams(d.getIntrinsicWidth(), d.getIntrinsicHeight()));\n    layout.addView(view);\n  }\n"}, {"dataset": "addView", "exampleID": 4894, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SuelenGC/Calculadora-de-Tributos-PJ/tree/master/ActionBarSherlock-Library/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4895, "initialization": ["View child = getLayoutInflater()"], "initializationStart": [225], "initializationEnd": [244], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["child.findViewById(int)", "child.findViewById(int)"], "configurationStart": [402, 535], "configurationEnd": [478, 610], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1038, "focalAPIEnd": 1081, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)"], "useStart": [1118], "useEnd": [1161], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/asorici/envsmth/tree/master/EnvSocialApp/src/com/envsocial/android/features/program/PresentationDetailsActivity.java", "rawCode": "  private void setupSpeakerViews() {\n\n    int len = mSpeakerInfoList.size();\n    for (int i = 0; i < len; i++) {\n      PresentationSpeakerInfo speakerInfo = mSpeakerInfoList.get(i);\n\n      View speakerInfoRowView =\n          getLayoutInflater()\n              .inflate(R.layout.program_presentation_details_speaker_row, mSpeakersLayout, false);\n\n      ImageView speakerImageView =\n          (ImageView) speakerInfoRowView.findViewById(R.id.presentation_details_speaker_row_image);\n      TextView speakerImageName =\n          (TextView) speakerInfoRowView.findViewById(R.id.presentation_details_speaker_row_name);\n\n      if (mImageFetcher != null && speakerInfo.getImageUrl() != null) {\n        mImageFetcher.loadImage(speakerInfo.getImageUrl(), speakerImageView);\n      }\n\n      speakerImageName.setText(speakerInfo.getFirstName() + \" \" + speakerInfo.getLastName());\n      speakerImageName.setOnClickListener(\n          new PresentationSpeakerClickListener(speakerInfo.getSpeakerId()));\n\n      // add speaker row view speaker layout\n      mSpeakersLayout.addView(speakerInfoRowView);\n\n      if (i != len - 1) {\n        mSpeakersLayout.addView(getSeparatorView());\n      }\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4896, "initialization": ["LinearLayout linearLayout = new LinearLayout(*)", "View child = getLayoutInflater()"], "initializationStart": [429, 682], "initializationEnd": [451, 701], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.setLayoutParams(LinearLayout.LayoutParams)"], "configurationStart": [457, 508], "configurationEnd": [502, 655], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 794, "focalAPIEnd": 815, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["View.addView(linearLayout)"], "useStart": [822], "useEnd": [863], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/tests/ImfTest/src/com/android/imftest/samples/BigEditTextActivityScrollablePanScan.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);\n\n    mRootView = new ScrollView(this);\n    ((ScrollView) mRootView).setFillViewport(true);\n    mRootView.setLayoutParams(\n        new ViewGroup.LayoutParams(\n            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\n\n    mLayout = new LinearLayout(this);\n    mLayout.setOrientation(LinearLayout.VERTICAL);\n    mLayout.setLayoutParams(\n        new ViewGroup.LayoutParams(\n            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\n\n    View view =\n        getLayoutInflater()\n            .inflate(R.layout.full_screen_edit_text, ((ScrollView) mRootView), false);\n\n    mLayout.addView(view);\n\n    ((ScrollView) mRootView).addView(mLayout);\n    mDefaultFocusedView = view.findViewById(R.id.data);\n\n    setContentView(mRootView);\n  }\n"}, {"dataset": "addView", "exampleID": 4897, "initialization": ["LinearLayout linearLayout = new LinearLayout(Context)"], "initializationStart": [1536], "initializationEnd": [1561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.setOrientation(int)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "configurationStart": [1571, 1847], "configurationEnd": [1622, 1894], "guardCondition": "child!=null", "guardType": "IF {", "guardExpressionStart": 1321, "guardExpressionEnd": 1342, "guardBlockStart": 1321, "guardBlockEnd": 2727, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1908, "focalAPIEnd": 1939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["linearLayout.addView(View)", "linearLayout.addView(ViewGroup,LinearLayout.LayoutParams)"], "useStart": [2011, 2056], "useEnd": [2042, 2103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jordan-thoms/2Degrees-Toolbox/tree/master/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/IcsListPopupWindow.java", "rawCode": "  private int buildDropDown() {\n    ViewGroup dropDownView;\n    int otherHeights = 0;\n\n    if (mDropDownList == null) {\n      Context context = mContext;\n\n      mDropDownList = new DropDownListView(context, !mModal);\n      if (mDropDownListHighlight != null) {\n        mDropDownList.setSelector(mDropDownListHighlight);\n      }\n      mDropDownList.setAdapter(mAdapter);\n      mDropDownList.setOnItemClickListener(mItemClickListener);\n      mDropDownList.setFocusable(true);\n      mDropDownList.setFocusableInTouchMode(true);\n      mDropDownList.setOnItemSelectedListener(\n          new AdapterView.OnItemSelectedListener() {\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n              if (position != -1) {\n                DropDownListView dropDownList = mDropDownList;\n\n                if (dropDownList != null) {\n                  dropDownList.mListSelectionHidden = false;\n                }\n              }\n            }\n\n            public void onNothingSelected(AdapterView<?> parent) {}\n          });\n      mDropDownList.setOnScrollListener(mScrollListener);\n\n      if (mItemSelectedListener != null) {\n        mDropDownList.setOnItemSelectedListener(mItemSelectedListener);\n      }\n\n      dropDownView = mDropDownList;\n\n      View hintView = mPromptView;\n      if (hintView != null) {\n        // if an hint has been specified, we accomodate more space for it and\n        // add a text view in the drop down menu, at the bottom of the list\n        LinearLayout hintContainer = new LinearLayout(context);\n        hintContainer.setOrientation(LinearLayout.VERTICAL);\n\n        LinearLayout.LayoutParams hintParams =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n\n        switch (mPromptPosition) {\n          case POSITION_PROMPT_BELOW:\n            hintContainer.addView(dropDownView, hintParams);\n            hintContainer.addView(hintView);\n            break;\n\n          case POSITION_PROMPT_ABOVE:\n            hintContainer.addView(hintView);\n            hintContainer.addView(dropDownView, hintParams);\n            break;\n\n          default:\n            break;\n        }\n\n        // measure the hint's height to find how much more vertical space\n        // we need to add to the drop down's height\n        int widthSpec = MeasureSpec.makeMeasureSpec(mDropDownWidth, MeasureSpec.AT_MOST);\n        int heightSpec = MeasureSpec.UNSPECIFIED;\n        hintView.measure(widthSpec, heightSpec);\n\n        hintParams = (LinearLayout.LayoutParams) hintView.getLayoutParams();\n        otherHeights =\n            hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n\n        dropDownView = hintContainer;\n      }\n\n      mPopup.setContentView(dropDownView);\n    } else {\n      dropDownView = (ViewGroup) mPopup.getContentView();\n      final View view = mPromptView;\n      if (view != null) {\n        LinearLayout.LayoutParams hintParams = (LinearLayout.LayoutParams) view.getLayoutParams();\n        otherHeights = view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;\n      }\n    }\n\n    // getMaxAvailableHeight() subtracts the padding, so we put it back\n    // to get the available height for the whole window\n    int padding = 0;\n    Drawable background = mPopup.getBackground();\n    if (background != null) {\n      background.getPadding(mTempRect);\n      padding = mTempRect.top + mTempRect.bottom;\n\n      // If we don't have an explicit vertical offset, determine one from the window\n      // background so that content will line up.\n      if (!mDropDownVerticalOffsetSet) {\n        mDropDownVerticalOffset = -mTempRect.top;\n      }\n    }\n\n    // Max height available on the screen for a popup.\n    boolean ignoreBottomDecorations =\n        mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;\n    final int maxHeight = /*mPopup.*/\n        getMaxAvailableHeight(\n            mDropDownAnchorView, mDropDownVerticalOffset, ignoreBottomDecorations);\n\n    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {\n      return maxHeight + padding;\n    }\n\n    final int listContent = /*mDropDownList.*/\n        measureHeightOfChildren(\n            MeasureSpec.UNSPECIFIED, 0, -1 /*ListView.NO_POSITION*/, maxHeight - otherHeights, -1);\n    // add padding only if the list has items in it, that way we don't show\n    // the popup if it is not needed\n    if (listContent > 0) otherHeights += padding;\n\n    return listContent + otherHeights;\n  }\n"}, {"dataset": "addView", "exampleID": 4898, "initialization": ["View child = getItemViewFriend(*)"], "initializationStart": [240], "initializationEnd": [273], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.removeAllViews()"], "configurationStart": [43], "configurationEnd": [79], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 283, "focalAPIEnd": 313, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lbaye/repo/tree/master/android/src/com/socmaps/ui/RecommendationActivity.java", "rawCode": "  private void generateFriendList() {\n\n    friendListContainer.removeAllViews();\n    List<People> friends = StaticValues.myInfo.getFriendList();\n\n    if (friends != null) {\n\n      for (int i = 0; i < friends.size(); i++) {\n        View v = getItemViewFriend(friends.get(i));\n        friendListContainer.addView(v);\n      }\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4899, "initialization": ["LinearLayout linearLayout = LinearLayout.findViewById(int)"], "initializationStart": [599], "initializationEnd": [646], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["linearLayout.addView(TextView)", "child.setText(String)", "child.setOnClickListener(OnClickListener)"], "configurationStart": [656, 855, 893], "configurationEnd": [679, 881, 924], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 936, "focalAPIEnd": 964, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cschu004/CS180_Project/tree/master/src/com/example/ucrinstagram/Following.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_following);\n    user1 = new User(getIntent().getExtras().getString(\"username\"));\n    following = user1.getFriends();\n    if (following.length >= 1) {\n      btn = new Button[following.length];\n      for (int i = 0; i < following.length; i++) {\n        System.out.println(following[i].username);\n        TextView f = new TextView(this);\n        f.setText(following[i].username);\n        f.setTextSize(18);\n        LinearLayout linearLayout = (LinearLayout) findViewById(R.id.linearLayoutWithLotofContent);\n        linearLayout.addView(f);\n        // System.out.println(\"Logineduser\");\n        if (Logineduser.equals(getIntent().getExtras().getString(\"username\"))) {\n          btn[i] = new Button(this);\n          btn[i].setText(\"Unfollow\");\n          btn[i].setOnClickListener(this);\n          linearLayout.addView(btn[i]);\n        }\n      }\n    }\n  }\n"}, {"dataset": "addView", "exampleID": 4900, "initialization": ["LinearLayout linearLayout = LinearLayout.findViewById(int)", "View child = inflate(*,*)"], "initializationStart": [932, 1728], "initializationEnd": [987, 1768], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = linearLayout.addView(child)", "focalAPIStart": 1776, "focalAPIEnd": 1805, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/abid-mujtaba/fetchheaders-android/tree/master/src/com/abid_mujtaba/fetchheaders/fragments/AccountFragment.java", "rawCode": "  @Override\n  public View onCreateView(\n      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    uRootView =\n        (LinearLayout)\n            inflater.inflate(\n                R.layout.account_fragment,\n                container,\n                false); // The false specifies that this view is NOT to be attached to root since we\n                        // will attach it explicitly\n\n    setRetainInstance(true); // The Fragment will be retained across configuration changes.\n\n    mToggleMenu =\n        (ToggleMenu)\n            getActivity(); // We get the parent activity cast as the ToggleMenu interface so we can\n                           // toggle the menu as required\n\n    mHandler = new Handler(); // Create a handler to give access to the UI Thread in this fragment\n\n    uAccountName = (TextView) uRootView.findViewById(R.id.tvAccountName);\n    mEmailList =\n        (LinearLayout)\n            uRootView.findViewById(\n                R.id.emailList); // The root layout of the fragment. We shall add views to this.\n\n    uAccountName.setText(mAccount.name());\n\n    if (mErrorMessage\n        != null) // An error occurred the last time emails were fetched so we simply display the\n                 // error message and move on\n    {\n      setErrorView(mErrorMessage);\n    } else if (fEmailsFetched) // We check if emails have already been fetched.\n    {\n      if (mEmails.size() > 0) {\n        populateEmailViews();\n      } else // Emails were fetched but none were found so we empty out the view\n      {\n        emptyRootView();\n      }\n    } else {\n      LayoutInflater li =\n          (LayoutInflater) this.getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n      uProgress = li.inflate(R.layout.progress_view, null);\n      mEmailList.addView(uProgress);\n\n      ThreadPool.executeTask(\n          fetchEmails); // Execute this runnable on a background thread, part of a pool\n    }\n\n    return uRootView;\n  }\n"}]