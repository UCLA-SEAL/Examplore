[{"dataset": "execute", "exampleID": 2301, "initialization": ["HttpUriRequest request = new HttpPost(URI)", "HttpUriRequest request = new HttpPut(URI)", "HttpUriRequest request = new HttpDelete(URI)", "HttpUriRequest request = new HttpGet(URI)"], "initializationStart": [507, 707, 908, 989], "initializationEnd": [524, 723, 927, 1005], "hasTryCatch": 1, "exceptionType": "AbstractMymedException", "exceptionHandlingCall": ["HttpCallHandler.callInterrupted(int)"], "tryExpressionStart": 132, "tryExpressionEnd": 136, "tryBlockStart": 132, "tryBlockEnd": 3525, "catchExpressionStart": 2726, "catchExpressionEnd": 2759, "catchBlockStart": 2726, "catchBlockEnd": 2944, "exceptionHandlingCallStart": [2832], "exceptionHandlingCallEnd": [2859], "configuration": ["request.setEntity(*)", "request.setEntity(*)"], "configurationStart": [573, 772], "configurationEnd": [644, 842], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1108, "focalAPIEnd": 1135, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()", "response.getStatusLine()"], "useStart": [1225, 1643], "useEnd": [1245, 1667], "hasFinally": 1, "cleanUpCall": ["currentTimeMillis()", "d(String,String)"], "finallyExpressionStart": 3186, "finallyExpressionEnd": 3194, "finallyBlockStart": 3186, "finallyBlockEnd": 3525, "cleanUpCallStart": [3217, 3272], "cleanUpCallEnd": [3243, 3304], "url": "https://github.com/luigiliquori/myMed/tree/master/frontend/binary/android/myjam/src/com/mymed/android/myjam/controller/HttpCall.java", "rawCode": "  /** Run the http method. */\n  public void run() {\n    long startCall = System.currentTimeMillis();\n    String message = null;\n    try {\n      if (handler != null) handler.callStart(id);\n      Log.d(TAG, \"Start call \" + id + \" :\" + String.valueOf(startCall));\n      URI uri = new URI(this.uri);\n\n      if (mStopped) return;\n\n      synchronized (lock) {\n        switch (method) {\n          case GET:\n            this.request = new HttpGet(uri);\n            break;\n          case POST:\n            request = new HttpPost(uri);\n            if (jSonObj != null)\n              ((HttpPost) request).setEntity(new StringEntity(jSonObj, CHARSET_NAME));\n            break;\n          case PUT:\n            request = new HttpPut(uri);\n            if (jSonObj != null)\n              ((HttpPut) request).setEntity(new StringEntity(jSonObj, CHARSET_NAME));\n            break;\n          case DELETE:\n            request = new HttpDelete(uri);\n            break;\n          default:\n            request = new HttpGet(uri);\n        }\n      }\n      // Log.i(TAG, \" REQUEST : \"+request.getURI());\n      HttpResponse response = httpClient.execute(request);\n\n      synchronized (lock) {\n        request = null;\n      }\n\n      HttpEntity entity = response.getEntity();\n      // Log.i(TAG,\" STATUS \"+String.valueOf(response.getStatusLine().getStatusCode()));\n      String responseContent =\n          convertStreamToString(entity.getContent(), entity.getContentLength());\n      if (responseContent == null) throw new InternalClientException(\"Response empty.\");\n      entity.consumeContent();\n      // Log.i(TAG,\" RESPONSE : \"+responseContent);\n      int statusCode = response.getStatusLine().getStatusCode();\n      switch (statusCode) {\n        case HttpStatus.SC_INTERNAL_SERVER_ERROR:\n        case HttpStatus.SC_NOT_FOUND:\n        case HttpStatus.SC_CONFLICT: // TODO Check if this error code is really used.\n        case HttpStatus.SC_FORBIDDEN:\n          JSONObject object = (JSONObject) new JSONTokener(responseContent).nextValue();\n          if (object.has(\"description\")) {\n            // JSONObject errObj = object.getJSONObject(\"error\");\n            message = object.getString(\"description\");\n          } else {\n            message = \"\";\n          }\n          if (statusCode == HttpStatus.SC_INTERNAL_SERVER_ERROR) {\n            message = \"Internal server error. \" + message;\n            throw new InternalBackEndException(message);\n          } else {\n            throw new IOBackEndException(message, 404);\n          }\n        case HttpStatus.SC_OK:\n          if (handler != null) handler.callSuccess(id, responseContent);\n          break;\n        default:\n          throw new InternalClientException(\"Unknown status code.\");\n      }\n    } catch (AbstractMymedException e) {\n      if (mStopped) {\n        message = CALL_INTERRUPTED + id;\n        handler.callInterrupted(id);\n      } else {\n        handler.callError(id, e.getStatus(), message);\n      }\n    } catch (Exception e) {\n      if (mStopped) {\n        message = CALL_INTERRUPTED + id;\n        handler.callInterrupted(id);\n      } else {\n        message = CALL_ERROR + e.toString();\n        handler.callError(id, 400, message);\n      }\n    } finally {\n      long endCall = System.currentTimeMillis();\n      if (message != null) Log.d(TAG, \"Result: \" + message);\n      Log.d(\n          TAG,\n          \"End call \"\n              + id\n              + \" :\"\n              + String.valueOf(endCall)\n              + \" Duration: \"\n              + String.valueOf(endCall - startCall));\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2302, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 76, "tryExpressionEnd": 80, "tryBlockStart": 76, "tryBlockEnd": 196, "catchExpressionStart": 130, "catchExpressionEnd": 152, "catchBlockStart": 130, "catchBlockEnd": 196, "exceptionHandlingCallStart": [166], "exceptionHandlingCallEnd": [189], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 95, "focalAPIEnd": 122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/splunk/splunk-shuttl/tree/master/src/java/com/splunk/shuttl/archiver/http/JsonRestEndpointCaller.java", "rawCode": "  private HttpResponse getResponseFromRequest(HttpUriRequest request) {\n    try {\n      return httpClient.execute(request);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2303, "initialization": ["HttpRequest request = doWithMethod(HttpPut,ICalendarAccount)", "HttpContext context = constructHttpContext(ICalendarAccount)"], "initializationStart": [492, 713], "initializationEnd": [547, 745], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(target,request,context)", "focalAPIStart": 818, "focalAPIEnd": 871, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()", "response.getStatusLine()"], "useStart": [888, 1067], "useEnd": [908, 1091], "hasFinally": 1, "cleanUpCall": ["consume(HttpEntity)"], "finallyExpressionStart": 1361, "finallyExpressionEnd": 1369, "finallyBlockStart": 1361, "finallyBlockEnd": 1411, "cleanUpCallStart": [1377], "cleanUpCallEnd": [1404], "url": "https://github.com/nblair/sometime/tree/master/sometime-spi-caldav/src/main/java/org/jasig/schedassist/impl/caldav/CaldavCalendarDataDaoImpl.java", "rawCode": "  /**\n   * Store a new calendar using CalDAV PUT.\n   *\n   * @param eventOwner\n   * @param event\n   * @return\n   * @throws HttpException\n   * @throws IOException\n   */\n  protected int putNewCalendar(ICalendarAccount eventOwner, Calendar calendar, String eventUid)\n      throws HttpException, IOException {\n    String uri = generateEventUri(eventOwner, eventUid);\n\n    HttpPut method = constructPutMethod(uri, calendar);\n    method.addHeader(IF_NONE_MATCH_HEADER);\n\n    HttpRequest toExecute = this.methodInterceptor.doWithMethod(method, eventOwner);\n    if (log.isDebugEnabled()) {\n      log.debug(\"putNewCalendar executing \" + methodToString(method) + \" for \" + eventOwner);\n    }\n    final HttpContext context = constructHttpContext(eventOwner);\n\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = this.httpClient.execute(httpHost, toExecute, context);\n      entity = response.getEntity();\n      if (log.isDebugEnabled()) {\n        if (entity == null) {\n          log.debug(\n              \"putNewCalendar response entity was null, statusline: \" + response.getStatusLine());\n        } else {\n          InputStream content = entity.getContent();\n          log.debug(\"putNewCalendar response body: \" + IOUtils.toString(content));\n        }\n      }\n      int statusCode = response.getStatusLine().getStatusCode();\n      return statusCode;\n    } finally {\n      EntityUtils.consume(entity);\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2304, "initialization": ["HttpUriRequest request = createHttpRequest(Request<?>,Map<String, String>)"], "initializationStart": [186], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getParams()"], "configurationStart": [395], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 738, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rock3r/volley/tree/master/src/com/android/volley/toolbox/HttpClientStack.java", "rawCode": "  @Override\n  public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)\n      throws IOException, AuthFailureError {\n    HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);\n    addHeaders(httpRequest, additionalHeaders);\n    addHeaders(httpRequest, request.getHeaders());\n    onPrepareRequest(httpRequest);\n    HttpParams httpParams = httpRequest.getParams();\n    int timeoutMs = request.getTimeoutMs();\n    // TODO: Reevaluate this connection timeout based on more wide-scale\n    // data collection and possibly different for wifi vs. 3G.\n    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);\n    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);\n    return mClient.execute(httpRequest);\n  }\n"}, {"dataset": "execute", "exampleID": 2305, "initialization": ["HttpRequest request = HttpMethodInterceptor.doWithMethod(HttpDelete,ICalendarAccount)", "HttpContext context = constructHttpContext(ICalendarAccount)"], "initializationStart": [472, 561], "initializationEnd": [527, 598], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["Log.error(String)", "new CaldavDataAccessException(*)"], "tryExpressionStart": 635, "tryExpressionEnd": 639, "tryBlockStart": 635, "tryBlockEnd": 1541, "catchExpressionStart": 1257, "catchExpressionEnd": 1279, "catchBlockStart": 1257, "catchBlockEnd": 1495, "exceptionHandlingCallStart": [1287, 1456], "exceptionHandlingCallEnd": [1442, 1488], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(target,request,context)", "focalAPIStart": 671, "focalAPIEnd": 724, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()", "response.getStatusLine()"], "useStart": [741, 786], "useEnd": [761, 810], "hasFinally": 1, "cleanUpCall": ["quietlyConsume(HttpEntity)"], "finallyExpressionStart": 1496, "finallyExpressionEnd": 1504, "finallyBlockStart": 1496, "finallyBlockEnd": 1541, "cleanUpCallStart": [1512], "cleanUpCallEnd": [1534], "url": "https://github.com/Jasig/sched-assist/tree/master/sched-assist-spi-caldav/src/main/java/org/jasig/schedassist/impl/caldav/CaldavCalendarDataDaoImpl.java", "rawCode": "  /**\n   * @param calendarWithURI\n   * @param calendarAccount\n   * @return\n   */\n  protected int deleteCalendar(CalendarWithURI calendarWithURI, ICalendarAccount calendarAccount) {\n    URI uri = this.caldavDialect.resolveCalendarURI(calendarWithURI);\n    HttpDelete method = new HttpDelete(uri.toString());\n    if (log.isDebugEnabled()) {\n      log.debug(\"deleteCalendar executing \" + methodToString(method) + \" for \" + calendarAccount);\n    }\n    HttpRequest toExecute = methodInterceptor.doWithMethod(method, calendarAccount);\n    final HttpContext context = constructHttpContext(calendarAccount);\n\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = this.httpClient.execute(httpHost, toExecute, context);\n      entity = response.getEntity();\n      int statusCode = response.getStatusLine().getStatusCode();\n      log.debug(\"deleteCalendar status code: \" + statusCode);\n      if (statusCode == HttpStatus.SC_NO_CONTENT) {\n        return statusCode;\n      } else {\n        throw new CaldavDataAccessException(\n            \"deleteCalendar for \"\n                + calendarAccount\n                + \", \"\n                + calendarWithURI\n                + \" failed with unexpected status code: \"\n                + statusCode);\n      }\n    } catch (IOException e) {\n      log.error(\n          \"an IOException occurred in deleteCalendar for \"\n              + calendarAccount\n              + \", \"\n              + calendarWithURI);\n      throw new CaldavDataAccessException(e);\n    } finally {\n      quietlyConsume(entity);\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2306, "initialization": ["HttpClient httpClient = getHttpClient()", "HttpUriRequest request = new HttpPost(String)"], "initializationStart": [612, 669], "initializationEnd": [637, 686], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new ErreurReseau(*)"], "tryExpressionStart": 714, "tryExpressionEnd": 718, "tryBlockStart": 714, "tryBlockEnd": 1440, "catchExpressionStart": 1124, "catchExpressionEnd": 1160, "catchBlockStart": 1124, "catchBlockEnd": 1214, "exceptionHandlingCallStart": [1174], "exceptionHandlingCallEnd": [1207], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 749, "focalAPIEnd": 777, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [852], "useEnd": [871], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ridem/fr.lemet/tree/master/LeMet/src/fr/lemet/application/keolis/Keolis.java", "rawCode": "  /**\n   * @param <ObjetKeolis> type d'objet Keolis.\n   * @param url url.\n   * @param handler handler.\n   * @return liste d'objets Keolis.\n   * @throws fr.lemet.transportscommun.util.ErreurReseau en cas d'erreur réseau.\n   * @throws KeolisException en cas d'erreur lors de l'appel aux API Keolis.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private <ObjetKeolis> List<ObjetKeolis> appelKeolis(\n      String url, KeolisHandler<ObjetKeolis> handler) throws ErreurReseau {\n    LOG_YBO.debug(\"Appel d'une API Keolis sur l'url '\" + url + '\\'');\n    long startTime = System.nanoTime() / 1000;\n    HttpClient httpClient = HttpUtils.getHttpClient();\n    HttpUriRequest httpPost = new HttpPost(url);\n    Answer<?> answer;\n    try {\n      HttpResponse reponse = httpClient.execute(httpPost);\n      ByteArrayOutputStream ostream = new ByteArrayOutputStream();\n      reponse.getEntity().writeTo(ostream);\n      SAXParserFactory factory = SAXParserFactory.newInstance();\n      SAXParser parser = factory.newSAXParser();\n      parser.parse(new ByteArrayInputStream(ostream.toByteArray()), handler);\n      answer = handler.getAnswer();\n    } catch (IOException socketException) {\n      throw new ErreurReseau(socketException);\n    } catch (SAXException saxException) {\n      throw new ErreurReseau(saxException);\n    } catch (ParserConfigurationException exception) {\n      throw new KeolisException(\"Erreur lors de l'appel à l'API keolis\", exception);\n    }\n    if (answer == null || answer.getStatus() == null || !\"0\".equals(answer.getStatus().getCode())) {\n      throw new ErreurReseau();\n    }\n    long elapsedTime = System.nanoTime() / 1000 - startTime;\n    LOG_YBO.debug(\"Réponse de Keolis en \" + elapsedTime + \"µs\");\n    return (List<ObjetKeolis>) answer.getData();\n  }\n"}, {"dataset": "execute", "exampleID": 2307, "initialization": ["HttpUriRequest request = makeHttpDelete(*)"], "initializationStart": [145], "initializationEnd": [203], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.setHeader(*,String)"], "configurationStart": [211], "configurationEnd": [252], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 289, "focalAPIEnd": 311, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new SwiftResponse(response)"], "useStart": [271], "useEnd": [312], "hasFinally": 1, "cleanUpCall": ["SwiftResponse.consumeResposeBody()"], "finallyExpressionStart": 983, "finallyExpressionEnd": 991, "finallyBlockStart": 983, "finallyBlockEnd": 1057, "cleanUpCallStart": [1021], "cleanUpCallEnd": [1050], "url": "https://github.com/intel-cloud/cosbench/tree/master/dev/cosbench-swift/src/com/intel/cosbench/client/swift/SwiftClient.java", "rawCode": "  public void deleteContainer(String container) throws IOException, SwiftException {\n    SwiftResponse response = null;\n    try {\n      method = HttpClientUtil.makeHttpDelete(getContainerPath(container));\n      method.setHeader(X_AUTH_TOKEN, authToken);\n      response = new SwiftResponse(client.execute(method));\n      if (response.getStatusCode() == SC_NO_CONTENT) return;\n      if (response.getStatusCode() == SC_NOT_FOUND)\n        throw new SwiftFileNotFoundException(\n            \"container not found: \" + container,\n            response.getResponseHeaders(),\n            response.getStatusLine());\n      if (response.getStatusCode() == SC_CONFLICT)\n        throw new SwiftConflictException(\n            \"cannot delete an non-empty container \" + container,\n            response.getResponseHeaders(),\n            response.getStatusLine());\n      throw new SwiftException(\n          \"unexpected return from server\", response.getResponseHeaders(), response.getStatusLine());\n    } finally {\n      if (response != null) response.consumeResposeBody();\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2308, "initialization": ["HttpUriRequest request = createHttpRequest(Request<?>,Map<String, String>)"], "initializationStart": [186], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getParams()"], "configurationStart": [395], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 738, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ark/volley/tree/master/src/com/android/volley/toolbox/HttpClientStack.java", "rawCode": "  @Override\n  public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)\n      throws IOException, AuthFailureError {\n    HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);\n    addHeaders(httpRequest, additionalHeaders);\n    addHeaders(httpRequest, request.getHeaders());\n    onPrepareRequest(httpRequest);\n    HttpParams httpParams = httpRequest.getParams();\n    int timeoutMs = request.getTimeoutMs();\n    // TODO: Reevaluate this connection timeout based on more wide-scale\n    // data collection and possibly different for wifi vs. 3G.\n    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);\n    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);\n    return mClient.execute(httpRequest);\n  }\n"}, {"dataset": "execute", "exampleID": 2309, "initialization": ["HttpUriRequest request = createHttpRequest(Request<?>,Map<String, String>)"], "initializationStart": [186], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getParams()"], "configurationStart": [395], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 738, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cipele46/cipele46-android/tree/master/libs/volley/src/com/android/volley/toolbox/HttpClientStack.java", "rawCode": "  @Override\n  public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)\n      throws IOException, AuthFailureError {\n    HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);\n    addHeaders(httpRequest, additionalHeaders);\n    addHeaders(httpRequest, request.getHeaders());\n    onPrepareRequest(httpRequest);\n    HttpParams httpParams = httpRequest.getParams();\n    int timeoutMs = request.getTimeoutMs();\n    // TODO: Reevaluate this connection timeout based on more wide-scale\n    // data collection and possibly different for wifi vs. 3G.\n    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);\n    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);\n    return mClient.execute(httpRequest);\n  }\n"}, {"dataset": "execute", "exampleID": 2310, "initialization": ["HttpUriRequest request = createGETRequest(String,HashMap<String, String>)"], "initializationStart": [243], "initializationEnd": [326], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 357, "focalAPIEnd": 384, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [418], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biafra23/AmDroid/tree/master/AmenLib/src/main/java/com.jaeckel/amenoid/api/AmenServiceImpl.java", "rawCode": "  @Override\n  public Statement getStatementForId(Long id) throws IOException {\n    log.debug(\"getStatementForId\");\n    Statement statement;\n    HashMap<String, String> params = createAuthenticatedParams();\n    HttpUriRequest httpGet =\n        RequestFactory.createGETRequest(serviceUrl + \"/statements/\" + id + \".json\", params);\n\n    HttpResponse response = httpclient.execute(httpGet);\n    HttpEntity responseEntity = response.getEntity();\n\n    final String responseString = EntityUtils.toString(responseEntity, \"UTF-8\");\n\n    statement = gson.fromJson(responseString, Statement.class);\n\n    return statement;\n  }\n"}, {"dataset": "execute", "exampleID": 2311, "initialization": ["HttpUriRequest request = createHttpRequest(Request<?>,Map<String, String>)"], "initializationStart": [186], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getParams()"], "configurationStart": [395], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 738, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/audkar/volley/tree/master/src/com/android/volley/toolbox/HttpClientStack.java", "rawCode": "  @Override\n  public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)\n      throws IOException, AuthFailureError {\n    HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);\n    addHeaders(httpRequest, additionalHeaders);\n    addHeaders(httpRequest, request.getHeaders());\n    onPrepareRequest(httpRequest);\n    HttpParams httpParams = httpRequest.getParams();\n    int timeoutMs = request.getTimeoutMs();\n    // TODO: Reevaluate this connection timeout based on more wide-scale\n    // data collection and possibly different for wifi vs. 3G.\n    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);\n    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);\n    return mClient.execute(httpRequest);\n  }\n"}, {"dataset": "execute", "exampleID": 2312, "initialization": ["HttpClient httpClient = new DefaultHttpClient()", "HttpUriRequest request = new HttpGet(String)"], "initializationStart": [436, 581], "initializationEnd": [459, 597], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["d(String,String,*)"], "tryExpressionStart": 244, "tryExpressionEnd": 248, "tryBlockStart": 244, "tryBlockEnd": 2074, "catchExpressionStart": 1639, "catchExpressionEnd": 1678, "catchBlockStart": 1639, "catchBlockEnd": 1744, "exceptionHandlingCallStart": [1688], "exceptionHandlingCallEnd": [1735], "configuration": ["httpClient.getParams()", "httpClient.getParams()"], "configurationStart": [881, 975], "configurationEnd": [903, 997], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1038, "focalAPIEnd": 1065, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "readResponseBody(response)"], "useStart": [1100, 1156], "useEnd": [1124, 1182], "hasFinally": 1, "cleanUpCall": ["d(String,String)", "new Intent(String)", "sendBroadcast(*)"], "finallyExpressionStart": 1941, "finallyExpressionEnd": 1949, "finallyBlockStart": 1941, "finallyBlockEnd": 2074, "cleanUpCallStart": [1959, 2025, 2003], "cleanUpCallEnd": [1993, 2064, 2065], "url": "https://github.com/calatrava/calatrava/tree/master/lib/calatrava/templates/droid/calatrava/src/com/calatrava/bridge/AjaxRequestManager.java", "rawCode": "    @Override\n    protected Void doInBackground(String... params) {\n      String requestId = params[0];\n      String url = params[1];\n      String method = params[2];\n      String body = params[3];\n      String customHeaders = params[4];\n      try {\n        Log.d(TAG, \"About to show loader\");\n        context.sendBroadcast(new Intent(\"com.calatrava.ajax.start\"));\n        Log.d(TAG, \"Issuing request\");\n        HttpClient httpclient = new DefaultHttpClient();\n        HttpResponse response;\n        HttpUriRequest request;\n\n        if (method.equals(\"GET\")) {\n          request = new HttpGet(url);\n        } else {\n          HttpPost httpPost = new HttpPost(url);\n          httpPost.setEntity(new StringEntity(body));\n          httpPost.setHeaders(addHeaders(customHeaders));\n          request = httpPost;\n        }\n\n        HttpConnectionParams.setConnectionTimeout(\n            httpclient.getParams(), CONNECTION_TIMEOUT * 1000);\n        HttpConnectionParams.setSoTimeout(httpclient.getParams(), SO_TIMEOUT * 1000);\n        response = httpclient.execute(request);\n\n        StatusLine statusLine = response.getStatusLine();\n        String responseBody = readResponseBody(response);\n        Log.d(TAG, \"Response is :\" + statusLine.getStatusCode());\n        Log.d(TAG, \"Response is :\" + responseBody);\n        if (statusLine.getStatusCode() < 300) {\n          Log.d(TAG, \"Invoke success callback\");\n          rhino.invokeSuccessCallback(requestId, responseBody);\n        } else {\n          Log.d(TAG, \"Invoke failure callback\");\n          rhino.invokeFailureCallback(requestId, statusLine.getStatusCode(), responseBody);\n        }\n      } catch (UnsupportedEncodingException e) {\n        Log.d(TAG, \"Unable to construct an entity.\", e);\n      } catch (IOException e) {\n        Log.d(TAG, \"Request threw exception\", e);\n        Log.d(TAG, \"requestId: \" + requestId);\n        rhino.invokeFailureCallback(requestId, 500, e.toString());\n      } finally {\n        Log.d(TAG, \"About to hide loader\");\n        context.sendBroadcast(new Intent(\"com.calatrava.ajax.finish\"));\n      }\n      return null;\n    }\n"}, {"dataset": "execute", "exampleID": 2313, "initialization": ["HttpUriRequest request = createHttpRequest(Request<?>,Map<String, String>)"], "initializationStart": [186], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getParams()"], "configurationStart": [395], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 738, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MoresbyCoffee/stroll-android/tree/master/libraries/volley/src/com/android/volley/toolbox/HttpClientStack.java", "rawCode": "  @Override\n  public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)\n      throws IOException, AuthFailureError {\n    HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);\n    addHeaders(httpRequest, additionalHeaders);\n    addHeaders(httpRequest, request.getHeaders());\n    onPrepareRequest(httpRequest);\n    HttpParams httpParams = httpRequest.getParams();\n    int timeoutMs = request.getTimeoutMs();\n    // TODO: Reevaluate this connection timeout based on more wide-scale\n    // data collection and possibly different for wifi vs. 3G.\n    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);\n    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);\n    return mClient.execute(httpRequest);\n  }\n"}, {"dataset": "execute", "exampleID": 2314, "initialization": ["HttpClient httpClient = new DefaultHttpClient()"], "initializationStart": [157], "initializationEnd": [180], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.addHeader(String,String)"], "configurationStart": [876], "configurationEnd": [949], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 985, "focalAPIEnd": 1012, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()", "response.getStatusLine()"], "useStart": [1042, 1181], "useEnd": [1062, 1205], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/8Yards/Nebula_Android/tree/master/src/org/nebula/client/rest/Resource.java", "rawCode": "  protected Response send_and_receive(HttpUriRequest request)\n      throws ClientProtocolException, IOException, JSONException {\n    HttpClient httpclient = new DefaultHttpClient();\n\n    Log.v(\"nebula\", request.toString());\n\n    if (myIdentity == null) {\n      return null;\n    }\n\n    if (myIdentity.getMyUserName() != null && !myIdentity.getMyUserName().trim().equals(\"\")) {\n      String username = myIdentity.getMyUserName();\n      String password = myIdentity.getMyPassword();\n\n      byte[] concat = new byte[username.length() + password.length() + 1];\n      System.arraycopy(username.getBytes(), 0, concat, 0, username.length());\n      System.arraycopy(\":\".getBytes(), 0, concat, username.length(), 1);\n      System.arraycopy(password.getBytes(), 0, concat, username.length() + 1, password.length());\n\n      String base64 = Base64.encode(username + \":\" + password);\n      request.addHeader(\"Authorization\", \"Basic \" + base64.replace(\"\\r\\n\", \"\"));\n    }\n    HttpResponse response = httpclient.execute(request);\n\n    InputStream instream = response.getEntity().getContent();\n    String result = Utils.convertStreamToString(instream);\n    Log.e(\"MARCO\", result);\n    int status = response.getStatusLine().getStatusCode();\n    return new Response(status, new JSONObject(result));\n  }\n"}, {"dataset": "execute", "exampleID": 2315, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["toString()", "e(String,*)", "HttpUriRequest.abort()"], "tryExpressionStart": 221, "tryExpressionEnd": 225, "tryBlockStart": 221, "tryBlockEnd": 2553, "catchExpressionStart": 1678, "catchExpressionEnd": 1712, "catchBlockStart": 1678, "catchBlockEnd": 1908, "exceptionHandlingCallStart": [1053, 1722, 1772], "exceptionHandlingCallEnd": [1084, 1746, 1791], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpClient!=null", "guardType": "IF {", "guardExpressionStart": 124, "guardExpressionEnd": 147, "guardBlockStart": 124, "guardBlockEnd": 2559, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 250, "focalAPIEnd": 281, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getEntity()"], "useStart": [315, 362], "useEnd": [343, 386], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/avantgarde280/myfeedle/tree/master/core/src/com/shafiq/myfeedle/core/MyfeedleHttpClient.java", "rawCode": "  protected static String httpResponse(HttpClient httpClient, HttpUriRequest httpRequest) {\n    String response = null;\n    if (httpClient != null) {\n      HttpResponse httpResponse;\n      HttpEntity entity = null;\n      try {\n        httpResponse = httpClient.execute(httpRequest);\n        StatusLine statusLine = httpResponse.getStatusLine();\n        entity = httpResponse.getEntity();\n\n        switch (statusLine.getStatusCode()) {\n          case 200:\n          case 201:\n          case 204:\n            if (entity != null) {\n              InputStream is = entity.getContent();\n              ByteArrayOutputStream content = new ByteArrayOutputStream();\n              byte[] sBuffer = new byte[512];\n              int readBytes = 0;\n              while ((readBytes = is.read(sBuffer)) != -1) {\n                content.write(sBuffer, 0, readBytes);\n              }\n              response = new String(content.toByteArray());\n            } else {\n              response = \"OK\";\n            }\n            break;\n          default:\n            Log.e(TAG, httpRequest.getURI().toString());\n            Log.e(TAG, \"\" + statusLine.getStatusCode() + \" \" + statusLine.getReasonPhrase());\n            if (entity != null) {\n              InputStream is = entity.getContent();\n              ByteArrayOutputStream content = new ByteArrayOutputStream();\n              byte[] sBuffer = new byte[512];\n              int readBytes = 0;\n              while ((readBytes = is.read(sBuffer)) != -1) {\n                content.write(sBuffer, 0, readBytes);\n              }\n              Log.e(TAG, \"response:\" + new String(content.toByteArray()));\n            }\n            break;\n        }\n      } catch (ClientProtocolException e) {\n        Log.e(TAG, e.toString());\n        try {\n          httpRequest.abort();\n        } catch (UnsupportedOperationException ignore) {\n          Log.e(TAG, ignore.toString());\n        }\n      } catch (IllegalStateException e) {\n        Log.e(TAG, e.toString());\n        try {\n          httpRequest.abort();\n        } catch (UnsupportedOperationException ignore) {\n          Log.e(TAG, ignore.toString());\n        }\n      } catch (IOException e) {\n        Log.e(TAG, e.toString());\n        try {\n          httpRequest.abort();\n        } catch (UnsupportedOperationException ignore) {\n          Log.e(TAG, ignore.toString());\n        }\n      } finally {\n        if (entity != null) {\n          try {\n            entity.consumeContent();\n          } catch (IOException e) {\n            Log.e(TAG, e.toString());\n          }\n        }\n      }\n    }\n    return response;\n  }\n"}, {"dataset": "execute", "exampleID": 2316, "initialization": ["HttpUriRequest request = createHttpRequest(Request<?>,Map<String, String>)"], "initializationStart": [186], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getParams()"], "configurationStart": [395], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 738, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rafalg7/volley/tree/master/src/com/android/volley/toolbox/HttpClientStack.java", "rawCode": "  @Override\n  public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)\n      throws IOException, AuthFailureError {\n    HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);\n    addHeaders(httpRequest, additionalHeaders);\n    addHeaders(httpRequest, request.getHeaders());\n    onPrepareRequest(httpRequest);\n    HttpParams httpParams = httpRequest.getParams();\n    int timeoutMs = request.getTimeoutMs();\n    // TODO: Reevaluate this connection timeout based on more wide-scale\n    // data collection and possibly different for wifi vs. 3G.\n    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);\n    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);\n    return mClient.execute(httpRequest);\n  }\n"}, {"dataset": "execute", "exampleID": 2317, "initialization": ["HttpClient httpClient = getClient()"], "initializationStart": [100], "initializationEnd": [111], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 141, "focalAPIEnd": 168, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [202], "useEnd": [222], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GoogleCloudPlatform/appengine-tck/tree/master/core/endpoints/src/test/java/com/google/appengine/tck/endpoints/support/EndPointClient.java", "rawCode": "  private String doRequest(HttpUriRequest request) throws IOException {\n    HttpClient httpClient = getClient();\n    HttpResponse response = httpClient.execute(request);\n    return EntityUtils.toString(response.getEntity());\n  }\n"}, {"dataset": "execute", "exampleID": 2318, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getURI()"], "configurationStart": [265], "configurationEnd": [294], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 309, "focalAPIEnd": 349, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/splunk/splunk-shuttl/tree/master/src/java/com/splunk/shuttl/archiver/archive/ArchiveRestHandler.java", "rawCode": "  private HttpResponse executeArchiveBucketRequest(\n      Bucket bucket, HttpUriRequest archiveBucketRequest)\n      throws IOException, ClientProtocolException, HttpResponseException {\n    logger.debug(\n        will(\"Send an archive bucket request\", \"request_uri\", archiveBucketRequest.getURI()));\n    return httpClient.execute(archiveBucketRequest);\n  }\n"}, {"dataset": "execute", "exampleID": 2319, "initialization": ["HttpUriRequest request = new HttpGet(String)", "HttpClient httpClient = new DefaultHttpClient()"], "initializationStart": [63, 890], "initializationEnd": [79, 913], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 919, "tryExpressionEnd": 923, "tryBlockStart": 919, "tryBlockEnd": 2359, "catchExpressionStart": 2305, "catchExpressionEnd": 2325, "catchBlockStart": 2305, "catchBlockEnd": 2359, "exceptionHandlingCallStart": [2333], "exceptionHandlingCallEnd": [2352], "configuration": ["request.addHeader(String,String)", "request.addHeader(String,String)", "request.addHeader(String,String)", "request.addHeader(String,String)", "request.addHeader(String,String)", "request.addHeader(String,String)", "request.addHeader(String,String)"], "configurationStart": [85, 132, 393, 669, 720, 779, 823], "configurationEnd": [126, 387, 663, 714, 773, 817, 868], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 955, "focalAPIEnd": 974, "followUpCheck": "response.getStatusLine().getStatusCode() == 206", "checkType": "IF", "followUpCheckExpressionStart": 1535, "followUpCheckExpressionEnd": 1587, "followUpCheckBlockStart": 1535, "followUpCheckBlockEnd": 1626, "use": ["response.getStatusLine()", "response.getHeaders(String)", "httpClient.execute(HttpUriRequest)"], "useStart": [999, 1175, 1508], "useEnd": [1023, 1212, 1527], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jiangchao1987/pokr/tree/master/src/main/java/com/yanchuanli/games/pokr/test/http/SegmentedHttpDownloader.java", "rawCode": "  @Override\n  public void run() {\n    HttpUriRequest httpget = new HttpGet(url);\n    httpget.addHeader(\"Host\", \"dl.appvv.com\");\n    httpget.addHeader(\n        \"User-Agent\",\n        \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SIMBAR={DC83FBA1-CFD9-11E1-9858-000B6B67C82B}; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; MASM; .NET4.0C; .NET4.0E)\");\n    httpget.addHeader(\n        \"Accept\",\n        \"image/jpeg, application/x-ms-application, image/gif, application/xaml+xml, image/pjpeg, application/x-ms-xbap, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*\");\n    httpget.addHeader(\"Accept-Language\", \"zh-cn\");\n    httpget.addHeader(\"Accept-Encoding\", \"gzip, deflate\");\n    httpget.addHeader(\"Keep-Alive\", \"115\");\n    httpget.addHeader(\"Connection\", \"keep-alive\");\n    HttpClient hc = new DefaultHttpClient();\n    try {\n      HttpResponse response = hc.execute(httpget);\n      int statusCode = response.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new Exception(\"资源不存在!\");\n      }\n\n      long contentLength = 0;\n      Header[] headers = response.getHeaders(\"Content-Length\");\n      if (headers.length > 0) {\n        contentLength = Long.valueOf(headers[0].getValue());\n      }\n      httpget.abort();\n      log.info(\"contentlength:\" + contentLength);\n\n      httpget = new HttpGet(url);\n      httpget.addHeader(\"Range\", \"bytes=0-\" + (contentLength - 1));\n      response = hc.execute(httpget);\n      if (response.getStatusLine().getStatusCode() == 206) {\n        acceptRanges = true;\n      }\n      httpget.abort();\n\n      File file = new File(\"123.ipa\");\n      file.createNewFile();\n\n      ExecutorService pool = Executors.newFixedThreadPool(threadCount);\n      long perThreadLength = contentLength / threadCount + 1;\n      long startPosition = 0;\n      long endPosition = perThreadLength;\n      do {\n        if (endPosition >= contentLength) {\n          endPosition = contentLength - 1;\n        }\n        DownloadThread dt = new DownloadThread(file, startPosition, endPosition, url);\n        pool.submit(dt);\n        startPosition = endPosition + 1;\n        endPosition += perThreadLength;\n\n      } while (startPosition < contentLength);\n\n      pool.shutdown();\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2320, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.setHeader(*,*)"], "configurationStart": [450], "configurationEnd": [493], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 566, "focalAPIEnd": 589, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [717], "useEnd": [737], "hasFinally": 1, "cleanUpCall": ["BufferedReader.close()"], "finallyExpressionStart": 1138, "finallyExpressionEnd": 1146, "finallyBlockStart": 1138, "finallyBlockEnd": 1205, "cleanUpCallStart": [1180], "cleanUpCallEnd": [1190], "url": "https://github.com/flaviovdf/spiderpig/tree/master/src/br/ufmg/dcc/vod/spiderpig/common/URLGetter.java", "rawCode": "  /**\n   * Converts URL page to byte array\n   *\n   * @param u URL to connect\n   * @param header Header to add to byte array\n   * @param footer Footer to add to byte array\n   * @return byte array\n   * @throws IOException If unable to connect to URL\n   */\n  public byte[] getHtml(HttpClient client, HttpUriRequest request, String header, String footer)\n      throws IOException {\n\n    for (Entry<String, String> e : requestProperties.entrySet())\n      request.setHeader(e.getKey(), e.getValue());\n\n    BufferedReader in = null;\n    try {\n      HttpResponse response = client.execute(request);\n\n      StringBuilder html = new StringBuilder();\n      html.append(header);\n      html.append(NL);\n\n      HttpEntity entity = response.getEntity();\n      if (entity != null) {\n        String inputLine;\n        in = new BufferedReader(new InputStreamReader(entity.getContent()));\n        while ((inputLine = in.readLine()) != null) {\n          html.append(inputLine);\n          html.append(NL);\n        }\n      }\n\n      html.append(footer);\n      html.append(NL);\n      html.trimToSize();\n      return html.toString().getBytes(this.charSet);\n    } finally {\n      if (in != null) {\n        in.close();\n      }\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2321, "initialization": ["HttpClient httpClient = new DefaultHttpClient()"], "initializationStart": [92], "initializationEnd": [115], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["HttpClient.getConnectionManager()", "shutdown()", "printStackTrace()"], "tryExpressionStart": 154, "tryExpressionEnd": 158, "tryBlockStart": 154, "tryBlockEnd": 1066, "catchExpressionStart": 872, "catchExpressionEnd": 906, "catchBlockStart": 872, "catchBlockEnd": 988, "exceptionHandlingCallStart": [914, 914, 962], "exceptionHandlingCallEnd": [943, 954, 981], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 181, "focalAPIEnd": 204, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getStatusLine()", "response.getEntity()", "response.getFirstHeader(String)", "httpClient.getConnectionManager()", "httpClient.getConnectionManager()"], "useStart": [227, 289, 364, 505, 914, 1019], "useEnd": [255, 317, 388, 552, 943, 1048], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ligi/bismo/tree/master/tv/src/main/java/org/bismo/tv/RestClient.java", "rawCode": "  private void executeRequest(HttpUriRequest request, String url) {\n    HttpClient client = new DefaultHttpClient();\n\n    HttpResponse httpResponse;\n\n    try {\n      httpResponse = client.execute(request);\n      responseCode = httpResponse.getStatusLine().getStatusCode();\n      message = httpResponse.getStatusLine().getReasonPhrase();\n\n      HttpEntity entity = httpResponse.getEntity();\n\n      if (entity != null) {\n\n        InputStream instream = entity.getContent();\n        Header contentEncoding = httpResponse.getFirstHeader(\"Content-Encoding\");\n        if (contentEncoding != null && contentEncoding.getValue().equalsIgnoreCase(\"gzip\")) {\n          instream = new GZIPInputStream(instream);\n        }\n        response = convertStreamToString(instream);\n\n        // Closing the input stream will trigger connection release\n        instream.close();\n      }\n\n    } catch (ClientProtocolException e) {\n      client.getConnectionManager().shutdown();\n      e.printStackTrace();\n    } catch (IOException e) {\n      client.getConnectionManager().shutdown();\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2322, "initialization": ["HttpUriRequest request = new HttpPost(*)", "HttpClient httpClient = getHttpClient()"], "initializationStart": [173, 362], "initializationEnd": [246, 377], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 410, "tryExpressionEnd": 414, "tryBlockStart": 410, "tryBlockEnd": 1216, "catchExpressionStart": 830, "catchExpressionEnd": 852, "catchBlockStart": 830, "catchBlockEnd": 886, "exceptionHandlingCallStart": [860], "exceptionHandlingCallEnd": [879], "configuration": ["request.getRequestLine()"], "configurationStart": [295], "configurationEnd": [319], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 463, "focalAPIEnd": 490, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["analyzeHttpStatus(response)", "readInEntity(response)"], "useStart": [498, 563], "useEnd": [525, 585], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Kaain/PaperFly/tree/master/PaperFly/src/main/java/de/fhb/mi/paperfly/service/RestConsumerSingleton.java", "rawCode": "  @Override\n  public AccountDTO setMyAccountStatus(Status status) throws RestConsumerException {\n    Log.d(TAG, \"setMyAccountStatus\");\n\n    HttpUriRequest request =\n        new HttpPost(getConnectionURL(URL_CHANGE_ACCOUNT_STATUS) + status.name());\n    AccountDTO account = null;\n\n    Log.d(TAG, request.getRequestLine().toString());\n\n    HttpClient httpclient = getHttpClient();\n    HttpResponse response;\n    try {\n      consumer.sign(request);\n      response = httpclient.execute(request);\n      analyzeHttpStatus(response);\n\n      String responseObjAsString = readInEntity(response);\n      Gson gson =\n          new GsonBuilder().registerTypeAdapter(Date.class, new JsonDateDeserializer()).create();\n      Log.d(TAG, \"json: \" + responseObjAsString);\n\n      account = gson.fromJson(responseObjAsString, AccountDTO.class);\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (OAuthExpectationFailedException e) {\n      e.printStackTrace();\n    } catch (OAuthCommunicationException e) {\n      e.printStackTrace();\n    } catch (OAuthMessageSignerException e) {\n      e.printStackTrace();\n    } catch (OAuthNotAuthorizedException e) {\n      loginAgain();\n      return setMyAccountStatus(status);\n    }\n    return account;\n  }\n"}, {"dataset": "execute", "exampleID": 2323, "initialization": ["HttpUriRequest request = createJSONPOSTRequest(String,String)"], "initializationStart": [189], "initializationEnd": [257], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 287, "focalAPIEnd": 315, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [349], "useEnd": [369], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biafra23/AmDroid/tree/master/AmenLib/src/main/java/com.jaeckel/amenoid/api/AmenServiceImpl.java", "rawCode": "  @Override\n  public Amen addStatement(Statement statement) throws IOException {\n\n    final String body = addAuthTokenToJSON(new Amen(statement), authToken);\n\n    HttpUriRequest httpPost = RequestFactory.createJSONPOSTRequest(serviceUrl + \"amen.json\", body);\n    HttpResponse response = httpclient.execute(httpPost);\n    HttpEntity responseEntity = response.getEntity();\n\n    final String responseString = EntityUtils.toString(responseEntity, \"UTF-8\");\n    if (responseString.startsWith(\"{\\\"error\\\":\")) {\n      throw new RuntimeException(responseString);\n    }\n\n    return gson.fromJson(responseString, Amen.class);\n  }\n"}, {"dataset": "execute", "exampleID": 2324, "initialization": ["HttpClient httpClient = HttpClientFactory.getHttpClient()", "HttpUriRequest request = new HttpGet(*)", "HttpUriRequest request = new HttpPut(*)", "HttpUriRequest request = new HttpPost(*)"], "initializationStart": [62, 260, 360, 461], "initializationEnd": [91, 293, 393, 495], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpClient.getConnectionManager()", "request.addHeader(String,String)", "request.setEntity(ByteArrayEntity)"], "configurationStart": [131, 2217, 2717], "configurationEnd": [164, 2264, 2777], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 2882, "focalAPIEnd": 2909, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getEntity()"], "useStart": [2937, 3378], "useEnd": [2961, 3398], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bestehle/SeapalAndroidApp/tree/master/TouchDB-Android/src/com/couchbase/touchdb/support/TDRemoteRequest.java", "rawCode": "  @Override\n  public void run() {\n    HttpClient httpClient = clientFactory.getHttpClient();\n    ClientConnectionManager manager = httpClient.getConnectionManager();\n\n    HttpUriRequest request = null;\n    if (method.equalsIgnoreCase(\"GET\")) {\n      request = new HttpGet(url.toExternalForm());\n    } else if (method.equalsIgnoreCase(\"PUT\")) {\n      request = new HttpPut(url.toExternalForm());\n    } else if (method.equalsIgnoreCase(\"POST\")) {\n      request = new HttpPost(url.toExternalForm());\n    }\n\n    // if the URL contains user info AND if this a DefaultHttpClient\n    // then preemptively set the auth credentials\n    if (url.getUserInfo() != null) {\n      if (url.getUserInfo().contains(\":\")) {\n        String[] userInfoSplit = url.getUserInfo().split(\":\");\n        final Credentials creds =\n            new UsernamePasswordCredentials(userInfoSplit[0], userInfoSplit[1]);\n        if (httpClient instanceof DefaultHttpClient) {\n          DefaultHttpClient dhc = (DefaultHttpClient) httpClient;\n\n          HttpRequestInterceptor preemptiveAuth =\n              new HttpRequestInterceptor() {\n\n                @Override\n                public void process(HttpRequest request, HttpContext context)\n                    throws HttpException, IOException {\n                  AuthState authState =\n                      (AuthState) context.getAttribute(ClientContext.TARGET_AUTH_STATE);\n                  CredentialsProvider credsProvider =\n                      (CredentialsProvider) context.getAttribute(ClientContext.CREDS_PROVIDER);\n                  HttpHost targetHost =\n                      (HttpHost) context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);\n\n                  if (authState.getAuthScheme() == null) {\n                    AuthScope authScope =\n                        new AuthScope(targetHost.getHostName(), targetHost.getPort());\n                    authState.setAuthScheme(new BasicScheme());\n                    authState.setCredentials(creds);\n                  }\n                }\n              };\n\n          dhc.addRequestInterceptor(preemptiveAuth, 0);\n        }\n      } else {\n        Log.w(TDDatabase.TAG, \"Unable to parse user info, not setting credentials\");\n      }\n    }\n\n    request.addHeader(\"Accept\", \"application/json\");\n\n    // set body if appropriate\n    if (body != null && request instanceof HttpEntityEnclosingRequestBase) {\n      byte[] bodyBytes = null;\n      try {\n        bodyBytes = TDServer.getObjectMapper().writeValueAsBytes(body);\n      } catch (Exception e) {\n        Log.e(TDDatabase.TAG, \"Error serializing body of request\", e);\n      }\n      ByteArrayEntity entity = new ByteArrayEntity(bodyBytes);\n      entity.setContentType(\"application/json\");\n      ((HttpEntityEnclosingRequestBase) request).setEntity(entity);\n    }\n\n    Object fullBody = null;\n    Throwable error = null;\n    try {\n      HttpResponse response = httpClient.execute(request);\n      StatusLine status = response.getStatusLine();\n      if (status.getStatusCode() >= 300) {\n        Log.e(TDDatabase.TAG, \"Got error \" + Integer.toString(status.getStatusCode()));\n        Log.e(TDDatabase.TAG, \"Request was for: \" + request.toString());\n        Log.e(TDDatabase.TAG, \"Status reason: \" + status.getReasonPhrase());\n        error = new HttpResponseException(status.getStatusCode(), status.getReasonPhrase());\n      } else {\n        HttpEntity temp = response.getEntity();\n        if (temp != null) {\n          try {\n            InputStream stream = temp.getContent();\n            fullBody = TDServer.getObjectMapper().readValue(stream, Object.class);\n          } finally {\n            try {\n              temp.consumeContent();\n            } catch (IOException e) {\n            }\n          }\n        }\n      }\n    } catch (ClientProtocolException e) {\n      error = e;\n    } catch (IOException e) {\n      error = e;\n    }\n    respondWithResult(fullBody, error);\n  }\n"}, {"dataset": "execute", "exampleID": 2325, "initialization": ["HttpUriRequest request = createHttpRequest(Request<?>,Map<String, String>)"], "initializationStart": [186], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getParams()"], "configurationStart": [395], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 738, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yochiro/android-volley/tree/master/src/com/android/volley/toolbox/HttpClientStack.java", "rawCode": "  @Override\n  public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)\n      throws IOException, AuthFailureError {\n    HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);\n    addHeaders(httpRequest, additionalHeaders);\n    addHeaders(httpRequest, request.getHeaders());\n    onPrepareRequest(httpRequest);\n    HttpParams httpParams = httpRequest.getParams();\n    int timeoutMs = request.getTimeoutMs();\n    // TODO: Reevaluate this connection timeout based on more wide-scale\n    // data collection and possibly different for wifi vs. 3G.\n    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);\n    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);\n    return mClient.execute(httpRequest);\n  }\n"}, {"dataset": "execute", "exampleID": 2326, "initialization": ["HttpUriRequest request = createDELETERequest(String,HashMap<String, String>)"], "initializationStart": [363], "initializationEnd": [410], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 486, "focalAPIEnd": 516, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [550], "useEnd": [570], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biafra23/AmDroid/tree/master/AmenLib/src/main/java/com.jaeckel/amenoid/api/AmenServiceImpl.java", "rawCode": "  @Override\n  public boolean takeBack(Long statementId) throws IOException {\n    log.debug(\"takeBack(): statementId: \" + statementId);\n    boolean result = false;\n    HashMap<String, String> params = createAuthenticatedParams();\n\n    final String url = serviceUrl + \"amen/\" + statementId + \".json\";\n    log.trace(\"DELETE \" + url);\n    HttpUriRequest httpDelete = RequestFactory.createDELETERequest(url, params);\n\n    log.trace(\"httpDelete: \" + httpDelete);\n\n    HttpResponse response = httpclient.execute(httpDelete);\n    HttpEntity responseEntity = response.getEntity();\n\n    final String responseString = EntityUtils.toString(responseEntity, \"UTF-8\");\n\n    if (\" \".equals(responseString)) {\n      result = true;\n    }\n\n    return result;\n  }\n"}, {"dataset": "execute", "exampleID": 2327, "initialization": ["HttpUriRequest request = createGETRequest(String,HashMap<String, String>)"], "initializationStart": [365], "initializationEnd": [444], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 475, "focalAPIEnd": 502, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [536], "useEnd": [556], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biafra23/AmDroid/tree/master/AmenLib/src/main/java/com.jaeckel/amenoid/api/AmenServiceImpl.java", "rawCode": "  @Override\n  public Topic getTopicsForId(String id, Long includeStatementId) throws IOException {\n\n    log.debug(\"getTopicsForId\");\n    Topic topic;\n    HashMap<String, String> params = createAuthenticatedParams();\n    if (includeStatementId != null) {\n      params.put(\"include_statement_id\", \"\" + includeStatementId);\n    }\n\n    HttpUriRequest httpGet =\n        RequestFactory.createGETRequest(serviceUrl + \"/topics/\" + id + \".json\", params);\n\n    HttpResponse response = httpclient.execute(httpGet);\n    HttpEntity responseEntity = response.getEntity();\n\n    final String responseString = EntityUtils.toString(responseEntity, \"UTF-8\");\n\n    topic = gson.fromJson(responseString, Topic.class);\n\n    return topic;\n  }\n"}, {"dataset": "execute", "exampleID": 2328, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["toString()", "e(String,*)", "HttpUriRequest.abort()"], "tryExpressionStart": 197, "tryExpressionEnd": 201, "tryBlockStart": 197, "tryBlockEnd": 1277, "catchExpressionStart": 631, "catchExpressionEnd": 665, "catchBlockStart": 631, "catchBlockEnd": 861, "exceptionHandlingCallStart": [686, 675, 725], "exceptionHandlingCallEnd": [698, 699, 744], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpClient!=null", "guardType": "IF {", "guardExpressionStart": 100, "guardExpressionEnd": 123, "guardBlockStart": 100, "guardBlockEnd": 1283, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 226, "focalAPIEnd": 257, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getEntity()"], "useStart": [291, 338], "useEnd": [319, 362], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/avantgarde280/myfeedle/tree/master/core/src/com/shafiq/myfeedle/core/MyfeedleHttpClient.java", "rawCode": "  protected static byte[] httpBlobResponse(HttpClient httpClient, HttpUriRequest httpRequest) {\n    if (httpClient != null) {\n      HttpResponse httpResponse;\n      HttpEntity entity = null;\n      try {\n        httpResponse = httpClient.execute(httpRequest);\n        StatusLine statusLine = httpResponse.getStatusLine();\n        entity = httpResponse.getEntity();\n\n        switch (statusLine.getStatusCode()) {\n          case 200:\n          case 201:\n          case 204:\n            if (entity != null) {\n              return getBlob(new FlushedInputStream(entity.getContent()));\n            }\n            break;\n        }\n      } catch (ClientProtocolException e) {\n        Log.e(TAG, e.toString());\n        try {\n          httpRequest.abort();\n        } catch (UnsupportedOperationException ignore) {\n          Log.e(TAG, ignore.toString());\n        }\n      } catch (IOException e) {\n        Log.e(TAG, e.toString());\n        try {\n          httpRequest.abort();\n        } catch (UnsupportedOperationException ignore) {\n          Log.e(TAG, ignore.toString());\n        }\n      } finally {\n        if (entity != null) {\n          try {\n            entity.consumeContent();\n          } catch (IOException e) {\n            Log.e(TAG, e.toString());\n          }\n        }\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "execute", "exampleID": 2329, "initialization": ["HttpContext context = constructHttpContext(*)", "HttpRequest request = doWithMethod(HttpDelete,*)"], "initializationStart": [831, 913], "initializationEnd": [879, 979], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["Log.error(String)", "new CaldavDataAccessException(*)"], "tryExpressionStart": 1023, "tryExpressionEnd": 1027, "tryBlockStart": 1023, "tryBlockEnd": 2140, "catchExpressionStart": 1764, "catchExpressionEnd": 1786, "catchBlockStart": 1764, "catchBlockEnd": 2086, "exceptionHandlingCallStart": [1798, 2043], "exceptionHandlingCallEnd": [2025, 2075], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(target,request,context)", "focalAPIStart": 1063, "focalAPIEnd": 1116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()", "response.getStatusLine()"], "useStart": [1137, 1186], "useEnd": [1157, 1210], "hasFinally": 1, "cleanUpCall": ["quietlyConsume(HttpEntity)"], "finallyExpressionStart": 2087, "finallyExpressionEnd": 2095, "finallyBlockStart": 2087, "finallyBlockEnd": 2140, "cleanUpCallStart": [2107], "cleanUpCallEnd": [2129], "url": "https://github.com/nblair/sometime/tree/master/sometime-spi-caldav/src/main/java/org/jasig/schedassist/impl/caldav/CaldavCalendarDataDaoImpl.java", "rawCode": "  @Override\n  public void purgeAvailableScheduleReflections(\n      IScheduleOwner owner, Date startDate, Date endDate) {\n    if (reflectionEnabled) {\n      List<CalendarWithURI> calendars =\n          peekAtAvailableScheduleReflections(owner, startDate, endDate);\n      for (CalendarWithURI calendar : calendars) {\n        // delete!\n        URI uri = this.caldavDialect.resolveCalendarURI(calendar);\n        HttpDelete method = new HttpDelete(uri.toString());\n        if (log.isDebugEnabled()) {\n          log.debug(\n              \"purgeAvailableScheduleReflections executing \"\n                  + methodToString(method)\n                  + \" for \"\n                  + owner\n                  + \", \"\n                  + startDate\n                  + \", \"\n                  + endDate);\n        }\n        final HttpContext context = constructHttpContext(owner.getCalendarAccount());\n        HttpRequest toExecute = methodInterceptor.doWithMethod(method, owner.getCalendarAccount());\n        HttpEntity entity = null;\n        try {\n          HttpResponse response = this.httpClient.execute(httpHost, toExecute, context);\n          entity = response.getEntity();\n          int statusCode = response.getStatusLine().getStatusCode();\n          log.debug(\"cancelAppointment status code: \" + statusCode);\n          if (statusCode == HttpStatus.SC_NO_CONTENT) {\n            // success\n          } else {\n            throw new CaldavDataAccessException(\n                \"purgeAvailableScheduleReflections for \"\n                    + owner\n                    + \", \"\n                    + startDate\n                    + \", \"\n                    + endDate\n                    + \" failed with unexpected status code: \"\n                    + statusCode);\n          }\n        } catch (IOException e) {\n          log.error(\n              \"an IOException occurred in purgeAvailableScheduleReflections for \"\n                  + owner\n                  + \", \"\n                  + startDate\n                  + \", \"\n                  + endDate);\n          throw new CaldavDataAccessException(e);\n        } finally {\n          quietlyConsume(entity);\n        }\n      }\n    } else {\n      log.debug(\"experimental feature 'Availability Schedule reflection' disabled\");\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2330, "initialization": ["HttpUriRequest request = createJSONPOSTRequest(String,*)"], "initializationStart": [799], "initializationEnd": [918], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 959, "tryExpressionEnd": 963, "tryBlockStart": 959, "tryBlockEnd": 3139, "catchExpressionStart": 3083, "catchExpressionEnd": 3105, "catchBlockStart": 3083, "catchBlockEnd": 3139, "exceptionHandlingCallStart": [3113], "exceptionHandlingCallEnd": [3132], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 982, "focalAPIEnd": 1017, "followUpCheck": "response.getStatusLine().getStatusCode() != 200", "checkType": "IF", "followUpCheckExpressionStart": 1301, "followUpCheckExpressionEnd": 1353, "followUpCheckBlockStart": 1301, "followUpCheckBlockEnd": 3075, "use": ["response.getEntity()"], "useStart": [1054], "useEnd": [1074], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biafra23/AmDroid/tree/master/AmenLib/src/main/java/com.jaeckel/amenoid/api/AmenServiceImpl.java", "rawCode": "  public User signup(String name, String email, String password) throws SignupFailedException {\n\n    User result = null;\n\n    JsonObject userObject = new JsonObject();\n\n    userObject.addProperty(\"password\", password);\n    userObject.addProperty(\"name\", name);\n    userObject.addProperty(\"email\", email);\n\n    JsonObject jsonObject = new JsonObject();\n    jsonObject.add(\"user\", userObject);\n\n    Properties props = new Properties();\n\n    try {\n      props.load(this.getClass().getResourceAsStream(\"amenoid.properties\"));\n\n    } catch (IOException e) {\n\n      throw new RuntimeException(\"Properties not loaded\", e);\n    }\n    String signupKey = props.getProperty(\"amenlib.signup.key\");\n\n    log.debug(\"jsonObject.toString(): \" + jsonObject.toString());\n\n    HttpUriRequest jsonPostRequest =\n        RequestFactory.createJSONPOSTRequest(\n            serviceUrl + \"sign-up/\" + signupKey + \".json\", jsonObject.toString());\n\n    HttpResponse response = null;\n    try {\n      response = httpclient.execute(jsonPostRequest);\n\n      HttpEntity responseEntity = response.getEntity();\n\n      final String responseString = EntityUtils.toString(responseEntity, \"UTF-8\");\n\n      log.debug(\"responseString: \" + responseString);\n      log.debug(\" response.code: \" + response.getStatusLine().getStatusCode());\n      if (response.getStatusLine().getStatusCode() != 200) {\n\n        Type collectionType = new TypeToken<SignupError>() {}.getType();\n\n        // {\n        // \"errors\":\n        // {\n        // \"email\":[\"has already been taken\"],\n        // \"username\":[\"is too long (maximum is 20 characters)\"]\n        // \"password\": [\"\"]\n        // }\n        // }\n\n        JsonParser jParser = new JsonParser();\n        JsonElement jsonElement = jParser.parse(responseString);\n        JsonObject jo = jsonElement.getAsJsonObject();\n\n        JsonObject errorsObject = jo.getAsJsonObject(\"errors\");\n\n        SignupError error = gson.fromJson(errorsObject, collectionType);\n\n        System.out.println(\"error: \" + error);\n\n        // {\"email\":[\"is invalid\"],\"password\":[\"is too short (minimum is 6 characters)\"]}\n        // {\"password\":[\"is too short (minimum is 6 characters)\"]}\n\n        if (error.getEmail() != null && error.getEmail() != null) {\n          System.out.println(\"error.getEmail(): \" + error.getEmail());\n          throw new SignupFailedException(\"email\", error.getEmail());\n        }\n\n        if (error.getPassword() != null && error.getPassword() != null) {\n          System.out.println(\"error.getPassword(): \" + error.getPassword());\n          throw new SignupFailedException(\"password\", error.getPassword());\n        }\n\n        if (error.getUsername() != null && error.getUsername() != null) {\n          System.out.println(\"error.getUsername(): \" + error.getUsername());\n          throw new SignupFailedException(\"username\", error.getUsername());\n        }\n\n        throw new SignupFailedException(\"error\", error.getError());\n\n      } else {\n        Type collectionType = new TypeToken<User>() {}.getType();\n        result = gson.fromJson(responseString, collectionType);\n      }\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    return result;\n  }\n"}, {"dataset": "execute", "exampleID": 2331, "initialization": ["HttpUriRequest request = new HttpGet(*)", "HttpClient httpClient = getHttpClient()"], "initializationStart": [160, 450], "initializationEnd": [217, 465], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 498, "tryExpressionEnd": 502, "tryBlockStart": 498, "tryBlockEnd": 1318, "catchExpressionStart": 926, "catchExpressionEnd": 948, "catchBlockStart": 926, "catchBlockEnd": 982, "exceptionHandlingCallStart": [956], "exceptionHandlingCallEnd": [975], "configuration": ["request.getRequestLine()"], "configurationStart": [383], "configurationEnd": [407], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 551, "focalAPIEnd": 578, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["analyzeHttpStatus(response)", "readInEntity(response)"], "useStart": [586, 651], "useEnd": [613, 673], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Kaain/PaperFly/tree/master/PaperFly/src/main/java/de/fhb/mi/paperfly/service/RestConsumerSingleton.java", "rawCode": "  @Override\n  public List<AccountDTO> searchAccount(String query) throws RestConsumerException {\n    Log.d(TAG, \"searchAccount\");\n\n    HttpUriRequest request = new HttpGet(getConnectionURL(URL_SEARCH_ACCOUNT) + query);\n    List<AccountDTO> searchResultList = new ArrayList<AccountDTO>();\n    Type collectionType = new TypeToken<ArrayList<AccountDTO>>() {}.getType();\n\n    Log.d(TAG, request.getRequestLine().toString());\n\n    HttpClient httpclient = getHttpClient();\n    HttpResponse response;\n    try {\n      consumer.sign(request);\n      response = httpclient.execute(request);\n      analyzeHttpStatus(response);\n\n      String responseObjAsString = readInEntity(response);\n      Gson gson =\n          new GsonBuilder().registerTypeAdapter(Date.class, new JsonDateDeserializer()).create();\n      Log.d(TAG, \"json: \" + responseObjAsString);\n\n      searchResultList = gson.fromJson(responseObjAsString, collectionType);\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (OAuthExpectationFailedException e) {\n      e.printStackTrace();\n    } catch (OAuthCommunicationException e) {\n      e.printStackTrace();\n    } catch (OAuthMessageSignerException e) {\n      e.printStackTrace();\n    } catch (OAuthNotAuthorizedException e) {\n      loginAgain();\n      searchResultList = searchAccount(query);\n    }\n    return searchResultList;\n  }\n"}, {"dataset": "execute", "exampleID": 2332, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getAllHeaders()"], "configurationStart": [242], "configurationEnd": [265], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1019, "focalAPIEnd": 1042, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/socialize/socialize-sdk-android/tree/master/sdk/src/com/socialize/provider/BaseSocializeProvider.java", "rawCode": "  private HttpResponse executeRequest(HttpClient client, HttpUriRequest request)\n      throws IOException {\n\n    if (logger != null && logger.isDebugEnabled()) {\n\n      StringBuilder builder = new StringBuilder();\n      Header[] allHeaders = request.getAllHeaders();\n\n      for (Header header : allHeaders) {\n        builder.append(header.getName());\n        builder.append(\":\");\n        builder.append(header.getValue());\n        builder.append(\"\\n\");\n      }\n\n      if (logger.isDebugEnabled()) {\n        logger.debug(\n            \"REQUEST \\nurl:[\"\n                + request.getURI().toString()\n                + \"] \\nheaders:\\n\"\n                + builder.toString());\n      }\n\n      if (request instanceof HttpPost) {\n        HttpPost post = (HttpPost) request;\n        HttpEntity entity = post.getEntity();\n        String requestData = ioUtils.readSafe(entity.getContent());\n\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"REQUEST \\ndata:[\" + requestData + \"]\");\n        }\n      }\n    }\n\n    return client.execute(request);\n  }\n"}, {"dataset": "execute", "exampleID": 2333, "initialization": ["HttpClient httpClient = TDChangeTrackerClient.getHttpClient()", "HttpUriRequest request = new HttpGet(*)"], "initializationStart": [82, 182], "initializationEnd": [104, 209], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["e(*,String,*)"], "tryExpressionStart": 1995, "tryExpressionEnd": 1999, "tryBlockStart": 1995, "tryBlockEnd": 4102, "catchExpressionStart": 3713, "catchExpressionEnd": 3747, "catchBlockStart": 3713, "catchBlockEnd": 3835, "exceptionHandlingCallStart": [3757], "exceptionHandlingCallEnd": [3826], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 2323, "focalAPIEnd": 2350, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getEntity()"], "useStart": [2380, 2641], "useEnd": [2404, 2661], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bestehle/SeapalAndroidApp/tree/master/TouchDB-Android/src/com/couchbase/touchdb/replicator/changetracker/TDChangeTracker.java", "rawCode": "  @Override\n  public void run() {\n    running = true;\n    HttpClient httpClient = client.getHttpClient();\n    while (running) {\n\n      URL url = getChangesFeedURL();\n      request = new HttpGet(url.toString());\n\n      // if the URL contains user info AND if this a DefaultHttpClient\n      // then preemptively set the auth credentials\n      if (url.getUserInfo() != null) {\n        if (url.getUserInfo().contains(\":\")) {\n          String[] userInfoSplit = url.getUserInfo().split(\":\");\n          final Credentials creds =\n              new UsernamePasswordCredentials(userInfoSplit[0], userInfoSplit[1]);\n          if (httpClient instanceof DefaultHttpClient) {\n            DefaultHttpClient dhc = (DefaultHttpClient) httpClient;\n\n            HttpRequestInterceptor preemptiveAuth =\n                new HttpRequestInterceptor() {\n\n                  @Override\n                  public void process(HttpRequest request, HttpContext context)\n                      throws HttpException, IOException {\n                    AuthState authState =\n                        (AuthState) context.getAttribute(ClientContext.TARGET_AUTH_STATE);\n                    CredentialsProvider credsProvider =\n                        (CredentialsProvider) context.getAttribute(ClientContext.CREDS_PROVIDER);\n                    HttpHost targetHost =\n                        (HttpHost) context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);\n\n                    if (authState.getAuthScheme() == null) {\n                      AuthScope authScope =\n                          new AuthScope(targetHost.getHostName(), targetHost.getPort());\n                      authState.setAuthScheme(new BasicScheme());\n                      authState.setCredentials(creds);\n                    }\n                  }\n                };\n\n            dhc.addRequestInterceptor(preemptiveAuth, 0);\n          }\n        } else {\n          Log.w(TDDatabase.TAG, \"Unable to parse user info, not setting credentials\");\n        }\n      }\n\n      try {\n        String maskedRemoteWithoutCredentials = getChangesFeedURL().toString();\n        maskedRemoteWithoutCredentials =\n            maskedRemoteWithoutCredentials.replaceAll(\"://.*:.*@\", \"://---:---@\");\n        Log.v(TDDatabase.TAG, \"Making request to \" + maskedRemoteWithoutCredentials);\n        HttpResponse response = httpClient.execute(request);\n        StatusLine status = response.getStatusLine();\n        if (status.getStatusCode() >= 300) {\n          Log.e(\n              TDDatabase.TAG,\n              \"Change tracker got error \" + Integer.toString(status.getStatusCode()));\n          stop();\n        }\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n          try {\n            InputStream input = entity.getContent();\n            if (mode != TDChangeTrackerMode.Continuous) {\n              Map<String, Object> fullBody = TDServer.getObjectMapper().readValue(input, Map.class);\n              boolean responseOK = receivedPollResponse(fullBody);\n              if (mode == TDChangeTrackerMode.LongPoll && responseOK) {\n                Log.v(TDDatabase.TAG, \"Starting new longpoll\");\n                continue;\n              } else {\n                Log.w(TDDatabase.TAG, \"Change tracker calling stop\");\n                stop();\n              }\n            } else {\n              BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n              String line = null;\n              while ((line = reader.readLine()) != null) {\n                receivedChunk(line);\n              }\n            }\n          } finally {\n            try {\n              entity.consumeContent();\n            } catch (IOException e) {\n            }\n          }\n        }\n      } catch (ClientProtocolException e) {\n        Log.e(TDDatabase.TAG, \"ClientProtocolException in change tracker\", e);\n      } catch (IOException e) {\n        if (running) {\n          // we get an exception when we're shutting down and have to\n          // close the socket underneath our read, ignore that\n          Log.e(TDDatabase.TAG, \"IOException in change tracker\", e);\n        }\n      }\n    }\n    Log.v(TDDatabase.TAG, \"Change tracker run loop exiting\");\n  }\n"}, {"dataset": "execute", "exampleID": 2334, "initialization": ["HttpClient httpClient = new DefaultHttpClient(ClientConnectionManager,HttpParams)", "HttpUriRequest request = new HttpGet(URI)"], "initializationStart": [945, 1028], "initializationEnd": [993, 1049], "hasTryCatch": 1, "exceptionType": "IllegalArgumentException", "exceptionHandlingCall": ["toString()", "fine(*)"], "tryExpressionStart": 1185, "tryExpressionEnd": 1189, "tryBlockStart": 1185, "tryBlockEnd": 2010, "catchExpressionStart": 1249, "catchExpressionEnd": 1286, "catchBlockStart": 1249, "catchBlockEnd": 1518, "exceptionHandlingCallStart": [1394, 1385], "exceptionHandlingCallEnd": [1408, 1409], "configuration": ["request.addHeader(String,String)"], "configurationStart": [1055], "configurationEnd": [1098], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1213, "focalAPIEnd": 1239, "followUpCheck": "response.getStatusLine().getStatusCode() != HttpServletResponse.SC_OK", "checkType": "IF", "followUpCheckExpressionStart": 2018, "followUpCheckExpressionEnd": 2095, "followUpCheckBlockStart": 2018, "followUpCheckBlockEnd": 2315, "use": ["response.getEntity()"], "useStart": [2522], "useEnd": [2545], "hasFinally": 1, "cleanUpCall": ["ClientConnectionManager.shutdown()"], "finallyExpressionStart": 2657, "finallyExpressionEnd": 2665, "finallyBlockStart": 2657, "finallyBlockEnd": 2731, "cleanUpCallStart": [2755], "cleanUpCallEnd": [2783], "url": "https://github.com/TonnyXu/Zxing/tree/master/zxingorg/src/com/google/zxing/web/DecodeServlet.java", "rawCode": "  @Override\n  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    String imageURIString = request.getParameter(\"u\");\n    if (imageURIString == null || imageURIString.length() == 0) {\n      log.fine(\"URI was empty\");\n      response.sendRedirect(\"badurl.jspx\");\n      return;\n    }\n\n    imageURIString = imageURIString.trim();\n\n    if (!(imageURIString.startsWith(\"http://\") || imageURIString.startsWith(\"https://\"))) {\n      imageURIString = \"http://\" + imageURIString;\n    }\n\n    URI imageURI;\n    try {\n      imageURI = new URI(imageURIString);\n    } catch (URISyntaxException urise) {\n      if (log.isLoggable(Level.FINE)) {\n        log.fine(\"URI was not valid: \" + imageURIString);\n      }\n      response.sendRedirect(\"badurl.jspx\");\n      return;\n    }\n\n    ClientConnectionManager connectionManager = new SingleClientConnManager(registry);\n    HttpClient client = new DefaultHttpClient(connectionManager, params);\n\n    HttpUriRequest getRequest = new HttpGet(imageURI);\n    getRequest.addHeader(\"Connection\", \"close\"); // Avoids CLOSE_WAIT socket issue?\n\n    try {\n\n      HttpResponse getResponse;\n      try {\n        getResponse = client.execute(getRequest);\n      } catch (IllegalArgumentException iae) {\n        // Thrown if hostname is bad or null\n        if (log.isLoggable(Level.FINE)) {\n          log.fine(iae.toString());\n        }\n        getRequest.abort();\n        response.sendRedirect(\"badurl.jspx\");\n        return;\n      } catch (IOException ioe) {\n        // Encompasses lots of stuff, including\n        // java.net.SocketException, java.net.UnknownHostException,\n        // javax.net.ssl.SSLPeerUnverifiedException,\n        // org.apache.http.NoHttpResponseException,\n        // org.apache.http.client.ClientProtocolException,\n        if (log.isLoggable(Level.FINE)) {\n          log.fine(ioe.toString());\n        }\n        getRequest.abort();\n        response.sendRedirect(\"badurl.jspx\");\n        return;\n      }\n\n      if (getResponse.getStatusLine().getStatusCode() != HttpServletResponse.SC_OK) {\n        if (log.isLoggable(Level.FINE)) {\n          log.fine(\"Unsuccessful return code: \" + getResponse.getStatusLine().getStatusCode());\n        }\n        response.sendRedirect(\"badurl.jspx\");\n        return;\n      }\n      if (!isSizeOK(getResponse)) {\n        log.fine(\"Too large\");\n        response.sendRedirect(\"badimage.jspx\");\n        return;\n      }\n\n      log.info(\"Decoding \" + imageURI);\n      HttpEntity entity = getResponse.getEntity();\n      InputStream is = entity.getContent();\n      try {\n        processStream(is, request, response);\n      } finally {\n        EntityUtils.consume(entity);\n        is.close();\n      }\n\n    } finally {\n      connectionManager.shutdown();\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2335, "initialization": ["HttpClient httpClient = new DefaultHttpClient(HttpParams)"], "initializationStart": [428], "initializationEnd": [457], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["getClass()", "getCanonicalName()", "toString()", "e(*,*)", "toString()", "new ApiException(String)"], "tryExpressionStart": 280, "tryExpressionEnd": 284, "tryBlockStart": 280, "tryBlockEnd": 1891, "catchExpressionStart": 1579, "catchExpressionEnd": 1613, "catchBlockStart": 1579, "catchBlockEnd": 1743, "exceptionHandlingCallStart": [1115, 1115, 1658, 1621, 1723, 1685], "exceptionHandlingCallEnd": [1125, 1144, 1670, 1671, 1735, 1736], "configuration": ["request.setHeader(String,String)"], "configurationStart": [202], "configurationEnd": [249], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 476, "focalAPIEnd": 499, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()", "response.getStatusLine()", "httpClient.getConnectionManager()", "httpClient.getConnectionManager()"], "useStart": [527, 931, 1387, 1531], "useEnd": [547, 955, 1416, 1560], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/coderbyheart/GroupMood/tree/master/moodclient/src/de/hsrm/mi/mobcomp/y2k11grp04/service/MoodServerApi.java", "rawCode": "  /**\n   * Lädt die Antwort vom Server\n   *\n   * @param request\n   * @throws ApiException\n   */\n  private JSONObject execute(HttpUriRequest request) throws ApiException {\n    HttpResponse response;\n    request.setHeader(\"Accept\", \"application/json\");\n    String dataAsString;\n    try {\n      HttpParams params = new BasicHttpParams();\n      HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n      HttpClient client = new DefaultHttpClient(params);\n      response = client.execute(request);\n      HttpEntity entity = response.getEntity();\n      InputStream inputStream = entity.getContent();\n      ByteArrayOutputStream content = new ByteArrayOutputStream();\n      int readBytes = 0;\n      byte[] sBuffer = new byte[512];\n      while ((readBytes = inputStream.read(sBuffer)) != -1) {\n        content.write(sBuffer, 0, readBytes);\n      }\n      dataAsString = new String(content.toByteArray());\n\n      StatusLine status = response.getStatusLine();\n      switch (status.getStatusCode()) {\n        case 200: // OK\n        case 201: // Created\n          break;\n        default:\n          Log.e(\n              getClass().getCanonicalName(),\n              \"Request failed: \"\n                  + request.getMethod()\n                  + \" \"\n                  + request.getURI().toString()\n                  + \": \"\n                  + dataAsString.replaceAll(\"<[^>]+>\", \"\"));\n          client.getConnectionManager().shutdown();\n          throw new ApiException(\"Invalid response from server: \" + status.toString());\n      }\n      client.getConnectionManager().shutdown();\n    } catch (ClientProtocolException e) {\n      Log.e(getClass().getCanonicalName(), e.toString());\n      throw new ApiException(\"Protocol error: \" + e.toString());\n    } catch (IOException e) {\n      Log.e(getClass().getCanonicalName(), e.toString());\n      throw new ApiException(\"I/O error: \" + e.toString());\n    }\n    Log.v(getClass().getCanonicalName(), dataAsString);\n    JSONObject jsonResponse;\n    try {\n      jsonResponse = (JSONObject) new JSONTokener(dataAsString).nextValue();\n    } catch (JSONException e) {\n      throw new ApiException(\"Failed to parse JSON response: \" + dataAsString);\n    }\n    JSONReader<ApiStatus> jsonResponseReader =\n        new JSONReader<ApiStatus>(jsonResponse, ApiStatus.class, JSONReader.KEY_STATUS);\n    ApiStatus s = jsonResponseReader.get();\n    if (!s.getMessage().equals(ApiStatus.STATUS_OK)) {\n      throw new ApiException(\"API error: \" + s.getMessage() + \"(\" + s.getCode() + \")\");\n    }\n    return jsonResponse;\n  }\n"}, {"dataset": "execute", "exampleID": 2336, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 121, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/twitter/hbc/tree/master/hbc-core/src/main/java/com/twitter/hbc/httpclient/Connection.java", "rawCode": "  public StatusLine connect(HttpUriRequest request) throws IOException {\n    this.request = request;\n    this.response = client.execute(request);\n    this.stream = response.getEntity().getContent();\n    processor.setup(stream);\n    return response.getStatusLine();\n  }\n"}, {"dataset": "execute", "exampleID": 2337, "initialization": ["HttpClient httpClient = getHttpClient()"], "initializationStart": [211], "initializationEnd": [226], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["getURI()", "e(String,String,*)"], "tryExpressionStart": 232, "tryExpressionEnd": 236, "tryBlockStart": 232, "tryBlockEnd": 511, "catchExpressionStart": 290, "catchExpressionEnd": 324, "catchBlockStart": 290, "catchBlockEnd": 406, "exceptionHandlingCallStart": [375, 332], "exceptionHandlingCallEnd": [395, 399], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(request==null)", "guardType": "IF {", "guardExpressionStart": 86, "guardExpressionEnd": 110, "guardBlockStart": 86, "guardBlockEnd": 182, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 251, "focalAPIEnd": 282, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/clauxz/DiscusysforAndroid/tree/master/Discussions/src/jp/ac/tohoku/qse/takahashi/discussions/data/odata/HttpUtil.java", "rawCode": "  private static HttpResponse executeRequest(final HttpUriRequest httpRequest) {\n\n    if (httpRequest == null) {\n      Log.e(TAG, \"HttpUriRequest was null\");\n      return null;\n    }\n    HttpClient httpClient = getHttpClient();\n    try {\n      return httpClient.execute(httpRequest);\n    } catch (ClientProtocolException e) {\n      Log.e(TAG, \"Failed to execute request: \" + httpRequest.getURI(), e);\n    } catch (IOException e) {\n      Log.e(TAG, \"Failed to execute request: \" + httpRequest.getURI(), e);\n    }\n    return null;\n  }\n"}, {"dataset": "execute", "exampleID": 2338, "initialization": ["HttpClient httpClient = new DefaultHttpClient()", "HttpUriRequest request = new HttpGet(String)", "HttpUriRequest request = new HttpDelete(String)"], "initializationStart": [241, 864, 944], "initializationEnd": [264, 880, 963], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["propagate(*)"], "tryExpressionStart": 205, "tryExpressionEnd": 209, "tryBlockStart": 205, "tryBlockEnd": 3162, "catchExpressionStart": 3098, "catchExpressionEnd": 3118, "catchBlockStart": 3098, "catchBlockEnd": 3162, "exceptionHandlingCallStart": [3132], "exceptionHandlingCallEnd": [3155], "configuration": ["httpClient.getParams()", "request.addHeader(Header)", "request.addHeader(*,*)", "request.addHeader(*,*)"], "configurationStart": [679, 2178, 2299, 2435], "configurationEnd": [701, 2207, 2368, 2498], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 2578, "focalAPIEnd": 2609, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getEntity()", "response.getStatusLine()"], "useStart": [2684, 2789, 3039], "useEnd": [2708, 2809, 3063], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rolisv/odata4j-fork/tree/master/odata4j-fit/src/test/java/org/odata4j/test/integration/CxfRuntimeFacade.java", "rawCode": "  private ResponseData getResource(\n      ODataHttpMethod method,\n      String uri,\n      InputStream content,\n      MediaType mediaType,\n      Map<String, Object> headers) {\n    String resource = \"\";\n    try {\n      HttpClient httpClient = new DefaultHttpClient();\n\n      if (System.getProperties().containsKey(\"http.proxyHost\")\n          && System.getProperties().containsKey(\"http.proxyPort\")) {\n        // support proxy settings\n        String hostName = System.getProperties().getProperty(\"http.proxyHost\");\n        String hostPort = System.getProperties().getProperty(\"http.proxyPort\");\n\n        HttpHost proxy = new HttpHost(hostName, Integer.parseInt(hostPort));\n        httpClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);\n      }\n\n      HttpUriRequest httpRequest;\n\n      switch (method) {\n        case GET:\n          httpRequest = new HttpGet(uri);\n          break;\n        case DELETE:\n          httpRequest = new HttpDelete(uri);\n          break;\n        case PATCH:\n          HttpPost patch = new HttpPost(uri);\n          if (content != null) patch.setEntity(new InputStreamEntity(content, -1));\n          patch.setHeader(Headers.X_HTTP_METHOD, \"PATCH\");\n          httpRequest = patch;\n          break;\n        case MERGE:\n          HttpPost merge = new HttpPost(uri);\n          if (content != null) merge.setEntity(new InputStreamEntity(content, -1));\n          merge.setHeader(Headers.X_HTTP_METHOD, \"MERGE\");\n          httpRequest = merge;\n          break;\n        case PUT:\n          HttpPut put = new HttpPut(uri);\n          if (content != null) put.setEntity(new InputStreamEntity(content, -1));\n          httpRequest = put;\n          break;\n        case POST:\n          HttpPost post = new HttpPost(uri);\n          if (content != null) post.setEntity(new InputStreamEntity(content, -1));\n          httpRequest = post;\n          break;\n        default:\n          throw new RuntimeException(\"Unsupported method: \" + method);\n      }\n\n      if (headers != null) {\n        for (String key : headers.keySet()) {\n          String value = (String) headers.get(key).toString();\n          Header header = new BasicHeader(key, value);\n          httpRequest.addHeader(header);\n        }\n      }\n      if (mediaType != null) {\n        if (content != null) {\n          httpRequest.addHeader(HttpHeaders.CONTENT_TYPE, mediaType.toString());\n        }\n        if (method == ODataHttpMethod.GET) {\n          httpRequest.addHeader(HttpHeaders.ACCEPT, mediaType.toString());\n        }\n      }\n\n      // Execute the request\n      HttpResponse response = httpClient.execute(httpRequest);\n      // Examine the response status\n      CxfRuntimeFacade.LOGGER.debug(response.getStatusLine().toString());\n      // Get hold of the response entity\n      HttpEntity entity = response.getEntity();\n      // If the response does not enclose an entity, there is no need\n      // to worry about connection release\n      if (entity != null) {\n        resource = EntityUtils.toString(entity);\n      }\n      return new ResponseData(response.getStatusLine().getStatusCode(), resource);\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2339, "initialization": ["HttpUriRequest request = getRequestByMethod(*,URI)"], "initializationStart": [609], "initializationEnd": [658], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["propagate(*)"], "tryExpressionStart": 2768, "tryExpressionEnd": 2772, "tryBlockStart": 2768, "tryBlockEnd": 2899, "catchExpressionStart": 2839, "catchExpressionEnd": 2861, "catchBlockStart": 2839, "catchBlockEnd": 2899, "exceptionHandlingCallStart": [2869], "exceptionHandlingCallEnd": [2892], "configuration": ["request.addHeader(*,String)", "request.addHeader(*,*)", "request.addHeader(*,String)"], "configurationStart": [992, 1112, 1262], "configurationEnd": [1047, 1175, 1333], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 2795, "focalAPIEnd": 2831, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getStatusLine()", "new CxfClientResponse(response)", "response.getEntity()", "response.getEntity()"], "useStart": [2947, 3056, 3582, 3753, 3982], "useEnd": [2975, 3084, 3617, 3777, 4006], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/odata4j/odata4j/tree/master/odata4j-cxf/src/main/java/org/odata4j/cxf/consumer/ODataCxfClient.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  protected ODataClientResponse doRequest(\n      FormatType reqType, ODataClientRequest request, StatusType... expectedResponseStatus)\n      throws ODataProducerException {\n    UriBuilder uriBuilder = UriBuilder.fromPath(request.getUrl());\n    for (String key : request.getQueryParams().keySet())\n      uriBuilder = uriBuilder.queryParam(key, request.getQueryParams().get(key));\n    URI uri = uriBuilder.build();\n\n    if (this.behaviors != null) {\n      for (OClientBehavior behavior : behaviors) request = behavior.transform(request);\n    }\n\n    HttpUriRequest httpRequest = this.getRequestByMethod(request.getMethod(), uri);\n\n    // maybe something better is needed here\n    String acceptHeader = \"\";\n    for (int i = 0; i < reqType.getAcceptableMediaTypes().length; i++) {\n      acceptHeader += reqType.getAcceptableMediaTypes()[i];\n      if (i < reqType.getAcceptableMediaTypes().length - 1) acceptHeader += \", \";\n    }\n    if (acceptHeader.length() > 0) httpRequest.addHeader(HttpHeaders.ACCEPT, acceptHeader);\n\n    for (String header : request.getHeaders().keySet())\n      httpRequest.addHeader(header, request.getHeaders().get(header));\n\n    if (!request.getHeaders().containsKey(ODataConstants.Headers.USER_AGENT))\n      httpRequest.addHeader(ODataConstants.Headers.USER_AGENT, \"odata4j.org\");\n\n    if (request.getPayload() != null && httpRequest instanceof HttpEntityEnclosingRequest) {\n      HttpEntityEnclosingRequest entityRequest = (HttpEntityEnclosingRequest) httpRequest;\n\n      Class<?> payloadClass;\n      if (request.getPayload() instanceof Entry) payloadClass = Entry.class;\n      else if (request.getPayload() instanceof SingleLink) payloadClass = SingleLink.class;\n      else throw new IllegalArgumentException(\"Unsupported payload: \" + request.getPayload());\n\n      StringWriter sw = new StringWriter();\n      FormatWriter<Object> fw =\n          (FormatWriter<Object>)\n              FormatWriterFactory.getFormatWriter(\n                  payloadClass, null, this.getFormatType().toString(), null);\n      fw.write(null, sw, request.getPayload());\n      String entityString = sw.toString();\n\n      // allow the client to override the default format writer content-type\n      String contentType =\n          request.getHeaders().containsKey(ODataConstants.Headers.CONTENT_TYPE)\n              ? request.getHeaders().get(ODataConstants.Headers.CONTENT_TYPE)\n              : fw.getContentType();\n\n      try {\n        StringEntity entity = new StringEntity(entityString);\n\n        entity.setContentType(contentType);\n\n        entityRequest.setEntity(entity);\n      } catch (UnsupportedEncodingException e) {\n        Throwables.propagate(e);\n      }\n    }\n\n    // execute request\n    HttpResponse httpResponse = null;\n    try {\n      httpResponse = this.httpClient.execute(httpRequest);\n    } catch (IOException e) {\n      Throwables.propagate(e);\n    }\n\n    StatusType status = Status.fromStatusCode(httpResponse.getStatusLine().getStatusCode());\n    if (status == null) {\n      final StatusLine statusLine = httpResponse.getStatusLine();\n      status =\n          new StatusType() {\n\n            public int getStatusCode() {\n              return statusLine.getStatusCode();\n            }\n\n            public Family getFamily() {\n              return null;\n            }\n\n            public String getReasonPhrase() {\n              return statusLine.getReasonPhrase();\n            }\n          };\n    }\n    for (StatusType expStatus : expectedResponseStatus)\n      if (expStatus.getStatusCode() == status.getStatusCode())\n        return new CxfClientResponse(httpResponse);\n\n    // the server responded with an unexpected status\n    RuntimeException exception;\n    String textEntity =\n        entityToString(httpResponse.getEntity()); // input stream can only be consumed once\n    try {\n      // report error as ODataProducerException in case we get a well-formed OData error...\n      MediaType contentType =\n          MediaType.valueOf(httpResponse.getEntity().getContentType().getValue());\n      OError error =\n          FormatParserFactory.getParser(OError.class, contentType, null)\n              .parse(new StringReader(textEntity));\n      exception = ODataProducerExceptions.create(status, error);\n    } catch (RuntimeException e) {\n      // ... otherwise throw a RuntimeError\n      exception =\n          new RuntimeException(\n              String.format(\n                      \"Expected status %s, found %s. Server response:\",\n                      Enumerable.create(expectedResponseStatus).join(\" or \"), status)\n                  + \"\\n\"\n                  + textEntity,\n              e);\n    }\n    throw exception;\n  }\n"}, {"dataset": "execute", "exampleID": 2340, "initialization": ["HttpUriRequest request = new HttpGet(*)", "HttpClient httpClient = getHttpClient()"], "initializationStart": [110, 235], "initializationEnd": [151, 250], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 283, "tryExpressionEnd": 287, "tryBlockStart": 283, "tryBlockEnd": 849, "catchExpressionStart": 488, "catchExpressionEnd": 510, "catchBlockStart": 488, "catchBlockEnd": 544, "exceptionHandlingCallStart": [518], "exceptionHandlingCallEnd": [537], "configuration": ["request.getRequestLine()"], "configurationStart": [168], "configurationEnd": [192], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 336, "focalAPIEnd": 363, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["analyzeHttpStatus(response)"], "useStart": [371], "useEnd": [398], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Kaain/PaperFly/tree/master/PaperFly/src/main/java/de/fhb/mi/paperfly/service/RestConsumerSingleton.java", "rawCode": "  public void logout() throws RestConsumerException {\n    Log.d(TAG, \"logout\");\n\n    HttpUriRequest request = new HttpGet(getConnectionURL(URL_LOGOUT));\n    Log.d(TAG, request.getRequestLine().toString());\n\n    HttpClient httpclient = getHttpClient();\n    HttpResponse response;\n    try {\n      consumer.sign(request);\n      response = httpclient.execute(request);\n      analyzeHttpStatus(response);\n      cookieStore = null;\n      encryptCredentials = null;\n      consumer = null;\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (OAuthExpectationFailedException e) {\n      e.printStackTrace();\n    } catch (OAuthCommunicationException e) {\n      e.printStackTrace();\n    } catch (OAuthMessageSignerException e) {\n      e.printStackTrace();\n    } catch (OAuthNotAuthorizedException e) {\n      loginAgain();\n      logout();\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2341, "initialization": ["HttpRequest request = doWithMethod(HttpPut,ICalendarAccount)", "HttpContext context = constructHttpContext(ICalendarAccount)"], "initializationStart": [458, 676], "initializationEnd": [513, 708], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(target,request,context)", "focalAPIStart": 781, "focalAPIEnd": 834, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()", "response.getStatusLine()"], "useStart": [851, 1027], "useEnd": [871, 1051], "hasFinally": 1, "cleanUpCall": ["consume(HttpEntity)"], "finallyExpressionStart": 1318, "finallyExpressionEnd": 1326, "finallyBlockStart": 1318, "finallyBlockEnd": 1368, "cleanUpCallStart": [1334], "cleanUpCallEnd": [1361], "url": "https://github.com/Jasig/sched-assist/tree/master/sched-assist-spi-caldav/src/main/java/org/jasig/schedassist/impl/caldav/CaldavCalendarDataDaoImpl.java", "rawCode": "  /**\n   * Store a new event using CalDAV PUT.\n   *\n   * @param eventOwner\n   * @param event\n   * @return\n   * @throws HttpException\n   * @throws IOException\n   */\n  protected int putNewEvent(ICalendarAccount eventOwner, VEvent event)\n      throws HttpException, IOException {\n    String uri = generateEventUri(eventOwner, event);\n\n    HttpPut method = constructPutMethod(uri, event);\n    method.addHeader(IF_NONE_MATCH_HEADER);\n\n    HttpRequest toExecute = this.methodInterceptor.doWithMethod(method, eventOwner);\n    if (log.isDebugEnabled()) {\n      log.debug(\"putNewEvent executing \" + methodToString(method) + \" for \" + eventOwner);\n    }\n    final HttpContext context = constructHttpContext(eventOwner);\n\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = this.httpClient.execute(httpHost, toExecute, context);\n      entity = response.getEntity();\n      if (log.isDebugEnabled()) {\n        if (entity == null) {\n          log.debug(\n              \"putNewEvent response entity was null, statusline: \" + response.getStatusLine());\n        } else {\n          InputStream content = entity.getContent();\n          log.debug(\"putNewEvent response body: \" + IOUtils.toString(content));\n        }\n      }\n      int statusCode = response.getStatusLine().getStatusCode();\n      return statusCode;\n    } finally {\n      EntityUtils.consume(entity);\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2342, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["trace(String,*)"], "tryExpressionStart": 572, "tryExpressionEnd": 576, "tryBlockStart": 572, "tryBlockEnd": 719, "catchExpressionStart": 622, "catchExpressionEnd": 642, "catchBlockStart": 622, "catchBlockEnd": 719, "exceptionHandlingCallStart": [652], "exceptionHandlingCallEnd": [694], "configuration": ["request.getRequestLine()"], "configurationStart": [343], "configurationEnd": [363], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 593, "focalAPIEnd": 612, "followUpCheck": "response.getAllHeaders()", "checkType": "LOOP {", "followUpCheckExpressionStart": 831, "followUpCheckExpressionEnd": 868, "followUpCheckBlockStart": 831, "followUpCheckBlockEnd": 957, "use": ["response.getStatusLine()", "response.getEntity()"], "useStart": [802, 1020], "useEnd": [822, 1036], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/revelytix/spark/tree/master/spark-http-client/src/main/java/spark/protocol/SparqlCall.java", "rawCode": "  /**\n   * Logs a request, executes it, and dumps the response to the logger. For development use only.\n   */\n  @SuppressWarnings(\"unused\")\n  private static final void dump(HttpClient client, HttpUriRequest req) {\n    if (logger.isTraceEnabled()) {\n      StringBuilder sb = new StringBuilder(\"\\n=== Request ===\");\n      sb.append(\"\\n\").append(req.getRequestLine());\n      for (Header h : req.getAllHeaders()) {\n        sb.append(\"\\n\").append(h.getName()).append(\": \").append(h.getValue());\n      }\n      logger.trace(sb.toString());\n\n      HttpResponse resp = null;\n      try {\n        resp = client.execute(req);\n      } catch (Exception e) {\n        logger.trace(\"Error executing request\", e);\n        return;\n      }\n\n      sb = new StringBuilder(\"\\n=== Response ===\");\n      sb.append(\"\\n\").append(resp.getStatusLine());\n      for (Header h : resp.getAllHeaders()) {\n        sb.append(\"\\n\").append(h.getName()).append(\": \").append(h.getValue());\n      }\n      logger.trace(sb.toString());\n\n      HttpEntity entity = resp.getEntity();\n      if (entity != null) {\n        sb = new StringBuilder(\"\\n=== Content ===\");\n        try {\n          int len = (int) entity.getContentLength();\n          if (len < 0) len = 100;\n          ByteArrayOutputStream baos = new ByteArrayOutputStream(len);\n          entity.writeTo(baos);\n          sb.append(\"\\n\").append(baos.toString(\"UTF-8\"));\n          logger.trace(sb.toString());\n        } catch (IOException e) {\n          logger.trace(\"Error reading content\", e);\n        }\n      }\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2343, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 86, "focalAPIEnd": 111, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/core/java/android/net/http/AndroidHttpClient.java", "rawCode": "  public HttpResponse execute(HttpUriRequest request) throws IOException {\n    return delegate.execute(request);\n  }\n"}, {"dataset": "execute", "exampleID": 2344, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(target,request,context)", "focalAPIStart": 229, "focalAPIEnd": 270, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["generateViaHeader(response)", "response.addHeader(String,*)", "handleBackendResponse(HttpHost,HttpRequest,Date,*,response)"], "useStart": [309, 276, 357], "useEnd": [343, 344, 443], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biafra23/AmDroid/tree/master/httpclientandroidlib/src/ch/boye/httpclientandroidlib/impl/client/cache/CachingHttpClient.java", "rawCode": "  HttpResponse callBackend(HttpHost target, HttpRequest request, HttpContext context)\n      throws IOException {\n\n    Date requestDate = getCurrentDate();\n\n    log.trace(\"Calling the backend\");\n    HttpResponse backendResponse = backend.execute(target, request, context);\n    backendResponse.addHeader(\"Via\", generateViaHeader(backendResponse));\n    return handleBackendResponse(target, request, requestDate, getCurrentDate(), backendResponse);\n  }\n"}, {"dataset": "execute", "exampleID": 2345, "initialization": ["HttpUriRequest request = createGETRequest(String,HashMap<String, String>)"], "initializationStart": [304], "initializationEnd": [389], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 419, "focalAPIEnd": 446, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [480], "useEnd": [500], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biafra23/AmDroid/tree/master/AmenLib/src/main/java/com.jaeckel/amenoid/api/AmenServiceImpl.java", "rawCode": "  @Override\n  public List<Amen> getAmenForObjekt(Long objektId) throws IOException {\n\n    List<Amen> result;\n    // https://getamen.com/things/97282\n    log.debug(\"AmenForObjekt() if: \" + objektId);\n\n    HashMap<String, String> params = createAuthenticatedParams();\n\n    HttpUriRequest httpGet =\n        RequestFactory.createGETRequest(serviceUrl + \"o/\" + objektId + \"/amens.json\", params);\n    HttpResponse response = httpclient.execute(httpGet);\n    HttpEntity responseEntity = response.getEntity();\n\n    final String responseString = EntityUtils.toString(responseEntity, \"UTF-8\");\n\n    Type collectionType = new TypeToken<Collection<Amen>>() {}.getType();\n    result = gson.fromJson(responseString, collectionType);\n\n    return result;\n  }\n"}, {"dataset": "execute", "exampleID": 2346, "initialization": ["HttpClient httpClient = getHttpClient()", "HttpUriRequest request = new HttpGet(String)"], "initializationStart": [417, 481], "initializationEnd": [450, 497], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "e(String,*,*)"], "tryExpressionStart": 379, "tryExpressionEnd": 383, "tryBlockStart": 379, "tryBlockEnd": 991, "catchExpressionStart": 899, "catchExpressionEnd": 927, "catchBlockStart": 899, "catchBlockEnd": 991, "exceptionHandlingCallStart": [948, 937], "exceptionHandlingCallEnd": [970, 982], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 531, "focalAPIEnd": 554, "followUpCheck": "response.getStatusLine().getStatusCode() == HttpStatus.SC_OK", "checkType": "IF", "followUpCheckExpressionStart": 564, "followUpCheckExpressionEnd": 629, "followUpCheckBlockStart": 564, "followUpCheckBlockEnd": 890, "use": ["response.getEntity()"], "useStart": [662], "useEnd": [682], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fabin/Album/tree/master/android/src/com/corising/weddingalbum/PicturesGridFragment.java", "rawCode": "    @Override\n    protected ArrayList<Picture> doInBackground(Album... params) {\n      Album album = params[0];\n      String url = context.getString(R.string.server) + \"/interface/album/\" + album.getKey();\n\n      String localJson = httpResonseDAO.findByUri(url);\n      if (localJson != null && !localJson.equals(\"\")) {\n        return processJsonString(localJson);\n      }\n\n      try {\n        HttpClient httpclient = HttpClientFactory.getHttpClient();\n        HttpUriRequest get = new HttpGet(url);\n        HttpResponse response = httpclient.execute(get);\n        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n          HttpEntity entity = response.getEntity();\n          String string = EntityUtils.toString(entity, \"utf-8\");\n          entity.consumeContent();\n\n          httpResonseDAO.addOrUpdate(url, string);\n\n          return processJsonString(string);\n        }\n      } catch (Exception exception) {\n        Log.e(TAG, exception.getMessage(), exception);\n      }\n\n      return null;\n    }\n"}, {"dataset": "execute", "exampleID": 2347, "initialization": ["HttpUriRequest request = createHttpRequest(Request<?>,Map<String, String>)"], "initializationStart": [186], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getParams()"], "configurationStart": [395], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 738, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Geekner/android-volley/tree/master/src/com/android/volley/toolbox/HttpClientStack.java", "rawCode": "  @Override\n  public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)\n      throws IOException, AuthFailureError {\n    HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);\n    addHeaders(httpRequest, additionalHeaders);\n    addHeaders(httpRequest, request.getHeaders());\n    onPrepareRequest(httpRequest);\n    HttpParams httpParams = httpRequest.getParams();\n    int timeoutMs = request.getTimeoutMs();\n    // TODO: Reevaluate this connection timeout based on more wide-scale\n    // data collection and possibly different for wifi vs. 3G.\n    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);\n    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);\n    return mClient.execute(httpRequest);\n  }\n"}, {"dataset": "execute", "exampleID": 2348, "initialization": ["HttpClient httpClient = new DefaultHttpClient()", "HttpUriRequest request = new HttpGet(String)", "HttpUriRequest request = new HttpDelete(String)"], "initializationStart": [241, 864, 944], "initializationEnd": [264, 880, 963], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["propagate(*)"], "tryExpressionStart": 205, "tryExpressionEnd": 209, "tryBlockStart": 205, "tryBlockEnd": 3162, "catchExpressionStart": 3098, "catchExpressionEnd": 3118, "catchBlockStart": 3098, "catchBlockEnd": 3162, "exceptionHandlingCallStart": [3132], "exceptionHandlingCallEnd": [3155], "configuration": ["httpClient.getParams()", "request.addHeader(Header)", "request.addHeader(*,*)", "request.addHeader(*,*)"], "configurationStart": [679, 2178, 2299, 2435], "configurationEnd": [701, 2207, 2368, 2498], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 2578, "focalAPIEnd": 2609, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getEntity()", "response.getStatusLine()"], "useStart": [2684, 2789, 3039], "useEnd": [2708, 2809, 3063], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/odata4j/odata4j/tree/master/odata4j-fit/src/test/java/org/odata4j/test/integration/CxfRuntimeFacade.java", "rawCode": "  private ResponseData getResource(\n      ODataHttpMethod method,\n      String uri,\n      InputStream content,\n      MediaType mediaType,\n      Map<String, Object> headers) {\n    String resource = \"\";\n    try {\n      HttpClient httpClient = new DefaultHttpClient();\n\n      if (System.getProperties().containsKey(\"http.proxyHost\")\n          && System.getProperties().containsKey(\"http.proxyPort\")) {\n        // support proxy settings\n        String hostName = System.getProperties().getProperty(\"http.proxyHost\");\n        String hostPort = System.getProperties().getProperty(\"http.proxyPort\");\n\n        HttpHost proxy = new HttpHost(hostName, Integer.parseInt(hostPort));\n        httpClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);\n      }\n\n      HttpUriRequest httpRequest;\n\n      switch (method) {\n        case GET:\n          httpRequest = new HttpGet(uri);\n          break;\n        case DELETE:\n          httpRequest = new HttpDelete(uri);\n          break;\n        case PATCH:\n          HttpPost patch = new HttpPost(uri);\n          if (content != null) patch.setEntity(new InputStreamEntity(content, -1));\n          patch.setHeader(Headers.X_HTTP_METHOD, \"PATCH\");\n          httpRequest = patch;\n          break;\n        case MERGE:\n          HttpPost merge = new HttpPost(uri);\n          if (content != null) merge.setEntity(new InputStreamEntity(content, -1));\n          merge.setHeader(Headers.X_HTTP_METHOD, \"MERGE\");\n          httpRequest = merge;\n          break;\n        case PUT:\n          HttpPut put = new HttpPut(uri);\n          if (content != null) put.setEntity(new InputStreamEntity(content, -1));\n          httpRequest = put;\n          break;\n        case POST:\n          HttpPost post = new HttpPost(uri);\n          if (content != null) post.setEntity(new InputStreamEntity(content, -1));\n          httpRequest = post;\n          break;\n        default:\n          throw new RuntimeException(\"Unsupported method: \" + method);\n      }\n\n      if (headers != null) {\n        for (String key : headers.keySet()) {\n          String value = (String) headers.get(key).toString();\n          Header header = new BasicHeader(key, value);\n          httpRequest.addHeader(header);\n        }\n      }\n      if (mediaType != null) {\n        if (content != null) {\n          httpRequest.addHeader(HttpHeaders.CONTENT_TYPE, mediaType.toString());\n        }\n        if (method == ODataHttpMethod.GET) {\n          httpRequest.addHeader(HttpHeaders.ACCEPT, mediaType.toString());\n        }\n      }\n\n      // Execute the request\n      HttpResponse response = httpClient.execute(httpRequest);\n      // Examine the response status\n      CxfRuntimeFacade.LOGGER.debug(response.getStatusLine().toString());\n      // Get hold of the response entity\n      HttpEntity entity = response.getEntity();\n      // If the response does not enclose an entity, there is no need\n      // to worry about connection release\n      if (entity != null) {\n        resource = EntityUtils.toString(entity);\n      }\n      return new ResponseData(response.getStatusLine().getStatusCode(), resource);\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2349, "initialization": ["HttpContext context = constructHttpContext(*)", "HttpRequest request = doWithMethod(HttpDelete,*)"], "initializationStart": [831, 913], "initializationEnd": [879, 979], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["Log.error(String)", "new CaldavDataAccessException(*)"], "tryExpressionStart": 1023, "tryExpressionEnd": 1027, "tryBlockStart": 1023, "tryBlockEnd": 2140, "catchExpressionStart": 1764, "catchExpressionEnd": 1786, "catchBlockStart": 1764, "catchBlockEnd": 2086, "exceptionHandlingCallStart": [1798, 2043], "exceptionHandlingCallEnd": [2025, 2075], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(target,request,context)", "focalAPIStart": 1063, "focalAPIEnd": 1116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()", "response.getStatusLine()"], "useStart": [1137, 1186], "useEnd": [1157, 1210], "hasFinally": 1, "cleanUpCall": ["quietlyConsume(HttpEntity)"], "finallyExpressionStart": 2087, "finallyExpressionEnd": 2095, "finallyBlockStart": 2087, "finallyBlockEnd": 2140, "cleanUpCallStart": [2107], "cleanUpCallEnd": [2129], "url": "https://github.com/Jasig/sched-assist/tree/master/sched-assist-spi-caldav/src/main/java/org/jasig/schedassist/impl/caldav/CaldavCalendarDataDaoImpl.java", "rawCode": "  @Override\n  public void purgeAvailableScheduleReflections(\n      IScheduleOwner owner, Date startDate, Date endDate) {\n    if (reflectionEnabled) {\n      List<CalendarWithURI> calendars =\n          peekAtAvailableScheduleReflections(owner, startDate, endDate);\n      for (CalendarWithURI calendar : calendars) {\n        // delete!\n        URI uri = this.caldavDialect.resolveCalendarURI(calendar);\n        HttpDelete method = new HttpDelete(uri.toString());\n        if (log.isDebugEnabled()) {\n          log.debug(\n              \"purgeAvailableScheduleReflections executing \"\n                  + methodToString(method)\n                  + \" for \"\n                  + owner\n                  + \", \"\n                  + startDate\n                  + \", \"\n                  + endDate);\n        }\n        final HttpContext context = constructHttpContext(owner.getCalendarAccount());\n        HttpRequest toExecute = methodInterceptor.doWithMethod(method, owner.getCalendarAccount());\n        HttpEntity entity = null;\n        try {\n          HttpResponse response = this.httpClient.execute(httpHost, toExecute, context);\n          entity = response.getEntity();\n          int statusCode = response.getStatusLine().getStatusCode();\n          log.debug(\"cancelAppointment status code: \" + statusCode);\n          if (statusCode == HttpStatus.SC_NO_CONTENT) {\n            // success\n          } else {\n            throw new CaldavDataAccessException(\n                \"purgeAvailableScheduleReflections for \"\n                    + owner\n                    + \", \"\n                    + startDate\n                    + \", \"\n                    + endDate\n                    + \" failed with unexpected status code: \"\n                    + statusCode);\n          }\n        } catch (IOException e) {\n          log.error(\n              \"an IOException occurred in purgeAvailableScheduleReflections for \"\n                  + owner\n                  + \", \"\n                  + startDate\n                  + \", \"\n                  + endDate);\n          throw new CaldavDataAccessException(e);\n        } finally {\n          quietlyConsume(entity);\n        }\n      }\n    } else {\n      log.debug(\"experimental feature 'Availability Schedule reflection' disabled\");\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2350, "initialization": ["HttpUriRequest request = createGETRequest(String,HashMap<String, String>)"], "initializationStart": [379], "initializationEnd": [467], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 498, "focalAPIEnd": 525, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [559], "useEnd": [579], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biafra23/AmDroid/tree/master/AmenLib/src/main/java/com.jaeckel/amenoid/api/AmenServiceImpl.java", "rawCode": "  public List<User> following(Long id) throws IOException {\n\n    List<User> result = new ArrayList<User>();\n    log.debug(\"followers()\");\n    HashMap<String, String> params = createAuthenticatedParams();\n    // params.put(\"limit\", \"\" + 40);\n    // params.put(\"last_user_id\", \"\" + 11181);\n    // https://getamen.com/users/12665/followers.json\n    HttpUriRequest httpGet =\n        RequestFactory.createGETRequest(serviceUrl + \"/users/\" + id + \"/following.json\", params);\n\n    HttpResponse response = httpclient.execute(httpGet);\n    HttpEntity responseEntity = response.getEntity();\n\n    final String responseString = EntityUtils.toString(responseEntity, \"UTF-8\");\n\n    Type collectionType = new TypeToken<Collection<User>>() {}.getType();\n    result = gson.fromJson(responseString, collectionType);\n\n    return result;\n  }\n"}, {"dataset": "execute", "exampleID": 2351, "initialization": ["HttpClient httpClient = getNewHttpClient(Context)", "HttpUriRequest request = new HttpDelete(String)"], "initializationStart": [222, 1456], "initializationEnd": [247, 1475], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new WeiboException(*)"], "tryExpressionStart": 190, "tryExpressionEnd": 194, "tryBlockStart": 190, "tryBlockEnd": 2012, "catchExpressionStart": 1948, "catchExpressionEnd": 1970, "catchBlockStart": 1948, "catchBlockEnd": 2012, "exceptionHandlingCallStart": [1984], "exceptionHandlingCallEnd": [2005], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1569, "focalAPIEnd": 1592, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "read(response)", "read(response)"], "useStart": [1620, 1742, 1905], "useEnd": [1644, 1756, 1919], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shangrz/noticeUEFA/tree/master/src/com/weibo/net/Utility.java", "rawCode": "  public static String openUrl(\n      Context context, String url, String method, WeiboParameters params, String file, Token token)\n      throws WeiboException {\n    String result = \"\";\n    try {\n      HttpClient client = getNewHttpClient(context);\n      HttpUriRequest request = null;\n      ByteArrayOutputStream bos = null;\n      if (method.equals(\"GET\")) {\n        url = url + \"?\" + encodeUrl(params);\n        HttpGet get = new HttpGet(url);\n        request = get;\n      } else if (method.equals(\"POST\")) {\n        HttpPost post = new HttpPost(url);\n        byte[] data = null;\n        bos = new ByteArrayOutputStream(1024 * 50);\n        if (!TextUtils.isEmpty(file)) {\n          Utility.paramToUpload(bos, params);\n          post.setHeader(\"Content-Type\", MULTIPART_FORM_DATA + \"; boundary=\" + BOUNDARY);\n          Bitmap bf = BitmapFactory.decodeFile(file);\n\n          Utility.imageContentToUpload(bos, bf);\n\n        } else {\n          post.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n          String postParam = encodeParameters(params);\n          data = postParam.getBytes(\"UTF-8\");\n          bos.write(data);\n        }\n        data = bos.toByteArray();\n        bos.close();\n        // UrlEncodedFormEntity entity = getPostParamters(params);\n        ByteArrayEntity formEntity = new ByteArrayEntity(data);\n        post.setEntity(formEntity);\n        request = post;\n      } else if (method.equals(\"DELETE\")) {\n        request = new HttpDelete(url);\n      }\n      setHeader(method, request, params, url, token);\n      HttpResponse response = client.execute(request);\n      StatusLine status = response.getStatusLine();\n      int statusCode = status.getStatusCode();\n\n      if (statusCode != 200) {\n        result = read(response);\n        throw new WeiboException(String.format(status.toString()), statusCode);\n      }\n      // parse content stream from response\n      result = read(response);\n      return result;\n    } catch (IOException e) {\n      throw new WeiboException(e);\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2352, "initialization": ["HttpClient httpClient = createHttpClient()", "HttpUriRequest request = new HttpGet(String)"], "initializationStart": [912, 986], "initializationEnd": [948, 1012], "hasTryCatch": 1, "exceptionType": "UnknownHostException", "exceptionHandlingCall": ["Logger.warn(String)", "new CantContinueException(*)"], "tryExpressionStart": 345, "tryExpressionEnd": 349, "tryBlockStart": 345, "tryBlockEnd": 3081, "catchExpressionStart": 2224, "catchExpressionEnd": 2261, "catchBlockStart": 2224, "catchBlockEnd": 2452, "exceptionHandlingCallStart": [2323, 2415], "exceptionHandlingCallEnd": [2399, 2443], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1052, "focalAPIEnd": 1072, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getEntity()"], "useStart": [1165, 1393], "useEnd": [1189, 1413], "hasFinally": 1, "cleanUpCall": ["closeStream(InputStream)", "closeStream(OutputStream)"], "finallyExpressionStart": 2989, "finallyExpressionEnd": 2997, "finallyBlockStart": 2989, "finallyBlockEnd": 3081, "cleanUpCallStart": [3007, 3044], "cleanUpCallEnd": [3034, 3072], "url": "https://github.com/manimaul/osmdroid/tree/master/osmdroid-android/src/main/java/org/osmdroid/tileprovider/modules/MapTileDownloader.java", "rawCode": "    @Override\n    public Drawable loadTile(final MapTileRequestState aState) throws CantContinueException {\n\n      OnlineTileSourceBase tileSource = mTileSource.get();\n      if (tileSource == null) {\n        return null;\n      }\n\n      InputStream in = null;\n      OutputStream out = null;\n      final MapTile tile = aState.getMapTile();\n\n      try {\n\n        if (mNetworkAvailablityCheck != null && !mNetworkAvailablityCheck.getNetworkAvailable()) {\n          if (DEBUGMODE) {\n            logger.debug(\"Skipping \" + getName() + \" due to NetworkAvailabliltyCheck.\");\n          }\n          return null;\n        }\n\n        final String tileURLString = tileSource.getTileURLString(tile);\n\n        if (DEBUGMODE) {\n          logger.debug(\"Downloading Maptile from url: \" + tileURLString);\n        }\n\n        if (TextUtils.isEmpty(tileURLString)) {\n          return null;\n        }\n\n        final HttpClient client = HttpClientFactory.createHttpClient();\n        final HttpUriRequest head = new HttpGet(tileURLString);\n        final HttpResponse response = client.execute(head);\n\n        // Check to see if we got success\n        final org.apache.http.StatusLine line = response.getStatusLine();\n        if (line.getStatusCode() != 200) {\n          logger.warn(\"Problem downloading MapTile: \" + tile + \" HTTP response: \" + line);\n          return null;\n        }\n\n        final HttpEntity entity = response.getEntity();\n        if (entity == null) {\n          logger.warn(\"No content downloading MapTile: \" + tile);\n          return null;\n        }\n        in = entity.getContent();\n\n        final ByteArrayOutputStream dataStream = new ByteArrayOutputStream();\n        out = new BufferedOutputStream(dataStream, StreamUtils.IO_BUFFER_SIZE);\n        StreamUtils.copy(in, out);\n        out.flush();\n        final byte[] data = dataStream.toByteArray();\n        final ByteArrayInputStream byteStream = new ByteArrayInputStream(data);\n\n        // Save the data to the filesystem cache\n        if (mFilesystemCache != null) {\n          mFilesystemCache.saveFile(tileSource, tile, byteStream);\n          byteStream.reset();\n        }\n        final Drawable result = tileSource.getDrawable(byteStream);\n\n        return result;\n      } catch (final UnknownHostException e) {\n        // no network connection so empty the queue\n        logger.warn(\"UnknownHostException downloading MapTile: \" + tile + \" : \" + e);\n        throw new CantContinueException(e);\n      } catch (final LowMemoryException e) {\n        // low memory so empty the queue\n        logger.warn(\"LowMemoryException downloading MapTile: \" + tile + \" : \" + e);\n        throw new CantContinueException(e);\n      } catch (final FileNotFoundException e) {\n        logger.warn(\"Tile not found: \" + tile + \" : \" + e);\n      } catch (final IOException e) {\n        logger.warn(\"IOException downloading MapTile: \" + tile + \" : \" + e);\n      } catch (final Throwable e) {\n        logger.error(\"Error downloading MapTile: \" + tile, e);\n      } finally {\n        StreamUtils.closeStream(in);\n        StreamUtils.closeStream(out);\n      }\n\n      return null;\n    }\n"}, {"dataset": "execute", "exampleID": 2353, "initialization": ["HttpRequest request = doWithMethod(HttpPut,ICalendarAccount)", "HttpContext context = constructHttpContext(ICalendarAccount)"], "initializationStart": [486, 709], "initializationEnd": [541, 741], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(target,request,context)", "focalAPIStart": 814, "focalAPIEnd": 867, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()", "response.getStatusLine()"], "useStart": [884, 1056], "useEnd": [904, 1080], "hasFinally": 1, "cleanUpCall": ["consume(HttpEntity)"], "finallyExpressionStart": 1187, "finallyExpressionEnd": 1195, "finallyBlockStart": 1187, "finallyBlockEnd": 1237, "cleanUpCallStart": [1203], "cleanUpCallEnd": [1230], "url": "https://github.com/Jasig/sched-assist/tree/master/sched-assist-spi-caldav/src/main/java/org/jasig/schedassist/impl/caldav/CaldavCalendarDataDaoImpl.java", "rawCode": "  /**\n   * Update an existing event using CalDAV PUT.\n   *\n   * @param eventOwner\n   * @param event\n   * @param etag\n   * @return\n   * @throws HttpException\n   * @throws IOException\n   */\n  protected int putExistingEvent(ICalendarAccount eventOwner, VEvent event, String etag)\n      throws IOException {\n    String uri = generateEventUri(eventOwner, event);\n\n    HttpPut method = constructPutMethod(uri, event);\n    method.addHeader(IF_MATCH_HEADER, etag);\n\n    HttpRequest toExecute = this.methodInterceptor.doWithMethod(method, eventOwner);\n    if (log.isDebugEnabled()) {\n      log.debug(\"putExistingEvent executing \" + methodToString(method) + \" for \" + eventOwner);\n    }\n    final HttpContext context = constructHttpContext(eventOwner);\n\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = this.httpClient.execute(httpHost, toExecute, context);\n      entity = response.getEntity();\n      if (log.isDebugEnabled()) {\n        log.debug(\n            \"putExistingEvent response entity is null, response status line: \"\n                + response.getStatusLine());\n      }\n      int statusCode = response.getStatusLine().getStatusCode();\n      return statusCode;\n    } finally {\n      EntityUtils.consume(entity);\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2354, "initialization": ["HttpUriRequest request = createHttpRequest(Request<?>,Map<String, String>)"], "initializationStart": [186], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getParams()"], "configurationStart": [395], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 738, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/romansl/volley/tree/master/src/com/android/volley/toolbox/HttpClientStack.java", "rawCode": "  @Override\n  public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)\n      throws IOException, AuthFailureError {\n    HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);\n    addHeaders(httpRequest, additionalHeaders);\n    addHeaders(httpRequest, request.getHeaders());\n    onPrepareRequest(httpRequest);\n    HttpParams httpParams = httpRequest.getParams();\n    int timeoutMs = request.getTimeoutMs();\n    // TODO: Reevaluate this connection timeout based on more wide-scale\n    // data collection and possibly different for wifi vs. 3G.\n    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);\n    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);\n    return mClient.execute(httpRequest);\n  }\n"}, {"dataset": "execute", "exampleID": 2355, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 86, "focalAPIEnd": 111, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/munjeni/miui_sony_xperia/tree/master/miui/src/frameworks/base/core/java/android/net/http/AndroidHttpClient.java", "rawCode": "  public HttpResponse execute(HttpUriRequest request) throws IOException {\n    return delegate.execute(request);\n  }\n"}, {"dataset": "execute", "exampleID": 2356, "initialization": ["HttpClient httpClient = getHttpClient(HttpServletRequest)", "HttpContext context = new BasicHttpContext()"], "initializationStart": [228, 301], "initializationEnd": [256, 323], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["new ProxyException(String,*)"], "tryExpressionStart": 262, "tryExpressionEnd": 266, "tryBlockStart": 262, "tryBlockEnd": 783, "catchExpressionStart": 586, "catchExpressionEnd": 620, "catchBlockStart": 586, "catchBlockEnd": 687, "exceptionHandlingCallStart": [634], "exceptionHandlingCallEnd": [680], "configuration": ["context.setAttribute(*,*)"], "configurationStart": [331], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request,context)", "focalAPIStart": 455, "focalAPIEnd": 504, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["handleServerResponse(HttpServletRequest,HttpServletResponse,response)"], "useStart": [512], "useEnd": [578], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/USGS-CIDA/WaterSMART/tree/master/watersmart-ui/src/main/java/gov/usgs/cida/watersmart/proxy/GeonetworkProxy.java", "rawCode": "  @Override\n  protected void handleServerRequest(\n      HttpServletRequest clientRequest,\n      HttpServletResponse clientResponse,\n      HttpUriRequest serverRequest)\n      throws ProxyException {\n    HttpClient serverClient = getHttpClient(clientRequest);\n    try {\n      HttpContext localContext = new BasicHttpContext();\n      localContext.setAttribute(ClientContext.COOKIE_STORE, geonetworkSession.getCookieJar());\n      HttpResponse methodReponse = serverClient.execute(serverRequest, localContext);\n      handleServerResponse(clientRequest, clientResponse, methodReponse);\n    } catch (ClientProtocolException e) {\n      throw new ProxyException(\"Client protocol error\", e);\n    } catch (IOException e) {\n      throw new ProxyException(\"I/O error on server request\", e);\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2357, "initialization": ["HttpClient httpClient = new DefaultHttpClient()", "HttpUriRequest request = getRequest(HttpMethod,String)"], "initializationStart": [165, 219], "initializationEnd": [188, 242], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpClient.getParams()", "httpClient.getParams()", "httpClient.getParams()", "httpClient.getParams()", "request.setHeader(*,*)", "request.setHeader(String,String)"], "configurationStart": [248, 370, 463, 547, 695, 1067], "configurationEnd": [279, 392, 485, 569, 748, 1122], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1778, "focalAPIEnd": 1805, "followUpCheck": "response.getStatusLine().getStatusCode() >= 400", "checkType": "IF", "followUpCheckExpressionStart": 1811, "followUpCheckExpressionEnd": 1871, "followUpCheckBlockStart": 1811, "followUpCheckBlockEnd": 2052, "use": ["toReturnValue(response,String)", "response.apache.http.HttpResponse.getStatusLine()", "toReturnValue(response,String)"], "useStart": [1908, 1980, 2064], "useEnd": [1948, 2012, 2104], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/seratch/signedrequest4j/tree/master/src/main/java/com/github/seratch/signedrequest4j/SignedRequestApacheHCImpl.java", "rawCode": "  @Override\n  public HttpResponse doRequest(String url, HttpMethod method, RequestBody body, String charset)\n      throws IOException {\n\n    HttpClient httpClient = new DefaultHttpClient();\n    HttpUriRequest request = getRequest(method, url);\n    httpClient\n        .getParams()\n        .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, connectTimeoutMillis);\n    httpClient.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT, readTimeoutMillis);\n    httpClient.getParams().setParameter(CoreProtocolPNames.USER_AGENT, USER_AGENT);\n    httpClient.getParams().setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET, charset);\n\n    for (String name : headersToOverwrite.keySet()) {\n      request.setHeader(name, headersToOverwrite.get(name));\n    }\n\n    String oAuthNonce = String.valueOf(new SecureRandom().nextLong());\n    Long oAuthTimestamp = System.currentTimeMillis() / 1000;\n    String signature = getSignature(url, method, oAuthNonce, oAuthTimestamp);\n    String authorizationHeader = getAuthorizationHeader(signature, oAuthNonce, oAuthTimestamp);\n    request.setHeader(\"Authorization\", authorizationHeader);\n\n    if (method == HttpMethod.POST) {\n      HttpPost postRequest = (HttpPost) request;\n      BasicHttpEntity entity = new BasicHttpEntity();\n      entity.setContent(new ByteArrayInputStream(body.getBody()));\n      entity.setContentType(body.getContentType());\n      postRequest.setEntity(entity);\n    } else if (method == HttpMethod.PUT) {\n      HttpPut putRequest = (HttpPut) request;\n      BasicHttpEntity entity = new BasicHttpEntity();\n      entity.setContent(new ByteArrayInputStream(body.getBody()));\n      entity.setContentType(body.getContentType());\n      putRequest.setEntity(entity);\n    }\n\n    org.apache.http.HttpResponse apacheHCResponse = httpClient.execute(request);\n    if (apacheHCResponse.getStatusLine().getStatusCode() >= 400) {\n      HttpResponse httpResponse = toReturnValue(apacheHCResponse, charset);\n      throw new HttpException(apacheHCResponse.getStatusLine().getReasonPhrase(), httpResponse);\n    }\n    return toReturnValue(apacheHCResponse, charset);\n  }\n"}, {"dataset": "execute", "exampleID": 2358, "initialization": ["HttpUriRequest request = new HttpDelete(*)", "HttpClient httpClient = getHttpClient()"], "initializationStart": [208, 367], "initializationEnd": [283, 382], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 415, "tryExpressionEnd": 419, "tryBlockStart": 415, "tryBlockEnd": 1259, "catchExpressionStart": 871, "catchExpressionEnd": 893, "catchBlockStart": 871, "catchBlockEnd": 927, "exceptionHandlingCallStart": [901], "exceptionHandlingCallEnd": [920], "configuration": ["request.getRequestLine()"], "configurationStart": [300], "configurationEnd": [324], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 468, "focalAPIEnd": 495, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["analyzeHttpStatus(response)", "readInEntity(response)"], "useStart": [503, 568], "useEnd": [530, 590], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Kaain/PaperFly/tree/master/PaperFly/src/main/java/de/fhb/mi/paperfly/service/RestConsumerSingleton.java", "rawCode": "  @Override\n  public AccountDTO removeFriend(String friendUsername) throws RestConsumerException {\n    Log.d(TAG, \"removeFriend\");\n\n    AccountDTO responseAccount = null;\n    HttpUriRequest request =\n        new HttpDelete(getConnectionURL(URL_ADD_OR_REMOVE_FRIEND + friendUsername));\n    Log.d(TAG, request.getRequestLine().toString());\n\n    HttpClient httpclient = getHttpClient();\n    HttpResponse response;\n    try {\n      consumer.sign(request);\n      response = httpclient.execute(request);\n      analyzeHttpStatus(response);\n\n      String responseObjAsString = readInEntity(response);\n\n      Gson gson =\n          new GsonBuilder().registerTypeAdapter(Date.class, new JsonDateDeserializer()).create();\n\n      responseAccount = gson.fromJson(responseObjAsString, AccountDTO.class);\n      application.setAccount(responseAccount);\n      return responseAccount;\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (OAuthExpectationFailedException e) {\n      e.printStackTrace();\n    } catch (OAuthCommunicationException e) {\n      e.printStackTrace();\n    } catch (OAuthMessageSignerException e) {\n      e.printStackTrace();\n    } catch (OAuthNotAuthorizedException e) {\n      loginAgain();\n      return removeFriend(friendUsername);\n    }\n    return null;\n  }\n"}, {"dataset": "execute", "exampleID": 2359, "initialization": ["HttpUriRequest request = convertRequest(HTTPRequest)"], "initializationStart": [124], "initializationEnd": [147], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 177, "focalAPIEnd": 208, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["convertResponse(HttpUriRequest,response)"], "useStart": [221], "useEnd": [259], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codehaus/httpcache4j/tree/master/resolvers/resolvers-httpcomponents-httpclient/src/main/java/org/codehaus/httpcache4j/resolver/HTTPClientResponseResolver.java", "rawCode": "  @Override\n  protected HTTPResponse resolveImpl(HTTPRequest request) throws IOException {\n    HttpUriRequest realRequest = convertRequest(request);\n    HttpResponse response = httpClient.execute(realRequest);\n    return convertResponse(realRequest, response);\n  }\n"}, {"dataset": "execute", "exampleID": 2360, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 293, "focalAPIEnd": 316, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpClient.execute(HttpUriRequest,HttpContext)", "response.getEntity()"], "useStart": [354, 430], "useEnd": [391, 456], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/USGS-CIDA/nude/tree/master/nude/src/main/java/gov/usgs/cida/nude/connector/http/AbstractHttpConnector.java", "rawCode": "  protected static HttpEntity makeCall(\n      HttpClient httpClient, HttpUriRequest req, HttpContext localContext)\n      throws ClientProtocolException, IOException {\n    HttpEntity result = null;\n\n    HttpResponse methodResponse = null;\n    if (null == localContext) {\n      methodResponse = httpClient.execute(req);\n    } else {\n      methodResponse = httpClient.execute(req, localContext);\n    }\n\n    HttpEntity methodEntity = methodResponse.getEntity();\n    result = methodEntity;\n\n    return result;\n  }\n"}, {"dataset": "execute", "exampleID": 2361, "initialization": ["HttpClient httpClient = createHttpClient()", "HttpUriRequest request = new HttpGet(String)"], "initializationStart": [912, 986], "initializationEnd": [948, 1012], "hasTryCatch": 1, "exceptionType": "UnknownHostException", "exceptionHandlingCall": ["Logger.warn(String)", "new CantContinueException(*)"], "tryExpressionStart": 345, "tryExpressionEnd": 349, "tryBlockStart": 345, "tryBlockEnd": 3081, "catchExpressionStart": 2224, "catchExpressionEnd": 2261, "catchBlockStart": 2224, "catchBlockEnd": 2452, "exceptionHandlingCallStart": [2323, 2415], "exceptionHandlingCallEnd": [2399, 2443], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1052, "focalAPIEnd": 1072, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getEntity()"], "useStart": [1165, 1393], "useEnd": [1189, 1413], "hasFinally": 1, "cleanUpCall": ["closeStream(InputStream)", "closeStream(OutputStream)"], "finallyExpressionStart": 2989, "finallyExpressionEnd": 2997, "finallyBlockStart": 2989, "finallyBlockEnd": 3081, "cleanUpCallStart": [3007, 3044], "cleanUpCallEnd": [3034, 3072], "url": "https://github.com/illarionov/OsmDroid/tree/master/osmdroid-android/src/main/java/org/osmdroid/tileprovider/modules/MapTileDownloader.java", "rawCode": "    @Override\n    public Drawable loadTile(final MapTileRequestState aState) throws CantContinueException {\n\n      OnlineTileSourceBase tileSource = mTileSource.get();\n      if (tileSource == null) {\n        return null;\n      }\n\n      InputStream in = null;\n      OutputStream out = null;\n      final MapTile tile = aState.getMapTile();\n\n      try {\n\n        if (mNetworkAvailablityCheck != null && !mNetworkAvailablityCheck.getNetworkAvailable()) {\n          if (DEBUGMODE) {\n            logger.debug(\"Skipping \" + getName() + \" due to NetworkAvailabliltyCheck.\");\n          }\n          return null;\n        }\n\n        final String tileURLString = tileSource.getTileURLString(tile);\n\n        if (DEBUGMODE) {\n          logger.debug(\"Downloading Maptile from url: \" + tileURLString);\n        }\n\n        if (TextUtils.isEmpty(tileURLString)) {\n          return null;\n        }\n\n        final HttpClient client = HttpClientFactory.createHttpClient();\n        final HttpUriRequest head = new HttpGet(tileURLString);\n        final HttpResponse response = client.execute(head);\n\n        // Check to see if we got success\n        final org.apache.http.StatusLine line = response.getStatusLine();\n        if (line.getStatusCode() != 200) {\n          logger.warn(\"Problem downloading MapTile: \" + tile + \" HTTP response: \" + line);\n          return null;\n        }\n\n        final HttpEntity entity = response.getEntity();\n        if (entity == null) {\n          logger.warn(\"No content downloading MapTile: \" + tile);\n          return null;\n        }\n        in = entity.getContent();\n\n        final ByteArrayOutputStream dataStream = new ByteArrayOutputStream();\n        out = new BufferedOutputStream(dataStream, StreamUtils.IO_BUFFER_SIZE);\n        StreamUtils.copy(in, out);\n        out.flush();\n        final byte[] data = dataStream.toByteArray();\n        final ByteArrayInputStream byteStream = new ByteArrayInputStream(data);\n\n        // Save the data to the filesystem cache\n        if (mFilesystemCache != null) {\n          mFilesystemCache.saveFile(tileSource, tile, byteStream);\n          byteStream.reset();\n        }\n        final Drawable result = tileSource.getDrawable(byteStream);\n\n        return result;\n      } catch (final UnknownHostException e) {\n        // no network connection so empty the queue\n        logger.warn(\"UnknownHostException downloading MapTile: \" + tile + \" : \" + e);\n        throw new CantContinueException(e);\n      } catch (final LowMemoryException e) {\n        // low memory so empty the queue\n        logger.warn(\"LowMemoryException downloading MapTile: \" + tile + \" : \" + e);\n        throw new CantContinueException(e);\n      } catch (final FileNotFoundException e) {\n        logger.warn(\"Tile not found: \" + tile + \" : \" + e);\n      } catch (final IOException e) {\n        logger.warn(\"IOException downloading MapTile: \" + tile + \" : \" + e);\n      } catch (final Throwable e) {\n        logger.error(\"Error downloading MapTile: \" + tile, e);\n      } finally {\n        StreamUtils.closeStream(in);\n        StreamUtils.closeStream(out);\n      }\n\n      return null;\n    }\n"}, {"dataset": "execute", "exampleID": 2362, "initialization": ["HttpClient httpClient = new DefaultHttpClient()", "HttpUriRequest request = new HttpGet(String)"], "initializationStart": [284, 341], "initializationEnd": [307, 360], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 393, "tryExpressionEnd": 397, "tryBlockStart": 393, "tryBlockEnd": 1046, "catchExpressionStart": 915, "catchExpressionEnd": 937, "catchBlockStart": 915, "catchBlockEnd": 971, "exceptionHandlingCallStart": [945], "exceptionHandlingCallEnd": [964], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 429, "focalAPIEnd": 459, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()", "response.getStatusLine()"], "useStart": [498, 538], "useEnd": [518, 562], "hasFinally": 1, "cleanUpCall": ["HttpUriRequest.abort()"], "finallyExpressionStart": 972, "finallyExpressionEnd": 980, "finallyBlockStart": 972, "finallyBlockEnd": 1046, "cleanUpCallStart": [1021], "cleanUpCallEnd": [1039], "url": "https://github.com/Netflix/ribbon/tree/master/ribbon-httpclient/src/main/java/com/netflix/loadbalancer/PingUrl.java", "rawCode": "  public boolean isAlive(Server server) {\n    String urlStr = \"\";\n    if (isSecure) {\n      urlStr = \"https://\";\n    } else {\n      urlStr = \"http://\";\n    }\n    urlStr += server.getId();\n    urlStr += getPingAppendString();\n\n    boolean isAlive = false;\n\n    HttpClient httpClient = new DefaultHttpClient();\n    HttpUriRequest getRequest = new HttpGet(urlStr);\n    String content = null;\n    try {\n      HttpResponse response = httpClient.execute(getRequest);\n      content = EntityUtils.toString(response.getEntity());\n      isAlive = (response.getStatusLine().getStatusCode() == 200);\n      if (getExpectedContent() != null) {\n        LOGGER.debug(\"content:\" + content);\n        if (content == null) {\n          isAlive = false;\n        } else {\n          if (content.equals(getExpectedContent())) {\n            isAlive = true;\n          } else {\n            isAlive = false;\n          }\n        }\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      // Release the connection.\n      getRequest.abort();\n    }\n\n    return isAlive;\n  }\n"}, {"dataset": "execute", "exampleID": 2363, "initialization": ["HttpClient httpClient = new DefaultHttpClient()", "HttpUriRequest request = new HttpGet(String)"], "initializationStart": [855, 916], "initializationEnd": [878, 942], "hasTryCatch": 1, "exceptionType": "UnknownHostException", "exceptionHandlingCall": ["Logger.warn(String)", "new CantContinueException(*)"], "tryExpressionStart": 287, "tryExpressionEnd": 291, "tryBlockStart": 287, "tryBlockEnd": 3013, "catchExpressionStart": 2156, "catchExpressionEnd": 2193, "catchBlockStart": 2156, "catchBlockEnd": 2384, "exceptionHandlingCallStart": [2255, 2347], "exceptionHandlingCallEnd": [2331, 2375], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 982, "focalAPIEnd": 1002, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getEntity()"], "useStart": [1095, 1323], "useEnd": [1119, 1343], "hasFinally": 1, "cleanUpCall": ["closeStream(InputStream)", "closeStream(OutputStream)"], "finallyExpressionStart": 2921, "finallyExpressionEnd": 2929, "finallyBlockStart": 2921, "finallyBlockEnd": 3013, "cleanUpCallStart": [2939, 2976], "cleanUpCallEnd": [2966, 3004], "url": "https://github.com/kops/osmdroid-itinerennes/tree/master/osmdroid-android/src/main/java/org/osmdroid/tileprovider/modules/MapTileDownloader.java", "rawCode": "    @Override\n    public Drawable loadTile(final MapTileRequestState aState) throws CantContinueException {\n\n      if (mTileSource == null) {\n        return null;\n      }\n\n      InputStream in = null;\n      OutputStream out = null;\n      final MapTile tile = aState.getMapTile();\n\n      try {\n\n        if (mNetworkAvailablityCheck != null && !mNetworkAvailablityCheck.getNetworkAvailable()) {\n          if (DEBUGMODE) {\n            logger.debug(\"Skipping \" + getName() + \" due to NetworkAvailabliltyCheck.\");\n          }\n          return null;\n        }\n\n        final String tileURLString = mTileSource.getTileURLString(tile);\n\n        if (DEBUGMODE) {\n          logger.debug(\"Downloading Maptile from url: \" + tileURLString);\n        }\n\n        if (TextUtils.isEmpty(tileURLString)) {\n          return null;\n        }\n\n        final HttpClient client = new DefaultHttpClient();\n        final HttpUriRequest head = new HttpGet(tileURLString);\n        final HttpResponse response = client.execute(head);\n\n        // Check to see if we got success\n        final org.apache.http.StatusLine line = response.getStatusLine();\n        if (line.getStatusCode() != 200) {\n          logger.warn(\"Problem downloading MapTile: \" + tile + \" HTTP response: \" + line);\n          return null;\n        }\n\n        final HttpEntity entity = response.getEntity();\n        if (entity == null) {\n          logger.warn(\"No content downloading MapTile: \" + tile);\n          return null;\n        }\n        in = entity.getContent();\n\n        final ByteArrayOutputStream dataStream = new ByteArrayOutputStream();\n        out = new BufferedOutputStream(dataStream, StreamUtils.IO_BUFFER_SIZE);\n        StreamUtils.copy(in, out);\n        out.flush();\n        final byte[] data = dataStream.toByteArray();\n        final ByteArrayInputStream byteStream = new ByteArrayInputStream(data);\n\n        // Save the data to the filesystem cache\n        if (mFilesystemCache != null) {\n          mFilesystemCache.saveFile(mTileSource, tile, byteStream);\n          byteStream.reset();\n        }\n        final Drawable result = mTileSource.getDrawable(byteStream);\n\n        return result;\n      } catch (final UnknownHostException e) {\n        // no network connection so empty the queue\n        logger.warn(\"UnknownHostException downloading MapTile: \" + tile + \" : \" + e);\n        throw new CantContinueException(e);\n      } catch (final LowMemoryException e) {\n        // low memory so empty the queue\n        logger.warn(\"LowMemoryException downloading MapTile: \" + tile + \" : \" + e);\n        throw new CantContinueException(e);\n      } catch (final FileNotFoundException e) {\n        logger.warn(\"Tile not found: \" + tile + \" : \" + e);\n      } catch (final IOException e) {\n        logger.warn(\"IOException downloading MapTile: \" + tile + \" : \" + e);\n      } catch (final Throwable e) {\n        logger.error(\"Error downloading MapTile: \" + tile, e);\n      } finally {\n        StreamUtils.closeStream(in);\n        StreamUtils.closeStream(out);\n      }\n\n      return null;\n    }\n"}, {"dataset": "execute", "exampleID": 2364, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 239, "focalAPIEnd": 262, "followUpCheck": "isAuthError(response.getStatusLine().getStatusCode())", "checkType": "IF", "followUpCheckExpressionStart": 320, "followUpCheckExpressionEnd": 440, "followUpCheckBlockStart": 320, "followUpCheckBlockEnd": 519, "use": ["new EasResponse(response)"], "useStart": [289], "useEnd": [314], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Exchange/tree/master/exchange2/src/com/android/exchange/EasResponse.java", "rawCode": "  public static EasResponse fromHttpRequest(\n      EmailClientConnectionManager connManager, HttpClient client, HttpUriRequest request)\n      throws IOException {\n\n    long reqTime = System.currentTimeMillis();\n    HttpResponse response = client.execute(request);\n    EasResponse result = new EasResponse(response);\n    if (isAuthError(response.getStatusLine().getStatusCode())\n        && connManager.hasDetectedUnsatisfiedCertReq(reqTime)) {\n      result.mClientCertRequested = true;\n      result.mClosed = true;\n    }\n\n    return result;\n  }\n"}, {"dataset": "execute", "exampleID": 2365, "initialization": ["HttpUriRequest request = AsyncHttpRequest.getRequest()", "HttpClient httpClient = HttpClientFactory.getClient()"], "initializationStart": [268, 1452], "initializationEnd": [288, 1477], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getAllHeaders()"], "configurationStart": [602], "configurationEnd": [629], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1516, "focalAPIEnd": 1543, "followUpCheck": "httpUtils.isHttpError(response)", "checkType": "IF", "followUpCheckExpressionStart": 1854, "followUpCheckExpressionEnd": 1894, "followUpCheckBlockStart": 1854, "followUpCheckBlockEnd": 2370, "use": ["AsyncHttpResponse.setResponse(response)", "response.getEntity()", "response.getStatusLine()"], "useStart": [1554, 1817, 2029], "useEnd": [1588, 1841, 2057], "hasFinally": 1, "cleanUpCall": ["closeEntity(HttpEntity)"], "finallyExpressionStart": 2381, "finallyExpressionEnd": 2389, "finallyBlockStart": 2381, "finallyBlockEnd": 2431, "cleanUpCallStart": [2401], "cleanUpCallEnd": [2420], "url": "https://github.com/socialize/socialize-sdk-android/tree/master/sdk/src/com/socialize/net/AsyncHttpRequestProcessor.java", "rawCode": "  @Override\n  protected AsyncHttpResponse doInBackground(AsyncHttpRequest... params) {\n\n    AsyncHttpRequest request = params[0];\n    AsyncHttpResponse response = new AsyncHttpResponse();\n    response.setRequest(request);\n\n    try {\n      HttpUriRequest httpRequest = request.getRequest();\n\n      if (!clientFactory.isDestroyed()) {\n        if (logger != null && logger.isDebugEnabled()) {\n          logger.debug(\n              \"Request: \" + httpRequest.getMethod() + \" \" + httpRequest.getRequestLine().getUri());\n\n          StringBuilder builder = new StringBuilder();\n          Header[] allHeaders = httpRequest.getAllHeaders();\n\n          for (Header header : allHeaders) {\n            builder.append(header.getName());\n            builder.append(\":\");\n            builder.append(header.getValue());\n            builder.append(\"\\n\");\n          }\n\n          logger.debug(\n              \"REQUEST \\nurl:[\"\n                  + httpRequest.getURI().toString()\n                  + \"] \\nheaders:\\n\"\n                  + builder.toString());\n\n          if (httpRequest instanceof HttpPost) {\n            HttpPost post = (HttpPost) httpRequest;\n            HttpEntity entity = post.getEntity();\n\n            if (!(entity instanceof MultipartEntity)) {\n              String requestData = ioUtils.readSafe(entity.getContent());\n              logger.debug(\"REQUEST \\ndata:[\" + requestData + \"]\");\n            }\n          }\n        }\n\n        HttpClient client = clientFactory.getClient();\n\n        HttpResponse httpResponse = client.execute(httpRequest);\n\n        response.setResponse(httpResponse);\n\n        if (logger != null && logger.isDebugEnabled()) {\n          logger.debug(\"RESPONSE CODE: \" + httpResponse.getStatusLine().getStatusCode());\n        }\n\n        HttpEntity entity = null;\n\n        try {\n          entity = httpResponse.getEntity();\n\n          if (httpUtils.isHttpError(httpResponse)) {\n            String msg = ioUtils.readSafe(entity.getContent());\n            throw new SocializeApiError(\n                httpUtils, httpResponse.getStatusLine().getStatusCode(), msg);\n          } else {\n            String responseData = ioUtils.readSafe(entity.getContent());\n\n            if (logger != null && logger.isDebugEnabled()) {\n              logger.debug(\"RESPONSE: \" + responseData);\n            }\n\n            response.setResponseData(responseData);\n          }\n        } finally {\n          closeEntity(entity);\n        }\n      } else {\n        throw new SocializeException(\n            \"Cannot execute http request. HttpClient factory was destroyed.\");\n      }\n    } catch (Exception e) {\n      response.setError(e);\n    }\n\n    return response;\n  }\n"}, {"dataset": "execute", "exampleID": 2366, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(target,request,context)", "focalAPIStart": 160, "focalAPIEnd": 195, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["expect(response)", "replay(httpClient)", "verify(httpClient)"], "useStart": [153, 214, 295], "useEnd": [196, 233, 314], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Comcast/jrugged/tree/master/jrugged-httpclient/src/test/java/org/fishwife/jrugged/httpclient/TestFailureHandlingHttpClient.java", "rawCode": "  @Test\n  public void returnsEnclosedResponseOnUnsuccessfulException() throws Exception {\n    Exception e = new UnsuccessfulResponseException(resp);\n    expect(mockBackend.execute(host, req, ctx)).andThrow(e);\n    replay(mockBackend);\n    HttpResponse result = impl.execute(host, req, ctx);\n    verify(mockBackend);\n    assertSame(resp, result);\n  }\n"}, {"dataset": "execute", "exampleID": 2367, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 380, "focalAPIEnd": 403, "followUpCheck": "response.getStatusLine().getStatusCode() == 401", "checkType": "IF", "followUpCheckExpressionStart": 409, "followUpCheckExpressionEnd": 461, "followUpCheckBlockStart": 409, "followUpCheckBlockEnd": 801, "use": ["httpClient.execute(HttpUriRequest)"], "useStart": [771], "useEnd": [794], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ajhalbleib/aicg/tree/master/appinventor/components/src/com/google/appinventor/components/runtime/util/ClientLoginHelper.java", "rawCode": "  /**\n   * Wraps an HttpClient.execute() to manage the authorization headers. This will add the proper\n   * Authorization header, and retry if the auth token has expired.\n   */\n  @Override\n  public HttpResponse execute(HttpUriRequest request) throws ClientProtocolException, IOException {\n    initialize();\n    addGoogleAuthHeader(request, authToken);\n    HttpResponse response = client.execute(request);\n    if (response.getStatusLine().getStatusCode() == 401) {\n      Log.i(LOG_TAG, \"Invalid token: \" + authToken);\n      accountManager.invalidateAuthToken(ACCOUNT_TYPE, authToken);\n      authToken = getAuthToken();\n      removeGoogleAuthHeaders(request);\n      addGoogleAuthHeader(request, authToken);\n      Log.i(LOG_TAG, \"new token: \" + authToken);\n      response = client.execute(request);\n    }\n    return response;\n  }\n"}, {"dataset": "execute", "exampleID": 2368, "initialization": ["HttpClient httpClient = getNewHttpClient()", "HttpUriRequest request = new HttpDelete(String)"], "initializationStart": [384, 1896], "initializationEnd": [402, 1915], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new WeiboException(*)"], "tryExpressionStart": 352, "tryExpressionEnd": 356, "tryBlockStart": 352, "tryBlockEnd": 2352, "catchExpressionStart": 2288, "catchExpressionEnd": 2310, "catchBlockStart": 2288, "catchBlockEnd": 2352, "exceptionHandlingCallStart": [2324], "exceptionHandlingCallEnd": [2345], "configuration": ["httpClient.getParams()"], "configurationStart": [487], "configurationEnd": [505], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1955, "focalAPIEnd": 1978, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "readHttpResponse(response)", "readHttpResponse(response)"], "useStart": [2006, 2128, 2233], "useEnd": [2030, 2154, 2259], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PaperAirplane-Dev-Team/Music-Share-Android/tree/master/src/com/weibo/sdk/android/net/HttpManager.java", "rawCode": "  /**\n   * @param url 服务器地址\n   * @param method \"GET\"or “POST”\n   * @param params 存放参数的容器\n   * @param file 文件路径，如果 是发送带有照片的微博的话，此参数为图片在sdcard里的绝对路径\n   * @return 响应结果\n   * @throws WeiboException\n   */\n  public static String openUrl(String url, String method, WeiboParameters params, String file)\n      throws WeiboException {\n    String result = \"\";\n    try {\n      HttpClient client = getNewHttpClient();\n      HttpUriRequest request = null;\n      ByteArrayOutputStream bos = null;\n      client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, NetStateManager.getAPN());\n      if (method.equals(HTTPMETHOD_GET)) {\n        url = url + \"?\" + Utility.encodeUrl(params);\n        HttpGet get = new HttpGet(url);\n        request = get;\n      } else if (method.equals(HTTPMETHOD_POST)) {\n        HttpPost post = new HttpPost(url);\n        request = post;\n        byte[] data = null;\n        String _contentType = params.getValue(\"content-type\");\n\n        bos = new ByteArrayOutputStream();\n        if (!TextUtils.isEmpty(file)) {\n          paramToUpload(bos, params);\n          post.setHeader(\"Content-Type\", MULTIPART_FORM_DATA + \"; boundary=\" + BOUNDARY);\n          Utility.UploadImageUtils.revitionPostImageSize(file);\n          imageContentToUpload(bos, file);\n        } else {\n          if (_contentType != null) {\n            params.remove(\"content-type\");\n            post.setHeader(\"Content-Type\", _contentType);\n          } else {\n            post.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n          }\n\n          String postParam = Utility.encodeParameters(params);\n          data = postParam.getBytes(\"UTF-8\");\n          bos.write(data);\n        }\n        data = bos.toByteArray();\n        bos.close();\n        ByteArrayEntity formEntity = new ByteArrayEntity(data);\n        post.setEntity(formEntity);\n      } else if (method.equals(\"DELETE\")) {\n        request = new HttpDelete(url);\n      }\n      HttpResponse response = client.execute(request);\n      StatusLine status = response.getStatusLine();\n      int statusCode = status.getStatusCode();\n\n      if (statusCode != 200) {\n        result = readHttpResponse(response);\n        throw new WeiboException(result, statusCode);\n      }\n      result = readHttpResponse(response);\n      return result;\n    } catch (IOException e) {\n      throw new WeiboException(e);\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2369, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 178, "focalAPIEnd": 195, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()", "response.getStatusLine()"], "useStart": [221, 487], "useEnd": [237, 507], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/FullMetal210/milton-cloud/tree/master/milton-cloud-sync/src/main/java/io/milton/sync/HttpUtils.java", "rawCode": "  public static int executeHttpWithStatus(\n      org.apache.http.client.HttpClient client, HttpUriRequest m, OutputStream out)\n      throws IOException {\n    HttpResponse resp = client.execute(m);\n    HttpEntity entity = resp.getEntity();\n    if (entity != null) {\n      InputStream in = null;\n      try {\n        in = entity.getContent();\n        if (out != null) {\n          IOUtils.copy(in, out);\n        }\n      } finally {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    return resp.getStatusLine().getStatusCode();\n  }\n"}, {"dataset": "execute", "exampleID": 2370, "initialization": ["HttpHost target = getCanonicalHost(HttpHost)", "HttpClient httpClient = Map<HttpHost, HttpClient>.get(HttpHost)", "HttpClient httpClient = new ServiceWrappedHttpClient(*,ServiceWrapper)"], "initializationStart": [142, 190, 330], "initializationEnd": [164, 207, 376], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["target.toHostString()"], "configurationStart": [293], "configurationEnd": [312], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(target,request,context)", "focalAPIStart": 428, "focalAPIEnd": 458, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Comcast/jrugged/tree/master/jrugged-httpclient/src/main/java/org/fishwife/jrugged/httpclient/PerHostServiceWrappedHttpClient.java", "rawCode": "  public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx)\n      throws IOException, ClientProtocolException {\n    host = getCanonicalHost(host);\n    HttpClient client = clients.get(host);\n    if (client == null) {\n      ServiceWrapper wrapper = factory.getWrapperWithName(host.toHostString());\n      client = new ServiceWrappedHttpClient(backend, wrapper);\n      clients.put(host, client);\n    }\n    return client.execute(host, req, ctx);\n  }\n"}, {"dataset": "execute", "exampleID": 2371, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 239, "focalAPIEnd": 262, "followUpCheck": "isAuthError(response.getStatusLine().getStatusCode())", "checkType": "IF", "followUpCheckExpressionStart": 320, "followUpCheckExpressionEnd": 440, "followUpCheckBlockStart": 320, "followUpCheckBlockEnd": 519, "use": ["new EasResponse(response)"], "useStart": [289], "useEnd": [314], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elbenj/ICS-Exchange/tree/master/src/com/android/exchange/EasResponse.java", "rawCode": "  public static EasResponse fromHttpRequest(\n      EmailClientConnectionManager connManager, HttpClient client, HttpUriRequest request)\n      throws IOException {\n\n    long reqTime = System.currentTimeMillis();\n    HttpResponse response = client.execute(request);\n    EasResponse result = new EasResponse(response);\n    if (isAuthError(response.getStatusLine().getStatusCode())\n        && connManager.hasDetectedUnsatisfiedCertReq(reqTime)) {\n      result.mClientCertRequested = true;\n      result.mClosed = true;\n    }\n\n    return result;\n  }\n"}, {"dataset": "execute", "exampleID": 2372, "initialization": ["HttpUriRequest request = createFinalRequest()"], "initializationStart": [526], "initializationEnd": [546], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(httpClient==null)", "guardType": "IF {", "guardExpressionStart": 360, "guardExpressionEnd": 379, "guardBlockStart": 360, "guardBlockEnd": 508, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 585, "focalAPIEnd": 608, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yuvipanda/WPSignpost/tree/master/src/de/mastacode/http/Http.java", "rawCode": "    /**\n     * Executes this request and returns the result as a {@linkplain HttpResponse} object.\n     *\n     * @return the response of this request\n     * @throws IllegalStateException if no {@link HttpClient} was specified\n     * @throws IOException if an error occurs while execution\n     */\n    public HttpResponse asResponse() throws IOException {\n      if (client == null) {\n        throw new IllegalStateException(\n            \"Please specify a HttpClient instance to use for this request.\");\n      }\n\n      request = createFinalRequest();\n\n      final HttpResponse response = client.execute(request);\n\n      return response;\n    }\n"}, {"dataset": "execute", "exampleID": 2373, "initialization": ["HttpClient httpClient = new DefaultHttpClient()"], "initializationStart": [1033], "initializationEnd": [1056], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 1183, "tryExpressionEnd": 1187, "tryBlockStart": 1183, "tryBlockEnd": 2878, "catchExpressionStart": 2457, "catchExpressionEnd": 2498, "catchBlockStart": 2457, "catchBlockEnd": 2565, "exceptionHandlingCallStart": [2508], "exceptionHandlingCallEnd": [2556], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1956, "focalAPIEnd": 1979, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [2009], "useEnd": [2029], "hasFinally": 1, "cleanUpCall": ["getName()", "getValue()", "put(*,*)"], "finallyExpressionStart": 2762, "finallyExpressionEnd": 2770, "finallyBlockStart": 2762, "finallyBlockEnd": 2878, "cleanUpCallStart": [2837, 2853, 2820], "cleanUpCallEnd": [2851, 2868, 2869], "url": "https://github.com/ggc-itec/ggc-connect/tree/master/src/edu/ggc/it/banner/Banner.java", "rawCode": "    /**\n     * Send a POST or GET request to the Banner page represented by this BannerForm using either the\n     * default value or the value set with one of the set() methods for each parameter passed to the\n     * constructor and return the resulting data as a String. After the request completes, all\n     * parameters are reset to their default values, and new requests must call the set() methods\n     * again to set the values of any parameters they need.\n     *\n     * <p>This method does not guarantee the format of the results. If any of the constructor\n     * arguments were specified incorrectly, if you try to access a page that requires a login to\n     * view, or if Banner encounters an internal error (among other things), this method may return\n     * an error page, an empty string, or whatever else the server decides to respond to the request\n     * with.\n     *\n     * @return the HTML of the response page, or an empty string if the request fails\n     */\n    public String request() {\n      HttpClient client = new DefaultHttpClient();\n      HttpUriRequest request = null;\n      BufferedReader reader = null;\n      StringBuffer ret = new StringBuffer();\n\n      try {\n        if (isPOST) {\n          HttpPost post = new HttpPost(BANNER_URL + path);\n          List<NameValuePair> parms = new ArrayList<NameValuePair>(defaultParms.length);\n          for (Map.Entry<String, String> parm : currentParms.entrySet())\n            parms.add(new BasicNameValuePair(parm.getKey(), parm.getValue()));\n          post.setEntity(new UrlEncodedFormEntity(parms));\n          request = post;\n        } else {\n          String requestPath = BANNER_URL + path + \"?\";\n          for (Map.Entry<String, String> parm : currentParms.entrySet())\n            requestPath += parm.getKey() + \"=\" + parm.getValue() + \"&\";\n          HttpGet get = new HttpGet(requestPath);\n          request = get;\n        }\n        HttpResponse response = null;\n        response = client.execute(request);\n        HttpEntity entity = response.getEntity();\n        InputStream stream = entity.getContent();\n        Header encoding = entity.getContentEncoding();\n        reader =\n            new BufferedReader(\n                new InputStreamReader(\n                    stream, (encoding == null ? \"iso-8859-1\" : encoding.getValue())));\n        for (String line = reader.readLine(); line != null; line = reader.readLine())\n          ret.append(line);\n        reader.close();\n      } catch (UnsupportedEncodingException uee) {\n        Log.e(TAG, \"Failed to send Banner request\", uee);\n      } catch (ClientProtocolException cpe) {\n        Log.e(TAG, \"Failed to send Banner request\", cpe);\n      } catch (IOException ioe) {\n        Log.e(TAG, \"Failed to send Banner request\", ioe);\n      } finally {\n        for (NameValuePair parm : defaultParms) currentParms.put(parm.getName(), parm.getValue());\n      }\n\n      return ret.toString();\n    }\n"}, {"dataset": "execute", "exampleID": 2374, "initialization": ["HttpUriRequest request = createHttpRequest(Request<?>,Map<String, String>)"], "initializationStart": [186], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getParams()"], "configurationStart": [395], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 738, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chicheng/Volley/tree/master/src/com/android/volley/toolbox/HttpClientStack.java", "rawCode": "  @Override\n  public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)\n      throws IOException, AuthFailureError {\n    HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);\n    addHeaders(httpRequest, additionalHeaders);\n    addHeaders(httpRequest, request.getHeaders());\n    onPrepareRequest(httpRequest);\n    HttpParams httpParams = httpRequest.getParams();\n    int timeoutMs = request.getTimeoutMs();\n    // TODO: Reevaluate this connection timeout based on more wide-scale\n    // data collection and possibly different for wifi vs. 3G.\n    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);\n    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);\n    return mClient.execute(httpRequest);\n  }\n"}, {"dataset": "execute", "exampleID": 2375, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.addHeader(String,String)"], "configurationStart": [103], "configurationEnd": [165], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 195, "focalAPIEnd": 223, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["checkResponse(HttpUriRequest,response)", "new ProcessedResponse(response,*)"], "useStart": [269, 237], "useEnd": [301, 302], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/palominolabs/sf-api-connector/tree/master/rest-api-connector/src/main/java/com/palominolabs/crm/sf/rest/HttpApiClient.java", "rawCode": "  @Nonnull\n  private ProcessedResponse executeRequest(HttpUriRequest request) throws IOException {\n    request.addHeader(\"Authorization\", \"OAuth \" + this.oauthToken);\n    HttpResponse response = this.client.execute(request);\n\n    return new ProcessedResponse(response, checkResponse(request, response));\n  }\n"}, {"dataset": "execute", "exampleID": 2376, "initialization": ["HttpUriRequest request = createHttpRequest(Request<?>,Map<String, String>)"], "initializationStart": [186], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getParams()"], "configurationStart": [395], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 738, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/seditionart/volley/tree/master/src/com/android/volley/toolbox/HttpClientStack.java", "rawCode": "  @Override\n  public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)\n      throws IOException, AuthFailureError {\n    HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);\n    addHeaders(httpRequest, additionalHeaders);\n    addHeaders(httpRequest, request.getHeaders());\n    onPrepareRequest(httpRequest);\n    HttpParams httpParams = httpRequest.getParams();\n    int timeoutMs = request.getTimeoutMs();\n    // TODO: Reevaluate this connection timeout based on more wide-scale\n    // data collection and possibly different for wifi vs. 3G.\n    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);\n    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);\n    return mClient.execute(httpRequest);\n  }\n"}, {"dataset": "execute", "exampleID": 2377, "initialization": ["HttpClient httpClient = new DefaultHttpClient()", "HttpUriRequest request = new HttpGet(String)"], "initializationStart": [957, 1028], "initializationEnd": [980, 1044], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new FileNotFoundException(String,*)"], "tryExpressionStart": 986, "tryExpressionEnd": 990, "tryBlockStart": 986, "tryBlockEnd": 1547, "catchExpressionStart": 1369, "catchExpressionEnd": 1396, "catchBlockStart": 1369, "catchBlockEnd": 1483, "exceptionHandlingCallStart": [1410], "exceptionHandlingCallEnd": [1476], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1082, "focalAPIEnd": 1104, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getStatusLine()", "httpClient.getConnectionManager()"], "useStart": [1135, 1321, 1500], "useEnd": [1159, 1345, 1529], "hasFinally": 1, "cleanUpCall": ["HttpClient.getConnectionManager()", "shutdown()"], "finallyExpressionStart": 1484, "finallyExpressionEnd": 1492, "finallyBlockStart": 1484, "finallyBlockEnd": 1547, "cleanUpCallStart": [1500, 1500], "cleanUpCallEnd": [1529, 1540], "url": "https://github.com/crh/escidoc-core-1.4/tree/master/om/src/main/java/de/escidoc/core/om/business/fedora/item/ItemHandlerBase.java", "rawCode": "  /**\n   * Handle a Fedora Exception thrown while uploading content.\n   *\n   * @param url The URL.\n   * @param e The Fedora Exception.\n   * @throws FileNotFoundException Thrown if access to remote resource failed.\n   * @throws FedoraSystemException Thrown if Fedora reports an error.\n   */\n  static void handleFedoraUploadError(final String url, final Exception e)\n      throws FileNotFoundException, FedoraSystemException {\n\n    final Matcher matcherErrorGetting = PATTERN_ERROR_GETTING.matcher(e.getMessage());\n    final Matcher matcherMalformedUrl = PATTERN_MALFORMED_URL.matcher(e.getMessage());\n\n    if (matcherErrorGetting.find() || matcherMalformedUrl.find()) {\n      throw new FileNotFoundException(\"Error getting content from \" + url, e);\n    }\n    if (!(url.startsWith(\"http://\") || url.startsWith(\"https://\"))) {\n      throw new FileNotFoundException(ERROR_MSG_NO_HTTP_PROTOCOL);\n    }\n    // TODO: Reuse HttpClient\n    final HttpClient client = new DefaultHttpClient();\n    try {\n      final HttpUriRequest method = new HttpGet(url);\n      final HttpResponse response = client.execute(method);\n      final int resultCode = response.getStatusLine().getStatusCode();\n      if (resultCode != HttpServletResponse.SC_OK) {\n        throw new FileNotFoundException(\n            StringUtility.format(\"Bad request. \", response.getStatusLine(), url));\n      }\n\n    } catch (final Exception e1) {\n      throw new FileNotFoundException(\"Error getting content from \" + url, e1);\n    } finally {\n      client.getConnectionManager().shutdown();\n    }\n    throw new FedoraSystemException(e);\n  }\n"}, {"dataset": "execute", "exampleID": 2378, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 85, "focalAPIEnd": 104, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/greenqloud/cyberduck/tree/master/source/ch/cyberduck/core/dropbox/client/AbstractHttpDropboxClient.java", "rawCode": "  protected HttpResponse execute(HttpUriRequest req) throws IOException {\n    return client.execute(req);\n  }\n"}, {"dataset": "execute", "exampleID": 2379, "initialization": ["HttpUriRequest request = mock(*)"], "initializationStart": [420], "initializationEnd": [446], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 531, "focalAPIEnd": 562, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["when(response)"], "useStart": [526], "useEnd": [563], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/splunk/splunk-shuttl/tree/master/test/java/com/splunk/shuttl/archiver/http/JsonRestEndpointCallerTest.java", "rawCode": "  @SuppressWarnings(\"serial\")\n  public void getJson_givenRestEndpoint_jsonContainsContentFromHttpResponse()\n      throws ClientProtocolException, IOException, JSONException {\n    Map<String, String> mapWithKeyValue =\n        new HashMap<String, String>() {\n          {\n            put(\"key\", \"value\");\n          }\n        };\n    JSONObject jsonObject = new JSONObject(mapWithKeyValue);\n\n    HttpUriRequest httpRequest = mock(HttpUriRequest.class);\n    HttpResponse response = mock(HttpResponse.class, RETURNS_DEEP_STUBS);\n    when(httpClient.execute(httpRequest)).thenReturn(response);\n    when(response.getEntity().getContent())\n        .thenReturn(new StringInputStream(jsonObject.toString()));\n\n    JSONObject actualJson = restEndpointCaller.getJson(httpRequest);\n    assertEquals(actualJson.getString(\"key\"), \"value\");\n  }\n"}, {"dataset": "execute", "exampleID": 2380, "initialization": ["HttpRequest request = ConditionalRequestBuilder.buildConditionalRequest(HttpRequest,HttpCacheEntry)"], "initializationStart": [221], "initializationEnd": [291], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(target,request,context)", "focalAPIStart": 370, "focalAPIEnd": 422, "followUpCheck": "revalidationResponseIsTooOld(response,cacheEntry)", "checkType": "IF", "followUpCheckExpressionStart": 471, "followUpCheckExpressionEnd": 533, "followUpCheckBlockStart": 471, "followUpCheckBlockEnd": 809, "use": ["httpClient.execute(HttpHost,HttpRequest,HttpContext)", "generateViaHeader(response)", "response.addHeader(String,*)", "response.getStatusLine()", "HttpCache.updateCacheEntry(HttpHost,HttpRequest,HttpCacheEntry,response,Date,Date)", "response.getEntity()", "handleBackendResponse(HttpHost,HttpRequest,Date,Date,response)"], "useStart": [716, 848, 815, 907, 1181, 2016, 2153], "useEnd": [763, 882, 883, 938, 1299, 2043, 2255], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biafra23/AmDroid/tree/master/httpclientandroidlib/src/ch/boye/httpclientandroidlib/impl/client/cache/CachingHttpClient.java", "rawCode": "  HttpResponse revalidateCacheEntry(\n      HttpHost target, HttpRequest request, HttpContext context, HttpCacheEntry cacheEntry)\n      throws IOException, ProtocolException {\n\n    HttpRequest conditionalRequest =\n        conditionalRequestBuilder.buildConditionalRequest(request, cacheEntry);\n\n    Date requestDate = getCurrentDate();\n    HttpResponse backendResponse = backend.execute(target, conditionalRequest, context);\n    Date responseDate = getCurrentDate();\n\n    if (revalidationResponseIsTooOld(backendResponse, cacheEntry)) {\n      HttpRequest unconditional =\n          conditionalRequestBuilder.buildUnconditionalRequest(request, cacheEntry);\n      requestDate = getCurrentDate();\n      backendResponse = backend.execute(target, unconditional, context);\n      responseDate = getCurrentDate();\n    }\n\n    backendResponse.addHeader(\"Via\", generateViaHeader(backendResponse));\n\n    int statusCode = backendResponse.getStatusLine().getStatusCode();\n    if (statusCode == HttpStatus.SC_NOT_MODIFIED || statusCode == HttpStatus.SC_OK) {\n      recordCacheUpdate(context);\n    }\n\n    if (statusCode == HttpStatus.SC_NOT_MODIFIED) {\n      HttpCacheEntry updatedEntry =\n          responseCache.updateCacheEntry(\n              target, request, cacheEntry, backendResponse, requestDate, responseDate);\n      if (suitabilityChecker.isConditional(request)\n          && suitabilityChecker.allConditionalsMatch(request, updatedEntry, new Date())) {\n        return responseGenerator.generateNotModifiedResponse(updatedEntry);\n      }\n      return responseGenerator.generateResponse(updatedEntry);\n    }\n\n    if (staleIfErrorAppliesTo(statusCode)\n        && !staleResponseNotAllowed(request, cacheEntry, getCurrentDate())\n        && validityPolicy.mayReturnStaleIfError(request, cacheEntry, responseDate)) {\n      final HttpResponse cachedResponse = responseGenerator.generateResponse(cacheEntry);\n      cachedResponse.addHeader(HeaderConstants.WARNING, \"110 localhost \\\"Response is stale\\\"\");\n      HttpEntity errorBody = backendResponse.getEntity();\n      if (errorBody != null) EntityUtils.consume(errorBody);\n      return cachedResponse;\n    }\n\n    return handleBackendResponse(\n        target, conditionalRequest, requestDate, responseDate, backendResponse);\n  }\n"}, {"dataset": "execute", "exampleID": 2381, "initialization": ["HttpClient httpClient = getHttpClient(*)", "HttpUriRequest request = createUriRequest(URL)"], "initializationStart": [124, 248], "initializationEnd": [209, 269], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["getMessage()", "e(String,*)"], "tryExpressionStart": 276, "tryExpressionEnd": 280, "tryBlockStart": 276, "tryBlockEnd": 1100, "catchExpressionStart": 721, "catchExpressionEnd": 755, "catchBlockStart": 721, "catchBlockEnd": 922, "exceptionHandlingCallStart": [823, 763], "exceptionHandlingCallEnd": [837, 838], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 347, "focalAPIEnd": 381, "followUpCheck": "response.getStatusLine().getStatusCode() == HttpStatus.SC_OK", "checkType": "IF", "followUpCheckExpressionStart": 390, "followUpCheckExpressionEnd": 455, "followUpCheckBlockStart": 390, "followUpCheckBlockEnd": 714, "use": ["response.getEntity()", "response.getStatusLine()"], "useStart": [500, 663], "useEnd": [520, 687], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emobc/emobc-android/tree/master/src/com/emobc/android/utils/RetreiveFileContentTask.java", "rawCode": "  @Override\n  protected String doInBackground(URL... params) {\n    URL url = params[0];\n    HttpClient httpclient =\n        HttpUtils.getHttpClient(url.getProtocol().equalsIgnoreCase(HttpUtils.HTTPS_PROTOCOL));\n\n    HttpUriRequest httpUriRequest = createUriRequest(url);\n\n    try {\n      // Execute HTTP Post Request\n      HttpResponse response = httpclient.execute(httpUriRequest);\n\n      if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n        String str = EntityUtils.toString(response.getEntity());\n        return str;\n      } else {\n        Log.w(\n            \"RetreiveFileContentTask: \",\n            \"HttpStatus Code: \" + String.valueOf(response.getStatusLine().getStatusCode()));\n      }\n    } catch (ClientProtocolException e) {\n      Log.e(\"RetreiveFileContentTask: ClientProtocolException: \", e.getMessage());\n      // Toast.makeText(context, e.getMessage(), Toast.LENGTH_SHORT).show();\n    } catch (IOException e) {\n      Log.e(\"RetreiveFileContentTask: IOException: \", e.getMessage());\n      // Toast.makeText(context, e.getMessage(), Toast.LENGTH_SHORT).show();\n    }\n    return \"\";\n  }\n"}, {"dataset": "execute", "exampleID": 2382, "initialization": ["HttpClient httpClient = HttpClientFactory.getClient()", "HttpUriRequest request = SocializeRequestFactory<T>.getDeleteRequest(SocializeSession,String,String)"], "initializationStart": [288, 345], "initializationEnd": [313, 399], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["wrap(*)"], "tryExpressionStart": 198, "tryExpressionEnd": 202, "tryBlockStart": 198, "tryBlockEnd": 981, "catchExpressionStart": 863, "catchExpressionEnd": 883, "catchBlockStart": 863, "catchBlockEnd": 934, "exceptionHandlingCallStart": [899], "exceptionHandlingCallEnd": [925], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 434, "focalAPIEnd": 453, "followUpCheck": "httpUtils.isHttpError(response)", "checkType": "IF", "followUpCheckExpressionStart": 504, "followUpCheckExpressionEnd": 540, "followUpCheckBlockStart": 504, "followUpCheckBlockEnd": 854, "use": ["response.getEntity()", "response.getStatusLine()"], "useStart": [473, 797], "useEnd": [493, 821], "hasFinally": 1, "cleanUpCall": ["closeEntity(HttpEntity)"], "finallyExpressionStart": 935, "finallyExpressionEnd": 943, "finallyBlockStart": 935, "finallyBlockEnd": 981, "cleanUpCallStart": [953], "cleanUpCallEnd": [972], "url": "https://github.com/socialize/socialize-sdk-android/tree/master/sdk/src/com/socialize/provider/BaseSocializeProvider.java", "rawCode": "  @Override\n  public void delete(SocializeSession session, String endpoint, String id)\n      throws SocializeException {\n    HttpEntity entity = null;\n\n    if (!clientFactory.isDestroyed()) {\n      try {\n        endpoint = prepareEndpoint(session, endpoint);\n\n        HttpClient client = clientFactory.getClient();\n\n        HttpUriRequest del = requestFactory.getDeleteRequest(session, endpoint, id);\n\n        HttpResponse response = client.execute(del);\n\n        entity = response.getEntity();\n\n        if (httpUtils.isHttpError(response)) {\n\n          if (sessionPersister != null && httpUtils.isAuthError(response)) {\n            sessionPersister.delete(context.get());\n          }\n\n          String msg = ioUtils.readSafe(entity.getContent());\n          throw new SocializeApiError(httpUtils, response.getStatusLine().getStatusCode(), msg);\n        }\n      } catch (Exception e) {\n        throw SocializeException.wrap(e);\n      } finally {\n        closeEntity(entity);\n      }\n    } else {\n      if (logger != null) {\n        logger.warn(\"Attempt to access HttpClientFactory that was already destroyed\");\n      }\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2383, "initialization": ["HttpClient httpClient = createClient(boolean)", "HttpUriRequest request = new HttpGet(String)"], "initializationStart": [120, 256], "initializationEnd": [139, 280], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new TwitterClientException(*)"], "tryExpressionStart": 314, "tryExpressionEnd": 318, "tryBlockStart": 314, "tryBlockEnd": 440, "catchExpressionStart": 368, "catchExpressionEnd": 390, "catchBlockStart": 368, "catchBlockEnd": 440, "exceptionHandlingCallStart": [404], "exceptionHandlingCallEnd": [433], "configuration": ["httpClient.getParams()"], "configurationStart": [145], "configurationEnd": [163], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 337, "focalAPIEnd": 360, "followUpCheck": "301 == response.getStatusLine().getStatusCode()", "checkType": "IF", "followUpCheckExpressionStart": 446, "followUpCheckExpressionEnd": 498, "followUpCheckBlockStart": 446, "followUpCheckBlockEnd": 605, "use": ["response.getHeaders(String)"], "useStart": [514], "useEnd": [545], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/joshsh/twitlogic/tree/master/twitlogic-core/src/main/java/net/fortytwo/twitlogic/util/CommonHttpClient.java", "rawCode": "  public String resolve301Redirection(final String originalURI) throws TwitterClientException {\n    HttpClient client = createClient(false);\n    client.getParams().setBooleanParameter(\"http.protocol.handle-redirects\", false);\n\n    HttpUriRequest request = new HttpGet(originalURI);\n\n    HttpResponse response;\n    try {\n      response = client.execute(request);\n    } catch (IOException e) {\n      throw new TwitterClientException(e);\n    }\n\n    if (301 == response.getStatusLine().getStatusCode()) {\n      return response.getHeaders(\"Location\")[0].getValue();\n    } else {\n      return originalURI;\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2384, "initialization": ["HttpClient httpClient = HttpClientFactory.getHttpClient()", "HttpUriRequest request = new HttpGet(*)", "HttpUriRequest request = new HttpPut(*)", "HttpUriRequest request = new HttpPost(*)"], "initializationStart": [62, 260, 360, 461], "initializationEnd": [91, 293, 393, 495], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["e(*,String,*)"], "tryExpressionStart": 2846, "tryExpressionEnd": 2850, "tryBlockStart": 2846, "tryBlockEnd": 3958, "catchExpressionStart": 3744, "catchExpressionEnd": 3778, "catchBlockStart": 3744, "catchBlockEnd": 3863, "exceptionHandlingCallStart": [3786], "exceptionHandlingCallEnd": [3839], "configuration": ["httpClient.getConnectionManager()", "request.addHeader(String,String)", "request.setEntity(ByteArrayEntity)"], "configurationStart": [131, 2217, 2717], "configurationEnd": [164, 2264, 2777], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 2882, "focalAPIEnd": 2909, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getEntity()"], "useStart": [2937, 3378], "useEnd": [2961, 3398], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/couchbaselabs/TouchDB-Android/tree/master/TouchDB-Android/src/com/couchbase/touchdb/support/TDRemoteRequest.java", "rawCode": "  @Override\n  public void run() {\n    HttpClient httpClient = clientFactory.getHttpClient();\n    ClientConnectionManager manager = httpClient.getConnectionManager();\n\n    HttpUriRequest request = null;\n    if (method.equalsIgnoreCase(\"GET\")) {\n      request = new HttpGet(url.toExternalForm());\n    } else if (method.equalsIgnoreCase(\"PUT\")) {\n      request = new HttpPut(url.toExternalForm());\n    } else if (method.equalsIgnoreCase(\"POST\")) {\n      request = new HttpPost(url.toExternalForm());\n    }\n\n    // if the URL contains user info AND if this a DefaultHttpClient\n    // then preemptively set the auth credentials\n    if (url.getUserInfo() != null) {\n      if (url.getUserInfo().contains(\":\")) {\n        String[] userInfoSplit = url.getUserInfo().split(\":\");\n        final Credentials creds =\n            new UsernamePasswordCredentials(userInfoSplit[0], userInfoSplit[1]);\n        if (httpClient instanceof DefaultHttpClient) {\n          DefaultHttpClient dhc = (DefaultHttpClient) httpClient;\n\n          HttpRequestInterceptor preemptiveAuth =\n              new HttpRequestInterceptor() {\n\n                @Override\n                public void process(HttpRequest request, HttpContext context)\n                    throws HttpException, IOException {\n                  AuthState authState =\n                      (AuthState) context.getAttribute(ClientContext.TARGET_AUTH_STATE);\n                  CredentialsProvider credsProvider =\n                      (CredentialsProvider) context.getAttribute(ClientContext.CREDS_PROVIDER);\n                  HttpHost targetHost =\n                      (HttpHost) context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);\n\n                  if (authState.getAuthScheme() == null) {\n                    AuthScope authScope =\n                        new AuthScope(targetHost.getHostName(), targetHost.getPort());\n                    authState.setAuthScheme(new BasicScheme());\n                    authState.setCredentials(creds);\n                  }\n                }\n              };\n\n          dhc.addRequestInterceptor(preemptiveAuth, 0);\n        }\n      } else {\n        Log.w(TDDatabase.TAG, \"Unable to parse user info, not setting credentials\");\n      }\n    }\n\n    request.addHeader(\"Accept\", \"application/json\");\n\n    // set body if appropriate\n    if (body != null && request instanceof HttpEntityEnclosingRequestBase) {\n      byte[] bodyBytes = null;\n      try {\n        bodyBytes = TDServer.getObjectMapper().writeValueAsBytes(body);\n      } catch (Exception e) {\n        Log.e(TDDatabase.TAG, \"Error serializing body of request\", e);\n      }\n      ByteArrayEntity entity = new ByteArrayEntity(bodyBytes);\n      entity.setContentType(\"application/json\");\n      ((HttpEntityEnclosingRequestBase) request).setEntity(entity);\n    }\n\n    Object fullBody = null;\n    Throwable error = null;\n    try {\n      HttpResponse response = httpClient.execute(request);\n      StatusLine status = response.getStatusLine();\n      if (status.getStatusCode() >= 300) {\n        Log.e(TDDatabase.TAG, \"Got error \" + Integer.toString(status.getStatusCode()));\n        Log.e(TDDatabase.TAG, \"Request was for: \" + request.toString());\n        Log.e(TDDatabase.TAG, \"Status reason: \" + status.getReasonPhrase());\n        error = new HttpResponseException(status.getStatusCode(), status.getReasonPhrase());\n      } else {\n        HttpEntity temp = response.getEntity();\n        if (temp != null) {\n          try {\n            InputStream stream = temp.getContent();\n            fullBody = TDServer.getObjectMapper().readValue(stream, Object.class);\n          } finally {\n            try {\n              temp.consumeContent();\n            } catch (IOException e) {\n            }\n          }\n        }\n      }\n    } catch (ClientProtocolException e) {\n      Log.e(TDDatabase.TAG, \"client protocol exception\", e);\n      error = e;\n    } catch (IOException e) {\n      Log.e(TDDatabase.TAG, \"io exception\", e);\n      error = e;\n    }\n    respondWithResult(fullBody, error);\n  }\n"}, {"dataset": "execute", "exampleID": 2385, "initialization": ["HttpClient httpClient = getHttpClient()", "HttpUriRequest request = new HttpGet(*)"], "initializationStart": [220, 278], "initializationEnd": [245, 317], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["new YboTvException(*)"], "tryExpressionStart": 141, "tryExpressionEnd": 145, "tryBlockStart": 141, "tryBlockEnd": 1520, "catchExpressionStart": 1091, "catchExpressionEnd": 1123, "catchBlockStart": 1091, "catchBlockEnd": 1165, "exceptionHandlingCallStart": [1137], "exceptionHandlingCallEnd": [1158], "configuration": ["request.addHeader(String,String)"], "configurationStart": [325], "configurationEnd": [372], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 455, "focalAPIEnd": 478, "followUpCheck": "response.containsHeader(\"content-encoding\") && response.getFirstHeader(\"content-encoding\").getValue().equals(\"gzip\")", "checkType": "IF", "followUpCheckExpressionStart": 486, "followUpCheckExpressionEnd": 615, "followUpCheckBlockStart": 486, "followUpCheckBlockEnd": 809, "use": ["response.getEntity()"], "useStart": [677], "useEnd": [696], "hasFinally": 1, "cleanUpCall": ["Reader.close()"], "finallyExpressionStart": 1382, "finallyExpressionEnd": 1390, "finallyBlockStart": 1382, "finallyBlockEnd": 1520, "cleanUpCallStart": [1444], "cleanUpCallEnd": [1458], "url": "https://github.com/ybonnel/ybo-tv-android/tree/master/src/main/java/fr/ybo/ybotv/android/service/HttpService.java", "rawCode": "  protected <T> T getObjectsWithoutRetry(String url, TypeToken<T> typeToken)\n      throws YboTvErreurReseau {\n\n    Reader reader = null;\n    try {\n      Log.d(\"YboTv\", \"Url demandee : \" + url);\n      HttpClient client = HttpUtils.getHttpClient();\n      HttpUriRequest request = new HttpGet(url.replaceAll(\" \", \"%20\"));\n      request.addHeader(\"Accept\", \"application/json\");\n      request.addHeader(\"Accept-Encoding\", \"gzip\");\n      HttpResponse reponse = client.execute(request);\n      if (reponse.containsHeader(\"content-encoding\")\n          && reponse.getFirstHeader(\"content-encoding\").getValue().equals(\"gzip\")) {\n        reader = new InputStreamReader(new GZIPInputStream(reponse.getEntity().getContent()));\n      } else {\n        reader = new InputStreamReader(reponse.getEntity().getContent());\n      }\n      GsonBuilder gsonBuilder = new GsonBuilder();\n      Gson gson = gsonBuilder.create();\n      T retour = gson.<T>fromJson(reader, typeToken.getType());\n      if (retour == null) {\n        throw new YboTvErreurReseau(\"Null object in respose\");\n      }\n      return retour;\n    } catch (MalformedURLException e) {\n      throw new YboTvException(e);\n    } catch (IOException e) {\n      throw new YboTvErreurReseau(e);\n    } catch (JsonSyntaxException e) {\n      throw new YboTvErreurReseau(e);\n    } catch (JsonIOException e) {\n      throw new YboTvErreurReseau(e);\n    } finally {\n      if (reader != null) {\n        try {\n          reader.close();\n        } catch (Exception ignore) {\n        }\n      }\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2386, "initialization": ["HttpClient httpClient = new DefaultHttpClient(ClientConnectionManager,HttpParams)", "HttpUriRequest request = new HttpGet(URI)"], "initializationStart": [945, 1028], "initializationEnd": [993, 1049], "hasTryCatch": 1, "exceptionType": "IllegalArgumentException", "exceptionHandlingCall": ["toString()", "fine(*)"], "tryExpressionStart": 1185, "tryExpressionEnd": 1189, "tryBlockStart": 1185, "tryBlockEnd": 2010, "catchExpressionStart": 1249, "catchExpressionEnd": 1286, "catchBlockStart": 1249, "catchBlockEnd": 1518, "exceptionHandlingCallStart": [1394, 1385], "exceptionHandlingCallEnd": [1408, 1409], "configuration": ["request.addHeader(String,String)"], "configurationStart": [1055], "configurationEnd": [1098], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1213, "focalAPIEnd": 1239, "followUpCheck": "response.getStatusLine().getStatusCode() != HttpServletResponse.SC_OK", "checkType": "IF", "followUpCheckExpressionStart": 2018, "followUpCheckExpressionEnd": 2095, "followUpCheckBlockStart": 2018, "followUpCheckBlockEnd": 2315, "use": ["response.getEntity()"], "useStart": [2522], "useEnd": [2545], "hasFinally": 1, "cleanUpCall": ["ClientConnectionManager.shutdown()"], "finallyExpressionStart": 2657, "finallyExpressionEnd": 2665, "finallyBlockStart": 2657, "finallyBlockEnd": 2731, "cleanUpCallStart": [2755], "cleanUpCallEnd": [2783], "url": "https://github.com/aaujon/Inventirap/tree/master/iOS/zxing/zxingorg/src/com/google/zxing/web/DecodeServlet.java", "rawCode": "  @Override\n  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    String imageURIString = request.getParameter(\"u\");\n    if (imageURIString == null || imageURIString.length() == 0) {\n      log.fine(\"URI was empty\");\n      response.sendRedirect(\"badurl.jspx\");\n      return;\n    }\n\n    imageURIString = imageURIString.trim();\n\n    if (!(imageURIString.startsWith(\"http://\") || imageURIString.startsWith(\"https://\"))) {\n      imageURIString = \"http://\" + imageURIString;\n    }\n\n    URI imageURI;\n    try {\n      imageURI = new URI(imageURIString);\n    } catch (URISyntaxException urise) {\n      if (log.isLoggable(Level.FINE)) {\n        log.fine(\"URI was not valid: \" + imageURIString);\n      }\n      response.sendRedirect(\"badurl.jspx\");\n      return;\n    }\n\n    ClientConnectionManager connectionManager = new SingleClientConnManager(registry);\n    HttpClient client = new DefaultHttpClient(connectionManager, params);\n\n    HttpUriRequest getRequest = new HttpGet(imageURI);\n    getRequest.addHeader(\"Connection\", \"close\"); // Avoids CLOSE_WAIT socket issue?\n\n    try {\n\n      HttpResponse getResponse;\n      try {\n        getResponse = client.execute(getRequest);\n      } catch (IllegalArgumentException iae) {\n        // Thrown if hostname is bad or null\n        if (log.isLoggable(Level.FINE)) {\n          log.fine(iae.toString());\n        }\n        getRequest.abort();\n        response.sendRedirect(\"badurl.jspx\");\n        return;\n      } catch (IOException ioe) {\n        // Encompasses lots of stuff, including\n        // java.net.SocketException, java.net.UnknownHostException,\n        // javax.net.ssl.SSLPeerUnverifiedException,\n        // org.apache.http.NoHttpResponseException,\n        // org.apache.http.client.ClientProtocolException,\n        if (log.isLoggable(Level.FINE)) {\n          log.fine(ioe.toString());\n        }\n        getRequest.abort();\n        response.sendRedirect(\"badurl.jspx\");\n        return;\n      }\n\n      if (getResponse.getStatusLine().getStatusCode() != HttpServletResponse.SC_OK) {\n        if (log.isLoggable(Level.FINE)) {\n          log.fine(\"Unsuccessful return code: \" + getResponse.getStatusLine().getStatusCode());\n        }\n        response.sendRedirect(\"badurl.jspx\");\n        return;\n      }\n      if (!isSizeOK(getResponse)) {\n        log.fine(\"Too large\");\n        response.sendRedirect(\"badimage.jspx\");\n        return;\n      }\n\n      log.info(\"Decoding \" + imageURI);\n      HttpEntity entity = getResponse.getEntity();\n      InputStream is = entity.getContent();\n      try {\n        processStream(is, request, response);\n      } finally {\n        EntityUtils.consume(entity);\n        is.close();\n      }\n\n    } finally {\n      connectionManager.shutdown();\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2387, "initialization": ["HttpUriRequest request = createHttpRequest(Request<?>,Map<String, String>)"], "initializationStart": [186], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getParams()"], "configurationStart": [395], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 738, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wmathurin/volley/tree/master/src/com/android/volley/toolbox/HttpClientStack.java", "rawCode": "  @Override\n  public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)\n      throws IOException, AuthFailureError {\n    HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);\n    addHeaders(httpRequest, additionalHeaders);\n    addHeaders(httpRequest, request.getHeaders());\n    onPrepareRequest(httpRequest);\n    HttpParams httpParams = httpRequest.getParams();\n    int timeoutMs = request.getTimeoutMs();\n    // TODO: Reevaluate this connection timeout based on more wide-scale\n    // data collection and possibly different for wifi vs. 3G.\n    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);\n    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);\n    return mClient.execute(httpRequest);\n  }\n"}, {"dataset": "execute", "exampleID": 2388, "initialization": ["HttpUriRequest request = new HttpPost(String)", "HttpClient httpClient = new DefaultHttpClient()"], "initializationStart": [2033, 2113], "initializationEnd": [2087, 2136], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.addHeader(String,String)", "request.setEntity(StringEntity)"], "configurationStart": [2142, 2349], "configurationEnd": [2183, 2412], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 2444, "focalAPIEnd": 2463, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getEntity()"], "useStart": [2493, 2661], "useEnd": [2513, 2677], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/USGS-CIDA/coastal-hazards/tree/master/coastal-hazards-portal/src/main/java/gov/usgs/cida/coastalhazards/rest/data/util/MetadataUtil.java", "rawCode": "  /**\n   * I really don't like this in its current form, we should rethink this process and move this\n   * around\n   *\n   * @param metadataEndpoint metadata endpoint for retreival\n   * @param attr attribute summary is for\n   * @return\n   * @throws IOException\n   * @throws ParserConfigurationException\n   * @throws SAXException\n   */\n  public static String getSummaryFromWPS(String metadataEndpoint, String attr)\n      throws IOException, ParserConfigurationException, SAXException, URISyntaxException {\n    String wpsRequest =\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n            + \"<wps:Execute xmlns:wps=\\\"http://www.opengis.net/wps/1.0.0\\\" xmlns:wfs=\\\"http://www.opengis.net/wfs\\\" xmlns:ows=\\\"http://www.opengis.net/ows/1.1\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" service=\\\"WPS\\\" version=\\\"1.0.0\\\" xsi:schemaLocation=\\\"http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsExecute_request.xsd\\\">\"\n            + \"<ows:Identifier>org.n52.wps.server.r.item.summary</ows:Identifier>\"\n            + \"<wps:DataInputs>\"\n            + \"<wps:Input>\"\n            + \"<ows:Identifier>input</ows:Identifier>\"\n            + \"<wps:Data>\"\n            + \"<wps:LiteralData><![CDATA[\"\n            + metadataEndpoint\n            + \"]]></wps:LiteralData>\"\n            + \"</wps:Data>\"\n            + \"</wps:Input>\";\n\n    if (attr != null && attr.length() > 0) {\n      wpsRequest +=\n          \"<wps:Input>\"\n              + \"<ows:Identifier>attr</ows:Identifier>\"\n              + \"<wps:Data>\"\n              + \"<wps:LiteralData>\"\n              + attr\n              + \"</wps:LiteralData>\"\n              + \"</wps:Data>\"\n              + \"</wps:Input>\";\n    }\n\n    wpsRequest +=\n        \"</wps:DataInputs>\"\n            + \"<wps:ResponseForm>\"\n            + \"<wps:RawDataOutput>\"\n            + \"<ows:Identifier>output</ows:Identifier>\"\n            + \"</wps:RawDataOutput>\"\n            + \"</wps:ResponseForm>\"\n            + \"</wps:Execute>\";\n\n    HttpUriRequest req = new HttpPost(cchn52Endpoint + \"/WebProcessingService\");\n    HttpClient client = new DefaultHttpClient();\n    req.addHeader(\"Content-Type\", \"text/xml\");\n    if (!StringUtils.isBlank(wpsRequest) && req instanceof HttpEntityEnclosingRequestBase) {\n      StringEntity contentEntity = new StringEntity(wpsRequest);\n      ((HttpEntityEnclosingRequestBase) req).setEntity(contentEntity);\n    }\n    HttpResponse resp = client.execute(req);\n    StatusLine statusLine = resp.getStatusLine();\n\n    if (statusLine.getStatusCode() != 200) {\n      throw new IOException(\"Error in response from wps\");\n    }\n    String data = IOUtils.toString(resp.getEntity().getContent(), \"UTF-8\");\n    if (data.contains(\"ExceptionReport\")) {\n      String error = \"Error in response from wps\";\n      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n      factory.setNamespaceAware(true);\n      Document doc = factory.newDocumentBuilder().parse(new ByteArrayInputStream(data.getBytes()));\n      JXPathContext ctx = JXPathContext.newContext(doc.getDocumentElement());\n      ctx.registerNamespace(\"ows\", \"http://www.opengis.net/ows/1.1\");\n      List<Node> nodes = ctx.selectNodes(\"ows:Exception/ows:ExceptionText/text()\");\n      if (nodes != null && !nodes.isEmpty()) {\n        StringBuilder builder = new StringBuilder();\n        for (Node node : nodes) {\n          builder.append(node.getTextContent()).append(System.lineSeparator());\n        }\n        error = builder.toString();\n      }\n      throw new RuntimeException(error);\n    }\n    return data;\n  }\n"}, {"dataset": "execute", "exampleID": 2389, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["reset()", "new SilkHttpException(*)"], "tryExpressionStart": 759, "tryExpressionEnd": 763, "tryBlockStart": 759, "tryBlockEnd": 894, "catchExpressionStart": 814, "catchExpressionEnd": 834, "catchBlockStart": 814, "catchBlockEnd": 894, "exceptionHandlingCallStart": [842, 863], "exceptionHandlingCallEnd": [849, 887], "configuration": ["request.setHeader(*,*)"], "configurationStart": [666], "configurationEnd": [720], "guardCondition": "httpClient==null", "guardType": "IF {", "guardExpressionStart": 105, "guardExpressionEnd": 125, "guardBlockStart": 105, "guardBlockEnd": 589, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 782, "focalAPIEnd": 806, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "new SilkHttpException(response)", "new SilkHttpResponse(response)"], "useStart": [912, 1006, 1069], "useEnd": [936, 1037, 1099], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svenoaks/funwithmusic/tree/master/silk-library/src/com/afollestad/silk/http/SilkHttpBase.java", "rawCode": "  protected SilkHttpResponse performRequest(final HttpUriRequest request) throws SilkHttpException {\n    if (mClient == null)\n      throw new IllegalStateException(\n          \"The client has already been shutdown, you must re-initialize it.\");\n    else if (mContext != null) {\n      if (!Silk.hasInternetPermission(mContext))\n        throw new IllegalAccessError(\n            \"Your app does not declare the android.permission.INTERNET permission in its manifest.\");\n      else if (!Silk.isOnline(mContext))\n        throw new IllegalStateException(\"The device is currently offline.\");\n    }\n    if (mHeaders.size() > 0) {\n      for (SilkHttpHeader header : mHeaders) request.setHeader(header.getName(), header.getValue());\n    }\n    HttpResponse response;\n    try {\n      response = mClient.execute(request);\n    } catch (Exception e) {\n      reset();\n      throw new SilkHttpException(e);\n    }\n    int status = response.getStatusLine().getStatusCode();\n    if (status != 200) {\n      reset();\n      throw new SilkHttpException(response);\n    }\n    reset();\n    return new SilkHttpResponse(response);\n  }\n"}, {"dataset": "execute", "exampleID": 2390, "initialization": ["HttpClient httpClient = new DefaultHttpClient()"], "initializationStart": [92], "initializationEnd": [115], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["HttpClient.getConnectionManager()", "shutdown()", "printStackTrace()"], "tryExpressionStart": 154, "tryExpressionEnd": 158, "tryBlockStart": 154, "tryBlockEnd": 855, "catchExpressionStart": 634, "catchExpressionEnd": 668, "catchBlockStart": 634, "catchBlockEnd": 750, "exceptionHandlingCallStart": [676, 676, 724], "exceptionHandlingCallEnd": [705, 716, 743], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 181, "focalAPIEnd": 204, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getStatusLine()", "response.getEntity()", "httpClient.getConnectionManager()", "httpClient.getConnectionManager()"], "useStart": [227, 289, 364, 676, 781], "useEnd": [255, 317, 388, 705, 810], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/heskew-riotapps/WordAndroid/tree/master/src/com/riotapps/word/utils/RestClient.java", "rawCode": "  private void executeRequest(HttpUriRequest request, String url) {\n    HttpClient client = new DefaultHttpClient();\n\n    HttpResponse httpResponse;\n\n    try {\n      httpResponse = client.execute(request);\n      responseCode = httpResponse.getStatusLine().getStatusCode();\n      message = httpResponse.getStatusLine().getReasonPhrase();\n\n      HttpEntity entity = httpResponse.getEntity();\n\n      if (entity != null) {\n\n        InputStream instream = entity.getContent();\n        response = convertStreamToString(instream);\n\n        // Closing the input stream will trigger connection release\n        instream.close();\n      }\n\n    } catch (ClientProtocolException e) {\n      client.getConnectionManager().shutdown();\n      e.printStackTrace();\n    } catch (IOException e) {\n      client.getConnectionManager().shutdown();\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2391, "initialization": ["HttpUriRequest request = createGETRequest(String,Map)"], "initializationStart": [210], "initializationEnd": [295], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 326, "focalAPIEnd": 353, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [387], "useEnd": [407], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biafra23/AmDroid/tree/master/AmenLib/src/main/java/com.jaeckel/amenoid/api/AmenServiceImpl.java", "rawCode": "  @Override\n  public ArrayList<Comment> getCommentsForAmenId(Long amenId) throws IOException {\n    ArrayList<Comment> result;\n    Map params = createAuthenticatedParams();\n\n    HttpUriRequest httpGet =\n        RequestFactory.createGETRequest(serviceUrl + \"/amen/\" + amenId + \"/comments\", params);\n\n    HttpResponse response = httpclient.execute(httpGet);\n    HttpEntity responseEntity = response.getEntity();\n\n    final String responseString = EntityUtils.toString(responseEntity, \"UTF-8\");\n    if (responseString.startsWith(\"{\\\"error\\\":\")) {\n      throw new RuntimeException(\"getAmenForId produced error: \" + responseString);\n    }\n    Type collectionType = new TypeToken<List<Comment>>() {}.getType();\n    result = gson.fromJson(responseString, collectionType);\n\n    return result;\n  }\n"}, {"dataset": "execute", "exampleID": 2392, "initialization": ["HttpUriRequest request = new HttpGet(String)"], "initializationStart": [104], "initializationEnd": [120], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["getMessage()", "warn(*)"], "tryExpressionStart": 127, "tryExpressionEnd": 131, "tryBlockStart": 127, "tryBlockEnd": 770, "catchExpressionStart": 425, "catchExpressionEnd": 459, "catchBlockStart": 425, "catchBlockEnd": 548, "exceptionHandlingCallStart": [526, 467], "exceptionHandlingCallEnd": [540, 541], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 163, "focalAPIEnd": 186, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getEntity()"], "useStart": [207, 320], "useEnd": [231, 340], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/open-infinity/cmt/tree/master/cloud/cloud-utils/src/main/java/org/openinfinity/cloud/util/http/HttpHelper.java", "rawCode": "  public static String executeHttpRequest(HttpClient client, String url) {\n    HttpUriRequest request = new HttpGet(url);\n\n    try {\n      HttpResponse response = client.execute(request);\n      int status = response.getStatusLine().getStatusCode();\n      if (status >= 200 && status < 300) {\n        HttpEntity entity = response.getEntity();\n        return entity != null ? EntityUtils.toString(entity) : null;\n      }\n    } catch (ClientProtocolException e) {\n      LOG.warn(EXCEPTION_WHILE_EXECUTING_HTTP_REQUEST + \"----\" + e.getMessage());\n    } catch (IOException e) {\n      LOG.warn(EXCEPTION_WHILE_EXECUTING_HTTP_REQUEST + \"----\" + e.getMessage());\n    } catch (Exception e) {\n      LOG.warn(EXCEPTION_WHILE_EXECUTING_HTTP_REQUEST + \"----\" + e.getMessage());\n    }\n    return null;\n  }\n"}, {"dataset": "execute", "exampleID": 2393, "initialization": ["HttpClient httpClient = new DefaultHttpClient()", "HttpUriRequest request = new HttpGet(String)"], "initializationStart": [199, 257], "initializationEnd": [222, 273], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.setHeader(String,String)"], "configurationStart": [279], "configurationEnd": [341], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 487, "focalAPIEnd": 513, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [487], "useEnd": [525], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/um104/C4PPMobileMetrics/tree/master/MobileMetricsDashboard/src/edu/channel4/mm/db/android/network/BaseGetRequestAsyncTask.java", "rawCode": "  @Override\n  public ResultT call() throws Exception {\n    if (accessToken == null) {\n      throw new Exception(\"GET request failed: No access token currently saved\");\n    }\n\n    HttpClient client = new DefaultHttpClient();\n\n    HttpUriRequest getRequest = new HttpGet(uri);\n    getRequest.setHeader(\"Authorization\", \"Bearer \" + accessToken);\n\n    Log.v(\"Sending GET request with URI: \" + uri);\n    Log.v(\"Access token: \" + accessToken);\n    String responseString = EntityUtils.toString(client.execute(getRequest).getEntity());\n\n    if (responseString != null) {\n      Log.v(\"Got HTTP result: \" + responseString);\n    } else {\n      throw new Exception(\"GET request receieved null response string.\");\n    }\n\n    // Save the responseString internally, for inheriting classes to use\n    // (e.g. most classes will parse this string).\n    this.responseString = responseString;\n\n    return null;\n  }\n"}, {"dataset": "execute", "exampleID": 2394, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getURI()", "new SiriConnectionException(String,*)"], "tryExpressionStart": 138, "tryExpressionEnd": 142, "tryBlockStart": 138, "tryBlockEnd": 308, "catchExpressionStart": 188, "catchExpressionEnd": 209, "catchBlockStart": 188, "catchBlockEnd": 308, "exceptionHandlingCallStart": [280, 223], "exceptionHandlingCallEnd": [296, 301], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 157, "focalAPIEnd": 180, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OneBusAway/onebusaway-siri/tree/master/onebusaway-siri-core/src/main/java/org/onebusaway/siri/core/services/HttpClientServiceImpl.java", "rawCode": "  @Override\n  public HttpResponse executeHttpMethod(HttpClient client, HttpUriRequest request)\n      throws SiriConnectionException {\n    try {\n      return client.execute(request);\n    } catch (Exception ex) {\n      throw new SiriConnectionException(\"error connecting to url \" + request.getURI(), ex);\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2395, "initialization": ["HttpUriRequest request = createGETRequest(String,HashMap<String, String>)"], "initializationStart": [758], "initializationEnd": [867], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 897, "focalAPIEnd": 924, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [958], "useEnd": [978], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biafra23/AmDroid/tree/master/AmenLib/src/main/java/com.jaeckel/amenoid/api/AmenServiceImpl.java", "rawCode": "  @Override\n  public ArrayList<Amen> getAmenForCategory(String categoryId, Integer page, Double lat, Double lon)\n      throws IOException {\n\n    // https://getamen.com/categories/nearby/amen.json?lat=52.517200&lng=13.466900&current_page=0&auth_token=GyG8p74rmAqo3ufU6bZq\n\n    ArrayList<Amen> result;\n    log.debug(\"getAmenForCategory()\");\n\n    HashMap<String, String> params = createAuthenticatedParams();\n    if (lon != null) {\n      params.put(\"lng\", \"\" + lon);\n    }\n\n    if (lat != null) {\n      params.put(\"lat\", \"\" + lat);\n    }\n    int currentPage = 0;\n    if (page != null && page > 0) {\n      currentPage = page;\n    }\n    params.put(\"page\", \"\" + currentPage);\n    params.put(\"current_page\", \"\" + currentPage);\n\n    HttpUriRequest httpGet =\n        RequestFactory.createGETRequest(\n            serviceUrl + \"/categories/\" + categoryId + \"/amen.json\", params);\n    HttpResponse response = httpclient.execute(httpGet);\n    HttpEntity responseEntity = response.getEntity();\n\n    final String responseString = EntityUtils.toString(responseEntity);\n\n    Type collectionType = new TypeToken<Collection<Amen>>() {}.getType();\n    result = gson.fromJson(responseString, collectionType);\n\n    return result;\n  }\n"}, {"dataset": "execute", "exampleID": 2396, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 380, "focalAPIEnd": 403, "followUpCheck": "response.getStatusLine().getStatusCode() == 401", "checkType": "IF", "followUpCheckExpressionStart": 409, "followUpCheckExpressionEnd": 461, "followUpCheckBlockStart": 409, "followUpCheckBlockEnd": 801, "use": ["httpClient.execute(HttpUriRequest)"], "useStart": [771], "useEnd": [794], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rkipper/AppInventor_RK/tree/master/appinventor/components/src/com/google/appinventor/components/runtime/util/ClientLoginHelper.java", "rawCode": "  /**\n   * Wraps an HttpClient.execute() to manage the authorization headers. This will add the proper\n   * Authorization header, and retry if the auth token has expired.\n   */\n  @Override\n  public HttpResponse execute(HttpUriRequest request) throws ClientProtocolException, IOException {\n    initialize();\n    addGoogleAuthHeader(request, authToken);\n    HttpResponse response = client.execute(request);\n    if (response.getStatusLine().getStatusCode() == 401) {\n      Log.i(LOG_TAG, \"Invalid token: \" + authToken);\n      accountManager.invalidateAuthToken(ACCOUNT_TYPE, authToken);\n      authToken = getAuthToken();\n      removeGoogleAuthHeaders(request);\n      addGoogleAuthHeader(request, authToken);\n      Log.i(LOG_TAG, \"new token: \" + authToken);\n      response = client.execute(request);\n    }\n    return response;\n  }\n"}, {"dataset": "execute", "exampleID": 2397, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 380, "focalAPIEnd": 403, "followUpCheck": "response.getStatusLine().getStatusCode() == 401", "checkType": "IF", "followUpCheckExpressionStart": 409, "followUpCheckExpressionEnd": 461, "followUpCheckBlockStart": 409, "followUpCheckBlockEnd": 801, "use": ["httpClient.execute(HttpUriRequest)"], "useStart": [771], "useEnd": [794], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mit-cml/appinventor-sources/tree/master/appinventor/components/src/com/google/appinventor/components/runtime/util/ClientLoginHelper.java", "rawCode": "  /**\n   * Wraps an HttpClient.execute() to manage the authorization headers. This will add the proper\n   * Authorization header, and retry if the auth token has expired.\n   */\n  @Override\n  public HttpResponse execute(HttpUriRequest request) throws ClientProtocolException, IOException {\n    initialize();\n    addGoogleAuthHeader(request, authToken);\n    HttpResponse response = client.execute(request);\n    if (response.getStatusLine().getStatusCode() == 401) {\n      Log.i(LOG_TAG, \"Invalid token: \" + authToken);\n      accountManager.invalidateAuthToken(ACCOUNT_TYPE, authToken);\n      authToken = getAuthToken();\n      removeGoogleAuthHeaders(request);\n      addGoogleAuthHeader(request, authToken);\n      Log.i(LOG_TAG, \"new token: \" + authToken);\n      response = client.execute(request);\n    }\n    return response;\n  }\n"}, {"dataset": "execute", "exampleID": 2398, "initialization": ["HttpClient httpClient = getHttpClient(Context,*)", "HttpUriRequest request = new HttpGet(String)"], "initializationStart": [118, 198], "initializationEnd": [161, 214], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 240, "focalAPIEnd": 264, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getEntity()"], "useStart": [287], "useEnd": [303], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xCatG/Nanidroid/tree/master/src/com/cattailsw/nanidroid/util/NetworkUtil.java", "rawCode": "  public static InputStream getURLStream(Context ctx, String url) throws IOException {\n    final HttpClient lClient = getHttpClient(ctx, url.startsWith(\"https\"));\n    final HttpUriRequest request = new HttpGet(url);\n    HttpResponse resp = lClient.execute(request);\n    InputStream is = resp.getEntity().getContent();\n    return is;\n  }\n"}, {"dataset": "execute", "exampleID": 2399, "initialization": ["HttpClient httpClient = new DefaultHttpClient()"], "initializationStart": [92], "initializationEnd": [115], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["HttpClient.getConnectionManager()", "shutdown()", "printStackTrace()"], "tryExpressionStart": 154, "tryExpressionEnd": 158, "tryBlockStart": 154, "tryBlockEnd": 1066, "catchExpressionStart": 872, "catchExpressionEnd": 906, "catchBlockStart": 872, "catchBlockEnd": 988, "exceptionHandlingCallStart": [914, 914, 962], "exceptionHandlingCallEnd": [943, 954, 981], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 181, "focalAPIEnd": 204, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getStatusLine()", "response.getStatusLine()", "response.getEntity()", "response.getFirstHeader(String)", "httpClient.getConnectionManager()", "httpClient.getConnectionManager()"], "useStart": [227, 289, 364, 505, 914, 1019], "useEnd": [255, 317, 388, 552, 943, 1048], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ligi/bismo/tree/master/client/BiSMoClient/src/org/bismo/client/http/RestClient.java", "rawCode": "  private void executeRequest(HttpUriRequest request, String url) {\n    HttpClient client = new DefaultHttpClient();\n\n    HttpResponse httpResponse;\n\n    try {\n      httpResponse = client.execute(request);\n      responseCode = httpResponse.getStatusLine().getStatusCode();\n      message = httpResponse.getStatusLine().getReasonPhrase();\n\n      HttpEntity entity = httpResponse.getEntity();\n\n      if (entity != null) {\n\n        InputStream instream = entity.getContent();\n        Header contentEncoding = httpResponse.getFirstHeader(\"Content-Encoding\");\n        if (contentEncoding != null && contentEncoding.getValue().equalsIgnoreCase(\"gzip\")) {\n          instream = new GZIPInputStream(instream);\n        }\n        response = convertStreamToString(instream);\n\n        // Closing the input stream will trigger connection release\n        instream.close();\n      }\n\n    } catch (ClientProtocolException e) {\n      client.getConnectionManager().shutdown();\n      e.printStackTrace();\n    } catch (IOException e) {\n      client.getConnectionManager().shutdown();\n    }\n  }\n"}, {"dataset": "execute", "exampleID": 2400, "initialization": ["HttpUriRequest request = new HttpGet(*)"], "initializationStart": [572], "initializationEnd": [601], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["request.getParams()"], "configurationStart": [771], "configurationEnd": [794], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpClient.execute(request)", "focalAPIStart": 1114, "focalAPIEnd": 1142, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/frameworks_support/tree/master/volley/src/com/android/volley/toolbox/HttpClientStack.java", "rawCode": "  @Override\n  public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)\n      throws IOException, AuthFailureError {\n    HttpUriRequest httpRequest;\n    byte[] postBody = request.getPostBody();\n    if (postBody != null) {\n      HttpPost postRequest = new HttpPost(request.getUrl());\n      postRequest.addHeader(\"Content-Type\", request.getPostBodyContentType());\n      HttpEntity entity;\n      entity = new ByteArrayEntity(postBody);\n      postRequest.setEntity(entity);\n      httpRequest = postRequest;\n    } else {\n      httpRequest = new HttpGet(request.getUrl());\n    }\n    addHeaders(httpRequest, additionalHeaders);\n    addHeaders(httpRequest, request.getHeaders());\n    onPrepareRequest(httpRequest);\n    HttpParams httpParams = httpRequest.getParams();\n    int timeoutMs = request.getTimeoutMs();\n    // TODO: Reevaluate this connection timeout based on more wide-scale\n    // data collection and possibly different for wifi vs. 3G.\n    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);\n    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);\n    return mClient.execute(httpRequest);\n  }\n"}]