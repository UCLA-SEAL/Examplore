[{"dataset": "next", "exampleID": 3001, "initialization": ["Iterator iterator = Set.iterator()"], "initializationStart": [285], "initializationEnd": [301], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 267, "guardExpressionEnd": 317, "guardBlockStart": 267, "guardBlockEnd": 638, "focalAPI": "element = iterator.next()", "focalAPIStart": 349, "focalAPIEnd": 357, "followUpCheck": "element.endsWith(\"/\")", "checkType": "IF", "followUpCheckExpressionStart": 392, "followUpCheckExpressionEnd": 415, "followUpCheckBlockStart": 392, "followUpCheckBlockEnd": 425, "use": ["getResourceAsStream(element)"], "useStart": [552], "useEnd": [603], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.0/api/src/main/java/org/sakaiproject/util/ToolListener.java", "rawCode": "  /** Initialize. */\n  public void contextInitialized(ServletContextEvent event) {\n    // find the resources in the webapp in the /tools/ area TODO: param this\n    Set paths = event.getServletContext().getResourcePaths(\"/tools/\");\n    if (paths == null) return;\n\n    for (Iterator i = paths.iterator(); i.hasNext(); ) {\n      String path = (String) i.next();\n\n      // skip directories\n      if (path.endsWith(\"/\")) continue;\n\n      // load this\n      M_log.info(\"registering tools from resource: \" + path);\n      ActiveToolManager.register(\n          event.getServletContext().getResourceAsStream(path), event.getServletContext());\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3002, "initialization": ["Iterator iterator = CellSet.iterator()"], "initializationStart": [82], "initializationEnd": [96], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 102, "guardExpressionEnd": 122, "guardBlockStart": 102, "guardBlockEnd": 225, "focalAPI": "element = iterator.next()", "focalAPIStart": 168, "focalAPIEnd": 177, "followUpCheck": "find(element) == null", "checkType": "IF", "followUpCheckExpressionStart": 185, "followUpCheckExpressionEnd": 208, "followUpCheckBlockStart": 185, "followUpCheckBlockEnd": 219, "use": ["add(element)"], "useStart": [209], "useEnd": [218], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/plantuml/tree/master/tags/plantuml-7475/src/org/stathissideris/ascii2image/text/CellSet.java", "rawCode": "  public void appendSet(CellSet set) {\n    typeIsValid = false;\n    Iterator it = set.iterator();\n    while (it.hasNext()) {\n      TextGrid.Cell cell = (TextGrid.Cell) it.next();\n      if (find(cell) == null) add(cell);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3003, "initialization": ["Iterator iterator = Set.iterator()"], "initializationStart": [2292], "initializationEnd": [2315], "hasTryCatch": 1, "exceptionType": "UpgradeException", "exceptionHandlingCall": ["error(String,*)"], "tryExpressionStart": 1293, "tryExpressionEnd": 1297, "tryBlockStart": 1293, "tryBlockEnd": 1491, "catchExpressionStart": 5556, "catchExpressionEnd": 5583, "catchBlockStart": 5556, "catchBlockEnd": 5663, "exceptionHandlingCallStart": [5591], "exceptionHandlingCallEnd": [5656], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 2323, "guardExpressionEnd": 2342, "guardBlockStart": 2323, "guardBlockEnd": 3106, "focalAPI": "element = iterator.next()", "focalAPIStart": 2379, "focalAPIEnd": 2387, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.indexOf(String)", "element.substring(int,int)", "element.substring(*)"], "useStart": [2470, 2539, 2587], "useEnd": [2490, 2566, 2615], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aldaris/opensso/tree/master/products/upgrade/services/50_iPlanetAMPlatformService/20_30/Migrate.java", "rawCode": "  /**\n   * Updates the <code>iPlanetAMPlatformService<code> service schema.\n   *\n   * @return true if successful otherwise false.\n   */\n  public boolean migrateService() {\n    String classMethod = \"iPlanetAMPlatformService/20_30:migrateService: \";\n    boolean isSuccess = false;\n    try {\n      String fileName = UpgradeUtils.getAbsolutePath(SERVICE_DIR, SCHEMA_FILE1);\n      UpgradeUtils.addAttributeToSchema(SERVICE_NAME, schemaType, fileName);\n      // add subschema\n      fileName = UpgradeUtils.getAbsolutePath(SERVICE_DIR, SCHEMA_FILE);\n      UpgradeUtils.addSubSchema(SERVICE_NAME, null, schemaType, fileName);\n      fileName = UpgradeUtils.getAbsolutePath(SERVICE_DIR, SCHEMA_FILE2);\n      UpgradeUtils.createService(fileName);\n\n      UpgradeUtils.removeAttributeSchema(SERVICE_NAME, schemaType, ATTR_LOGIN_URL, null);\n      UpgradeUtils.removeAttributeSchema(SERVICE_NAME, schemaType, ATTR_LOGOUT_URL, null);\n      UpgradeUtils.removeAttributeSchema(SERVICE_NAME, schemaType, ATTR_SERVER_VALIDATOR, null);\n      UpgradeUtils.removeAttributeSchema(SERVICE_NAME, schemaType, ATTR_SITE_VALIDATOR, null);\n      UpgradeUtils.removeAttributeSchema(SERVICE_NAME, schemaType, ATTR_LOCALES, null);\n\n      // read serverdefaults.properties\n      Properties properties = new Properties();\n      try {\n        properties.load(new FileInputStream(UpgradeUtils.getServerDefaultsPath()));\n      } catch (IOException ioe) {\n        UpgradeUtils.debug.error(\"Error loading properties\", ioe);\n      }\n      Set vSet = new HashSet();\n      Enumeration propertiesNames = properties.propertyNames();\n      while (propertiesNames.hasMoreElements()) {\n        String propertyName = (String) propertiesNames.nextElement();\n        String value = (String) properties.get(propertyName);\n        vSet.add(propertyName + \"=\" + value);\n      }\n      // add to server-default subconfig\n      UpgradeUtils.addServerDefaults(SERVICE_NAME, SERVER_ATTR, null, INSTANCE_ID, vSet, null);\n      if (UpgradeUtils.debug.messageEnabled()) {\n        UpgradeUtils.debug.message(\n            classMethod + \"serverdefaults.properties \" + \"values are :\" + vSet);\n      }\n\n      // get the values of site list.\n      Set attrValueSet = UpgradeUtils.getAttributeValue(SERVICE_NAME, ATTR_SITE_LIST, schemaType);\n      Iterator i = attrValueSet.iterator();\n      while (i.hasNext()) {\n        String attrVal = (String) i.next();\n        String siteURL = null;\n        String remStr = null;\n        int index = attrVal.indexOf(\"|\");\n        if (index != -1) {\n          siteURL = attrVal.substring(0, index);\n          remStr = attrVal.substring(index + 1);\n        }\n        index = remStr.indexOf(\"|\");\n        if (index != -1) {\n          String siteId = remStr.substring(0, index);\n          String accessPointStr = remStr.substring(index + 1);\n          StringTokenizer st = new StringTokenizer(accessPointStr, \"|\");\n          Set accessPoints = new HashSet();\n          while (st.hasMoreTokens()) {\n            accessPoints.add((String) st.nextToken());\n          }\n          UpgradeUtils.createSite(siteURL, accessPoints);\n        }\n      }\n\n      /* Get existing/pre-migrated AMConfig.properties,\n       * get the latest AMConfig.properties from the deployed\n       * OpenSSO pointing to old DIT. Read the\n       * \"com.iplanet.am.version\" from the latest OpenSSO bits\n       * and replace only property in the existing/pre-migrated\n       * AMConfig.properties.\n       */\n\n      String serverStr = UpgradeUtils.getServerName() + \"/\" + UpgradeUtils.getDeployURI();\n      Properties amconfigProp = UpgradeUtils.getServerProperties();\n      Properties p =\n          UpgradeUtils.getProperties(\n              UpgradeUtils.getConfigDir() + File.separator + \"AMConfig.properties\");\n      String prodVersion = (String) p.get(\"com.iplanet.am.version\");\n      if (prodVersion != null) {\n        amconfigProp.put(\"com.iplanet.am.version\", prodVersion);\n        UpgradeUtils.storeProperties(amconfigProp);\n      }\n      // get value of iplanet-am-platform-server-list attribute\n      attrValueSet = UpgradeUtils.getAttributeValue(SERVICE_NAME, PLATFORM_ATTR, schemaType);\n\n      Iterator attrValIterator = attrValueSet.iterator();\n      while (attrValIterator.hasNext()) {\n        String value = (String) attrValIterator.next();\n        StringTokenizer st = new StringTokenizer(value, \"|\");\n        String serverName = st.nextToken();\n        String serverId = st.nextToken();\n        String siteId = null;\n        if (st.countTokens() == 3) {\n          siteId = st.nextToken();\n        }\n        // get complete instance name with deployURI\n        String serverInstance = UpgradeUtils.getServerInstance(serverName);\n        if (serverName != null && serverName.equalsIgnoreCase(serverStr)) {\n          Set values = getValues(amconfigProp);\n          // read serverconfig XML\n          String serverconfigXML = UpgradeUtils.getServerConfigXML();\n          if (UpgradeUtils.debug.messageEnabled()) {\n            UpgradeUtils.debug.message(\n                classMethod + \"AMConfig.properties \" + \"values are :\" + values);\n            UpgradeUtils.debug.message(classMethod + \"serverconfigXMl is :\" + serverconfigXML);\n          }\n          UpgradeUtils.addServerDefaults(\n              SERVICE_NAME, SERVER_ATTR, serverInstance, serverId, values, serverconfigXML);\n        } else {\n          UpgradeUtils.createServiceInstance(serverInstance, serverId);\n        }\n        if (siteId != null) {\n          UpgradeUtils.addToSite(serverInstance, siteId);\n        }\n      }\n      isSuccess = true;\n    } catch (UpgradeException e) {\n      UpgradeUtils.debug.error(\"Error loading data:\" + SERVICE_NAME, e);\n    }\n    return isSuccess;\n  }\n"}, {"dataset": "next", "exampleID": 3004, "initialization": ["Iterator iterator = List<FunctionComponent>.iterator()"], "initializationStart": [546], "initializationEnd": [576], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 582, "guardExpressionEnd": 602, "guardBlockStart": 582, "guardBlockEnd": 1391, "focalAPI": "element = iterator.next()", "focalAPIStart": 713, "focalAPIEnd": 722, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getXmlPath()", "iterator.remove()", "element.setMeta(*)", "element.setView(*)", "element.getXmlPath()", "iterator.next()"], "useStart": [787, 982, 1071, 1128, 1350, 1541], "useEnd": [812, 993, 1118, 1175, 1375, 1550], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/caadapter/tree/master/software/caadapter/src/java/gov/nih/nci/caadapter/ui/mapping/jgraph/MiddlePanelJGraphController.java", "rawCode": "  /**\n   * This method will help remove those function deleted in scene from mappingData and add those\n   * from scene to mappingData. Therefore, after calling this method, both mappingData and/or\n   * uuidComponentMap structure may change.\n   *\n   * @param mappingData\n   * @param uuidComponentMap\n   */\n  private void consolidateFunctionComponentList(\n      Mapping mappingData, java.util.Map<String, FunctionComponent> uuidComponentMap) {\n    List<FunctionComponent> oldFunctionCompList = mappingData.getFunctionComponent();\n    Iterator it = oldFunctionCompList.iterator();\n    while (it.hasNext()) { // remove those not exist anymore in new mapping\n      FunctionComponent functionComp = (FunctionComponent) it.next();\n      FunctionComponent newFunctionComp = uuidComponentMap.get(functionComp.getXmlPath());\n      if (newFunctionComp\n          == null) { // could not find the old functionComp in new graph, that implies it is deleted\n                     // already\n        it.remove();\n      } else {\n        // update view and functionMeta info, if any\n        functionComp.setMeta(newFunctionComp.getMeta());\n        functionComp.setView(newFunctionComp.getView());\n        // then remove the new one from the map, so after this filtering, the given map will just\n        // contain those need to be added.\n        uuidComponentMap.remove(functionComp.getXmlPath());\n      }\n    }\n    // now add new function components into mappingData\n    it = uuidComponentMap.keySet().iterator();\n    while (it.hasNext()) {\n      Object key = it.next();\n      FunctionComponent comp = uuidComponentMap.get(key);\n      Log.logInfo(this, \"Added '\" + comp + \"' to mappingData.\");\n      mappingData.addFunctionComponent(comp);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3005, "initialization": ["Iterator iterator = iterator()"], "initializationStart": [614], "initializationEnd": [624], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 679, "focalAPIEnd": 689, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["iterator.remove()"], "useStart": [697], "useEnd": [709], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ivmai/JCGO/tree/master/goclsp/clsp_fix/java/util/AbstractCollection.java", "rawCode": "  /**\n   * Remove all elements from the collection (optional operation). This implementation obtains an\n   * iterator over the collection and calls next and remove on it repeatedly (thus this method will\n   * fail with an UnsupportedOperationException if the Iterator's remove method does) until there\n   * are no more elements to remove. Many implementations will have a faster way of doing this.\n   *\n   * @throws UnsupportedOperationException if the Iterator returned by iterator does not provide an\n   *     implementation of remove\n   * @see Iterator#remove()\n   */\n  public void clear() {\n    Iterator itr = iterator();\n    int pos = size();\n    while (--pos >= 0) {\n      itr.next();\n      itr.remove();\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3006, "initialization": ["Iterator iterator = Collection.iterator()"], "initializationStart": [125], "initializationEnd": [137], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 173, "guardExpressionEnd": 192, "guardBlockStart": 173, "guardBlockEnd": 279, "focalAPI": "element = iterator.next()", "focalAPIStart": 227, "focalAPIEnd": 235, "followUpCheck": "add(element)", "checkType": "IF", "followUpCheckExpressionStart": 244, "followUpCheckExpressionEnd": 257, "followUpCheckBlockStart": 244, "followUpCheckBlockEnd": 273, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gaurav/taxondna/tree/master/com/ggvaidya/TaxonDNA/DNA/SequenceList.java", "rawCode": "  /** Adds all Sequences in the collection to this SequenceList. */\n  public boolean addAll(Collection c) {\n    Iterator i = c.iterator();\n    boolean changed = false;\n\n    while (i.hasNext()) {\n      Sequence seq = (Sequence) i.next();\n\n      if (add(seq)) changed = true;\n    }\n\n    if (changed) {\n      sortedBy = SORT_UNSORTED;\n      modified();\n    }\n\n    return changed;\n  }\n"}, {"dataset": "next", "exampleID": 3007, "initialization": ["Iterator iterator = getEntries()"], "initializationStart": [118], "initializationEnd": [130], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 99, "guardExpressionEnd": 147, "guardBlockStart": 99, "guardBlockEnd": 282, "focalAPI": "element = iterator.next()", "focalAPIStart": 204, "focalAPIEnd": 213, "followUpCheck": "isSelected(element)", "checkType": "IF", "followUpCheckExpressionStart": 221, "followUpCheckExpressionEnd": 241, "followUpCheckBlockStart": 221, "followUpCheckBlockEnd": 276, "use": ["List.add(element)"], "useStart": [252], "useEnd": [267], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cstamas/plexus-components/tree/master/plexus-io/src/main/java/org/codehaus/plexus/components/io/resources/AbstractPlexusIoArchiveResourceCollection.java", "rawCode": "  public Iterator getResources() throws IOException {\n    final List result = new ArrayList();\n    for (Iterator it = getEntries(); it.hasNext(); ) {\n      final PlexusIoResource res = (PlexusIoResource) it.next();\n      if (isSelected(res)) {\n        result.add(res);\n      }\n    }\n    return result.iterator();\n  }\n"}, {"dataset": "next", "exampleID": 3008, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [2690], "initializationEnd": [2710], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["warn(String,*)"], "tryExpressionStart": 801, "tryExpressionEnd": 805, "tryBlockStart": 801, "tryBlockEnd": 4606, "catchExpressionStart": 4424, "catchExpressionEnd": 4444, "catchBlockStart": 4424, "catchBlockEnd": 4495, "exceptionHandlingCallStart": [4456], "exceptionHandlingCallEnd": [4484], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 2663, "guardExpressionEnd": 2735, "guardBlockStart": 2663, "guardBlockEnd": 3266, "focalAPI": "element = iterator.next()", "focalAPIStart": 2779, "focalAPIEnd": 2796, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["ThreadLocalManager.clear()"], "finallyExpressionStart": 4496, "finallyExpressionEnd": 4504, "finallyBlockStart": 4496, "finallyBlockEnd": 4606, "cleanUpCallStart": [4567], "cleanUpCallEnd": [4595], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta12/kernel-impl/src/main/java/org/sakaiproject/cluster/impl/SakaiClusterService.java", "rawCode": "    /**\n     * Run the maintenance thread. Every REFRESH seconds, re-register this app server as alive in\n     * the cluster. Then check for any cluster entries that are more than EXPIRED seconds old,\n     * indicating a failed app server, and remove that record, that server's sessions, generating\n     * appropriate session events so the other app servers know what's going on. The \"then\" checks\n     * need not be done each iteration - run them on 1 of n randomly choosen iterations. In a\n     * clustered environment, this also distributes the work over the cluster better.\n     */\n    public void run() {\n      // wait till things are rolling\n      ComponentManager.waitTillConfigured();\n\n      if (M_log.isDebugEnabled()) M_log.debug(\"run()\");\n\n      while (!m_maintenanceCheckerStop) {\n        try {\n          final String serverIdInstance = m_serverConfigurationService.getServerIdInstance();\n\n          if (M_log.isDebugEnabled()) M_log.debug(\"checking...\");\n\n          // if we have been closed, reopen!\n          String statement = clusterServiceSql.getReadServerSql();\n          Object[] fields = new Object[1];\n          fields[0] = serverIdInstance;\n          List results = m_sqlService.dbRead(statement, fields, null);\n          if (results.isEmpty()) {\n            M_log.warn(\n                \"run(): server has been closed in cluster table, reopened: \" + serverIdInstance);\n\n            statement = clusterServiceSql.getInsertServerSql();\n            fields[0] = serverIdInstance;\n            boolean ok = m_sqlService.dbWrite(statement, fields);\n            if (!ok) {\n              M_log.warn(\"start(): dbWrite failed\");\n            }\n          }\n\n          // update our alive and well status\n          else {\n            // register that this app server is alive and well\n            statement = clusterServiceSql.getUpdateServerSql();\n            fields[0] = serverIdInstance;\n            boolean ok = m_sqlService.dbWrite(statement, fields);\n            if (!ok) {\n              M_log.warn(\"run(): dbWrite failed: \" + statement);\n            }\n          }\n\n          // pick a random number, 0..99, to see if we want to do the full ghosting / cleanup\n          // activities now\n          int rand = (int) (Math.random() * 100.0);\n          if (rand < m_ghostingPercent) {\n            // get all expired open app servers not me\n            statement = clusterServiceSql.getListExpiredServers(m_expired);\n            // setup the fields to skip reading me!\n            fields[0] = serverIdInstance;\n\n            List instances = m_sqlService.dbRead(statement, fields, null);\n\n            // close any severs found to be expired\n            for (Iterator iInstances = instances.iterator(); iInstances.hasNext(); ) {\n              String serverId = (String) iInstances.next();\n\n              // close the server - delete the record\n              statement = clusterServiceSql.getDeleteServerSql();\n              fields[0] = serverId;\n              boolean ok = m_sqlService.dbWrite(statement, fields);\n              if (!ok) {\n                M_log.warn(\"run(): dbWrite failed: \" + statement);\n              }\n\n              M_log.warn(\n                  \"run(): ghost-busting server: \" + serverId + \" from : \" + serverIdInstance);\n            }\n\n            // Close all sessions left over from deleted servers.\n            int nbrClosed = m_usageSessionService.closeSessionsOnInvalidServers(getServers());\n            if ((nbrClosed > 0) && M_log.isInfoEnabled())\n              M_log.info(\"Closed \" + nbrClosed + \" orphaned usage session records\");\n\n            // Delete any orphaned locks from closed or missing sessions.\n            statement = clusterServiceSql.getOrphanedLockSessionsSql();\n            List sessions = m_sqlService.dbRead(statement);\n            if (sessions.size() > 0) {\n              if (M_log.isInfoEnabled())\n                M_log.info(\n                    \"Found \" + sessions.size() + \" closed or deleted sessions in lock table\");\n              statement = clusterServiceSql.getDeleteLocksSql();\n              for (Iterator iSessions = sessions.iterator(); iSessions.hasNext(); ) {\n                fields[0] = (String) iSessions.next();\n                boolean ok = m_sqlService.dbWrite(statement, fields);\n                if (!ok) {\n                  M_log.warn(\"run(): dbWrite failed: \" + statement);\n                }\n              }\n            }\n          }\n        } catch (Throwable e) {\n          M_log.warn(\"exception: \", e);\n        } finally {\n          // clear out any current access bindings\n          m_threadLocalManager.clear();\n        }\n\n        // cycle every REFRESH seconds\n        if (!m_maintenanceCheckerStop) {\n          try {\n            Thread.sleep(m_refresh * 1000L);\n          } catch (Exception ignore) {\n          }\n        }\n      }\n\n      if (M_log.isDebugEnabled()) M_log.debug(\"done\");\n    }\n"}, {"dataset": "next", "exampleID": 3009, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [244], "initializationEnd": [263], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 270, "guardExpressionEnd": 299, "guardBlockStart": 270, "guardBlockEnd": 532, "focalAPI": "element = iterator.next()", "focalAPIStart": 342, "focalAPIEnd": 360, "followUpCheck": "element.getSeverity() == IStatus.WARNING", "checkType": "IF", "followUpCheckExpressionStart": 368, "followUpCheckExpressionEnd": 413, "followUpCheckBlockStart": 368, "followUpCheckBlockEnd": 526, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Teiid-Designer/teiid-designer/tree/master/plugins/org.teiid.designer.core/src/org/teiid/designer/core/refactor/OrganizeImportCommandHelperNonXsd.java", "rawCode": "  /**\n   * @param problems\n   * @return IStatus\n   * @since 4.3\n   */\n  private IStatus createFinalResultStatus(List problems) {\n\n    IStatus resultStatus = null;\n    int numErrors = 0;\n    int numWarnings = 0;\n    final Iterator problemIter = problems.iterator();\n\n    while (problemIter.hasNext()) {\n      final IStatus aStatus = (IStatus) problemIter.next();\n      if (aStatus.getSeverity() == IStatus.WARNING) {\n        ++numWarnings;\n      } else if (aStatus.getSeverity() == IStatus.ERROR) {\n        ++numErrors;\n      }\n    }\n\n    // Create the final status ...\n    final IStatus[] statusArray = (IStatus[]) problems.toArray(new IStatus[problems.size()]);\n    if (numWarnings != 0 && numErrors == 0) {\n      final int code = EXECUTE_WITH_WARNINGS;\n      final Object[] params = new Object[] {new Integer(numWarnings)};\n      final String msg =\n          ModelerCore.Util.getString(\"OrganizeImportCommand.warnings\", params); // $NON-NLS-1$\n      resultStatus = new MultiStatus(PLUGINID, code, statusArray, msg, null);\n    } else if (numWarnings == 0 && numErrors != 0) {\n      final int code = EXECUTE_WITH_ERRORS;\n      final Object[] params = new Object[] {new Integer(numErrors)};\n      final String msg =\n          ModelerCore.Util.getString(\"OrganizeImportCommand.errors\", params); // $NON-NLS-1$\n      resultStatus = new MultiStatus(PLUGINID, code, statusArray, msg, null);\n    } else if (numWarnings != 0 && numErrors != 0) {\n      final int code = EXECUTE_WITH_WARNINGS_AND_ERRORS;\n      final Object[] params = new Object[] {new Integer(numWarnings), new Integer(numErrors)};\n      final String msg =\n          ModelerCore.Util.getString(\n              \"OrganizeImportCommand.warnings_and_errors\", params); // $NON-NLS-1$\n      resultStatus = new MultiStatus(PLUGINID, code, statusArray, msg, null);\n    } else {\n      final int code = EXECUTE_WITH_NO_WARNINGS_AND_ERRORS;\n      final String msg =\n          ModelerCore.Util.getString(\"OrganizeImportCommand.no_warnings_or_errors\"); // $NON-NLS-1$\n      resultStatus = new MultiStatus(PLUGINID, code, statusArray, msg, null);\n    }\n\n    return resultStatus;\n  }\n"}, {"dataset": "next", "exampleID": 3010, "initialization": ["Iterator iterator = toIterator(*)"], "initializationStart": [2134], "initializationEnd": [2180], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator!=null&&iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 2188, "guardExpressionEnd": 2260, "guardBlockStart": 2188, "guardBlockEnd": 3084, "focalAPI": "element = iterator.next()", "focalAPIStart": 2322, "focalAPIEnd": 2350, "followUpCheck": "UtilValidate.isNotEmpty(element.getString(\"productPromoId\")) && UtilValidate.isNotEmpty(element.getString(\"productPromoRuleId\")) && UtilValidate.isNotEmpty(element.getString(\"productPromoActionSeqId\"))", "checkType": "IF", "followUpCheckExpressionStart": 2360, "followUpCheckExpressionEnd": 2629, "followUpCheckBlockStart": 2360, "followUpCheckBlockEnd": 3076, "use": ["Delegator.makeValidValue(String,element)"], "useStart": [2689], "useEnd": [2757], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/QADM/SCG/tree/master/opentaps-1.5/applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java", "rawCode": "  /** For GWP Promotions with multiple alternatives, selects an alternative to the current GWP */\n  public static String setDesiredAlternateGwpProductId(\n      HttpServletRequest request, HttpServletResponse response) {\n    ShoppingCart cart = getCartObject(request);\n    Delegator delegator = (Delegator) request.getAttribute(\"delegator\");\n    LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(\"dispatcher\");\n    String alternateGwpProductId = request.getParameter(\"alternateGwpProductId\");\n    String alternateGwpLineStr = request.getParameter(\"alternateGwpLine\");\n    Locale locale = UtilHttp.getLocale(request);\n\n    if (UtilValidate.isEmpty(alternateGwpProductId)) {\n      request.setAttribute(\n          \"_ERROR_MESSAGE_\",\n          UtilProperties.getMessage(\n              resource_error,\n              \"OrderCouldNotSelectAlternateGiftNoAlternateGwpProductIdPassed\",\n              locale));\n      return \"error\";\n    }\n    if (UtilValidate.isEmpty(alternateGwpLineStr)) {\n      request.setAttribute(\n          \"_ERROR_MESSAGE_\",\n          UtilProperties.getMessage(\n              resource_error, \"OrderCouldNotSelectAlternateGiftNoAlternateGwpLinePassed\", locale));\n      return \"error\";\n    }\n\n    int alternateGwpLine = 0;\n    try {\n      alternateGwpLine = Integer.parseInt(alternateGwpLineStr);\n    } catch (Exception e) {\n      request.setAttribute(\n          \"_ERROR_MESSAGE_\",\n          UtilProperties.getMessage(\n              resource_error,\n              \"OrderCouldNotSelectAlternateGiftAlternateGwpLineIsNotAValidNumber\",\n              locale));\n      return \"error\";\n    }\n\n    ShoppingCartItem cartLine = cart.findCartItem(alternateGwpLine);\n    if (cartLine == null) {\n      request.setAttribute(\n          \"_ERROR_MESSAGE_\",\n          \"Could not select alternate gift, no cart line item found for #\"\n              + alternateGwpLine\n              + \".\");\n      return \"error\";\n    }\n\n    if (cartLine.getIsPromo()) {\n      // note that there should just be one promo adjustment, the reversal of the GWP, so use that\n      // to get the promo action key\n      Iterator checkOrderAdjustments = UtilMisc.toIterator(cartLine.getAdjustments());\n      while (checkOrderAdjustments != null && checkOrderAdjustments.hasNext()) {\n        GenericValue checkOrderAdjustment = (GenericValue) checkOrderAdjustments.next();\n        if (UtilValidate.isNotEmpty(checkOrderAdjustment.getString(\"productPromoId\"))\n            && UtilValidate.isNotEmpty(checkOrderAdjustment.getString(\"productPromoRuleId\"))\n            && UtilValidate.isNotEmpty(checkOrderAdjustment.getString(\"productPromoActionSeqId\"))) {\n          GenericPK productPromoActionPk =\n              delegator.makeValidValue(\"ProductPromoAction\", checkOrderAdjustment).getPrimaryKey();\n          cart.setDesiredAlternateGiftByAction(productPromoActionPk, alternateGwpProductId);\n          if (cart.getOrderType().equals(\"SALES_ORDER\")) {\n            org.ofbiz.order.shoppingcart.product.ProductPromoWorker.doPromotions(cart, dispatcher);\n          }\n          return \"success\";\n        }\n      }\n    }\n\n    request.setAttribute(\n        \"_ERROR_MESSAGE_\",\n        \"Could not select alternate gift, cart line item found for #\"\n            + alternateGwpLine\n            + \" does not appear to be a valid promotional gift.\");\n    return \"error\";\n  }\n"}, {"dataset": "next", "exampleID": 3011, "initialization": ["Iterator iterator = Collection.iterator()"], "initializationStart": [384], "initializationEnd": [399], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 366, "guardExpressionEnd": 415, "guardBlockStart": 366, "guardBlockEnd": 519, "focalAPI": "element = iterator.next()", "focalAPIStart": 452, "focalAPIEnd": 460, "followUpCheck": "element.equals(targetRef)", "checkType": "IF", "followUpCheckExpressionStart": 468, "followUpCheckExpressionEnd": 500, "followUpCheckBlockStart": 468, "followUpCheckBlockEnd": 513, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta06/kernel-util/src/main/java/org/sakaiproject/util/EntityCollections.java", "rawCode": "  /**\n   * Test a collection of Entity reference Strings for the specified Entity\n   *\n   * @param refs The collection (String) of entity refs\n   * @param entity The Entity to find.\n   * @return true if found, false if not.\n   */\n  public static boolean refCollectionContainsEntity(Collection refs, Entity entity) {\n    String targetRef = entity.getReference();\n    for (Iterator i = refs.iterator(); i.hasNext(); ) {\n      String entityRef = (String) i.next();\n      if (entityRef.equals(targetRef)) return true;\n    }\n\n    return false;\n  }\n"}, {"dataset": "next", "exampleID": 3012, "initialization": ["Iterator iterator = PropertyList.iterator()"], "initializationStart": [442], "initializationEnd": [454], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 424, "guardExpressionEnd": 470, "guardBlockStart": 424, "guardBlockEnd": 651, "focalAPI": "element = iterator.next()", "focalAPIStart": 589, "focalAPIEnd": 597, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.toString()"], "useStart": [589], "useEnd": [608], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/toepi/adito/tree/master/adito-core/src/main/java/com/adito/security/authwizard/forms/AthenticationSchemeSummaryForm.java", "rawCode": "  public void init(AbstractWizardSequence sequence, HttpServletRequest request) throws Exception {\n    resourceName =\n        (String) sequence.getAttribute(AthenticationSchemeDetailsForm.ATTR_RESOURCE_NAME, null);\n    PropertyList l =\n        (PropertyList)\n            sequence.getAttribute(\n                AthenticationSchemePolicySelectionForm.ATTR_SELECTED_POLICIES, null);\n    selectedPolicies = new ArrayList();\n    for (Iterator i = l.iterator(); i.hasNext(); ) {\n      selectedPolicies.add(\n          PolicyDatabaseFactory.getInstance()\n              .getPolicy(Integer.parseInt(i.next().toString()))\n              .getResourceName());\n    }\n    user = (User) sequence.getAttribute(AthenticationSchemeSelectionAction.ATTR_USER, null);\n  }\n"}, {"dataset": "next", "exampleID": 3013, "initialization": ["Iterator iterator = FeatureCollection<FeatureType, Feature>.iterator()"], "initializationStart": [111], "initializationEnd": [130], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 93, "guardExpressionEnd": 154, "guardBlockStart": 93, "guardBlockEnd": 176, "focalAPI": "element = iterator.next()", "focalAPIStart": 145, "focalAPIEnd": 153, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdeolive/geotools-old/tree/master/modules/extension/app-schema/app-schema/src/test/java/org/geotools/data/complex/GeoSciMLTest.java", "rawCode": "  private int size(FeatureCollection<FeatureType, Feature> features) {\n    int size = 0;\n    for (Iterator i = features.iterator(); i.hasNext(); i.next()) {\n      size++;\n    }\n    return size;\n  }\n"}, {"dataset": "next", "exampleID": 3014, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [178], "initializationEnd": [195], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 157, "guardExpressionEnd": 214, "guardBlockStart": 157, "guardBlockEnd": 494, "focalAPI": "element = iterator.next()", "focalAPIStart": 245, "focalAPIEnd": 256, "followUpCheck": "element.getName().equals(\"Detail\")", "checkType": "IF", "followUpCheckExpressionStart": 264, "followUpCheckExpressionEnd": 301, "followUpCheckBlockStart": 264, "followUpCheckBlockEnd": 488, "use": ["element.getObject()", "element.getObject()"], "useStart": [330, 448], "useEnd": [347, 465], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ribab/Zed/tree/master/slick/src/org/newdawn/slick/font/effects/OutlineWobbleEffect.java", "rawCode": "  /** @see org.newdawn.slick.font.effects.OutlineEffect#setValues(java.util.List) */\n  public void setValues(List values) {\n    super.setValues(values);\n    for (Iterator iter = values.iterator(); iter.hasNext(); ) {\n      Value value = (Value) iter.next();\n      if (value.getName().equals(\"Detail\")) {\n        detail = ((Float) value.getObject()).floatValue();\n      } else if (value.getName().equals(\"Amplitude\")) {\n        amplitude = ((Float) value.getObject()).floatValue();\n      }\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3015, "initialization": ["Iterator iterator = iterator()"], "initializationStart": [906], "initializationEnd": [916], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 887, "guardExpressionEnd": 933, "guardBlockStart": 887, "guardBlockEnd": 1307, "focalAPI": "element = iterator.next()", "focalAPIStart": 964, "focalAPIEnd": 973, "followUpCheck": "element.getLabel().isArea()", "checkType": "IF", "followUpCheckExpressionStart": 981, "followUpCheckExpressionEnd": 1007, "followUpCheckBlockStart": 981, "followUpCheckBlockEnd": 1301, "use": ["element.getLabel()"], "useStart": [985], "useEnd": [997], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victortey/geotool/tree/master/modules/unsupported/geometry/src/main/java/org/geotools/geometry/iso/operation/relate/EdgeEndBundle.java", "rawCode": "  /**\n   * To compute the summary label for a side, the algorithm is: FOR all edges IF any edge's location\n   * is INTERIOR for the side, side location = INTERIOR ELSE IF there is at least one EXTERIOR\n   * attribute, side location = EXTERIOR ELSE side location = NULL <br>\n   * Note that it is possible for two sides to have apparently contradictory information i.e. one\n   * edge side may indicate that it is in the interior of a geometry, while another edge side may\n   * indicate the exterior of the same geometry. This is not an incompatibility -\n   * GeometryCollections may contain two Polygons that touch along an edge. This is the reason for\n   * Interior-primacy rule above - it results in the summary label having the Geometry interior on\n   * <b>both</b> sides.\n   *\n   * @param geomIndex\n   * @param side\n   */\n  private void computeLabelSide(int geomIndex, int side) {\n    for (Iterator it = iterator(); it.hasNext(); ) {\n      EdgeEnd e = (EdgeEnd) it.next();\n      if (e.getLabel().isArea()) {\n        int loc = e.getLabel().getLocation(geomIndex, side);\n        if (loc == Location.INTERIOR) {\n          label.setLocation(geomIndex, side, Location.INTERIOR);\n          return;\n        } else if (loc == Location.EXTERIOR) label.setLocation(geomIndex, side, Location.EXTERIOR);\n      }\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3016, "initialization": ["Iterator iterator = Set.iterator()"], "initializationStart": [707], "initializationEnd": [742], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 890, "guardExpressionEnd": 927, "guardBlockStart": 890, "guardBlockEnd": 2009, "focalAPI": "element = iterator.next()", "focalAPIStart": 1275, "focalAPIEnd": 1301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getConsentTierID()", "element.getStatement()", "element.getParticipantResponse()", "element.getParticipantResponseID()", "iterator.next()"], "useStart": [1343, 1423, 1498, 1596, 1706], "useEnd": [1373, 1449, 1534, 1634, 1732], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jimmccusker/caTissue/tree/master/software/caTissue/modules/core/src/main/java/edu/wustl/catissuecore/action/ConsentResponseDisplayAction.java", "rawCode": "  /**\n   * Returns the Map of consent responses for given collection protocol.\n   *\n   * @param consentResponse : consentResponse\n   * @param isMapExist : isMapExist\n   * @return Map : Map\n   */\n  private Map getConsentResponseMap(Collection consentResponse, boolean isMapExist) {\n    final Map consentResponseMap = new LinkedHashMap();\n    final Set consentResponseMapSorted = new LinkedHashSet();\n    // bug 8905\n    final List idList = new ArrayList();\n    idList.addAll(consentResponse);\n    Collections.sort(idList, new IdComparator());\n    consentResponseMapSorted.addAll(idList);\n    // bug 8905\n    if (consentResponseMapSorted != null) {\n      int i = 0;\n      final Iterator consentResponseIter = consentResponseMapSorted.iterator();\n      String idKey = null;\n      String statementKey = null;\n      String responsekey = null;\n      String participantResponceIdKey = null;\n      while (consentResponseIter.hasNext()) {\n        idKey = \"ConsentBean:\" + i + \"_consentTierID\";\n        statementKey = \"ConsentBean:\" + i + \"_statement\";\n        responsekey = \"ConsentBean:\" + i + \"_participantResponse\";\n        participantResponceIdKey = \"ConsentBean:\" + i + \"_participantResponseID\";\n\n        if (isMapExist) {\n          final ConsentBean consentBean = (ConsentBean) consentResponseIter.next();\n          consentResponseMap.put(idKey, consentBean.getConsentTierID());\n          consentResponseMap.put(statementKey, consentBean.getStatement());\n          consentResponseMap.put(responsekey, consentBean.getParticipantResponse());\n          consentResponseMap.put(participantResponceIdKey, consentBean.getParticipantResponseID());\n        } else {\n          final ConsentTier consent = (ConsentTier) consentResponseIter.next();\n          consentResponseMap.put(idKey, consent.getId());\n          consentResponseMap.put(statementKey, consent.getStatement());\n          consentResponseMap.put(responsekey, \"\");\n          consentResponseMap.put(participantResponceIdKey, \"\");\n        }\n        i++;\n      }\n\n      this.consentCounter = i;\n    }\n    return consentResponseMap;\n  }\n"}, {"dataset": "next", "exampleID": 3017, "initialization": ["Iterator iterator = Collection.iterator()"], "initializationStart": [434], "initializationEnd": [461], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 416, "guardExpressionEnd": 477, "guardBlockStart": 416, "guardBlockEnd": 605, "focalAPI": "element = iterator.next()", "focalAPIStart": 497, "focalAPIEnd": 505, "followUpCheck": "!(element instanceof String)", "checkType": "IF", "followUpCheckExpressionStart": 513, "followUpCheckExpressionEnd": 540, "followUpCheckBlockStart": 513, "followUpCheckBlockEnd": 550, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.2.0-rc13/kernel-util/src/main/java/org/sakaiproject/util/StringUtil.java", "rawCode": "  /**\n   * Determine if a String is contained in a String Collection\n   *\n   * @param stringCollection The collection of (String) to scan\n   * @param value The value to look for\n   * @return true if the string was found\n   */\n  public static boolean contains(Collection stringCollection, String value) {\n    if (stringCollection == null || value == null) return false;\n    if (value.length() == 0) return false;\n    for (Iterator i = stringCollection.iterator(); i.hasNext(); ) {\n      Object o = i.next();\n      if (!(o instanceof String)) continue;\n      if (value.equals((String) o)) return true;\n    }\n    return false;\n  }\n"}, {"dataset": "next", "exampleID": 3018, "initialization": ["Iterator iterator = Element.elementIterator(String)"], "initializationStart": [147], "initializationEnd": [187], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 193, "guardExpressionEnd": 215, "guardBlockStart": 193, "guardBlockEnd": 352, "focalAPI": "element = iterator.next()", "focalAPIStart": 252, "focalAPIEnd": 263, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.attributeValue(String)", "element.attributeValue(String)"], "useStart": [282, 314], "useEnd": [312, 344], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gogoego-gerrit/iucn-sis/tree/master/org.hibernate/src/org/hibernate/cfg/HbmBinder.java", "rawCode": "  public static java.util.Map getParameterTypes(Element queryElem) {\n    java.util.Map result = new java.util.LinkedHashMap();\n    Iterator iter = queryElem.elementIterator(\"query-param\");\n    while (iter.hasNext()) {\n      Element element = (Element) iter.next();\n      result.put(element.attributeValue(\"name\"), element.attributeValue(\"type\"));\n    }\n    return result;\n  }\n"}, {"dataset": "next", "exampleID": 3019, "initialization": ["Iterator iterator = Topic.getWebLinks()", "Iterator iterator = iterator()"], "initializationStart": [63, 215], "initializationEnd": [82, 245], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 194, "guardExpressionEnd": 264, "guardBlockStart": 194, "guardBlockEnd": 369, "focalAPI": "element = iterator.next()", "focalAPIStart": 300, "focalAPIEnd": 311, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ExternalLink(element,boolean)"], "useStart": [331], "useEnd": [359], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdwyah/orig-myhippocampus/tree/master/src/main/java/com/aavu/client/gui/glossary/SimpleTopicDisplay.java", "rawCode": "  private void doLinks(final Topic topic) {\n    Set weblinks = topic.getWebLinks();\n    if (!weblinks.isEmpty()) {\n      mainP.add(new HeaderLabel(ConstHolder.myConstants.occurrences()));\n      for (Iterator iter = topic.getWebLinks().iterator(); iter.hasNext(); ) {\n        WebLink link = (WebLink) iter.next();\n        mainP.add(new ExternalLink(link, true));\n      }\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3020, "initialization": ["Iterator iterator = HashSet.iterator()"], "initializationStart": [158], "initializationEnd": [194], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 139, "guardExpressionEnd": 211, "guardBlockStart": 139, "guardBlockEnd": 468, "focalAPI": "element = iterator.next()", "focalAPIStart": 281, "focalAPIEnd": 290, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.registerMapNode(MapNodePositionHolder)"], "useStart": [312], "useEnd": [360], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iwabuchiken/freemind/tree/master/freemind/plugins/map/Registration.java", "rawCode": "  public void registerMapNode(MapNodePositionHolder pMapNodePositionHolder) {\n    mMapNodePositionHolders.add(pMapNodePositionHolder);\n    for (Iterator it = mMapNodePositionListeners.iterator(); it.hasNext(); ) {\n      MapNodePositionListener listener = (MapNodePositionListener) it.next();\n      try {\n        listener.registerMapNode(pMapNodePositionHolder);\n      } catch (Exception e) {\n        freemind.main.Resources.getInstance().logException(e);\n      }\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3021, "initialization": ["Iterator iterator = Set.iterator()"], "initializationStart": [369], "initializationEnd": [388], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 394, "guardExpressionEnd": 421, "guardBlockStart": 394, "guardBlockEnd": 678, "focalAPI": "element = iterator.next()", "focalAPIStart": 457, "focalAPIEnd": 473, "followUpCheck": "element.getSessionId().equals(session.getId())", "checkType": "IF", "followUpCheckExpressionStart": 482, "followUpCheckExpressionEnd": 530, "followUpCheckBlockStart": 482, "followUpCheckBlockEnd": 672, "use": ["iterator.remove()", "Set.remove(element)"], "useStart": [614, 642], "useEnd": [632, 663], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DeaneLooi/CyberPrime/tree/master/CyberPrime2/src/cyberprime/servlets/HttpServletListener.java", "rawCode": "  /** @see HttpSessionListener#sessionDestroyed(HttpSessionEvent) */\n  public void sessionDestroyed(HttpSessionEvent arg0) {\n    System.out.println(\"Session deleted\");\n    HttpSession session = arg0.getSession();\n    System.out.println(session.getId());\n    Set sessions = (Set) session.getServletContext().getAttribute(\"cyberprime.sessions\");\n    Iterator sessionIt = sessions.iterator();\n    while (sessionIt.hasNext()) {\n      Sessions sess = (Sessions) sessionIt.next();\n\n      if (sess.getSessionId().equals(session.getId())) {\n        System.out.println(\"Listener Client id =\" + sess.getClientId());\n        sessionIt.remove();\n        sessions.remove(sess);\n      }\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3022, "initialization": ["Iterator iterator = iterator()"], "initializationStart": [136], "initializationEnd": [155], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 115, "guardExpressionEnd": 174, "guardBlockStart": 115, "guardBlockEnd": 338, "focalAPI": "element = iterator.next()", "focalAPIStart": 226, "focalAPIEnd": 237, "followUpCheck": "element.basicGetModel().equals(child)", "checkType": "IF", "followUpCheckExpressionStart": 245, "followUpCheckExpressionEnd": 282, "followUpCheckBlockStart": 245, "followUpCheckBlockEnd": 332, "use": ["removeChild(element)"], "useStart": [293], "useEnd": [308], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schmeedy/gmf/tree/master/org.eclipse.gmf.runtime/plugins/org.eclipse.gmf.runtime.diagram.ui/src/org/eclipse/gmf/runtime/diagram/ui/editparts/SemanticListCompartmentEditPart.java", "rawCode": "  /** @param child */\n  protected void semanticChildRemoved(EObject child) {\n    if (children == null) return;\n    for (Iterator iter = children.iterator(); iter.hasNext(); ) {\n      GraphicalEditPart ep = (GraphicalEditPart) iter.next();\n      if (ep.basicGetModel().equals(child)) {\n        removeChild(ep);\n        break;\n      }\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3023, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [875], "initializationEnd": [899], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 905, "guardExpressionEnd": 924, "guardBlockStart": 905, "guardBlockEnd": 3298, "focalAPI": "element = iterator.next()", "focalAPIStart": 1016, "focalAPIEnd": 1024, "followUpCheck": "element.getState() == CmsResource.STATE_DELETED", "checkType": "IF", "followUpCheckExpressionStart": 1085, "followUpCheckExpressionEnd": 1136, "followUpCheckBlockStart": 1085, "followUpCheckBlockEnd": 1168, "use": ["CmsObject.readPropertyObject(element,String,boolean)", "CmsObject.readPropertyObject(element,String,boolean)", "CmsObject.getSitePath(element)", "CmsObject.readPropertyObject(element,String,boolean)", "CmsObject.readPropertyObject(element,String,boolean)"], "useStart": [1337, 1897, 2057, 2141, 2375], "useEnd": [1403, 1948, 2080, 2188, 2428], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alkacon/alkacon-oamp/tree/master/com.alkacon.opencms.documentcenter/src/com/alkacon/opencms/documentcenter/CmsCategory.java", "rawCode": "  /**\n   * Initializes the lists of main and sub categories for the LGT category overview.\n   *\n   * <p>\n   *\n   * @param cms the CmsObject\n   * @param folderUri the folder URI, all subelements are searched for the property\n   * @param propertyName the name of the category property, usually \"category\"\n   */\n  public void init(CmsObject cms, String folderUri, String propertyName) {\n\n    List allCategories = new ArrayList();\n    List mainCat = new ArrayList();\n    List subCat = new ArrayList();\n\n    // get all resources in the current folder with the property propertyName set\n    try {\n      allCategories = cms.readResourcesWithProperty(folderUri, propertyName);\n    } catch (CmsException e) {\n      // should never happen\n    }\n\n    Locale locale = cms.getRequestContext().getLocale();\n    String locTitle = CATEGORY_TITLE + \"_\" + locale.toString();\n\n    Iterator i = allCategories.iterator();\n    while (i.hasNext()) {\n      // get the resource and the absolute path\n      CmsResource curRes = (CmsResource) i.next();\n\n      try {\n\n        // filter deleted categories\n        if (curRes.getState() == CmsResource.STATE_DELETED) {\n          continue;\n        }\n\n        // first check if this category is shown in the current frontend language\n        String catLanguage = \"\";\n        try {\n          catLanguage =\n              cms.readPropertyObject(curRes, PROPERTY_CATEGORY_LANGUAGES, false).getValue();\n        } catch (CmsException e) {\n          // ignore, property might not be defined\n        }\n\n        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(catLanguage)) {\n          if (!catLanguage.equals(VALUE_CATEGORY_LANGUAGES_ALL)\n              && !catLanguage.equals(locale.toString())) {\n            // category is not shown in this frontend locale\n            continue;\n          }\n        }\n\n        // get the properties of the current resource\n        String positionString = cms.readPropertyObject(curRes, propertyName, false).getValue();\n        positionString = CategoryTree.cutPrefix(positionString);\n\n        String resourceName = cms.getSitePath(curRes);\n        String title = \"\";\n        try {\n          title = cms.readPropertyObject(curRes, locTitle, false).getValue();\n        } catch (CmsException e) {\n          // ignore, property might not be defined\n        }\n        if (CmsStringUtil.isEmptyOrWhitespaceOnly(title)) {\n          title = cms.readPropertyObject(curRes, CATEGORY_TITLE, false).getValue();\n        }\n        // check the presence of the title property\n        if (CmsStringUtil.isEmptyOrWhitespaceOnly(title)) {\n          title = CmsResource.getName(resourceName);\n          // cut the trailing \"/\" if present\n          if (CmsResource.isFolder(title)) {\n            title = title.substring(0, (title.length() - 1));\n          }\n        }\n\n        if (positionString.indexOf(CATEGORY_SEPARATOR) == -1) {\n          // add resources which are a \"main\" category to the main list\n          mainCat.add(new CmsCategory(title, positionString, resourceName));\n        } else {\n          // add resources which are a \"sub\" category to the sub list\n          subCat.add(new CmsCategory(title, positionString, resourceName));\n        }\n\n      } catch (CmsException e) {\n        // do nothing, current resource is not added to the category list\n      }\n    }\n\n    // sort the list of main categories by the value of the property\n    if (mainCat.size() >= 2) {\n      Collections.sort(mainCat);\n    }\n\n    // set the size of the main category list to an even value\n    if ((mainCat.size() % 2) == 1) {\n      mainCat.add(new CmsCategory());\n    }\n\n    // set the member variables\n    setMainCategories(mainCat);\n    setSubCategories(subCat);\n\n    // clear objects to release memory\n    mainCat = null;\n    subCat = null;\n  }\n"}, {"dataset": "next", "exampleID": 3024, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [201], "initializationEnd": [213], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 219, "guardExpressionEnd": 239, "guardBlockStart": 219, "guardBlockEnd": 374, "focalAPI": "element = iterator.next()", "focalAPIStart": 283, "focalAPIEnd": 292, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/badiale/xCommerce/tree/master/src/org/xcommerce/beans/LinhaDeCompra.java", "rawCode": "  private static void teste03() {\n    Session session = DBManager.getSession();\n    session.beginTransaction();\n\n    List l = LinhaDeCompra.findAll();\n    log.debug(\"Pegou todas!\");\n\n    Iterator it = l.iterator();\n    while (it.hasNext()) {\n      LinhaDeCompra lc = (LinhaDeCompra) it.next();\n      log.info(\"Descricao do produto: \" + lc.getProduto().getDescricao());\n    }\n\n    log.debug(\"Exibiu todas as descricao das linhas de compra compra.\");\n\n    session.getTransaction().commit();\n  }\n"}, {"dataset": "next", "exampleID": 3025, "initialization": ["Iterator iterator = List<CourseManagementService>.iterator()"], "initializationStart": [123], "initializationEnd": [142], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 98, "guardExpressionEnd": 165, "guardBlockStart": 98, "guardBlockEnd": 482, "focalAPI": "element = iterator.next()", "focalAPIStart": 229, "focalAPIEnd": 244, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getEnrollmentSet(String)"], "useStart": [273], "useEnd": [310], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sakai-mirror/edu-services/tree/master/cm-service/cm-impl/hibernate-impl/impl/src/java/org/sakaiproject/coursemanagement/impl/CourseManagementServiceFederatedImpl.java", "rawCode": "  public EnrollmentSet getEnrollmentSet(String enrollmentSetEid) throws IdNotFoundException {\n    for (Iterator implIter = implList.iterator(); implIter.hasNext(); ) {\n      CourseManagementService cm = (CourseManagementService) implIter.next();\n      try {\n        return cm.getEnrollmentSet(enrollmentSetEid);\n      } catch (IdNotFoundException ide) {\n        if (log.isDebugEnabled())\n          log.debug(cm + \" could not locate enrollmentSet \" + enrollmentSetEid);\n      }\n    }\n    throw new IdNotFoundException(enrollmentSetEid, EnrollmentSet.class.getName());\n  }\n"}, {"dataset": "next", "exampleID": 3026, "initialization": ["Iterator iterator = JSONObject.keys()"], "initializationStart": [46086], "initializationEnd": [46103], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 46109, "guardExpressionEnd": 46135, "guardBlockStart": 46109, "guardBlockEnd": 46231, "focalAPI": "element = iterator.next()", "focalAPIStart": 46162, "focalAPIEnd": 46177, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["List.remove(element)", "toJSONObject(element)", "toJSONObject(element)", "toJSONArray(element)", "new JSONObject(element)", "new JSONArray(element)", "toJSONObject(element)", "toJSONArray(element)", "toJSONObject(element)", "toJSONArray(element)"], "useStart": [46196, 47061, 47744, 48401, 50608, 51105, 51430, 51897, 53074, 53355], "useEnd": [46223, 47085, 47768, 48427, 50630, 51126, 51454, 51923, 53101, 53381], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vogella/vogella/tree/master/de.vogella.json.directoryreader/src/org/json/Test.java", "rawCode": "  public void testJSON() throws Exception {\n    double eps = 2.220446049250313e-16;\n    Iterator iterator;\n    JSONArray jsonarray;\n    JSONObject jsonobject;\n    JSONStringer jsonstringer;\n    Object object;\n    String string;\n\n    Beany beanie = new Beany(\"A beany object\", 42, true);\n\n    string = \"[0.1]\";\n    jsonarray = new JSONArray(string);\n    assertEquals(\"[0.1]\", jsonarray.toString());\n\n    jsonobject = new JSONObject();\n    object = null;\n    jsonobject.put(\"booga\", object);\n    jsonobject.put(\"wooga\", JSONObject.NULL);\n    assertEquals(\"{\\\"wooga\\\":null}\", jsonobject.toString());\n    assertTrue(jsonobject.isNull(\"booga\"));\n\n    jsonobject = new JSONObject();\n    jsonobject.increment(\"two\");\n    jsonobject.increment(\"two\");\n    assertEquals(\"{\\\"two\\\":2}\", jsonobject.toString());\n    assertEquals(2, jsonobject.getInt(\"two\"));\n\n    string = \"{ \\\"list of lists\\\" : [ [1, 2, 3], [4, 5, 6], ] }\";\n    jsonobject = new JSONObject(string);\n    assertEquals(\n        \"{\\\"list of lists\\\": [\\n\"\n            + \" [\\n\"\n            + \" 1,\\n\"\n            + \" 2,\\n\"\n            + \" 3\\n\"\n            + \" ],\\n\"\n            + \" [\\n\"\n            + \" 4,\\n\"\n            + \" 5,\\n\"\n            + \" 6\\n\"\n            + \" ]\\n\"\n            + \"]}\",\n        jsonobject.toString(4));\n    assertEquals(\n        \"<list of lists><array>1</array><array>2</array><array>3</array></list of lists><list of lists><array>4</array><array>5</array><array>6</array></list of lists>\",\n        XML.toString(jsonobject));\n\n    string =\n        \"<recipe name=\\\"bread\\\" prep_time=\\\"5 mins\\\" cook_time=\\\"3 hours\\\"> <title>Basic bread</title> <ingredient amount=\\\"8\\\" unit=\\\"dL\\\">Flour</ingredient> <ingredient amount=\\\"10\\\" unit=\\\"grams\\\">Yeast</ingredient> <ingredient amount=\\\"4\\\" unit=\\\"dL\\\" state=\\\"warm\\\">Water</ingredient> <ingredient amount=\\\"1\\\" unit=\\\"teaspoon\\\">Salt</ingredient> <instructions> <step>Mix all ingredients together.</step> <step>Knead thoroughly.</step> <step>Cover with a cloth, and leave for one hour in warm room.</step> <step>Knead again.</step> <step>Place in a bread baking tin.</step> <step>Cover with a cloth, and leave for one hour in warm room.</step> <step>Bake in the oven at 180(degrees)C for 30 minutes.</step> </instructions> </recipe> \";\n    jsonobject = XML.toJSONObject(string);\n    assertEquals(\n        \"{\\\"recipe\\\": {\\n \\\"title\\\": \\\"Basic bread\\\",\\n \\\"cook_time\\\": \\\"3 hours\\\",\\n \\\"instructions\\\": {\\\"step\\\": [\\n \\\"Mix all ingredients together.\\\",\\n \\\"Knead thoroughly.\\\",\\n \\\"Cover with a cloth, and leave for one hour in warm room.\\\",\\n \\\"Knead again.\\\",\\n \\\"Place in a bread baking tin.\\\",\\n \\\"Cover with a cloth, and leave for one hour in warm room.\\\",\\n \\\"Bake in the oven at 180(degrees)C for 30 minutes.\\\"\\n ]},\\n \\\"name\\\": \\\"bread\\\",\\n \\\"ingredient\\\": [\\n {\\n \\\"content\\\": \\\"Flour\\\",\\n \\\"amount\\\": 8,\\n \\\"unit\\\": \\\"dL\\\"\\n },\\n {\\n \\\"content\\\": \\\"Yeast\\\",\\n \\\"amount\\\": 10,\\n \\\"unit\\\": \\\"grams\\\"\\n },\\n {\\n \\\"content\\\": \\\"Water\\\",\\n \\\"amount\\\": 4,\\n \\\"unit\\\": \\\"dL\\\",\\n \\\"state\\\": \\\"warm\\\"\\n },\\n {\\n \\\"content\\\": \\\"Salt\\\",\\n \\\"amount\\\": 1,\\n \\\"unit\\\": \\\"teaspoon\\\"\\n }\\n ],\\n \\\"prep_time\\\": \\\"5 mins\\\"\\n}}\",\n        jsonobject.toString(4));\n\n    jsonobject = JSONML.toJSONObject(string);\n    assertEquals(\n        \"{\\\"cook_time\\\":\\\"3 hours\\\",\\\"name\\\":\\\"bread\\\",\\\"tagName\\\":\\\"recipe\\\",\\\"childNodes\\\":[{\\\"tagName\\\":\\\"title\\\",\\\"childNodes\\\":[\\\"Basic bread\\\"]},{\\\"amount\\\":8,\\\"unit\\\":\\\"dL\\\",\\\"tagName\\\":\\\"ingredient\\\",\\\"childNodes\\\":[\\\"Flour\\\"]},{\\\"amount\\\":10,\\\"unit\\\":\\\"grams\\\",\\\"tagName\\\":\\\"ingredient\\\",\\\"childNodes\\\":[\\\"Yeast\\\"]},{\\\"amount\\\":4,\\\"unit\\\":\\\"dL\\\",\\\"tagName\\\":\\\"ingredient\\\",\\\"state\\\":\\\"warm\\\",\\\"childNodes\\\":[\\\"Water\\\"]},{\\\"amount\\\":1,\\\"unit\\\":\\\"teaspoon\\\",\\\"tagName\\\":\\\"ingredient\\\",\\\"childNodes\\\":[\\\"Salt\\\"]},{\\\"tagName\\\":\\\"instructions\\\",\\\"childNodes\\\":[{\\\"tagName\\\":\\\"step\\\",\\\"childNodes\\\":[\\\"Mix all ingredients together.\\\"]},{\\\"tagName\\\":\\\"step\\\",\\\"childNodes\\\":[\\\"Knead thoroughly.\\\"]},{\\\"tagName\\\":\\\"step\\\",\\\"childNodes\\\":[\\\"Cover with a cloth, and leave for one hour in warm room.\\\"]},{\\\"tagName\\\":\\\"step\\\",\\\"childNodes\\\":[\\\"Knead again.\\\"]},{\\\"tagName\\\":\\\"step\\\",\\\"childNodes\\\":[\\\"Place in a bread baking tin.\\\"]},{\\\"tagName\\\":\\\"step\\\",\\\"childNodes\\\":[\\\"Cover with a cloth, and leave for one hour in warm room.\\\"]},{\\\"tagName\\\":\\\"step\\\",\\\"childNodes\\\":[\\\"Bake in the oven at 180(degrees)C for 30 minutes.\\\"]}]}],\\\"prep_time\\\":\\\"5 mins\\\"}\",\n        jsonobject.toString());\n    assertEquals(\n        \"<recipe cook_time=\\\"3 hours\\\" name=\\\"bread\\\" prep_time=\\\"5 mins\\\"><title>Basic bread</title><ingredient amount=\\\"8\\\" unit=\\\"dL\\\">Flour</ingredient><ingredient amount=\\\"10\\\" unit=\\\"grams\\\">Yeast</ingredient><ingredient amount=\\\"4\\\" unit=\\\"dL\\\" state=\\\"warm\\\">Water</ingredient><ingredient amount=\\\"1\\\" unit=\\\"teaspoon\\\">Salt</ingredient><instructions><step>Mix all ingredients together.</step><step>Knead thoroughly.</step><step>Cover with a cloth, and leave for one hour in warm room.</step><step>Knead again.</step><step>Place in a bread baking tin.</step><step>Cover with a cloth, and leave for one hour in warm room.</step><step>Bake in the oven at 180(degrees)C for 30 minutes.</step></instructions></recipe>\",\n        JSONML.toString(jsonobject));\n\n    jsonarray = JSONML.toJSONArray(string);\n    assertEquals(\n        \"[\\n \\\"recipe\\\",\\n {\\n \\\"cook_time\\\": \\\"3 hours\\\",\\n \\\"name\\\": \\\"bread\\\",\\n \\\"prep_time\\\": \\\"5 mins\\\"\\n },\\n [\\n \\\"title\\\",\\n \\\"Basic bread\\\"\\n ],\\n [\\n \\\"ingredient\\\",\\n {\\n \\\"amount\\\": 8,\\n \\\"unit\\\": \\\"dL\\\"\\n },\\n \\\"Flour\\\"\\n ],\\n [\\n \\\"ingredient\\\",\\n {\\n \\\"amount\\\": 10,\\n \\\"unit\\\": \\\"grams\\\"\\n },\\n \\\"Yeast\\\"\\n ],\\n [\\n \\\"ingredient\\\",\\n {\\n \\\"amount\\\": 4,\\n \\\"unit\\\": \\\"dL\\\",\\n \\\"state\\\": \\\"warm\\\"\\n },\\n \\\"Water\\\"\\n ],\\n [\\n \\\"ingredient\\\",\\n {\\n \\\"amount\\\": 1,\\n \\\"unit\\\": \\\"teaspoon\\\"\\n },\\n \\\"Salt\\\"\\n ],\\n [\\n \\\"instructions\\\",\\n [\\n \\\"step\\\",\\n \\\"Mix all ingredients together.\\\"\\n ],\\n [\\n \\\"step\\\",\\n \\\"Knead thoroughly.\\\"\\n ],\\n [\\n \\\"step\\\",\\n \\\"Cover with a cloth, and leave for one hour in warm room.\\\"\\n ],\\n [\\n \\\"step\\\",\\n \\\"Knead again.\\\"\\n ],\\n [\\n \\\"step\\\",\\n \\\"Place in a bread baking tin.\\\"\\n ],\\n [\\n \\\"step\\\",\\n \\\"Cover with a cloth, and leave for one hour in warm room.\\\"\\n ],\\n [\\n \\\"step\\\",\\n \\\"Bake in the oven at 180(degrees)C for 30 minutes.\\\"\\n ]\\n ]\\n]\",\n        jsonarray.toString(4));\n    assertEquals(\n        \"<recipe cook_time=\\\"3 hours\\\" name=\\\"bread\\\" prep_time=\\\"5 mins\\\"><title>Basic bread</title><ingredient amount=\\\"8\\\" unit=\\\"dL\\\">Flour</ingredient><ingredient amount=\\\"10\\\" unit=\\\"grams\\\">Yeast</ingredient><ingredient amount=\\\"4\\\" unit=\\\"dL\\\" state=\\\"warm\\\">Water</ingredient><ingredient amount=\\\"1\\\" unit=\\\"teaspoon\\\">Salt</ingredient><instructions><step>Mix all ingredients together.</step><step>Knead thoroughly.</step><step>Cover with a cloth, and leave for one hour in warm room.</step><step>Knead again.</step><step>Place in a bread baking tin.</step><step>Cover with a cloth, and leave for one hour in warm room.</step><step>Bake in the oven at 180(degrees)C for 30 minutes.</step></instructions></recipe>\",\n        JSONML.toString(jsonarray));\n\n    string =\n        \"<div id=\\\"demo\\\" class=\\\"JSONML\\\"><p>JSONML is a transformation between <b>JSON</b> and <b>XML</b> that preserves ordering of document features.</p><p>JSONML can work with JSON arrays or JSON objects.</p><p>Three<br/>little<br/>words</p></div>\";\n    jsonobject = JSONML.toJSONObject(string);\n    assertEquals(\n        \"{\\n \\\"id\\\": \\\"demo\\\",\\n \\\"tagName\\\": \\\"div\\\",\\n \\\"class\\\": \\\"JSONML\\\",\\n \\\"childNodes\\\": [\\n {\\n \\\"tagName\\\": \\\"p\\\",\\n \\\"childNodes\\\": [\\n \\\"JSONML is a transformation between\\\",\\n {\\n \\\"tagName\\\": \\\"b\\\",\\n \\\"childNodes\\\": [\\\"JSON\\\"]\\n },\\n \\\"and\\\",\\n {\\n \\\"tagName\\\": \\\"b\\\",\\n \\\"childNodes\\\": [\\\"XML\\\"]\\n },\\n \\\"that preserves ordering of document features.\\\"\\n ]\\n },\\n {\\n \\\"tagName\\\": \\\"p\\\",\\n \\\"childNodes\\\": [\\\"JSONML can work with JSON arrays or JSON objects.\\\"]\\n },\\n {\\n \\\"tagName\\\": \\\"p\\\",\\n \\\"childNodes\\\": [\\n \\\"Three\\\",\\n {\\\"tagName\\\": \\\"br\\\"},\\n \\\"little\\\",\\n {\\\"tagName\\\": \\\"br\\\"},\\n \\\"words\\\"\\n ]\\n }\\n ]\\n}\",\n        jsonobject.toString(4));\n    assertEquals(\n        \"<div id=\\\"demo\\\" class=\\\"JSONML\\\"><p>JSONML is a transformation between<b>JSON</b>and<b>XML</b>that preserves ordering of document features.</p><p>JSONML can work with JSON arrays or JSON objects.</p><p>Three<br/>little<br/>words</p></div>\",\n        JSONML.toString(jsonobject));\n\n    jsonarray = JSONML.toJSONArray(string);\n    assertEquals(\n        \"[\\n \\\"div\\\",\\n {\\n \\\"id\\\": \\\"demo\\\",\\n \\\"class\\\": \\\"JSONML\\\"\\n },\\n [\\n \\\"p\\\",\\n \\\"JSONML is a transformation between\\\",\\n [\\n \\\"b\\\",\\n \\\"JSON\\\"\\n ],\\n \\\"and\\\",\\n [\\n \\\"b\\\",\\n \\\"XML\\\"\\n ],\\n \\\"that preserves ordering of document features.\\\"\\n ],\\n [\\n \\\"p\\\",\\n \\\"JSONML can work with JSON arrays or JSON objects.\\\"\\n ],\\n [\\n \\\"p\\\",\\n \\\"Three\\\",\\n [\\\"br\\\"],\\n \\\"little\\\",\\n [\\\"br\\\"],\\n \\\"words\\\"\\n ]\\n]\",\n        jsonarray.toString(4));\n    assertEquals(\n        \"<div id=\\\"demo\\\" class=\\\"JSONML\\\"><p>JSONML is a transformation between<b>JSON</b>and<b>XML</b>that preserves ordering of document features.</p><p>JSONML can work with JSON arrays or JSON objects.</p><p>Three<br/>little<br/>words</p></div>\",\n        JSONML.toString(jsonarray));\n\n    string =\n        \"<person created=\\\"2006-11-11T19:23\\\" modified=\\\"2006-12-31T23:59\\\">\\n <firstName>Robert</firstName>\\n <lastName>Smith</lastName>\\n <address type=\\\"home\\\">\\n <street>12345 Sixth Ave</street>\\n <city>Anytown</city>\\n <state>CA</state>\\n <postalCode>98765-4321</postalCode>\\n </address>\\n </person>\";\n    jsonobject = XML.toJSONObject(string);\n    assertEquals(\n        \"{\\\"person\\\": {\\n \\\"lastName\\\": \\\"Smith\\\",\\n \\\"address\\\": {\\n \\\"postalCode\\\": \\\"98765-4321\\\",\\n \\\"street\\\": \\\"12345 Sixth Ave\\\",\\n \\\"state\\\": \\\"CA\\\",\\n \\\"type\\\": \\\"home\\\",\\n \\\"city\\\": \\\"Anytown\\\"\\n },\\n \\\"created\\\": \\\"2006-11-11T19:23\\\",\\n \\\"firstName\\\": \\\"Robert\\\",\\n \\\"modified\\\": \\\"2006-12-31T23:59\\\"\\n}}\",\n        jsonobject.toString(4));\n\n    jsonobject = new JSONObject(beanie);\n    assertEquals(\n        \"{\\\"string\\\":\\\"A beany object\\\",\\\"BENT\\\":\\\"All uppercase key\\\",\\\"boolean\\\":true,\\\"number\\\":42,\\\"x\\\":\\\"x\\\"}\",\n        jsonobject.toString());\n\n    string =\n        \"{ \\\"entity\\\": { \\\"imageURL\\\": \\\"\\\", \\\"name\\\": \\\"IXXXXXXXXXXXXX\\\", \\\"id\\\": 12336, \\\"ratingCount\\\": null, \\\"averageRating\\\": null } }\";\n    jsonobject = new JSONObject(string);\n    assertEquals(\n        \"{\\\"entity\\\": {\\n \\\"id\\\": 12336,\\n \\\"averageRating\\\": null,\\n \\\"ratingCount\\\": null,\\n \\\"name\\\": \\\"IXXXXXXXXXXXXX\\\",\\n \\\"imageURL\\\": \\\"\\\"\\n}}\",\n        jsonobject.toString(2));\n\n    jsonstringer = new JSONStringer();\n    string =\n        jsonstringer\n            .object()\n            .key(\"single\")\n            .value(\"MARIE HAA'S\")\n            .key(\"Johnny\")\n            .value(\"MARIE HAA\\\\'S\")\n            .key(\"foo\")\n            .value(\"bar\")\n            .key(\"baz\")\n            .array()\n            .object()\n            .key(\"quux\")\n            .value(\"Thanks, Josh!\")\n            .endObject()\n            .endArray()\n            .key(\"obj keys\")\n            .value(JSONObject.getNames(beanie))\n            .endObject()\n            .toString();\n    assertEquals(\n        \"{\\\"single\\\":\\\"MARIE HAA'S\\\",\\\"Johnny\\\":\\\"MARIE HAA\\\\\\\\'S\\\",\\\"foo\\\":\\\"bar\\\",\\\"baz\\\":[{\\\"quux\\\":\\\"Thanks, Josh!\\\"}],\\\"obj keys\\\":[\\\"aString\\\",\\\"aNumber\\\",\\\"aBoolean\\\"]}\",\n        string);\n\n    assertEquals(\n        \"{\\\"a\\\":[[[\\\"b\\\"]]]}\",\n        new JSONStringer()\n            .object()\n            .key(\"a\")\n            .array()\n            .array()\n            .array()\n            .value(\"b\")\n            .endArray()\n            .endArray()\n            .endArray()\n            .endObject()\n            .toString());\n\n    jsonstringer = new JSONStringer();\n    jsonstringer.array();\n    jsonstringer.value(1);\n    jsonstringer.array();\n    jsonstringer.value(null);\n    jsonstringer.array();\n    jsonstringer.object();\n    jsonstringer.key(\"empty-array\").array().endArray();\n    jsonstringer.key(\"answer\").value(42);\n    jsonstringer.key(\"null\").value(null);\n    jsonstringer.key(\"false\").value(false);\n    jsonstringer.key(\"true\").value(true);\n    jsonstringer.key(\"big\").value(123456789e+88);\n    jsonstringer.key(\"small\").value(123456789e-88);\n    jsonstringer.key(\"empty-object\").object().endObject();\n    jsonstringer.key(\"long\");\n    jsonstringer.value(9223372036854775807L);\n    jsonstringer.endObject();\n    jsonstringer.value(\"two\");\n    jsonstringer.endArray();\n    jsonstringer.value(true);\n    jsonstringer.endArray();\n    jsonstringer.value(98.6);\n    jsonstringer.value(-100.0);\n    jsonstringer.object();\n    jsonstringer.endObject();\n    jsonstringer.object();\n    jsonstringer.key(\"one\");\n    jsonstringer.value(1.00);\n    jsonstringer.endObject();\n    jsonstringer.value(beanie);\n    jsonstringer.endArray();\n    assertEquals(\n        \"[1,[null,[{\\\"empty-array\\\":[],\\\"answer\\\":42,\\\"null\\\":null,\\\"false\\\":false,\\\"true\\\":true,\\\"big\\\":1.23456789E96,\\\"small\\\":1.23456789E-80,\\\"empty-object\\\":{},\\\"long\\\":9223372036854775807},\\\"two\\\"],true],98.6,-100,{},{\\\"one\\\":1},{\\\"A beany object\\\":42}]\",\n        jsonstringer.toString());\n    assertEquals(\n        \"[\\n 1,\\n [\\n null,\\n [\\n {\\n \\\"empty-array\\\": [],\\n \\\"empty-object\\\": {},\\n \\\"answer\\\": 42,\\n \\\"true\\\": true,\\n \\\"false\\\": false,\\n \\\"long\\\": 9223372036854775807,\\n \\\"big\\\": 1.23456789E96,\\n \\\"small\\\": 1.23456789E-80,\\n \\\"null\\\": null\\n },\\n \\\"two\\\"\\n ],\\n true\\n ],\\n 98.6,\\n -100,\\n {},\\n {\\\"one\\\": 1},\\n {\\\"A beany object\\\": 42}\\n]\",\n        new JSONArray(jsonstringer.toString()).toString(4));\n\n    int ar[] = {1, 2, 3};\n    JSONArray ja = new JSONArray(ar);\n    assertEquals(\"[1,2,3]\", ja.toString());\n    assertEquals(\"<array>1</array><array>2</array><array>3</array>\", XML.toString(ar));\n\n    String sa[] = {\"aString\", \"aNumber\", \"aBoolean\"};\n    jsonobject = new JSONObject(beanie, sa);\n    jsonobject.put(\"Testing JSONString interface\", beanie);\n    assertEquals(\n        \"{\\n \\\"aBoolean\\\": true,\\n \\\"aNumber\\\": 42,\\n \\\"aString\\\": \\\"A beany object\\\",\\n \\\"Testing JSONString interface\\\": {\\\"A beany object\\\":42}\\n}\",\n        jsonobject.toString(4));\n\n    jsonobject =\n        new JSONObject(\n            \"{slashes: '///', closetag: '</script>', backslash:'\\\\\\\\', ei: {quotes: '\\\"\\\\''},eo: {a: '\\\"quoted\\\"', b:\\\"don't\\\"}, quotes: [\\\"'\\\", '\\\"']}\");\n    assertEquals(\n        \"{\\n \\\"quotes\\\": [\\n \\\"'\\\",\\n \\\"\\\\\\\"\\\"\\n ],\\n \\\"slashes\\\": \\\"///\\\",\\n \\\"ei\\\": {\\\"quotes\\\": \\\"\\\\\\\"'\\\"},\\n \\\"eo\\\": {\\n \\\"b\\\": \\\"don't\\\",\\n \\\"a\\\": \\\"\\\\\\\"quoted\\\\\\\"\\\"\\n },\\n \\\"closetag\\\": \\\"<\\\\/script>\\\",\\n \\\"backslash\\\": \\\"\\\\\\\\\\\"\\n}\",\n        jsonobject.toString(2));\n    assertEquals(\n        \"<quotes>&apos;</quotes><quotes>&quot;</quotes><slashes>///</slashes><ei><quotes>&quot;&apos;</quotes></ei><eo><b>don&apos;t</b><a>&quot;quoted&quot;</a></eo><closetag>&lt;/script&gt;</closetag><backslash>\\\\</backslash>\",\n        XML.toString(jsonobject));\n\n    jsonobject =\n        new JSONObject(\n            \"{foo: [true, false,9876543210, 0.0, 1.00000001, 1.000000000001, 1.00000000000000001,\"\n                + \" .00000000000000001, 2.00, 0.1, 2e100, -32,[],{}, \\\"string\\\"], \"\n                + \" to : null, op : 'Good',\"\n                + \"ten:10} postfix comment\");\n    jsonobject.put(\"String\", \"98.6\");\n    jsonobject.put(\"JSONObject\", new JSONObject());\n    jsonobject.put(\"JSONArray\", new JSONArray());\n    jsonobject.put(\"int\", 57);\n    jsonobject.put(\"double\", 123456789012345678901234567890.);\n    jsonobject.put(\"true\", true);\n    jsonobject.put(\"false\", false);\n    jsonobject.put(\"null\", JSONObject.NULL);\n    jsonobject.put(\"bool\", \"true\");\n    jsonobject.put(\"zero\", -0.0);\n    jsonobject.put(\"\\\\u2028\", \"\\u2028\");\n    jsonobject.put(\"\\\\u2029\", \"\\u2029\");\n    jsonarray = jsonobject.getJSONArray(\"foo\");\n    jsonarray.put(666);\n    jsonarray.put(2001.99);\n    jsonarray.put(\"so \\\"fine\\\".\");\n    jsonarray.put(\"so <fine>.\");\n    jsonarray.put(true);\n    jsonarray.put(false);\n    jsonarray.put(new JSONArray());\n    jsonarray.put(new JSONObject());\n    jsonobject.put(\"keys\", JSONObject.getNames(jsonobject));\n    assertEquals(\n        \"{\\n \\\"to\\\": null,\\n \\\"ten\\\": 10,\\n \\\"JSONObject\\\": {},\\n \\\"JSONArray\\\": [],\\n \\\"op\\\": \\\"Good\\\",\\n \\\"keys\\\": [\\n \\\"to\\\",\\n \\\"ten\\\",\\n \\\"JSONObject\\\",\\n \\\"JSONArray\\\",\\n \\\"op\\\",\\n \\\"int\\\",\\n \\\"true\\\",\\n \\\"foo\\\",\\n \\\"zero\\\",\\n \\\"double\\\",\\n \\\"String\\\",\\n \\\"false\\\",\\n \\\"bool\\\",\\n \\\"\\\\\\\\u2028\\\",\\n \\\"\\\\\\\\u2029\\\",\\n \\\"null\\\"\\n ],\\n \\\"int\\\": 57,\\n \\\"true\\\": true,\\n \\\"foo\\\": [\\n true,\\n false,\\n 9876543210,\\n 0,\\n 1.00000001,\\n 1.000000000001,\\n 1,\\n 1.0E-17,\\n 2,\\n 0.1,\\n 2.0E100,\\n -32,\\n [],\\n {},\\n \\\"string\\\",\\n 666,\\n 2001.99,\\n \\\"so \\\\\\\"fine\\\\\\\".\\\",\\n \\\"so <fine>.\\\",\\n true,\\n false,\\n [],\\n {}\\n ],\\n \\\"zero\\\": -0,\\n \\\"double\\\": 1.2345678901234568E29,\\n \\\"String\\\": \\\"98.6\\\",\\n \\\"false\\\": false,\\n \\\"bool\\\": \\\"true\\\",\\n \\\"\\\\\\\\u2028\\\": \\\"\\\\u2028\\\",\\n \\\"\\\\\\\\u2029\\\": \\\"\\\\u2029\\\",\\n \\\"null\\\": null\\n}\",\n        jsonobject.toString(4));\n    assertEquals(\n        \"<to>null</to><ten>10</ten><JSONObject></JSONObject><op>Good</op><keys>to</keys><keys>ten</keys><keys>JSONObject</keys><keys>JSONArray</keys><keys>op</keys><keys>int</keys><keys>true</keys><keys>foo</keys><keys>zero</keys><keys>double</keys><keys>String</keys><keys>false</keys><keys>bool</keys><keys>\\\\u2028</keys><keys>\\\\u2029</keys><keys>null</keys><int>57</int><true>true</true><foo>true</foo><foo>false</foo><foo>9876543210</foo><foo>0.0</foo><foo>1.00000001</foo><foo>1.000000000001</foo><foo>1.0</foo><foo>1.0E-17</foo><foo>2.0</foo><foo>0.1</foo><foo>2.0E100</foo><foo>-32</foo><foo></foo><foo></foo><foo>string</foo><foo>666</foo><foo>2001.99</foo><foo>so &quot;fine&quot;.</foo><foo>so &lt;fine&gt;.</foo><foo>true</foo><foo>false</foo><foo></foo><foo></foo><zero>-0.0</zero><double>1.2345678901234568E29</double><String>98.6</String><false>false</false><bool>true</bool><\\\\u2028>\\u2028</\\\\u2028><\\\\u2029>\\u2029</\\\\u2029><null>null</null>\",\n        XML.toString(jsonobject));\n    assertEquals(98.6d, jsonobject.getDouble(\"String\"), eps);\n    assertTrue(jsonobject.getBoolean(\"bool\"));\n    assertEquals(null, jsonobject.getString(\"to\"));\n    assertEquals(\"true\", jsonobject.getString(\"true\"));\n    assertEquals(\n        \"[true,false,9876543210,0,1.00000001,1.000000000001,1,1.0E-17,2,0.1,2.0E100,-32,[],{},\\\"string\\\",666,2001.99,\\\"so \\\\\\\"fine\\\\\\\".\\\",\\\"so <fine>.\\\",true,false,[],{}]\",\n        jsonobject.getJSONArray(\"foo\").toString());\n    assertEquals(\"Good\", jsonobject.getString(\"op\"));\n    assertEquals(10, jsonobject.getInt(\"ten\"));\n    assertFalse(jsonobject.optBoolean(\"oops\"));\n\n    string =\n        \"<xml one = 1 two=' \\\"2\\\" '><five></five>First \\u0009&lt;content&gt;<five></five> This is \\\"content\\\". <three> 3 </three>JSON does not preserve the sequencing of elements and contents.<three> III </three> <three> T H R E E</three><four/>Content text is an implied structure in XML. <six content=\\\"6\\\"/>JSON does not have implied structure:<seven>7</seven>everything is explicit.<![CDATA[CDATA blocks<are><supported>!]]></xml>\";\n    jsonobject = XML.toJSONObject(string);\n    assertEquals(\n        \"{\\\"xml\\\": {\\n \\\"content\\\": [\\n \\\"First \\\\t<content>\\\",\\n \\\"This is \\\\\\\"content\\\\\\\".\\\",\\n \\\"JSON does not preserve the sequencing of elements and contents.\\\",\\n \\\"Content text is an implied structure in XML.\\\",\\n \\\"JSON does not have implied structure:\\\",\\n \\\"everything is explicit.\\\",\\n \\\"CDATA blocks<are><supported>!\\\"\\n ],\\n \\\"two\\\": \\\" \\\\\\\"2\\\\\\\" \\\",\\n \\\"seven\\\": 7,\\n \\\"five\\\": [\\n \\\"\\\",\\n \\\"\\\"\\n ],\\n \\\"one\\\": 1,\\n \\\"three\\\": [\\n 3,\\n \\\"III\\\",\\n \\\"T H R E E\\\"\\n ],\\n \\\"four\\\": \\\"\\\",\\n \\\"six\\\": {\\\"content\\\": 6}\\n}}\",\n        jsonobject.toString(2));\n    assertEquals(\n        \"<xml>First \\t&lt;content&gt;\\n\"\n            + \"This is &quot;content&quot;.\\n\"\n            + \"JSON does not preserve the sequencing of elements and contents.\\n\"\n            + \"Content text is an implied structure in XML.\\n\"\n            + \"JSON does not have implied structure:\\n\"\n            + \"everything is explicit.\\n\"\n            + \"CDATA blocks&lt;are&gt;&lt;supported&gt;!<two> &quot;2&quot; </two><seven>7</seven><five/><five/><one>1</one><three>3</three><three>III</three><three>T H R E E</three><four/><six>6</six></xml>\",\n        XML.toString(jsonobject));\n\n    ja = JSONML.toJSONArray(string);\n    assertEquals(\n        \"[\\n \\\"xml\\\",\\n {\\n \\\"two\\\": \\\" \\\\\\\"2\\\\\\\" \\\",\\n \\\"one\\\": 1\\n },\\n [\\\"five\\\"],\\n \\\"First \\\\t<content>\\\",\\n [\\\"five\\\"],\\n \\\"This is \\\\\\\"content\\\\\\\".\\\",\\n [\\n \\\"three\\\",\\n 3\\n ],\\n \\\"JSON does not preserve the sequencing of elements and contents.\\\",\\n [\\n \\\"three\\\",\\n \\\"III\\\"\\n ],\\n [\\n \\\"three\\\",\\n \\\"T H R E E\\\"\\n ],\\n [\\\"four\\\"],\\n \\\"Content text is an implied structure in XML.\\\",\\n [\\n \\\"six\\\",\\n {\\\"content\\\": 6}\\n ],\\n \\\"JSON does not have implied structure:\\\",\\n [\\n \\\"seven\\\",\\n 7\\n ],\\n \\\"everything is explicit.\\\",\\n \\\"CDATA blocks<are><supported>!\\\"\\n]\",\n        ja.toString(4));\n    assertEquals(\n        \"<xml two=\\\" &quot;2&quot; \\\" one=\\\"1\\\"><five/>First \\t&lt;content&gt;<five/>This is &quot;content&quot;.<three></three>JSON does not preserve the sequencing of elements and contents.<three>III</three><three>T H R E E</three><four/>Content text is an implied structure in XML.<six content=\\\"6\\\"/>JSON does not have implied structure:<seven></seven>everything is explicit.CDATA blocks&lt;are&gt;&lt;supported&gt;!</xml>\",\n        JSONML.toString(ja));\n\n    string =\n        \"<xml do='0'>uno<a re='1' mi='2'>dos<b fa='3'/>tres<c>true</c>quatro</a>cinqo<d>seis<e/></d></xml>\";\n    ja = JSONML.toJSONArray(string);\n    assertEquals(\n        \"[\\n \\\"xml\\\",\\n {\\\"do\\\": 0},\\n \\\"uno\\\",\\n [\\n \\\"a\\\",\\n {\\n \\\"re\\\": 1,\\n \\\"mi\\\": 2\\n },\\n \\\"dos\\\",\\n [\\n \\\"b\\\",\\n {\\\"fa\\\": 3}\\n ],\\n \\\"tres\\\",\\n [\\n \\\"c\\\",\\n true\\n ],\\n \\\"quatro\\\"\\n ],\\n \\\"cinqo\\\",\\n [\\n \\\"d\\\",\\n \\\"seis\\\",\\n [\\\"e\\\"]\\n ]\\n]\",\n        ja.toString(4));\n    assertEquals(\n        \"<xml do=\\\"0\\\">uno<a re=\\\"1\\\" mi=\\\"2\\\">dos<b fa=\\\"3\\\"/>tres<c></c>quatro</a>cinqo<d>seis<e/></d></xml>\",\n        JSONML.toString(ja));\n\n    string =\n        \"<mapping><empty/> <class name = \\\"Customer\\\"> <field name = \\\"ID\\\" type = \\\"string\\\"> <bind-xml name=\\\"ID\\\" node=\\\"attribute\\\"/> </field> <field name = \\\"FirstName\\\" type = \\\"FirstName\\\"/> <field name = \\\"MI\\\" type = \\\"MI\\\"/> <field name = \\\"LastName\\\" type = \\\"LastName\\\"/> </class> <class name = \\\"FirstName\\\"> <field name = \\\"text\\\"> <bind-xml name = \\\"text\\\" node = \\\"text\\\"/> </field> </class> <class name = \\\"MI\\\"> <field name = \\\"text\\\"> <bind-xml name = \\\"text\\\" node = \\\"text\\\"/> </field> </class> <class name = \\\"LastName\\\"> <field name = \\\"text\\\"> <bind-xml name = \\\"text\\\" node = \\\"text\\\"/> </field> </class></mapping>\";\n    jsonobject = XML.toJSONObject(string);\n\n    assertEquals(\n        \"{\\\"mapping\\\": {\\n \\\"empty\\\": \\\"\\\",\\n \\\"class\\\": [\\n {\\n \\\"field\\\": [\\n {\\n \\\"bind-xml\\\": {\\n \\\"node\\\": \\\"attribute\\\",\\n \\\"name\\\": \\\"ID\\\"\\n },\\n \\\"name\\\": \\\"ID\\\",\\n \\\"type\\\": \\\"string\\\"\\n },\\n {\\n \\\"name\\\": \\\"FirstName\\\",\\n \\\"type\\\": \\\"FirstName\\\"\\n },\\n {\\n \\\"name\\\": \\\"MI\\\",\\n \\\"type\\\": \\\"MI\\\"\\n },\\n {\\n \\\"name\\\": \\\"LastName\\\",\\n \\\"type\\\": \\\"LastName\\\"\\n }\\n ],\\n \\\"name\\\": \\\"Customer\\\"\\n },\\n {\\n \\\"field\\\": {\\n \\\"bind-xml\\\": {\\n \\\"node\\\": \\\"text\\\",\\n \\\"name\\\": \\\"text\\\"\\n },\\n \\\"name\\\": \\\"text\\\"\\n },\\n \\\"name\\\": \\\"FirstName\\\"\\n },\\n {\\n \\\"field\\\": {\\n \\\"bind-xml\\\": {\\n \\\"node\\\": \\\"text\\\",\\n \\\"name\\\": \\\"text\\\"\\n },\\n \\\"name\\\": \\\"text\\\"\\n },\\n \\\"name\\\": \\\"MI\\\"\\n },\\n {\\n \\\"field\\\": {\\n \\\"bind-xml\\\": {\\n \\\"node\\\": \\\"text\\\",\\n \\\"name\\\": \\\"text\\\"\\n },\\n \\\"name\\\": \\\"text\\\"\\n },\\n \\\"name\\\": \\\"LastName\\\"\\n }\\n ]\\n}}\",\n        jsonobject.toString(2));\n    assertEquals(\n        \"<mapping><empty/><class><field><bind-xml><node>attribute</node><name>ID</name></bind-xml><name>ID</name><type>string</type></field><field><name>FirstName</name><type>FirstName</type></field><field><name>MI</name><type>MI</type></field><field><name>LastName</name><type>LastName</type></field><name>Customer</name></class><class><field><bind-xml><node>text</node><name>text</name></bind-xml><name>text</name></field><name>FirstName</name></class><class><field><bind-xml><node>text</node><name>text</name></bind-xml><name>text</name></field><name>MI</name></class><class><field><bind-xml><node>text</node><name>text</name></bind-xml><name>text</name></field><name>LastName</name></class></mapping>\",\n        XML.toString(jsonobject));\n    ja = JSONML.toJSONArray(string);\n    assertEquals(\n        \"[\\n \\\"mapping\\\",\\n [\\\"empty\\\"],\\n [\\n \\\"class\\\",\\n {\\\"name\\\": \\\"Customer\\\"},\\n [\\n \\\"field\\\",\\n {\\n \\\"name\\\": \\\"ID\\\",\\n \\\"type\\\": \\\"string\\\"\\n },\\n [\\n \\\"bind-xml\\\",\\n {\\n \\\"node\\\": \\\"attribute\\\",\\n \\\"name\\\": \\\"ID\\\"\\n }\\n ]\\n ],\\n [\\n \\\"field\\\",\\n {\\n \\\"name\\\": \\\"FirstName\\\",\\n \\\"type\\\": \\\"FirstName\\\"\\n }\\n ],\\n [\\n \\\"field\\\",\\n {\\n \\\"name\\\": \\\"MI\\\",\\n \\\"type\\\": \\\"MI\\\"\\n }\\n ],\\n [\\n \\\"field\\\",\\n {\\n \\\"name\\\": \\\"LastName\\\",\\n \\\"type\\\": \\\"LastName\\\"\\n }\\n ]\\n ],\\n [\\n \\\"class\\\",\\n {\\\"name\\\": \\\"FirstName\\\"},\\n [\\n \\\"field\\\",\\n {\\\"name\\\": \\\"text\\\"},\\n [\\n \\\"bind-xml\\\",\\n {\\n \\\"node\\\": \\\"text\\\",\\n \\\"name\\\": \\\"text\\\"\\n }\\n ]\\n ]\\n ],\\n [\\n \\\"class\\\",\\n {\\\"name\\\": \\\"MI\\\"},\\n [\\n \\\"field\\\",\\n {\\\"name\\\": \\\"text\\\"},\\n [\\n \\\"bind-xml\\\",\\n {\\n \\\"node\\\": \\\"text\\\",\\n \\\"name\\\": \\\"text\\\"\\n }\\n ]\\n ]\\n ],\\n [\\n \\\"class\\\",\\n {\\\"name\\\": \\\"LastName\\\"},\\n [\\n \\\"field\\\",\\n {\\\"name\\\": \\\"text\\\"},\\n [\\n \\\"bind-xml\\\",\\n {\\n \\\"node\\\": \\\"text\\\",\\n \\\"name\\\": \\\"text\\\"\\n }\\n ]\\n ]\\n ]\\n]\",\n        ja.toString(4));\n    assertEquals(\n        \"<mapping><empty/><class name=\\\"Customer\\\"><field name=\\\"ID\\\" type=\\\"string\\\"><bind-xml node=\\\"attribute\\\" name=\\\"ID\\\"/></field><field name=\\\"FirstName\\\" type=\\\"FirstName\\\"/><field name=\\\"MI\\\" type=\\\"MI\\\"/><field name=\\\"LastName\\\" type=\\\"LastName\\\"/></class><class name=\\\"FirstName\\\"><field name=\\\"text\\\"><bind-xml node=\\\"text\\\" name=\\\"text\\\"/></field></class><class name=\\\"MI\\\"><field name=\\\"text\\\"><bind-xml node=\\\"text\\\" name=\\\"text\\\"/></field></class><class name=\\\"LastName\\\"><field name=\\\"text\\\"><bind-xml node=\\\"text\\\" name=\\\"text\\\"/></field></class></mapping>\",\n        JSONML.toString(ja));\n\n    jsonobject =\n        XML.toJSONObject(\n            \"<?xml version=\\\"1.0\\\" ?><Book Author=\\\"Anonymous\\\"><Title>Sample Book</Title><Chapter id=\\\"1\\\">This is chapter 1. It is not very long or interesting.</Chapter><Chapter id=\\\"2\\\">This is chapter 2. Although it is longer than chapter 1, it is not any more interesting.</Chapter></Book>\");\n    assertEquals(\n        \"{\\\"Book\\\": {\\n \\\"Chapter\\\": [\\n {\\n \\\"content\\\": \\\"This is chapter 1. It is not very long or interesting.\\\",\\n \\\"id\\\": 1\\n },\\n {\\n \\\"content\\\": \\\"This is chapter 2. Although it is longer than chapter 1, it is not any more interesting.\\\",\\n \\\"id\\\": 2\\n }\\n ],\\n \\\"Author\\\": \\\"Anonymous\\\",\\n \\\"Title\\\": \\\"Sample Book\\\"\\n}}\",\n        jsonobject.toString(2));\n    assertEquals(\n        \"<Book><Chapter>This is chapter 1. It is not very long or interesting.<id>1</id></Chapter><Chapter>This is chapter 2. Although it is longer than chapter 1, it is not any more interesting.<id>2</id></Chapter><Author>Anonymous</Author><Title>Sample Book</Title></Book>\",\n        XML.toString(jsonobject));\n\n    jsonobject =\n        XML.toJSONObject(\n            \"<!DOCTYPE bCard 'http://www.cs.caltech.edu/~adam/schemas/bCard'><bCard><?xml default bCard firstname = '' lastname = '' company = '' email = '' homepage = ''?><bCard firstname = 'Rohit' lastname = 'Khare' company = 'MCI' email = 'khare@mci.net' homepage = 'http://pest.w3.org/'/><bCard firstname = 'Adam' lastname = 'Rifkin' company = 'Caltech Infospheres Project' email = 'adam@cs.caltech.edu' homepage = 'http://www.cs.caltech.edu/~adam/'/></bCard>\");\n    assertEquals(\n        \"{\\\"bCard\\\": {\\\"bCard\\\": [\\n {\\n \\\"email\\\": \\\"khare@mci.net\\\",\\n \\\"company\\\": \\\"MCI\\\",\\n \\\"lastname\\\": \\\"Khare\\\",\\n \\\"firstname\\\": \\\"Rohit\\\",\\n \\\"homepage\\\": \\\"http://pest.w3.org/\\\"\\n },\\n {\\n \\\"email\\\": \\\"adam@cs.caltech.edu\\\",\\n \\\"company\\\": \\\"Caltech Infospheres Project\\\",\\n \\\"lastname\\\": \\\"Rifkin\\\",\\n \\\"firstname\\\": \\\"Adam\\\",\\n \\\"homepage\\\": \\\"http://www.cs.caltech.edu/~adam/\\\"\\n }\\n]}}\",\n        jsonobject.toString(2));\n    assertEquals(\n        \"<bCard><bCard><email>khare@mci.net</email><company>MCI</company><lastname>Khare</lastname><firstname>Rohit</firstname><homepage>http://pest.w3.org/</homepage></bCard><bCard><email>adam@cs.caltech.edu</email><company>Caltech Infospheres Project</company><lastname>Rifkin</lastname><firstname>Adam</firstname><homepage>http://www.cs.caltech.edu/~adam/</homepage></bCard></bCard>\",\n        XML.toString(jsonobject));\n\n    jsonobject =\n        XML.toJSONObject(\n            \"<?xml version=\\\"1.0\\\"?><customer> <firstName> <text>Fred</text> </firstName> <ID>fbs0001</ID> <lastName> <text>Scerbo</text> </lastName> <MI> <text>B</text> </MI></customer>\");\n    assertEquals(\n        \"{\\\"customer\\\": {\\n \\\"lastName\\\": {\\\"text\\\": \\\"Scerbo\\\"},\\n \\\"MI\\\": {\\\"text\\\": \\\"B\\\"},\\n \\\"ID\\\": \\\"fbs0001\\\",\\n \\\"firstName\\\": {\\\"text\\\": \\\"Fred\\\"}\\n}}\",\n        jsonobject.toString(2));\n    assertEquals(\n        \"<customer><lastName><text>Scerbo</text></lastName><MI><text>B</text></MI><ID>fbs0001</ID><firstName><text>Fred</text></firstName></customer>\",\n        XML.toString(jsonobject));\n\n    jsonobject =\n        XML.toJSONObject(\n            \"<!ENTITY tp-address PUBLIC '-//ABC University::Special Collections Library//TEXT (titlepage: name and address)//EN' 'tpspcoll.sgm'><list type='simple'><head>Repository Address </head><item>Special Collections Library</item><item>ABC University</item><item>Main Library, 40 Circle Drive</item><item>Ourtown, Pennsylvania</item><item>17654 USA</item></list>\");\n    assertEquals(\n        \"{\\\"list\\\":{\\\"item\\\":[\\\"Special Collections Library\\\",\\\"ABC University\\\",\\\"Main Library, 40 Circle Drive\\\",\\\"Ourtown, Pennsylvania\\\",\\\"17654 USA\\\"],\\\"head\\\":\\\"Repository Address\\\",\\\"type\\\":\\\"simple\\\"}}\",\n        jsonobject.toString());\n    assertEquals(\n        \"<list><item>Special Collections Library</item><item>ABC University</item><item>Main Library, 40 Circle Drive</item><item>Ourtown, Pennsylvania</item><item>17654 USA</item><head>Repository Address</head><type>simple</type></list>\",\n        XML.toString(jsonobject));\n\n    jsonobject =\n        XML.toJSONObject(\n            \"<test intertag zero=0 status=ok><empty/>deluxe<blip sweet=true>&amp;&quot;toot&quot;&toot;&#x41;</blip><x>eks</x><w>bonus</w><w>bonus2</w></test>\");\n    assertEquals(\n        \"{\\\"test\\\": {\\n \\\"w\\\": [\\n \\\"bonus\\\",\\n \\\"bonus2\\\"\\n ],\\n \\\"content\\\": \\\"deluxe\\\",\\n \\\"intertag\\\": \\\"\\\",\\n \\\"status\\\": \\\"ok\\\",\\n \\\"blip\\\": {\\n \\\"content\\\": \\\"&\\\\\\\"toot\\\\\\\"&toot;&#x41;\\\",\\n \\\"sweet\\\": true\\n },\\n \\\"empty\\\": \\\"\\\",\\n \\\"zero\\\": 0,\\n \\\"x\\\": \\\"eks\\\"\\n}}\",\n        jsonobject.toString(2));\n    assertEquals(\n        \"<test><w>bonus</w><w>bonus2</w>deluxe<intertag/><status>ok</status><blip>&amp;&quot;toot&quot;&amp;toot;&amp;#x41;<sweet>true</sweet></blip><empty/><zero>0</zero><x>eks</x></test>\",\n        XML.toString(jsonobject));\n\n    jsonobject =\n        HTTP.toJSONObject(\n            \"GET / HTTP/1.0\\nAccept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-powerpoint, application/vnd.ms-excel, application/msword, */*\\nAccept-Language: en-us\\nUser-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows 98; Win 9x 4.90; T312461; Q312461)\\nHost: www.nokko.com\\nConnection: keep-alive\\nAccept-encoding: gzip, deflate\\n\");\n    assertEquals(\n        \"{\\n \\\"Accept-Language\\\": \\\"en-us\\\",\\n \\\"Request-URI\\\": \\\"/\\\",\\n \\\"Host\\\": \\\"www.nokko.com\\\",\\n \\\"Method\\\": \\\"GET\\\",\\n \\\"Accept-encoding\\\": \\\"gzip, deflate\\\",\\n \\\"User-Agent\\\": \\\"Mozilla/4.0 (compatible; MSIE 5.5; Windows 98; Win 9x 4.90; T312461; Q312461)\\\",\\n \\\"HTTP-Version\\\": \\\"HTTP/1.0\\\",\\n \\\"Connection\\\": \\\"keep-alive\\\",\\n \\\"Accept\\\": \\\"image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-powerpoint, application/vnd.ms-excel, application/msword, */*\\\"\\n}\",\n        jsonobject.toString(2));\n    assertEquals(\n        \"GET \\\"/\\\" HTTP/1.0\\r\\n\"\n            + \"Accept-Language: en-us\\r\\n\"\n            + \"Host: www.nokko.com\\r\\n\"\n            + \"Accept-encoding: gzip, deflate\\r\\n\"\n            + \"User-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows 98; Win 9x 4.90; T312461; Q312461)\\r\\n\"\n            + \"Connection: keep-alive\\r\\n\"\n            + \"Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-powerpoint, application/vnd.ms-excel, application/msword, */*\\r\\n\\r\\n\",\n        HTTP.toString(jsonobject));\n\n    jsonobject =\n        HTTP.toJSONObject(\n            \"HTTP/1.1 200 Oki Doki\\nDate: Sun, 26 May 2002 17:38:52 GMT\\nServer: Apache/1.3.23 (Unix) mod_perl/1.26\\nKeep-Alive: timeout=15, max=100\\nConnection: Keep-Alive\\nTransfer-Encoding: chunked\\nContent-Type: text/html\\n\");\n    assertEquals(\n        \"{\\n \\\"Reason-Phrase\\\": \\\"Oki Doki\\\",\\n \\\"Status-Code\\\": \\\"200\\\",\\n \\\"Transfer-Encoding\\\": \\\"chunked\\\",\\n \\\"Date\\\": \\\"Sun, 26 May 2002 17:38:52 GMT\\\",\\n \\\"Keep-Alive\\\": \\\"timeout=15, max=100\\\",\\n \\\"HTTP-Version\\\": \\\"HTTP/1.1\\\",\\n \\\"Content-Type\\\": \\\"text/html\\\",\\n \\\"Connection\\\": \\\"Keep-Alive\\\",\\n \\\"Server\\\": \\\"Apache/1.3.23 (Unix) mod_perl/1.26\\\"\\n}\",\n        jsonobject.toString(2));\n    assertEquals(\n        \"HTTP/1.1 200 Oki Doki\\r\\n\"\n            + \"Transfer-Encoding: chunked\\r\\n\"\n            + \"Date: Sun, 26 May 2002 17:38:52 GMT\\r\\n\"\n            + \"Keep-Alive: timeout=15, max=100\\r\\n\"\n            + \"Content-Type: text/html\\r\\n\"\n            + \"Connection: Keep-Alive\\r\\n\"\n            + \"Server: Apache/1.3.23 (Unix) mod_perl/1.26\\r\\n\\r\\n\",\n        HTTP.toString(jsonobject));\n\n    jsonobject =\n        new JSONObject(\n            \"{nix: null, nux: false, null: 'null', 'Request-URI': '/', Method: 'GET', 'HTTP-Version': 'HTTP/1.0'}\");\n    assertEquals(\n        \"{\\n \\\"Request-URI\\\": \\\"/\\\",\\n \\\"nix\\\": null,\\n \\\"nux\\\": false,\\n \\\"Method\\\": \\\"GET\\\",\\n \\\"HTTP-Version\\\": \\\"HTTP/1.0\\\",\\n \\\"null\\\": \\\"null\\\"\\n}\",\n        jsonobject.toString(2));\n    assertTrue(jsonobject.isNull(\"nix\"));\n    assertTrue(jsonobject.has(\"nix\"));\n    assertEquals(\n        \"<Request-URI>/</Request-URI><nix>null</nix><nux>false</nux><Method>GET</Method><HTTP-Version>HTTP/1.0</HTTP-Version><null>null</null>\",\n        XML.toString(jsonobject));\n    assertEquals(\n        \"GET \\\"/\\\" HTTP/1.0\\r\\n\" + \"nux: false\\r\\n\" + \"null: null\\r\\n\\r\\n\",\n        HTTP.toString(jsonobject));\n\n    jsonobject =\n        XML.toJSONObject(\n            \"<?xml version='1.0' encoding='UTF-8'?>\"\n                + \"\\n\\n\"\n                + \"<SOAP-ENV:Envelope\"\n                + \" xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\"\n                + \" xmlns:xsi=\\\"http://www.w3.org/1999/XMLSchema-instance\\\"\"\n                + \" xmlns:xsd=\\\"http://www.w3.org/1999/XMLSchema\\\">\"\n                + \"<SOAP-ENV:Body><ns1:doGoogleSearch\"\n                + \" xmlns:ns1=\\\"urn:GoogleSearch\\\"\"\n                + \" SOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\">\"\n                + \"<key xsi:type=\\\"xsd:string\\\">GOOGLEKEY</key> <q\"\n                + \" xsi:type=\\\"xsd:string\\\">'+search+'</q> <start\"\n                + \" xsi:type=\\\"xsd:int\\\">0</start> <maxResults\"\n                + \" xsi:type=\\\"xsd:int\\\">10</maxResults> <filter\"\n                + \" xsi:type=\\\"xsd:boolean\\\">true</filter> <restrict\"\n                + \" xsi:type=\\\"xsd:string\\\"></restrict> <safeSearch\"\n                + \" xsi:type=\\\"xsd:boolean\\\">false</safeSearch> <lr\"\n                + \" xsi:type=\\\"xsd:string\\\"></lr> <ie\"\n                + \" xsi:type=\\\"xsd:string\\\">latin1</ie> <oe\"\n                + \" xsi:type=\\\"xsd:string\\\">latin1</oe>\"\n                + \"</ns1:doGoogleSearch>\"\n                + \"</SOAP-ENV:Body></SOAP-ENV:Envelope>\");\n\n    assertEquals(\n        \"{\\\"SOAP-ENV:Envelope\\\": {\\n \\\"SOAP-ENV:Body\\\": {\\\"ns1:doGoogleSearch\\\": {\\n \\\"oe\\\": {\\n \\\"content\\\": \\\"latin1\\\",\\n \\\"xsi:type\\\": \\\"xsd:string\\\"\\n },\\n \\\"SOAP-ENV:encodingStyle\\\": \\\"http://schemas.xmlsoap.org/soap/encoding/\\\",\\n \\\"lr\\\": {\\\"xsi:type\\\": \\\"xsd:string\\\"},\\n \\\"start\\\": {\\n \\\"content\\\": 0,\\n \\\"xsi:type\\\": \\\"xsd:int\\\"\\n },\\n \\\"q\\\": {\\n \\\"content\\\": \\\"'+search+'\\\",\\n \\\"xsi:type\\\": \\\"xsd:string\\\"\\n },\\n \\\"ie\\\": {\\n \\\"content\\\": \\\"latin1\\\",\\n \\\"xsi:type\\\": \\\"xsd:string\\\"\\n },\\n \\\"safeSearch\\\": {\\n \\\"content\\\": false,\\n \\\"xsi:type\\\": \\\"xsd:boolean\\\"\\n },\\n \\\"xmlns:ns1\\\": \\\"urn:GoogleSearch\\\",\\n \\\"restrict\\\": {\\\"xsi:type\\\": \\\"xsd:string\\\"},\\n \\\"filter\\\": {\\n \\\"content\\\": true,\\n \\\"xsi:type\\\": \\\"xsd:boolean\\\"\\n },\\n \\\"maxResults\\\": {\\n \\\"content\\\": 10,\\n \\\"xsi:type\\\": \\\"xsd:int\\\"\\n },\\n \\\"key\\\": {\\n \\\"content\\\": \\\"GOOGLEKEY\\\",\\n \\\"xsi:type\\\": \\\"xsd:string\\\"\\n }\\n }},\\n \\\"xmlns:xsd\\\": \\\"http://www.w3.org/1999/XMLSchema\\\",\\n \\\"xmlns:xsi\\\": \\\"http://www.w3.org/1999/XMLSchema-instance\\\",\\n \\\"xmlns:SOAP-ENV\\\": \\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\\n}}\",\n        jsonobject.toString(2));\n\n    assertEquals(\n        \"<SOAP-ENV:Envelope><SOAP-ENV:Body><ns1:doGoogleSearch><oe>latin1<xsi:type>xsd:string</xsi:type></oe><SOAP-ENV:encodingStyle>http://schemas.xmlsoap.org/soap/encoding/</SOAP-ENV:encodingStyle><lr><xsi:type>xsd:string</xsi:type></lr><start>0<xsi:type>xsd:int</xsi:type></start><q>&apos;+search+&apos;<xsi:type>xsd:string</xsi:type></q><ie>latin1<xsi:type>xsd:string</xsi:type></ie><safeSearch>false<xsi:type>xsd:boolean</xsi:type></safeSearch><xmlns:ns1>urn:GoogleSearch</xmlns:ns1><restrict><xsi:type>xsd:string</xsi:type></restrict><filter>true<xsi:type>xsd:boolean</xsi:type></filter><maxResults>10<xsi:type>xsd:int</xsi:type></maxResults><key>GOOGLEKEY<xsi:type>xsd:string</xsi:type></key></ns1:doGoogleSearch></SOAP-ENV:Body><xmlns:xsd>http://www.w3.org/1999/XMLSchema</xmlns:xsd><xmlns:xsi>http://www.w3.org/1999/XMLSchema-instance</xmlns:xsi><xmlns:SOAP-ENV>http://schemas.xmlsoap.org/soap/envelope/</xmlns:SOAP-ENV></SOAP-ENV:Envelope>\",\n        XML.toString(jsonobject));\n\n    jsonobject =\n        new JSONObject(\n            \"{Envelope: {Body: {\\\"ns1:doGoogleSearch\\\": {oe: \\\"latin1\\\", filter: true, q: \\\"'+search+'\\\", key: \\\"GOOGLEKEY\\\", maxResults: 10, \\\"SOAP-ENV:encodingStyle\\\": \\\"http://schemas.xmlsoap.org/soap/encoding/\\\", start: 0, ie: \\\"latin1\\\", safeSearch:false, \\\"xmlns:ns1\\\": \\\"urn:GoogleSearch\\\"}}}}\");\n    assertEquals(\n        \"{\\\"Envelope\\\": {\\\"Body\\\": {\\\"ns1:doGoogleSearch\\\": {\\n \\\"oe\\\": \\\"latin1\\\",\\n \\\"SOAP-ENV:encodingStyle\\\": \\\"http://schemas.xmlsoap.org/soap/encoding/\\\",\\n \\\"start\\\": 0,\\n \\\"q\\\": \\\"'+search+'\\\",\\n \\\"ie\\\": \\\"latin1\\\",\\n \\\"safeSearch\\\": false,\\n \\\"xmlns:ns1\\\": \\\"urn:GoogleSearch\\\",\\n \\\"maxResults\\\": 10,\\n \\\"key\\\": \\\"GOOGLEKEY\\\",\\n \\\"filter\\\": true\\n}}}}\",\n        jsonobject.toString(2));\n    assertEquals(\n        \"<Envelope><Body><ns1:doGoogleSearch><oe>latin1</oe><SOAP-ENV:encodingStyle>http://schemas.xmlsoap.org/soap/encoding/</SOAP-ENV:encodingStyle><start>0</start><q>&apos;+search+&apos;</q><ie>latin1</ie><safeSearch>false</safeSearch><xmlns:ns1>urn:GoogleSearch</xmlns:ns1><maxResults>10</maxResults><key>GOOGLEKEY</key><filter>true</filter></ns1:doGoogleSearch></Body></Envelope>\",\n        XML.toString(jsonobject));\n\n    jsonobject = CookieList.toJSONObject(\" f%oo = b+l=ah ; o;n%40e = t.wo \");\n    assertEquals(\"{\\n \\\"o;n@e\\\": \\\"t.wo\\\",\\n \\\"f%oo\\\": \\\"b l=ah\\\"\\n}\", jsonobject.toString(2));\n    assertEquals(\"o%3bn@e=t.wo;f%25oo=b l%3dah\", CookieList.toString(jsonobject));\n\n    jsonobject = Cookie.toJSONObject(\"f%oo=blah; secure ;expires = April 24, 2002\");\n    assertEquals(\n        \"{\\n\"\n            + \" \\\"expires\\\": \\\"April 24, 2002\\\",\\n\"\n            + \" \\\"name\\\": \\\"f%oo\\\",\\n\"\n            + \" \\\"secure\\\": true,\\n\"\n            + \" \\\"value\\\": \\\"blah\\\"\\n\"\n            + \"}\",\n        jsonobject.toString(2));\n    assertEquals(\"f%25oo=blah;expires=April 24, 2002;secure\", Cookie.toString(jsonobject));\n\n    jsonobject =\n        new JSONObject(\n            \"{script: 'It is not allowed in HTML to send a close script tag in a string<script>because it confuses browsers</script>so we insert a backslash before the /'}\");\n    assertEquals(\n        \"{\\\"script\\\":\\\"It is not allowed in HTML to send a close script tag in a string<script>because it confuses browsers<\\\\/script>so we insert a backslash before the /\\\"}\",\n        jsonobject.toString());\n\n    JSONTokener jsontokener =\n        new JSONTokener(\"{op:'test', to:'session', pre:1}{op:'test', to:'session', pre:2}\");\n    jsonobject = new JSONObject(jsontokener);\n    assertEquals(\"{\\\"to\\\":\\\"session\\\",\\\"op\\\":\\\"test\\\",\\\"pre\\\":1}\", jsonobject.toString());\n    assertEquals(1, jsonobject.optInt(\"pre\"));\n    int i = jsontokener.skipTo('{');\n    assertEquals(123, i);\n    jsonobject = new JSONObject(jsontokener);\n    assertEquals(\"{\\\"to\\\":\\\"session\\\",\\\"op\\\":\\\"test\\\",\\\"pre\\\":2}\", jsonobject.toString());\n\n    jsonarray =\n        CDL.toJSONArray(\n            \"Comma delimited list test, '\\\"Strip\\\"Quotes', 'quote, comma', No quotes, 'Single Quotes', \\\"Double Quotes\\\"\\n1,'2',\\\"3\\\"\\n,'It is \\\"good,\\\"', \\\"It works.\\\"\\n\\n\");\n\n    string = CDL.toString(jsonarray);\n    assertEquals(\n        \"\\\"quote, comma\\\",\\\"StripQuotes\\\",Comma delimited list test\\n\"\n            + \"3,2,1\\n\"\n            + \"It works.,\\\"It is good,\\\",\\n\",\n        string);\n    assertEquals(\n        \"[\\n {\\n \\\"quote, comma\\\": \\\"3\\\",\\n \\\"\\\\\\\"Strip\\\\\\\"Quotes\\\": \\\"2\\\",\\n \\\"Comma delimited list test\\\": \\\"1\\\"\\n },\\n {\\n \\\"quote, comma\\\": \\\"It works.\\\",\\n \\\"\\\\\\\"Strip\\\\\\\"Quotes\\\": \\\"It is \\\\\\\"good,\\\\\\\"\\\",\\n \\\"Comma delimited list test\\\": \\\"\\\"\\n }\\n]\",\n        jsonarray.toString(1));\n    jsonarray = CDL.toJSONArray(string);\n    assertEquals(\n        \"[\\n {\\n \\\"quote, comma\\\": \\\"3\\\",\\n \\\"StripQuotes\\\": \\\"2\\\",\\n \\\"Comma delimited list test\\\": \\\"1\\\"\\n },\\n {\\n \\\"quote, comma\\\": \\\"It works.\\\",\\n \\\"StripQuotes\\\": \\\"It is good,\\\",\\n \\\"Comma delimited list test\\\": \\\"\\\"\\n }\\n]\",\n        jsonarray.toString(1));\n\n    jsonarray = new JSONArray(\" [\\\"<escape>\\\", next is an implied null , , ok,] \");\n    assertEquals(\"[\\\"<escape>\\\",\\\"next is an implied null\\\",null,\\\"ok\\\"]\", jsonarray.toString());\n    assertEquals(\n        \"<array>&lt;escape&gt;</array><array>next is an implied null</array><array>null</array><array>ok</array>\",\n        XML.toString(jsonarray));\n\n    jsonobject =\n        new JSONObject(\n            \"{ fun => with non-standard forms ; forgiving => This package can be used to parse formats that are similar to but not stricting conforming to JSON; why=To make it easier to migrate existing data to JSON,one = [[1.00]]; uno=[[{1=>1}]];'+':+6e66 ;pluses=+++;empty = '' , 'double':0.666,true: TRUE, false: FALSE, null=NULL;[true] = [[!,@;*]]; string=> o. k. ; \\r oct=0666; hex=0x666; dec=666; o=0999; noh=0x0x}\");\n    assertEquals(\n        \"{\\n \\\"noh\\\": \\\"0x0x\\\",\\n \\\"one\\\": [[1]],\\n \\\"o\\\": 999,\\n \\\"+\\\": 6.0E66,\\n \\\"true\\\": true,\\n \\\"forgiving\\\": \\\"This package can be used to parse formats that are similar to but not stricting conforming to JSON\\\",\\n \\\"fun\\\": \\\"with non-standard forms\\\",\\n \\\"double\\\": 0.666,\\n \\\"uno\\\": [[{\\\"1\\\": 1}]],\\n \\\"dec\\\": 666,\\n \\\"oct\\\": 666,\\n \\\"hex\\\": 1638,\\n \\\"string\\\": \\\"o. k.\\\",\\n \\\"empty\\\": \\\"\\\",\\n \\\"false\\\": false,\\n \\\"[true]\\\": [[\\n \\\"!\\\",\\n \\\"@\\\",\\n \\\"*\\\"\\n ]],\\n \\\"pluses\\\": \\\"+++\\\",\\n \\\"why\\\": \\\"To make it easier to migrate existing data to JSON\\\",\\n \\\"null\\\": null\\n}\",\n        jsonobject.toString(1));\n    assertTrue(jsonobject.getBoolean(\"true\"));\n    assertFalse(jsonobject.getBoolean(\"false\"));\n\n    jsonobject = new JSONObject(jsonobject, new String[] {\"dec\", \"oct\", \"hex\", \"missing\"});\n    assertEquals(\"{\\n \\\"oct\\\": 666,\\n \\\"dec\\\": 666,\\n \\\"hex\\\": 1638\\n}\", jsonobject.toString(1));\n\n    assertEquals(\n        \"[[\\\"<escape>\\\",\\\"next is an implied null\\\",null,\\\"ok\\\"],{\\\"oct\\\":666,\\\"dec\\\":666,\\\"hex\\\":1638}]\",\n        new JSONStringer().array().value(jsonarray).value(jsonobject).endArray().toString());\n\n    jsonobject =\n        new JSONObject(\n            \"{string: \\\"98.6\\\", long: 2147483648, int: 2147483647, longer: 9223372036854775807, double: 9223372036854775808}\");\n    assertEquals(\n        \"{\\n \\\"int\\\": 2147483647,\\n \\\"string\\\": \\\"98.6\\\",\\n \\\"longer\\\": 9223372036854775807,\\n \\\"double\\\": \\\"9223372036854775808\\\",\\n \\\"long\\\": 2147483648\\n}\",\n        jsonobject.toString(1));\n\n    // getInt\n    assertEquals(2147483647, jsonobject.getInt(\"int\"));\n    assertEquals(-2147483648, jsonobject.getInt(\"long\"));\n    assertEquals(-1, jsonobject.getInt(\"longer\"));\n    try {\n      jsonobject.getInt(\"double\");\n      fail(\"should fail with - JSONObject[\\\"double\\\"] is not an int.\");\n    } catch (JSONException expected) {\n    }\n    try {\n      jsonobject.getInt(\"string\");\n      fail(\"should fail with - JSONObject[\\\"string\\\"] is not an int.\");\n    } catch (JSONException expected) {\n    }\n\n    // getLong\n    assertEquals(2147483647, jsonobject.getLong(\"int\"));\n    assertEquals(2147483648l, jsonobject.getLong(\"long\"));\n    assertEquals(9223372036854775807l, jsonobject.getLong(\"longer\"));\n    try {\n      jsonobject.getLong(\"double\");\n      fail(\"should fail with - JSONObject[\\\"double\\\"] is not a long.\");\n    } catch (JSONException expected) {\n    }\n    try {\n      jsonobject.getLong(\"string\");\n      fail(\"should fail with - JSONObject[\\\"string\\\"] is not a long.\");\n    } catch (JSONException expected) {\n    }\n\n    // getDouble\n    assertEquals(2.147483647E9, jsonobject.getDouble(\"int\"), eps);\n    assertEquals(2.147483648E9, jsonobject.getDouble(\"long\"), eps);\n    assertEquals(9.223372036854776E18, jsonobject.getDouble(\"longer\"), eps);\n    assertEquals(9223372036854775808d, jsonobject.getDouble(\"double\"), eps);\n    assertEquals(98.6, jsonobject.getDouble(\"string\"), eps);\n\n    jsonobject.put(\"good sized\", 9223372036854775807L);\n    assertEquals(\n        \"{\\n \\\"int\\\": 2147483647,\\n \\\"string\\\": \\\"98.6\\\",\\n \\\"longer\\\": 9223372036854775807,\\n \\\"good sized\\\": 9223372036854775807,\\n \\\"double\\\": \\\"9223372036854775808\\\",\\n \\\"long\\\": 2147483648\\n}\",\n        jsonobject.toString(1));\n\n    jsonarray = new JSONArray(\"[2147483647, 2147483648, 9223372036854775807, 9223372036854775808]\");\n    assertEquals(\n        \"[\\n 2147483647,\\n 2147483648,\\n 9223372036854775807,\\n \\\"9223372036854775808\\\"\\n]\",\n        jsonarray.toString(1));\n\n    List expectedKeys = new ArrayList(6);\n    expectedKeys.add(\"int\");\n    expectedKeys.add(\"string\");\n    expectedKeys.add(\"longer\");\n    expectedKeys.add(\"good sized\");\n    expectedKeys.add(\"double\");\n    expectedKeys.add(\"long\");\n\n    iterator = jsonobject.keys();\n    while (iterator.hasNext()) {\n      string = (String) iterator.next();\n      assertTrue(expectedKeys.remove(string));\n    }\n    assertEquals(0, expectedKeys.size());\n\n    // accumulate\n    jsonobject = new JSONObject();\n    jsonobject.accumulate(\"stooge\", \"Curly\");\n    jsonobject.accumulate(\"stooge\", \"Larry\");\n    jsonobject.accumulate(\"stooge\", \"Moe\");\n    jsonarray = jsonobject.getJSONArray(\"stooge\");\n    jsonarray.put(5, \"Shemp\");\n    assertEquals(\n        \"{\\\"stooge\\\": [\\n\"\n            + \" \\\"Curly\\\",\\n\"\n            + \" \\\"Larry\\\",\\n\"\n            + \" \\\"Moe\\\",\\n\"\n            + \" null,\\n\"\n            + \" null,\\n\"\n            + \" \\\"Shemp\\\"\\n\"\n            + \"]}\",\n        jsonobject.toString(4));\n\n    // write\n    assertEquals(\n        \"{\\\"stooge\\\":[\\\"Curly\\\",\\\"Larry\\\",\\\"Moe\\\",null,null,\\\"Shemp\\\"]}\",\n        jsonobject.write(new StringWriter()).toString());\n\n    string = \"<xml empty><a></a><a>1</a><a>22</a><a>333</a></xml>\";\n    jsonobject = XML.toJSONObject(string);\n    assertEquals(\n        \"{\\\"xml\\\": {\\n\"\n            + \" \\\"a\\\": [\\n\"\n            + \" \\\"\\\",\\n\"\n            + \" 1,\\n\"\n            + \" 22,\\n\"\n            + \" 333\\n\"\n            + \" ],\\n\"\n            + \" \\\"empty\\\": \\\"\\\"\\n\"\n            + \"}}\",\n        jsonobject.toString(4));\n    assertEquals(\"<xml><a/><a>1</a><a>22</a><a>333</a><empty/></xml>\", XML.toString(jsonobject));\n\n    string =\n        \"<book><chapter>Content of the first chapter</chapter><chapter>Content of the second chapter <chapter>Content of the first subchapter</chapter> <chapter>Content of the second subchapter</chapter></chapter><chapter>Third Chapter</chapter></book>\";\n    jsonobject = XML.toJSONObject(string);\n    assertEquals(\n        \"{\\\"book\\\": {\\\"chapter\\\": [\\n \\\"Content of the first chapter\\\",\\n {\\n \\\"content\\\": \\\"Content of the second chapter\\\",\\n \\\"chapter\\\": [\\n \\\"Content of the first subchapter\\\",\\n \\\"Content of the second subchapter\\\"\\n ]\\n },\\n \\\"Third Chapter\\\"\\n]}}\",\n        jsonobject.toString(1));\n    assertEquals(\n        \"<book><chapter>Content of the first chapter</chapter><chapter>Content of the second chapter<chapter>Content of the first subchapter</chapter><chapter>Content of the second subchapter</chapter></chapter><chapter>Third Chapter</chapter></book>\",\n        XML.toString(jsonobject));\n\n    jsonarray = JSONML.toJSONArray(string);\n    assertEquals(\n        \"[\\n\"\n            + \" \\\"book\\\",\\n\"\n            + \" [\\n\"\n            + \" \\\"chapter\\\",\\n\"\n            + \" \\\"Content of the first chapter\\\"\\n\"\n            + \" ],\\n\"\n            + \" [\\n\"\n            + \" \\\"chapter\\\",\\n\"\n            + \" \\\"Content of the second chapter\\\",\\n\"\n            + \" [\\n\"\n            + \" \\\"chapter\\\",\\n\"\n            + \" \\\"Content of the first subchapter\\\"\\n\"\n            + \" ],\\n\"\n            + \" [\\n\"\n            + \" \\\"chapter\\\",\\n\"\n            + \" \\\"Content of the second subchapter\\\"\\n\"\n            + \" ]\\n\"\n            + \" ],\\n\"\n            + \" [\\n\"\n            + \" \\\"chapter\\\",\\n\"\n            + \" \\\"Third Chapter\\\"\\n\"\n            + \" ]\\n\"\n            + \"]\",\n        jsonarray.toString(4));\n    assertEquals(\n        \"<book><chapter>Content of the first chapter</chapter><chapter>Content of the second chapter<chapter>Content of the first subchapter</chapter><chapter>Content of the second subchapter</chapter></chapter><chapter>Third Chapter</chapter></book>\",\n        JSONML.toString(jsonarray));\n\n    Collection collection = null;\n    Map map = null;\n\n    jsonobject = new JSONObject(map);\n    jsonarray = new JSONArray(collection);\n    jsonobject.append(\"stooge\", \"Joe DeRita\");\n    jsonobject.append(\"stooge\", \"Shemp\");\n    jsonobject.accumulate(\"stooges\", \"Curly\");\n    jsonobject.accumulate(\"stooges\", \"Larry\");\n    jsonobject.accumulate(\"stooges\", \"Moe\");\n    jsonobject.accumulate(\"stoogearray\", jsonobject.get(\"stooges\"));\n    jsonobject.put(\"map\", map);\n    jsonobject.put(\"collection\", collection);\n    jsonobject.put(\"array\", jsonarray);\n    jsonarray.put(map);\n    jsonarray.put(collection);\n    assertEquals(\n        \"{\\\"stooge\\\":[\\\"Joe DeRita\\\",\\\"Shemp\\\"],\\\"map\\\":{},\\\"stooges\\\":[\\\"Curly\\\",\\\"Larry\\\",\\\"Moe\\\"],\\\"collection\\\":[],\\\"stoogearray\\\":[[\\\"Curly\\\",\\\"Larry\\\",\\\"Moe\\\"]],\\\"array\\\":[{},[]]}\",\n        jsonobject.toString());\n\n    string =\n        \"{plist=Apple; AnimalSmells = { pig = piggish; lamb = lambish; worm = wormy; }; AnimalSounds = { pig = oink; lamb = baa; worm = baa; Lisa = \\\"Why is the worm talking like a lamb?\\\" } ; AnimalColors = { pig = pink; lamb = black; worm = pink; } } \";\n    jsonobject = new JSONObject(string);\n    assertEquals(\n        \"{\\\"AnimalColors\\\":{\\\"worm\\\":\\\"pink\\\",\\\"lamb\\\":\\\"black\\\",\\\"pig\\\":\\\"pink\\\"},\\\"plist\\\":\\\"Apple\\\",\\\"AnimalSounds\\\":{\\\"worm\\\":\\\"baa\\\",\\\"Lisa\\\":\\\"Why is the worm talking like a lamb?\\\",\\\"lamb\\\":\\\"baa\\\",\\\"pig\\\":\\\"oink\\\"},\\\"AnimalSmells\\\":{\\\"worm\\\":\\\"wormy\\\",\\\"lamb\\\":\\\"lambish\\\",\\\"pig\\\":\\\"piggish\\\"}}\",\n        jsonobject.toString());\n\n    string = \" [\\\"San Francisco\\\", \\\"New York\\\", \\\"Seoul\\\", \\\"London\\\", \\\"Seattle\\\", \\\"Shanghai\\\"]\";\n    jsonarray = new JSONArray(string);\n    assertEquals(\n        \"[\\\"San Francisco\\\",\\\"New York\\\",\\\"Seoul\\\",\\\"London\\\",\\\"Seattle\\\",\\\"Shanghai\\\"]\",\n        jsonarray.toString());\n\n    string =\n        \"<a ichi='1' ni='2'><b>The content of b</b> and <c san='3'>The content of c</c><d>do</d><e></e><d>re</d><f/><d>mi</d></a>\";\n    jsonobject = XML.toJSONObject(string);\n    assertEquals(\n        \"{\\\"a\\\":{\\\"f\\\":\\\"\\\",\\\"content\\\":\\\"and\\\",\\\"d\\\":[\\\"do\\\",\\\"re\\\",\\\"mi\\\"],\\\"ichi\\\":1,\\\"e\\\":\\\"\\\",\\\"b\\\":\\\"The content of b\\\",\\\"c\\\":{\\\"content\\\":\\\"The content of c\\\",\\\"san\\\":3},\\\"ni\\\":2}}\",\n        jsonobject.toString());\n    assertEquals(\n        \"<a><f/>and<d>do</d><d>re</d><d>mi</d><ichi>1</ichi><e/><b>The content of b</b><c>The content of c<san>3</san></c><ni>2</ni></a>\",\n        XML.toString(jsonobject));\n    ja = JSONML.toJSONArray(string);\n    assertEquals(\n        \"[\\n\"\n            + \" \\\"a\\\",\\n\"\n            + \" {\\n\"\n            + \" \\\"ichi\\\": 1,\\n\"\n            + \" \\\"ni\\\": 2\\n\"\n            + \" },\\n\"\n            + \" [\\n\"\n            + \" \\\"b\\\",\\n\"\n            + \" \\\"The content of b\\\"\\n\"\n            + \" ],\\n\"\n            + \" \\\"and\\\",\\n\"\n            + \" [\\n\"\n            + \" \\\"c\\\",\\n\"\n            + \" {\\\"san\\\": 3},\\n\"\n            + \" \\\"The content of c\\\"\\n\"\n            + \" ],\\n\"\n            + \" [\\n\"\n            + \" \\\"d\\\",\\n\"\n            + \" \\\"do\\\"\\n\"\n            + \" ],\\n\"\n            + \" [\\\"e\\\"],\\n\"\n            + \" [\\n\"\n            + \" \\\"d\\\",\\n\"\n            + \" \\\"re\\\"\\n\"\n            + \" ],\\n\"\n            + \" [\\\"f\\\"],\\n\"\n            + \" [\\n\"\n            + \" \\\"d\\\",\\n\"\n            + \" \\\"mi\\\"\\n\"\n            + \" ]\\n\"\n            + \"]\",\n        ja.toString(4));\n    assertEquals(\n        \"<a ichi=\\\"1\\\" ni=\\\"2\\\"><b>The content of b</b>and<c san=\\\"3\\\">The content of c</c><d>do</d><e/><d>re</d><f/><d>mi</d></a>\",\n        JSONML.toString(ja));\n\n    string =\n        \"<Root><MsgType type=\\\"node\\\"><BatchType type=\\\"string\\\">111111111111111</BatchType></MsgType></Root>\";\n    jsonobject = JSONML.toJSONObject(string);\n    assertEquals(\n        \"{\\\"tagName\\\":\\\"Root\\\",\\\"childNodes\\\":[{\\\"tagName\\\":\\\"MsgType\\\",\\\"childNodes\\\":[{\\\"tagName\\\":\\\"BatchType\\\",\\\"childNodes\\\":[111111111111111],\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"node\\\"}]}\",\n        jsonobject.toString());\n    ja = JSONML.toJSONArray(string);\n    assertEquals(\n        \"[\\\"Root\\\",[\\\"MsgType\\\",{\\\"type\\\":\\\"node\\\"},[\\\"BatchType\\\",{\\\"type\\\":\\\"string\\\"},111111111111111]]]\",\n        ja.toString());\n  }\n"}, {"dataset": "next", "exampleID": 3027, "initialization": ["Iterator iterator = TreeSet.iterator()"], "initializationStart": [775], "initializationEnd": [807], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 757, "guardExpressionEnd": 840, "guardBlockStart": 757, "guardBlockEnd": 1561, "focalAPI": "element = iterator.next()", "focalAPIStart": 908, "focalAPIEnd": 916, "followUpCheck": "element.isNotOffered() == null || element.isNotOffered().booleanValue()", "checkType": "IF", "followUpCheckExpressionStart": 3407, "followUpCheckExpressionEnd": 3473, "followUpCheckBlockStart": 3407, "followUpCheckBlockEnd": 3640, "use": ["element.getInstrOfferingConfigs()", "iterator.next()", "element.getInstrOfferingConfigs()", "ArrayList.add(element)", "ArrayList.add(element)", "element.getUniqueId()", "addInstrOffrRowsToTable(ClassAssignmentProxy,ExamAssignmentProxy,TableStream,element,Long,SessionContext)", "element.getUniqueId()", "addInstrOffrRowsToTable(ClassAssignmentProxy,ExamAssignmentProxy,TableStream,element,Long,SessionContext)"], "useStart": [950, 1911, 1953, 3521, 3607, 4540, 4569, 5932, 5961], "useEnd": [978, 1919, 1981, 3548, 3631, 4556, 4687, 5948, 6082], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jaliste/unitime/tree/master/JavaSource/org/unitime/timetable/webutil/WebInstructionalOfferingTableBuilder.java", "rawCode": "  protected void htmlTableForInstructionalOfferings(\n      SessionContext context,\n      ClassAssignmentProxy classAssignment,\n      ExamAssignmentProxy examAssignment,\n      TreeSet insructionalOfferings,\n      Long subjectAreaId,\n      boolean displayHeader,\n      boolean allCoursesAreGiven,\n      JspWriter outputStream,\n      Comparator classComparator) {\n\n    if (classComparator != null) setClassComparator(classComparator);\n\n    if (isShowTimetable()) {\n      boolean hasTimetable = false;\n      if (context.hasPermission(null, \"Department\", Right.ClassAssignments)\n          && classAssignment != null) {\n        try {\n          if (classAssignment instanceof CachedClassAssignmentProxy) {\n            Vector allClasses = new Vector();\n            for (Iterator i = insructionalOfferings.iterator(); !hasTimetable && i.hasNext(); ) {\n              InstructionalOffering io = (InstructionalOffering) i.next();\n              for (Iterator j = io.getInstrOfferingConfigs().iterator();\n                  !hasTimetable && j.hasNext(); ) {\n                InstrOfferingConfig ioc = (InstrOfferingConfig) j.next();\n                for (Iterator k = ioc.getSchedulingSubparts().iterator();\n                    !hasTimetable && k.hasNext(); ) {\n                  SchedulingSubpart ss = (SchedulingSubpart) k.next();\n                  for (Iterator l = ss.getClasses().iterator(); l.hasNext(); ) {\n                    Class_ clazz = (Class_) l.next();\n                    allClasses.add(clazz);\n                  }\n                }\n              }\n            }\n            ((CachedClassAssignmentProxy) classAssignment).setCache(allClasses);\n            hasTimetable = !classAssignment.getAssignmentTable(allClasses).isEmpty();\n          } else {\n            for (Iterator i = insructionalOfferings.iterator(); !hasTimetable && i.hasNext(); ) {\n              InstructionalOffering io = (InstructionalOffering) i.next();\n              for (Iterator j = io.getInstrOfferingConfigs().iterator();\n                  !hasTimetable && j.hasNext(); ) {\n                InstrOfferingConfig ioc = (InstrOfferingConfig) j.next();\n                for (Iterator k = ioc.getSchedulingSubparts().iterator();\n                    !hasTimetable && k.hasNext(); ) {\n                  SchedulingSubpart ss = (SchedulingSubpart) k.next();\n                  for (Iterator l = ss.getClasses().iterator(); l.hasNext(); ) {\n                    Class_ clazz = (Class_) l.next();\n                    if (classAssignment.getAssignment(clazz) != null) {\n                      hasTimetable = true;\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n        }\n      }\n      setDisplayTimetable(hasTimetable);\n    }\n\n    if (isShowExam())\n      setShowExamTimetable(\n          examAssignment != null\n              || Exam.hasTimetable(context.getUser().getCurrentAcademicSessionId()));\n\n    ArrayList notOfferedOfferings = new ArrayList();\n    ArrayList offeredOfferings = new ArrayList();\n    ArrayList offeringIds = new ArrayList();\n\n    Iterator it = insructionalOfferings.iterator();\n    InstructionalOffering io = null;\n    boolean hasOfferedCourses = false;\n    boolean hasNotOfferedCourses = false;\n    setUserSettings(context.getUser());\n\n    while (it.hasNext()) {\n      io = (InstructionalOffering) it.next();\n      if (io.isNotOffered() == null || io.isNotOffered().booleanValue()) {\n        hasNotOfferedCourses = true;\n        notOfferedOfferings.add(io);\n      } else {\n        hasOfferedCourses = true;\n        offeredOfferings.add(io);\n      }\n    }\n\n    if (hasOfferedCourses || allCoursesAreGiven) {\n      if (displayHeader) {\n        try {\n          if (allCoursesAreGiven)\n            outputStream.print(\n                \"<DIV align=\\\"right\\\"><A class=\\\"l7\\\" href=\\\"#notOffered\\\">\"\n                    + MSG.labelNotOfferedCourses()\n                    + \"</A></DIV>\");\n          outputStream.print(\n              \"<DIV class=\\\"WelcomeRowHead\\\"><A name=\\\"offered\\\"></A>\"\n                  + MSG.labelOfferedCourses()\n                  + \"</DIV>\");\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n\n      if (hasOfferedCourses) {\n        it = offeredOfferings.iterator();\n        TableStream offeredTable =\n            this.initTable(outputStream, context.getUser().getCurrentAcademicSessionId());\n\n        while (it.hasNext()) {\n          io = (InstructionalOffering) it.next();\n          offeringIds.add(io.getUniqueId());\n          this.addInstrOffrRowsToTable(\n              classAssignment, examAssignment, offeredTable, io, subjectAreaId, context);\n        }\n        offeredTable.tableComplete();\n      } else {\n        if (displayHeader)\n          try {\n            outputStream.print(\"<font class=\\\"error\\\">\" + MSG.errorNoCoursesOffered() + \"</font>\");\n          } catch (IOException e) {\n            e.printStackTrace();\n          }\n      }\n    }\n\n    if (hasNotOfferedCourses || allCoursesAreGiven) {\n      if (displayHeader) {\n        try {\n          outputStream.print(\"<br>\");\n          if (allCoursesAreGiven)\n            outputStream.print(\n                \"<DIV align=\\\"right\\\"><A class=\\\"l7\\\" href=\\\"#offered\\\">\"\n                    + MSG.labelOfferedCourses()\n                    + \"</A></DIV>\");\n          outputStream.print(\n              \"<DIV class=\\\"WelcomeRowHead\\\"><A name=\\\"notOffered\\\"></A>\"\n                  + MSG.labelNotOfferedCourses()\n                  + \"</DIV>\");\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n\n      if (hasNotOfferedCourses) {\n        it = notOfferedOfferings.iterator();\n        TableStream notOfferedTable =\n            this.initTable(outputStream, context.getUser().getCurrentAcademicSessionId());\n        while (it.hasNext()) {\n          io = (InstructionalOffering) it.next();\n          offeringIds.add(io.getUniqueId());\n          this.addInstrOffrRowsToTable(\n              classAssignment, examAssignment, notOfferedTable, io, subjectAreaId, context);\n        }\n        notOfferedTable.tableComplete();\n      } else {\n        if (displayHeader)\n          try {\n            outputStream.print(\n                \"<font class=\\\"normal\\\">&nbsp;<br>\" + MSG.errorAllCoursesOffered() + \"</font>\");\n          } catch (IOException e) {\n            e.printStackTrace();\n          }\n      }\n    }\n\n    Navigation.set(context, Navigation.sInstructionalOfferingLevel, offeringIds);\n  }\n"}, {"dataset": "next", "exampleID": 3028, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [340], "initializationEnd": [358], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 365, "guardExpressionEnd": 385, "guardBlockStart": 365, "guardBlockEnd": 626, "focalAPI": "element = iterator.next()", "focalAPIStart": 439, "focalAPIEnd": 448, "followUpCheck": "element != lastCommit", "checkType": "IF", "followUpCheckExpressionStart": 536, "followUpCheckExpressionEnd": 585, "followUpCheckBlockStart": 536, "followUpCheckBlockEnd": 620, "use": ["element.getSegmentsFileName()", "element.delete()"], "useStart": [490, 596], "useEnd": [518, 611], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kimchy/compass/tree/master/src/main/src/org/compass/core/lucene/engine/indexdeletionpolicy/ExpirationTimeDeletionPolicy.java", "rawCode": "  public void onCommit(List commits) throws IOException {\n    IndexCommitPoint lastCommit = (IndexCommitPoint) commits.get(commits.size() - 1);\n\n    // Any commit older than expireTime should be deleted:\n    double expireTime =\n        dir.fileModified(lastCommit.getSegmentsFileName()) / 1000.0 - expirationTimeSeconds;\n\n    Iterator it = commits.iterator();\n\n    while (it.hasNext()) {\n      IndexCommitPoint commit = (IndexCommitPoint) it.next();\n      double modTime = dir.fileModified(commit.getSegmentsFileName()) / 1000.0;\n      if (commit != lastCommit && modTime < expireTime) {\n        commit.delete();\n      }\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3029, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [78], "initializationEnd": [95], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 101, "guardExpressionEnd": 123, "guardBlockStart": 101, "guardBlockEnd": 229, "focalAPI": "element = iterator.next()", "focalAPIStart": 146, "focalAPIEnd": 157, "followUpCheck": "element != null && !element.isDisposed()", "checkType": "IF", "followUpCheckExpressionStart": 165, "followUpCheckExpressionEnd": 206, "followUpCheckBlockStart": 165, "followUpCheckBlockEnd": 223, "use": ["element.dispose()"], "useStart": [207], "useEnd": [222], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/eclipse.platform.text/tree/master/org.eclipse.search/search/org/eclipse/search/internal/ui/SearchDialog.java", "rawCode": "  private void destroyImages(List<Image> images) {\n    Iterator<Image> iter = images.iterator();\n    while (iter.hasNext()) {\n      Image image = iter.next();\n      if (image != null && !image.isDisposed()) image.dispose();\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3030, "initialization": ["Iterator iterator = List<StudyFileEditBean>.iterator()"], "initializationStart": [381], "initializationEnd": [400], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 406, "guardExpressionEnd": 428, "guardBlockStart": 406, "guardBlockEnd": 832, "focalAPI": "element = iterator.next()", "focalAPIStart": 486, "focalAPIEnd": 497, "followUpCheck": "element.getStudyFile().isSubsettable()", "checkType": "IF", "followUpCheckExpressionStart": 505, "followUpCheckExpressionEnd": 549, "followUpCheckBlockStart": 505, "followUpCheckBlockEnd": 826, "use": ["List.add(element)", "List.add(element)", "element.getStudyFile()", "iterator.next()", "element.getStudyFile()", "element.getTempSystemFileLocation()", "element.getFileMetadata()", "element.getStudyFile()", "element.getFileMetadata()"], "useStart": [560, 615, 718, 1825, 1858, 1914, 2193, 2271, 2316], "useEnd": [590, 639, 741, 1836, 1881, 1950, 2219, 2294, 2342], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dvn/dvn-svn-import-test4/tree/master/dvn-app/tags/v2.2.2/src/DVN-EJB/src/java/edu/harvard/iq/dvn/core/study/StudyFileServiceBean.java", "rawCode": "  private void addFiles(\n      StudyVersion studyVersion,\n      List<StudyFileEditBean> newFiles,\n      VDCUser user,\n      String ingestEmail,\n      int messageLevel) {\n\n    Study study = studyVersion.getStudy();\n\n    // step 1: divide the files, based on subsettable or not\n    List subsettableFiles = new ArrayList();\n    List otherFiles = new ArrayList();\n\n    Iterator iter = newFiles.iterator();\n    while (iter.hasNext()) {\n      StudyFileEditBean fileBean = (StudyFileEditBean) iter.next();\n      if (fileBean.getStudyFile().isSubsettable()) {\n        subsettableFiles.add(fileBean);\n      } else {\n        otherFiles.add(fileBean);\n        // also add to study, so that it will be flushed for the ids\n        fileBean.getStudyFile().setStudy(study);\n        study.getStudyFiles().add(fileBean.getStudyFile());\n      }\n    }\n\n    if (otherFiles.size() > 0) {\n      // Only persist the studyVersion we are adding a file that doesn't need to be ingested\n      // (non-subsettable)\n      if (studyVersion.getId() == null) {\n        em.persist(studyVersion);\n        em.flush(); // populates studyVersion_id\n      } else {\n        // There is a problem merging the existing studyVersion,\n        // so since all we need from the exisiting version is the versionNote,\n        // we get a fresh copy of the object from the database, and update it with the versionNote.\n        String versionNote = studyVersion.getVersionNote();\n        studyVersion = em.find(StudyVersion.class, studyVersion.getId());\n        studyVersion.setVersionNote(versionNote);\n      }\n    }\n\n    // step 2: iterate through nonsubsettable files, moving from temp to new location\n    File newDir = FileUtil.getStudyFileDir(study);\n    iter = otherFiles.iterator();\n    while (iter.hasNext()) {\n      StudyFileEditBean fileBean = (StudyFileEditBean) iter.next();\n      StudyFile f = fileBean.getStudyFile();\n      File tempFile = new File(fileBean.getTempSystemFileLocation());\n      File newLocationFile = new File(newDir, f.getFileSystemName());\n      try {\n        FileUtil.copyFile(tempFile, newLocationFile);\n        tempFile.delete();\n        f.setFileSystemLocation(newLocationFile.getAbsolutePath());\n\n        fileBean.getFileMetadata().setStudyVersion(studyVersion);\n\n        em.persist(fileBean.getStudyFile());\n        em.persist(fileBean.getFileMetadata());\n\n      } catch (IOException ex) {\n        throw new EJBException(ex);\n      }\n    }\n\n    // step 3: iterate through subsettable files, sending a message via JMS\n    if (subsettableFiles.size() > 0) {\n      QueueConnection conn = null;\n      QueueSession session = null;\n      QueueSender sender = null;\n      try {\n        conn = factory.createQueueConnection();\n        session = conn.createQueueSession(false, 0);\n        sender = session.createSender(queue);\n\n        DSBIngestMessage ingestMessage = new DSBIngestMessage(messageLevel);\n        ingestMessage.setFileBeans(subsettableFiles);\n        ingestMessage.setIngestEmail(ingestEmail);\n        ingestMessage.setIngestUserId(user.getId());\n        ingestMessage.setStudyId(study.getId());\n        ingestMessage.setStudyVersionId(studyVersion.getId());\n        ingestMessage.setVersionNote(studyVersion.getVersionNote());\n        Message message = session.createObjectMessage(ingestMessage);\n\n        String detail = \"Ingest processing for \" + subsettableFiles.size() + \" file(s).\";\n        studyService.addStudyLock(study.getId(), user.getId(), detail);\n        try {\n          sender.send(message);\n        } catch (Exception ex) {\n          // If anything goes wrong, remove the study lock.\n          studyService.removeStudyLock(study.getId());\n          ex.printStackTrace();\n        }\n\n        // send an e-mail\n        if (ingestMessage.sendInfoMessage()) {\n          mailService.sendIngestRequestedNotification(ingestEmail, subsettableFiles);\n        }\n\n      } catch (JMSException ex) {\n        ex.printStackTrace();\n      } finally {\n        try {\n\n          if (sender != null) {\n            sender.close();\n          }\n          if (session != null) {\n            session.close();\n          }\n          if (conn != null) {\n            conn.close();\n          }\n        } catch (JMSException ex) {\n          ex.printStackTrace();\n        }\n      }\n    }\n\n    if (!otherFiles.isEmpty()) {\n      studyService.saveStudyVersion(studyVersion, user.getId());\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3031, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [323], "initializationEnd": [338], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 302, "guardExpressionEnd": 357, "guardBlockStart": 302, "guardBlockEnd": 444, "focalAPI": "element = iterator.next()", "focalAPIStart": 389, "focalAPIEnd": 400, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(element)"], "useStart": [368], "useEnd": [401], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iBot/HAW_SS13_AI/tree/master/code/HES/lib/dom4j-1.6.1/src/samples/org/dom4j/samples/XPathGrep.java", "rawCode": "  protected void process(Document document) throws Exception {\n    // perform XPath\n    if (verbose) {\n      println(\"About to evalute: \" + xpath);\n      println(\"Results:\");\n    }\n\n    Object object = xpath.evaluate(document);\n\n    if (object instanceof List) {\n      List list = (List) object;\n      for (Iterator iter = list.iterator(); iter.hasNext(); ) {\n        getXMLWriter().write(iter.next());\n        getXMLWriter().println();\n      }\n      getXMLWriter().flush();\n    } else {\n      println((object != null) ? object.toString() : \"null\");\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3032, "initialization": ["Iterator iterator = HTTPInputSource.getHTTPRequestProperties()"], "initializationStart": [2214], "initializationEnd": [2256], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 2270, "guardExpressionEnd": 2296, "guardBlockStart": 2270, "guardBlockEnd": 2473, "focalAPI": "element = iterator.next()", "focalAPIStart": 2343, "focalAPIEnd": 2358, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fanhongtao/JDK/tree/master/src/com/sun/org/apache/xerces/internal/impl/XMLEntityManager.java", "rawCode": "  /**\n   * This method uses the passed-in XMLInputSource to make fCurrentEntity usable for reading.\n   *\n   * @param name name of the entity (XML is it's the document entity)\n   * @param xmlInputSource the input source, with sufficient information to begin scanning\n   *     characters.\n   * @param literal True if this entity is started within a literal value.\n   * @param isExternal whether this entity should be treated as an internal or external entity.\n   * @throws IOException if anything can't be read XNIException If any parser-specific goes wrong.\n   * @return the encoding of the new entity or null if a character stream was employed\n   */\n  public String setupCurrentEntity(\n      String name, XMLInputSource xmlInputSource, boolean literal, boolean isExternal)\n      throws IOException, XNIException {\n    // get information\n\n    final String publicId = xmlInputSource.getPublicId();\n    String literalSystemId = xmlInputSource.getSystemId();\n    String baseSystemId = xmlInputSource.getBaseSystemId();\n    String encoding = xmlInputSource.getEncoding();\n    final boolean encodingExternallySpecified = (encoding != null);\n    Boolean isBigEndian = null;\n\n    // create reader\n    InputStream stream = null;\n    Reader reader = xmlInputSource.getCharacterStream();\n\n    // First chance checking strict URI\n    String expandedSystemId = expandSystemId(literalSystemId, baseSystemId, fStrictURI);\n    if (baseSystemId == null) {\n      baseSystemId = expandedSystemId;\n    }\n    if (reader == null) {\n      stream = xmlInputSource.getByteStream();\n      if (stream == null) {\n        URL location = new URL(expandedSystemId);\n        URLConnection connect = location.openConnection();\n        if (!(connect instanceof HttpURLConnection)) {\n          stream = connect.getInputStream();\n        } else {\n          boolean followRedirects = true;\n\n          // setup URLConnection if we have an HTTPInputSource\n          if (xmlInputSource instanceof HTTPInputSource) {\n            final HttpURLConnection urlConnection = (HttpURLConnection) connect;\n            final HTTPInputSource httpInputSource = (HTTPInputSource) xmlInputSource;\n\n            // set request properties\n            Iterator propIter = httpInputSource.getHTTPRequestProperties();\n            while (propIter.hasNext()) {\n              Map.Entry entry = (Map.Entry) propIter.next();\n              urlConnection.setRequestProperty((String) entry.getKey(), (String) entry.getValue());\n            }\n\n            // set preference for redirection\n            followRedirects = httpInputSource.getFollowHTTPRedirects();\n            if (!followRedirects) {\n              setInstanceFollowRedirects(urlConnection, followRedirects);\n            }\n          }\n\n          stream = connect.getInputStream();\n\n          // REVISIT: If the URLConnection has external encoding\n          // information, we should be reading it here. It's located\n          // in the charset parameter of Content-Type. -- mrglavas\n\n          if (followRedirects) {\n            String redirect = connect.getURL().toString();\n            // E43: Check if the URL was redirected, and then\n            // update literal and expanded system IDs if needed.\n            if (!redirect.equals(expandedSystemId)) {\n              literalSystemId = redirect;\n              expandedSystemId = redirect;\n            }\n          }\n        }\n      }\n\n      // wrap this stream in RewindableInputStream\n      stream = new RewindableInputStream(stream);\n\n      // perform auto-detect of encoding if necessary\n      if (encoding == null) {\n        // read first four bytes and determine encoding\n        final byte[] b4 = new byte[4];\n        int count = 0;\n        for (; count < 4; count++) {\n          b4[count] = (byte) stream.read();\n        }\n        if (count == 4) {\n          Object[] encodingDesc = getEncodingName(b4, count);\n          encoding = (String) (encodingDesc[0]);\n          isBigEndian = (Boolean) (encodingDesc[1]);\n\n          stream.reset();\n          // Special case UTF-8 files with BOM created by Microsoft\n          // tools. It's more efficient to consume the BOM than make\n          // the reader perform extra checks. -Ac\n          if (count > 2 && encoding.equals(\"UTF-8\")) {\n            int b0 = b4[0] & 0xFF;\n            int b1 = b4[1] & 0xFF;\n            int b2 = b4[2] & 0xFF;\n            if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {\n              // ignore first three bytes...\n              stream.skip(3);\n            }\n          }\n          reader = createReader(stream, encoding, isBigEndian);\n        } else {\n          reader = createReader(stream, encoding, isBigEndian);\n        }\n      }\n\n      // use specified encoding\n      else {\n        encoding = encoding.toUpperCase(Locale.ENGLISH);\n\n        // If encoding is UTF-8, consume BOM if one is present.\n        if (encoding.equals(\"UTF-8\")) {\n          final int[] b3 = new int[3];\n          int count = 0;\n          for (; count < 3; ++count) {\n            b3[count] = stream.read();\n            if (b3[count] == -1) break;\n          }\n          if (count == 3) {\n            if (b3[0] != 0xEF || b3[1] != 0xBB || b3[2] != 0xBF) {\n              // First three bytes are not BOM, so reset.\n              stream.reset();\n            }\n          } else {\n            stream.reset();\n          }\n        }\n        // If encoding is UTF-16, we still need to read the first four bytes\n        // in order to discover the byte order.\n        else if (encoding.equals(\"UTF-16\")) {\n          final int[] b4 = new int[4];\n          int count = 0;\n          for (; count < 4; ++count) {\n            b4[count] = stream.read();\n            if (b4[count] == -1) break;\n          }\n          stream.reset();\n\n          String utf16Encoding = \"UTF-16\";\n          if (count >= 2) {\n            final int b0 = b4[0];\n            final int b1 = b4[1];\n            if (b0 == 0xFE && b1 == 0xFF) {\n              // UTF-16, big-endian\n              utf16Encoding = \"UTF-16BE\";\n              isBigEndian = Boolean.TRUE;\n            } else if (b0 == 0xFF && b1 == 0xFE) {\n              // UTF-16, little-endian\n              utf16Encoding = \"UTF-16LE\";\n              isBigEndian = Boolean.FALSE;\n            } else if (count == 4) {\n              final int b2 = b4[2];\n              final int b3 = b4[3];\n              if (b0 == 0x00 && b1 == 0x3C && b2 == 0x00 && b3 == 0x3F) {\n                // UTF-16, big-endian, no BOM\n                utf16Encoding = \"UTF-16BE\";\n                isBigEndian = Boolean.TRUE;\n              }\n              if (b0 == 0x3C && b1 == 0x00 && b2 == 0x3F && b3 == 0x00) {\n                // UTF-16, little-endian, no BOM\n                utf16Encoding = \"UTF-16LE\";\n                isBigEndian = Boolean.FALSE;\n              }\n            }\n          }\n          reader = createReader(stream, utf16Encoding, isBigEndian);\n        }\n        // If encoding is UCS-4, we still need to read the first four bytes\n        // in order to discover the byte order.\n        else if (encoding.equals(\"ISO-10646-UCS-4\")) {\n          final int[] b4 = new int[4];\n          int count = 0;\n          for (; count < 4; ++count) {\n            b4[count] = stream.read();\n            if (b4[count] == -1) break;\n          }\n          stream.reset();\n\n          // Ignore unusual octet order for now.\n          if (count == 4) {\n            // UCS-4, big endian (1234)\n            if (b4[0] == 0x00 && b4[1] == 0x00 && b4[2] == 0x00 && b4[3] == 0x3C) {\n              isBigEndian = Boolean.TRUE;\n            }\n            // UCS-4, little endian (1234)\n            else if (b4[0] == 0x3C && b4[1] == 0x00 && b4[2] == 0x00 && b4[3] == 0x00) {\n              isBigEndian = Boolean.FALSE;\n            }\n          }\n        }\n        // If encoding is UCS-2, we still need to read the first four bytes\n        // in order to discover the byte order.\n        else if (encoding.equals(\"ISO-10646-UCS-2\")) {\n          final int[] b4 = new int[4];\n          int count = 0;\n          for (; count < 4; ++count) {\n            b4[count] = stream.read();\n            if (b4[count] == -1) break;\n          }\n          stream.reset();\n\n          if (count == 4) {\n            // UCS-2, big endian\n            if (b4[0] == 0x00 && b4[1] == 0x3C && b4[2] == 0x00 && b4[3] == 0x3F) {\n              isBigEndian = Boolean.TRUE;\n            }\n            // UCS-2, little endian\n            else if (b4[0] == 0x3C && b4[1] == 0x00 && b4[2] == 0x3F && b4[3] == 0x00) {\n              isBigEndian = Boolean.FALSE;\n            }\n          }\n        }\n\n        reader = createReader(stream, encoding, isBigEndian);\n      }\n\n      // read one character at a time so we don't jump too far\n      // ahead, converting characters from the byte stream in\n      // the wrong encoding\n      if (DEBUG_ENCODINGS) {\n        System.out.println(\"$$$ no longer wrapping reader in OneCharReader\");\n      }\n      // reader = new OneCharReader(reader);\n    }\n\n    // We've seen a new Reader.\n    // Push it on the stack so we can close it later.\n    // fOwnReaders.add(reader);\n\n    // push entity on stack\n    if (fCurrentEntity != null) {\n      fEntityStack.push(fCurrentEntity);\n    }\n\n    // create entity\n    /* if encoding is specified externally, 'encoding' information present\n     * in the prolog of the XML document is not considered. Hence, prolog can\n     * be read in Chunks of data instead of byte by byte.\n     */\n    fCurrentEntity =\n        new com.sun.xml.internal.stream.Entity.ScannedEntity(\n            name,\n            new XMLResourceIdentifierImpl(\n                publicId, literalSystemId, baseSystemId, expandedSystemId),\n            stream,\n            reader,\n            encoding,\n            literal,\n            encodingExternallySpecified,\n            isExternal);\n    fCurrentEntity.setEncodingExternallySpecified(encodingExternallySpecified);\n    fEntityScanner.setCurrentEntity(fCurrentEntity);\n    fResourceIdentifier.setValues(publicId, literalSystemId, baseSystemId, expandedSystemId);\n    return encoding;\n  } // setupCurrentEntity(String, XMLInputSource, boolean, boolean): String\n"}, {"dataset": "next", "exampleID": 3033, "initialization": ["Iterator iterator = List<LogisticsBusinessT>.iterator()"], "initializationStart": [239], "initializationEnd": [254], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 220, "guardExpressionEnd": 271, "guardBlockStart": 220, "guardBlockEnd": 477, "focalAPI": "element = iterator.next()", "focalAPIStart": 328, "focalAPIEnd": 337, "followUpCheck": "element.getVisible().equals(\"1\")", "checkType": "IF", "followUpCheckExpressionStart": 347, "followUpCheckExpressionEnd": 380, "followUpCheckBlockStart": 347, "followUpCheckBlockEnd": 469, "use": ["element.getLogisticsid()"], "useStart": [420], "useEnd": [440], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sdywcd/jshoper3x/tree/master/jshoper3x/src/com/jshop/action/frontstage/order/GroupOrderAction.java", "rawCode": "  /** 获取物流商配送方式 */\n  public void GetDefaultLogistictsBusiness() {\n    List<LogisticsBusinessT> list =\n        this.getLogisticsBusinessTService().findAllLogisticsBusiness(StaticKey.ONE);\n    if (!list.isEmpty()) {\n      for (Iterator it = list.iterator(); it.hasNext(); ) {\n        LogisticsBusinessT lbt = (LogisticsBusinessT) it.next();\n        if (lbt.getVisible().equals(\"1\")) {\n          this.setDefaultlogisticsid(lbt.getLogisticsid());\n          break;\n        }\n      }\n      ActionContext.getContext().put(\"logistics\", list);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3034, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 417, "focalAPIEnd": 432, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arnauddegiuli/MyDomo/tree/master/engine/src/main/java/org/json/JSONObject.java", "rawCode": "  /**\n   * Get an array of field names from a JSONObject.\n   *\n   * @return An array of field names, or null if there are no names.\n   */\n  public static String[] getNames(JSONObject jo) {\n    int length = jo.length();\n    if (length == 0) {\n      return null;\n    }\n    Iterator iterator = jo.keys();\n    String[] names = new String[length];\n    int i = 0;\n    while (iterator.hasNext()) {\n      names[i] = (String) iterator.next();\n      i += 1;\n    }\n    return names;\n  }\n"}, {"dataset": "next", "exampleID": 3035, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [727], "initializationEnd": [745], "hasTryCatch": 1, "exceptionType": "HibernateException", "exceptionHandlingCall": ["getSession()", "clear()", "convertHibernateAccessException(*)"], "tryExpressionStart": 88, "tryExpressionEnd": 92, "tryBlockStart": 88, "tryBlockEnd": 1035, "catchExpressionStart": 923, "catchExpressionEnd": 952, "catchBlockStart": 923, "catchBlockEnd": 1035, "exceptionHandlingCallStart": [960, 960, 994], "exceptionHandlingCallEnd": [972, 980, 1028], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 708, "guardExpressionEnd": 762, "guardBlockStart": 708, "guardBlockEnd": 891, "focalAPI": "element = iterator.next()", "focalAPIStart": 809, "focalAPIEnd": 818, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["initializeItem(element)", "Set<ContentItem>.add(element)"], "useStart": [828, 861], "useEnd": [851, 882], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Spectrsys/cosmo/tree/master/cosmo/src/main/java/org/osaf/cosmo/dao/hibernate/ContentDaoImpl.java", "rawCode": "  public Set<ContentItem> loadChildren(CollectionItem collection, Date timestamp) {\n    try {\n      Set<ContentItem> children = new HashSet<ContentItem>();\n      Query query = null;\n\n      // use custom HQL query that will eager fetch all associations\n      if (timestamp == null)\n        query =\n            getSession().getNamedQuery(\"contentItem.by.parent\").setParameter(\"parent\", collection);\n      else\n        query =\n            getSession()\n                .getNamedQuery(\"contentItem.by.parent.timestamp\")\n                .setParameter(\"parent\", collection)\n                .setParameter(\"timestamp\", timestamp);\n\n      query.setFlushMode(FlushMode.MANUAL);\n      List results = query.list();\n      for (Iterator it = results.iterator(); it.hasNext(); ) {\n        ContentItem content = (ContentItem) it.next();\n        initializeItem(content);\n        children.add(content);\n      }\n\n      return children;\n\n    } catch (HibernateException e) {\n      getSession().clear();\n      throw convertHibernateAccessException(e);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3036, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 207, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Iterator.add(element)"], "useStart": [186], "useEnd": [223], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rjo1970/dumbster/tree/master/test-src/com/dumbster/smtp/eml/EMLMailMessageTest.java", "rawCode": "  @Test\n  public void testGetHeaderNames() {\n    List<String> headers = new ArrayList<String>();\n    Iterator iterator = message.getHeaderNames();\n    while (iterator.hasNext()) {\n      headers.add((String) iterator.next());\n    }\n    assertEquals(5, headers.size());\n  }\n"}, {"dataset": "next", "exampleID": 3037, "initialization": ["Iterator iterator = FeatureMap.iterator()"], "initializationStart": [359], "initializationEnd": [375], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 340, "guardExpressionEnd": 392, "guardBlockStart": 340, "guardBlockEnd": 577, "focalAPI": "element = iterator.next()", "focalAPIStart": 445, "focalAPIEnd": 454, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.Entry.getValue()"], "useStart": [490], "useEnd": [506], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/boundlessgeo/geoserver-2.0.x/tree/master/wfs/src/main/java/org/geoserver/wfs/Transaction.java", "rawCode": "  /**\n   * Looks up the element handlers to be used for each element\n   *\n   * @param group\n   * @return\n   */\n  private Map gatherElementHandlers(FeatureMap group) throws WFSTransactionException {\n    // JD: use a linked hashmap since the order of elements in a transaction\n    // must be respected\n    Map map = new LinkedHashMap();\n\n    for (Iterator it = group.iterator(); it.hasNext(); ) {\n      FeatureMap.Entry entry = (FeatureMap.Entry) it.next();\n      EObject element = (EObject) entry.getValue();\n      map.put(element, findElementHandler(element.getClass()));\n    }\n\n    return map;\n  }\n"}, {"dataset": "next", "exampleID": 3038, "initialization": ["Iterator iterator = ArrayList.iterator()"], "initializationStart": [454], "initializationEnd": [472], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 480, "guardExpressionEnd": 503, "guardBlockStart": 480, "guardBlockEnd": 665, "focalAPI": "element = iterator.next()", "focalAPIStart": 589, "focalAPIEnd": 601, "followUpCheck": "element.listener == listener", "checkType": "IF", "followUpCheckExpressionStart": 611, "followUpCheckExpressionEnd": 641, "followUpCheckBlockStart": 611, "followUpCheckBlockEnd": 657, "use": ["iterator.remove()"], "useStart": [642], "useEnd": [656], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benothman/jboss-web-nio2/tree/master/java/org/apache/tomcat/util/modeler/BaseNotificationBroadcaster.java", "rawCode": "  /**\n   * Remove a notification event listener from this MBean.\n   *\n   * @param listener The listener to be removed (any and all registrations for this listener will be\n   *     eliminated)\n   * @exception ListenerNotFoundException if this listener is not registered in the MBean\n   */\n  public void removeNotificationListener(NotificationListener listener)\n      throws ListenerNotFoundException {\n\n    synchronized (entries) {\n      Iterator items = entries.iterator();\n      while (items.hasNext()) {\n        BaseNotificationBroadcasterEntry item = (BaseNotificationBroadcasterEntry) items.next();\n        if (item.listener == listener) items.remove();\n      }\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3039, "initialization": ["Iterator iterator = Collection.iterator()"], "initializationStart": [663], "initializationEnd": [687], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 697, "guardExpressionEnd": 719, "guardBlockStart": 697, "guardBlockEnd": 930, "focalAPI": "element = iterator.next()", "focalAPIStart": 760, "focalAPIEnd": 771, "followUpCheck": "mapper.isMappable(element) && !mappableDocumentNodes.contains(element)", "checkType": "IF", "followUpCheckExpressionStart": 783, "followUpCheckExpressionEnd": 858, "followUpCheckBlockStart": 783, "followUpCheckBlockEnd": 920, "use": ["Collection.add(element)"], "useStart": [873], "useEnd": [907], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Teiid-Designer/teiid-designer/tree/master/plugins/org.teiid.designer.mapping/src/org/teiid/designer/mapping/factory/MappingClassFactory.java", "rawCode": "  private void finishCreateMappingClass(\n      EObject location, MappingClass mappingClass, boolean moveParentAttributes) {\n\n    if (mappingClass != null) {\n\n      if (moveParentAttributes) {\n\n        Collection documentNodes = getMappingClassExtentNodes(mappingClass);\n        Collection mappableDocumentNodes = new ArrayList(documentNodes.size() + 1);\n\n        // first, see if this node itself is mappable\n        if (mapper.isMappable(location)) {\n          // make or move a mapping attribute for this attribute\n          mappableDocumentNodes.add(location);\n        }\n\n        // next, gather all mappable nodes in the coarse extent\n        Iterator iter = documentNodes.iterator();\n        while (iter.hasNext()) {\n          EObject docNode = (EObject) iter.next();\n          if (mapper.isMappable(docNode) && !mappableDocumentNodes.contains(docNode)) {\n            mappableDocumentNodes.add(docNode);\n          }\n        }\n\n        // finally, move or create the attributes, as appropriate\n        if (!mappableDocumentNodes.isEmpty()) {\n          moveOrCreateMappingClassColumns(\n              mappingClass, mappableDocumentNodes, new HashMap(), true, new HashSet());\n        }\n      }\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3040, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 447, "focalAPIEnd": 455, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getVar()"], "useStart": [432], "useEnd": [465], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/osi/mulgara/tree/master/src/jar/rdql/java/org/mulgara/rdql/RdqlInterpreter.java", "rawCode": "  private List toList(PSelectClause p) throws ParserException {\n    if (p instanceof AAllSelectClause) {\n      return null;\n    } else if (p instanceof ASomeSelectClause) {\n      ASomeSelectClause selectClause = (ASomeSelectClause) p;\n      List list = new LinkedList();\n      list.add(toVariable(selectClause.getVar()));\n      for (Iterator i = selectClause.getSelectTail().iterator(); i.hasNext(); ) {\n        list.add(toVariable(((ASelectTail) i.next()).getVar()));\n      }\n      return list;\n    } else {\n      throw new Error(\"Unhandled PSelectClause subtype \" + p.getClass());\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3041, "initialization": ["Iterator iterator = Vector.iterator()"], "initializationStart": [640], "initializationEnd": [667], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 675, "guardExpressionEnd": 702, "guardBlockStart": 675, "guardBlockEnd": 1101, "focalAPI": "element = iterator.next()", "focalAPIStart": 788, "focalAPIEnd": 804, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.servletContextHalted()"], "useStart": [830], "useEnd": [861], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jentrata/jentrata-msh/tree/master/Commons/src/main/java/hk/hku/cecid/piazza/commons/servlet/StatefulServletContext.java", "rawCode": "  /**\n   * Halts this context. The calling thread will be blocked until a lock on the context has been\n   * acquired and no more threads are running under this context. Nothing will be done if the\n   * servlet is already halted.\n   *\n   * @return true if and only if this context is not halted or being halted.\n   */\n  public synchronized boolean halt() {\n    if (!halted) {\n      Sys.main.log.info(this.getClass().getName() + \" is being halted\");\n      halted = true;\n      haltRequested = true;\n\n      while (threadCount > 0) {\n        try {\n          wait();\n        } catch (Exception e) {\n        }\n      }\n\n      Iterator listeners = contextListeners.iterator();\n      while (listeners.hasNext()) {\n        StatefulServletContextListener listener = (StatefulServletContextListener) listeners.next();\n        try {\n          listener.servletContextHalted();\n        } catch (Exception e) {\n          Sys.main.log.error(\n              \"Error in invoking listener '\"\n                  + listener.getClass().getName()\n                  + \"' after context halted\",\n              e);\n        }\n      }\n\n      haltRequested = false;\n      Sys.main.log.info(this.getClass().getName() + \" has been halted\");\n      return true;\n    } else {\n      return false;\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3042, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 43, "focalAPIEnd": 55, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aldaris/opensso/tree/master/products/amserver/source/com/iplanet/services/ldap/AttrSet.java", "rawCode": "  public Object nextElement() {\n    return _iter.next();\n  }\n"}, {"dataset": "next", "exampleID": 3043, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [1155], "initializationEnd": [1176], "hasTryCatch": 1, "exceptionType": "IdRepoException", "exceptionHandlingCall": ["getMessage()", "debugError(String,*)", "writeLog(*,*,String,String[])", "new CLIException(*,*)"], "tryExpressionStart": 1005, "tryExpressionEnd": 1009, "tryBlockStart": 1005, "tryBlockEnd": 2359, "catchExpressionStart": 1761, "catchExpressionEnd": 1787, "catchBlockStart": 1761, "catchBlockEnd": 2061, "exceptionHandlingCallStart": [1837, 1860, 1911, 1996], "exceptionHandlingCallEnd": [1851, 1903, 1982, 2054], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 1137, "guardExpressionEnd": 1192, "guardBlockStart": 1137, "guardBlockEnd": 1366, "focalAPI": "element = iterator.next()", "focalAPIStart": 1226, "focalAPIEnd": 1234, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new AMIdentity(SSOToken,element,*,String,*)"], "useStart": [1262], "useEnd": [1328], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aldaris/opensso/tree/master/products/amserver/source/com/sun/identity/cli/agentconfig/DeleteAgents.java", "rawCode": "  /**\n   * Services a Commandline Request.\n   *\n   * @param rc Request Context.\n   * @throw CLIException if the request cannot serviced.\n   */\n  public void handleRequest(RequestContext rc) throws CLIException {\n    super.handleRequest(rc);\n    ldapLogin();\n\n    SSOToken adminSSOToken = getAdminSSOToken();\n    String realm = getStringOptionValue(IArgument.REALM_NAME);\n    List agentNames = (List) rc.getOption(IArgument.AGENT_NAMES);\n    String file = getStringOptionValue(IArgument.FILE);\n    if (agentNames == null) {\n      agentNames = new ArrayList();\n    }\n\n    if (file != null) {\n      agentNames.addAll(AttributeValues.parseValues(file));\n    }\n\n    if (agentNames.isEmpty()) {\n      throw new CLIException(\n          getResourceString(\"missing-agent-names\"), ExitCodes.REQUEST_CANNOT_BE_PROCESSED);\n    }\n\n    String displayableNames = tokenize(agentNames);\n    String[] params = {realm, displayableNames};\n    writeLog(LogWriter.LOG_ACCESS, Level.INFO, \"ATTEMPT_DELETE_AGENTS\", params);\n\n    try {\n      AMIdentityRepository amir = new AMIdentityRepository(adminSSOToken, realm);\n      Set setDelete = new HashSet();\n\n      for (Iterator i = agentNames.iterator(); i.hasNext(); ) {\n        String name = (String) i.next();\n        AMIdentity amid = new AMIdentity(adminSSOToken, name, IdType.AGENTONLY, realm, null);\n        setDelete.add(amid);\n      }\n\n      amir.deleteIdentities(setDelete);\n      IOutput outputWriter = getOutputWriter();\n      outputWriter.printlnMessage(getResourceString(\"delete-agent-succeeded\"));\n\n      for (Iterator i = agentNames.iterator(); i.hasNext(); ) {\n        outputWriter.printlnMessage(\" \" + (String) i.next());\n      }\n\n      writeLog(LogWriter.LOG_ACCESS, Level.INFO, \"SUCCEED_DELETE_AGENTS\", params);\n    } catch (IdRepoException e) {\n      String[] args = {realm, displayableNames, e.getMessage()};\n      debugError(\"DeleteAgents.handleRequest\", e);\n      writeLog(LogWriter.LOG_ERROR, Level.INFO, \"FAILED_DELETE_AGENTS\", args);\n      throw new CLIException(e, ExitCodes.REQUEST_CANNOT_BE_PROCESSED);\n    } catch (SSOException e) {\n      String[] args = {realm, displayableNames, e.getMessage()};\n      debugError(\"DeleteAgents.handleRequest\", e);\n      writeLog(LogWriter.LOG_ERROR, Level.INFO, \"FAILED_DELETE_AGENTS\", args);\n      throw new CLIException(e, ExitCodes.REQUEST_CANNOT_BE_PROCESSED);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3044, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [222], "initializationEnd": [240], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 201, "guardExpressionEnd": 259, "guardBlockStart": 201, "guardBlockEnd": 501, "focalAPI": "element = iterator.next()", "focalAPIStart": 288, "focalAPIEnd": 299, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["checkString(element,int,String,String)"], "useStart": [307], "useEnd": [348], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RomRaider/assembla.flat/tree/master/branches/dev_gui_def_overhaul/3rdparty/launch4j/src/net/sf/launch4j/binding/Validator.java", "rawCode": "  public static void checkOptStrings(\n      List strings, int maxLength, int totalMaxLength, String property, String name) {\n    if (strings == null) {\n      return;\n    }\n    int totalLength = 0;\n    for (Iterator iter = strings.iterator(); iter.hasNext(); ) {\n      String s = (String) iter.next();\n      checkString(s, maxLength, property, name);\n      totalLength += s.length();\n      if (totalLength > totalMaxLength) {\n        signalLengthViolation(property, name, totalMaxLength);\n      }\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3045, "initialization": ["Iterator iterator = PGPPublicKey.getUserAttributes()"], "initializationStart": [1133], "initializationEnd": [1157], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 1182, "guardExpressionEnd": 1202, "guardBlockStart": 1182, "guardBlockEnd": 1819, "focalAPI": "element = iterator.next()", "focalAPIStart": 1290, "focalAPIEnd": 1299, "followUpCheck": "!s.verifyCertification(element,pubKey)", "checkType": "IF", "followUpCheckExpressionStart": 1557, "followUpCheckExpressionEnd": 1604, "followUpCheckBlockStart": 1557, "followUpCheckBlockEnd": 1671, "use": ["PGPPublicKey.getSignaturesForUserAttribute(element)"], "useStart": [1324], "useEnd": [1370], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mlundblad/bc-java/tree/master/pg/src/main/j2me/org/bouncycastle/openpgp/test/BcPGPRSATest.java", "rawCode": "  private void embeddedJpegTest() throws Exception {\n    PGPPublicKeyRing pgpPub = new PGPPublicKeyRing(testPubKey, new BcKeyFingerprintCalculator());\n    PGPSecretKeyRing pgpSec = new PGPSecretKeyRing(testPrivKey, new BcKeyFingerprintCalculator());\n\n    PGPPublicKey pubKey = pgpPub.getPublicKey();\n\n    PGPUserAttributeSubpacketVectorGenerator vGen = new PGPUserAttributeSubpacketVectorGenerator();\n\n    vGen.setImageAttribute(ImageAttribute.JPEG, jpegImage);\n\n    PGPUserAttributeSubpacketVector uVec = vGen.generate();\n\n    PGPSignatureGenerator sGen =\n        new PGPSignatureGenerator(\n            new BcPGPContentSignerBuilder(\n                PublicKeyAlgorithmTags.RSA_GENERAL, HashAlgorithmTags.SHA1));\n\n    sGen.init(\n        PGPSignature.POSITIVE_CERTIFICATION,\n        pgpSec\n            .getSecretKey()\n            .extractPrivateKey(\n                new BcPBESecretKeyDecryptorBuilder(new BcPGPDigestCalculatorProvider())\n                    .build(pass)));\n\n    PGPSignature sig = sGen.generateCertification(uVec, pubKey);\n\n    PGPPublicKey nKey = PGPPublicKey.addCertification(pubKey, uVec, sig);\n\n    Iterator it = nKey.getUserAttributes();\n    int count = 0;\n    while (it.hasNext()) {\n      PGPUserAttributeSubpacketVector attributes = (PGPUserAttributeSubpacketVector) it.next();\n\n      Iterator sigs = nKey.getSignaturesForUserAttribute(attributes);\n      int sigCount = 0;\n      while (sigs.hasNext()) {\n        PGPSignature s = (PGPSignature) sigs.next();\n\n        s.init(new BcPGPContentVerifierBuilderProvider(), pubKey);\n\n        if (!s.verifyCertification(attributes, pubKey)) {\n          fail(\"added signature failed verification\");\n        }\n\n        sigCount++;\n      }\n\n      if (sigCount != 1) {\n        fail(\"Failed added user attributes signature check\");\n      }\n      count++;\n    }\n\n    if (count != 1) {\n      fail(\"didn't find added user attributes\");\n    }\n\n    nKey = PGPPublicKey.removeCertification(nKey, uVec);\n    count = 0;\n    for (it = nKey.getUserAttributes(); it.hasNext(); ) {\n      count++;\n    }\n    if (count != 0) {\n      fail(\"found attributes where none expected\");\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3046, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 477, "focalAPIEnd": 488, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi/tree/master/RehaStatistik/src/Tools/INIFile.java", "rawCode": "  /**\n   * Returns a string array containing names of all sections in INI file.\n   *\n   * @return the string array of section names\n   */\n  public String[] getAllSectionNames() {\n    int iCntr = 0;\n    Iterator iter = null;\n    String[] arrRet = null;\n\n    try {\n      if (this.mhmapSections.size() > 0) {\n        arrRet = new String[this.mhmapSections.size()];\n        for (iter = this.mhmapSections.keySet().iterator(); ; iter.hasNext()) {\n          arrRet[iCntr] = (String) iter.next();\n          iCntr++;\n        }\n      }\n    } catch (NoSuchElementException NSEExIgnore) {\n    } finally {\n      if (iter != null) iter = null;\n    }\n    return arrRet;\n  }\n"}, {"dataset": "next", "exampleID": 3047, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [1845], "initializationEnd": [1862], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 1814, "guardExpressionEnd": 1881, "guardBlockStart": 1814, "guardBlockEnd": 2154, "focalAPI": "element = iterator.next()", "focalAPIStart": 1915, "focalAPIEnd": 1926, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getXm()", "element.setXm(String)"], "useStart": [1960, 1934], "useEnd": [1976, 2147], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/firefoxmmx2/techsupport/tree/master/src/com/aisino2/basicsystem/action/BjxxbAction.java", "rawCode": "  /**\n   * 报警信息客户端 页面\n   *\n   * @return\n   * @throws Exception\n   */\n  public String querylistClient() throws Exception {\n\n    Bjxxb setBjxxb = new Bjxxb();\n    bjxxb = (Bjxxb) this.setClass(setBjxxb, null);\n\n    ActionContext ctx = ActionContext.getContext();\n    HttpServletRequest request = (HttpServletRequest) ctx.get(ServletActionContext.HTTP_REQUEST);\n    HttpServletResponse response =\n        (HttpServletResponse) ctx.get(ServletActionContext.HTTP_RESPONSE);\n    HttpSession session = request.getSession();\n    User user = new User();\n    user = (User) session.getAttribute(Constants.userKey);\n    String usertype = user.getUsertype();\n\n    Map map = new HashMap();\n    /*if(usertype.indexOf(\"24\")==-1&&usertype.indexOf(\"14\")!=-1){\n    ///娱乐业用户\n    map.put(\"hylbdm\", \"J\");\n\n    }else if(usertype.indexOf(\"24\")!=-1&&usertype.indexOf(\"14\")==-1){\n    ///旅馆业用户\n    map.put(\"hylbdm\", \"A\");\n\n    }else if(usertype.indexOf(\"24\")!=-1&&usertype.indexOf(\"24\")!=-1){\n\n    }*/\n\n    Department userDepartment = user.getDepartment();\n    String deptCode = userDepartment.getDepartcode();\n\n    int lev = userDepartment.getDepartlevel();\n    // map.put(\"deptCode\", getUserDept(1) + \"%\");\n    if (lev >= 3) {\n      map.put(\"deptCode\", StringUtil.trimEven0(deptCode) + \"%\");\n    }\n\n    map.put(\"bjsj1\", bjxxb.getBjsj1());\n    map.put(\"bjsj2\", bjxxb.getBjsj2());\n    map.put(\"jqztdm\", bjxxb.getJqztdm()); // //警情状态\n    map.put(\"sfyxbjdm\", bjxxb.getSfyxbjdm()); // /是否有效\n\n    /*System.out.println(bjxxb.getSfyxbjdm());\n    if(\"\".equals(bjxxb.getJqztdm())&&\"\".equals(bjxxb.getSfyxbjdm())){\n    map.put(\"sfyxbjdm2\", \"1\");\n    }*/\n\n    Page page = bjxxbService.getClientListForPage(map, pagesize, pagerow, sort, dir);\n    totalpage = page.getTotalPages();\n    totalrows = page.getTotalRows();\n    lBjxxb = page.getData();\n\n    for (java.util.Iterator iter = lBjxxb.iterator(); iter.hasNext(); ) {\n      Bjxxb oneBjxxb = (Bjxxb) iter.next();\n      oneBjxxb.setXm(\n          oneBjxxb.getXm()\n              + \"<input type='hidden' name='lx\"\n              + oneBjxxb.getBjxxid()\n              + \"' value='\"\n              + oneBjxxb.getBjlx()\n              + \"'/>\");\n    }\n\n    setTabledataClient(lBjxxb);\n    this.result = \"success\";\n    return \"success\";\n  }\n"}, {"dataset": "next", "exampleID": 3048, "initialization": ["Iterator iterator = Set.iterator()"], "initializationStart": [322], "initializationEnd": [338], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 304, "guardExpressionEnd": 354, "guardBlockStart": 304, "guardBlockEnd": 768, "focalAPI": "element = iterator.next()", "focalAPIStart": 386, "focalAPIEnd": 394, "followUpCheck": "element.endsWith(\"/\")", "checkType": "IF", "followUpCheckExpressionStart": 429, "followUpCheckExpressionEnd": 452, "followUpCheckBlockStart": 429, "followUpCheckBlockEnd": 462, "use": ["getResourceAsStream(element)", "new File(element)", "element.lastIndexOf(char)", "element.substring(int,*)"], "useStart": [674, 1224, 1597, 1579], "useEnd": [725, 1238, 1618, 1619], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/KNL-635/api/src/main/java/org/sakaiproject/util/ToolListener.java", "rawCode": "  /** Initialize. */\n  public void contextInitialized(ServletContextEvent event) {\n    // The the location of resource and registration files.\n    Set paths = event.getServletContext().getResourcePaths(\"/tools/\");\n    if (paths == null) return;\n\n    // First Pass: Search for tool registration file.\n    for (Iterator i = paths.iterator(); i.hasNext(); ) {\n      String path = (String) i.next();\n\n      // skip directories\n      if (path.endsWith(\"/\")) continue;\n\n      // If an XML file, use it as the tool registration file.\n      if (path.endsWith(\".xml\")) {\n        M_log.info(\"registering tools from resource: \" + path);\n        ActiveToolManager.register(\n            event.getServletContext().getResourceAsStream(path), event.getServletContext());\n      }\n    }\n\n    // Second pass, search for message bundles. Two passes are necessary to make sure the tool is\n    // registered first.\n    for (Iterator j = paths.iterator(); j.hasNext(); ) {\n      String path = (String) j.next();\n\n      // skip directories\n      if (path.endsWith(\"/\")) continue;\n\n      // Check for a message properties file.\n      if (path.endsWith(\".properties\")) {\n        // Extract the tool id from the resource file name.\n        File reg = new File(path);\n        String tn = reg.getName();\n        String tid = null;\n        if (tn.indexOf('_') == -1) tid = tn.substring(0, tn.lastIndexOf('.')); // Default file.\n        else tid = tn.substring(0, tn.indexOf('_')); // Locale-based file.\n\n        String msg =\n            event\n                .getServletContext()\n                .getRealPath(path.substring(0, path.lastIndexOf('.')) + \".properties\");\n        if (tid != null) {\n          ActiveToolManager.setResourceBundle(tid, msg);\n          M_log.info(\"Added localization resources for \" + tid);\n        }\n      }\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3049, "initialization": ["Iterator iterator = OptDirectedEdge.getOutRelated()"], "initializationStart": [56], "initializationEnd": [78], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 124, "focalAPIEnd": 134, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["iterator.hasNext()", "iterator.next()", "iterator.hasNext()", "iterator.next()", "iterator.hasNext()", "iterator.next()", "iterator.next()", "iterator.hasNext()", "iterator.next()", "iterator.next()", "iterator.next()", "iterator.hasNext()", "iterator.next()", "iterator.next()", "iterator.hasNext()"], "useStart": [186, 344, 406, 574, 636, 755, 843, 920, 1048, 1152, 1256, 1349, 1461, 1553, 1634], "useEnd": [199, 354, 419, 584, 649, 765, 853, 933, 1058, 1162, 1266, 1362, 1471, 1563, 1647], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdeolive/geotools-old/tree/master/modules/extension/graph/src/test/java/org/geotools/graph/structure/opt/OptDirectedEdgeTest.java", "rawCode": "  public void test_getOutRelated() {\n    Iterator itr = m_edge.getOutRelated();\n\n    OptDirectedEdge de = (OptDirectedEdge) itr.next();\n    assertTrue(de == m_outEdge);\n\n    assertTrue(!itr.hasNext());\n\n    // add same edge (shouldn't show up in iterator this time)\n    addSame();\n\n    itr = m_edge.getOutRelated();\n\n    de = (OptDirectedEdge) itr.next();\n    assertTrue(de == m_outEdge);\n\n    assertTrue(!itr.hasNext());\n\n    // add multiple same edge (shouldn't show up in iterator this time)\n    addSame2();\n\n    itr = m_edge.getOutRelated();\n\n    de = (OptDirectedEdge) itr.next();\n    assertTrue(de == m_outEdge);\n\n    assertTrue(!itr.hasNext());\n\n    // add opposite edge\n    addOpp();\n\n    itr = m_edge.getOutRelated();\n\n    de = (OptDirectedEdge) itr.next();\n    assertTrue(de == m_outEdge || de == m_opp);\n\n    de = (OptDirectedEdge) itr.next();\n    assertTrue(de == m_outEdge || de == m_opp);\n\n    assertTrue(!itr.hasNext());\n\n    // add another opposite edge\n    addOpp2();\n\n    itr = m_edge.getOutRelated();\n\n    de = (OptDirectedEdge) itr.next();\n    assertTrue(de == m_outEdge || de == m_opp || de == m_opp2);\n\n    de = (OptDirectedEdge) itr.next();\n    assertTrue(de == m_outEdge || de == m_opp || de == m_opp2);\n\n    de = (OptDirectedEdge) itr.next();\n    assertTrue(de == m_outEdge || de == m_opp || de == m_opp2);\n\n    assertTrue(!itr.hasNext());\n\n    // add loop\n    addLoops();\n\n    itr = m_edge.getOutRelated();\n\n    de = (OptDirectedEdge) itr.next();\n    assertTrue(de == m_outEdge || de == m_outloop);\n\n    de = (OptDirectedEdge) itr.next();\n    assertTrue(de == m_outEdge || de == m_outloop);\n\n    assertTrue(!itr.hasNext());\n  }\n"}, {"dataset": "next", "exampleID": 3050, "initialization": ["Iterator iterator = rcIterator()"], "initializationStart": [497], "initializationEnd": [514], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 478, "guardExpressionEnd": 531, "guardBlockStart": 478, "guardBlockEnd": 645, "focalAPI": "element = iterator.next()", "focalAPIStart": 582, "focalAPIEnd": 591, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.list(String)"], "useStart": [613], "useEnd": [637], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pegasus-isi/pegasus/tree/master/src/edu/isi/pegasus/planner/catalog/replica/impl/MRC.java", "rawCode": "  /**\n   * Lists a subset of all logical filenames in the catalog.\n   *\n   * @param constraint is a constraint for the logical filename only. It is a string that has some\n   *     meaning to the implementing system. This can be a SQL wildcard for queries, or a regular\n   *     expression for Java-based memory collections.\n   * @return A set of logical filenames that match. The set may be empty\n   */\n  public Set list(String constraint) {\n    Set result = new HashSet();\n    for (Iterator it = this.rcIterator(); it.hasNext(); ) {\n      ReplicaCatalog catalog = (ReplicaCatalog) it.next();\n      result.addAll(catalog.list(constraint));\n    }\n    return result;\n  }\n"}, {"dataset": "next", "exampleID": 3051, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 134, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdeolive/geotools-old/tree/master/modules/extension/graph/src/main/java/org/geotools/graph/util/Stack.java", "rawCode": "  public void pushAll(Collection elements) {\n    for (Iterator itr = elements.iterator(); itr.hasNext(); ) {\n      m_values[m_sp++] = itr.next();\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3052, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [115], "initializationEnd": [132], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 138, "guardExpressionEnd": 158, "guardBlockStart": 138, "guardBlockEnd": 390, "focalAPI": "element = iterator.next()", "focalAPIStart": 201, "focalAPIEnd": 210, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.setTonic(*)", "element.setBeat(*)", "add(element)"], "useStart": [218, 312, 354], "useEnd": [304, 346, 383], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/certator/tuxguitar_mod/tree/master/TuxGuitar/src/org/herac/tuxguitar/app/editors/chord/ChordList.java", "rawCode": "  public void setChords(List chords) {\n    this.disposeChords();\n    this.selectedChord = null;\n\n    Iterator it = chords.iterator();\n    while (it.hasNext()) {\n      TGChordImpl chord = (TGChordImpl) it.next();\n      chord.setTonic(ChordList.this.dialog.getSelector().getTonicList().getSelectionIndex());\n      chord.setBeat(ChordList.this.beat);\n      this.graphicChords.add(chord);\n    }\n    this.redraw();\n  }\n"}, {"dataset": "next", "exampleID": 3053, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [213], "initializationEnd": [227], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 195, "guardExpressionEnd": 243, "guardBlockStart": 195, "guardBlockEnd": 577, "focalAPI": "element = iterator.next()", "focalAPIStart": 284, "focalAPIEnd": 292, "followUpCheck": "true || (!key.equals(element.getServer()))", "checkType": "IF", "followUpCheckExpressionStart": 391, "followUpCheckExpressionEnd": 441, "followUpCheckBlockStart": 391, "followUpCheckBlockEnd": 548, "use": ["element.getServer()", "List.add(element)"], "useStart": [425, 556], "useEnd": [438, 570], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta01/kernel-impl/src/main/java/org/sakaiproject/event/impl/UsageSessionServiceAdaptor.java", "rawCode": "  /** @inheritDoc */\n  public Map getOpenSessionsByServer() {\n    List all = m_storage.getOpenSessions();\n\n    Map byServer = new TreeMap();\n\n    List current = null;\n    String key = null;\n\n    for (Iterator i = all.iterator(); i.hasNext(); ) {\n      UsageSession s = (UsageSession) i.next();\n\n      // to start, or when the server changes, create a new inner list and add to the map\n      if ((key == null) || (!key.equals(s.getServer()))) {\n        key = s.getServer();\n        current = new Vector();\n        byServer.put(key, current);\n      }\n\n      current.add(s);\n    }\n\n    return byServer;\n  }\n"}, {"dataset": "next", "exampleID": 3054, "initialization": ["Iterator iterator = Element.elementIterator()"], "initializationStart": [1187], "initializationEnd": [1209], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 1215, "guardExpressionEnd": 1237, "guardBlockStart": 1215, "guardBlockEnd": 3766, "focalAPI": "element = iterator.next()", "focalAPIStart": 1274, "focalAPIEnd": 1285, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getName()", "element.attributeValue(String)", "bindSimpleValue(element,SimpleValue,*,*,Mappings)", "element.attribute(String)", "element.attribute(String)", "bindSimpleValue(element,SimpleValue,boolean,*,Mappings)", "bindManyToOne(element,Any,*,boolean,Mappings)", "bindManyToManySubelements(Collection,element,Mappings)", "bindComposite(element,Any,String,boolean,Mappings,java.util.Map)", "bindAny(element,Any,boolean,Mappings)", "element.attributeValue(String)", "element.attributeValue(String)", "element.attributeValue(String)"], "useStart": [1307, 1809, 1856, 2033, 2194, 2516, 2785, 2883, 3107, 3389, 3520, 3592, 3660], "useEnd": [1324, 1844, 1970, 2062, 2221, 2601, 2873, 2939, 3218, 3430, 3551, 3624, 3690], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/drepshas/hib-core/tree/master/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java", "rawCode": "  /** Called for all collections */\n  public static void bindCollectionSecondPass(\n      Element node,\n      Collection collection,\n      java.util.Map persistentClasses,\n      Mappings mappings,\n      java.util.Map inheritedMetas)\n      throws MappingException {\n\n    if (collection.isOneToMany()) {\n      OneToMany oneToMany = (OneToMany) collection.getElement();\n      String assocClass = oneToMany.getReferencedEntityName();\n      PersistentClass persistentClass = (PersistentClass) persistentClasses.get(assocClass);\n      if (persistentClass == null) {\n        throw new MappingException(\"Association references unmapped class: \" + assocClass);\n      }\n      oneToMany.setAssociatedClass(persistentClass);\n      collection.setCollectionTable(persistentClass.getTable());\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debugf(\n            \"Mapping collection: %s -> %s\",\n            collection.getRole(), collection.getCollectionTable().getName());\n      }\n    }\n\n    // CHECK\n    Attribute chNode = node.attribute(\"check\");\n    if (chNode != null) {\n      collection.getCollectionTable().addCheckConstraint(chNode.getValue());\n    }\n\n    // contained elements:\n    Iterator iter = node.elementIterator();\n    while (iter.hasNext()) {\n      Element subnode = (Element) iter.next();\n      String name = subnode.getName();\n\n      if (\"key\".equals(name)) {\n        KeyValue keyVal;\n        String propRef = collection.getReferencedPropertyName();\n        if (propRef == null) {\n          keyVal = collection.getOwner().getIdentifier();\n        } else {\n          keyVal = (KeyValue) collection.getOwner().getRecursiveProperty(propRef).getValue();\n        }\n        SimpleValue key = new DependantValue(mappings, collection.getCollectionTable(), keyVal);\n        key.setCascadeDeleteEnabled(\"cascade\".equals(subnode.attributeValue(\"on-delete\")));\n        bindSimpleValue(\n            subnode, key, collection.isOneToMany(), Collection.DEFAULT_KEY_COLUMN_NAME, mappings);\n        collection.setKey(key);\n\n        Attribute notNull = subnode.attribute(\"not-null\");\n        ((DependantValue) key).setNullable(notNull == null || notNull.getValue().equals(\"false\"));\n        Attribute updateable = subnode.attribute(\"update\");\n        ((DependantValue) key)\n            .setUpdateable(updateable == null || updateable.getValue().equals(\"true\"));\n\n      } else if (\"element\".equals(name)) {\n        SimpleValue elt = new SimpleValue(mappings, collection.getCollectionTable());\n        collection.setElement(elt);\n        bindSimpleValue(subnode, elt, true, Collection.DEFAULT_ELEMENT_COLUMN_NAME, mappings);\n      } else if (\"many-to-many\".equals(name)) {\n        ManyToOne element = new ManyToOne(mappings, collection.getCollectionTable());\n        collection.setElement(element);\n        bindManyToOne(subnode, element, Collection.DEFAULT_ELEMENT_COLUMN_NAME, false, mappings);\n        bindManyToManySubelements(collection, subnode, mappings);\n      } else if (\"composite-element\".equals(name)) {\n        Component element = new Component(mappings, collection);\n        collection.setElement(element);\n        bindComposite(\n            subnode, element, collection.getRole() + \".element\", true, mappings, inheritedMetas);\n      } else if (\"many-to-any\".equals(name)) {\n        Any element = new Any(mappings, collection.getCollectionTable());\n        collection.setElement(element);\n        bindAny(subnode, element, true, mappings);\n      } else if (\"cache\".equals(name)) {\n        collection.setCacheConcurrencyStrategy(subnode.attributeValue(\"usage\"));\n        collection.setCacheRegionName(subnode.attributeValue(\"region\"));\n      }\n\n      String nodeName = subnode.attributeValue(\"node\");\n      if (nodeName != null) collection.setElementNodeName(nodeName);\n    }\n\n    if (collection.isOneToMany() && !collection.isInverse() && !collection.getKey().isNullable()) {\n      // for non-inverse one-to-many, with a not-null fk, add a backref!\n      String entityName = ((OneToMany) collection.getElement()).getReferencedEntityName();\n      PersistentClass referenced = mappings.getClass(entityName);\n      Backref prop = new Backref();\n      prop.setName(\n          '_' + collection.getOwnerEntityName() + \".\" + node.attributeValue(\"name\") + \"Backref\");\n      prop.setUpdateable(false);\n      prop.setSelectable(false);\n      prop.setCollectionRole(collection.getRole());\n      prop.setEntityName(collection.getOwner().getEntityName());\n      prop.setValue(collection.getKey());\n      referenced.addProperty(prop);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3055, "initialization": ["Iterator iterator = ArrayList.iterator()"], "initializationStart": [459], "initializationEnd": [480], "hasTryCatch": 1, "exceptionType": "PrivilegedActionException", "exceptionHandlingCall": ["getException()"], "tryExpressionStart": 413, "tryExpressionEnd": 417, "tryBlockStart": 413, "tryBlockEnd": 2455, "catchExpressionStart": 2308, "catchExpressionEnd": 2346, "catchBlockStart": 2308, "catchBlockEnd": 2408, "exceptionHandlingCallStart": [2383], "exceptionHandlingCallEnd": [2401], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 425, "guardExpressionEnd": 499, "guardBlockStart": 425, "guardBlockEnd": 538, "focalAPI": "element = iterator.next()", "focalAPIStart": 510, "focalAPIEnd": 521, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.close()"], "useStart": [510], "useEnd": [529], "hasFinally": 1, "cleanUpCall": ["ReentrantLock.unlock()"], "finallyExpressionStart": 2409, "finallyExpressionEnd": 2417, "finallyBlockStart": 2409, "finallyBlockEnd": 2455, "cleanUpCallStart": [2425], "cleanUpCallEnd": [2448], "url": "https://github.com/apache/openjpa/tree/master/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java", "rawCode": "  /**\n   * Sets the list of addresses of peers to which this provider will send events to. The peers are\n   * semicolon-separated <code>names</code> list in the form of \"myhost1:portA;myhost2:portB\".\n   */\n  public void setAddresses(String names) throws UnknownHostException {\n    // NYI. Could look for equivalence of addresses and avoid\n    // changing those that didn't change.\n\n    _addressesLock.lock();\n    try {\n      for (Iterator<HostAddress> iter = _addresses.iterator(); iter.hasNext(); ) {\n        iter.next().close();\n      }\n      String[] toks = StringUtil.split(names, \";\", 0);\n      _addresses = new ArrayList<>(toks.length);\n\n      InetAddress localhost = InetAddress.getLocalHost();\n      String localhostName = localhost.getHostName();\n\n      for (int i = 0; i < toks.length; i++) {\n        String host = toks[i];\n        String hostname;\n        int tmpPort;\n        int colon = host.indexOf(':');\n        if (colon != -1) {\n          hostname = host.substring(0, colon);\n          tmpPort = Integer.parseInt(host.substring(colon + 1));\n        } else {\n          hostname = host;\n          tmpPort = DEFAULT_PORT;\n        }\n        InetAddress tmpAddress =\n            AccessController.doPrivileged(J2DoPrivHelper.getByNameAction(hostname));\n\n        // bleair: For each address we would rather make use of\n        // the jdk1.4 isLinkLocalAddress () || isLoopbackAddress ().\n        // (Though in practice on win32 they don't work anyways!)\n        // Instead we will check hostname. Not perfect, but\n        // it will match often enough (people will typically\n        // use the DNS machine names and be cutting/pasting.)\n        if (localhostName.equals(hostname)) {\n          // This string matches the hostname for for ourselves, we\n          // don't actually need to send ourselves messages.\n          if (log.isTraceEnabled()) {\n            log.trace(s_loc.get(\"tcp-address-asself\", tmpAddress.getHostName() + \":\" + tmpPort));\n          }\n        } else {\n          HostAddress newAddress = new HostAddress(host);\n          _addresses.add(newAddress);\n          if (log.isTraceEnabled()) {\n            log.trace(\n                s_loc.get(\n                    \"tcp-address-set\", newAddress._address.getHostName() + \":\" + newAddress._port));\n          }\n        }\n      }\n    } catch (PrivilegedActionException pae) {\n      throw (UnknownHostException) pae.getException();\n    } finally {\n      _addressesLock.unlock();\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3056, "initialization": ["Iterator iterator = Set.iterator()"], "initializationStart": [588], "initializationEnd": [612], "hasTryCatch": 1, "exceptionType": "DelegationException", "exceptionHandlingCall": ["new AdminException(*)"], "tryExpressionStart": 230, "tryExpressionEnd": 234, "tryBlockStart": 230, "tryBlockEnd": 1651, "catchExpressionStart": 1513, "catchExpressionEnd": 1543, "catchBlockStart": 1513, "catchBlockEnd": 1585, "exceptionHandlingCallStart": [1557], "exceptionHandlingCallEnd": [1578], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 570, "guardExpressionEnd": 628, "guardBlockStart": 570, "guardBlockEnd": 1468, "focalAPI": "element = iterator.next()", "focalAPIStart": 662, "focalAPIEnd": 670, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getDelegationPrivilege(element,Set)", "DelegationManager.removePrivilege(element)", "new DelegationPrivilege(element,Set,String)"], "useStart": [705, 917, 1368], "useEnd": [762, 942, 1414], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aldaris/opensso/tree/master/products/legacy/source/com/iplanet/am/admin/cli/AddPrivilegesReq.java", "rawCode": "  void process(SSOToken ssoToken) throws AdminException {\n    String[] args = {realm, idName, idType};\n    AdminReq.writer.println(\n        MessageFormat.format(AdminReq.bundle.getString(\"delegation-add-privileges\"), args));\n\n    try {\n      doLog(args, \"ATTEMPT_ADD_PRIVILEGES\");\n      AMIdentity amid =\n          new AMIdentity(ssoToken, idName, AdminXMLParser.convert2IdType(idType), realm, null);\n      String uid = amid.getUniversalId();\n      DelegationManager mgr = new DelegationManager(ssoToken, realm);\n      Set privilegeObjects = mgr.getPrivileges();\n\n      for (Iterator i = setPrivileges.iterator(); i.hasNext(); ) {\n        String name = (String) i.next();\n        DelegationPrivilege dp = AdminUtils.getDelegationPrivilege(name, privilegeObjects);\n        if (dp != null) {\n          Set subjects = dp.getSubjects();\n          if (!subjects.contains(uid)) {\n            subjects.add(uid);\n            mgr.removePrivilege(name);\n            mgr.addPrivilege(dp);\n          } else {\n            String[] param = {name};\n            String msg =\n                MessageFormat.format(\n                    AdminReq.bundle.getString(\"delegation-already-has-privilege\"), param);\n            throw new AdminException(msg);\n          }\n        } else {\n          Set subjects = new HashSet(2);\n          subjects.add(uid);\n          DelegationPrivilege newDp = new DelegationPrivilege(name, subjects, realm);\n          mgr.addPrivilege(newDp);\n        }\n      }\n\n      doLog(args, \"ADD_PRIVILEGES\");\n    } catch (DelegationException e) {\n      throw new AdminException(e);\n    } catch (SSOException e) {\n      throw new AdminException(e);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3057, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 804, "focalAPIEnd": 816, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Iterator.add(element)"], "useStart": [780], "useEnd": [817], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aldaris/opensso/tree/master/products/amserver/source/com/iplanet/ums/ConfigManagerUMS.java", "rawCode": "  private Set getServiceComponents(String orgName, String path, boolean b)\n      throws SMSException, SSOException {\n    ServiceConfig sc =\n        (orgName.equals(_rootDN))\n            ? _smapi.getGlobalConfig(null)\n            : _smapi.getOrganizationConfig(orgName, null);\n    if (sc == null) {\n      return new HashSet();\n    }\n\n    // Parser the \"/\" seperated path to get the right service config\n    StringTokenizer st = new StringTokenizer(path, \"/\");\n    while (st.hasMoreTokens()) {\n      String token = st.nextToken();\n      if ((token.length() == 0) || (token.length() == 0)) {\n        continue;\n      }\n      sc = sc.getSubConfig(token);\n    }\n    Set answer = new HashSet();\n    Iterator comps = sc.getSubConfigNames().iterator();\n    while (comps.hasNext()) {\n      answer.add(path + \"/\" + comps.next());\n    }\n    return (answer);\n  }\n"}, {"dataset": "next", "exampleID": 3058, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [5654], "initializationEnd": [5669], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 5677, "guardExpressionEnd": 5699, "guardBlockStart": 5677, "guardBlockEnd": 6521, "focalAPI": "element = iterator.next()", "focalAPIStart": 5735, "focalAPIEnd": 5746, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getNamespace()", "element.getChildText(String,*)", "element.getNamespace()", "element.getNamespace()", "element.getChildText(String,*)", "element.getNamespace()", "element.getChildText(String,*)", "iterator.next()", "element.getAttributeValue(String)", "element.getAttributeValue(String)", "element.getAttributeValue(String)"], "useStart": [5853, 5822, 6033, 6158, 6125, 6460, 6427, 6939, 7029, 7276, 7338], "useEnd": [5872, 5873, 6052, 6177, 6178, 6479, 6480, 6950, 7059, 7306, 7368], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/auxgroup-sanxing/Sesame/tree/master/sesame-studio/src/main/java/com/sanxing/studio/action/SQLExplorer.java", "rawCode": "  public String getChildren(String nodeId) throws Exception {\n    JSONArray result = new JSONArray();\n    String objectId = nodeId;\n    String parentId = objectId.replaceFirst(\"[a-z]+_\", \"\");\n    File schemaFolder = getSchemaFolder();\n    if (objectId.equals(\"ROOT\")) {\n      String[][] list = {{\"TABLE\", \"表\"}, {\"VIEW\", \"视图\"}, {\"PROCEDURE\", \"存储过程\"}};\n\n      for (int i = 0; i < list.length; ++i) {\n        String[] item = list[i];\n        JSONObject treeNode = new JSONObject();\n        treeNode.put(\"text\", item[1]);\n        treeNode.put(\"id\", item[0]);\n        treeNode.put(\"icon\", \"sqlexplorer_viewer/images/closedFolder.gif\");\n        treeNode.put(\"allowAppend\", true);\n        result.put(treeNode);\n      }\n    } else if (objectId.equals(\"TABLE\")) {\n      SAXBuilder builder = new SAXBuilder();\n      File[] list = new File(schemaFolder, \"tables\").listFiles();\n      for (int i = 0; i < list.length; ++i) {\n        File f = list[i];\n        if (!(f.isFile())) {\n          continue;\n        }\n        Document document = builder.build(f);\n        Element root = document.getRootElement();\n        JSONObject treeNode = new JSONObject();\n        treeNode.put(\"text\", f.getName() + \":\" + root.getAttributeValue(\"remarks\"));\n        treeNode.put(\"id\", \"table_\" + f.getName());\n        treeNode.put(\"icon\", \"sqlexplorer_viewer/images/table.gif\");\n        treeNode.put(\"allowDelete\", true);\n        treeNode.put(\"allowModify\", true);\n        treeNode.put(\"allowSet\", true);\n        treeNode.put(\"allowAlter\", true);\n        treeNode.put(\"allowReverse\", true);\n        treeNode.put(\"allowBrowse\", true);\n        treeNode.put(\"name\", f.getName());\n        treeNode.put(\"remarks\", root.getAttributeValue(\"remarks\"));\n        result.put(treeNode);\n      }\n    } else if (objectId.equals(\"VIEW\")) {\n      SAXBuilder builder = new SAXBuilder();\n      File viewFolder = new File(schemaFolder, \"views\");\n      if (viewFolder.exists()) {\n        File[] list = viewFolder.listFiles();\n        if ((list != null) && (list.length > 0)) {\n          for (int i = 0; i < list.length; ++i) {\n            File f = list[i];\n            if (!(f.isFile())) {\n              continue;\n            }\n            Document document = builder.build(f);\n            Element root = document.getRootElement();\n            JSONObject treeNode = new JSONObject();\n            treeNode.put(\"text\", f.getName() + \":\" + root.getAttributeValue(\"remarks\"));\n\n            treeNode.put(\"cls\", \"folder\");\n            treeNode.put(\"id\", \"view_\" + f.getName());\n            treeNode.put(\"icon\", \"sqlexplorer_viewer/images/view.gif\");\n            treeNode.put(\"allowDelete\", true);\n            treeNode.put(\"allowModify\", true);\n            treeNode.put(\"allowSet\", true);\n            treeNode.put(\"allowBrowse\", true);\n            treeNode.put(\"name\", f.getName());\n            treeNode.put(\"remarks\", root.getAttributeValue(\"remarks\"));\n            result.put(treeNode);\n          }\n        }\n      }\n    } else if (objectId.equals(\"PROCEDURE\")) {\n      SAXBuilder builder = new SAXBuilder();\n      File procedureFolder = new File(schemaFolder, \"views\");\n      if (procedureFolder.exists()) {\n        File[] list = procedureFolder.listFiles();\n        if ((list != null) && (list.length > 0)) {\n          for (int i = 0; i < list.length; ++i) {\n            File f = list[i];\n            if (!(f.isFile())) {\n              continue;\n            }\n            Document document = builder.build(f);\n            Element root = document.getRootElement();\n            JSONObject treeNode = new JSONObject();\n            treeNode.put(\"text\", f.getName() + \":\" + root.getAttributeValue(\"remarks\"));\n            treeNode.put(\"cls\", \"folder\");\n            treeNode.put(\"id\", \"procedure_\" + f.getName());\n            treeNode.put(\"icon\", \"sqlexplorer_viewer/images/stored_procedure.gif\");\n            treeNode.put(\"allowDelete\", true);\n            treeNode.put(\"allowModify\", true);\n            treeNode.put(\"allowSet\", true);\n            treeNode.put(\"allowBrowse\", true);\n            treeNode.put(\"name\", f.getName());\n            treeNode.put(\"remarks\", root.getAttributeValue(\"remarks\"));\n            result.put(treeNode);\n          }\n        }\n      }\n    } else if (objectId.startsWith(\"table_\")) {\n      String[][] list = {{\"columns\", \"字段\"}, {\"indices\", \"索引\"}};\n      for (int i = 0; i < list.length; ++i) {\n        String[] item = list[i];\n        JSONObject treeNode = new JSONObject();\n        treeNode.put(\"text\", item[1]);\n        treeNode.put(\"id\", item[0] + \"_\" + parentId);\n        treeNode.put(\"icon\", \"sqlexplorer_viewer/images/closedFolder.gif\");\n        treeNode.put(\"allowAppend\", true);\n        result.put(treeNode);\n      }\n    } else if (objectId.startsWith(\"view_\")) {\n      String[][] list = {{\"columns\", \"字段\"}};\n      for (int i = 0; i < list.length; ++i) {\n        String[] item = list[i];\n        JSONObject treeNode = new JSONObject();\n        treeNode.put(\"text\", item[1]);\n        treeNode.put(\"id\", item[0] + \"_\" + parentId);\n        treeNode.put(\"icon\", \"sqlexplorer_viewer/images/closedFolder.gif\");\n        treeNode.put(\"allowAppend\", true);\n        result.put(treeNode);\n      }\n    } else if (objectId.startsWith(\"columns_\")) {\n      File file = new File(schemaFolder, \"tables/\" + parentId);\n      String parent = \"table\";\n      if (!(file.exists())) {\n        file = new File(schemaFolder, \"views/\" + parentId);\n        parent = \"view\";\n      }\n      SAXBuilder builder = new SAXBuilder();\n      Document document = builder.build(file);\n      Element root = document.getRootElement();\n      List list = XPath.selectNodes(root, \"columns/column\");\n      Iterator iter = list.iterator();\n      while (iter.hasNext()) {\n        Element elem = (Element) iter.next();\n        JSONObject treeNode = new JSONObject();\n        String typeDscr = elem.getChildText(\"type_name\", elem.getNamespace()).toLowerCase();\n        if ((typeDscr.equals(\"char\")) || (typeDscr.equals(\"varchar\"))) {\n          typeDscr = typeDscr + \"(\" + elem.getChildText(\"column_size\", elem.getNamespace()) + \")\";\n        }\n        treeNode.put(\n            \"text\",\n            elem.getChildText(\"column_name\", elem.getNamespace()) + \" <b>\" + typeDscr + \"</b>\");\n\n        treeNode.put(\"leaf\", true);\n        treeNode.put(\"icon\", \"sqlexplorer_viewer/images/columns.gif\");\n        treeNode.put(\"meta\", \"COLUMN\");\n        treeNode.put(parent, parentId);\n        treeNode.put(\"name\", elem.getChildText(\"column_name\", elem.getNamespace()));\n\n        result.put(treeNode);\n      }\n    } else if (objectId.startsWith(\"indices_\")) {\n      File file = new File(schemaFolder, \"tables/\" + parentId);\n      SAXBuilder builder = new SAXBuilder();\n      Document document = builder.build(file);\n      Element root = document.getRootElement();\n      List list = XPath.selectNodes(root, \"indices/index\");\n      Iterator iter = list.iterator();\n      while (iter.hasNext()) {\n        Element elem = (Element) iter.next();\n        JSONObject treeNode = new JSONObject();\n        treeNode.put(\"text\", elem.getAttributeValue(\"name\"));\n        treeNode.put(\"leaf\", true);\n        treeNode.put(\"icon\", \"sqlexplorer_viewer/images/index.gif\");\n        treeNode.put(\"meta\", \"INDEX\");\n        treeNode.put(\"table\", parentId);\n        treeNode.put(\"name\", elem.getAttributeValue(\"name\"));\n        treeNode.put(\"type\", elem.getAttributeValue(\"type\"));\n        treeNode.put(\"allowDelete\", true);\n        treeNode.put(\"allowModify\", true);\n        result.put(treeNode);\n      }\n    } else if (!(objectId.startsWith(\"constraints_\"))) {\n      if (!(objectId.startsWith(\"triggers_\"))) {;\n      }\n    }\n    return result.toString();\n  }\n"}, {"dataset": "next", "exampleID": 3059, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 564, "guardExpressionEnd": 584, "guardBlockStart": 564, "guardBlockEnd": 751, "focalAPI": "element = iterator.next()", "focalAPIStart": 648, "focalAPIEnd": 657, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["iterator.next()"], "useStart": [1316], "useEnd": [1325], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/2pirad/jacorb/tree/master/test/regression/src/org/jacorb/test/notification/FilterImplTest.java", "rawCode": "  public void testIterator2() throws Exception {\n    ConstraintExp[] _exp = new ConstraintExp[1];\n    for (int x = 0; x < _exp.length; ++x) {\n      _exp[x] = new ConstraintExp();\n    }\n\n    EventType[] _eventType = new EventType[2];\n    _eventType[0] = new EventType(\"*\", \"*\");\n    _eventType[1] = new EventType(\"domain*\", \"type*\");\n    _exp[0] = new ConstraintExp(_eventType, \"1\");\n    objectUnderTest_.add_constraints(_exp);\n\n    Iterator _i =\n        objectUnderTest_.getIterator(AbstractMessage.calcConstraintKey(\"domain1\", \"type1\"));\n\n    int _count = 0;\n    while (_i.hasNext()) {\n      _count++;\n      ConstraintEntry _e = (ConstraintEntry) _i.next();\n      assertEquals(\"1\", _e.getConstraintInfo().constraint_expression.constraint_expr);\n    }\n    assertTrue(_count == 2);\n\n    ConstraintExp[] _exp2 = new ConstraintExp[1];\n    _exp2[0] = new ConstraintExp();\n\n    EventType[] _eventType2 = new EventType[2];\n    _eventType2[0] = new EventType(\"*\", \"*\");\n    _eventType2[1] = new EventType(\"domain*\", \"type*\");\n    _exp2[0] = new ConstraintExp(_eventType2, \"2\");\n    objectUnderTest_.add_constraints(_exp2);\n\n    _i = objectUnderTest_.getIterator(AbstractMessage.calcConstraintKey(\"domain1\", \"type1\"));\n    _count = 0;\n\n    while (_i.hasNext()) {\n      _count++;\n      ConstraintEntry _e = (ConstraintEntry) _i.next();\n      assertTrue(\n          _e.getConstraintExpression().equals(\"1\") || _e.getConstraintExpression().equals(\"2\"));\n    }\n    assertEquals(4, _count);\n  }\n"}, {"dataset": "next", "exampleID": 3060, "initialization": ["Iterator iterator = Element.getDescendants()"], "initializationStart": [89], "initializationEnd": [110], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 116, "guardExpressionEnd": 136, "guardBlockStart": 116, "guardBlockEnd": 433, "focalAPI": "element = iterator.next()", "focalAPIStart": 170, "focalAPIEnd": 179, "followUpCheck": "element.getName().startsWith(\"invoke\")", "checkType": "IF", "followUpCheckExpressionStart": 368, "followUpCheckExpressionEnd": 408, "followUpCheckBlockStart": 368, "followUpCheckBlockEnd": 427, "use": ["element.getAttributeValue(String)", "element.getAttributeValue(String)", "visitInvoke(element)"], "useStart": [201, 285, 409], "useEnd": [231, 321, 426], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/icblenke/xmlvm.svn/tree/master/changes/haeberling/qooxdoo_0-8_integration/src/xmlvm/org/xmlvm/dep/Import.java", "rawCode": "  private void visitCode(Element code) {\n    if (code == null) return;\n    Iterator it = code.getDescendants();\n    while (it.hasNext()) {\n      Element inst = (Element) it.next();\n      String type = inst.getAttributeValue(\"type\");\n      if (type != null) addType(type);\n      type = inst.getAttributeValue(\"class-type\");\n      if (type != null) addType(type);\n      if (inst.getName().startsWith(\"invoke\")) visitInvoke(inst);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3061, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [105], "initializationEnd": [131], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 87, "guardExpressionEnd": 147, "guardBlockStart": 87, "guardBlockEnd": 594, "focalAPI": "element = iterator.next()", "focalAPIStart": 193, "focalAPIEnd": 201, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getTag()", "Map.put(String,element)"], "useStart": [266, 558], "useEnd": [277, 587], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/and146/SPLAT-ARI/tree/master/ant/src/main/org/apache/tools/ant/taskdefs/MacroInstance.java", "rawCode": "  private void processTasks() {\n    if (implicitTag != null) {\n      return;\n    }\n    for (Iterator i = unknownElements.iterator(); i.hasNext(); ) {\n      UnknownElement ue = (UnknownElement) i.next();\n      String name = ProjectHelper.extractNameFromComponentName(ue.getTag()).toLowerCase(Locale.US);\n      if (getNsElements().get(name) == null) {\n        throw new BuildException(\"unsupported element \" + name);\n      }\n      if (presentElements.get(name) != null) {\n        throw new BuildException(\"Element \" + name + \" already present\");\n      }\n      presentElements.put(name, ue);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3062, "initialization": ["Iterator iterator = new JoinedIterator(Iterator[])"], "initializationStart": [754], "initializationEnd": [781], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 787, "guardExpressionEnd": 818, "guardBlockStart": 787, "guardBlockEnd": 1055, "focalAPI": "element = iterator.next()", "focalAPIStart": 855, "focalAPIEnd": 875, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.attributeValue(String)", "element.attributeValue(String)", "recognizeEntities(Mappings,element,EntityElementHandler)"], "useStart": [915, 954, 1003], "useEnd": [952, 984, 1048], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emmanuelbernard/hibernate-core-ogm/tree/master/hibernate-core/src/main/java/org/hibernate/cfg/HbmBinder.java", "rawCode": "  /**\n   * Given an entity-containing-element (startNode) recursively locate all entity names defined\n   * within that element.\n   *\n   * @param mappings The already processed mappings\n   * @param startNode The containing element\n   * @param handler The thing that knows what to do whenever we recognize an entity-name\n   */\n  private static void recognizeEntities(\n      Mappings mappings, final Element startNode, EntityElementHandler handler) {\n    Iterator[] classes = new Iterator[4];\n    classes[0] = startNode.elementIterator(\"class\");\n    classes[1] = startNode.elementIterator(\"subclass\");\n    classes[2] = startNode.elementIterator(\"joined-subclass\");\n    classes[3] = startNode.elementIterator(\"union-subclass\");\n\n    Iterator classIterator = new JoinedIterator(classes);\n    while (classIterator.hasNext()) {\n      Element element = (Element) classIterator.next();\n      handler.handleEntity(\n          element.attributeValue(\"entity-name\"), element.attributeValue(\"name\"), mappings);\n      recognizeEntities(mappings, element, handler);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3063, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [350], "initializationEnd": [367], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 373, "guardExpressionEnd": 395, "guardBlockStart": 373, "guardBlockEnd": 612, "focalAPI": "element = iterator.next()", "focalAPIStart": 434, "focalAPIEnd": 445, "followUpCheck": "!ignoreParameters.contains(element.getName().toLowerCase())", "checkType": "IF", "followUpCheckExpressionStart": 453, "followUpCheckExpressionEnd": 515, "followUpCheckBlockStart": 453, "followUpCheckBlockEnd": 606, "use": ["element.getName()", "element.getValue()"], "useStart": [484, 580], "useEnd": [499, 596], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mohlendo/flickrj/tree/master/src/com/aetrion/flickr/auth/AuthUtilities.java", "rawCode": "  public static String getMultipartSignature(String sharedSecret, List params) {\n    List ignoreParameters = new ArrayList();\n    ignoreParameters.add(\"photo\");\n\n    addAuthToken(params);\n\n    StringBuffer buffer = new StringBuffer();\n    buffer.append(sharedSecret);\n    Collections.sort(params, new ParameterAlphaComparator());\n    Iterator iter = params.iterator();\n    while (iter.hasNext()) {\n      Parameter param = (Parameter) iter.next();\n      if (!ignoreParameters.contains(param.getName().toLowerCase())) {\n        buffer.append(param.getName());\n        buffer.append(param.getValue());\n      }\n    }\n\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n      return ByteUtilities.toHexString(md.digest(buffer.toString().getBytes(\"UTF-8\")));\n    } catch (NoSuchAlgorithmException e) {\n      throw new RuntimeException(e);\n    } catch (UnsupportedEncodingException u) {\n      throw new RuntimeException(u);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3064, "initialization": ["Iterator iterator = iterator()"], "initializationStart": [768], "initializationEnd": [778], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 786, "guardExpressionEnd": 806, "guardBlockStart": 786, "guardBlockEnd": 918, "focalAPI": "element = iterator.next()", "focalAPIStart": 844, "focalAPIEnd": 853, "followUpCheck": "element.getReference().equals(ref)", "checkType": "IF", "followUpCheckExpressionStart": 863, "followUpCheckExpressionEnd": 897, "followUpCheckBlockStart": 863, "followUpCheckBlockEnd": 910, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta08/kernel-impl/src/main/java/org/sakaiproject/entity/impl/ReferenceVectorComponent.java", "rawCode": "  /**\n   * Is this resource referred to in any of the references in the vector? Accept any Resource, or a\n   * String assumed to be a resource reference.\n   *\n   * @param o The Resource (or resource reference string) to check for presence in the references in\n   *     the vector.\n   * @return true if the resource referred to in any of the references in the Vector, false if not.\n   */\n  public boolean contains(Object o) {\n    if ((o instanceof Entity) || (o instanceof String) || (o instanceof Reference)) {\n      String ref = null;\n      if (o instanceof Entity) {\n        ref = ((Entity) o).getReference();\n      } else if (o instanceof String) {\n        ref = (String) o;\n      } else {\n        ref = ((Reference) o).getReference();\n      }\n\n      Iterator it = iterator();\n      while (it.hasNext()) {\n        Reference de = (Reference) it.next();\n        if (de.getReference().equals(ref)) return true;\n      }\n\n      return false;\n    } else return super.contains(o);\n  }\n"}, {"dataset": "next", "exampleID": 3065, "initialization": ["Iterator iterator = Collection<String>.iterator()"], "initializationStart": [1118], "initializationEnd": [1135], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 1095, "guardExpressionEnd": 1156, "guardBlockStart": 1095, "guardBlockEnd": 1247, "focalAPI": "element = iterator.next()", "focalAPIStart": 1194, "focalAPIEnd": 1207, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["DataOutputStream.writeUTF(element)"], "useStart": [1217], "useEnd": [1238], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.0.20/kernel-impl/src/main/java/org/sakaiproject/content/impl/serialize/impl/Type1BaseContentCollectionSerializer.java", "rawCode": "  private void doSerialize(SerializableCollectionAccess sc, DataOutputStream ds)\n      throws EntityParseException, IOException {\n    String id = sc.getSerializableId();\n    boolean hidden = sc.getSerializableHidden();\n    AccessMode access = sc.getSerializableAccess();\n    Time releaseDate = sc.getSerializableReleaseDate();\n    Time retractDate = sc.getSerializableRetractDate();\n    Collection<String> groups = sc.getSerializableGroup();\n\n    ds.writeInt(TYPE1);\n    ds.writeInt(BLOCK1);\n    ds.writeUTF(id);\n    ds.writeUTF(ResourceType.TYPE_FOLDER);\n\n    if (access == null || AccessMode.SITE == access) {\n      access = AccessMode.INHERITED;\n    }\n\n    ds.writeUTF(access.toString());\n    ds.writeBoolean(hidden);\n    ds.writeInt(BLOCK2);\n    if (!hidden && releaseDate != null) {\n      ds.writeLong(releaseDate.getTime());\n    } else {\n      ds.writeLong(-1);\n    }\n    if (!hidden && retractDate != null) {\n      ds.writeLong(retractDate.getTime());\n    } else {\n      ds.writeLong(-1);\n    }\n    if (groups != null) {\n      ds.writeInt(BLOCK3);\n      ds.writeInt(groups.size());\n      for (Iterator igroup = groups.iterator(); igroup.hasNext(); ) {\n        String groupRef = (String) igroup.next();\n        ds.writeUTF(groupRef);\n      }\n    }\n\n    ds.writeInt(BLOCK4);\n    baseResourcePropertiesSerializer.serialize(sc.getSerializableProperties(), ds);\n    ds.writeInt(BLOCK_END);\n  }\n"}, {"dataset": "next", "exampleID": 3066, "initialization": ["Iterator iterator = ArrayList.iterator()"], "initializationStart": [66], "initializationEnd": [90], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 45, "guardExpressionEnd": 109, "guardBlockStart": 45, "guardBlockEnd": 208, "focalAPI": "element = iterator.next()", "focalAPIStart": 162, "focalAPIEnd": 173, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fireValueChanged(element)"], "useStart": [182], "useEnd": [201], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/marcust/j-wings/tree/master/wings/src/org/wings/tree/SDefaultTreeSelectionModel.java", "rawCode": "  public void fireDelayedFinalEvents() {\n    for (Iterator iter = delayedEvents.iterator(); iter.hasNext(); ) {\n      TreeSelectionEvent e = (TreeSelectionEvent) iter.next();\n\n      fireValueChanged(e);\n    }\n    delayedEvents.clear();\n  }\n"}, {"dataset": "next", "exampleID": 3067, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 634, "focalAPIEnd": 642, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getActions()"], "useStart": [616], "useEnd": [656], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bogeblad/infoglue2/tree/master/src/java/org/infoglue/cms/entities/mydesktop/WorkflowVO.java", "rawCode": "  /**\n   * Returns the actions associated with the current steps allowed by the given step filter\n   *\n   * @param filter a step filter that allows the desired steps to pass through\n   * @return a list of WorkflowActionVOs representing the actions associated with the current steps\n   *     allowed by filter\n   * @see #getCurrentSteps(StepFilter)\n   */\n  public List getAvailableActions(StepFilter filter) {\n    List steps = (filter == null) ? currentSteps : getCurrentSteps(filter);\n    List availableActions = new ArrayList();\n\n    for (Iterator i = steps.iterator(); i.hasNext(); )\n      availableActions.addAll(((WorkflowStepVO) i.next()).getActions());\n\n    return availableActions;\n  }\n"}, {"dataset": "next", "exampleID": 3068, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 277, "focalAPIEnd": 286, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/david-mcneil/stringtemplate/tree/master/java/release-3.1/src/org/antlr/stringtemplate/language/StripIterator.java", "rawCode": "  /** Set lookahead to next non-null element or null if nothing left */\n  protected void consume() {\n    if (!it.hasNext()) {\n      lookahead = null;\n      return;\n    }\n    Object e = null;\n    // scan for next non-null value\n    while (e == null && it.hasNext()) {\n      e = it.next();\n    }\n    lookahead = e;\n  }\n"}, {"dataset": "next", "exampleID": 3069, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 418, "focalAPIEnd": 427, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ntj/ComplexRapidMiner/tree/master/src/com/rapidminer/gui/graphs/ClusterModelGraphCreator.java", "rawCode": "  public Graph<String, String> createGraph() {\n    SparseTree<String, String> graph = new SparseTree<String, String>();\n    if (clusterModel.getRootNode() == null) return graph;\n\n    ClusterNode root = clusterModel.getRootNode();\n    graph.addVertex(\"Root\");\n    vertexMap.put(\"Root\", root);\n\n    Iterator<ClusterNode> it = clusterModel.getRootNode().getSubNodes();\n    while (it.hasNext()) createGraph(graph, \"Root\", it.next());\n\n    return graph;\n  }\n"}, {"dataset": "next", "exampleID": 3070, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 389, "focalAPIEnd": 398, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenXavaEx/OpenXavaEx/tree/master/code/OpenXava/src/org/openxava/util/PropertiesManager.java", "rawCode": "  /**\n   * Names of all properties managed by <code>this</code>.\n   *\n   * <p>\n   *\n   * @return Not null\n   */\n  public String[] getPropertiesNames() throws PropertiesManagerException {\n    Map pd = getPropertyDescriptors();\n    int c = pd.size();\n    String[] result = new String[c];\n    Iterator it = pd.keySet().iterator();\n    for (int i = 0; i < c; i++) {\n      result[i] = (String) it.next();\n    }\n    return result;\n  }\n"}, {"dataset": "next", "exampleID": 3071, "initialization": ["Iterator iterator = Collection.iterator()"], "initializationStart": [546], "initializationEnd": [558], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new ExceptionWrapper(*)", "Iterator.add(Locale)"], "tryExpressionStart": 299, "tryExpressionEnd": 303, "tryBlockStart": 299, "tryBlockEnd": 1018, "catchExpressionStart": 955, "catchExpressionEnd": 975, "catchBlockStart": 955, "catchBlockEnd": 1018, "exceptionHandlingCallStart": [987, 983], "exceptionHandlingCallEnd": [1010, 1011], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 568, "guardExpressionEnd": 590, "guardBlockStart": 568, "guardBlockEnd": 837, "focalAPI": "element = iterator.next()", "focalAPIStart": 657, "focalAPIEnd": 668, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getPrimaryKey()", "element.getLocalizationKey()"], "useStart": [692, 747], "useEnd": [711, 771], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/idega/se.idega.idegaweb.commune.accounting/tree/master/src/java/se/idega/idegaweb/commune/accounting/school/presentation/ProviderEditor.java", "rawCode": "  private DropdownMenu getStatisticsTypeDropdownMenu(String parameter, String statisticsType) {\n    DropdownMenu menu = (DropdownMenu) getStyledInterface(new DropdownMenu(parameter));\n    menu.addMenuElement(\n        \"\", localize(KEY_STATISTICS_TYPE_SELECTOR_HEADER, \"Choose statistics type\"));\n    try {\n      ProviderStatisticsTypeHome home =\n          (ProviderStatisticsTypeHome)\n              com.idega.data.IDOLookup.getHome(ProviderStatisticsType.class);\n      Collection c = home.findAll();\n      if (c != null) {\n        Iterator iter = c.iterator();\n        while (iter.hasNext()) {\n          ProviderStatisticsType pst = (ProviderStatisticsType) iter.next();\n          String id = pst.getPrimaryKey().toString();\n          String key = pst.getLocalizationKey();\n          menu.addMenuElement(id, localize(key, key));\n        }\n        if (!statisticsType.equals(\"\")) {\n          menu.setSelectedElement(statisticsType);\n        }\n      }\n    } catch (Exception e) {\n      add(new ExceptionWrapper(e));\n    }\n    return menu;\n  }\n"}, {"dataset": "next", "exampleID": 3072, "initialization": ["Iterator iterator = Set.iterator()"], "initializationStart": [4705], "initializationEnd": [4726], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 4687, "guardExpressionEnd": 4742, "guardBlockStart": 4687, "guardBlockEnd": 4881, "focalAPI": "element = iterator.next()", "focalAPIStart": 4780, "focalAPIEnd": 4788, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["caseId(element)", "iterator.next()", "caseId(element)", "iterator.next()", "caseId(element)", "iterator.next()", "caseId(element)", "iterator.next()", "caseId(element)", "iterator.next()", "caseId(element)"], "useStart": [4812, 4983, 5015, 5188, 5220, 5567, 5599, 5811, 5843, 6057, 6089], "useEnd": [4826, 4991, 5029, 5196, 5234, 5575, 5613, 5819, 5857, 6065, 6103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.1/kernel-impl/src/main/java/org/sakaiproject/site/impl/DbSiteService.java", "rawCode": "    /** {@inheritDoc} */\n    public void setUserSecurity(\n        final String userId, Set updateSites, Set visitUnpSites, Set visitSites) {\n      // normalize the input parameters - remove any user in more than one set\n\n      // adjust visitSites to remove any that are in visitUnpSites or updateSites\n      Set targetVisit = new HashSet();\n      targetVisit.addAll(visitSites);\n      targetVisit.removeAll(visitUnpSites);\n      targetVisit.removeAll(updateSites);\n\n      // adjust visitUnpSites to remove any that are in updateSites\n      Set targetUnp = new HashSet();\n      targetUnp.addAll(visitUnpSites);\n      targetUnp.removeAll(updateSites);\n\n      Set targetUpdate = updateSites;\n\n      // read existing\n      String statement = siteServiceSql.getSiteId4Sql();\n      Object[] fields = new Object[1];\n      fields[0] = userId;\n\n      // collect the current data in three sets, update, unp, visit\n      final Set existingUpdate = new HashSet();\n      final Set existingUnp = new HashSet();\n      final Set existingVisit = new HashSet();\n\n      m_sql.dbRead(\n          statement,\n          fields,\n          new SqlReader() {\n            public Object readSqlResultRecord(ResultSet result) {\n              try {\n                String siteId = result.getString(1);\n                int permission = result.getInt(2);\n                if (permission == -1) {\n                  existingUpdate.add(siteId);\n                } else if (permission == 0) {\n                  existingUnp.add(siteId);\n                } else if (permission == 1) {\n                  existingVisit.add(siteId);\n                } else {\n                  M_log.warn(\n                      \"setUserSecurity: invalid permission \"\n                          + permission\n                          + \" site: \"\n                          + siteId\n                          + \" user: \"\n                          + userId);\n                }\n              } catch (Throwable ignore) {\n                return null;\n              }\n              return null;\n            }\n          });\n\n      // compute the delete and insert sets for each of the three permissions\n\n      // delete if the site is in targetUpdate, but it is already in one of the other categories\n      Set updDeletes = new HashSet();\n      updDeletes.addAll(existingUnp);\n      updDeletes.addAll(existingVisit);\n      updDeletes.retainAll(targetUpdate);\n\n      // also delete if the user is in the existing and not in the target\n      Set obsolete = new HashSet();\n      obsolete.addAll(existingUpdate);\n      obsolete.removeAll(targetUpdate);\n      updDeletes.addAll(obsolete);\n\n      // insert if the site is in targetUpdate, but is not already in update\n      Set updInserts = new HashSet();\n      updInserts.addAll(targetUpdate);\n      updInserts.removeAll(existingUpdate);\n\n      // delete if the site is in targetUnp, but it is already in one of the other categories\n      Set unpDeletes = new HashSet();\n      unpDeletes.addAll(existingUpdate);\n      unpDeletes.addAll(existingVisit);\n      unpDeletes.retainAll(targetUnp);\n\n      // also delete if the user is in the existing and not in the target\n      obsolete.clear();\n      obsolete.addAll(existingUnp);\n      obsolete.removeAll(targetUnp);\n      unpDeletes.addAll(obsolete);\n\n      // insert if the site is in targetUnp, but is not already in unp\n      Set unpInserts = new HashSet();\n      unpInserts.addAll(targetUnp);\n      unpInserts.removeAll(existingUnp);\n\n      // delete if the site is in targetVisit, but it is already in one of the other categories\n      Set visitDeletes = new HashSet();\n      visitDeletes.addAll(existingUpdate);\n      visitDeletes.addAll(existingUnp);\n      visitDeletes.retainAll(targetVisit);\n\n      // also delete if the user is in the existing and not in the target\n      obsolete.clear();\n      obsolete.addAll(existingVisit);\n      obsolete.removeAll(targetVisit);\n      visitDeletes.addAll(obsolete);\n\n      // insert if the site is in targetVisit, but is not already in visit\n      Set visitInserts = new HashSet();\n      visitInserts.addAll(targetVisit);\n      visitInserts.removeAll(existingVisit);\n\n      // if there's anything to do\n      if (updDeletes.size() > 0\n          || updInserts.size() > 0\n          || unpDeletes.size() > 0\n          || unpInserts.size() > 0\n          || visitDeletes.size() > 0\n          || visitInserts.size() > 0) {\n        // delete old, write new, each in it's own transaction to avoid possible deadlock\n        // involving modifications to multiple rows in a transaction\n        fields = new Object[2];\n        fields[1] = userId;\n\n        // delete\n        statement = siteServiceSql.getDeleteUserSql();\n        for (Iterator i = updDeletes.iterator(); i.hasNext(); ) {\n          String siteId = (String) i.next();\n          fields[0] = caseId(siteId);\n          m_sql.dbWrite(statement, fields);\n        }\n        for (Iterator i = unpDeletes.iterator(); i.hasNext(); ) {\n          String siteId = (String) i.next();\n          fields[0] = caseId(siteId);\n          m_sql.dbWrite(statement, fields);\n        }\n        for (Iterator i = visitDeletes.iterator(); i.hasNext(); ) {\n          String siteId = (String) i.next();\n          fields[0] = caseId(siteId);\n          m_sql.dbWrite(statement, fields);\n        }\n\n        // insert\n        statement = siteServiceSql.getInsertUserSql();\n        fields = new Object[3];\n        fields[1] = userId;\n\n        fields[2] = Integer.valueOf(-1);\n        for (Iterator i = updInserts.iterator(); i.hasNext(); ) {\n          String siteId = (String) i.next();\n          fields[0] = caseId(siteId);\n          m_sql.dbWrite(statement, fields);\n        }\n\n        fields[2] = Integer.valueOf(0);\n        for (Iterator i = unpInserts.iterator(); i.hasNext(); ) {\n          String siteId = (String) i.next();\n          fields[0] = caseId(siteId);\n          m_sql.dbWrite(statement, fields);\n        }\n\n        fields[2] = Integer.valueOf(1);\n        for (Iterator i = visitInserts.iterator(); i.hasNext(); ) {\n          String siteId = (String) i.next();\n          fields[0] = caseId(siteId);\n          m_sql.dbWrite(statement, fields);\n        }\n      }\n    }\n"}, {"dataset": "next", "exampleID": 3073, "initialization": ["Iterator iterator = Set.iterator()"], "initializationStart": [442], "initializationEnd": [460], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 512, "guardExpressionEnd": 545, "guardBlockStart": 512, "guardBlockEnd": 1034, "focalAPI": "element = iterator.next()", "focalAPIStart": 583, "focalAPIEnd": 595, "followUpCheck": "!element.equals(valueTwo)", "checkType": "IF", "followUpCheckExpressionStart": 655, "followUpCheckExpressionEnd": 686, "followUpCheckBlockStart": 655, "followUpCheckBlockEnd": 1026, "use": ["TreeMap.get(element)"], "useStart": [807], "useEnd": [827], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/blackberry/BB10-WebWorks-Community-Samples/tree/master/Ant-Cordova-Build-Script/tools/rhino1_7R3/deprecatedsrc/org/mozilla/javascript/xml/impl/xmlbeans/LogicalEquality.java", "rawCode": "  /**\n   * @param xmlOne\n   * @param xmlTwo\n   * @return\n   */\n  private static boolean attributeListsEqual(XmlCursor xmlOne, XmlCursor xmlTwo) {\n    boolean result = true;\n    TreeMap mapOne = loadAttributeMap(xmlOne);\n    TreeMap mapTwo = loadAttributeMap(xmlTwo);\n\n    if (mapOne.size() != mapTwo.size()) {\n      result = false;\n    } else {\n      Set keysOne = mapOne.keySet();\n      Set keysTwo = mapTwo.keySet();\n      Iterator itOne = keysOne.iterator();\n      Iterator itTwo = keysTwo.iterator();\n\n      while (result && itOne.hasNext()) {\n        String valueOne = (String) itOne.next();\n        String valueTwo = (String) itTwo.next();\n\n        if (!valueOne.equals(valueTwo)) {\n          result = false;\n        } else {\n          javax.xml.namespace.QName qnameOne = (javax.xml.namespace.QName) mapOne.get(valueOne);\n          javax.xml.namespace.QName qnameTwo = (javax.xml.namespace.QName) mapTwo.get(valueTwo);\n\n          if (!qnamesEqual(qnameOne, qnameTwo)) {\n            result = false;\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n"}, {"dataset": "next", "exampleID": 3074, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 85, "guardExpressionEnd": 105, "guardBlockStart": 85, "guardBlockEnd": 294, "focalAPI": "element = iterator.next()", "focalAPIStart": 145, "focalAPIEnd": 154, "followUpCheck": "element.getAlgorithm() == algorithm && element.getFootprint() == footprint", "checkType": "IF", "followUpCheckExpressionStart": 162, "followUpCheckExpressionEnd": 239, "followUpCheckBlockStart": 162, "followUpCheckBlockEnd": 288, "use": ["parseRecord(element)"], "useStart": [255], "useEnd": [287], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lemmy/dnsjava/tree/master/tags/dnsjava-1-6-0/org/xbill/DNS/security/DNSSECVerifier.java", "rawCode": "  private PublicKey findMatchingKey(Iterator it, int algorithm, int footprint) {\n    while (it.hasNext()) {\n      KEYRecord keyrec = (KEYRecord) it.next();\n      if (keyrec.getAlgorithm() == algorithm && keyrec.getFootprint() == footprint)\n        return KEYConverter.parseRecord(keyrec);\n    }\n    return null;\n  }\n"}, {"dataset": "next", "exampleID": 3075, "initialization": ["Iterator iterator = LinkedList.listIterator()"], "initializationStart": [439], "initializationEnd": [463], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 420, "guardExpressionEnd": 486, "guardBlockStart": 420, "guardBlockEnd": 525, "focalAPI": "element = iterator.next()", "focalAPIStart": 513, "focalAPIEnd": 522, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Iterator.get(element)"], "useStart": [502], "useEnd": [523], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/scs/uclinux/tree/master/lib/classpath/gnu/javax/crypto/assembly/Cascade.java", "rawCode": "  /**\n   * Returns an {@link Iterator} over the stages contained in this instance. Each element of this\n   * iterator is a concrete implementation of a {@link Stage}.\n   *\n   * @return an {@link Iterator} over the stages contained in this instance. Each element of the\n   *     returned iterator is a concrete instance of a {@link Stage}.\n   */\n  public Iterator stages() {\n    LinkedList result = new LinkedList();\n    for (Iterator it = stageKeys.listIterator(); it.hasNext(); )\n      result.addLast(stages.get(it.next()));\n    return result.listIterator();\n  }\n"}, {"dataset": "next", "exampleID": 3076, "initialization": ["Iterator iterator = Set<String>.iterator()"], "initializationStart": [571], "initializationEnd": [598], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 553, "guardExpressionEnd": 614, "guardBlockStart": 553, "guardBlockEnd": 727, "focalAPI": "element = iterator.next()", "focalAPIStart": 644, "focalAPIEnd": 652, "followUpCheck": "element.equalsIgnoreCase(viewId)", "checkType": "IF", "followUpCheckExpressionStart": 660, "followUpCheckExpressionEnd": 692, "followUpCheckBlockStart": 660, "followUpCheckBlockEnd": 721, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wyona/yanel-contributions/tree/master/resources/creatable-modifiable-deletable-v3/src/java/org/wyona/yanel/impl/resources/jellyadapterofcmdv3/ControllerAdapter.java", "rawCode": "  /**\n   * Checks for validity of the viewId. For instance, \"CANCEL\" is the same as \"cancel\". So this\n   * method normalizes the view id.\n   *\n   * <p>When the client is doing some logic for some view, it first should normalize it with this\n   * method\n   *\n   * @return the normalized viewId (lowercase), when the viewId is <code>null</code> it returns the\n   *     default view id\n   */\n  protected final String normalize(String viewId) {\n    if (viewId == null || \"\".equals(viewId.trim())) {\n      return Constants.Request.DEFAULT_VIEW_ID;\n    }\n    for (Iterator i = supportedViewIds.iterator(); i.hasNext(); ) {\n      String id = (String) i.next();\n      if (id.equalsIgnoreCase(viewId)) {\n        return id;\n      }\n    }\n    return viewId.toLowerCase();\n  }\n"}, {"dataset": "next", "exampleID": 3077, "initialization": ["Iterator iterator = Iterable<Text>.iterator()"], "initializationStart": [150], "initializationEnd": [162], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 743, "guardExpressionEnd": 767, "guardBlockStart": 743, "guardBlockEnd": 1412, "focalAPI": "element = iterator.next()", "focalAPIStart": 792, "focalAPIEnd": 805, "followUpCheck": "element.charAt(0) == '2' && (true)", "checkType": "IF", "followUpCheckExpressionStart": 977, "followUpCheckExpressionEnd": 1062, "followUpCheckBlockStart": 977, "followUpCheckBlockEnd": 1155, "use": ["element.split(String)", "element.substring(*)"], "useStart": [844, 880], "useEnd": [861, 921], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yeyue910107/MR-Packer/tree/master/src/testquery2.java", "rawCode": "    public void reduce(IntWritable key, Iterable<Text> v, Context context)\n        throws IOException, InterruptedException {\n      Iterator values = v.iterator();\n      ArrayList[] tmp_output = new ArrayList[3];\n      for (int i = 0; i < 3; i++) {\n        tmp_output[i] = new ArrayList();\n      }\n      String tmp = \"\";\n      Double[] result_0 = new Double[1];\n      ArrayList[] d_count_buf_0 = new ArrayList[1];\n      int al_line_0 = 0;\n      for (int i = 0; i < 1; i++) {\n        result_0[i] = 0.0;\n        d_count_buf_0[i] = new ArrayList();\n      }\n\n      ArrayList al_left_1 = new ArrayList();\n      ArrayList al_right_1 = new ArrayList();\n      ArrayList al_left_2 = new ArrayList();\n      ArrayList al_right_2 = new ArrayList();\n      while (values.hasNext()) {\n        String line = values.next().toString();\n        String dispatch = line.split(\"\\\\|\")[1];\n        tmp = line.substring(2 + dispatch.length() + 1);\n        String[] line_buf = tmp.split(\"\\\\|\");\n        if (line.charAt(0) == '2' && (dispatch.length() == 0 || dispatch.indexOf('0') == -1)) {\n          result_0[0] += Double.parseDouble(line_buf[1]);\n          al_line_0++;\n        }\n        if (line.charAt(0) == '2' && (dispatch.length() == 0 || dispatch.indexOf(\"1\") == -1))\n          al_left_1.add(tmp);\n        if (line.charAt(0) == '1' && (dispatch.length() == 0 || dispatch.indexOf(\"1\") == -1))\n          al_right_1.add(tmp);\n      }\n      String[] line_buf = tmp.split(\"\\\\|\");\n      result_0[0] = result_0[0] / al_line_0;\n      tmp_output[0].add(Integer.parseInt(line_buf[0]) + \"|\" + (0.2 * (result_0[0])) + \"|\");\n      for (int i = 0; i < al_left_1.size(); i++) {\n        String[] left_buf_1 = ((String) al_left_1.get(i)).split(\"\\\\|\");\n        for (int j = 0; j < al_right_1.size(); j++) {\n          String[] right_buf_1 = ((String) al_right_1.get(j)).split(\"\\\\|\");\n          tmp_output[1].add(\n              Integer.parseInt(left_buf_1[0])\n                  + \"|\"\n                  + Double.parseDouble(left_buf_1[1])\n                  + \"|\"\n                  + Double.parseDouble(left_buf_1[2])\n                  + \"|\");\n        }\n      }\n      for (int i = 0; i < tmp_output[1].size(); i++) {\n        String[] left_buf_2 = ((String) tmp_output[1].get(i)).split(\"\\\\|\");\n        for (int j = 0; j < tmp_output[0].size(); j++) {\n          String[] right_buf_2 = ((String) tmp_output[0].get(j)).split(\"\\\\|\");\n          if (Double.parseDouble(left_buf_2[1]) < Double.parseDouble(right_buf_2[1])) {\n            tmp_output[2].add(1 + \"|\" + Double.parseDouble(left_buf_2[2]) + \"|\");\n          }\n        }\n      }\n      NullWritable key_op = NullWritable.get();\n      for (int i = 0; i < tmp_output[2].size(); i++) {\n        String result = (String) tmp_output[2].get(i);\n        context.write(key_op, new Text(result));\n      }\n    }\n"}, {"dataset": "next", "exampleID": 3078, "initialization": ["Iterator iterator = Set.iterator()"], "initializationStart": [585], "initializationEnd": [605], "hasTryCatch": 1, "exceptionType": "ConfigurationException", "exceptionHandlingCall": ["error(String,*)", "error(*,*,*)", "new IDFFMetaException(*)"], "tryExpressionStart": 412, "tryExpressionEnd": 416, "tryBlockStart": 412, "tryBlockEnd": 1230, "catchExpressionStart": 1014, "catchExpressionEnd": 1047, "catchBlockStart": 1014, "catchBlockEnd": 1230, "exceptionHandlingCallStart": [1055, 1118, 1199], "exceptionHandlingCallEnd": [1110, 1185, 1223], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 615, "guardExpressionEnd": 647, "guardBlockStart": 615, "guardBlockEnd": 920, "focalAPI": "element = iterator.next()", "focalAPIStart": 687, "focalAPIEnd": 708, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getEntityConfig(String,element)", "List.add(element)"], "useStart": [755, 867], "useEnd": [787, 897], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aldaris/opensso/tree/master/products/federation/library/source/com/sun/identity/federation/meta/IDFFMetaManager.java", "rawCode": "  /**\n   * Returns all remote entities under the realm.\n   *\n   * @param realm The realm under which the hosted entities reside.\n   * @return a <code>List</code> of entity identifiers as Strings.\n   * @throws IDFFMetaException if unable to retrieve the remote entity identifiers.\n   */\n  public List getAllRemoteEntities(String realm) throws IDFFMetaException {\n\n    List remoteEntityList = new ArrayList();\n    try {\n      Set entityIDs = idffMetaConfigInstance.getAllConfigurationNames(realm);\n      if (entityIDs != null && !entityIDs.isEmpty()) {\n        Iterator entityIterator = entityIDs.iterator();\n        while (entityIterator.hasNext()) {\n          String entityID = (String) entityIterator.next();\n          EntityConfigElement entityConfig = getEntityConfig(realm, entityID);\n          if (entityConfig != null && !entityConfig.isHosted()) {\n            remoteEntityList.add(entityID);\n          }\n        }\n      }\n      LogUtil.access(Level.INFO, LogUtil.GET_REMOTE_ENTITIES_SUCCEEDED, null);\n    } catch (ConfigurationException e) {\n      debug.error(\"IDFFMetaManager.getAllRemoteEntities:\", e);\n      LogUtil.error(Level.INFO, LogUtil.GET_REMOTE_ENTITIES_FAILED, null);\n      throw new IDFFMetaException(e);\n    }\n    return remoteEntityList;\n  }\n"}, {"dataset": "next", "exampleID": 3079, "initialization": ["Iterator iterator = List<Study>.iterator()"], "initializationStart": [104], "initializationEnd": [122], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 85, "guardExpressionEnd": 139, "guardBlockStart": 85, "guardBlockEnd": 420, "focalAPI": "element = iterator.next()", "focalAPIStart": 169, "focalAPIEnd": 178, "followUpCheck": "isAuthority(element.getAuthority())", "checkType": "IF", "followUpCheckExpressionStart": 255, "followUpCheckExpressionEnd": 374, "followUpCheckBlockStart": 255, "followUpCheckBlockEnd": 414, "use": ["element.getAuthority()"], "useStart": [202], "useEnd": [221], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dvn/dvn-svn-import-test/tree/master/src/DVN-EJB/src/java/edu/harvard/iq/dvn/core/gnrs/GNRSServiceBean.java", "rawCode": "  public void deleteAll() {\n    List<Study> studies = studyService.getStudies();\n    for (Iterator it = studies.iterator(); it.hasNext(); ) {\n      Study elem = (Study) it.next();\n      String handle = elem.getAuthority() + \"/\" + elem.getStudyId();\n      if (isAuthority(elem.getAuthority())\n          && isHandleRegistered(handle)\n          && !handle.startsWith(\"1902.1\")) {\n        deleteHandle(handle);\n      }\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3080, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [150], "initializationEnd": [170], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 131, "guardExpressionEnd": 187, "guardBlockStart": 131, "guardBlockEnd": 429, "focalAPI": "element = iterator.next()", "focalAPIStart": 229, "focalAPIEnd": 238, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getHook(element)"], "useStart": [275], "useEnd": [310], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iwabuchiken/freemind/tree/master/freemind/plugins/map/AddMapImageToNodeAction.java", "rawCode": "  public void invoke(MindMapNode pNode) {\n    super.invoke(pNode);\n    List selecteds = getMindMapController().getSelecteds();\n    for (Iterator it = selecteds.iterator(); it.hasNext(); ) {\n      MindMapNode node = (MindMapNode) it.next();\n      MapNodePositionHolder hook = MapNodePositionHolder.getHook(node);\n      if (hook != null) {\n        FreeMindMapController.addPictureToNode(hook, getMindMapController());\n      }\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3081, "initialization": ["Iterator iterator = Set.iterator()"], "initializationStart": [467], "initializationEnd": [487], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 662, "guardExpressionEnd": 688, "guardBlockStart": 662, "guardBlockEnd": 954, "focalAPI": "element = iterator.next()", "focalAPIStart": 708, "focalAPIEnd": 723, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jimmccusker/caTissue/tree/master/software/caTissue/modules/core/src/main/java/edu/wustl/catissuecore/action/SpecimenArrayTypeAction.java", "rawCode": "  /**\n   * returns the specimen type list for specific specimen class.\n   *\n   * @param specimenClassPV specimen class permissible value\n   * @return list of specimen type for specimen class\n   */\n  private List getSpecimenTypeList(PermissibleValue specimenClassPV) {\n    final List specimenTypeList = new ArrayList();\n    final Set subPVList = specimenClassPV.getSubPermissibleValues();\n    this.logger.debug(\"subPVList \" + subPVList);\n    final Iterator subPVItr = subPVList.iterator();\n    specimenTypeList.add(new NameValueBean(Constants.SELECT_OPTION, \"-1\"));\n    Object subPVObj = null;\n    PermissibleValue subPV = null;\n    String subPVValue = null;\n    while (subPVItr.hasNext()) {\n      subPVObj = subPVItr.next();\n      subPV = (PermissibleValue) subPVObj;\n      // set specimen type\n      subPVValue = subPV.getValue();\n      this.logger.debug(\"\\t\\t\" + subPVValue);\n      specimenTypeList.add(new NameValueBean(subPVValue, subPVValue));\n    }\n    return specimenTypeList;\n  }\n"}, {"dataset": "next", "exampleID": 3082, "initialization": ["Iterator iterator = Set.iterator()"], "initializationStart": [345], "initializationEnd": [362], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 368, "guardExpressionEnd": 388, "guardBlockStart": 368, "guardBlockEnd": 796, "focalAPI": "element = iterator.next()", "focalAPIStart": 432, "focalAPIEnd": 441, "followUpCheck": "sub.hasSuperClass(element)", "checkType": "IF", "followUpCheckExpressionStart": 671, "followUpCheckExpressionEnd": 701, "followUpCheckBlockStart": 671, "followUpCheckBlockEnd": 782, "use": ["OntResource.addSuperClass(element)", "OntResource.removeSuperClass(element)"], "useStart": [470, 714], "useEnd": [496, 742], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rwl/CIMTool/tree/master/CIMUtil/src/au/com/langdale/profiles/Refactory.java", "rawCode": "  private void linkToHierarchy(OntResource base, OntResource clss) {\n    if (map == null) buildMap();\n\n    Set supers = map.findRelatedProfiles(base, false, true);\n    Set subs = map.findRelatedProfiles(base, true, false);\n    Set affected = new HashSet();\n    Map profiles = new HashMap();\n\n    // consider each super profile\n    Iterator jt = supers.iterator();\n    while (jt.hasNext()) {\n      OntResource parent = (OntResource) jt.next();\n\n      // inherit it\n      clss.addSuperClass(parent);\n\n      // unlink its sub profiles and mark them\n      Iterator it = subs.iterator();\n      while (it.hasNext()) {\n        OntResource sub = (OntResource) it.next();\n        if (sub.hasSuperClass(parent)) {\n          sub.removeSuperClass(parent);\n          affected.add(sub);\n        }\n      }\n    }\n\n    // consider each sub profile\n    Iterator it = subs.iterator();\n    while (it.hasNext()) {\n      OntResource sub = (OntResource) it.next();\n      ProfileClass subprof = new ProfileClass(sub, namespace);\n\n      // mark it if has no supers\n      Iterator kt = subprof.getSuperClasses();\n      if (!kt.hasNext()) {\n        affected.add(sub);\n      }\n\n      // build a profileclass for any marked sub profile\n      if (affected.contains(sub)) profiles.put(sub, subprof);\n    }\n\n    // TODO: we could move properties around\n    // PropertyAccumulator props = new PropertyAccumulator();\n\n    // relink sub profiles\n    Iterator ht = affected.iterator();\n    while (ht.hasNext()) {\n      OntResource sub = (OntResource) ht.next();\n      ProfileClass subprof = (ProfileClass) profiles.get(sub);\n      subprof.addSuperClass(clss);\n\n      // removeProps(subprof, base, props);\n    }\n\n    // addProps(profile, props);\n  }\n"}, {"dataset": "next", "exampleID": 3083, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [115], "initializationEnd": [135], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 143, "guardExpressionEnd": 165, "guardBlockStart": 143, "guardBlockEnd": 340, "focalAPI": "element = iterator.next()", "focalAPIStart": 271, "focalAPIEnd": 282, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.columnOrderChanged(int[])"], "useStart": [292], "useEnd": [331], "hasFinally": 1, "cleanUpCall": ["AEMonitor.exit()"], "finallyExpressionStart": 347, "finallyExpressionEnd": 355, "finallyBlockStart": 347, "finallyBlockEnd": 391, "cleanUpCallStart": [364], "cleanUpCallEnd": [384], "url": "https://github.com/CSEMike/OneSwarm/tree/master/az_src/src/com/aelitis/azureus/ui/common/table/TableStructureEventDispatcher.java", "rawCode": "  public void columnOrderChanged(int[] iPositions) {\n    try {\n      listeners_mon.enter();\n\n      Iterator iter = listeners.iterator();\n      while (iter.hasNext()) {\n        TableStructureModificationListener listener =\n            (TableStructureModificationListener) iter.next();\n        listener.columnOrderChanged(iPositions);\n      }\n    } finally {\n\n      listeners_mon.exit();\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3084, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [190], "initializationEnd": [211], "hasTryCatch": 1, "exceptionType": "BadLocationException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 32, "tryExpressionEnd": 36, "tryBlockStart": 32, "tryBlockEnd": 926, "catchExpressionStart": 812, "catchExpressionEnd": 843, "catchBlockStart": 812, "catchBlockEnd": 881, "exceptionHandlingCallStart": [853], "exceptionHandlingCallEnd": [872], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 148, "guardExpressionEnd": 230, "guardBlockStart": 148, "guardBlockEnd": 615, "focalAPI": "element = iterator.next()", "focalAPIStart": 252, "focalAPIEnd": 263, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getDocument()", "iterator.next()"], "useStart": [310, 747], "useEnd": [330, 758], "hasFinally": 1, "cleanUpCall": ["connectListener()"], "finallyExpressionStart": 882, "finallyExpressionEnd": 890, "finallyBlockStart": 882, "finallyBlockEnd": 926, "cleanUpCallStart": [900], "cleanUpCallEnd": [917], "url": "https://github.com/eclipse/dltk.core/tree/master/core/plugins/org.eclipse.dltk.console.ui/src/org/eclipse/dltk/console/ui/internal/ScriptConsoleViewer.java", "rawCode": "    public void clear() {\n      try {\n        disconnectListener();\n        doc.set(\"\"); // $NON-NLS-1$\n        ScriptConsoleViewer viewer;\n        for (Iterator<ScriptConsoleViewer> iter = viewerList.iterator(); iter.hasNext(); ) {\n          viewer = iter.next();\n          IDocumentPartitioner partitioner = viewer.getDocument().getDocumentPartitioner();\n          if (partitioner instanceof ScriptConsolePartitioner) {\n            ScriptConsolePartitioner scriptConsolePartitioner =\n                (ScriptConsolePartitioner) partitioner;\n            scriptConsolePartitioner.clearRanges();\n          }\n        }\n        appendInvitation();\n        for (Iterator<ScriptConsoleViewer> iter = viewerList.iterator(); iter.hasNext(); ) {\n          iter.next().setCaretPosition(doc.getLength());\n        }\n      } catch (BadLocationException e) {\n        e.printStackTrace();\n      } finally {\n        connectListener();\n      }\n    }\n"}, {"dataset": "next", "exampleID": 3085, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [1449], "initializationEnd": [1467], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["setResult(String)", "printStackTrace()"], "tryExpressionStart": 427, "tryExpressionEnd": 431, "tryBlockStart": 427, "tryBlockEnd": 3355, "catchExpressionStart": 3276, "catchExpressionEnd": 3296, "catchBlockStart": 3276, "catchBlockEnd": 3355, "exceptionHandlingCallStart": [3304, 3329], "exceptionHandlingCallEnd": [3321, 3348], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 1428, "guardExpressionEnd": 1486, "guardBlockStart": 1428, "guardBlockEnd": 3237, "focalAPI": "element = iterator.next()", "focalAPIStart": 1525, "focalAPIEnd": 1536, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getIckslid()", "element.getSjscbz()", "element.getZkztbs()", "element.getZt()", "element.getXm()", "element.setXm(String)", "element.setCyrybh(String)", "setCyryxxDict_itemList(element)"], "useStart": [1575, 1624, 1671, 1718, 1929, 2076, 2105, 3195], "useEnd": [1597, 1645, 1692, 1735, 1946, 2095, 3185, 3228], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/firefoxmmx2/techsupport/tree/master/src/com/aisino2/publicsystem/action/CyryxxAction.java", "rawCode": "  /** 采集点 */\n  public String querylistJc() throws Exception {\n    HttpServletRequest request = ServletActionContext.getRequest();\n    HttpSession session = request.getSession();\n    User user = (User) session.getAttribute(Constants.userKey);\n    String lrdwbm = user.getDepartment().getDepartcode();\n    if (user != null && user.getSsdwbm() != null && !\"\".equals(user.getSsdwbm())) {\n      lrdwbm = user.getSsdwbm();\n    }\n    try {\n      Qyryxx setQyryxx = new Qyryxx();\n      setQyryxx = (Qyryxx) this.setClass(setQyryxx, null);\n      Map map = new HashMap();\n      map = addMap(setQyryxx);\n      map.put(\"hylbdm\", setQyryxx.getHylbdm());\n      map.put(\"qymc\", setQyryxx.getQymc());\n      map.put(\"cylbdm\", StringUtil.trim0(setQyryxx.getCylbdm()));\n      map.put(\"lrsjf\", setQyryxx.getLrsjf());\n      map.put(\"lrsjt\", setQyryxx.getLrsjt());\n      map.put(\"lrdwbm\", lrdwbm);\n      Page page = cyryxxtjService.getListForPage(map, pagesize, pagerow, sort, dir);\n      CyryztFanYi(page.getData());\n      totalpage = page.getTotalPages();\n      totalrows = page.getTotalRows();\n      List lQyryxx = page.getData();\n\n      String jdzkd = \"\"; // 从缓存中得到制卡点(全局参数)\n      Globalpar globalpar = new Globalpar();\n      globalpar.setGlobalparcode(\"jdzkd\");\n      List list = CacheManager.getCacheGlobalpar(globalpar);\n      if (list != null && list.size() > 0) {\n        jdzkd = ((Globalpar) list.get(0)).getGlobalparvalue();\n      }\n      for (Iterator iter = lQyryxx.iterator(); iter.hasNext(); ) {\n        Qyryxx oneCyryxx = (Qyryxx) iter.next();\n        String slid = String.valueOf(oneCyryxx.getIckslid());\n        String sjscbz = oneCyryxx.getSjscbz();\n        String zkztbs = oneCyryxx.getZkztbs();\n        String cyryzt = oneCyryxx.getZt();\n        if (slid == null) slid = \"\";\n        if (sjscbz == null) sjscbz = \"\";\n        if (zkztbs == null) zkztbs = \"\";\n        if (cyryzt == null) cyryzt = \"\";\n        String xm =\n            oneCyryxx.getXm()\n                + \"<input type='hidden' id='qyid' value='\"\n                + oneCyryxx.getQyid()\n                + \"'>\";\n        oneCyryxx.setXm(xm);\n        oneCyryxx.setCyrybh(\n            \"<input type='hidden' name='cs\"\n                + oneCyryxx.getRyid()\n                + \"' value='\"\n                + oneCyryxx.getQyid()\n                + \"' />\"\n                + \"<input type='hidden' name='sl\"\n                + oneCyryxx.getRyid()\n                + \"' value='\"\n                + slid\n                + \"' />\"\n                + \"<input type='hidden' name='zkzt\"\n                + oneCyryxx.getRyid()\n                + \"' value='\"\n                + zkztbs\n                + \"' />\"\n                + \"<input type='hidden' name='ryzt\"\n                + oneCyryxx.getRyid()\n                + \"' value='\"\n                + cyryzt\n                + \"' />\"\n                + \"<input type='hidden' name='wbzk\"\n                + oneCyryxx.getRyid()\n                + \"' value='\"\n                + sjscbz\n                + \"' />\"\n                + \"<input type='hidden' name='zkd\"\n                + oneCyryxx.getRyid()\n                + \"' value='\"\n                + jdzkd\n                + \"' />\"\n                + oneCyryxx.getCyrybh());\n        setCyryxxDict_itemList(oneCyryxx);\n      }\n\n      setTabledataJc(lQyryxx);\n    } catch (Exception e) {\n      setResult(\"查询失败\");\n      e.printStackTrace();\n    }\n    return \"success\";\n  }\n"}, {"dataset": "next", "exampleID": 3086, "initialization": ["Iterator iterator = Set.iterator()"], "initializationStart": [2860], "initializationEnd": [2890], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getMessage()", "append(*)", "StringBuffer.append(char)"], "tryExpressionStart": 2914, "tryExpressionEnd": 2918, "tryBlockStart": 2914, "tryBlockEnd": 3490, "catchExpressionStart": 3409, "catchExpressionEnd": 3432, "catchBlockStart": 3409, "catchBlockEnd": 3490, "exceptionHandlingCallStart": [3452, 3442, 3442], "exceptionHandlingCallEnd": [3467, 3468, 3481], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 2928, "guardExpressionEnd": 2950, "guardBlockStart": 2928, "guardBlockEnd": 3400, "focalAPI": "element = iterator.next()", "focalAPIStart": 2976, "focalAPIEnd": 2987, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.get(int)", "iterator.next()", "element.get(int)"], "useStart": [3261, 3733, 4018], "useEnd": [3271, 3744, 4028], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sake/bouncycastle-java/tree/master/jdk1.3/org/bouncycastle/jce/cert/X509CertSelector.java", "rawCode": "  /**\n   * Return a printable representation of the <code>CertSelector</code>.<br>\n   * <br>\n   * <b>TODO: implement output for currently unsupported options(name constraints)</b><br>\n   * <br>\n   * Uses {@link org.bouncycastle.asn1.ASN1InputStream ASN1InputStream}, {@link\n   * org.bouncycastle.asn1.ASN1Object ASN1Object}, {@link org.bouncycastle.asn1.x509.KeyPurposeId\n   * KeyPurposeId}\n   *\n   * @return a <code>String</code> describing the contents of the <code>CertSelector</code>\n   */\n  public String toString() {\n    StringBuffer sb = new StringBuffer();\n    sb.append(\"X509CertSelector: [\\n\");\n    if (x509Cert != null) {\n      sb.append(\" Certificate: \").append(x509Cert).append('\\n');\n    }\n    if (serialNumber != null) {\n      sb.append(\" Serial Number: \").append(serialNumber).append('\\n');\n    }\n    if (issuerDN != null) {\n      sb.append(\" Issuer: \").append(getIssuerAsString()).append('\\n');\n    }\n    if (subjectDN != null) {\n      sb.append(\" Subject: \").append(getSubjectAsString()).append('\\n');\n    }\n    try {\n      if (subjectKeyID != null) {\n        ByteArrayInputStream inStream = new ByteArrayInputStream(subjectKeyID);\n        ASN1InputStream derInStream = new ASN1InputStream(inStream);\n        ASN1Object derObject = derInStream.readObject();\n        sb.append(\" Subject Key Identifier: \")\n            .append(ASN1Dump.dumpAsString(derObject))\n            .append('\\n');\n      }\n      if (authorityKeyID != null) {\n        ByteArrayInputStream inStream = new ByteArrayInputStream(authorityKeyID);\n        ASN1InputStream derInStream = new ASN1InputStream(inStream);\n        ASN1Object derObject = derInStream.readObject();\n        sb.append(\" Authority Key Identifier: \")\n            .append(ASN1Dump.dumpAsString(derObject))\n            .append('\\n');\n      }\n    } catch (IOException ex) {\n      sb.append(ex.getMessage()).append('\\n');\n    }\n    if (certValid != null) {\n      sb.append(\" Certificate Valid: \").append(certValid).append('\\n');\n    }\n    if (privateKeyValid != null) {\n      sb.append(\" Private Key Valid: \").append(privateKeyValid).append('\\n');\n    }\n    if (subjectKeyAlgID != null) {\n      sb.append(\" Subject Public Key AlgID: \").append(subjectKeyAlgID).append('\\n');\n    }\n    if (subjectPublicKey != null) {\n      sb.append(\" Subject Public Key: \").append(subjectPublicKey).append('\\n');\n    }\n    if (keyUsage != null) {\n      sb.append(\" Key Usage: \").append(keyUsage).append('\\n');\n    }\n    if (keyPurposeSet != null) {\n      sb.append(\" Extended Key Usage: \").append(keyPurposeSet).append('\\n');\n    }\n    if (policy != null) {\n      sb.append(\" Policy: \").append(policy).append('\\n');\n    }\n    sb.append(\" matchAllSubjectAltNames flag: \").append(matchAllSubjectAltNames).append('\\n');\n    if (subjectAltNamesByte != null) {\n      sb.append(\" SubjectAlternativNames: \\n[\");\n      Iterator iter = subjectAltNamesByte.iterator();\n      List obj;\n      try {\n        while (iter.hasNext()) {\n          obj = (List) iter.next();\n          ByteArrayInputStream inStream = new ByteArrayInputStream((byte[]) obj.get(1));\n          ASN1InputStream derInStream = new ASN1InputStream(inStream);\n          ASN1Object derObject = derInStream.readObject();\n          sb.append(\" Type: \")\n              .append(obj.get(0))\n              .append(\" Data: \")\n              .append(ASN1Dump.dumpAsString(derObject))\n              .append('\\n');\n        }\n      } catch (IOException ex) {\n        sb.append(ex.getMessage()).append('\\n');\n      }\n      sb.append(\"]\\n\");\n    }\n    if (pathToNamesByte != null) {\n      sb.append(\" PathToNamesNames: \\n[\");\n      Iterator iter = pathToNamesByte.iterator();\n      List obj;\n      try {\n        while (iter.hasNext()) {\n          obj = (List) iter.next();\n          ByteArrayInputStream inStream = new ByteArrayInputStream((byte[]) obj.get(1));\n          ASN1InputStream derInStream = new ASN1InputStream(inStream);\n          ASN1Object derObject = derInStream.readObject();\n          sb.append(\" Type: \")\n              .append(obj.get(0))\n              .append(\" Data: \")\n              .append(ASN1Dump.dumpAsString(derObject))\n              .append('\\n');\n        }\n      } catch (IOException ex) {\n        sb.append(ex.getMessage()).append('\\n');\n      }\n      sb.append(\"]\\n\");\n    }\n    sb.append(']');\n    return sb.toString();\n  }\n"}, {"dataset": "next", "exampleID": 3087, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [405], "initializationEnd": [421], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 382, "guardExpressionEnd": 442, "guardBlockStart": 382, "guardBlockEnd": 723, "focalAPI": "element = iterator.next()", "focalAPIStart": 474, "focalAPIEnd": 487, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Map.get(element)", "Map.remove(element)"], "useStart": [524, 672], "useEnd": [547, 698], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.2.5/kernel-impl/src/main/java/org/sakaiproject/event/impl/NotificationCache.java", "rawCode": "  /**\n   * Remove this entry from the cache.\n   *\n   * @param key The cache key.\n   */\n  public synchronized void remove(Object key) {\n    if (disabled()) return;\n\n    Notification payload = (Notification) cache.get(key);\n    cache.remove(key);\n\n    if (payload == null) return;\n\n    // remove it from the function map for each function\n    List funcs = payload.getFunctions();\n    for (Iterator iFuncs = funcs.iterator(); iFuncs.hasNext(); ) {\n      String func = (String) iFuncs.next();\n\n      List notifications = (List) m_functionMap.get(func);\n      if (notifications != null) {\n        notifications.remove(payload);\n        if (notifications.isEmpty()) {\n          m_functionMap.remove(func);\n        }\n      }\n    }\n  } // remove\n"}, {"dataset": "next", "exampleID": 3088, "initialization": ["Iterator iterator = Union.iterator()"], "initializationStart": [148], "initializationEnd": [168], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 174, "guardExpressionEnd": 196, "guardBlockStart": 174, "guardBlockEnd": 615, "focalAPI": "element = iterator.next()", "focalAPIStart": 229, "focalAPIEnd": 240, "followUpCheck": "!element.isExists()", "checkType": "IF", "followUpCheckExpressionStart": 248, "followUpCheckExpressionEnd": 266, "followUpCheckBlockStart": 248, "followUpCheckBlockEnd": 294, "use": ["element.getName()"], "useStart": [342], "useEnd": [353], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/and146/SPLAT-ARI/tree/master/ant/src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java", "rawCode": "  /**\n   * Styles all existing resources.\n   *\n   * @since Ant 1.7\n   */\n  private void processResources(Resource stylesheet) {\n    Iterator iter = resources.iterator();\n    while (iter.hasNext()) {\n      Resource r = (Resource) iter.next();\n      if (!r.isExists()) {\n        continue;\n      }\n      File base = baseDir;\n      String name = r.getName();\n      if (r instanceof FileResource) {\n        FileResource f = (FileResource) r;\n        base = f.getBaseDir();\n        if (base == null) {\n          name = f.getFile().getAbsolutePath();\n        }\n      }\n      process(base, name, destDir, stylesheet);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3089, "initialization": ["Iterator iterator = Set.iterator()"], "initializationStart": [114], "initializationEnd": [129], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 96, "guardExpressionEnd": 145, "guardBlockStart": 96, "guardBlockEnd": 630, "focalAPI": "element = iterator.next()", "focalAPIStart": 177, "focalAPIEnd": 185, "followUpCheck": "master.add(element)", "checkType": "IF", "followUpCheckExpressionStart": 193, "followUpCheckExpressionEnd": 214, "followUpCheckBlockStart": 193, "followUpCheckBlockEnd": 624, "use": ["check(element,PrintStream)"], "useStart": [252], "useEnd": [268], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/leif81/openmap-maven/tree/master/src/vpfservlet/WEB-INF/src/com/bbn/openmap/vpfservlet/URLCheck.java", "rawCode": "  public static Set workOn(Set master, Set urls, PrintStream out) {\n    Set newurls = null;\n    for (Iterator i = urls.iterator(); i.hasNext(); ) {\n      String surl = (String) i.next();\n      if (master.add(surl)) {\n        try {\n          Set rets = check(surl, out);\n          if (newurls == null) {\n            newurls = rets;\n          } else {\n            newurls.addAll(rets);\n          }\n        } catch (FileNotFoundException fnfe) {\n          out.println(\"Bogus URL: \" + surl);\n        } catch (IOException ioe) {\n          out.println(\" \" + surl + \" \" + ioe.getClass() + \" \" + ioe.getMessage());\n        }\n      }\n    }\n    return newurls;\n  }\n"}, {"dataset": "next", "exampleID": 3090, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [377], "initializationEnd": [393], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 359, "guardExpressionEnd": 409, "guardBlockStart": 359, "guardBlockEnd": 528, "focalAPI": "element = iterator.next()", "focalAPIStart": 451, "focalAPIEnd": 459, "followUpCheck": "element.getId().equalsIgnoreCase(nodeId)", "checkType": "IF", "followUpCheckExpressionStart": 467, "followUpCheckExpressionEnd": 509, "followUpCheckBlockStart": 467, "followUpCheckBlockEnd": 522, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/uDig/udig-platform/tree/master/plugins/org.locationtech.udig.style.sld/src/org/locationtech/udig/style/sld/editor/internal/EditorDialog.java", "rawCode": "  /**\n   * Find the <code>IEditorNode</code> that has data the same id as the supplied value.\n   *\n   * @param nodeId the id to search for.\n   * @return <code>IEditorNode</code> or <code>null</code> if not found.\n   */\n  protected IEditorNode findNodeMatching(String nodeId) {\n    List nodes = editorPageManager.getElements(EditorPageManager.POST_ORDER);\n    for (Iterator i = nodes.iterator(); i.hasNext(); ) {\n      IEditorNode node = (IEditorNode) i.next();\n      if (node.getId().equalsIgnoreCase(nodeId)) return node;\n    }\n    return null;\n  }\n"}, {"dataset": "next", "exampleID": 3091, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "InterruptedException", "exceptionHandlingCall": ["currentThread()", "interrupt()"], "tryExpressionStart": 152, "tryExpressionEnd": 156, "tryBlockStart": 152, "tryBlockEnd": 1848, "catchExpressionStart": 1763, "catchExpressionEnd": 1795, "catchBlockStart": 1763, "catchBlockEnd": 1848, "exceptionHandlingCallStart": [1805, 1805], "exceptionHandlingCallEnd": [1827, 1839], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 1109, "focalAPIEnd": 1120, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.createEvent()"], "useStart": [1091], "useEnd": [1135], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jaejaejae/ramonCS2103/tree/master/CS2103/lib/apache-log4j-1.2.16/src/main/java/org/apache/log4j/AsyncAppender.java", "rawCode": "    /** {@inheritDoc} */\n    public void run() {\n      boolean isActive = true;\n\n      //\n      // if interrupted (unlikely), end thread\n      //\n      try {\n        //\n        // loop until the AsyncAppender is closed.\n        //\n        while (isActive) {\n          LoggingEvent[] events = null;\n\n          //\n          // extract pending events while synchronized\n          // on buffer\n          //\n          synchronized (buffer) {\n            int bufferSize = buffer.size();\n            isActive = !parent.closed;\n\n            while ((bufferSize == 0) && isActive) {\n              buffer.wait();\n              bufferSize = buffer.size();\n              isActive = !parent.closed;\n            }\n\n            if (bufferSize > 0) {\n              events = new LoggingEvent[bufferSize + discardMap.size()];\n              buffer.toArray(events);\n\n              //\n              // add events due to buffer overflow\n              //\n              int index = bufferSize;\n\n              for (Iterator iter = discardMap.values().iterator(); iter.hasNext(); ) {\n                events[index++] = ((DiscardSummary) iter.next()).createEvent();\n              }\n\n              //\n              // clear buffer and discard map\n              //\n              buffer.clear();\n              discardMap.clear();\n\n              //\n              // allow blocked appends to continue\n              buffer.notifyAll();\n            }\n          }\n\n          //\n          // process events after lock on buffer is released.\n          //\n          if (events != null) {\n            for (int i = 0; i < events.length; i++) {\n              synchronized (appenders) {\n                appenders.appendLoopOnAppenders(events[i]);\n              }\n            }\n          }\n        }\n      } catch (InterruptedException ex) {\n        Thread.currentThread().interrupt();\n      }\n    }\n"}, {"dataset": "next", "exampleID": 3092, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 171, "focalAPIEnd": 180, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["remove(element)", "iterator.next()", "Iterator.add(element)"], "useStart": [155, 263, 250], "useEnd": [181, 272, 273], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tschmid/tinyos-2.x/tree/master/support/sdk/java/net/tinyos/mviz/DNavigate.java", "rawCode": "  public void redrawNavigator() {\n    // System.out.println(\"Redrawing navigator.\");\n    Iterator it = layers.iterator();\n    while (it.hasNext()) {\n      remove((DLayer) it.next());\n    }\n    it = layers.iterator();\n    while (it.hasNext()) {\n      add((DLayer) it.next());\n    }\n\n    revalidate();\n    // repaint();\n    // parent.repaint();\n    // parent.canvas.repaint();\n    redrawAllLayers();\n  }\n"}, {"dataset": "next", "exampleID": 3093, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [153], "initializationEnd": [165], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["iterator.hasNext()"], "configurationStart": [190], "configurationEnd": [202], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 223, "focalAPIEnd": 232, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertSame(*,element)", "iterator.hasNext()", "iterator.next()", "assertSame(*,element)", "iterator.hasNext()", "iterator.next()", "assertSame(*,element)", "iterator.hasNext()", "iterator.next()", "assertSame(*,element)", "iterator.hasNext()", "iterator.next()", "assertSame(*,element)", "iterator.hasNext()"], "useStart": [209, 258, 291, 277, 326, 359, 345, 394, 427, 413, 462, 495, 481, 531], "useEnd": [233, 270, 300, 301, 338, 368, 369, 406, 436, 437, 474, 504, 505, 543], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/akuhn/ch.akuhn.util/tree/master/ch.akuhn.util/test/ch/akuhn/util/ListTest.java", "rawCode": "  @Test\n  public List fill5Elem() {\n    List $ = List.fill(5, a);\n    assertEquals(5, $.size());\n    assertEquals(false, $.isEmpty());\n    Iterator it = $.iterator();\n    assertEquals(true, it.hasNext());\n    assertSame(a, it.next());\n    assertEquals(true, it.hasNext());\n    assertSame(a, it.next());\n    assertEquals(true, it.hasNext());\n    assertSame(a, it.next());\n    assertEquals(true, it.hasNext());\n    assertSame(a, it.next());\n    assertEquals(true, it.hasNext());\n    assertSame(a, it.next());\n    assertEquals(false, it.hasNext());\n    return $;\n  }\n"}, {"dataset": "next", "exampleID": 3094, "initialization": ["Iterator iterator = List<NetworkPrivilegedUserBean>.iterator()"], "initializationStart": [127], "initializationEnd": [153], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 108, "guardExpressionEnd": 170, "guardBlockStart": 108, "guardBlockEnd": 559, "focalAPI": "element = iterator.next()", "focalAPIStart": 240, "focalAPIEnd": 249, "followUpCheck": "element.getUser().getId() != network.getDefaultNetworkAdmin().getId()", "checkType": "IF", "followUpCheckExpressionStart": 257, "followUpCheckExpressionEnd": 328, "followUpCheckBlockStart": 257, "followUpCheckBlockEnd": 553, "use": ["element.getUser()", "element.getUser()", "element.getNetworkRoleId()"], "useStart": [261, 388, 509], "useEnd": [275, 402, 532], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dvn/dvn-svn-import-test4/tree/master/dvn-app/tags/v2.1.1/src/DVN-EJB/src/java/edu/harvard/iq/dvn/core/admin/EditNetworkPrivilegesServiceBean.java", "rawCode": "  @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)\n  public void save(String creatorUrl) {\n\n    for (Iterator it = privilegedUsers.iterator(); it.hasNext(); ) {\n      NetworkPrivilegedUserBean elem = (NetworkPrivilegedUserBean) it.next();\n      if (elem.getUser().getId() != network.getDefaultNetworkAdmin().getId()) {\n        if (elem.getNetworkRoleId() == null) {\n          elem.getUser().setNetworkRole(null);\n        } else {\n          elem.getUser().setNetworkRole(em.find(NetworkRole.class, elem.getNetworkRoleId()));\n        }\n      }\n    }\n\n    em.flush();\n  }\n"}, {"dataset": "next", "exampleID": 3095, "initialization": ["Iterator iterator = Collection.iterator()"], "initializationStart": [448], "initializationEnd": [465], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 430, "guardExpressionEnd": 481, "guardBlockStart": 430, "guardBlockEnd": 572, "focalAPI": "element = iterator.next()", "focalAPIStart": 520, "focalAPIEnd": 528, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta08/kernel-impl/src/main/java/org/sakaiproject/authz/impl/DbAuthzGroupService.java", "rawCode": "    /** {@inheritDoc} */\n    public Set getAllowedFunctions(String role, Collection realms) {\n      if ((role == null) || (realms == null) || (realms.isEmpty())) return new HashSet();\n\n      String sql =\n          dbAuthzGroupSql.getSelectRealmFunctionFunctionNameSql(\n              orInClause(realms.size(), \"SR.REALM_ID\"));\n      Object[] fields = new Object[1 + realms.size()];\n      fields[0] = role;\n      int pos = 1;\n      for (Iterator i = realms.iterator(); i.hasNext(); ) {\n        String roleRealm = (String) i.next();\n        fields[pos++] = roleRealm;\n      }\n\n      // read the strings\n      List results = m_sql.dbRead(sql, fields, null);\n\n      // prepare the return\n      Set rv = new HashSet();\n      rv.addAll(results);\n      return rv;\n    }\n"}, {"dataset": "next", "exampleID": 3096, "initialization": ["Iterator iterator = List<AttributeValueItem>.iterator()"], "initializationStart": [469], "initializationEnd": [503], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 451, "guardExpressionEnd": 519, "guardBlockStart": 451, "guardBlockEnd": 780, "focalAPI": "element = iterator.next()", "focalAPIStart": 575, "focalAPIEnd": 583, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getCategoryId()", "element.getCategoryId()", "element.getCategoryLabel()"], "useStart": [621, 691, 741], "useEnd": [641, 711, 764], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MiniSEC/adito_reload/tree/master/adito/branches/openvpn-als/openvpnals/src/net/openvpn/als/properties/attributes/forms/UserAttributesForm.java", "rawCode": "  /**\n   * Initialise the form\n   *\n   * @param userAttributeValueItems list of {@link\n   *     net.openvpn.als.properties.attributes.AttributeValueItem} objects\n   * @throws Exception on any error\n   */\n  public void initialize(List<AttributeValueItem> userAttributeValueItems) throws Exception {\n    this.userAttributeValueItems = userAttributeValueItems;\n    categoryIds = new ArrayList<String>();\n    categoryTitles = new ArrayList<String>();\n    for (Iterator i = userAttributeValueItems.iterator(); i.hasNext(); ) {\n      AttributeValueItem item = (AttributeValueItem) i.next();\n      int idx = categoryIds.indexOf(item.getCategoryId());\n      if (idx == -1) {\n        categoryIds.add(item.getCategoryId());\n        categoryTitles.add(item.getCategoryLabel());\n      }\n    }\n    selectedTab = categoryIds.size() > 0 ? categoryIds.get(0) : \"\";\n  }\n"}, {"dataset": "next", "exampleID": 3097, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = iterator.next()", "focalAPIStart": 373, "focalAPIEnd": 381, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["readPartnerLink(element)"], "useStart": [347], "useEnd": [382], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/amegginson/jbpm-bpel-ftl/tree/master/bpel/library/src/main/java/org/jbpm/bpel/xml/DeploymentDescriptorReader.java", "rawCode": "  protected void readPartnerLinks(Element partnerLinksElem, ScopeDescriptor scope) {\n    for (Iterator i =\n            XmlUtil.getElements(\n                partnerLinksElem,\n                BpelConstants.NS_DEPLOYMENT_DESCRIPTOR,\n                BpelConstants.ELEM_PARTNER_LINK);\n        i.hasNext(); ) {\n      PartnerLinkDescriptor partnerLink = readPartnerLink((Element) i.next());\n      scope.addPartnerLink(partnerLink);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3098, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [349], "initializationEnd": [371], "hasTryCatch": 1, "exceptionType": "InterruptedException", "exceptionHandlingCall": ["new DriverException(*)"], "tryExpressionStart": 138, "tryExpressionEnd": 142, "tryBlockStart": 138, "tryBlockEnd": 950, "catchExpressionStart": 734, "catchExpressionEnd": 765, "catchBlockStart": 734, "catchBlockEnd": 820, "exceptionHandlingCallStart": [785], "exceptionHandlingCallEnd": [807], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 379, "guardExpressionEnd": 412, "guardBlockStart": 379, "guardBlockEnd": 875, "focalAPI": "element = iterator.next()", "focalAPIStart": 457, "focalAPIEnd": 479, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.isWait()", "executeKeyAction(element)"], "useStart": [500, 839], "useEnd": [518, 866], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/varialus/jython-legacy/tree/master/installer/src/java/org/python/util/install/driver/GuiAutotest.java", "rawCode": "  /**\n   * execute a single gui auto test\n   *\n   * @throws DriverException\n   */\n  protected void execute() throws DriverException {\n    try {\n      _robot = new Robot();\n\n      System.out.println(\"waiting 2 seconds for the first gui ... please do not change focus\");\n      _robot.delay(2000); // initial gui load\n\n      Iterator actionsIterator = _keyActions.iterator();\n      while (actionsIterator.hasNext()) {\n        KeyAction keyAction = (KeyAction) actionsIterator.next();\n        setWaiting(keyAction.isWait());\n        if (isWaiting()) {\n          System.out.println(\"waiting for the installation to finish ...\");\n        }\n        while (isWaiting()) {\n          try {\n            Thread.sleep(_DEFAULT_DELAY);\n          } catch (InterruptedException e) {\n            throw new DriverException(e);\n          }\n        }\n        executeKeyAction(keyAction);\n      }\n    } catch (AWTException ae) {\n      throw new DriverException(ae);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3099, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [3769], "initializationEnd": [3796], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 3802, "guardExpressionEnd": 3829, "guardBlockStart": 3802, "guardBlockEnd": 4987, "focalAPI": "element = iterator.next()", "focalAPIStart": 3868, "focalAPIEnd": 3884, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getAttributeValue(String)", "element.setAttribute(String,String)"], "useStart": [3915, 4876], "useEnd": [3953, 4945], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cagrid-core/tree/master/caGrid/projects/introduce/src/java/Introduce/gov/nih/nci/cagrid/introduce/codegen/utils/SyncUtils.java", "rawCode": "  public static void addImportedOperationToService(\n      MethodType method, SpecificServiceInformation serviceInfo) throws Exception {\n\n    String fromDocFile =\n        serviceInfo.getBaseDirectory().getAbsolutePath()\n            + File.separator\n            + \"schema\"\n            + File.separator\n            + serviceInfo\n                .getIntroduceServiceProperties()\n                .getProperty(IntroduceConstants.INTRODUCE_SKELETON_SERVICE_NAME)\n            + File.separator\n            + method.getImportInformation().getWsdlFile();\n    String toDocFile =\n        serviceInfo.getBaseDirectory().getAbsolutePath()\n            + File.separator\n            + \"schema\"\n            + File.separator\n            + serviceInfo\n                .getIntroduceServiceProperties()\n                .getProperty(IntroduceConstants.INTRODUCE_SKELETON_SERVICE_NAME)\n            + File.separator\n            + serviceInfo.getService().getName()\n            + \".wsdl\";\n    if (!(new File(fromDocFile).exists())) {\n      // try From Globus Location\n      fromDocFile =\n          CommonTools.getGlobusLocation()\n              + File.separator\n              + \"share\"\n              + File.separator\n              + \"schema\"\n              + File.separator\n              + \"wsrf\"\n              + File.separator\n              + method.getImportInformation().getWsdlFile();\n      logger.info(\n          \"Imported operation's WSDL not found in service directory, using WSDL from globus...\");\n    }\n    if (!(new File(fromDocFile).exists())) {\n      throw new Exception(\n          \"Cannot locate WSDL file: \"\n              + fromDocFile\n              + \" to import from for Method: \"\n              + method.getName());\n    }\n\n    // parse the wsdl and get the operation text.....\n    Document fromWsdl = null;\n    Document toWsdl = null;\n    try {\n      // read the wsdl we're importing an operation FROM\n      fromWsdl = XMLUtilities.fileNameToDocument(fromDocFile);\n      // read the service's wsdl we're writing TO\n      toWsdl = XMLUtilities.fileNameToDocument(toDocFile);\n    } catch (IOException ex) {\n      logger.error(ex);\n      throw ex;\n    }\n\n    // get the port type we're importing from\n    Element importPortType =\n        getPortTypeElement(\n            fromWsdl.getRootElement(), method.getImportInformation().getPortTypeName());\n    if (importPortType == null) {\n      String message =\n          \"Unable to locate port type in imported WSDL (\"\n              + method.getImportInformation().getPortTypeName()\n              + \")\";\n      logger.error(message);\n      throw new SynchronizationException(message);\n    }\n    // get the operation from the import's port type\n    Element importOperation = getOperationElement(importPortType, method.getName());\n    if (importOperation == null) {\n      String message =\n          \"Unable to locate operation in imported port type (\" + method.getName() + \")\";\n      logger.error(message);\n      throw new SynchronizationException(message);\n    }\n    // detach the operation element so we can add it to our own WSDL later\n    Element copyOperation = (Element) importOperation.detach();\n    // find the port type within the service we're importing a method INTO\n    Element servicePortType =\n        getPortTypeElement(\n            toWsdl.getRootElement(), serviceInfo.getService().getName() + \"PortType\");\n    if (servicePortType == null) {\n      String message =\n          \"Unable to locate port type in service's WSDL (\"\n              + serviceInfo.getService().getName()\n              + \"PortType)\";\n      logger.error(message);\n      throw new SynchronizationException(message);\n    }\n    // fix up the namespaceing of the imported operation\n    List copyElemChildren = copyOperation.getChildren();\n    Iterator childIter = copyElemChildren.iterator();\n    while (childIter.hasNext()) {\n      Element copyChild = (Element) childIter.next();\n      String messageString = copyChild.getAttributeValue(\"message\");\n      logger.debug(\"Looking for namespace prefix for message \" + messageString);\n      Namespace ns = null;\n      String prefix = \"\";\n      String message = \"\";\n      if (messageString.indexOf(\":\") >= 0) {\n        prefix = messageString.substring(0, messageString.indexOf(\":\"));\n        message = messageString.substring(messageString.indexOf(\":\") + 1);\n        ns = fromWsdl.getRootElement().getNamespace(prefix);\n      } else {\n        message = messageString;\n        ns = fromWsdl.getRootElement().getNamespace();\n      }\n      List toNamespaces = toWsdl.getRootElement().getAdditionalNamespaces();\n      for (int namespaceIndex = 0; namespaceIndex < toNamespaces.size(); namespaceIndex++) {\n        Namespace tempns = (Namespace) toNamespaces.get(namespaceIndex);\n        if (tempns.getURI().equals(ns.getURI())) {\n          logger.debug(\"Setting message \" + message + \" nsPrefix: \" + tempns.getPrefix());\n          copyChild.setAttribute(\"message\", tempns.getPrefix() + \":\" + message);\n          break;\n        }\n      }\n    }\n    // add the operation to our service's port type\n    servicePortType.addContent(copyOperation);\n\n    // write out the modified service WSDL\n    try {\n      FileWriter fw = new FileWriter(toDocFile);\n      fw.write(XMLUtilities.formatXML(XMLUtilities.documentToString(toWsdl)));\n      fw.close();\n    } catch (IOException ex) {\n      String message = \"Error writing modified service WSDL: \" + ex.getMessage();\n      logger.error(message, ex);\n      throw new SynchronizationException(message, ex);\n    }\n  }\n"}, {"dataset": "next", "exampleID": 3100, "initialization": ["Iterator iterator = List.iterator()"], "initializationStart": [390], "initializationEnd": [405], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "iterator.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 411, "guardExpressionEnd": 433, "guardBlockStart": 411, "guardBlockEnd": 590, "focalAPI": "element = iterator.next()", "focalAPIStart": 459, "focalAPIEnd": 470, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertValueOfXPath(String,element,String)"], "useStart": [522], "useEnd": [583], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/geoquest/Public-GQ-Player-Android--1/tree/master/GQ_Android/libs/jaxen/jaxen-1.1.4/src/java/test/org/jaxen/test/XPathTestBase.java", "rawCode": "  public void testCorrectPredicateApplication() throws JaxenException {\n    Navigator nav = getNavigator();\n    String url = \"xml/much_ado.xml\";\n    log(\"Document [\" + url + \"]\");\n    Object document = nav.getDocument(url);\n    XPath contextpath = new BaseXPath(\"/\", nav);\n    log(\"Initial Context :: \" + contextpath);\n    List list = contextpath.selectNodes(document);\n    Iterator iter = list.iterator();\n    while (iter.hasNext()) {\n      Object context = iter.next();\n      // Test correct predicate application\n      assertValueOfXPath(\"5\", context, \"count(/PLAY/ACT/SCENE[1])\");\n    }\n  }\n"}]