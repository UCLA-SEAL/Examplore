[{"dataset": "scannerNextInt", "exampleID": 7001, "initialization": ["Scanner scanner = new Scanner(String)"], "initializationStart": [2143], "initializationEnd": [2157], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "scanner.hasNextInt()", "guardType": "IF {", "guardExpressionStart": 2169, "guardExpressionEnd": 2194, "guardBlockStart": 2169, "guardBlockEnd": 2323, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 2217, "focalAPIEnd": 2234, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Step(QName,value,boolean,boolean)"], "useStart": [2586], "useEnd": [2635], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victortey/geotool/tree/master/modules/extension/app-schema/app-schema/src/main/java/org/geotools/data/complex/filter/XPath.java", "rawCode": "  /**\n   * Returns the list of stepts in <code>xpathExpression</code> by cleaning it up removing\n   * unnecessary elements.\n   *\n   * <p>\n   *\n   * @param root non null descriptor of the root attribute, generally the Feature descriptor. Used\n   *     to ignore the first step in xpathExpression if the expression's first step is named as\n   *     rootName.\n   * @param xpathExpression\n   * @return\n   * @throws IllegalArgumentException if <code>xpathExpression</code> has no steps or it isn't a\n   *     valid XPath expression against <code>type</code>.\n   */\n  public static StepList steps(\n      final AttributeDescriptor root,\n      final String xpathExpression,\n      final NamespaceSupport namespaces)\n      throws IllegalArgumentException {\n\n    if (root == null) {\n      throw new NullPointerException(\"root\");\n    }\n\n    if (xpathExpression == null) {\n      throw new NullPointerException(\"xpathExpression\");\n    }\n\n    String expression = xpathExpression.trim();\n\n    if (\"\".equals(expression)) {\n      throw new IllegalArgumentException(\"expression is empty\");\n    }\n\n    StepList steps = new StepList();\n\n    if (\"/\".equals(expression)) {\n      expression = root.getName().getLocalPart();\n    }\n\n    if (expression.startsWith(\"/\")) {\n      expression = expression.substring(1);\n    }\n\n    final List<String> partialSteps = splitPath(expression);\n\n    if (partialSteps.size() == 0) {\n      throw new IllegalArgumentException(\"no steps provided\");\n    }\n\n    int startIndex = 0;\n\n    for (int i = startIndex; i < partialSteps.size(); i++) {\n\n      String step = partialSteps.get(i);\n      if (\"..\".equals(step)) {\n        steps.remove(steps.size() - 1);\n      } else if (\".\".equals(step)) {\n        continue;\n      } else {\n        int index = 1;\n        boolean isXmlAttribute = false;\n        boolean isIndexed = false;\n        String predicate = null;\n        String stepName = step;\n        if (step.indexOf('[') != -1) {\n          int start = step.indexOf('[');\n          int end = step.indexOf(']');\n          stepName = step.substring(0, start);\n          String s = step.substring(start + 1, end);\n          Scanner scanner = new Scanner(s);\n          if (scanner.hasNextInt()) {\n            index = scanner.nextInt();\n            isIndexed = true;\n          } else {\n            predicate = s;\n          }\n        }\n        if (step.charAt(0) == '@') {\n          isXmlAttribute = true;\n          stepName = stepName.substring(1);\n        }\n        QName qName = deglose(stepName, root, namespaces, isXmlAttribute);\n        if (predicate == null) {\n          steps.add(new Step(qName, index, isXmlAttribute, isIndexed));\n        } else {\n          steps.add(new Step(qName, isXmlAttribute, predicate));\n        }\n      }\n      //\n      // if (step.indexOf('[') != -1) {\n      // int start = step.indexOf('[');\n      // int end = step.indexOf(']');\n      // String stepName = step.substring(0, start);\n      // int stepIndex = Integer.parseInt(step.substring(start + 1, end));\n      // QName qName = deglose(stepName, root, namespaces);\n      // steps.add(new Step(qName, stepIndex));\n      // } else if (\"..\".equals(step)) {\n      // steps.remove(steps.size() - 1);\n      // } else if (\".\".equals(step)) {\n      // continue;\n      // } else {\n      // QName qName = deglose(step, root, namespaces);\n      // steps.add(new Step(qName, 1));\n      // }\n    }\n\n    // XPath simplification phase: if the xpath expression contains more\n    // nodes\n    // than the root node itself, and the root node is present, remove the\n    // root\n    // node as it is redundant\n    if (root != null && steps.size() > 1) {\n      Step step = (Step) steps.get(0);\n      Name rootName = root.getName();\n      QName stepName = step.getName();\n      if (Types.equals(rootName, stepName)) {\n        LOGGER.fine(\"removing root name from xpath \" + steps + \" as it is redundant\");\n        steps.remove(0);\n      }\n    }\n\n    return steps;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7002, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [61], "initializationEnd": [83], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 98, "focalAPIEnd": 110, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 160, "followUpCheckExpressionEnd": 183, "followUpCheckBlockStart": 160, "followUpCheckBlockEnd": 267, "use": ["scanner.nextInt()"], "useStart": [198], "useEnd": [210], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ferhatelmas/algo/tree/master/eolimp/page10/q904/Main.java", "rawCode": "  public static void main(String[] args) {\n\n    Scanner in = new Scanner(System.in);\n\n    int n = in.nextInt();\n    int i, tmp;\n    int[] buf = new int[n];\n    for (i = 0; i < n; i++) {\n      tmp = in.nextInt();\n      if (tmp >= 0) tmp += 2;\n      buf[i] = tmp;\n    }\n\n    for (i = 0; i < buf.length - 1; i++) System.out.print(buf[i] + \" \");\n\n    System.out.println(buf[buf.length - 1]);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7003, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 136, "focalAPIEnd": 148, "followUpCheck": "value < MAX_TIME", "checkType": "LOOP {", "followUpCheckExpressionStart": 578, "followUpCheckExpressionEnd": 602, "followUpCheckBlockStart": 578, "followUpCheckBlockEnd": 931, "use": ["scanner.nextInt()", "scanner.nextLine()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextLine()"], "useStart": [166, 342, 496, 526, 557, 775], "useEnd": [178, 355, 508, 538, 569, 788], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AlexBarnes86/uva-java/tree/master/ContestVolumes/src/cxix/Problem11926.java", "rawCode": "  private static String solve(int n, int m) throws IOException {\n    bits.clear();\n\n    for (int i = 0; i < n; ++i) {\n      int start = sc.nextInt();\n      int end = sc.nextInt();\n      for (int j = (start >= 0 ? start : 0); j < (end <= MAX_TIME ? end : MAX_TIME); ++j) {\n        if (bits.get(j)) {\n          for (; i < n; ++i) {\n            sc.nextLine();\n          }\n          return \"CONFLICT\";\n        }\n        bits.set(j);\n      }\n    }\n\n    for (int i = 0; i < m; ++i) {\n      int start = sc.nextInt();\n      int end = sc.nextInt();\n      int jump = sc.nextInt();\n\n      while (start < MAX_TIME) {\n        for (int j = (start >= 0 ? start : 0); j < (end <= MAX_TIME ? end : MAX_TIME); j++) {\n          if (bits.get(j)) {\n            for (; i < m; ++i) {\n              sc.nextLine();\n            }\n            return \"CONFLICT\";\n          }\n          bits.set(j);\n        }\n        start += jump;\n        end += jump;\n      }\n    }\n\n    return \"NO CONFLICT\";\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7004, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [60], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 100, "focalAPIEnd": 112, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()"], "useStart": [129], "useEnd": [141], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bkarak/fuzzer-fat-fingers/tree/master/src/tasks/CreateTwoDimArray/CreateTwoDimArray.java", "rawCode": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n\n    int nbr1 = in.nextInt();\n    int nbr2 = in.nextInt();\n\n    double[][] array = new double[nbr1][nbr2];\n    array[0][0] = 42.0;\n    System.out.println(\"The number at place [0 0] is \" + array[0][0]);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7005, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 483, "focalAPIEnd": 497, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "scanner.nextInt()"], "useStart": [513, 543], "useEnd": [527, 557], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/patrick478/Medieval-Madness/tree/master/src/comp261/modelview/Main.java", "rawCode": "  public static void main(String[] args) throws Exception {\n\n    FileInputStream ifs = new FileInputStream(args[0]);\n    Scanner scan = new Scanner(ifs);\n\n    Vec3 light = Vec3.create(scan);\n    light = light.scale(5);\n\n    List<Triangle> trilist = new ArrayList<Triangle>();\n\n    // read tris in\n\n    while (scan.hasNext()) {\n      trilist.add(\n          new Triangle(\n              Vec3.create(scan),\n              Vec3.create(scan),\n              Vec3.create(scan),\n              scan.nextInt(),\n              scan.nextInt(),\n              scan.nextInt()));\n    }\n\n    // attempt to calculate vertex normals...\n\n    for (Triangle t0 : trilist) {\n      // for each tri\n      for (int i = 0; i < 3; i++) {\n        // for each vertex\n        Vec3 v0 = t0.vertices[i];\n\n        for (Triangle t : trilist) {\n          if (t != t0) {\n            // for every other tri\n            for (Vec3 v : t.vertices) {\n              // for every vertex\n\n              if (v0.add(v.neg()).mag() < 0.001) {\n                // assume shared vertex\n                // add face normals together\n                t0.normals[i] = t0.normals[i].add(t.trinorm);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // compute translation / scaling values\n\n    double largest = 0;\n    double xavg = 0, yavg = 0, zavg = 0;\n\n    for (Triangle t : trilist) {\n      for (Vec3 v : t.vertices) {\n        xavg += v.x;\n        yavg += v.y;\n        zavg += v.z;\n        largest = v.x > largest ? v.x : largest;\n        largest = v.y > largest ? v.y : largest;\n        largest = v.z > largest ? v.z : largest;\n      }\n    }\n\n    xavg /= (trilist.size() * 3);\n    yavg /= (trilist.size() * 3);\n    zavg /= (trilist.size() * 3);\n    double scale = 2 / largest;\n\n    System.out.printf(\"%.4f, %.4f, %.4f, %.4f\\n\", xavg, yavg, zavg, scale);\n\n    Initial3D i3d = Initial3D.createInstance();\n\n    // assemble polygon and vector buffers\n    PolygonBuffer pbuf = i3d.createPolygonBuffer(10000, 8);\n    VectorBuffer vbuf = i3d.createVectorBuffer(10000);\n    VectorBuffer nbuf = i3d.createVectorBuffer(10000);\n\n    for (Triangle t : trilist) {\n\n      double[][] v1 = Vector4D.create(t.vertices[0].x, t.vertices[0].y, t.vertices[0].z, 1d);\n      double[][] v2 = Vector4D.create(t.vertices[1].x, t.vertices[1].y, t.vertices[1].z, 1d);\n      double[][] v3 = Vector4D.create(t.vertices[2].x, t.vertices[2].y, t.vertices[2].z, 1d);\n\n      double[][] n1 = Vector4D.create(t.normals[0].x, t.normals[0].y, t.normals[0].z, 0d);\n      double[][] n2 = Vector4D.create(t.normals[1].x, t.normals[1].y, t.normals[1].z, 0d);\n      double[][] n3 = Vector4D.create(t.normals[2].x, t.normals[2].y, t.normals[2].z, 0d);\n\n      int[] vlist = new int[] {vbuf.put(v3), vbuf.put(v2), vbuf.put(v1)};\n      int[] nlist = new int[] {nbuf.put(n3), nbuf.put(n2), nbuf.put(n1)};\n\n      pbuf.addPolygon(vlist, null, nlist, null);\n    }\n\n    /*\n     *\n     * Run 3D cool stuff\n     */\n\n    final int WIDTH = 848;\n    final int HEIGHT = 480;\n\n    RenderWindow rwin = RenderWindow.create(WIDTH, HEIGHT);\n    rwin.setLocationRelativeTo(null);\n    rwin.setVisible(true);\n    BufferedImage bi = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);\n\n    // RenderFrame rwin2 = RenderFrame.create(WIDTH, HEIGHT);\n    // rwin2.setLocationRelativeTo(null);\n    // rwin2.setVisible(true);\n    // BufferedImage bi2 = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);\n\n    i3d.viewportSize(WIDTH, HEIGHT);\n\n    i3d.matrixMode(MODEL);\n    i3d.translateX(-xavg);\n    i3d.translateY(-yavg);\n    i3d.translateZ(-zavg);\n\n    // custom scaling matrix\n    double[][] mscale = Matrix.create(4, 4);\n    TransformationMatrix4D.scale(mscale, scale, -scale, scale, 1);\n    i3d.multMatrix(mscale);\n\n    i3d.pushMatrix();\n\n    i3d.matrixMode(PROJ);\n    i3d.loadPerspectiveFOV(0.5, 10, Math.PI / 6, WIDTH / (double) HEIGHT);\n    i3d.projectionMode(PERSPECTIVE);\n\n    // i3d.matrixMode(VIEW);\n    // i3d.rotateX(-Math.PI / 6);\n    // i3d.translateZ(6);\n\n    i3d.lightfv(LIGHT0, DIFFUSE, new float[] {1f, 1f, 1f});\n    i3d.lightfv(LIGHT0, SPECULAR, new float[] {1f, 1f, 1f});\n    i3d.lightfv(LIGHT0, AMBIENT, new float[] {0.1f, 0.1f, 0.1f});\n    i3d.lightf(LIGHT0, INTENSITY, 30f);\n    i3d.enable(LIGHT0);\n\n    i3d.lightfv(LIGHT0 + 1, DIFFUSE, new float[] {1f, 0f, 0f});\n    i3d.lightfv(LIGHT0 + 1, SPECULAR, new float[] {1f, 0f, 0f});\n    i3d.lightfv(LIGHT0 + 1, AMBIENT, new float[] {0.1f, 0.1f, 0.1f});\n    i3d.lightf(LIGHT0 + 1, INTENSITY, 30f);\n    i3d.enable(LIGHT0 + 1);\n\n    i3d.lightfv(LIGHT0 + 2, DIFFUSE, new float[] {0f, 1f, 0f});\n    i3d.lightfv(LIGHT0 + 2, SPECULAR, new float[] {0f, 1f, 0f});\n    i3d.lightfv(LIGHT0 + 2, AMBIENT, new float[] {0.1f, 0.1f, 0.1f});\n    i3d.lightf(LIGHT0 + 2, INTENSITY, 500f);\n    i3d.enable(LIGHT0 + 2);\n\n    i3d.lightfv(LIGHT0 + 3, DIFFUSE, new float[] {0f, 0f, 1f});\n    i3d.lightfv(LIGHT0 + 3, SPECULAR, new float[] {0f, 0f, 1f});\n    i3d.lightfv(LIGHT0 + 3, AMBIENT, new float[] {0.1f, 0.1f, 0.1f});\n    i3d.lightf(LIGHT0 + 3, INTENSITY, 30f);\n    i3d.enable(LIGHT0 + 3);\n\n    i3d.cullFace(BACK);\n    i3d.polygonMode(FRONT_AND_BACK, POLY_FILL);\n\n    i3d.shadeModel(SHADEMODEL_FLAT);\n\n    double[] light0p = new double[] {light.x, light.y, light.z};\n    double[] light1p = new double[] {-10, 0, 0};\n    double[] light2p = new double[] {0, 50, 0};\n    double[] light3p = new double[] {10, 0, 0};\n\n    float[] mtl_floor_d = new float[] {0.6f, 0.6f, 0.6f};\n    float[] mtl_floor_s = new float[] {0.2f, 0.2f, 0.2f};\n\n    System.out.println(light);\n\n    i3d.materialfv(FRONT, AMBIENT, new float[] {0.1f, 0.1f, 0.1f});\n\n    double camera_x = 0;\n    double camera_y = 0;\n    double camera_z = -5;\n    double[][] kvector = new double[][] {{0d}, {0d}, {1d}, {0d}};\n    double[][] movevector = new double[4][1];\n    double camera_yaw = 0;\n    double camera_pitch = 0;\n    double camera_roll = 0;\n\n    while (true) {\n\n      // i3d.clear(STENCIL_BUFFER_BIT);\n\n      i3d.matrixMode(PROJ);\n      i3d.loadPerspectiveFOV(\n          1, 200, Math.PI / 6, rwin.getRenderWidth() / (double) rwin.getRenderHeight());\n\n      i3d.matrixMode(VIEW);\n      i3d.loadIdentity();\n      i3d.translateX(-camera_x);\n      i3d.translateY(-camera_y);\n      i3d.translateZ(-camera_z);\n      i3d.rotateY(camera_yaw);\n      i3d.rotateX(camera_pitch);\n      i3d.rotateZ(camera_roll);\n      i3d.matrixMode(VIEW_INV);\n      i3d.transformOne(movevector, kvector);\n\n      i3d.lightdv(LIGHT0, POSITION, light0p);\n      i3d.lightdv(LIGHT0 + 1, POSITION, light1p);\n      i3d.lightdv(LIGHT0 + 2, POSITION, light2p);\n      i3d.lightdv(LIGHT0 + 3, POSITION, light3p);\n\n      // draw ground plane\n      i3d.disable(LIGHTING);\n      // i3d.materialfv(FRONT, DIFFUSE, mtl_floor_d);\n      // i3d.materialfv(FRONT, SPECULAR, mtl_floor_s);\n      // i3d.materialf(FRONT, SHININESS, 1f);\n      i3d.matrixMode(MODEL);\n      i3d.pushMatrix();\n      i3d.loadIdentity();\n      i3d.begin(POLYGON);\n      i3d.normal3d(0, 1, 0);\n      i3d.color3d(0.1, 0.5, 0.1);\n      i3d.vertex3d(-5, -1, -5);\n      i3d.vertex3d(-5, -1, 5);\n      i3d.vertex3d(5, -1, 5);\n      i3d.vertex3d(5, -1, -5);\n      i3d.end();\n      i3d.popMatrix();\n\n      // draw skybox\n      i3d.disable(LIGHTING);\n      i3d.matrixMode(MODEL);\n      i3d.pushMatrix();\n      i3d.loadIdentity();\n      i3d.begin(POLYGON);\n      i3d.normal3d(0, 0, -1);\n      i3d.color3d(0.4, 0.4, 1);\n\n      i3d.vertex3d(100, -100, 100);\n      i3d.vertex3d(-100, -100, 100);\n      i3d.vertex3d(-100, 100, 100);\n      i3d.vertex3d(100, 100, 100);\n\n      i3d.end();\n\n      i3d.popMatrix();\n      // end skybox\n\n      i3d.enable(LIGHTING);\n      // i3d.disable(LIGHTING);\n      i3d.materialfv(FRONT_AND_BACK, DIFFUSE, trilist.get(0).diffuse);\n      i3d.materialfv(FRONT_AND_BACK, SPECULAR, trilist.get(0).specular);\n      i3d.materialf(FRONT_AND_BACK, SHININESS, 10f);\n\n      i3d.vertexData(vbuf);\n      i3d.normalData(nbuf);\n      i3d.drawPolygons(pbuf, 0, pbuf.count());\n\n      i3d.finish();\n\n      i3d.extractBuffer(FRAME_BUFFER_BIT, bi);\n      rwin.display(bi);\n\n      // i3d.extractBuffer(STENCIL_BUFFER_BIT, bi2);\n      // rwin2.display(bi2);\n\n      if (rwin.pollKey(KeyEvent.VK_1)) {\n        i3d.shadeModel(SHADEMODEL_FLAT);\n      }\n      if (rwin.pollKey(KeyEvent.VK_2)) {\n        i3d.shadeModel(SHADEMODEL_GOURARD);\n      }\n      if (rwin.pollKey(KeyEvent.VK_3)) {\n        i3d.shadeModel(SHADEMODEL_PHONG);\n      }\n\n      if (rwin.pollKey(KeyEvent.VK_F5)) {\n        rwin.setCursorVisible(!rwin.isCursorVisible());\n      }\n      if (rwin.pollKey(KeyEvent.VK_F6)) {\n        rwin.setMouseCapture(!rwin.isMouseCaptured());\n      }\n      if (rwin.pollKey(KeyEvent.VK_F11)) {\n        rwin.setFullscreen(!rwin.isFullscreen());\n      }\n\n      if (rwin.getKey(KeyEvent.VK_W)) {\n        camera_x += movevector[0][0] * 0.05;\n        camera_z += movevector[2][0] * 0.05;\n      }\n      if (rwin.getKey(KeyEvent.VK_S)) {\n        camera_x -= movevector[0][0] * 0.05;\n        camera_z -= movevector[2][0] * 0.05;\n      }\n      if (rwin.getKey(KeyEvent.VK_A)) {\n        camera_x += movevector[2][0] * 0.05;\n        camera_z -= movevector[0][0] * 0.05;\n      }\n      if (rwin.getKey(KeyEvent.VK_D)) {\n        camera_x -= movevector[2][0] * 0.05;\n        camera_z += movevector[0][0] * 0.05;\n      }\n\n      int mx = rwin.pollMouseTravelX(100);\n      int my = rwin.pollMouseTravelY(100);\n      if (rwin.getKey(KeyEvent.VK_SHIFT)) {\n        camera_roll =\n            Util.clamp(camera_roll + Math.PI / -2d * mx / 1000d, -Math.PI / 4, Math.PI / 4);\n        camera_pitch =\n            Util.clamp(camera_pitch + Math.PI / 2d * my / 500d, -Math.PI / 2, Math.PI / 2);\n      } else {\n        camera_yaw = camera_yaw + Math.PI / 2d * mx / 500d;\n        camera_pitch =\n            Util.clamp(camera_pitch + Math.PI / -2d * my / 500d, -Math.PI / 2, Math.PI / 2);\n      }\n\n      // Util.pause(100);\n      // break;\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7006, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [187], "initializationEnd": [209], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 808, "focalAPIEnd": 820, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.next()", "scanner.nextDouble()", "scanner.next()", "scanner.nextDouble()", "scanner.next()", "scanner.next()", "scanner.nextDouble()", "scanner.next()", "scanner.next()", "scanner.nextDouble()", "scanner.next()", "scanner.next()", "scanner.close()"], "useStart": [937, 1054, 1228, 1345, 1519, 1769, 1993, 2178, 2490, 2714, 2898, 3326, 3456], "useEnd": [946, 1069, 1237, 1360, 1528, 1778, 2008, 2187, 2499, 2729, 2907, 3335, 3466], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Kefas/Programy/tree/master/java/lab7/cw5/src/myPkg/Kadry.java", "rawCode": "  public static void main(String[] args) {\n    // TODO Auto-generated method stub\n    String pesel;\n    Kadry test = new Kadry();\n    // test.connect();\n\n    double wyn;\n    Scanner in = new Scanner(System.in);\n    int x;\n\n    do {\n      System.out.println(\"1. Dodaj studenta\");\n      System.out.println(\"2. Dodaj pracownika\");\n      System.out.println(\"3. Szukaj pracownika\");\n      System.out.println(\"4. Zmieñ wynagrodzenie brutto\");\n      System.out.println(\"5. Pobierz wynagrodzenie brutto\");\n      System.out.println(\"6. Zmieñ wynagrodzenie netto\");\n      System.out.println(\"7. Pobierz wynagrodzenie netto\");\n      System.out.println(\"8. Wyœwietl pracowników\");\n      System.out.println(\"9. Posortuj\");\n      System.out.println(\"10. Usuñ pracownika\");\n      System.out.println(\"0. WyjdŸ\");\n\n      x = in.nextInt();\n      switch (x) {\n        case 1:\n          do {\n            System.out.print(\"Podaj pesel\");\n            pesel = in.next();\n          } while (!Pesel.fun(pesel));\n          System.out.print(\"Podaj wynagrodzenie\");\n          wyn = in.nextDouble();\n          test.dodajStudenta(pesel, wyn);\n\n          break;\n\n        case 2:\n          do {\n            System.out.print(\"Podaj pesel\");\n            pesel = in.next();\n          } while (!Pesel.fun(pesel));\n          System.out.print(\"Podaj wynagrodzenie\");\n          wyn = in.nextDouble();\n          test.dodajEtatowego(pesel, wyn);\n          break;\n\n        case 3:\n          do {\n            System.out.print(\"Podaj pesel\");\n            pesel = in.next();\n          } while (!Pesel.fun(pesel));\n          if (!test.szukaj(pesel)) System.out.println(\"Nie ma takiego pracownika!!\");\n          break;\n\n        case 4:\n          do {\n            System.out.print(\"Podaj pesel\");\n            pesel = in.next();\n          } while (!Pesel.fun(pesel));\n          if (!test.szukaj(pesel)) System.out.println(\"Nie ma takiego pracownika!!\");\n          else {\n            System.out.print(\"Podaj wynagrodzenie\");\n            wyn = in.nextDouble();\n            test.zmienBrutto(pesel, wyn);\n          }\n          break;\n\n        case 5:\n          do {\n            System.out.print(\"Podaj pesel\");\n            pesel = in.next();\n          } while (!Pesel.fun(pesel));\n          if (!test.szukaj(pesel)) System.out.println(\"Nie ma takiego pracownika!!\");\n          else System.out.println(test.pobierzBrutto(pesel));\n          break;\n\n        case 6:\n          do {\n            System.out.print(\"Podaj pesel\");\n            pesel = in.next();\n          } while (!Pesel.fun(pesel));\n          if (!test.szukaj(pesel)) System.out.println(\"Nie ma takiego pracownika!!\");\n          else {\n            System.out.print(\"Podaj wynagrodzenie\");\n            wyn = in.nextDouble();\n            test.zmienNetto(pesel, wyn);\n          }\n          break;\n\n        case 7:\n          do {\n            System.out.print(\"Podaj pesel\");\n            pesel = in.next();\n          } while (!Pesel.fun(pesel));\n          if (!test.szukaj(pesel)) System.out.println(\"Nie ma takiego pracownika!!\");\n          else System.out.println(test.pobierzNetto(pesel));\n          break;\n        case 8:\n          test.listAll();\n          break;\n        case 9:\n          test.sortuj();\n          break;\n        case 10:\n          do {\n            System.out.print(\"Podaj pesel\");\n            pesel = in.next();\n          } while (!Pesel.fun(pesel));\n          test.usun(pesel);\n          break;\n      }\n    } while (x != 0);\n\n    in.close();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7007, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [60], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 98, "focalAPIEnd": 110, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new PrimeGenerator(value)"], "useStart": [146], "useEnd": [169], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bcapps/ap-computer-science/tree/master/labs/lab3/PrimeTester.java", "rawCode": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int num = in.nextInt();\n    PrimeGenerator mattBischoff = new PrimeGenerator(num);\n    while (!mattBischoff.isDone()) {\n      System.out.println(mattBischoff.nextPrime());\n    }\n  } // end main\n"}, {"dataset": "scannerNextInt", "exampleID": 7008, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [255], "initializationEnd": [277], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 514, "focalAPIEnd": 533, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/humanshell/bmcc-classwork/tree/master/csc110/BB_Assignments/AreaRectangle.java", "rawCode": "  /**\n   * getLength() method this method asks the user for the length of a rectangle and returns that\n   * length as a double\n   */\n  public static double getLength() {\n    System.out.print(\"Enter the length of the rectangle: \");\n    Scanner userInput = new Scanner(System.in);\n\n    // check to make sure the user entered a number\n    if (!userInput.hasNextInt()) {\n      System.out.println(\"You did not enter a number!\");\n      System.exit(1);\n    }\n\n    // store the number entered by the user\n    double ret = userInput.nextInt();\n\n    // return the number\n    return ret;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7009, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [57], "initializationEnd": [79], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["scanner.useDelimiter(String)", "scanner.useDelimiter(Pattern)"], "configurationStart": [85, 238], "configurationEnd": [143, 270], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 327, "focalAPIEnd": 344, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "scanner.nextInt()"], "useStart": [405, 481], "useEnd": [422, 498], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wjlei/codebox/tree/master/codebox/careercup/GlassPyramid.java", "rawCode": "  public static void readInput() {\n    Scanner scanner = new Scanner(System.in);\n    scanner.useDelimiter(System.getProperty(\"line.separator\"));\n    Pattern delimiters = Pattern.compile(System.getProperty(\"line.separator\") + \"|\\\\s\");\n    scanner.useDelimiter(delimiters);\n\n    System.out.println(\"Input row#:\");\n    ipRowNum = scanner.nextInt();\n\n    System.out.println(\"Input glass#:\");\n    ipGlassNum = scanner.nextInt();\n\n    System.out.println(\"Input volume:\");\n    ipVolume = scanner.nextInt();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7010, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [112], "initializationEnd": [132], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 187, "focalAPIEnd": 199, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["start(value,String,String,String,String,*)"], "useStart": [521], "useEnd": [716], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/daklaus/DistSys/tree/master/dslab3/src/at/ac/tuwien/dslab3/presentation/auctionServer/AuctionServer.java", "rawCode": "  private static void initialize(String[] args) {\n    Scanner sc;\n\n    if (args.length != 5) usage();\n\n    sc = new Scanner(args[0]);\n    if (!sc.hasNextInt()) usage();\n    int tcpPort = sc.nextInt();\n    String analyticsServerRef = args[1];\n    String billingServerRef = args[2];\n    String serverPrivateKeyFileLocation = args[3];\n    String clientsKeysDirectory = args[4];\n\n    ass = AuctionServerServiceFactory.getAuctionServerService();\n    ass.setExceptionHandler(new ServerExceptionHandlerImpl());\n\n    try {\n      ass.start(\n          tcpPort,\n          analyticsServerRef,\n          billingServerRef,\n          clientsKeysDirectory,\n          serverPrivateKeyFileLocation,\n          new PasswordFinderImpl());\n    } catch (IOException e) {\n      error(\"Error while connecting:\", e);\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7011, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "println(String)"], "tryExpressionStart": 113, "tryExpressionEnd": 117, "tryBlockStart": 113, "tryBlockEnd": 791, "catchExpressionStart": 708, "catchExpressionEnd": 728, "catchBlockStart": 708, "catchBlockEnd": 791, "exceptionHandlingCallStart": [769, 736], "exceptionHandlingCallEnd": [783, 784], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 457, "focalAPIEnd": 489, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TeamManager.getById(value)", "removePoints(value)", "TeamManager.deleteFromTeamAndMatch(value)"], "useStart": [510, 565, 591], "useEnd": [529, 581, 625], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Chrisbh/MyChamp/tree/master/MyChamp/src/UI/TeamMenu.java", "rawCode": "  private void deleteTeam() {\n    clear();\n    System.out.println(\"Delete Team:\");\n    System.out.println();\n    try {\n      int matchCount = matchmgr.showCount();\n      int teamCount = teammgr.showCount();\n      int maxMatchID = matchmgr.maxMatchId();\n\n      ArrayList<Team> teams = teammgr.listAll();\n\n      printShowHeader();\n      for (Team t : teams) {\n        System.out.println(t);\n      }\n\n      System.out.print(\"Select Team id: \");\n      int id = new Scanner(System.in).nextInt();\n\n      Team team = teammgr.getById(id);\n      if (team != null) {\n        removePoints(id);\n        teammgr.deleteFromTeamAndMatch(id);\n      } else {\n        System.out.println(\"Team does not exist!\");\n      }\n    } catch (Exception e) {\n      System.out.println(\" ERROR - \" + e.getMessage());\n    }\n    pause();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7012, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 560, "focalAPIEnd": 577, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["List<Integer>.add(value)", "debugF(String,value)"], "useStart": [586, 619], "useEnd": [610, 648], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lsampaioweb/PAA_2012_T1/tree/master/PAA_2012_T1/src/utilidade/Utils.java", "rawCode": "  /**\n   * Obtém os valores que correspondem ao A ou ao B(de uma forma generica) = {1,.., n}\n   *\n   * @param quantityOfInputValues A quantidade de números contidos neste arquivo.\n   * @param scanner Objeto que lê do arquivo.\n   * @return Obtém os valores que correspondem ao A ou ao B.\n   */\n  public static List<Integer> getListFromInputFile(Scanner scanner, int quantityOfInputValues) {\n    List<Integer> listTemp = new ArrayList<Integer>(quantityOfInputValues);\n    int inputValue;\n\n    for (int i = 0; i < quantityOfInputValues; i++) {\n      inputValue = scanner.nextInt();\n\n      listTemp.add(inputValue);\n\n      Log.debugF(\"%4d\", inputValue);\n    }\n    Log.debug(\"\");\n\n    return listTemp;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7013, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [56], "initializationEnd": [117], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "scanner.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 123, "guardExpressionEnd": 148, "guardBlockStart": 123, "guardBlockEnd": 242, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 197, "focalAPIEnd": 214, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Position(value)", "scanner.nextInt()", "put(*,value)"], "useStart": [184, 217, 157], "useEnd": [215, 234, 235], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/itZhy/Rich/tree/master/src/main/java/ui/Converter.java", "rawCode": "  private void readConfigFile() {\n    Scanner scanner = new Scanner(getClass().getResourceAsStream(CONFIG_FILE_PATH));\n    while (scanner.hasNext()) {\n      positionToSurfaceIndex.put(new Position(scanner.nextInt()), scanner.nextInt());\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7014, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [58], "initializationEnd": [80], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 112, "focalAPIEnd": 125, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()"], "useStart": [281, 306, 331], "useEnd": [294, 319, 344], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cielavenir/procon/tree/master/tyama_icpc2012dA.java", "rawCode": "  public static void main(String[] z) {\n    Scanner cin = new Scanner(System.in);\n    int y, m, d;\n    for (y = cin.nextInt();\n        cin.hasNext();\n        System.out.println(\n            196471 - (--y) * 195 - y / 3 * 5 - (--m) * 20 + (y % 3 != 2 ? m / 2 : 0) - d)) {\n      y = cin.nextInt();\n      m = cin.nextInt();\n      d = cin.nextInt();\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7015, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [84], "initializationEnd": [106], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 170, "focalAPIEnd": 185, "followUpCheck": "value > num2", "checkType": "IF", "followUpCheckExpressionStart": 220, "followUpCheckExpressionEnd": 236, "followUpCheckBlockStart": 220, "followUpCheckBlockEnd": 341, "use": ["scanner.nextInt()"], "useStart": [198], "useEnd": [213], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jucimarjr/jaraki/tree/master/java_src/decisao/Decisao1.java", "rawCode": "  public static void main(String[] args) {\n    int num1, num2;\n\n    Scanner input = new Scanner(System.in);\n\n    System.out.println(\"Entre com dois numeros\");\n    num1 = input.nextInt();\n    num2 = input.nextInt();\n\n    if (num1 > num2) System.out.println(\"O maior numero é \" + num1);\n    else System.out.println(\"O maior numero é \" + num2);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7016, "initialization": ["Scanner scanner = new Scanner(String)", "Scanner scanner = new Scanner(String)", "Scanner scanner = new Scanner(String)", "Scanner scanner = new Scanner(String)", "Scanner scanner = new Scanner(String)", "Scanner scanner = new Scanner(*)", "Scanner scanner = new Scanner(String)"], "initializationStart": [50, 563, 1088, 1181, 1273, 2181, 2422], "initializationEnd": [69, 578, 1110, 1204, 1302, 2218, 2456], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["scanner.findInLine(String)", "scanner.close()", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)"], "configurationStart": [87, 233, 260, 417, 601, 787, 1125, 1219, 1317, 1505, 1811, 2233, 2471], "configurationEnd": [114, 242, 287, 437, 618, 804, 1146, 1238, 1344, 1534, 1838, 2260, 2491], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 2656, "focalAPIEnd": 2667, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(int,value)", "scanner.next()", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)", "scanner.findInLine(String)"], "useStart": [2673, 2826, 2996, 3220, 3287, 3390, 3457, 3565, 3632], "useEnd": [2699, 2834, 3016, 3239, 3306, 3409, 3476, 3584, 3651], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wsot/platform_libcore/tree/master/luni/src/test/java/libcore/java/util/OldScannerTest.java", "rawCode": "  public void test_findInLine_LString() {\n    s = new Scanner(\"test\");\n    try {\n      s.findInLine((String) null);\n      fail(\"Should throw NullPointerException\");\n    } catch (NullPointerException e) {\n      // expected\n    }\n\n    s.close();\n    try {\n      s.findInLine((String) null);\n      fail(\"Should throw NullPointerException\");\n    } catch (NullPointerException e) {\n      // expected\n    }\n    try {\n      s.findInLine(\"test\");\n      fail(\"Should throw IllegalStateException\");\n    } catch (IllegalStateException e) {\n      // exptected\n    }\n\n    s = new Scanner(\"\");\n\n    String result = s.findInLine(\"^\");\n    assertEquals(\"\", result);\n    MatchResult matchResult = s.match();\n    assertEquals(0, matchResult.start());\n    assertEquals(0, matchResult.end());\n\n    result = s.findInLine(\"$\");\n    assertEquals(\"\", result);\n    matchResult = s.match();\n    assertEquals(0, matchResult.start());\n    assertEquals(0, matchResult.end());\n\n    /*\n     * When we use the operation of findInLine(Pattern), the match region\n     * should not span the line separator.\n     */\n    s = new Scanner(\"aa\\nb.b\");\n    result = s.findInLine(\"a\\nb*\");\n    assertNull(result);\n\n    s = new Scanner(\"aa\\nbb.b\");\n    result = s.findInLine(\"\\\\.\");\n    assertNull(result);\n\n    s = new Scanner(\"abcd1234test\\n\");\n    result = s.findInLine(\"\\\\p{Lower}+\");\n    assertEquals(\"abcd\", result);\n    matchResult = s.match();\n    assertEquals(0, matchResult.start());\n    assertEquals(4, matchResult.end());\n\n    result = s.findInLine(\"\\\\p{Digit}{5}\");\n    assertNull(result);\n    try {\n      matchResult = s.match();\n      fail(\"Should throw IllegalStateException\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    assertEquals(0, matchResult.start());\n    assertEquals(4, matchResult.end());\n\n    result = s.findInLine(\"\\\\p{Lower}+\");\n    assertEquals(\"test\", result);\n    matchResult = s.match();\n    assertEquals(8, matchResult.start());\n    assertEquals(12, matchResult.end());\n\n    char[] chars = new char[2048];\n    Arrays.fill(chars, 'a');\n    StringBuilder stringBuilder = new StringBuilder();\n    stringBuilder.append(chars);\n    stringBuilder.append(\"1234\");\n    s = new Scanner(stringBuilder.toString());\n    result = s.findInLine(\"\\\\p{Digit}+\");\n    assertEquals(\"1234\", result);\n    matchResult = s.match();\n    assertEquals(2048, matchResult.start());\n    assertEquals(2052, matchResult.end());\n\n    s = new Scanner(\"test1234\\n1234 test\");\n    result = s.findInLine(\"test\");\n    assertEquals(\"test\", result);\n    matchResult = s.match();\n    assertEquals(0, matchResult.start());\n    assertEquals(4, matchResult.end());\n\n    int number = s.nextInt();\n    assertEquals(1234, number);\n    matchResult = s.match();\n    assertEquals(4, matchResult.start());\n    assertEquals(8, matchResult.end());\n\n    result = s.next();\n    assertEquals(\"1234\", result);\n    matchResult = s.match();\n    assertEquals(9, matchResult.start());\n    assertEquals(13, matchResult.end());\n\n    result = s.findInLine(\"test\");\n    assertEquals(\"test\", result);\n    matchResult = s.match();\n    assertEquals(14, matchResult.start());\n    assertEquals(18, matchResult.end());\n\n    s = new Scanner(\"test\\u0085\\ntest\");\n    result = s.findInLine(\"est\");\n    assertEquals(\"est\", result);\n    result = s.findInLine(\"est\");\n    assertEquals(\"est\", result);\n\n    s = new Scanner(\"test\\ntest\");\n    result = s.findInLine(\"est\");\n    assertEquals(\"est\", result);\n    result = s.findInLine(\"est\");\n    assertEquals(\"est\", result);\n\n    s = new Scanner(\"test\\n123\\ntest\");\n    result = s.findInLine(\"est\");\n    assertEquals(\"est\", result);\n    result = s.findInLine(\"est\");\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7017, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [91], "initializationEnd": [113], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 180, "focalAPIEnd": 195, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()"], "useStart": [261], "useEnd": [276], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jucimarjr/jaraki/tree/master/java_src/sequencia/Sequencia3.java", "rawCode": "  public static void main(String[] args) {\n\n    int num1, num2, soma;\n\n    Scanner input = new Scanner(System.in);\n\n    System.out.println(\"Informe o primeiro numero\");\n    num1 = input.nextInt();\n\n    System.out.println(\"Informe o segundo numero\");\n    num2 = input.nextInt();\n\n    soma = num1 + num2;\n    System.out.println(\"A soma é: \" + soma);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7018, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 255, "focalAPIEnd": 267, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wox2/migrace_databaze/tree/master/skola/Fel_bc/1.semestr/Algoritmizace/PrikladyPrednasky2007/Alg6/src/alg6/Matice.java", "rawCode": "  static int[][] ctiMatici(int r, int s) {\n    Scanner sc = new Scanner(System.in);\n    int[][] m = new int[r][s];\n    System.out.println(\"zadejte celoèíslenou matici \" + r + \"x\" + s);\n    for (int i = 0; i < r; i++) for (int j = 0; j < s; j++) m[i][j] = sc.nextInt();\n    return m;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7019, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 250, "focalAPIEnd": 262, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DT-Zilo/JAVA/tree/master/src/b5310450327/Inventory.java", "rawCode": "  public void enter(int x) {\n    System.out.print(\"Code of Product\" + i + \" : \");\n    codeProduct[x] = sc.next();\n    System.out.print(\"Name \" + i + \" : \");\n    name[x] = sc.next();\n    System.out.print(\"Number of Product\" + i + \" : \");\n    num[x] = sc.nextInt();\n    System.out.println(\"Do you change Number of Product?\");\n    System.out.println(\"1. Yes\");\n    System.out.println(\"2. No\");\n    System.out.println(\"Answer\");\n    check = sc.nextInt();\n\n    if (check == 1) {\n      this.addProduct(x);\n    }\n\n    i++;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7020, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [86], "initializationEnd": [108], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 122, "focalAPIEnd": 139, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 238, "followUpCheckExpressionEnd": 265, "followUpCheckBlockStart": 238, "followUpCheckBlockEnd": 344, "use": ["scanner.nextInt()", "scanner.close()"], "useStart": [155, 350], "useEnd": [172, 365], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sonhuytran/Code.Forces.Problem.Set/tree/master/src/p225/P225A_DiceTower.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    int top = scanner.nextInt();\n    int[] left = new int[n];\n    int[] right = new int[n];\n\n    for (int i = 0; i < n; i++) {\n      left[i] = scanner.nextInt();\n      right[i] = scanner.nextInt();\n    }\n\n    scanner.close();\n\n    // check the first dice\n    int bottom = 7 - top;\n\n    if (bottom == left[0] || bottom == right[0] || top == left[0] || top == right[0]) {\n      System.out.println(\"NO\");\n      return;\n    }\n\n    for (int i = 1; i < n; i++) {\n      int newTop = 21 - left[i] - right[i] - (7 - left[i]) - (7 - right[i]) - bottom;\n      int newBottom = 7 - newTop;\n\n      if (newBottom == left[i]\n          || newBottom == right[i]\n          || newTop == left[i]\n          || newTop == right[i]\n          || newTop == bottom) {\n        System.out.println(\"NO\");\n        return;\n      }\n\n      top = newTop;\n      bottom = newBottom;\n    }\n\n    System.out.println(\"YES\");\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7021, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["scanner.next()", "scanner.next()"], "configurationStart": [65, 101], "configurationEnd": [76, 112], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 129, "focalAPIEnd": 143, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextLine()", "new ITypeInstruction(String,int,int,value,int)"], "useStart": [149, 267], "useEnd": [164, 318], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/baronfel/Emulator/tree/master/src/utility/InstructionParser.java", "rawCode": "  private static void ADDIUInstruction() {\n    int rd = getValue(file.next());\n    int rs = getValue(file.next());\n    int imm = file.nextInt();\n    file.nextLine();\n    String opc = \"ADDIU\";\n    // if(imm < 0)\n    // invalid instruction\n    ilist.add((IInstruction) new ITypeInstruction(opc, rd, rs, imm, lineCounter));\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7022, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [59], "initializationEnd": [81], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 116, "focalAPIEnd": 127, "followUpCheck": "value == 0", "checkType": "IF", "followUpCheckExpressionStart": 135, "followUpCheckExpressionEnd": 146, "followUpCheckBlockStart": 135, "followUpCheckBlockEnd": 153, "use": ["sort(Rect[],int,value)"], "useStart": [366], "useEnd": [388], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/blmarket/lib4bpp/tree/master/contest/stanford-2009/judge/Rectangles.java", "rawCode": "  public static void main(String[] args) {\n    Scanner s = new Scanner(System.in);\n    while (true) {\n      int n = s.nextInt();\n      if (n == 0) break;\n      for (int i = 0; i < n; i++) {\n        arr[i] = new Rect();\n        arr[i].x1 = s.nextInt();\n        arr[i].y1 = s.nextInt();\n        arr[i].x2 = s.nextInt();\n        arr[i].y2 = s.nextInt();\n      }\n\n      Arrays.sort(arr, 0, n);\n\n      for (int i = 0; i < n; i++) {\n        len[i] = 1;\n        for (int j = 0; j < i; j++) {\n          if (arr[j].x2 < arr[i].x1 && arr[j].y2 < arr[i].y1) {\n            len[i] = Math.max(len[i], len[j] + 1);\n          }\n        }\n      }\n\n      int best = 0;\n      for (int i = 0; i < n; i++) best = Math.max(best, len[i]);\n      System.out.println(best);\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7023, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 88, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OKullmann/CS-M41-Programming-in-Java/tree/master/Chapter3/Libraries/In.java", "rawCode": "  /** Return the next int from the input stream. */\n  public int readInt() {\n    return scanner.nextInt();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7024, "initialization": ["Scanner scanner = new Scanner()"], "initializationStart": [210], "initializationEnd": [223], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 254, "focalAPIEnd": 267, "followUpCheck": "value + b + c == 0", "checkType": "IF", "followUpCheckExpressionStart": 326, "followUpCheckExpressionEnd": 345, "followUpCheckBlockStart": 326, "followUpCheckBlockEnd": 352, "use": ["scanner.nextInt()", "scanner.nextInt()", "valueOf(value)"], "useStart": [279, 304, 372], "useEnd": [292, 317, 389], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pin3da/Programming-contest/tree/master/solved/UVa/11660-Look-and-Saysequences/Main.java", "rawCode": "  /**\n   * Look and say sequences\n   * http://uva.onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=2707\n   */\n  public static void main(String[] args) {\n    int a, b, c;\n    Scanner cin = new Scanner();\n    while (true) {\n      a = cin.nextInt();\n      b = cin.nextInt();\n      c = cin.nextInt();\n\n      if (a + b + c == 0) break;\n      char[] num = String.valueOf(a).toCharArray();\n      for (int i = 0; i < b - 1; i++) {\n        StringBuilder sb = new StringBuilder();\n        int veces = 1;\n        char ant = '$';\n        for (int k = 0; k < Math.min(num.length, 1000); ++k) {\n          char d = num[k];\n          if (d == ant) veces++;\n          else if (ant != '$') {\n            sb.append(veces);\n            sb.append(ant);\n            veces = 1;\n          }\n          ant = d;\n        }\n        if (veces > 0) {\n          sb.append(veces);\n          sb.append(num[num.length - 1]);\n        }\n        num = sb.toString().toCharArray();\n      }\n      System.out.println(num[c - 1]);\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7025, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [768], "initializationEnd": [825], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["scanner.useDelimiter(String)", "scanner.next()", "scanner.next()", "scanner.next()", "scanner.next()"], "configurationStart": [833, 941, 967, 992, 1018], "configurationEnd": [858, 949, 975, 1000, 1026], "guardCondition": "scanner.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 904, "guardExpressionEnd": 923, "guardBlockStart": 904, "guardBlockEnd": 1646, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 1047, "focalAPIEnd": 1058, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 1448, "followUpCheckExpressionEnd": 1482, "followUpCheckBlockStart": 1448, "followUpCheckBlockEnd": 1557, "use": ["scanner.next()", "new Book(String,String,String,*,value)", "new MusicAlbum(String,String,String,*,value,*)", "scanner.nextInt()", "scanner.next()", "scanner.nextLine()", "scanner.close()"], "useStart": [1077, 1156, 1304, 1425, 1505, 1625, 1684], "useEnd": [1085, 1218, 1378, 1436, 1513, 1637, 1693], "hasFinally": 1, "cleanUpCall": ["Scanner.close()"], "finallyExpressionStart": 1653, "finallyExpressionEnd": 1661, "finallyBlockStart": 1653, "finallyBlockEnd": 1700, "cleanUpCallStart": [1684], "cleanUpCallEnd": [1693], "url": "https://github.com/Tumas/labs/tree/master/III_semester/oop_2/estore/input/plain/FileDataReader.java", "rawCode": "  /**\n   * Fill given Stock with items from the file\n   *\n   * @param stock Stock to fill with items\n   * @param fileName Filename or path to data file\n   * @param delimiter delimiter to use when scanning data file. (Data Fields in the data file should\n   *     be seprated by specified delimiter)\n   *     <p>Expected file format: Title description price quantity (one item per line!)\n   * @return ArrayList of items read/indexed\n   */\n  public static ArrayList<Item> readStockItems(String fileName, String delimiter)\n      throws FileNotFoundException {\n    String title = \"\";\n    String desc = \"\";\n    String price = \"\";\n    String type = \"\";\n    String author = \"\";\n\n    int quantity = 0;\n    ArrayList<Item> itemList = new ArrayList<Item>();\n\n    try {\n      s = new Scanner(new BufferedReader(new FileReader(fileName)));\n      s.useDelimiter(delimiter);\n      /* File reading happens here */\n      while (s.hasNext()) {\n        type = s.next();\n        title = s.next();\n        desc = s.next();\n        price = s.next();\n        quantity = s.nextInt();\n        author = s.next();\n\n        if (type.equalsIgnoreCase(\"Book\")) {\n          itemList.add(new Book(title, author, desc, new BigDecimal(price), quantity));\n        } else if (type.equalsIgnoreCase(\"MusicAlbum\")) {\n          MusicAlbum m = new MusicAlbum(title, author, desc, new BigDecimal(price), quantity, null);\n          String track;\n          quantity = s.nextInt();\n          for (int i = 0; i < quantity; i++) {\n            track = s.next();\n            m.addTrack(track);\n          }\n          itemList.add(m);\n        }\n        /* Skip LF */\n        s.nextLine();\n      }\n    } finally {\n      if (s != null) s.close();\n    }\n    return itemList;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7026, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [436], "initializationEnd": [496], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["scanner.useDelimiter(String)"], "configurationStart": [502], "configurationEnd": [540], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 561, "focalAPIEnd": 586, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.next()", "scanner.close()", "printf(String,int,int,*,int,value,*,int,int,*,int,int,*,int,int,*)"], "useStart": [607, 653, 699, 744, 1024, 1071, 1121, 1335, 3054], "useEnd": [632, 678, 724, 769, 1049, 1096, 1143, 1358, 3432], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zenjiro/gdd11jp/tree/master/com/wordpress/zenjiro/slidingpuzzle/Check.java", "rawCode": "  /**\n   * メインメソッド\n   *\n   * @param args コマンドラン引数\n   * @throws FileNotFoundException ファイル未検出例外\n   */\n  public static void main(final String[] args) throws FileNotFoundException {\n    final String inputFile = \"merged.txt\";\n    final String outputFile = \"checked.txt\";\n    final int pathLimit = 215000;\n    final List<Board> problems = new ArrayList<Board>();\n    final int[][] counts = new int[7][7];\n    final Scanner problemsScanner = new Scanner(Check.class.getResourceAsStream(\"problems.txt\"));\n    problemsScanner.useDelimiter(\"[\\\\s,]\");\n    final int lx = problemsScanner.nextInt();\n    final int rx = problemsScanner.nextInt();\n    final int ux = problemsScanner.nextInt();\n    final int dx = problemsScanner.nextInt();\n    final int n = problemsScanner.nextInt();\n    Logger.getLogger(Check.class.getName())\n        .log(\n            Level.INFO,\n            \"lx = {0}, rx = {1}, ux = {2}, dx = {3}, n = {4}\",\n            new Integer[] {lx, rx, ux, dx, n});\n    while (problemsScanner.hasNext()) {\n      final int w = problemsScanner.nextInt();\n      final int h = problemsScanner.nextInt();\n      final String b = problemsScanner.next();\n      final Board board = new Board(w, h, b);\n      Logger.getLogger(Check.class.getName()).log(Level.INFO, \"board = {0}\", board);\n      problems.add(board);\n      counts[h][w]++;\n    }\n    problemsScanner.close();\n    int ok = 0;\n    int failed = 0;\n    int skipped = 0;\n    int cut = 0;\n    int l = 0;\n    int r = 0;\n    int u = 0;\n    int d = 0;\n    final int[][] oks = new int[7][7];\n    {\n      final PrintWriter out =\n          new PrintWriter(\n              SlidingPuzzle.class.getPackage().getName().replace(\".\", \"/\") + \"/\" + outputFile);\n      int i = 0;\n      final Scanner resultsScanner = new Scanner(Check.class.getResourceAsStream(inputFile));\n      while (resultsScanner.hasNextLine()) {\n        final String path = resultsScanner.nextLine();\n        if (path.isEmpty()) {\n          out.println();\n          skipped++;\n        } else if (path.length() > pathLimit) {\n          out.println();\n          cut++;\n        } else {\n          Logger.getLogger(Check.class.getName()).log(Level.INFO, \"path = {0}\", path);\n          if (Util.isOk(path, problems.get(i).w, problems.get(i).h, problems.get(i).b)) {\n            out.println(path);\n            ok++;\n            oks[problems.get(i).h][problems.get(i).w]++;\n            l += path.replaceAll(\"[^L]+\", \"\").length();\n            r += path.replaceAll(\"[^R]+\", \"\").length();\n            u += path.replaceAll(\"[^U]+\", \"\").length();\n            d += path.replaceAll(\"[^D]+\", \"\").length();\n          } else {\n            out.println();\n            failed++;\n          }\n        }\n        i++;\n      }\n      resultsScanner.close();\n      out.close();\n    }\n    System.out.printf(\n        \"ok : failed : skipped : cut = %d : %d : %d : %d = %.1f%% : %.1f%% : %.1f%% : %.1f%%\\n\",\n        ok,\n        failed,\n        skipped,\n        cut,\n        ok / 5000.0 * 100,\n        failed / 5000.0 * 100,\n        skipped / 5000.0 * 100,\n        cut / 5000.0);\n    System.out.printf(\n        \"解答：%d/%d（%.1f%%）L：%d/%d（%.1f%%）R：%d/%d（%.1f%%）U：%d/%d（%.1f%%）D：%d/%d（%.1f%%）\\n\",\n        ok,\n        n,\n        (double) ok / n * 100,\n        l,\n        lx,\n        (double) l / lx * 100,\n        r,\n        rx,\n        (double) r / rx * 100,\n        u,\n        ux,\n        (double) u / ux * 100,\n        d,\n        dx,\n        (double) d / dx * 100);\n    System.out.println(\"h, w\\t3\\t\\t4\\t\\t5\\t\\t6\");\n    for (int i = 3; i < 7; i++) {\n      System.out.print(i);\n      for (int j = 3; j < 7; j++) {\n        System.out.printf(\"\\t%d/%d\", oks[i][j], counts[i][j]);\n      }\n      System.out.println();\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7027, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [65], "initializationEnd": [87], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 165, "focalAPIEnd": 182, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()"], "useStart": [256], "useEnd": [273], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/algaworks/curso-fundamentos-java-e-orientacao-a-objetos/tree/master/Aulas/Estrutura de controle while/EstruturaWhile.java", "rawCode": "  public static void main(String[] args) {\n    Scanner entrada = new Scanner(System.in);\n\n    System.out.print(\"Digite o numero inicial: \");\n    int numeroInicial = entrada.nextInt();\n\n    System.out.print(\"Digite o numero final: \");\n    int numeroFinal = entrada.nextInt();\n\n    int numeroAtual = numeroInicial;\n\n    while (numeroAtual <= numeroFinal) {\n      System.out.println(numeroAtual);\n      numeroAtual++;\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7028, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [197], "initializationEnd": [329], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 558, "focalAPIEnd": 575, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextDouble()", "scanner.nextDouble()", "scanner.nextDouble()", "scanner.close()"], "useStart": [960, 1336, 1747, 2143], "useEnd": [980, 1356, 1767, 2158], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/daklaus/DistSys/tree/master/dslab3/src/at/ac/tuwien/dslab3/service/loadTest/LoadTestServiceImpl.java", "rawCode": "  private void initialize() throws IOException {\n    Properties loadTestProperties =\n        PropertiesServiceFactory.getPropertiesService().getLoadTestProperties();\n\n    Scanner scanner =\n        new Scanner(\n            loadTestProperties.getProperty(\n                PropertiesService.LOADTEST_PROPERTIES_AUCTIONDURATION_KEY));\n    if (!scanner.hasNextInt()) {\n      throw new IOException(\n          \"Couldn't parse the registry Properties value of \"\n              + PropertiesService.LOADTEST_PROPERTIES_AUCTIONDURATION_KEY);\n    }\n    auctionDuration = scanner.nextInt();\n    scanner =\n        new Scanner(\n            loadTestProperties.getProperty(\n                PropertiesService.LOADTEST_PROPERTIES_AUCTIONSPERMIN_KEY));\n    if (!scanner.hasNextDouble()) {\n      throw new IOException(\n          \"Couldn't parse the registry Properties value of \"\n              + PropertiesService.LOADTEST_PROPERTIES_AUCTIONSPERMIN_KEY);\n    }\n    auctionsPerMin = scanner.nextDouble();\n    scanner =\n        new Scanner(\n            loadTestProperties.getProperty(PropertiesService.LOADTEST_PROPERTIES_BIDSPERMIN_KEY));\n    if (!scanner.hasNextDouble()) {\n      throw new IOException(\n          \"Couldn't parse the registry Properties value of \"\n              + PropertiesService.LOADTEST_PROPERTIES_BIDSPERMIN_KEY);\n    }\n    bidsPerMin = scanner.nextDouble();\n    scanner =\n        new Scanner(\n            loadTestProperties.getProperty(\n                PropertiesService.LOADTEST_PROPERTIES_UPDATEINTERVALSEC_KEY));\n    if (!scanner.hasNextDouble()) {\n      throw new IOException(\n          \"Couldn't parse the registry Properties value of \"\n              + PropertiesService.LOADTEST_PROPERTIES_UPDATEINTERVALSEC_KEY);\n    }\n    updateInterval = scanner.nextDouble();\n    scanner =\n        new Scanner(\n            loadTestProperties.getProperty(PropertiesService.LOADTEST_PROPERTIES_CLIENTS_KEY));\n    if (!scanner.hasNextInt()) {\n      throw new IOException(\n          \"Couldn't parse the registry Properties value of \"\n              + PropertiesService.LOADTEST_PROPERTIES_CLIENTS_KEY);\n    }\n    this.clientCount = scanner.nextInt();\n    scanner.close();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7029, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [65], "initializationEnd": [87], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 139, "focalAPIEnd": 156, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.next()"], "useStart": [306], "useEnd": [320], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/algaworks/curso-fundamentos-java-e-orientacao-a-objetos/tree/master/Aulas/Escopo de variaveis/Escopo.java", "rawCode": "  public static void main(String[] args) {\n    Scanner entrada = new Scanner(System.in);\n\n    System.out.print(\"Idade: \");\n    int idade = entrada.nextInt();\n\n    boolean podeDirigir = idade >= 18;\n    String nomePai = \"\";\n\n    if (!podeDirigir) {\n      System.out.print(\"Nome do pai: \");\n\n      nomePai = entrada.next();\n    }\n\n    System.out.println(\"Voce pode dirigir?\");\n\n    if (podeDirigir) {\n      System.out.println(\"Sim, claro\");\n    } else {\n      System.out.println(\"Nao, se fizer isso, seu pai \" + nomePai + \" vai preso\");\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7030, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [60], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 97, "focalAPIEnd": 109, "followUpCheck": "i <= value", "checkType": "LOOP", "followUpCheckExpressionStart": 234, "followUpCheckExpressionEnd": 262, "followUpCheckBlockStart": 234, "followUpCheckBlockEnd": 308, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ferhatelmas/algo/tree/master/eolimp/page13/q1210/Main.java", "rawCode": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    long n = in.nextInt(), a = in.nextInt(), pow = 1, sum = 0;\n\n    if (a == 1) {\n      System.out.println(n * (n + 1) / 2);\n      return;\n    }\n\n    for (int i = 1; i <= n; i++) {\n      pow *= a;\n      sum += i * pow;\n    }\n    System.out.println(sum);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7031, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 321, "focalAPIEnd": 365, "followUpCheck": "mManager.checkUserNameAndPassword(value,Password) == true", "checkType": "IF", "followUpCheckExpressionStart": 1245, "followUpCheckExpressionEnd": 1311, "followUpCheckBlockStart": 1245, "followUpCheckBlockEnd": 1693, "use": ["setLoggedIn(value)"], "useStart": [1409], "useEnd": [1458], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Chrisbh/Tie-Break/tree/master/Tie-Break/src/GUI/Login.java", "rawCode": "  /** Checks whether the entered username and password matches with a user in the database */\n  public void LoginCheck() {\n    if (txtMemberNr.getText().length() != 0 && txtPassword.getText().length() != 0) {\n      Scanner MemberNrSC = new Scanner(txtMemberNr.getText());\n      checkInt(MemberNrSC);\n      int MemberID = new Scanner(txtMemberNr.getText()).nextInt();\n      String Password = new Scanner(txtPassword.getText()).nextLine();\n\n      if (!MemberNrCancelled) {\n        MemberNrSC = new Scanner(txtMemberNr.getText());\n        int lengthMember = String.valueOf(MemberNrSC.nextInt()).length();\n        while (lengthMember < 1) {\n          String correctedMemberNr =\n              JOptionPane.showInputDialog(null, \"Medlemsnummer skal være tal og minimum ét tal\");\n          if (correctedMemberNr == null) {\n            MemberNrCancelled = true;\n            break;\n          }\n          txtMemberNr.setText(correctedMemberNr);\n\n          MemberNrSC = new Scanner(txtMemberNr.getText());\n          checkInt(MemberNrSC);\n          MemberNrSC = new Scanner(txtMemberNr.getText());\n          lengthMember = String.valueOf(MemberNrSC.nextInt()).length();\n        }\n      } else {\n        MemberNrCancelled = false;\n      }\n      try {\n        if (mManager.checkUserNameAndPassword(MemberID, Password) == true) {\n          MainMenu.getInstance().setVisible(true);\n          this.setVisible(false);\n          MemberManager.getInstance().setLoggedIn(MemberID);\n        } else {\n          JOptionPane.showMessageDialog(\n              null,\n              \"Indtastede medlemdsoplysninger er forkerte, prøv igen!\",\n              \"Advarsel\",\n              JOptionPane.INFORMATION_MESSAGE);\n        }\n      } catch (Exception ex) {\n        System.out.println(\"ERROR\" + ex);\n      }\n    } else {\n      JOptionPane.showMessageDialog(\n          null, \"Alle felter skal udfyldes!\", \"Advarsel\", JOptionPane.INFORMATION_MESSAGE);\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7032, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [60], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 96, "focalAPIEnd": 108, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 140, "followUpCheckExpressionEnd": 167, "followUpCheckBlockStart": 140, "followUpCheckBlockEnd": 202, "use": ["scanner.nextInt()", "scanner.nextInt()"], "useStart": [183, 215], "useEnd": [195, 227], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/watashi/AlgoSolution/tree/master/sgu/ac/2/205.java", "rawCode": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] x = new int[n];\n    for (int i = 0; i < n; ++i) {\n      x[i] = in.nextInt();\n    }\n    int m = in.nextInt();\n    int s = in.nextInt();\n    int mask = m - 1;\n    int[][] l = new int[m][s];\n    for (int i = 0; i < m; ++i) {\n      for (int j = 0; j < s; ++j) {\n        l[i][j] = in.nextInt();\n      }\n    }\n    int[][] dp = new int[n][m];\n    int[][] pd = new int[n][m];\n    for (int[] ar : dp) {\n      Arrays.fill(ar, Integer.MAX_VALUE);\n    }\n    for (int j = 0; j < m; ++j) {\n      int index = binarySearch(l[j], x[n - 1]);\n      dp[n - 1][j] = Math.abs(l[j][index] - x[n - 1]);\n      pd[n - 1][j] = index;\n    }\n    for (int i = n - 2; i >= 0; --i) {\n      for (int j = 0; j < m; ++j) {\n        int p = binarySearch(l[j], x[i]);\n        int f = Math.max(p - (m - 1), 0);\n        int t = Math.min(p + (m - 1), s - 1);\n        for (int k = f; k <= t; ++k) {\n          if (dp[i][j] > dp[i + 1][k & mask] + Math.abs(l[j][k] - x[i])) {\n            dp[i][j] = dp[i + 1][k & mask] + Math.abs(l[j][k] - x[i]);\n            pd[i][j] = k;\n          }\n        }\n      }\n    }\n    System.out.println(dp[0][0]);\n    int q = 0;\n    for (int i = 0; i < n; ++i) {\n      if (i > 0) {\n        System.out.print(' ');\n      }\n      System.out.print(pd[i][q]);\n      q = pd[i][q] & mask;\n    }\n    System.out.println();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7033, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [60], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 96, "focalAPIEnd": 108, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 133, "followUpCheckExpressionEnd": 163, "followUpCheckBlockStart": 133, "followUpCheckBlockEnd": 252, "use": ["scanner.nextLine()", "scanner.nextLine()", "scanner.nextLine()"], "useStart": [114, 221, 236], "useEnd": [127, 234, 249], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ferhatelmas/algo/tree/master/eolimp/page11/q1080/Main.java", "rawCode": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    in.nextLine();\n    for (int i = 0; i < n; )\n      System.out.println(\"Case #\" + (++i) + \": \" + getDistance(in.nextLine(), in.nextLine()));\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7034, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [47], "initializationEnd": [69], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 151, "focalAPIEnd": 168, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jbardelrio/Programacion/tree/master/UT7ClasesAvanzadoo/src/ejerciciosInterfaces2/Menu.java", "rawCode": "  public int mostrar() {\n    Scanner entrada = new Scanner(System.in);\n    int opcion;\n    imprimir();\n\n    System.out.print(\"Opción: \");\n    opcion = entrada.nextInt();\n\n    return opcion;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7035, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 159, "focalAPIEnd": 171, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ferhatelmas/algo/tree/master/eolimp/page23/q2262/Main.java", "rawCode": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    boolean[] b = new boolean[10];\n    for (int i = 0; i < 10; i++) b[i] = in.nextInt() == 1;\n\n    boolean r = false;\n    for (int i = 0; i < 9; i++) for (int j = i + 1; j < 10; j++) r ^= (b[i] || b[j]);\n\n    for (int i = 0; i < 8; i++)\n      for (int j = i + 1; j < 9; j++) for (int k = j + 1; k < 10; k++) r ^= (b[i] || b[j] || b[k]);\n    System.out.println(r ? \"1\" : \"0\");\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7036, "initialization": ["Scanner scanner = new Scanner(*)", "Scanner scanner = new Scanner(*)", "Scanner scanner = new Scanner(*)", "Scanner scanner = new Scanner(*)", "Scanner scanner = new Scanner(*)"], "initializationStart": [308, 898, 1582, 2371, 2872], "initializationEnd": [330, 920, 1604, 2393, 2894], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["scanner.nextLine()", "scanner.nextLine()", "scanner.nextLine()", "scanner.nextLine()", "scanner.nextLine()", "scanner.next()"], "configurationStart": [408, 497, 995, 1679, 2509, 2586], "configurationEnd": [421, 510, 1008, 1692, 2522, 2595], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 3012, "focalAPIEnd": 3024, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.next()", "getAlarm(value)"], "useStart": [3088, 3212], "useEnd": [3097, 3243], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Projektgrupp3/projekt.java/tree/master/projekt.java/src/tddd36/grupp3/server/CommandThread.java", "rawCode": "  /**\n   * Undersöker vad det är för kommando som matats in\n   *\n   * @param input - det angivna kommandot\n   * @throws UnknownHostException\n   * @throws JSONException\n   */\n  public void evalutate(String input) throws UnknownHostException, JSONException {\n    if (input.equals(\"/msg\")) {\n      Scanner in = new Scanner(System.in);\n      System.out.println(\"Message?\");\n      String message;\n      message = in.nextLine();\n\n      System.out.println(\"Till vilket ip?\");\n      String ip;\n      ip = in.nextLine();\n\n      Sender.send(message, ip);\n    }\n\n    if (input.equals(\"/createuser\")) {\n      User u = new User();\n      u.createUser();\n      MySQLDatabase.addUser(u);\n    }\n    if (input.equals(\"/createunit\")) {\n      Unit u = new Unit();\n      MySQLDatabase.addUnit(u);\n    }\n    if (input.equals(\"/createevent\")) {\n      Event a = new Event();\n      a.createTestEvent();\n\n      Scanner in = new Scanner(System.in);\n      System.out.println(\"Till vilket ip?\");\n      String ip;\n      ip = in.nextLine();\n\n      String unitID = MySQLDatabase.getUsersUnit(Association.getUser(ip));\n      a.setUnitID(unitID);\n\n      // MySQLDatabase.addAlarm(a); L�gg in alarm i Databas\n      // Sender.broadcastEvent(a,ip);\n\n      Sender.send(a.getJSON(), ip);\n      Sender.broadcastEvent(a, ip);\n      // Runnable EventTimerRunnable = new EventTimer(CommandThread.this);\n      // Thread t = new Thread(EventTimerRunnable);\n      // t.start();\n\n      MySQLDatabase.setEvent(a);\n    }\n    if (input.equals(\"/sendevent\")) {\n      Event e = new Event();\n      e.createEvent();\n\n      Scanner in = new Scanner(System.in);\n      System.out.println(\"Till vilket ip?\");\n      String ip;\n      ip = in.nextLine();\n\n      String unitID = MySQLDatabase.getUsersUnit(Association.getUser(ip));\n      e.setUnitID(unitID);\n\n      // MySQLDatabase.addAlarm(a); Lägg in alarm i Databas\n      Sender.send(e.getJSON(), ip);\n      Sender.broadcastEvent(e, ip);\n\n      // Runnable EventTimerRunnable = new EventTimer(CommandThread.this);\n      // Thread t = new Thread(EventTimerRunnable);\n      // t.start();\n      MySQLDatabase.setEvent(e);\n    }\n    if (input.equals(\"/print\")) {\n      System.out.println(MySQLDatabase.printAllUsers());\n      System.out.println(MySQLDatabase.printAllUnits());\n      // MySQLDatabase.printAllAlarms();\n    }\n    if (input.equals(\"/mapuserunit\")) {\n      Scanner in = new Scanner(System.in);\n      String name;\n      String unitId;\n\n      do {\n        System.out.println(\"username to map\");\n        name = in.nextLine();\n        System.out.println(\"unitId to map\");\n        unitId = in.next();\n      } while (!(MySQLDatabase.checkUser(name)) && !(MySQLDatabase.checkUnit(unitId)));\n\n      User user = MySQLDatabase.getUser(name);\n      user.setUnitID(unitId);\n      System.out.println(\"map completed\");\n    }\n    if (input.equals(\"/mapalarmunit\")) {\n      Scanner in = new Scanner(System.in);\n      int alarmId;\n      String unitId;\n\n      do {\n        System.out.println(\"alarmId to map\");\n        alarmId = in.nextInt();\n        System.out.println(\"unitId to map\");\n        unitId = in.next();\n      } while (!(MySQLDatabase.checkAlarm(alarmId)) && !(MySQLDatabase.checkUnit(unitId)));\n\n      Event alarm = MySQLDatabase.getAlarm(alarmId);\n      alarm.setUnitID(unitId);\n      System.out.println(\"map completed\");\n    }\n    if (input.equals(\"/sendcontacts\")) {\n      ArrayList<Contact> hej = MySQLDatabase.getAllContacts();\n      HashMap<String, String> testing = Association.getUserIpAssociations();\n\n      Object[] users;\n      Object[] userip;\n\n      users = testing.keySet().toArray();\n      userip = testing.values().toArray();\n\n      for (int i = 0; i < users.length; i++) {\n        Sender.sendContacts(hej, userip[i].toString());\n      }\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7037, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [86], "initializationEnd": [108], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 122, "focalAPIEnd": 139, "followUpCheck": "(value - 7 * i) % 4 == 0", "checkType": "IF", "followUpCheckExpressionStart": 230, "followUpCheckExpressionEnd": 255, "followUpCheckBlockStart": 230, "followUpCheckBlockEnd": 563, "use": ["scanner.close()"], "useStart": [145], "useEnd": [160], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sonhuytran/Code.Forces.Problem.Set/tree/master/src/p109/P109A_LuckySumOfDigits.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    scanner.close();\n\n    int max7 = n / 7;\n\n    for (int i = max7; i >= 0; i--) {\n      if ((n - 7 * i) % 4 == 0) {\n        int num4 = (n - 7 * i) / 4;\n        StringBuilder result = new StringBuilder();\n\n        for (int j = 0; j < num4; j++) {\n          result.append(4);\n        }\n\n        for (int j = 0; j < i; j++) {\n          result.append(7);\n        }\n\n        System.out.println(result);\n        return;\n      }\n    }\n\n    System.out.println(-1);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7038, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [90], "initializationEnd": [112], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 122, "focalAPIEnd": 135, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.next()", "scanner.next()", "add(*,value)"], "useStart": [155, 322, 554], "useEnd": [165, 332, 579], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cielavenir/procon/tree/master/tyama_XMU1060.java", "rawCode": "  public static void main(String[] args) {\n    int n, y, o, d, h, m, s;\n    Scanner cin = new Scanner(System.in);\n    n = cin.nextInt();\n    Matcher x = a(cin.next(), \"([0-9]+)-([0-9]+)-([0-9]+)\");\n    y = Integer.parseInt(x.group(1));\n    o = Integer.parseInt(x.group(2));\n    d = Integer.parseInt(x.group(3));\n    x = a(cin.next(), \"([0-9]+):([0-9]+):([0-9]+)\");\n    h = Integer.parseInt(x.group(1));\n    m = Integer.parseInt(x.group(2));\n    s = Integer.parseInt(x.group(3));\n    GregorianCalendar c = new GregorianCalendar(y, o - 1, d, h, m, s);\n    c.add(Calendar.SECOND, n);\n    System.out.printf(\n        \"%d-%02d-%02d %02d:%02d:%02d\\n\",\n        c.get(Calendar.YEAR),\n        c.get(Calendar.MONTH) + 1,\n        c.get(Calendar.DAY_OF_MONTH),\n        c.get(Calendar.HOUR_OF_DAY),\n        c.get(Calendar.MINUTE),\n        c.get(Calendar.SECOND));\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7039, "initialization": ["Scanner scanner = new Scanner(BufferedReader)"], "initializationStart": [293], "initializationEnd": [311], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 327, "focalAPIEnd": 341, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextLine()", "scanner.nextDouble()", "scanner.nextLine()", "scanner.nextInt()", "scanner.nextLine()", "scanner.nextLine()", "scanner.nextDouble()", "scanner.nextLine()", "scanner.nextDouble()", "scanner.nextLine()", "scanner.nextDouble()", "scanner.nextLine()", "scanner.nextDouble()", "scanner.nextLine()", "scanner.nextDouble()", "scanner.nextLine()", "scanner.nextDouble()", "scanner.close()"], "useStart": [347, 382, 405, 439, 459, 734, 770, 793, 818, 841, 867, 890, 919, 942, 970, 993, 1018, 1041], "useEnd": [362, 399, 420, 453, 474, 749, 787, 808, 835, 856, 884, 905, 936, 957, 987, 1008, 1035, 1053], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/halfdanrump/MarketSimulation/tree/master/ssj/examples/CallEv.java", "rawCode": "  public void readData() throws IOException {\n    // Reads data and construct arrays.\n    Locale loc = Locale.getDefault();\n    Locale.setDefault(Locale.US); // to read reals as 8.3 instead of 8,3\n    BufferedReader input = new BufferedReader(new FileReader(\"CallEv.dat\"));\n    Scanner scan = new Scanner(input);\n    numDays = scan.nextInt();\n    scan.nextLine();\n    openingTime = scan.nextDouble();\n    scan.nextLine();\n    numPeriods = scan.nextInt();\n    scan.nextLine();\n    numAgents = new int[numPeriods];\n    lambda = new double[numPeriods];\n    nCallsExpected = 0.0;\n    for (int j = 0; j < numPeriods; j++) {\n      numAgents[j] = scan.nextInt();\n      lambda[j] = scan.nextDouble();\n      nCallsExpected += lambda[j];\n      scan.nextLine();\n    }\n    alpha0 = scan.nextDouble();\n    scan.nextLine();\n    p = scan.nextDouble();\n    scan.nextLine();\n    nu = scan.nextDouble();\n    scan.nextLine();\n    alpha = scan.nextDouble();\n    scan.nextLine();\n    beta = scan.nextDouble();\n    scan.nextLine();\n    s = scan.nextDouble();\n    scan.close();\n    Locale.setDefault(loc);\n\n    // genServ can be created only after its parameters are known.\n    genServ =\n        new GammaAcceptanceRejectionGen( // Faster than inversion\n            new MRG32k3a(), alpha, beta);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7040, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [136], "initializationEnd": [158], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 258, "focalAPIEnd": 270, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.next()", "scanner.nextInt()", "new Inventory(value,int,int)"], "useStart": [353, 426, 490], "useEnd": [362, 438, 523], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DT-Zilo/JAVA/tree/master/src/b5310450521/main.java", "rawCode": "  public static void main(String[] args) {\n    int amount = 0;\n    String name;\n    int sum = 0;\n    int count = 1001;\n    Scanner tb = new Scanner(System.in);\n    for (int k = 0; k < 3; k++) {\n      System.out.println(\"Please enter number \");\n      count = tb.nextInt();\n      count = count + 1;\n\n      System.out.println(\"Name product\");\n      name = tb.next();\n\n      System.out.println(\"How many product\");\n      amount = tb.nextInt();\n      sum = sum + amount;\n    }\n    Inventory a = new Inventory(count, sum, amount);\n    a.getprint();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7041, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [86], "initializationEnd": [108], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 122, "focalAPIEnd": 139, "followUpCheck": "value == 1", "checkType": "IF", "followUpCheckExpressionStart": 229, "followUpCheckExpressionEnd": 240, "followUpCheckBlockStart": 229, "followUpCheckBlockEnd": 375, "use": ["scanner.nextInt()", "scanner.nextInt()", "scanner.close()"], "useStart": [153, 184, 207], "useEnd": [170, 201, 222], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sonhuytran/Code.Forces.Problem.Set/tree/master/src/p140/P140A_NewYearTable.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    int R = scanner.nextInt();\n    int r = scanner.nextInt();\n    scanner.close();\n\n    if (n == 1) {\n      if (r <= R) {\n        System.out.println(\"YES\");\n      } else {\n        System.out.println(\"NO\");\n      }\n\n      return;\n    }\n\n    if (n == 2) {\n      if (r * 2 <= R) {\n        System.out.println(\"YES\");\n      } else {\n        System.out.println(\"NO\");\n      }\n\n      return;\n    }\n\n    int b = R - r;\n    int a = r * 2;\n    double cosa = 1 - a * a * 1.0 / (2 * b * b);\n    double angle = Math.acos(cosa);\n\n    if (angle * n / 2 <= Math.PI + 1e-12) {\n      System.out.println(\"YES\");\n    } else {\n      System.out.println(\"NO\");\n    }\n    //\n    // System.out.println(angle * n / 2);\n    // System.out.println(Math.PI);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7042, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [60], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 96, "focalAPIEnd": 108, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 393, "followUpCheckExpressionEnd": 420, "followUpCheckBlockStart": 393, "followUpCheckBlockEnd": 853, "use": ["scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()"], "useStart": [122, 227, 259], "useEnd": [134, 239, 271], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/watashi/AlgoSolution/tree/master/sgu/ac/1/190.java", "rawCode": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int p = in.nextInt();\n    boolean[][] board = new boolean[n][n];\n    for (int i = 0; i < p; ++i) {\n      int x = in.nextInt() - 1;\n      int y = in.nextInt() - 1;\n      board[x][y] = true;\n    }\n    ArrayList<ArrayList<Integer>> e = new ArrayList<ArrayList<Integer>>(n * n);\n    for (int i = 0; i < n; ++i) {\n      for (int j = 0; j < n; ++j) {\n        e.add(new ArrayList<Integer>());\n        if (board[i][j] || (i + j) % 2 != 0) {\n          continue;\n        }\n        for (int k = 0; k < 4; ++k) {\n          try {\n            if (!board[i + dx[k]][j + dy[k]]) {\n              e.get(i * n + j).add((i + dx[k]) * n + (j + dy[k]));\n            }\n          } catch (ArrayIndexOutOfBoundsException dump) {\n          }\n        }\n      }\n    }\n    int[] mu = new int[n * n], mv = new int[n * n];\n    if (2 * hungary(n * n, n * n, e, mu, mv) != n * n - p) {\n      System.out.println(\"No\");\n    } else {\n      ArrayList<String> ans1 = new ArrayList<String>(), ans2 = new ArrayList<String>();\n      for (int i = 0; i < mu.length; ++i) {\n        if (mu[i] == -1) {\n          continue;\n        }\n        int x1 = i / n, y1 = i % n, x2 = mu[i] / n, y2 = mu[i] % n;\n        if (x1 == x2) {\n          ans2.add((x1 + 1) + \" \" + (Math.min(y1, y2) + 1));\n        } else if (y1 == y2) {\n          ans1.add((Math.min(x1, x2) + 1) + \" \" + (y1 + 1));\n        }\n      }\n      System.out.println(\"Yes\");\n      System.out.println(ans1.size());\n      for (String ans : ans1) {\n        System.out.println(ans);\n      }\n      System.out.println(ans2.size());\n      for (String ans : ans2) {\n        System.out.println(ans);\n      }\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7043, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [578], "initializationEnd": [622], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 542, "tryExpressionEnd": 546, "tryBlockStart": 542, "tryBlockEnd": 925, "catchExpressionStart": 812, "catchExpressionEnd": 844, "catchBlockStart": 812, "catchBlockEnd": 925, "exceptionHandlingCallStart": [858], "exceptionHandlingCallEnd": [912], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 647, "focalAPIEnd": 664, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "Intent.putExtra(String,value)"], "useStart": [691, 722], "useEnd": [708, 751], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/services/java/com/android/server/usb/UsbDeviceManager.java", "rawCode": "    private void updateAudioSourceFunction() {\n      boolean enabled = containsFunction(mCurrentFunctions, UsbManager.USB_FUNCTION_AUDIO_SOURCE);\n      if (enabled != mAudioSourceEnabled) {\n        // send a sticky broadcast containing current USB state\n        Intent intent = new Intent(Intent.ACTION_USB_AUDIO_ACCESSORY_PLUG);\n        intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING);\n        intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);\n        intent.putExtra(\"state\", (enabled ? 1 : 0));\n        if (enabled) {\n          try {\n            Scanner scanner = new Scanner(new File(AUDIO_SOURCE_PCM_PATH));\n            int card = scanner.nextInt();\n            int device = scanner.nextInt();\n            intent.putExtra(\"card\", card);\n            intent.putExtra(\"device\", device);\n          } catch (FileNotFoundException e) {\n            Slog.e(TAG, \"could not open audio source PCM file\", e);\n          }\n        }\n        mContext.sendStickyBroadcast(intent);\n        mAudioSourceEnabled = enabled;\n      }\n    }\n"}, {"dataset": "scannerNextInt", "exampleID": 7044, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 367, "focalAPIEnd": 379, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AlexBarnes86/uva-java/tree/master/AOAPC/src/vol0/Problem457.java", "rawCode": "  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = Integer.parseInt(sc.nextLine());\n    sc.nextLine(); // blank line\n    for (int i = 0; i < n; ++i) {\n      if (i != 0) System.out.println();\n      int dishes[] = new int[40];\n      dishes[19] = 1;\n      int dna[] = new int[10];\n      for (int j = 0; j < 10; ++j) dna[j] = sc.nextInt();\n      if (sc.hasNext()) sc.nextLine(); // eat \\n\n      if (sc.hasNext()) sc.nextLine(); // blank line\n      for (int j = 0; j < 50; ++j) {\n        print_dishes(dishes);\n        dishes = next_generation(dishes, dna);\n      }\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7045, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "EmptyList", "exceptionHandlingCall": ["println(String)"], "tryExpressionStart": 63, "tryExpressionEnd": 67, "tryBlockStart": 63, "tryBlockEnd": 1234, "catchExpressionStart": 1153, "catchExpressionEnd": 1174, "catchBlockStart": 1153, "catchBlockEnd": 1234, "exceptionHandlingCallStart": [1182], "exceptionHandlingCallEnd": [1227], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 246, "focalAPIEnd": 258, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "ConsultMonthExpensesController.getMonthExpenses(value,int)"], "useStart": [316, 581], "useEnd": [328, 640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ajorgesantosp/EAPLI_PL_2DB/tree/master/eapli.expensemanager/src/Presentation/ConsultMonthExpensesUI.java", "rawCode": "  public void mainLoop() throws IllegalArgumentException {\n    try {\n      System.out.println(\"* * * Consult Month Expenses * * *\\n\");\n\n      int MonthNumber;\n      int YearNumber;\n\n      System.out.println(\"Month(number):\");\n      MonthNumber = in.nextInt();\n      System.out.println(\"\\nYear:\");\n      YearNumber = in.nextInt();\n\n      ConsultMonthExpensesController consultController = new ConsultMonthExpensesController();\n      RegisterExpenseController expTypeController = new RegisterExpenseController();\n      List<Expense> exp;\n      List<ExpenseType> expType;\n      exp = consultController.getMonthExpenses(MonthNumber, YearNumber);\n      expType = expTypeController.getExpenseType();\n      System.out.println(\"\\n* * * Show Month Expense * * *\\n\");\n      for (int i = 0; i < expType.size(); i++) {\n        System.out.println(\"\\n* * * \" + expType.get(i).getType() + \" * * *\\n\");\n        for (int j = 0; j < exp.size(); j++) {\n          int x =\n              ExpenseType.ExpenseTypeNameComparator.compare(expType.get(i), exp.get(j).getType());\n          if (x == 0) {\n            exp.get(j).expenseToString();\n          }\n        }\n      }\n    } catch (EmptyList ex) {\n      System.err.println(\"Expense Type List Empty\");\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7046, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [61], "initializationEnd": [83], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 97, "focalAPIEnd": 109, "followUpCheck": "Math.max(value,b) % Math.min(value,b) != 0", "checkType": "IF", "followUpCheckExpressionStart": 134, "followUpCheckExpressionEnd": 175, "followUpCheckBlockStart": 134, "followUpCheckBlockEnd": 466, "use": ["getPrimeFactors(value)"], "useStart": [246], "useEnd": [264], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ferhatelmas/algo/tree/master/eolimp/page13/q1244/Main.java", "rawCode": "  public static void main(String[] args) {\n\n    Scanner in = new Scanner(System.in);\n    int a = in.nextInt(), b = in.nextInt();\n\n    if (Math.max(a, b) % Math.min(a, b) != 0) System.out.println(0);\n    else {\n      HashMap<Integer, Integer> g = getPrimeFactors(a);\n      HashMap<Integer, Integer> l = getPrimeFactors(b);\n\n      for (int key : g.keySet()) if (l.get(key) - g.get(key) == 0) l.remove(key);\n\n      System.out.println((int) Math.pow(2, l.size()));\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7047, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [101], "initializationEnd": [123], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 171, "focalAPIEnd": 183, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.close()"], "useStart": [189], "useEnd": [199], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emchristiansen/Nebula/tree/master/scala/src/main/java/nebula/HungarianAlgorithm.java", "rawCode": "  public static int readInput(String prompt) // Reads input,returns double.\n      {\n    Scanner in = new Scanner(System.in);\n    System.out.print(prompt);\n    int input = in.nextInt();\n    in.close();\n    return input;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7048, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [62], "initializationEnd": [84], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "scanner.hasNextInt()", "guardType": "IF {", "guardExpressionStart": 157, "guardExpressionEnd": 179, "guardBlockStart": 157, "guardBlockEnd": 304, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 192, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextFloat()"], "useStart": [378], "useEnd": [394], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shuiqingliu/Java/tree/master/io/scanner/ScannerDemo02.java", "rawCode": "  public static void main(String[] args) {\n    Scanner scan = new Scanner(System.in);\n    System.out.print(\"请输入整数：\");\n    int i = 0;\n    float f = 0.0f;\n    if (scan.hasNextInt()) {\n      i = scan.nextInt();\n      System.out.println(\"输入的整数为：\" + i);\n    } else {\n      System.out.println(\"输入的不是整数\");\n    }\n    System.out.print(\"请输入小数:\");\n    if (scan.hasNextFloat()) {\n      f = scan.nextFloat();\n      System.out.println(\"输入的小数为：\" + f);\n    } else {\n      System.out.println(\"输入的不是小数!\");\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7049, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [107], "initializationEnd": [129], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 139, "focalAPIEnd": 151, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 157, "followUpCheckExpressionEnd": 180, "followUpCheckBlockStart": 157, "followUpCheckBlockEnd": 309, "use": ["scanner.next()"], "useStart": [212], "useEnd": [221], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ferhatelmas/algo/tree/master/eolimp/page10/q919/Main.java", "rawCode": "  public static void main(String[] args) {\n\n    int i, n, cnt = 0;\n    double d, sum = 0;\n    Scanner in = new Scanner(System.in);\n    n = in.nextInt();\n    for (i = 0; i < n; i++) {\n      d = Double.parseDouble(in.next());\n      if ((i + 1) % 3 == 0 && d > 0) {\n        cnt++;\n        sum += d;\n      }\n    }\n    System.out.println(\n        cnt + \" \" + new DecimalFormat(\"#########0.00\").format(sum).replace(\",\", \".\"));\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7050, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [61], "initializationEnd": [83], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "scanner.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 89, "guardExpressionEnd": 110, "guardBlockStart": 89, "guardBlockEnd": 410, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 123, "focalAPIEnd": 136, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 183, "followUpCheckExpressionEnd": 210, "followUpCheckBlockStart": 183, "followUpCheckBlockEnd": 389, "use": ["scanner.nextInt()", "scanner.next()"], "useStart": [148, 235], "useEnd": [161, 245], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wuyq101/acm_test/tree/master/src/com/poj/dfs/Main1128.java", "rawCode": "  public static void main(String[] args) {\n    Scanner cin = new Scanner(System.in);\n    while (cin.hasNext()) {\n      h = cin.nextInt();\n      w = cin.nextInt();\n      init();\n      for (int i = 0; i < h; i++) {\n        String line = cin.next();\n        for (int j = 0; j < w; j++) {\n          char ch = line.charAt(j);\n          block[i][j] = ch == '.' ? -1 : ch - 'A';\n        }\n      }\n      solve();\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7051, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [393], "initializationEnd": [419], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "scanner.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 491, "guardExpressionEnd": 516, "guardBlockStart": 491, "guardBlockEnd": 903, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 533, "focalAPIEnd": 550, "followUpCheck": "i <= value", "checkType": "LOOP", "followUpCheckExpressionStart": 688, "followUpCheckExpressionEnd": 716, "followUpCheckBlockStart": 688, "followUpCheckBlockEnd": 897, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GDI-Vlaanderen/geonetwork/tree/master/web/src/main/java/org/fao/geonet/kernel/diff/NodePosition.java", "rawCode": "  /**\n   * The so-called Interesting Set is the set of a node, its preceding siblings, its ancestors and\n   * its ancestors' preceding siblings. This set is interesting because any inserts or deletes in\n   * this set impact the position of this node.\n   *\n   * @return\n   */\n  public Set<String> interestingSet() {\n    Set<String> interestingSet = new HashSet<String>();\n    Scanner scanner = new Scanner(this.position).useDelimiter(\":\");\n    String prev = \"\";\n    boolean first = true;\n    while (scanner.hasNext()) {\n      int p = scanner.nextInt();\n      String prevBefore = prev;\n      if (first) {\n        prev = prev + p;\n      } else {\n        prev = prev + ':' + p;\n      }\n      for (int i = 0; i <= p; i++) {\n        if (first) {\n          interestingSet.add(prevBefore + i);\n          first = false;\n        } else {\n          interestingSet.add(prevBefore + ':' + i);\n        }\n      }\n    }\n    return interestingSet;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7052, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [77], "initializationEnd": [119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 248, "focalAPIEnd": 260, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["pow(value)", "scanner.next()", "scanner.next()", "String.substring(int,value)", "String.substring(value)", "scanner.nextInt()", "pad(*,value)", "pad(*,value)"], "useStart": [285, 366, 423, 475, 545, 622, 1064, 1111], "useEnd": [311, 375, 432, 498, 565, 634, 1092, 1139], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MrStaticVoid/school/tree/master/CSCI6331/hw2/feistel/Feistel.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    Scanner in = new Scanner(new File(\"input_feistel.txt\"));\n    PrintWriter out = new PrintWriter(new FileOutputStream(\"output_feistel.txt\"));\n\n    // Read size of half-block\n    int n = in.nextInt();\n    messageSpaceSize = new BigInteger(\"2\").pow(n);\n\n    // Read key\n    BigInteger key = new BigInteger(in.next(), 2);\n\n    // Read message\n    String message = in.next();\n    BigInteger messageL = new BigInteger(message.substring(0, n), 2);\n    BigInteger messageR = new BigInteger(message.substring(n), 2);\n\n    // Determine crypt type\n    boolean decrypt = in.nextInt() == 1;\n\n    if (decrypt) {\n      BigInteger tmp = messageR;\n      messageR = messageL;\n      messageL = tmp;\n    }\n\n    // Output size of half-block\n    out.println(\"\" + n);\n\n    // Output key\n    out.println(key.toString(2));\n\n    // Output message\n    BigInteger[] round = round(messageL, messageR, key);\n\n    if (decrypt) {\n      BigInteger tmp = round[0];\n      round[0] = round[1];\n      round[1] = tmp;\n    }\n\n    out.print(pad(round[0].toString(2), n));\n    out.println(pad(round[1].toString(2), n));\n\n    // Output opposite crypt type\n    out.println(decrypt ? \"0\" : \"1\");\n\n    out.close();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7053, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [86], "initializationEnd": [108], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 122, "focalAPIEnd": 139, "followUpCheck": "value < 3", "checkType": "IF", "followUpCheckExpressionStart": 167, "followUpCheckExpressionEnd": 177, "followUpCheckBlockStart": 167, "followUpCheckBlockEnd": 457, "use": ["scanner.close()", "StringBuilder.append(value)"], "useStart": [145, 311], "useEnd": [160, 334], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sonhuytran/Code.Forces.Problem.Set/tree/master/src/p246/P246A_BuggySorting.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    scanner.close();\n\n    if (n < 3) {\n      System.out.println(-1);\n    } else {\n      StringBuilder stringBuilder = new StringBuilder();\n\n      while (n > 0) {\n        stringBuilder.append(n);\n        stringBuilder.append(\" \");\n        n--;\n      }\n\n      System.out.println(stringBuilder.toString().trim());\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7054, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [165], "initializationEnd": [196], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 216, "focalAPIEnd": 228, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()"], "useStart": [248, 267, 363, 381, 399], "useEnd": [260, 279, 375, 393, 411], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Zack-Tillotson/csm/tree/master/applied-algo/final project/src/com/notatrick/csm/applalgos/finalproj/AdditiveUpdate.java", "rawCode": "  private List<Triplet> loadFromDocAnalysisFile(String fileName) throws FileNotFoundException {\n\n    List<Triplet> ret = new ArrayList<Triplet>();\n\n    Scanner in = new Scanner(new File(fileName));\n\n    int docNum = in.nextInt();\n    int wordNum = in.nextInt();\n\n    in.nextInt(); // Number of word instances\n\n    while (in.hasNext()) {\n      ret.add(new Triplet(in.nextInt() - 1, in.nextInt() - 1, in.nextInt()));\n    }\n\n    return ret;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7055, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [114], "initializationEnd": [136], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 233, "focalAPIEnd": 250, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "new Map(value,*,int,*,*,*)", "scanner.close()"], "useStart": [268, 208, 1697], "useEnd": [285, 425, 1712], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Rmaan/FlagMelag/tree/master/src/javachallenge/graphics/MapEditor.java", "rawCode": "  public static void main(String[] args) {\n    final MapEditor mapEditor = new MapEditor();\n    Scanner scanner = new Scanner(System.in);\n    mapEditor.createScreenElements(\n        new MapPanel(\n            new Map(\n                scanner.nextInt(),\n                scanner.nextInt(),\n                0,\n                new ArrayList<Point>(),\n                new ArrayList<Point>(),\n                new ArrayList<Point>())) {\n          @Override\n          public void onClick(int x, int y) {\n            int type =\n                (mapEditor.getMapPanel().getMap().getBlockType(new Point(x, y)).ordinal() + 1)\n                    % blockTypes;\n            mapEditor.getMapPanel().setBlock(x, y, type);\n            mapEditor\n                .getMapPanel()\n                .getMap()\n                .setBlockType(new Point(x, y), BlockType.values()[type]);\n          }\n\n          @Override\n          public void onControlClick(int x, int y) {\n            Sprite flag =\n                new AnimatedImage(\n                    ImageHolder.Objects.fire, new Position(x, y), true, GraphicClient.animator);\n            map.getFlagLocations().add(new Point(x, y));\n            mapEditor.getMapPanel().addToContainer(flag, 2);\n          }\n\n          @Override\n          public void onControlEnter(int x, int y) {\n            int type =\n                (mapEditor.getMapPanel().getMap().getBlockType(new Point(x, y)).ordinal() + 1)\n                    % blockTypes;\n            mapEditor.getMapPanel().setBlock(x, y, type);\n            mapEditor\n                .getMapPanel()\n                .getMap()\n                .setBlockType(new Point(x, y), BlockType.values()[type]);\n          }\n        });\n    scanner.close();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7056, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [642], "initializationEnd": [664], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 721, "focalAPIEnd": 733, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IP7/Corrections/tree/master/L1/IF1/Partiel/2013-2014/Jeu13.java", "rawCode": "  /**\n   * Affiche l'etat de la partie et recupere le prochain coup\n   *\n   * @param nbAllumette nombre d'allumettes restantes\n   * @param numJoueur numero du joueur courant\n   * @return le nombre d'allumette que le joueur veux enlever\n   */\n  public static int jouer(final int nbAllumette, final int numJoueur) {\n    // affiche l'etat actuel du jeu, et demande le coup au joueur\n    System.out.print(\n        \"Il reste \"\n            + nbAllumette\n            + \" Allumettes. C'est au joueur \"\n            + numJoueur\n            + \" de joueur. Retirer combien d'allumette? \");\n    // creation d'un scanner pour lire le coup\n    Scanner sc = new Scanner(System.in);\n\n    // on lit et on renvoie l'entier rente\n    return sc.nextInt();\n  } // fin de la methode jouer\n"}, {"dataset": "scannerNextInt", "exampleID": 7057, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [40], "initializationEnd": [62], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 193, "focalAPIEnd": 205, "followUpCheck": "value < 0 || value >= prvky.length", "checkType": "IF", "followUpCheckExpressionStart": 213, "followUpCheckExpressionEnd": 252, "followUpCheckBlockStart": 213, "followUpCheckBlockEnd": 330, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wox2/migrace_databaze/tree/master/skola/Fel_bc/1.semestr/Algoritmizace/PrikladyPrednasky2007/Alg11/src/alg11/Menu.java", "rawCode": "  public int vyber() {\n    Scanner sc = new Scanner(System.in);\n    do {\n      for (int i = 0; i < prvky.length; i++) System.out.println(prvky[i]);\n      System.out.print(vyzva);\n      volba = sc.nextInt();\n      if (volba < 0 || volba >= prvky.length) {\n        System.out.println(\"Nedovolená volba\");\n        volba = -1;\n      }\n    } while (volba < 0);\n    return volba;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7058, "initialization": ["Scanner scanner = new Scanner(String)"], "initializationStart": [207], "initializationEnd": [224], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 239, "focalAPIEnd": 250, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 268, "followUpCheckExpressionEnd": 296, "followUpCheckBlockStart": 268, "followUpCheckBlockEnd": 512, "use": ["scanner.nextInt()", "scanner.nextInt()"], "useStart": [371, 437], "useEnd": [382, 448], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sillybowen/wse/tree/master/hw3/src/edu/nyu/cs/cs2580/IndexerInvertedOccurrence.java", "rawCode": "  private void readDocsAndPosFromFile(BufferedReader reader, ArrayList<ArrayList<Integer>> list)\n      throws IOException {\n    String line = reader.readLine();\n    if (line == null) return;\n    Scanner s = new Scanner(line);\n    int s1 = s.nextInt();\n    int s2;\n    for (int i = 0; i < s1; i++) {\n      ArrayList<Integer> docInfo = new ArrayList<Integer>();\n      s2 = s.nextInt();\n      for (int j = 0; j < s2; j++) {\n        int x = s.nextInt();\n        docInfo.add(x);\n      }\n      list.add(docInfo);\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7059, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [86], "initializationEnd": [108], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 123, "focalAPIEnd": 140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.close()"], "useStart": [155, 187, 219, 251, 283, 306], "useEnd": [172, 204, 236, 268, 300, 321], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sonhuytran/Code.Forces.Problem.Set/tree/master/src/p143/P143A_HelpVasilisaTheWise2.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int r1 = scanner.nextInt();\n    int r2 = scanner.nextInt();\n    int c1 = scanner.nextInt();\n    int c2 = scanner.nextInt();\n    int d1 = scanner.nextInt();\n    int d2 = scanner.nextInt();\n    scanner.close();\n\n    int a, b, c, d;\n\n    for (a = 1; a < 10; a++) {\n      b = r1 - a;\n      c = c1 - a;\n      d = r2 - c;\n\n      if (b > 0 && b < 10 && c > 0 && c < 10 && d > 0 && d < 10) {\n        if (a != b && a != c && a != d && b != c && b != d && c != d) {\n          if (b + d == c2 && a + d == d1 && b + c == d2) {\n            System.out.println(a + \" \" + b);\n            System.out.println(c + \" \" + d);\n            return;\n          }\n        }\n      }\n    }\n\n    System.out.println(-1);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7060, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [86], "initializationEnd": [108], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 122, "focalAPIEnd": 139, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 316, "followUpCheckExpressionEnd": 343, "followUpCheckBlockStart": 316, "followUpCheckBlockEnd": 706, "use": ["scanner.nextLine()", "scanner.next()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextLine()", "scanner.close()"], "useStart": [145, 376, 405, 439, 681, 712], "useEnd": [163, 390, 422, 456, 699, 727], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sonhuytran/Code.Forces.Problem.Set/tree/master/src/p74/P74A_RoomLeader.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    scanner.nextLine();\n\n    int max = Integer.MIN_VALUE, point = 0;\n    int hack = 0, unhack = 0, hackPoint = 100, unhackPoint = -50;\n    String leader = \"\", name = \"\";\n\n    for (int i = 0; i < n; i++) {\n      point = 0;\n      name = scanner.next();\n      hack = scanner.nextInt();\n      unhack = scanner.nextInt();\n\n      for (int j = 0; j < 5; j++) {\n        point += scanner.nextInt();\n      }\n\n      point += hack * hackPoint + unhack * unhackPoint;\n\n      if (point > max) {\n        max = point;\n        leader = name;\n      }\n\n      scanner.nextLine();\n    }\n\n    scanner.close();\n    System.out.println(leader);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7061, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 88, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OKullmann/CS-M41-Programming-in-Java/tree/master/Chapter2/ArrayExercises/StdIn.java", "rawCode": "  /** Return next int from standard input */\n  public static int readInt() {\n    return scanner.nextInt();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7062, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [161], "initializationEnd": [192], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["scanner.nextLine()"], "configurationStart": [199], "configurationEnd": [212], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 233, "focalAPIEnd": 245, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "scanner.nextInt()"], "useStart": [300, 334], "useEnd": [312, 346], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Zack-Tillotson/csm/tree/master/applied-algo/final project/src/com/notatrick/csm/applalgos/finalproj/AdditiveUpdate.java", "rawCode": "  private List<Triplet> loadFromNetflixFile(String fileName) throws FileNotFoundException {\n\n    List<Triplet> ret = new ArrayList<Triplet>();\n\n    Scanner in = new Scanner(new File(fileName));\n\n    in.nextLine(); // Skip a line\n    in.nextInt(); // Skip first word\n\n    while (in.hasNext()) {\n      in.nextInt();\n      int userNum = in.nextInt();\n      String nextItem = in.next();\n      do {\n        ret.add(\n            new Triplet(\n                userNum,\n                Integer.parseInt(nextItem.split(\":\")[0]),\n                Integer.parseInt(nextItem.split(\":\")[1])));\n        if (in.hasNext()) {\n          nextItem = in.next();\n        } else {\n          break;\n        }\n      } while (nextItem.contains(\":\"));\n    }\n\n    return ret;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7063, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 88, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sdslnmd/learn/tree/master/algorithm/src/main/java/algorithm/StdIn.java", "rawCode": "  /** Return next int from standard input */\n  public static int readInt() {\n    return scanner.nextInt();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7064, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [175], "initializationEnd": [197], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 215, "focalAPIEnd": 233, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["towersOfHanoi(value)"], "useStart": [240], "useEnd": [260], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CaptainShanks/CS-162J/tree/master/RecursionExample/src/RecursionExample.java", "rawCode": "  public static void main(String[] args) {\n    int[] array = {4, 5, 12, 42, 76, 97, 300, 1337, 3141};\n    System.out.print(\"Input number of discs: \");\n\n    Scanner keyboard = new Scanner(System.in);\n    int input = keyboard.nextInt();\n\n    towersOfHanoi(input);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7065, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 169, "focalAPIEnd": 183, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 263, "followUpCheckExpressionEnd": 298, "followUpCheckBlockStart": 263, "followUpCheckBlockEnd": 1045, "use": ["scanner.nextLine()", "scanner.nextLine()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "Kruskal(DynamicArray,value)"], "useStart": [419, 531, 617, 903, 939, 1324, 1396, 1427, 1671], "useEnd": [434, 546, 631, 917, 953, 1338, 1410, 1441, 1696], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LuisMiranda132/Algoritmos3USB/tree/master/Proyecto 5/Main.java", "rawCode": "  public static int leerArchivo(int numEscenario) {\n\n    DynamicArray lados = new DynamicArray(2);\n    // leemos el numero de ciudades del escenario\n    int numCiudad = scan.nextInt();\n    // en este ciclo agregaremos los lados correspondientes a cada ciudad\n    for (int i = 0; i < numCiudad; i++) {\n      // este trozo de codigo es para ignorar el string que leemos ya que\n      // no nos importa\n      String bleh = scan.nextLine();\n      char[] arrChar = bleh.toCharArray();\n\n      while (arrChar.length == 0) {\n        bleh = scan.nextLine();\n        arrChar = bleh.toCharArray();\n      }\n      int numVecinas = scan.nextInt();\n      /* numVecinas es el numero de ciudades con las que se conecta y\n       * para todas las vecinas leemos quien es y el costo y creamos\n       * un nuevo arco que agregamos a la lista de arcos.\n       */\n      for (int k = 0; k < numVecinas; k++) {\n        int vec = scan.nextInt();\n        int costo = scan.nextInt();\n        Arco aux = new Arco(i + 1, vec, costo);\n        lados.addFinal(aux);\n      }\n    }\n    /* luego vienen las ciudades que ya estan conectadas,\n     * aca leemos que ciudad se conecta con quien (c1 y c2) y las\n     * agregamos a la lista de lados con costo cero ya que al estar\n     * conectadas ya el problema de su costo fue resuelto.\n     */\n    int yaConect = scan.nextInt();\n    for (int j = 0; j < yaConect; j++) {\n      int c1 = scan.nextInt();\n      int c2 = scan.nextInt();\n      Arco aux2 = new Arco(c1, c2, 0);\n      lados.addFinal(aux2);\n    }\n    /* ahora aplicamos kruskal a los lados que leimos del archivo y\n     * kruskal nos devuelve el costo del minimo arbol cobertor.\n     */\n    int cost = Kruskal(lados, numCiudad);\n    // devolvemos eso\n    return cost;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7066, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [62], "initializationEnd": [84], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 98, "focalAPIEnd": 112, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/watashi/AlgoSolution/tree/master/timus/ac/12/1206.java", "rawCode": "  public static void main(String[] args) {\n    Scanner scan = new Scanner(System.in);\n    int n = scan.nextInt();\n\n    System.out.println(_55.pow(n - 1).multiply(_36));\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7067, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 211, "focalAPIEnd": 223, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/watashi/AlgoSolution/tree/master/sgu/ac/3/358.java", "rawCode": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int[] a = new int[3], b = new int[3];\n    for (int i = 0; i < 3; ++i) {\n      for (int j = 0; j < 3; ++j) {\n        a[j] = in.nextInt();\n      }\n      Arrays.sort(a);\n      b[i] = a[1];\n    }\n    Arrays.sort(b);\n    System.out.println(b[1]);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7068, "initialization": ["Scanner scanner = new Scanner(File)"], "initializationStart": [100], "initializationEnd": [114], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 76, "tryExpressionEnd": 80, "tryBlockStart": 76, "tryBlockEnd": 526, "catchExpressionStart": 472, "catchExpressionEnd": 492, "catchBlockStart": 472, "catchBlockEnd": 526, "exceptionHandlingCallStart": [500], "exceptionHandlingCallEnd": [519], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 130, "focalAPIEnd": 141, "followUpCheck": "n < value", "checkType": "LOOP", "followUpCheckExpressionStart": 234, "followUpCheckExpressionEnd": 261, "followUpCheckBlockStart": 234, "followUpCheckBlockEnd": 288, "use": ["scanner.nextInt()"], "useStart": [157], "useEnd": [168], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nhydock/FF1-Battle-System/tree/master/editor/editor/MapEditor/MapGrid.java", "rawCode": "  /** Loads the tile map from a file */\n  public void loadMap(File f) {\n    try {\n      Scanner s = new Scanner(f);\n      int w = s.nextInt();\n      int h = s.nextInt();\n\n      tiles = new int[w][h];\n      for (int i = 0; i < h; i++) for (int n = 0; n < w; n++) tiles[n][i] = s.nextInt();\n      regions = new int[w][h];\n      for (int i = 0; i < h; i++) for (int n = 0; n < w; n++) regions[n][i] = s.nextInt();\n      width = w;\n      height = h;\n      forceClear();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7069, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [60], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 151, "focalAPIEnd": 163, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["prenesVez(value,int,int,int)"], "useStart": [169], "useEnd": [199], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wox2/migrace_databaze/tree/master/skola/Fel_bc/1.semestr/Algoritmizace/PrikladyPrednasky2007/Alg5/src/alg5/Hanoj.java", "rawCode": "  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    System.out.println(\"zadejte výšku věže\");\n    int pocetDisku = sc.nextInt();\n    prenesVez(pocetDisku, 1, 2, 3);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7070, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [60], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 290, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.close()"], "useStart": [364, 615, 689, 796], "useEnd": [375, 626, 700, 805], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thiagocrowley/Java/tree/master/src/br/com/estudo/logicaesintaxe/Entrada.java", "rawCode": "  public static void main(String[] args) {\n\n    Scanner s = new Scanner(System.in);\n    // String nome = s.nextLine();\n    // System.out.println(nome);\n\n    // OPERADOR DE SOMA\n    System.out.println(\"**SOMA DE DOIS NUMEROS**\");\n    System.out.println(\"Digite o valor de A: \");\n    int a = s.nextInt();\n    System.out.println(\"Digite o valor de B: \");\n    int b = s.nextInt();\n    int soma = a + b;\n    System.out.println(\"\\nA soma de A com B e igual a: \" + soma);\n\n    // OPERADOR DE SUBTRAÇÃO\n    System.out.println(\"\\n**SUBTRAÇÃO DE DOIS NUMEROS**\");\n    System.out.println(\"Digite o valor de C: \");\n    int c = s.nextInt();\n    System.out.println(\"Digite o valor de D: \");\n    int d = s.nextInt();\n    soma = c - d;\n    System.out.println(\"A subtração dos numeros indicados e: \" + soma);\n    s.close();\n\n    // OPERADOR DE MULTIPLICAÇÃO USANDO INTERFACE GRAFICA\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7071, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [3312], "initializationEnd": [3334], "hasTryCatch": 1, "exceptionType": "URISyntaxException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 2606, "tryExpressionEnd": 2610, "tryBlockStart": 2606, "tryBlockEnd": 3067, "catchExpressionStart": 4242, "catchExpressionEnd": 4271, "catchBlockStart": 4242, "catchBlockEnd": 4346, "exceptionHandlingCallStart": [4320], "exceptionHandlingCallEnd": [4339], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 3347, "focalAPIEnd": 3358, "followUpCheck": "value != 1 && value != 2", "checkType": "IF", "followUpCheckExpressionStart": 3462, "followUpCheckExpressionEnd": 3489, "followUpCheckBlockStart": 3462, "followUpCheckBlockEnd": 3599, "use": ["scanner.close()", "getClustersOfWorkfacesSortByOne(int,String,MachineOpInfo,WorkfaceWorkload,WorkfaceDistance,MachineInitialPosition,value)"], "useStart": [3364, 3768], "useEnd": [3373, 3859], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DanielDong/I2mine_Project/tree/master/I2mineProject/src/geo/util/WorkfaceTest.java", "rawCode": "  /**\n   * @param args\n   * @throws IOException\n   */\n  public static void main(String[] args) throws IOException {\n    // TODO Auto-generated method stub\n    // Read in workface distance information\n    WorkfaceDistance distance = new WorkfaceDistance(10);\n    BufferedReader br = null;\n    ArrayList<Double> singleWorkloadInfo = null;\n    try {\n      String curLine = null;\n      String path = \"Input_Data_OneGroup\\\\Workface_Distance.txt\";\n      br = new BufferedReader(new FileReader(path));\n      while ((curLine = br.readLine()) != null) {\n        String[] distRet = curLine.split(\"\\t\");\n        singleWorkloadInfo = new ArrayList<Double>();\n        for (int i = 0; i < distRet.length; i++) {\n          singleWorkloadInfo.add(Double.valueOf(distRet[i]));\n        }\n        distance.addDistance(singleWorkloadInfo);\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      if (br != null) {\n        br.close();\n      }\n    }\n\n    // Read in machine operation information\n    MachineOpInfo opInfo = new MachineOpInfo(5); // there are in total 5 machines\n    ArrayList<Double> singleOpInfo = null;\n    try {\n      String curLine = null;\n      br = new BufferedReader(new FileReader(\"Input_Data_OneGroup\\\\Machine_Operating_Info.txt\"));\n      while ((curLine = br.readLine()) != null) {\n\n        String[] opRet = curLine.split(\"\\t\");\n        singleOpInfo = new ArrayList<Double>();\n        singleOpInfo.add(Double.valueOf(opRet[1]));\n        singleOpInfo.add(Double.valueOf(opRet[2]));\n        opInfo.addMachineOpInfo(singleOpInfo);\n        singleOpInfo = null;\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      if (br != null) br.close();\n    }\n\n    // Read in workface workload information\n    WorkfaceWorkload workload = new WorkfaceWorkload(5, 10);\n    ArrayList<Double> singleWorkload = null;\n    try {\n      String curLine = null;\n      br = new BufferedReader(new FileReader(\"Input_Data_OneGroup\\\\Workface_Workload.txt\"));\n      while ((curLine = br.readLine()) != null) {\n        String[] workloadRet = curLine.split(\"\\t\");\n        singleWorkload = new ArrayList<Double>();\n        for (int i = 0; i < 10; i++) {\n          singleWorkload.add(Double.valueOf(workloadRet[i]));\n        }\n        workload.addMachineWorkload(singleWorkload);\n        singleWorkload = null;\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      if (br != null) br.close();\n    }\n\n    // Read in machine initial position values\n    MachineInitialPosition machineInitPos = new MachineInitialPosition();\n    br = null;\n    try {\n      String curLine = null;\n      br = new BufferedReader(new FileReader(\"Input_Data_OneGroup\\\\Machine_Initial_Location.txt\"));\n      while ((curLine = br.readLine()) != null) {\n        String[] deArr = curLine.split(\"\\t\");\n        machineInitPos.addIniPosUnit(Integer.valueOf(deArr[0]), Integer.valueOf(deArr[1]));\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      if (br != null) {\n        br.close();\n      }\n    }\n\n    /** Let user input flag value. 1 for matrix method. 2 for traditional method. */\n    System.out.println(\"Input number: 1 (matrix) or 2(tradition)\");\n    int flag = 2; // by default, using traditional way of computing time.\n    Scanner s = new Scanner(System.in);\n    flag = s.nextInt();\n    s.close();\n    /** If flag value is not 1 or 2, then application exits with error message. */\n    if (flag != 1 && flag != 2) {\n      System.out.println(\"input number can only be 1(matrix) or 2(tradition)\");\n      System.exit(0);\n    }\n\n    /** Start cluster & sort workface. Output the total time using matrix or traditional method. */\n    try {\n      long startTime = System.currentTimeMillis();\n      getClustersOfWorkfacesSortByOne(10, \"\\t\", opInfo, workload, distance, machineInitPos, flag);\n      switch (flag) {\n        case 1:\n          System.out.println(\n              \"Time during using matrix(s):\" + (System.currentTimeMillis() - startTime) / 1000.0);\n          break;\n        case 2:\n          System.out.println(\n              \"Time during using tradition(s):\"\n                  + (System.currentTimeMillis() - startTime) / 1000.0);\n          break;\n      }\n    } catch (URISyntaxException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7072, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "scanner.hasNextInt()", "guardType": "LOOP {", "guardExpressionStart": 339, "guardExpressionEnd": 361, "guardBlockStart": 339, "guardBlockEnd": 587, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 382, "focalAPIEnd": 393, "followUpCheck": "value < 0", "checkType": "IF", "followUpCheckExpressionStart": 403, "followUpCheckExpressionEnd": 415, "followUpCheckBlockStart": 403, "followUpCheckBlockEnd": 579, "use": ["ArrayList<Integer>.add(value)"], "useStart": [558], "useEnd": [568], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Caleydo/caleydo/tree/master/org.caleydo.core/src/org/caleydo/core/data/virtualarray/VirtualArrayListAdapter.java", "rawCode": "  @Override\n  public ArrayList<Integer> unmarshal(String v) throws Exception {\n    if (v.isEmpty()) return new ArrayList<>();\n    if (v.startsWith(\"<\")) { // old mode\n      v = v.replaceAll(\"</?virtualArrayList>\", \" \");\n    }\n    try (Scanner s = new Scanner(v)) {\n      ArrayList<Integer> r = new ArrayList<>();\n      int last = 0;\n      while (s.hasNextInt()) {\n        int act = s.nextInt();\n        if (act < 0) { // count\n          for (int i = 0; i < -act; ++i) {\n            r.add(++last);\n          }\n        } else {\n          last = act;\n          r.add(act);\n        }\n      }\n      return r;\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7073, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [330], "initializationEnd": [352], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 368, "focalAPIEnd": 385, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jbardelrio/Programacion/tree/master/UT6Almacenamientoo/src/arrays2d/DiezAna.java", "rawCode": "  public void menu() {\n\n    int opcion = 0;\n    System.out.println(\"1. Elegir caracter\");\n    System.out.println(\"2. Cuadrado\");\n    System.out.println(\"3. Rectángulo\");\n    System.out.println(\"4. Triángulo\");\n    System.out.println(\"5. Círculo\");\n    System.out.println(\"6. Mostrar DiezAna\");\n\n    Scanner teclado;\n    teclado = new Scanner(System.in);\n\n    opcion = teclado.nextInt();\n\n    switch (opcion) {\n      case 1:\n        opcionElegirCaracter();\n        break;\n      case 2:\n        opcionCuadrado();\n        break;\n      case 3:\n        opcionRectangulo();\n        break;\n      case 4:\n        opcionTriangulo();\n        break;\n      case 5:\n        opcionCirculo();\n        break;\n      case 6:\n        mostrar();\n        break;\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7074, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [86], "initializationEnd": [108], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 122, "focalAPIEnd": 139, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 255, "followUpCheckExpressionEnd": 282, "followUpCheckBlockStart": 255, "followUpCheckBlockEnd": 405, "use": ["scanner.nextLine()", "scanner.nextLine()", "scanner.close()"], "useStart": [145, 184, 208], "useEnd": [163, 202, 223], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sonhuytran/Code.Forces.Problem.Set/tree/master/src/p284/P284B_CowsAndPokerGame.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    scanner.nextLine();\n    String input = scanner.nextLine();\n    scanner.close();\n\n    int ni = 0, na = 0;\n\n    for (int i = 0; i < n; i++) {\n      if (input.charAt(i) == 'I') {\n        ni++;\n      } else if (input.charAt(i) == 'A') {\n        na++;\n      }\n    }\n\n    if (ni > 1) {\n      System.out.println(0);\n    } else if (ni == 1) {\n      System.out.println(1);\n    } else {\n      System.out.println(na);\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7075, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 731, "focalAPIEnd": 742, "followUpCheck": "value == 1", "checkType": "IF", "followUpCheckExpressionStart": 751, "followUpCheckExpressionEnd": 766, "followUpCheckBlockStart": 751, "followUpCheckBlockEnd": 6199, "use": ["scanner.next()", "scanner.nextInt()", "scanner.next()", "scanner.next()", "scanner.next()", "scanner.nextInt()", "scanner.next()", "scanner.nextInt()", "scanner.next()", "scanner.next()", "scanner.nextInt()", "scanner.nextInt()", "scanner.next()", "scanner.next()", "scanner.nextInt()", "scanner.next()", "scanner.next()", "scanner.next()", "scanner.next()", "scanner.nextInt()", "scanner.next()", "scanner.nextInt()", "scanner.next()", "scanner.next()", "scanner.nextInt()", "scanner.next()", "scanner.next()"], "useStart": [1072, 1158, 1240, 1463, 1801, 1891, 1993, 2079, 2320, 2723, 2809, 2894, 3120, 3521, 3607, 3683, 3905, 4522, 4628, 4781, 4901, 5054, 5383, 5751, 5833, 5909, 6124], "useEnd": [1080, 1169, 1248, 1471, 1809, 1902, 2001, 2090, 2328, 2731, 2820, 2905, 3128, 3529, 3618, 3691, 3913, 4530, 4636, 4792, 4909, 5065, 5391, 5759, 5844, 5917, 6132], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/albarralnunez/GeneradorHorarios/tree/master/src/Presentacio/CtrPresentacio.java", "rawCode": "  private static void definirRes() {\n    int opcio = 0;\n    while (opcio != 7) {\n      System.out.println(\" OPCIONS \");\n      System.out.println(\" 1 - Restringir un grup a una aula\");\n      System.out.println(\" 2 - Restringir un grup a un dia i hora\");\n      System.out.println(\n          \" 3 - Restringir una hora en la que no es pugui impartir una asignatura+grup\"); /*OK*/\n      System.out.println(\" 4 - Restringir un dia per a que no es pugu impartir una assig+grup\");\n      System.out.println(\n          \" 5 - Una assig+grup no es pot impartir a la vegada que una altre temporalmente parlant\");\n      System.out.println(\" 6 - inhabilitar una aula a un dia/hora\"); /*OK*/\n      System.out.println(\" 7 - Tornar\");\n      opcio = s.nextInt();\n\n      if (opcio == 1) {\n        boolean repetir = true;\n        String assignatura;\n        Integer grup;\n        String aula;\n        String rep;\n        ArrayList params;\n        while (repetir) {\n          params = new ArrayList();\n          System.out.println(\"Introduir nom assignatura del grup\");\n          assignatura = s.next();\n          System.out.println(\"Introduir numero del grup\");\n          grup = s.nextInt();\n          System.out.println(\"Introduir nom aula\");\n          aula = s.next();\n          params.add(assignatura);\n          params.add(grup);\n          params.add(aula);\n          cd.afegirRestriccio(1, params);\n          System.out.println(\"Vols afegir-ne una altre?<y,n>\");\n          rep = s.next();\n          if (rep.equals(\"n\")) repetir = false;\n        }\n      } else if (opcio == 2) {\n        boolean repetir = true;\n        String rep;\n        ArrayList params;\n        while (repetir) {\n          params = new ArrayList();\n          System.out.println(\"Introduir nom assignatura del grup\");\n          String assignatura = s.next();\n          System.out.println(\"Introduir numero del grup\");\n          int grup = s.nextInt();\n          System.out.println(\"Introduir dia <nom en minuscula>\");\n          String dia = s.next();\n          System.out.println(\"Introduir hora <0-23>\");\n          int hora = s.nextInt();\n          if (!cd.AfegirRestriccioGrupSessio(assignatura, grup, dia, hora))\n            System.err.println(\"no es pot definir aquesta restriccio\");\n          System.out.println(\"Vols afegir-ne una altre?<y,n>\");\n          rep = s.next();\n          if (rep.equals(\"n\")) repetir = false;\n        }\n      } else if (opcio == 3) {\n        boolean repetir = true;\n        String assignatura;\n        Integer grup;\n        Integer hora;\n        String rep;\n        ArrayList params;\n        while (repetir) {\n          params = new ArrayList();\n          System.out.println(\"Introduir nom assignatura del grup\");\n          assignatura = s.next();\n          System.out.println(\"Introduir numero del grup\");\n          grup = s.nextInt();\n          System.out.println(\"Introduir hora <0-23>\");\n          hora = s.nextInt();\n          params.add(assignatura);\n          params.add(grup);\n          params.add(hora);\n          cd.afegirRestriccio(3, params);\n          System.out.println(\"Vols afegir-ne una altre?<y,n>\");\n          rep = s.next();\n          if (rep.equals(\"n\")) repetir = false;\n        }\n      } else if (opcio == 4) {\n        boolean repetir = true;\n        String assignatura;\n        Integer grup;\n        String dia;\n        String rep;\n        ArrayList params;\n        while (repetir) {\n          params = new ArrayList();\n          System.out.println(\"Introduir nom assignatura del grup\");\n          assignatura = s.next();\n          System.out.println(\"Introduir numero del grup\");\n          grup = s.nextInt();\n          System.out.println(\"Introduir dia\");\n          dia = s.next();\n          params.add(assignatura);\n          params.add(grup);\n          params.add(dia);\n          cd.afegirRestriccio(4, params);\n          System.out.println(\"Vols afegir-ne una altre?<y,n>\");\n          rep = s.next();\n          if (rep.equals(\"n\")) repetir = false;\n        }\n\n      } else if (opcio == 5) {\n        boolean repetir = true;\n        String assignaturaP;\n        Integer grupP = null;\n        String assignaturaS;\n        Integer grupS = null;\n        String rep;\n        String nivell = \"n\"; // valor aleatori que ha de ser diferent de \"a\" i de \"g\"\n        ArrayList params;\n        while (repetir) {\n          params = new ArrayList();\n          System.out.println(\"Solapament a nivell de assignatura o de grup ?<a,g>\");\n          while ((!nivell.equals(\"a\")) && (!nivell.equals(\"g\"))) {\n            nivell = s.next();\n          }\n          System.out.println(\"Introduir nom assignatura\");\n          assignaturaP = s.next();\n          if (nivell.equals(\"g\")) {\n            System.out.println(\"Introduir numero de grup de la assignatura anterior\");\n            grupP = s.nextInt();\n          }\n          System.out.println(\"Introduir nom de l'altre assignatura\");\n          assignaturaS = s.next();\n          if (nivell.equals(\"g\")) {\n            System.out.println(\"Introduir numero de grup de la assignatura anterior\");\n            grupS = s.nextInt();\n          }\n          params.add(assignaturaP);\n          params.add(assignaturaS);\n          if (nivell.equals(\"g\")) {\n            params.add(grupP);\n            params.add(grupS);\n          }\n          cd.afegirRestriccio(5, params);\n          System.out.println(\"Vols afegir-ne una altre?<y,n>\");\n          rep = s.next();\n          if (rep.equals(\"n\")) repetir = false;\n        }\n\n      } else if (opcio == 6) {\n        boolean repetir = true;\n        String Aula;\n        Integer hora;\n        String dia;\n        String rep;\n        ArrayList params;\n        while (repetir) {\n          params = new ArrayList();\n          System.out.println(\"Introduir Aula\");\n          Aula = s.next();\n          System.out.println(\"Introduir hora <0-23>\");\n          hora = s.nextInt();\n          System.out.println(\"Introduir dia\");\n          dia = s.next();\n          params.add(Aula);\n          params.add(hora);\n          params.add(dia);\n          cd.afegirRestriccio(6, params);\n          System.out.println(\"Vols afegir-ne una altre?<y,n>\");\n          rep = s.next();\n          if (rep.equals(\"n\")) repetir = false;\n        }\n      }\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7076, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [381], "initializationEnd": [401], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printError(*)", "logError(*)", "halt(*)"], "tryExpressionStart": 235, "tryExpressionEnd": 239, "tryBlockStart": 235, "tryBlockEnd": 2239, "catchExpressionStart": 2122, "catchExpressionEnd": 2142, "catchBlockStart": 2122, "catchBlockEnd": 2239, "exceptionHandlingCallStart": [2159, 2150, 2181], "exceptionHandlingCallEnd": [2172, 2173, 2218], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 416, "focalAPIEnd": 433, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Socket(String,value)"], "useStart": [668], "useEnd": [697], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zoj/zoj/tree/master/judge_client/client/Sandbox.java", "rawCode": "  public static void main(String[] args) {\n    if (args.length != 6) {\n      logError(\"Invalid args length: \" + args.length);\n      halt(JudgeReply.JUDGE_INTERNAL_ERROR);\n    }\n\n    GregorianCalendar gc = new GregorianCalendar();\n\n    try {\n      // The purpose of Scaner here is to preload this class so that the target class can use it\n      // directly.\n      Scanner scanner = new Scanner(args[0]);\n      port = scanner.nextInt();\n      timeLimit = Integer.parseInt(args[1]);\n      memoryLimit = Integer.parseInt(args[2]);\n      outputLimit = Integer.parseInt(args[3]);\n      uid = Integer.parseInt(args[4]);\n      gid = Integer.parseInt(args[5]);\n\n      socket = new Socket(\"127.0.0.1\", port);\n      out = new DataOutputStream(socket.getOutputStream());\n\n      System.setIn(new BufferedInputStream(new FileInputStream(\"input\")));\n      System.setOut(\n          new PrintStream(\n              new BufferedOutputStream(\n                  new FileOutputStream(\"p.out\") {\n                    public void write(int b) throws IOException {\n                      try {\n                        super.write(b);\n                      } catch (IOException e) {\n                        if (e.getMessage().equals(\"File too large\")) {\n                          SandboxSecurityManager.targetThread = null;\n                          halt(JudgeReply.OUTPUT_LIMIT_EXCEEDED);\n                        }\n                        throw e;\n                      }\n                    }\n\n                    public void write(byte[] b, int off, int len) throws IOException {\n                      try {\n                        super.write(b, off, len);\n                      } catch (IOException e) {\n                        if (e.getMessage().equals(\"File too large\")) {\n                          SandboxSecurityManager.targetThread = null;\n                          halt(JudgeReply.OUTPUT_LIMIT_EXCEEDED);\n                        }\n                        throw e;\n                      }\n                    }\n                  })));\n      System.setErr(new PrintStream(new BufferedOutputStream(new FileOutputStream(\"/dev/null\"))));\n    } catch (Exception e) {\n      logError(printError(e));\n      halt(JudgeReply.JUDGE_INTERNAL_ERROR);\n      return;\n    }\n\n    System.gc();\n    baseHeapMemoryConsumption = memoryBean.getHeapMemoryUsage().getUsed();\n\n    targetThread.start();\n    for (; ; ) {\n      Thread.State state;\n      ThreadInfo info = threadBean.getThreadInfo(targetThread.getId());\n      if (info == null) {\n        state = Thread.State.TERMINATED;\n      } else {\n        state = info.getThreadState();\n      }\n      if (state == Thread.State.RUNNABLE\n          || state == Thread.State.NEW\n          || state == Thread.State.TERMINATED) {\n        updateConsumptions();\n        try {\n          sendRunningMessage(timeConsumption, memoryConsumption);\n        } catch (IOException e) {\n          halt(JudgeReply.JUDGE_INTERNAL_ERROR);\n        }\n        if (state == Thread.State.TERMINATED) {\n          break;\n        }\n      } else if (SandboxSecurityManager.targetThread != null) {\n        logError(\"Invalid thread state \" + state);\n        halt(JudgeReply.RUNTIME_ERROR);\n      }\n\n      try {\n        targetThread.join(UPDATE_TIME_THRESHOLD);\n      } catch (InterruptedException e) {\n        Runtime.getRuntime().halt(0);\n        break;\n      }\n    }\n    closeSocket();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7077, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [61], "initializationEnd": [108], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 129, "focalAPIEnd": 142, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 170, "followUpCheckExpressionEnd": 197, "followUpCheckBlockStart": 170, "followUpCheckBlockEnd": 469, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wuyq101/acm_test/tree/master/src/com/poj/dp/Main2392.java", "rawCode": "  public static void main(String[] args) {\n    Scanner cin = new Scanner(new BufferedInputStream(System.in));\n    V = 0;\n    K = cin.nextInt();\n    b = new Block[K];\n    for (int i = 0; i < K; i++) {\n      b[i] = new Block();\n      b[i].height = cin.nextInt();\n      b[i].altitude = cin.nextInt();\n      b[i].amount = cin.nextInt();\n      // 超过的也用不到\n      if (b[i].height * b[i].amount > b[i].altitude) {\n        b[i].amount = b[i].altitude / b[i].height;\n      }\n    }\n    // 排序\n    Arrays.sort(b);\n    solve();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7078, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [61], "initializationEnd": [83], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 131, "focalAPIEnd": 144, "followUpCheck": "value == 0", "checkType": "IF", "followUpCheckExpressionStart": 152, "followUpCheckExpressionEnd": 163, "followUpCheckBlockStart": 152, "followUpCheckBlockEnd": 170, "use": ["scanner.next()"], "useStart": [181], "useEnd": [191], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wuyq101/acm_test/tree/master/src/com/poj/kmp/Main1961.java", "rawCode": "  public static void main(String[] args) {\n    Scanner cin = new Scanner(System.in);\n    int idx = 1;\n    while (true) {\n      N = cin.nextInt();\n      if (N == 0) break;\n      s = cin.next().toCharArray();\n      System.out.printf(\"Test case #%d\\n\", idx++);\n      solve();\n      System.out.printf(\"\\n\");\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7079, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [60], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 97, "focalAPIEnd": 109, "followUpCheck": "ri <= value", "checkType": "LOOP", "followUpCheckExpressionStart": 115, "followUpCheckExpressionEnd": 147, "followUpCheckBlockStart": 115, "followUpCheckBlockEnd": 832, "use": ["scanner.nextInt()", "scanner.nextInt()"], "useStart": [222, 250], "useEnd": [234, 262], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/watashi/AlgoSolution/tree/master/zoj/23/2314.java", "rawCode": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int re = in.nextInt();\n    for (int ri = 1; ri <= re; ++ri) {\n      if (ri > 1) {\n        System.out.println();\n      }\n      int n = in.nextInt();\n      int m = in.nextInt();\n      int[] s = new int[m];\n      int[] t = new int[m];\n      int[] b = new int[m];\n      int[] c = new int[m];\n      for (int i = 0; i < m; ++i) {\n        s[i] = in.nextInt() - 1;\n        t[i] = in.nextInt() - 1;\n        b[i] = in.nextInt();\n        c[i] = in.nextInt();\n      }\n      LimitFlow lf = new LimitFlow(n, s, t, b, c);\n      try {\n        int[] ans = lf.solve();\n        System.out.println(\"YES\");\n        for (int f : ans) {\n          System.out.println(f);\n        }\n      } catch (NoSuchFlowException e) {\n        System.out.println(\"NO\");\n      }\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7080, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [115], "initializationEnd": [137], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 564, "focalAPIEnd": 576, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()"], "useStart": [715, 807, 896, 1085, 1247, 2175, 2266], "useEnd": [727, 819, 908, 1097, 1259, 2187, 2278], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ciniguez/PFM/tree/master/src/pfm/test/TestRest.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    @SuppressWarnings(\"resource\")\n    Scanner in = new Scanner(System.in);\n    int n = 0;\n\n    while (n != 7) {\n      System.out.println(\"1.- Registrarse \");\n      System.out.println(\"2.- Login \");\n      System.out.println(\"3.- Comprar Producto \");\n      System.out.println(\"4.- Enviar a Caja \");\n      System.out.println(\"5.- Listar Carro Compras \");\n      System.out.println(\"6.- Eliminar Producto\");\n      System.out.println(\"7.- Salir \");\n      System.out.println(\"Teclea la opcin \");\n\n      n = in.nextInt();\n\n      switch (n) {\n        case 3:\n          System.out.println(\"Ingresa id Producto (BodegaDetalle)\");\n          int idBodegaDetalle = in.nextInt();\n          System.out.println(\"Ingresa id Usuario\");\n          int idUsuario = in.nextInt();\n          System.out.println(\"Ingresa Cantidad\");\n          int cantidad = in.nextInt();\n          addProductoXML(idBodegaDetalle, idUsuario, cantidad);\n          break;\n        case 4:\n          System.out.println(\"Ingresa id Factura\");\n          int idFactura = in.nextInt();\n          confirmarPedido(idFactura);\n          break;\n        case 5:\n          System.out.println(\"Ingresa id de Usuario\");\n          idUsuario = in.nextInt();\n          Set<FacturaDetalle> productos = listarProductosCuentaXML(idUsuario);\n          int contador = 0;\n          if (productos != null) {\n            for (FacturaDetalle facturaDetalle : productos) {\n              if (!facturaDetalle.getEliminado()) {\n                contador++;\n                System.out.println(\n                    facturaDetalle.getId()\n                        + \"\\t\"\n                        + facturaDetalle.getBodegaDetalle().getProducto().getNombre()\n                        + \"\\t\"\n                        + facturaDetalle.getCantidad());\n              }\n              if (contador == 0) {\n                System.out.println(\"No existen Productos\");\n              }\n            }\n          } else {\n            System.out.println(\"No existen productos\");\n          }\n          break;\n        case 6:\n          System.out.println(\"Ingresa id del Producto\");\n          idBodegaDetalle = in.nextInt();\n          System.out.println(\"Ingresa id de Factura\");\n          idFactura = in.nextInt();\n          deleteProductoXML(idBodegaDetalle, idFactura);\n          break;\n\n        default:\n          break;\n      }\n    }\n    System.out.println(\"FIN DE EJECUCION. \");\n\n    try {\n\n      // addProductoXML(2, 3, 1);\n      /*\n       * productos = listarProductosCuentaXML(3); if (productos != null) {\n       * for (FacturaDetalle facturaDetalle : productos) {\n       * System.out.println(facturaDetalle.getId()); } } else {\n       * System.out.println(\"No existen productos\"); }\n       */\n    } catch (Exception ex) {\n      System.out.println(ex.getMessage());\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7081, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [74], "initializationEnd": [96], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 172, "focalAPIEnd": 183, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()"], "useStart": [230], "useEnd": [241], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hammerniko/de.hgs.itg.Grundlagen/tree/master/1_Grundlagen/src/B1_Verzweigungen/TageDesMonats.java", "rawCode": "  public static void main(String[] args) {\n    // Eingabe\n    Scanner s = new Scanner(System.in);\n    int monat, jahr, tage = 0;\n\n    System.out.print(\"Jahr:\");\n    jahr = s.nextInt();\n\n    System.out.print(\"Monat:\");\n    monat = s.nextInt();\n\n    tage = gibAnzahlTageDesMonats(monat, jahr);\n\n    System.out.println(\"Der Monat hat \" + tage + \" tage.\");\n  } // Ende main()\n"}, {"dataset": "scannerNextInt", "exampleID": 7082, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 43, "focalAPIEnd": 104, "followUpCheck": "value == 5 || value == 7 || value == 8", "checkType": "IF", "followUpCheckExpressionStart": 111, "followUpCheckExpressionEnd": 154, "followUpCheckBlockStart": 111, "followUpCheckBlockEnd": 268, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Chrisbh/Tie-Break/tree/master/Tie-Break/src/GUI/CourtBooking.java", "rawCode": "  private void dayList() {\n    int month = new Scanner(splMonth.getSelectedValue().toString()).nextInt();\n\n    if (month == 5 || month == 7 || month == 8) {\n      for (int i = 1; i <= 31; i++) {\n        model.addElement(i);\n      }\n      splDate.setModel(model);\n    }\n\n    if (month == 2) {\n      for (int i = 1; i <= 28; i++) {\n        model.addElement(i);\n      }\n      splDate.setModel(model);\n    }\n\n    if (month == 4 || month == 6 || month == 9) {\n      for (int i = 1; i <= 30; i++) {\n        model.addElement(i);\n      }\n      splDate.setModel(model);\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7083, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [86], "initializationEnd": [108], "hasTryCatch": 1, "exceptionType": "InputMismatchException", "exceptionHandlingCall": ["println(String)", "println(String)", "Scanner.next()"], "tryExpressionStart": 904, "tryExpressionEnd": 908, "tryBlockStart": 904, "tryBlockEnd": 1115, "catchExpressionStart": 952, "catchExpressionEnd": 985, "catchBlockStart": 952, "catchBlockEnd": 1115, "exceptionHandlingCallStart": [995, 1027, 1092], "exceptionHandlingCallEnd": [1017, 1082, 1106], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 925, "focalAPIEnd": 942, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.next()", "scanner.nextDouble()", "scanner.next()"], "useStart": [1092, 1372, 1540], "useEnd": [1106, 1392, 1554], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Johnmalc/Homeworks2/tree/master/Aufgabe1/src/de/university/andereVersion/bjorn/Main.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    Scanner eingabe = new Scanner(System.in);\n    boolean fertig = false;\n    double betrag = 0;\n\n    CashMachine automat = new CashMachine();\n    CashCard karte = new CashCard();\n    karte.setAccountNumber(20012);\n    automat.aVier.setAccountNumber(20012);\n    automat.aVier.setBankDeposit(5000);\n    automat.aVier.setOverdraft(2000);\n    automat.aVier.setPin(20041);\n\n    while (fertig != true) {\n\n      // System.out.println(\"Bitte Karte eingeben\");\n      automat.insertCashCard(karte);\n      System.out.println(\"\");\n      System.out.println(\"MENUE\");\n      System.out.println(\"---------------------\");\n      System.out.println(\"\");\n      System.out.println(\"1: Kontodaten abrufen\");\n      System.out.println(\"2: Auszahlung\");\n      System.out.println(\"3: Verlassen\");\n      System.out.println(\"Ihre Wahl: \");\n      int wahl = 0;\n\n      try {\n        wahl = eingabe.nextInt();\n      } catch (InputMismatchException f) {\n        System.out.println(\"\");\n        System.out.println(\"Fehler bitte 1, 2 oder 3 eingebn!\");\n        eingabe.next();\n      }\n\n      switch (wahl) {\n        case 1:\n          automat.accountStatement();\n          break;\n\n        case 2:\n          automat.enterPin(0);\n          System.out.println(\"\");\n          System.out.println(\"Betrag: \");\n\n          try {\n            betrag = eingabe.nextDouble();\n\n          } catch (InputMismatchException e) {\n            System.out.println(\"Fehler! Es wurde kein gültiger Betrag eingegeben: \");\n            eingabe.next();\n          }\n          automat.withdraw(betrag);\n\n          break;\n\n        case 3:\n          automat.ejectCashCard();\n          System.out.println(\"\");\n          fertig = true;\n          break;\n      } // end of switch\n    } // end of while\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7084, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [60], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 96, "focalAPIEnd": 108, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 367, "followUpCheckExpressionEnd": 394, "followUpCheckBlockStart": 367, "followUpCheckBlockEnd": 895, "use": ["scanner.nextInt()"], "useStart": [122], "useEnd": [134], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/watashi/AlgoSolution/tree/master/sgu/ac/3/363.java", "rawCode": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int m = in.nextInt();\n    ArrayList<ArrayDeque<Integer>> a = new ArrayList<ArrayDeque<Integer>>(m);\n    int[] t = new int[m];\n    for (int i = 0; i < m; ++i) {\n      a.add(new ArrayDeque<Integer>());\n    }\n    int[] x = new int[n], y = new int[n];\n\n    for (int i = 0; i < n; ++i) {\n      x[i] = in.nextInt();\n      y[i] = in.nextInt();\n      int k = 0;\n      for (int j = 0; j < m; ++j) {\n        while (!a.get(j).isEmpty() && t[j] + y[a.get(j).getFirst()] <= x[i]) {\n          t[j] = (y[a.get(j).pollFirst()] += t[j]);\n        }\n        if (a.get(j).isEmpty()) {\n          t[j] = Math.max(t[j], x[i]);\n          k = j;\n          break;\n        } else if (a.get(j).size() < a.get(k).size()) {\n          k = j;\n        }\n      }\n      x[i] = k + 1;\n      a.get(k).addLast(i);\n    }\n    for (int i = 0; i < m; ++i) {\n      while (!a.get(i).isEmpty()) {\n        t[i] = (y[a.get(i).pollFirst()] += t[i]);\n      }\n    }\n\n    for (int i = 0; i < n; ++i) {\n      System.out.println(x[i] + \" \" + y[i]);\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7085, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [60], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 96, "focalAPIEnd": 108, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 416, "followUpCheckExpressionEnd": 443, "followUpCheckBlockStart": 416, "followUpCheckBlockEnd": 521, "use": ["scanner.nextInt()", "scanner.nextInt()", "scanner.nextDouble()", "scanner.nextDouble()", "scanner.nextDouble()", "scanner.nextDouble()"], "useStart": [123, 155, 203, 236, 269, 307], "useEnd": [135, 167, 218, 251, 284, 322], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/watashi/AlgoSolution/tree/master/sgu/ac/1/120.java", "rawCode": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int n1 = in.nextInt() - 1;\n    int n2 = (in.nextInt() - 1 - n1 + n) % n;\n    double x1 = in.nextDouble();\n    double y1 = in.nextDouble();\n    double x2 = in.nextDouble() - x1;\n    double y2 = in.nextDouble() - y1;\n    double[] x = new double[n], y = new double[n];\n    double a = 2 * Math.PI / n;\n    for (int i = 0; i < n; ++i) {\n      x[i] = Math.cos(-i * a) - 1;\n      y[i] = Math.sin(-i * a) - 0;\n    }\n    double r = Math.hypot(x2, y2) / Math.hypot(x[n2], y[n2]);\n    double d = Math.atan2(y2, x2) - Math.atan2(y[n2], x[n2]);\n    double[][] t =\n        new double[][] {\n          new double[] {Math.cos(d) * r, -Math.sin(d) * r},\n          new double[] {Math.sin(d) * r, Math.cos(d) * r}\n        };\n    // System.out.println(r + \" \" + d);\n    // System.out.println(x1 + \" \" + y1);\n    for (int i = 0; i < n; ++i) {\n      double xx = x1 + t[0][0] * x[i] + t[0][1] * y[i];\n      double yy = y1 + t[1][0] * x[i] + t[1][1] * y[i];\n      x[i] = xx;\n      y[i] = yy;\n    }\n    for (int i = n - n1; i < n; ++i) {\n      System.out.printf(\"%.6f %.6f\\n\", x[i], y[i]);\n    }\n    for (int i = 0; i < n - n1; ++i) {\n      System.out.printf(\"%.6f %.6f\\n\", x[i], y[i]);\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7086, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [710], "initializationEnd": [739], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 758, "focalAPIEnd": 772, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "new Dimension(value,int)"], "useStart": [791, 827], "useEnd": [805, 848], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NSolberg/Project-Galvatron/tree/master/src/CompleteClient/Application.java", "rawCode": "  @Override\n  public void actionPerformed(ActionEvent e) {\n    if (e.getSource() instanceof JCheckBoxMenuItem) {\n      JCheckBoxMenuItem m = (JCheckBoxMenuItem) e.getSource();\n      if (m.getText().equals(\"Fullscreen\") || m.getText().equals(\"Windowed\")) {\n        this.selMode.setSelected(false);\n        this.selMode = m;\n        if (this.selMode.getText().equals(\"Fullscreen\")) {\n          this.createWindow(true);\n          fullscreen = true;\n        } else {\n          window.exitFullscreen();\n          this.createWindow(false);\n          fullscreen = false;\n        }\n\n      } else {\n        this.selRes.setSelected(false);\n        this.selRes = (JCheckBoxMenuItem) e.getSource();\n        Scanner scan = new Scanner(selRes.getText());\n        int n1 = scan.nextInt();\n        int n2 = scan.nextInt();\n        this.size = new Dimension(n1, n2);\n        this.window.changeSize(this.size);\n      }\n      ((GUIGamePanel) this.panels[2]).updateUiPos(fullscreen);\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7087, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [75], "initializationEnd": [134], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "scanner.hasNext()", "guardType": "LOOP {", "guardExpressionStart": 260, "guardExpressionEnd": 285, "guardBlockStart": 260, "guardBlockEnd": 706, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 305, "focalAPIEnd": 322, "followUpCheck": "!worlds.containsKey(value)", "checkType": "IF", "followUpCheckExpressionStart": 504, "followUpCheckExpressionEnd": 538, "followUpCheckBlockStart": 504, "followUpCheckBlockEnd": 601, "use": ["scanner.next()", "scanner.nextInt()", "scanner.next()", "scanner.nextInt()", "scanner.next()", "put(value,*)", "HashMap<Integer, World>.get(value)"], "useStart": [343, 374, 410, 446, 482, 549, 608], "useEnd": [357, 391, 424, 463, 496, 592, 628], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elamre/SoD2/tree/master/SoD2/src/com/deeep/sod2/missions/MissionParser.java", "rawCode": "  public void parseMissions() throws FileNotFoundException {\n    scanner = new Scanner(Gdx.files.internal(\"data/missions.dat\").file());\n    int systemId;\n    String systemName;\n    int areaId;\n    String areaName;\n    int levelAmount;\n    String shopData;\n    while (scanner.hasNext()) {\n      systemId = scanner.nextInt();\n      systemName = scanner.next();\n      areaId = scanner.nextInt();\n      areaName = scanner.next();\n      levelAmount = scanner.nextInt();\n      shopData = scanner.next();\n      if (!worlds.containsKey(systemId)) {\n        worlds.put(systemId, new World(systemName));\n      }\n      worlds.get(systemId).addArea(areaId, new Area(areaName, systemName, shopData, levelAmount));\n    }\n    System.out.println(\"Finished parsing missions\");\n    finishUp();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7088, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 983, "focalAPIEnd": 994, "followUpCheck": "value == 1", "checkType": "IF", "followUpCheckExpressionStart": 1003, "followUpCheckExpressionEnd": 1014, "followUpCheckBlockStart": 1003, "followUpCheckBlockEnd": 3791, "use": ["scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()"], "useStart": [1485, 2085, 2541, 3005, 3463], "useEnd": [1496, 2096, 2552, 3016, 3474], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/miguelpinto98/POO/tree/master/Main.java", "rawCode": "  public static void MenuJogadorAposta(Manager m, int ejog, Jogador j)\n      throws FileNotFoundException, IOException {\n    int x = 0;\n\n    do {\n      System.out.println(\"##################### MENU APOSTAS ######################\");\n      System.out.println(\"# #\");\n      System.out.println(\"# Jogador: \" + j.getNome());\n      System.out.println(\"# #\");\n      System.out.println(\"# 1 - FAZER APOSTA CORRIDA #\");\n      System.out.println(\"# 2 - VER APOSTAS POR ACONTECER #\");\n\n      System.out.println(\"# 3 - VER HISTORICO #\");\n\n      System.out.println(\"# 4 - SALDO CURRENTE #\");\n      System.out.println(\"# 5 - DINHEIRO INVESTIDO #\");\n      System.out.println(\"# 6 - DINHEIRO GANHO #\");\n      System.out.println(\"# 7 - TROCAR JOGADOR #\");\n      System.out.println(\"# 8 - VOLTAR MENU PRINCIPAL #\");\n      System.out.println(\"# #\");\n      System.out.println(\"# Escolha uma opÃ§Ã£o: #\");\n      System.out.println(\"#########################################################\");\n      x = s.nextInt();\n\n      if (x == 1) MenuFazAposta(m, ejog);\n      else if (x == 2) {\n        do {\n          System.out.println(\"##################### APOSTAS EM VIGOR ##################\");\n          System.out.println(\"# #\");\n\n          for (Aposta v : j.getApostaCorrente()) System.out.println(v.toString());\n\n          System.out.println(\"# #\");\n          System.out.println(\"# 1 - VOLTAR #\");\n          System.out.println(\"#########################################################\");\n          option = s.nextInt();\n\n          if (option == 1) MenuJogadorAposta(m, ejog, j);\n          else System.out.println(\"Opção Invalida!\");\n\n        } while (option > 1);\n      } else if (x == 3) {\n        do {\n\n          System.out.println(\"################### HISTORICO APOSTAS ###################\");\n\n          System.out.println(\"# #\");\n\n          for (Aposta v : j.getHistorico()) System.out.print(v.toString());\n\n          System.out.println(\"# #\");\n          System.out.println(\"# 1 - VOLTAR #\");\n          System.out.println(\"#########################################################\");\n          option = s.nextInt();\n\n          if (option == 1) MenuJogadorAposta(m, ejog, j);\n          else System.out.println(\"Opção Invalida!\");\n\n        } while (option > 1);\n      } else if (x == 4) {\n        do {\n          System.out.println(\"# * Saldo Actual: \" + j.getDc());\n          System.out.println(\"# #\");\n          System.out.println(\"# 1 - VOLTAR #\");\n          System.out.println(\"#########################################################\");\n          option = s.nextInt();\n\n          if (option == 1) MenuJogadorAposta(m, ejog, j);\n          else System.out.println(\"OpÃ§Ã£o InvÃ¡lida!\");\n        } while (option > 1);\n      } else if (x == 5) {\n        do {\n          System.out.println(\"# * Dinheiro Investido: \" + j.getDi());\n          System.out.println(\"# #\");\n          System.out.println(\"# 1 - VOLTAR #\");\n          System.out.println(\"#########################################################\");\n          option = s.nextInt();\n\n          if (option == 1) MenuJogadorAposta(m, ejog, j);\n          else System.out.println(\"Opção Invalida!\");\n\n        } while (option > 1);\n      } else if (x == 6) {\n        do {\n          System.out.println(\"# * Dinheiro Ganho: \" + j.getDg());\n          System.out.println(\"# #\");\n          System.out.println(\"# 1 - VOLTAR #\");\n          System.out.println(\"#########################################################\");\n          option = s.nextInt();\n\n          if (option == 1) MenuJogadorAposta(m, ejog, j);\n          else System.out.println(\"OpÃ§Ã£o InvÃ¡lida!\");\n        } while (option > 1);\n      } else if (x == 7) {\n        MenuEscolheJogador(m, -1);\n      } else if (x == 8) {\n        MenuPrincipal(m);\n      } else System.out.println(\"OpÃ§Ã£o InvÃ¡lida!\");\n    } while (x > 8);\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7089, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 960, "focalAPIEnd": 992, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()"], "useStart": [2508, 3455, 3603], "useEnd": [2540, 3487, 3635], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wox2/migrace_databaze/tree/master/skola/Fel_bc/1.semestr/Algoritmizace/Matice zaloha/MainZaloha.java", "rawCode": "  static void ovladani() {\n    int n = 0;\n    double[][] A;\n    double[][] B;\n    while (n != 1) {\n      System.out.println(\n          \"Program slouzici k pocitani s maticemi, zadejte akci,\"\n              + \" ktera se ma provest pomoci cisla a enteru:\");\n      System.out.println(\"1. Scitani matic\");\n      System.out.println(\"2. Odcitani matic\");\n      System.out.println(\"3. Nasobeni matice matici\");\n      System.out.println(\"4. Nasobeni matice skalarem\");\n      System.out.println(\"5. Transponovani matice\");\n      System.out.println(\"6. Vypocitani hodnosti matice\");\n      System.out.println(\"7. Generuj matici\");\n      System.out.println(\"8. Konec\");\n      System.out.println(\"9. Zeliminuj matici gaussovou eliminaci\");\n      System.out.println(\"10. Vypocitani hodnoty determinantu matice\");\n      System.out.println(\"11. O programu\");\n      System.out.println(\"12. Zadani matice A\");\n      System.out.println(\"13. Zadani matice B\");\n      int ovladac = new Scanner(System.in).nextInt();\n      switch (ovladac) {\n        case 1:\n          {\n            double[][] m1 = {{1, 2, 3, 4}, {1, 2, 3, 5}};\n            double[][] m2 = {{1, 3, 4, 2}, {3, 4, 1, 0}};\n            System.out.println(\"Prvni matice je: \");\n            vypisMatici(m1);\n            System.out.println(\"Druha matice je: \");\n            vypisMatici(m2);\n            System.out.println(\"Soucet obou matic je: \");\n            vypisMatici(scitaniMatic(m1, m2));\n          }\n          break;\n        case 2:\n          double[][] m1 = {{1, 2, 3, 4}, {1, 2, 3, 5}};\n          System.out.println(\"Prvni matice:\");\n          vypisMatici(m1);\n          double[][] m2 = {{1, 3, 4, 2}, {3, 4, 1, 0}};\n          System.out.println(\"Druha matice:\");\n          vypisMatici(m2);\n          System.out.println(\"Rozdil prvni matice - druha je: \");\n          vypisMatici(rozdilMatic(m1, m2));\n          break;\n        case 3:\n          double[][] m4 = {{1, 2, 3}, {0, 1, 3}};\n          double[][] m5 = {{3}, {4}, {8}};\n          System.out.println(\"Prvni soucinitel: \");\n          vypisMatici(m4);\n          System.out.println(\"Druhy soucinitel: \");\n          vypisMatici(m5);\n          System.out.println(\"Soucin matic je: \");\n          vypisMatici(nasobeniMatic(m4, m5));\n          break;\n        case 4:\n          double[][] m6 = {{1, 2, 3}, {0, 1, 3}};\n          System.out.println(\"Matice, kterou chcete vynasobit \");\n          vypisMatici(m6);\n          System.out.println(\"Zadejte skalar, kterym chcete vynasobit matici\");\n          int nasobek = new Scanner(System.in).nextInt();\n          System.out.println(\"Vynasobena matice cislem \" + nasobek + \"je\");\n          vypisMatici(nasobeniMaticeSkalarem(m6, nasobek));\n          break;\n        case 5:\n          double[][] m3 = {{1, 3, 4, 2}, {3, 4, 1, 0}, {1, 2, 3, 4}};\n          System.out.println(\"Treti matice je: \");\n          vypisMatici(m3);\n          System.out.println(\"Transponovana matic k teto matici je: \");\n          vypisMatici(transponujMatici(m3));\n          break;\n        case 6:\n          double[][] m7 = {{1, 1, 1}, {2, 3, 2}, {2, 1, 2}};\n          System.out.println(\"Zadana matice:\");\n          vypisMatici(m7);\n          System.out.println(\"Zelimonovana zadana matice: \");\n          vypisMatici(gaussEli(m7));\n          System.out.println(\"Hodnost matice je:\" + hodnost(m7));\n          break;\n        case 7:\n          System.out.println(\"Zadejte pocet radku matice, kterou chcete\" + \" vygenerovat: \");\n          int x = new Scanner(System.in).nextInt();\n          System.out.println(\"Zadejte pocet sloupcu matice, kterou \" + \"chcete vygenerovat: \");\n          int y = new Scanner(System.in).nextInt();\n          System.out.println(\"Vami vygenerovana matice je: \");\n          vypisMatici(generovaniMatice(x, y));\n          break;\n        default:\n          System.out.println(\"Musite zadat cislo v rozmezi 1-9 \");\n          break;\n        case 8:\n          n = 1;\n          break;\n        case 9:\n          double[][] matice2 = {\n            {0, 0, 1, 2}, {2, 3, 4, 5}, {0, 0, 0, 5}, {0, 0, 0, 1}, {0, 0, 1, 1}, {0, 1, 2, 3}\n          };\n          vypisMatici(matice2);\n          System.out.println(\"Matice vypada po gaussove eliminaci takto: \");\n          vypisMatici(gaussEli(matice2));\n          break;\n        case 10:\n          double[][] detMatice = {{0, 0, 10}, {1, 2, 1}, {1, 1, 1}};\n          vypisMatici(detMatice);\n          System.out.println(\"Hodnota determinantu matice je:\" + hodnotaDeterminantu(detMatice));\n          break;\n        case 11:\n          System.out.println(\n              \"Tento program byl napsan Martinem Lukesem\"\n                  + \" jako zapoctovy program predmetu Algoritmizace na\"\n                  + \"konci roku 2008 a pocatku roku 2009.\");\n          break;\n        case 12:\n          System.out.println(\"Zadani hodnot matice A\");\n          A = zadaniMatice();\n          vypisMatici(A);\n          break;\n        case 13:\n          System.out.println(\"Zadani hodnot matice B\");\n          B = zadaniMatice();\n          break;\n      }\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7090, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 180, "focalAPIEnd": 197, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "new Game(value,int,int,*)", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.next()", "scanner.next()"], "useStart": [217, 251, 287, 322, 420, 508, 527, 569, 606, 646, 724, 955], "useEnd": [234, 268, 304, 370, 437, 525, 544, 586, 623, 663, 738, 969], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AI-comp/Terraforming/tree/master/src/main/java/net/aicomp/terraforming/ai/SampleInternalManipulator.java", "rawCode": "  private static Game parseGame(Scanner scanner) {\n    if (!scanner.next().equals(\"START\")) {\n      throw new RuntimeException(\"START should be retrieved.\");\n    }\n\n    int turn = scanner.nextInt();\n    int maxTurn = scanner.nextInt();\n    int myId = scanner.nextInt();\n    int radius = scanner.nextInt();\n    Game game = new Game(turn, maxTurn, myId, new Field(radius));\n    Field field = game.field;\n\n    int nTiles = scanner.nextInt();\n    for (int i = 0; i < nTiles; i++) {\n      Point point = new Point(scanner.nextInt(), scanner.nextInt());\n\n      int playerId = scanner.nextInt();\n      int robot = scanner.nextInt();\n      int resource = scanner.nextInt();\n      boolean isHole = false;\n\n      String landformName = scanner.next();\n      String capitalizedlandformName =\n          landformName.substring(0, 1).toUpperCase() + landformName.substring(1);\n      Landform landform = Landform.valueOf(capitalizedlandformName);\n\n      String instName = scanner.next();\n      String capitalizedInstName = instName.substring(0, 1).toUpperCase() + instName.substring(1);\n      Installation inst = null;\n      if (capitalizedInstName.equals(\"Hole\")) {\n        isHole = true;\n      } else {\n        inst = Installation.valueOf(capitalizedInstName);\n      }\n\n      Tile tile = new Tile(playerId, robot, resource, isHole, landform, inst);\n      field.tiles.put(point, tile);\n    }\n    if (!scanner.next().equals(\"EOS\")) {\n      throw new RuntimeException(\"EOS should be retrieved.\");\n    }\n    return game;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7091, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [59], "initializationEnd": [81], "hasTryCatch": 1, "exceptionType": "MyCustomException", "exceptionHandlingCall": ["getMessage()", "println(String)", "printStackTrace()"], "tryExpressionStart": 136, "tryExpressionEnd": 140, "tryBlockStart": 136, "tryBlockEnd": 355, "catchExpressionStart": 214, "catchExpressionEnd": 242, "catchBlockStart": 214, "catchBlockEnd": 355, "exceptionHandlingCallStart": [302, 252, 327], "exceptionHandlingCallEnd": [316, 317, 346], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 186, "focalAPIEnd": 203, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(value)", "scanner.close()"], "useStart": [174, 366], "useEnd": [204, 381], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RyanDur/Java-class/tree/master/day_15/errorHandlingOnUserInput/src/main/java/MeanAverage.java", "rawCode": "  public void getNumbersFromUser() {\n    Scanner scanner = new Scanner(System.in);\n    while (numbers.size() < numberOfEntries) {\n      try {\n        check(scanner);\n        numbers.add(scanner.nextInt());\n      } catch (MyCustomException e) {\n        System.out.println(\"Please input 10 numbers.\\n\" + e.getMessage());\n        e.printStackTrace();\n      }\n    }\n    scanner.close();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7092, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [150], "initializationEnd": [215], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 321, "focalAPIEnd": 333, "followUpCheck": "value-- > 0", "checkType": "LOOP {", "followUpCheckExpressionStart": 339, "followUpCheckExpressionEnd": 355, "followUpCheckBlockStart": 339, "followUpCheckBlockEnd": 1040, "use": ["scanner.next()", "scanner.next()", "scanner.next()", "scanner.next()", "scanner.next()"], "useStart": [368, 385, 406, 423, 444], "useEnd": [377, 394, 415, 432, 453], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ackoroa/UVa-Solutions/tree/master/UVa 11952 - Arithmetic/src/Main.java", "rawCode": "  public static void main(String[] args) {\n    int tc, base, MAXBASE = 18;\n    String a, b, s;\n    BigInteger bia, bib, bis, bires;\n\n    Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n    tc = sc.nextInt();\n    while (tc-- > 0) {\n      a = sc.next();\n      sc.next();\n      b = sc.next();\n      sc.next();\n      s = sc.next();\n\n      if (a.matches(\"1+\")\n          && b.matches(\"1+\")\n          && s.matches(\"1+\")\n          && a.length() + b.length() == s.length()) {\n        pr.println(1);\n        continue;\n      }\n\n      for (base = 2; base <= MAXBASE; base++) {\n        try {\n          bia = new BigInteger(a, base);\n          bib = new BigInteger(b, base);\n          bires = bia.add(bib);\n          bis = new BigInteger(s, base);\n\n          if (bis.equals(bires)) break;\n        } catch (NumberFormatException e) {\n        }\n      }\n\n      if (base > MAXBASE) pr.println(0);\n      else pr.println(base);\n    }\n    pr.flush();\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7093, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [1054], "initializationEnd": [1076], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 1101, "focalAPIEnd": 1113, "followUpCheck": "!p.jouerCoup(value,caseArriver)", "checkType": "IF", "followUpCheckExpressionStart": 1270, "followUpCheckExpressionEnd": 1312, "followUpCheckBlockStart": 1270, "followUpCheckBlockEnd": 1399, "use": ["scanner.nextInt()"], "useStart": [1246], "useEnd": [1258], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Projet-Tech/Projet_info4_2012/tree/master/ProjectGammon/src/test/java/fr/ujm/tse/info4/pgammon/test/models/TestPartie.java", "rawCode": "  /**\n   * Dans cette classe on va simuler l'interface graphique en appelant les méthode partie comme le\n   * ferais l'interface.\n   *\n   * @param args\n   */\n  @SuppressWarnings({\"resource\", \"unused\"})\n  public static void main(String[] args) {\n\n    // comment récuperer ce que l'utilisateur saisie.\n\n    System.out.println(\"Lancement du test de la Partie\");\n\n    // creation des parametre et joueur\n    Joueur jBlanc = new Joueur(1, \"ben\", \"beauGoss\", NiveauAssistant.NON_UTILISE);\n    Joueur jNoir = new Joueur(2, \"JM\", \"null\", NiveauAssistant.COMPLET);\n\n    ParametreJeu param = new ParametreJeu(0, 3, true, jBlanc, jNoir);\n    Partie p = new Partie(param);\n    p.lancerPremierePartie();\n    // partie lancer\n\n    boolean deplacementValide = false;\n    int caseDepart;\n    int caseArriver;\n    do {\n      System.out.println(\"c'est au joueur\" + p.getJoueurEnCour());\n      do {\n        afficherTablier(p.getTablier());\n        afficherDe(p.getDeSixFaces());\n        do {\n          System.out.println(\"donner la case de départ\");\n          Scanner sc = new Scanner(System.in);\n          caseDepart = sc.nextInt();\n\n          System.out.println(\"donner la case d'arriver\");\n          Scanner sc2 = new Scanner(System.in);\n          caseArriver = sc.nextInt();\n          if (!p.jouerCoup(caseDepart, caseArriver)) System.out.println(\"deplacement non valide\");\n          else deplacementValide = true;\n        } while (!deplacementValide);\n      } while (!p.siDesUtilises());\n\n      p.changerTour();\n\n    } while (!p.isPartieFini());\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7094, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [97], "initializationEnd": [119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 357, "focalAPIEnd": 380, "followUpCheck": "value > largestNum", "checkType": "IF", "followUpCheckExpressionStart": 451, "followUpCheckExpressionEnd": 479, "followUpCheckBlockStart": 451, "followUpCheckBlockEnd": 522, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/humanshell/bmcc-classwork/tree/master/csc210/loops/NonNegative.java", "rawCode": "  public static void main(String[] args) {\n\n    // declare variables\n    Scanner terminalInput = new Scanner(System.in);\n    int currentNum = 0, largestNum = 0, count = 0;\n    double runningTotal = 0.0;\n\n    do {\n\n      // ask the user for an integer\n      System.out.print(\"Please enter an integer (enter a negative integer to end): \");\n      currentNum = terminalInput.nextInt();\n\n      // check integer size & store if larger than largestNum\n      if (currentNum > largestNum) {\n        largestNum = currentNum;\n      }\n\n      // increment counter and update running total\n      count++;\n      runningTotal += currentNum;\n\n    } while (currentNum >= 0);\n\n    // print the average and largest number entered\n    System.out.println(\"The largest integer entered is: \" + largestNum);\n    System.out.println(\"The average of all integers is: \" + runningTotal / count);\n  } // end main()\n"}, {"dataset": "scannerNextInt", "exampleID": 7095, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [75], "initializationEnd": [97], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 389, "focalAPIEnd": 400, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hammerniko/de.hgs.itg.Grundlagen/tree/master/1_Grundlagen/src/C1_Schleifen/ErrateDieZahl.java", "rawCode": "  public static void main(String[] args) {\n\n    // Eingabe\n    Scanner s = new Scanner(System.in);\n\n    int anzahlVersuche = 0;\n    int zz, zahl, diff, diffVorher = 100;\n\n    zz = (int) (Math.random() * 100 + 1);\n\n    System.out.println(\"Geben Sie eine Zahl zwischen 1 und 100\");\n\n    do {\n      System.out.println(\"-----------------\");\n      System.out.print(\"Raten Sie: \");\n      zahl = s.nextInt();\n\n      diff = Math.abs(zz - zahl);\n      // System.out.println(zz+\" \"+zahl+\" \"+diff);\n\n      if (diff < diffVorher) {\n        diffVorher = diff;\n        System.out.println(\"heiss\");\n      } else if (diff == diffVorher) {\n        System.out.println(\"lauwarm\");\n\n      } else {\n        System.out.println(\"kalt\");\n      }\n\n      anzahlVersuche++;\n\n    } while (diff != 0);\n\n    System.out.println(\"Sie haben gewonnen mit \" + anzahlVersuche + \" Versuchen\");\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7096, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [65], "initializationEnd": [87], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 177, "focalAPIEnd": 194, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.close()"], "useStart": [200], "useEnd": [215], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jbardelrio/Programacion/tree/master/UT3ControlFlujo/src/Libro/Array5_LineaComandos.java", "rawCode": "  public static void main(String[] args) {\n    Scanner teclado = new Scanner(System.in);\n    int numeros;\n    System.out.println(\"Dime los 3 números elegidos: \");\n    numeros = teclado.nextInt();\n    teclado.close();\n\n    // Comprueba el número de argumentos\n    if (args.length != 3)\n      System.out.println(\"Error, el número de argumentos introducidos \" + \"no es correcto\");\n    else {\n      // Obtiene el tamaño del array del primer argumento introducido\n      int longitudArray = Integer.parseInt(args[0]);\n      // Crea el array\n      int[] arreglo = new int[longitudArray];\n\n      // Obtiene el valor inicial y el incremento de los argumentos introducidos\n      int valorInicial = Integer.parseInt(args[1]);\n      int incremento = Integer.parseInt(args[2]);\n\n      // Calcula el valor para cada elemento del array\n      for (int contador = 0; contador < arreglo.length; contador++)\n        arreglo[contador] = valorInicial + incremento * contador;\n\n      System.out.printf(\"%s%8s\\n\", \"Indice\", \"Valor\");\n\n      // Muestra el número de índice y el valor del array\n      for (int contador = 0; contador < arreglo.length; contador++) {\n        System.out.printf(\"%5d%8d\\n\", contador, arreglo[contador]);\n      }\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7097, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [60], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 96, "focalAPIEnd": 108, "followUpCheck": "true || calendar.get(Calendar.DAY_OF_MONTH) != value", "checkType": "IF", "followUpCheckExpressionStart": 203, "followUpCheckExpressionEnd": 344, "followUpCheckBlockStart": 203, "followUpCheckBlockEnd": 514, "use": ["scanner.nextInt()", "new GregorianCalendar(int,*,value)"], "useStart": [122, 160], "useEnd": [134, 197], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mitcc/AlgoSolutions/tree/master/sgu/P115.java", "rawCode": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int m = in.nextInt();\n    Calendar calendar = new GregorianCalendar(2001, m - 1, n);\n    if (calendar.get(Calendar.YEAR) != 2001\n        || calendar.get(Calendar.MONTH) != m - 1\n        || calendar.get(Calendar.DAY_OF_MONTH) != n) System.out.println(\"Impossible\");\n    else {\n      int res = calendar.get(Calendar.DAY_OF_WEEK);\n      res = res == 1 ? 7 : res - 1;\n      System.out.println(res);\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7098, "initialization": ["Scanner scanner = new Scanner(*)"], "initializationStart": [73], "initializationEnd": [95], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 153, "focalAPIEnd": 165, "followUpCheck": "i < value", "checkType": "LOOP", "followUpCheckExpressionStart": 218, "followUpCheckExpressionEnd": 241, "followUpCheckBlockStart": 218, "followUpCheckBlockEnd": 609, "use": ["new Inventory(value)", "scanner.next()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "scanner.next()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()"], "useStart": [185, 319, 423, 685, 797, 895, 1100, 1212, 1305], "useEnd": [201, 328, 435, 697, 809, 904, 1112, 1224, 1317], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DT-Zilo/JAVA/tree/master/src/b5410450159/mainInventory.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    sc = new Scanner(System.in);\n    System.out.print(\"Enter list item : \");\n    int n = sc.nextInt();\n    Inventory a = new Inventory(n);\n    int i;\n    for (i = 0; i < n; i++) {\n      System.out.print(\"Enter Your Name Item : \");\n      String nameItem = sc.next();\n      a.setName(i, nameItem);\n      System.out.print(\"Enter Your Item : \");\n      int item = sc.nextInt();\n      a.setItem(i, item);\n      int numberItem = 1000 + i;\n      a.setNumberItem(i, numberItem);\n      System.out.println(\"Your Number Item : \" + a.getNumberItem(i));\n    }\n\n    System.out.print(\"You Want Edit Name Item ? Y=1/N=0 : \");\n    int p = sc.nextInt();\n    if (p == 1) {\n      System.out.print(\"Enter Your Number Item : \");\n      int editNumberItem = sc.nextInt();\n      System.out.print(\"Enter Edit Your Name item : \");\n      String editNameItem = sc.next();\n      a.editNameItem(editNumberItem, editNameItem);\n    } else {\n      System.out.println(\"Your Not Edit Name item\");\n    }\n\n    System.out.print(\"You Want Edit item ? Y=1/N=0 : \");\n    int m = sc.nextInt();\n    if (m == 1) {\n      System.out.print(\"Enter Your Number Item : \");\n      int editNumberItem = sc.nextInt();\n      System.out.print(\"Enter Edit Your Number item : \");\n      int editItem = sc.nextInt();\n      a.editItem(editNumberItem, editItem);\n    } else {\n      System.out.println(\"Your Not Edit item\");\n    }\n\n    for (i = 0; i < n; i++) {\n      System.out.println(\"Name item \" + i + \": \" + a.getName(i));\n      System.out.println(\"Item : \" + a.getItem(i));\n      System.out.println(\"All List item : \" + n);\n    }\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7099, "initialization": ["Scanner scanner = new Scanner(String)"], "initializationStart": [57], "initializationEnd": [71], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 85, "focalAPIEnd": 97, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["scanner.nextInt()", "new Graph(value)", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()"], "useStart": [111, 139, 201, 233, 265], "useEnd": [123, 151, 213, 245, 277], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/akuhn/ch.akuhn.util/tree/master/ch.akuhn.matrix/src/ch/akuhn/graph2/Graph.java", "rawCode": "  public static Graph parse(String s) {\n    Scanner in = new Scanner(s);\n    int N = in.nextInt();\n    int M = in.nextInt();\n    Graph g = new Graph(N);\n    for (int m = 0; m < M; m++) {\n      int a = in.nextInt() - 1;\n      int b = in.nextInt() - 1;\n      int c = in.nextInt();\n      g.cost[a][b] = c;\n      g.cost[b][a] = c;\n    }\n    return g;\n  }\n"}, {"dataset": "scannerNextInt", "exampleID": 7100, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = scanner.nextInt()", "focalAPIStart": 723, "focalAPIEnd": 734, "followUpCheck": "1 > value || value > max", "checkType": "LOOP {", "followUpCheckExpressionStart": 1883, "followUpCheckExpressionEnd": 1913, "followUpCheckBlockStart": 1883, "followUpCheckBlockEnd": 1933, "use": ["scanner.next()", "scanner.nextInt()", "scanner.next()", "ArrayList.add(value)", "scanner.nextInt()", "scanner.next()", "scanner.nextInt()", "scanner.nextInt()", "scanner.nextInt()", "ArrayList.add(value)", "scanner.nextInt()", "scanner.next()", "scanner.nextInt()", "scanner.nextInt()", "ArrayList<Integer>.get(value)", "scanner.nextInt()", "scanner.next()", "scanner.nextInt()", "scanner.next()", "ArrayList<Integer>.get(value)", "scanner.nextInt()", "scanner.next()", "scanner.nextInt()", "scanner.next()", "scanner.nextInt()", "ArrayList.add(value)", "scanner.nextInt()", "scanner.next()", "scanner.next()", "scanner.nextInt()", "ArrayList.add(value)"], "useStart": [802, 870, 944, 1022, 1921, 1993, 2061, 2131, 2203, 2284, 3375, 3454, 3522, 3594, 3686, 4759, 4838, 4906, 4977, 5066, 5972, 6054, 6153, 6235, 6335, 6416, 7328, 7400, 7467, 7536, 7617], "useEnd": [810, 881, 952, 1038, 1932, 2001, 2072, 2142, 2214, 2300, 3386, 3462, 3533, 3605, 3703, 4770, 4846, 4917, 4985, 5083, 5983, 6062, 6164, 6243, 6346, 6432, 7339, 7408, 7475, 7547, 7633], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/albarralnunez/GeneradorHorarios/tree/master/src/Presentacio/CtrPresentacio.java", "rawCode": "  /** @param opcio */\n  private static void modificarRest(int opcio) {\n    if (opcio == 1) {\n      ArrayList<String> llista = cd.llistaRest(1);\n      if (!llista.isEmpty()) {\n        int max = llista.size();\n        int rest = -1;\n        int i;\n        String a;\n        int g;\n        String aul;\n        System.out.println(\"\");\n        System.out.println(\n            \" Unitat Docent:\" + unitatDocent + \" Llista restriccions tipus \" + 1 + \" :\");\n        for (i = 0; i < llista.size(); ++i) {\n          int num = i + 1;\n          System.out.println(num + \"- \" + llista.get(i));\n        }\n        System.out.println(\"\");\n        System.out.println(\"Quina es vol modificar?\");\n        while (1 > rest || rest > max) rest = s.nextInt();\n        System.out.println(\"Introdueix Assignatura\");\n        a = s.next();\n        System.out.println(\"Introduix Grup\");\n        g = s.nextInt();\n        System.out.println(\"Introduiex Aula\");\n        aul = s.next();\n        ArrayList params = new ArrayList();\n        --rest;\n        params.add(rest);\n        params.add(a);\n        params.add(g);\n        params.add(aul);\n        cd.modificarRest(1, params);\n      } else System.out.println(\"No hi ha restriccions d'aquest tipus\");\n      System.out.println(\"\");\n    } else if (opcio == 2) {\n\n      ArrayList<String> llista = cd.llistaRest(2);\n      if (!llista.isEmpty()) {\n        int max = llista.size();\n        int rest = -1;\n        int i;\n        String a;\n        int g;\n        int h;\n        int d;\n        System.out.println(\"\");\n        System.out.println(\n            \" Unitat Docent:\" + unitatDocent + \" Llista restriccions tipus \" + 2 + \" :\");\n        for (i = 0; i < llista.size(); ++i) {\n          int num = i + 1;\n          System.out.println(num + \"- \" + llista.get(i));\n        }\n        System.out.println(\"\");\n        System.out.println(\"Quina es vol modificar?\");\n        while (1 > rest || rest > max) rest = s.nextInt();\n        System.out.println(\"Introdueix Aula\");\n        a = s.next();\n        System.out.println(\"Introduix grup\");\n        g = s.nextInt();\n        System.out.println(\"Introduix dia\");\n        d = s.nextInt();\n        System.out.println(\"Introduiex hora\");\n        h = s.nextInt();\n        ArrayList params = new ArrayList();\n        --rest;\n        params.add(rest);\n        params.add(a);\n        params.add(g);\n        params.add(d);\n        params.add(h);\n        cd.modificarRest(2, params);\n      } else System.out.println(\"No hi ha restriccions d'aquest tipus\");\n      System.out.println(\"\");\n    } else if (opcio == 3) {\n\n      ArrayList<String> llista = cd.llistaRest(3);\n      if (!llista.isEmpty()) {\n        ArrayList<Integer> posicio = new ArrayList();\n        int max = llista.size();\n        int rest = -1;\n        int i;\n        String a;\n        int g;\n        int h;\n        int num = 0;\n        System.out.println(\"\");\n        System.out.println(\n            \" Unitat Docent:\" + unitatDocent + \" Llista restriccions tipus \" + 3 + \" :\");\n        for (i = 0; i < llista.size(); ++i) {\n          if (i % 2 == 0) {\n            ++num;\n            System.out.println(num + \"- \" + llista.get(i));\n          } else {\n            posicio.add(Integer.parseInt(llista.get(i)));\n          }\n        }\n        System.out.println(\"\");\n        System.out.println(\"Quina es vol modificar?\");\n        while (1 > rest || rest > max) rest = s.nextInt();\n        System.out.println(\"Introdueix Assignatura\");\n        a = s.next();\n        System.out.println(\"Introduix Grup\");\n        g = s.nextInt();\n        System.out.println(\"Introduiex hora\");\n        h = s.nextInt();\n        ArrayList params = new ArrayList();\n        --rest;\n        params.add(posicio.get(rest));\n        params.add(a);\n        params.add(g);\n        params.add(h);\n        cd.modificarRest(3, params);\n      } else System.out.println(\"No hi ha restriccions d'aquest tipus\");\n      System.out.println(\"\");\n    } else if (opcio == 4) {\n\n      ArrayList<String> llista = cd.llistaRest(4);\n      if (!llista.isEmpty()) {\n        ArrayList<Integer> posicio = new ArrayList();\n        int max = llista.size();\n        int rest = -1;\n        int i;\n        String a;\n        int g;\n        String d;\n        int num = 0;\n        System.out.println(\"\");\n        System.out.println(\n            \" Unitat Docent:\" + unitatDocent + \" Llista restriccions tipus \" + 4 + \" :\");\n        for (i = 0; i < llista.size(); ++i) {\n          if (i % 2 == 0) {\n            ++num;\n            System.out.println(num + \"- \" + llista.get(i));\n          } else {\n            posicio.add(Integer.parseInt(llista.get(i)));\n          }\n        }\n        System.out.println(\"\");\n        System.out.println(\"Quina es vol modificar?\");\n        while (1 > rest || rest > max) rest = s.nextInt();\n        System.out.println(\"Introdueix Assignatura\");\n        a = s.next();\n        System.out.println(\"Introduix Grup\");\n        g = s.nextInt();\n        System.out.println(\"Introduiex Dia\");\n        d = s.next();\n        ArrayList params = new ArrayList();\n        --rest;\n        params.add(posicio.get(rest));\n        params.add(a);\n        params.add(g);\n        params.add(d);\n        cd.modificarRest(4, params);\n      } else System.out.println(\"No hi ha restriccions d'aquest tipus\");\n      System.out.println(\"\");\n    } else if (opcio == 5) {\n\n      ArrayList<String> llista = cd.llistaRest(5);\n      if (!llista.isEmpty()) {\n        int max = llista.size();\n        int rest = -1;\n        int i;\n        String a1;\n        int g1;\n        String a2;\n        int g2;\n        System.out.println(\"\");\n        System.out.println(\n            \" Unitat Docent:\" + unitatDocent + \" Llista restriccions tipus \" + 5 + \" :\");\n        for (i = 0; i < llista.size(); ++i) {\n          int num = i + 1;\n          System.out.println(num + \"- \" + llista.get(i));\n        }\n        System.out.println(\"\");\n        System.out.println(\"Quina es vol modificar?\");\n        while (1 > rest || rest > max) rest = s.nextInt();\n        System.out.println(\"Introdueix Assignatura 1\");\n        a1 = s.next();\n        System.out.println(\"Introduix Grup 1 <-1 si no es vol modificar>\");\n        g1 = s.nextInt();\n        System.out.println(\"Introduiex Assignatura 2\");\n        a2 = s.next();\n        System.out.println(\"Introduiex Grup 2 <-1 si no es vol modificar>\");\n        g2 = s.nextInt();\n        ArrayList params = new ArrayList();\n        --rest;\n        params.add(rest);\n        params.add(a1);\n        params.add(g1);\n        params.add(a2);\n        params.add(g2);\n        cd.modificarRest(5, params);\n      } else System.out.println(\"No hi ha restriccions d'aquest tipus\");\n      System.out.println(\"\");\n    } else if (opcio == 6) {\n\n      ArrayList<String> llista = cd.llistaRest(6);\n      if (!llista.isEmpty()) {\n        int max = llista.size();\n        int rest = -1;\n        int i;\n        String a;\n        String d;\n        int h;\n        System.out.println(\"\");\n        System.out.println(\n            \" Unitat Docent:\" + unitatDocent + \" Llista restriccions tipus \" + 6 + \" :\");\n        for (i = 0; i < llista.size(); ++i) {\n          int num = i + 1;\n          System.out.println(num + \"- \" + llista.get(i));\n        }\n        System.out.println(\"\");\n        System.out.println(\"Quina es vol modificar?\");\n        while (1 > rest || rest > max) rest = s.nextInt();\n        System.out.println(\"Introdueix Aula\");\n        a = s.next();\n        System.out.println(\"Introduix dia\");\n        d = s.next();\n        System.out.println(\"Introduiex hora\");\n        h = s.nextInt();\n        ArrayList params = new ArrayList();\n        --rest;\n        params.add(rest);\n        params.add(a);\n        params.add(d);\n        params.add(h);\n        cd.modificarRest(6, params);\n\n      } else System.out.println(\"No hi ha restriccions d'aquest tipus\");\n      System.out.println(\"\");\n    }\n  }\n"}]