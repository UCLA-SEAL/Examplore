[{"dataset": "cursorClose", "exampleID": 1201, "initialization": ["Cursor cursor = query(Uri,String[],*,*,*)"], "initializationStart": [239], "initializationEnd": [282], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()", "cursor.getInt(int)"], "configurationStart": [288, 328], "configurationEnd": [305, 341], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 347, "focalAPIEnd": 358, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_packages_apps_SoundRecorder/tree/master/src/com/android/soundrecorder/SoundRecorder.java", "rawCode": "  private void addToPlaylist(ContentResolver resolver, int audioId, long playlistId) {\n    String[] cols = new String[] {\"count(*)\"};\n    Uri uri = MediaStore.Audio.Playlists.Members.getContentUri(\"external\", playlistId);\n    Cursor cur = resolver.query(uri, cols, null, null, null);\n    cur.moveToFirst();\n    final int base = cur.getInt(0);\n    cur.close();\n    ContentValues values = new ContentValues();\n    values.put(MediaStore.Audio.Playlists.Members.PLAY_ORDER, Integer.valueOf(base + audioId));\n    values.put(MediaStore.Audio.Playlists.Members.AUDIO_ID, audioId);\n    resolver.insert(uri, values);\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1202, "initialization": ["Cursor cursor = query(*,*,*,*,*,*,*)"], "initializationStart": [226], "initializationEnd": [311], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 431, "focalAPIEnd": 440, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/classicnerd/android_packages_providers_ContactsProvider/tree/master/src/com/android/providers/contacts/LegacyContactImporter.java", "rawCode": "  private void importPhotos() {\n    SQLiteStatement insert = mTargetDb.compileStatement(PhotoInsert.INSERT_SQL);\n    SQLiteStatement photoIdUpdate = mTargetDb.compileStatement(PhotoIdUpdate.UPDATE_SQL);\n    Cursor c =\n        mSourceDb.query(PhotosQuery.TABLE, PhotosQuery.COLUMNS, null, null, null, null, null);\n    try {\n      while (c.moveToNext()) {\n        insertPhoto(c, insert, photoIdUpdate);\n      }\n    } finally {\n      c.close();\n      insert.close();\n      photoIdUpdate.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1203, "initialization": ["Cursor cursor = query(*,String[],String,*,*)"], "initializationStart": [166], "initializationEnd": [371], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)"], "configurationStart": [473], "configurationEnd": [523], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 555, "focalAPIEnd": 577, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/android/platform_packages_apps_im/tree/master/src/com/android/im/app/ChatSwitcher.java", "rawCode": "  private static String findCategory(ContentResolver resolver, long providerId) {\n    // find the provider category for this chat\n    Cursor providerCursor =\n        resolver.query(\n            Imps.Provider.CONTENT_URI,\n            PROVIDER_CATEGORY_PROJECTION,\n            \"_id = \" + providerId,\n            null /* selection args */,\n            null /* sort order */);\n    String category = null;\n\n    try {\n      if (providerCursor.moveToFirst()) {\n        category = providerCursor.getString(PROVIDER_CATEGORY_COLUMN);\n      }\n    } finally {\n      providerCursor.close();\n    }\n\n    return category;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1204, "initialization": ["Cursor cursor = query(*,*,*,*,*)"], "initializationStart": [1331], "initializationEnd": [1607], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getInt(int)"], "configurationStart": [1884], "configurationEnd": [1900], "guardCondition": "cursor!=null&&cursor.moveToFirst()", "guardType": "IF {", "guardExpressionStart": 1617, "guardExpressionEnd": 1660, "guardBlockStart": 1617, "guardBlockEnd": 2037, "focalAPI": " = cursor.close()", "focalAPIStart": 1913, "focalAPIEnd": 1927, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kabir/connectbot/tree/master/src/org/connectbot/TerminalView.java", "rawCode": "    @Override\n    protected Boolean doInBackground(Void... params) {\n      /*\n       * Presumably if the accessibility manager is not enabled, we don't\n       * need to send accessibility events.\n       */\n      final AccessibilityManager accessibility =\n          (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);\n      if (!accessibility.isEnabled()) {\n        return false;\n      }\n\n      /*\n       * Restrict the set of intents to only accessibility services that\n       * have the category FEEDBACK_SPOKEN (aka, screen readers).\n       */\n      final Intent screenReaderIntent = new Intent(SCREENREADER_INTENT_ACTION);\n      screenReaderIntent.addCategory(SCREENREADER_INTENT_CATEGORY);\n\n      final ContentResolver cr = context.getContentResolver();\n\n      final List<ResolveInfo> screenReaders =\n          context.getPackageManager().queryIntentServices(screenReaderIntent, 0);\n\n      boolean foundScreenReader = false;\n\n      final int N = screenReaders.size();\n      for (int i = 0; i < N; i++) {\n        final ResolveInfo screenReader = screenReaders.get(i);\n\n        /*\n         * All screen readers are expected to implement a content\n         * provider that responds to:\n         * content://<nameofpackage>.providers.StatusProvider\n         */\n        final Cursor cursor =\n            cr.query(\n                Uri.parse(\n                    \"content://\"\n                        + screenReader.serviceInfo.packageName\n                        + \".providers.StatusProvider\"),\n                null,\n                null,\n                null,\n                null);\n        if (cursor != null && cursor.moveToFirst()) {\n          /*\n           * These content providers use a special cursor that only has\n           * one element, an integer that is 1 if the screen reader is\n           * running.\n           */\n          final int status = cursor.getInt(0);\n\n          cursor.close();\n\n          if (status == 1) {\n            foundScreenReader = true;\n            break;\n          }\n        }\n      }\n\n      if (foundScreenReader) {\n        mControlCodes = Pattern.compile(CONTROL_CODE_PATTERN);\n      }\n\n      return foundScreenReader;\n    }\n"}, {"dataset": "cursorClose", "exampleID": 1205, "initialization": ["Cursor cursor = getReadableDatabase()"], "initializationStart": [106], "initializationEnd": [132], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)"], "configurationStart": [293, 333, 423, 520, 612, 706], "configurationEnd": [315, 367, 464, 556, 650, 740], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 788, "focalAPIEnd": 804, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rtroncoso/Termono/tree/master/src/com/quest/database/StaticDatabase.java", "rawCode": "  public int[] getMobAttributes(int pID) {\n    int[] myAnswer = new int[5];\n    Cursor myCursor =\n        this.getReadableDatabase()\n            .rawQuery(\n                \"Select * from \" + tMobAttributes + \" where \" + fMobID + \" =?\",\n                new String[] {String.valueOf(pID)});\n    myCursor.moveToFirst();\n    int index = myCursor.getColumnIndex(fMobPower);\n    myAnswer[0] = myCursor.getInt(index);\n    index = myCursor.getColumnIndex(fMobIntelligence);\n    myAnswer[1] = myCursor.getInt(index);\n    index = myCursor.getColumnIndex(fMobDefense);\n    myAnswer[2] = myCursor.getInt(index);\n    index = myCursor.getColumnIndex(fMobEndurance);\n    myAnswer[3] = myCursor.getInt(index);\n    index = myCursor.getColumnIndex(fMobLevel);\n    myAnswer[4] = myCursor.getInt(index);\n    myCursor.close();\n    this.close();\n    return myAnswer;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1206, "initialization": ["Cursor cursor = query(String,String[],String,String[],*,*,*)"], "initializationStart": [433], "initializationEnd": [507], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 363, "tryExpressionEnd": 367, "tryBlockStart": 363, "tryBlockEnd": 943, "catchExpressionStart": 673, "catchExpressionEnd": 693, "catchBlockStart": 673, "catchBlockEnd": 766, "exceptionHandlingCallStart": [701], "exceptionHandlingCallEnd": [759], "configuration": ["cursor.moveToFirst()", "cursor.getString(int)"], "configurationStart": [535, 608], "configurationEnd": [550, 622], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 638, "focalAPIEnd": 647, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [824], "useEnd": [833], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 767, "finallyExpressionEnd": 775, "finallyBlockStart": 767, "finallyBlockEnd": 943, "cleanUpCallStart": [824], "cleanUpCallEnd": [833], "url": "https://github.com/chrispbailey/ToDo-List-Widget/tree/master/src/org/chrisbailey/todo/db/ToDoDatabase.java", "rawCode": "  /**\n   * Reads the value of the parameter identified by <code>name</code>\n   *\n   * @param name\n   * @return String value of the parameter, <code>null</code> otherwise\n   */\n  private String getVariable(String name) {\n    String[] cols = new String[] {\"value\"};\n    String[] whereArgs = new String[] {name};\n\n    Cursor c = null;\n\n    String result = null;\n    try {\n      SQLiteDatabase db = this.getReadableDatabase();\n      c = db.query(VARIABLE_TABLE_NAME, cols, \"name=?\", whereArgs, null, null, null);\n      boolean hasResult = c.moveToFirst();\n      if (hasResult && !c.isNull(0)) {\n        result = c.getString(0);\n      }\n      c.close();\n      db.close();\n    } catch (Exception e) {\n      Log.e(LOG_TAG, \"Error getting variable [\" + name + \"]\", e);\n    } finally {\n      if (null != c) {\n        try {\n          c.close();\n        } catch (Exception e) {\n          Log.e(LOG_TAG, \"Error closing cursor\", e);\n        }\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1207, "initialization": ["Cursor cursor = managedQuery(Uri,*,*,*,*)"], "initializationStart": [570], "initializationEnd": [613], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()", "cursor.getInt(int)", "cursor.moveToNext()"], "configurationStart": [684, 779, 826], "configurationEnd": [702, 793, 843], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 908, "focalAPIEnd": 920, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sntc06/Icequeen/tree/master/src/com/mis/icequeen/PreTest.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.pre_test);\n    Bundle extras = getIntent().getExtras();\n    // ¨ú¥X¿ï¾Üªº³¹¸`\n    cptrange = extras.getIntArray(\"selected\");\n    showlist = new ArrayList<Integer>();\n    for (int i = 0; i < cptrange.length; i++) {\n      if (cptrange[i] == 1) {\n        getIntent()\n            .setData(\n                Uri.parse(\"content://com.mis.icequeen.testprovider/getVOCbyChapter:\" + (i + 1)));\n        total = getIntent().getData();\n        test = managedQuery(total, null, null, null, null);\n        System.out.println(\"voc count: \" + test.getCount());\n        test.moveToFirst();\n        for (int j = 0; j < test.getCount(); j++) {\n          showlist.add(test.getInt(0));\n          if (!test.isLast()) test.moveToNext();\n        }\n        System.out.println(showlist.size());\n        test.close();\n      }\n    }\n\n    ButtonListener buttonListener = new ButtonListener();\n    btnConfirmTest = (Button) findViewById(R.id.btnConfirmTest);\n    btnConfirmTest.setOnClickListener(buttonListener);\n    pendingVocLinearLayout = (LinearLayout) findViewById(R.id.pendingVocLinearLayout);\n    TextView word = (TextView) findViewById(R.id.textView2);\n    word.setText(\"\");\n    for (int i = 0; i < cptrange.length; i++) {\n      if (cptrange[i] == 1) {\n        word.append(\" Chapter \" + (i + 1) + \"\\n\");\n      }\n    }\n    word.setText(word.getText().toString().substring(0, word.getText().length() - 1));\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1208, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [1319], "initializationEnd": [1348], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 1514, "focalAPIEnd": 1532, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mangachika/weReportRapidAndroid/tree/master/rapidandroid/org.rapidandroid/src/org/rapidandroid/ModelBootstrap.java", "rawCode": "  private static void insertFieldTypesIntoDBIfNecessary() {\n\n    Iterator<?> it = fieldTypeHash.entrySet().iterator();\n\n    // for(int i = 0; i < forms.size(); i++) {\n    while (it.hasNext()) {\n      Map.Entry<Integer, SimpleFieldType> pairs = (Map.Entry<Integer, SimpleFieldType>) it.next();\n      SimpleFieldType thetype = pairs.getValue();\n      // make the URI and insert for the Fieldtype\n\n      Uri fieldtypeUri =\n          Uri.parse(RapidSmsDBConstants.FieldType.CONTENT_URI_STRING + thetype.getId());\n      Cursor typeCursor = mContext.getContentResolver().query(fieldtypeUri, null, null, null, null);\n      if (typeCursor.getCount() == 0) {\n        ContentValues typecv = new ContentValues();\n\n        typecv.put(BaseColumns._ID, thetype.getId());\n        typecv.put(RapidSmsDBConstants.FieldType.DATATYPE, thetype.getDataType());\n        typecv.put(RapidSmsDBConstants.FieldType.NAME, thetype.getReadableName());\n        typecv.put(RapidSmsDBConstants.FieldType.REGEX, thetype.getRegex());\n\n        Log.d(\"dimagi\", \"InsertFieldType: \" + thetype.getId());\n        Log.d(\"dimagi\", \"InsertFieldType: \" + thetype.getDataType());\n        Log.d(\"dimagi\", \"InsertFieldType: \" + thetype.getReadableName());\n        Log.d(\"dimagi\", \"InsertFieldType: \" + thetype.getRegex());\n\n        Uri insertedTypeUri =\n            mContext.getContentResolver().insert(RapidSmsDBConstants.FieldType.CONTENT_URI, typecv);\n        Log.d(\"dimagi\", \"********** Inserted SimpleFieldType into db: \" + insertedTypeUri);\n      }\n      typeCursor.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1209, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [97], "initializationEnd": [138], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)"], "configurationStart": [513], "configurationEnd": [532], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 378, "guardExpressionEnd": 397, "guardBlockStart": 378, "guardBlockEnd": 656, "focalAPI": " = cursor.close()", "focalAPIStart": 585, "focalAPIEnd": 599, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openintents/openintents/tree/master/widgets/ShoppingWidget/src/org/openintents/provider/Shopping.java", "rawCode": "  public static Uri getListForItem(Context context, String itemId) {\n    Cursor cursor =\n        context\n            .getContentResolver()\n            .query(\n                Contains.CONTENT_URI,\n                new String[] {Contains.LIST_ID},\n                Contains.ITEM_ID + \" = ?\",\n                new String[] {itemId},\n                Contains.DEFAULT_SORT_ORDER);\n    if (cursor != null) {\n      Uri uri;\n      if (cursor.moveToFirst()) {\n\n        uri = Uri.withAppendedPath(Shopping.Lists.CONTENT_URI, cursor.getString(0));\n\n      } else {\n        uri = null;\n      }\n      cursor.close();\n      return uri;\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1210, "initialization": ["Cursor cursor = getContext()"], "initializationStart": [275], "initializationEnd": [287], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()", "cursor.registerContentObserver(ForceLoadContentObserver)"], "configurationStart": [546, 575], "configurationEnd": [563, 616], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 451, "guardExpressionEnd": 470, "guardBlockStart": 451, "guardBlockEnd": 721, "focalAPI": " = cursor.close()", "focalAPIStart": 668, "focalAPIEnd": 682, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/core/java/android/content/CursorLoader.java", "rawCode": "  @Override\n  public Cursor loadInBackground() {\n    synchronized (this) {\n      if (isLoadInBackgroundCanceled()) {\n        throw new OperationCanceledException();\n      }\n      mCancellationSignal = new CancellationSignal();\n    }\n    try {\n      Cursor cursor =\n          getContext()\n              .getContentResolver()\n              .query(\n                  mUri, mProjection, mSelection, mSelectionArgs, mSortOrder, mCancellationSignal);\n      if (cursor != null) {\n        try {\n          // Ensure the cursor window is filled.\n          cursor.getCount();\n          cursor.registerContentObserver(mObserver);\n        } catch (RuntimeException ex) {\n          cursor.close();\n          throw ex;\n        }\n      }\n      return cursor;\n    } finally {\n      synchronized (this) {\n        mCancellationSignal = null;\n      }\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1211, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [645], "initializationEnd": [686], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 880, "focalAPIEnd": 894, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MythTV-Clients/MythTV-Android-Frontend/tree/master/src/org/mythtv/db/dvr/programGroup/ProgramGroupDaoHelper.java", "rawCode": "  public ProgramGroup findByTitle(\n      final Context context, final LocationProfile locationProfile, final String title) {\n    Log.v(TAG, \"findOne : enter\");\n\n    if (null == context) {\n      throw new IllegalArgumentException(\"Context is required\");\n    }\n\n    if (null == locationProfile) {\n      throw new IllegalArgumentException(\"LocationProfile is required\");\n    }\n\n    String selection = ProgramGroupConstants.FIELD_TITLE + \" = ?\";\n    String[] selectionArgs = new String[] {title};\n\n    selection = appendLocationHostname(context, locationProfile, selection, null);\n\n    ProgramGroup programGroup = null;\n\n    Cursor cursor =\n        context\n            .getContentResolver()\n            .query(ProgramGroupConstants.CONTENT_URI, null, selection, selectionArgs, null);\n    if (cursor.moveToFirst()) {\n      programGroup = convertCursorToProgramGroup(cursor);\n    }\n    cursor.close();\n\n    Log.v(TAG, \"findOne : exit\");\n    return programGroup;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1212, "initialization": ["Cursor cursor = getDatabase()"], "initializationStart": [84], "initializationEnd": [125], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 684, "focalAPIEnd": 693, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()", "cursor.getLong(int)", "cursor.close()"], "useStart": [753, 802, 820], "useEnd": [762, 814, 829], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/t2health/T2-Mood-Tracker-Android/tree/master/MoodTracker/src/com/t2/vas/db/tables/Group.java", "rawCode": "  public long getScaleId(String minLabel, String maxLabel) {\n    Cursor c =\n        this.dbAdapter\n            .getDatabase()\n            .query(\n                quote(Scale.TABLE_NAME),\n                new String[] {quote(Scale.FIELD_ID)},\n                quote(Scale.FIELD_GROUP_ID)\n                    + \"=? AND \"\n                    + quote(Scale.FIELD_MIN_LABEL)\n                    + \"=? AND \"\n                    + quote(Scale.FIELD_MAX_LABEL)\n                    + \"=?\",\n                new String[] {\n                  this._id + \"\", minLabel, maxLabel,\n                },\n                null,\n                null,\n                null);\n\n    if (!c.moveToFirst()) {\n      c.close();\n      return -1;\n    }\n\n    if (c.getCount() > 1) {\n      c.close();\n      return -1;\n    }\n\n    long id = c.getLong(0);\n    c.close();\n    return id;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1213, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [91], "initializationEnd": [111], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()", "cursor.getString(int)"], "configurationStart": [340, 374], "configurationEnd": [360, 400], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 412, "focalAPIEnd": 426, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vokalinteractive/android_packages_apps_Settings/tree/master/src/com/android/settings/ApnSettings.java", "rawCode": "  private String getSelectedApnKey() {\n    String key = null;\n\n    Cursor cursor =\n        getContentResolver()\n            .query(\n                PREFERAPN_URI,\n                new String[] {\"_id\"},\n                null,\n                null,\n                Telephony.Carriers.DEFAULT_SORT_ORDER);\n    if (cursor.getCount() > 0) {\n      cursor.moveToFirst();\n      key = cursor.getString(ID_INDEX);\n    }\n    cursor.close();\n    return key;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1214, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToNext()"], "configurationStart": [736], "configurationEnd": [755], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 1210, "focalAPIEnd": 1224, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mozilla-services/android-sync/tree/master/src/main/java/org/mozilla/gecko/sync/repositories/android/AndroidBrowserRepositorySession.java", "rawCode": "    protected void fetchFromCursor(Cursor cursor, RecordFilter filter, long end) {\n      Logger.debug(LOG_TAG, \"Fetch from cursor:\");\n      try {\n        try {\n          if (!cursor.moveToFirst()) {\n            delegate.onFetchCompleted(end);\n            return;\n          }\n          while (!cursor.isAfterLast()) {\n            Record r = retrieveDuringFetch(cursor);\n            if (r != null) {\n              if (filter == null || !filter.excludeRecord(r)) {\n                Logger.trace(LOG_TAG, \"Processing record \" + r.guid);\n                delegate.onFetchedRecord(transformRecord(r));\n              } else {\n                Logger.debug(LOG_TAG, \"Skipping filtered record \" + r.guid);\n              }\n            }\n            cursor.moveToNext();\n          }\n          delegate.onFetchCompleted(end);\n        } catch (NoGuidForIdException e) {\n          Logger.warn(LOG_TAG, \"No GUID for ID.\", e);\n          delegate.onFetchFailed(e, null);\n        } catch (Exception e) {\n          Logger.warn(LOG_TAG, \"Exception in fetchFromCursor.\", e);\n          delegate.onFetchFailed(e, null);\n          return;\n        }\n      } finally {\n        Logger.trace(LOG_TAG, \"Closing cursor after fetch.\");\n        cursor.close();\n      }\n    }\n"}, {"dataset": "cursorClose", "exampleID": 1215, "initialization": ["Cursor cursor = DatabaseHelper.getReadableDatabase()"], "initializationStart": [298], "initializationEnd": [342], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)"], "configurationStart": [481], "configurationEnd": [498], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 522, "focalAPIEnd": 536, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/packages-apps-Gallery2/tree/master/gallerycommon/src/com/android/gallery3d/common/FileCache.java", "rawCode": "  private synchronized void initialize() {\n    if (mInitialized) return;\n\n    if (!mRootDir.isDirectory()) {\n      mRootDir.mkdirs();\n      if (!mRootDir.isDirectory()) {\n        throw new RuntimeException(\"cannot create: \" + mRootDir.getAbsolutePath());\n      }\n    }\n\n    Cursor cursor =\n        mDbHelper\n            .getReadableDatabase()\n            .query(TABLE_NAME, PROJECTION_SIZE_SUM, null, null, null, null, null);\n    try {\n      if (cursor.moveToNext()) mTotalBytes = cursor.getLong(0);\n    } finally {\n      cursor.close();\n    }\n    if (mTotalBytes > mCapacity) freeSomeSpaceIfNeed(MAX_DELETE_COUNT);\n\n    // Mark initialized when everything above went through. If an exception was thrown,\n    // initialize() will be retried later.\n    mInitialized = true;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1216, "initialization": ["Cursor cursor = query(*,String[],*,*,*)"], "initializationStart": [556], "initializationEnd": [637], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 647, "guardExpressionEnd": 672, "guardBlockStart": 647, "guardBlockEnd": 901, "focalAPI": " = cursor.close()", "focalAPIStart": 870, "focalAPIEnd": 890, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 916, "finallyExpressionEnd": 924, "finallyBlockStart": 916, "finallyBlockEnd": 948, "cleanUpCallStart": [932], "cleanUpCallEnd": [941], "url": "https://github.com/sisbell/email/tree/master/src/com/android/email/provider/EmailProvider.java", "rawCode": "  /**\n   * Pre-cache all of the items in a given table meeting the selection criteria\n   *\n   * @param tableUri the table uri\n   * @param baseProjection the base projection of that table\n   * @param selection the selection criteria\n   */\n  private void preCacheTable(Uri tableUri, String[] baseProjection, String selection) {\n    Cursor c = query(tableUri, EmailContent.ID_PROJECTION, selection, null, null);\n    try {\n      while (c.moveToNext()) {\n        long id = c.getLong(EmailContent.ID_PROJECTION_COLUMN);\n        Cursor cachedCursor =\n            query(ContentUris.withAppendedId(tableUri, id), baseProjection, null, null, null);\n        if (cachedCursor != null) {\n          // For accounts, create a mailbox type map entry (if necessary)\n          if (tableUri == Account.CONTENT_URI) {\n            getOrCreateAccountMailboxTypeMap(id);\n          }\n          cachedCursor.close();\n        }\n      }\n    } finally {\n      c.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1217, "initialization": ["Cursor cursor = query(*,*,String,String[],*)"], "initializationStart": [609], "initializationEnd": [802], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.getLong(int)"], "configurationStart": [1713, 2300, 2719, 3140], "configurationEnd": [1760, 2348, 2755, 3176], "guardCondition": "!(cursor==null)", "guardType": "IF {", "guardExpressionStart": 812, "guardExpressionEnd": 826, "guardBlockStart": 812, "guardBlockEnd": 868, "focalAPI": " = cursor.close()", "focalAPIStart": 3254, "focalAPIEnd": 3263, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Exchange/tree/master/exchange2/src/com/android/exchange/EasAccountService.java", "rawCode": "  private int parsePingResult(InputStream is, ContentResolver cr, HashMap<String, Integer> errorMap)\n      throws IOException, StaleFolderListException, IllegalHeartbeatException,\n          CommandStatusException {\n    PingParser pp = new PingParser(is, this);\n    if (pp.parse()) {\n      // True indicates some mailboxes need syncing...\n      // syncList has the serverId's of the mailboxes...\n      mBindArguments[0] = Long.toString(mAccount.mId);\n      mPingChangeList = pp.getSyncList();\n      for (String serverId : mPingChangeList) {\n        mBindArguments[1] = serverId;\n        Cursor c =\n            cr.query(\n                Mailbox.CONTENT_URI,\n                Mailbox.CONTENT_PROJECTION,\n                WHERE_ACCOUNT_KEY_AND_SERVER_ID,\n                mBindArguments,\n                null);\n        if (c == null) throw new ProviderUnavailableException();\n        try {\n          if (c.moveToFirst()) {\n\n            /**\n             * Check the boxes reporting changes to see if there really were any... We do this\n             * because bugs in various Exchange servers can put us into a looping behavior by\n             * continually reporting changes in a mailbox, even when there aren't any.\n             *\n             * <p>This behavior is seemingly random, and therefore we must code defensively by\n             * backing off of push behavior when it is detected.\n             *\n             * <p>One known cause, on certain Exchange 2003 servers, is acknowledged by Microsoft,\n             * and the server hotfix for this case can be found at\n             * http://support.microsoft.com/kb/923282\n             */\n\n            // Check the status of the last sync\n            String status = c.getString(Mailbox.CONTENT_SYNC_STATUS_COLUMN);\n            int type = ExchangeService.getStatusType(status);\n            // This check should always be true...\n            if (type == ExchangeService.SYNC_PING) {\n              int changeCount = ExchangeService.getStatusChangeCount(status);\n              if (changeCount > 0) {\n                errorMap.remove(serverId);\n              } else if (changeCount == 0) {\n                // This means that a ping reported changes in error; we keep a count\n                // of consecutive errors of this kind\n                String name = c.getString(Mailbox.CONTENT_DISPLAY_NAME_COLUMN);\n                Integer failures = errorMap.get(serverId);\n                if (failures == null) {\n                  userLog(\"Last ping reported changes in error for: \", name);\n                  errorMap.put(serverId, 1);\n                } else if (failures > MAX_PING_FAILURES) {\n                  // We'll back off of push for this box\n                  pushFallback(c.getLong(Mailbox.CONTENT_ID_COLUMN));\n                  continue;\n                } else {\n                  userLog(\"Last ping reported changes in error for: \", name);\n                  errorMap.put(serverId, failures + 1);\n                }\n              }\n            }\n\n            // If there were no problems with previous sync, we'll start another one\n            ExchangeService.startManualSync(\n                c.getLong(Mailbox.CONTENT_ID_COLUMN), ExchangeService.SYNC_PING, null);\n          }\n        } finally {\n          c.close();\n        }\n      }\n    }\n    return pp.getSyncStatus();\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1218, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [302], "initializationEnd": [374], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 516, "focalAPIEnd": 525, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [610], "useEnd": [619], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ramblurr/mp3tunes-android/tree/master/src/com/mp3tunes/android/LockerDb.java", "rawCode": "  /**\n   * @param album_id\n   * @return 0: _id 1: title 2: artist_name 3:artist_id 4:album_name 5:album_id 6:track 7:play_url\n   *     8:download_url 9:cover_url\n   */\n  public Cursor getTracksForAlbum(int album_id) {\n    System.out.println(\"querying for tracks on album: \" + album_id);\n    Cursor c = mDb.rawQuery(\"SELECT album_name FROM album WHERE _id=\" + album_id, null);\n    if (!c.moveToNext()) {\n      // TODO fetch the album?\n      Log.e(\"Mp3tunes\", \"Error album doesnt exist\");\n      return null;\n    }\n    c.close();\n\n    c = queryTracksAlbum(album_id);\n\n    if (c.getCount() > 0) return c;\n    else c.close();\n\n    try {\n      refreshTracksforAlbum(album_id);\n      return queryTracksAlbum(album_id);\n    } catch (SQLiteException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (IOException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n    return null;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1219, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getInt(int)"], "configurationStart": [270], "configurationEnd": [292], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 360, "focalAPIEnd": 380, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.close()"], "useStart": [579, 666], "useEnd": [601, 686], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/andynicholson/Vidiom/tree/master/src/au/com/infiniterecursion/vidiom/utils/DBUtils.java", "rawCode": "  public void getStats() {\n\n    genericWriteOpen();\n    String count_sql = \"SELECT count(*) FROM \" + DatabaseHelper.SDFILERECORD_TABLE_NAME;\n\n    Cursor stats_cursor = generic_write_db.rawQuery(count_sql, null);\n\n    if (stats_cursor.moveToFirst()) {\n\n      int count = stats_cursor.getInt(0);\n      Log.v(TAG, \"getStats : \" + count + \" sdrecords\");\n    }\n    stats_cursor.close();\n\n    count_sql = \"SELECT count(*) FROM \" + DatabaseHelper.HOST_TABLE_NAME;\n\n    stats_cursor = generic_write_db.rawQuery(count_sql, null);\n\n    if (stats_cursor.moveToFirst()) {\n\n      int count = stats_cursor.getInt(0);\n      Log.v(TAG, \"getStats : \" + count + \" hosts\");\n    }\n\n    stats_cursor.close();\n    close();\n\n    return;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1220, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [630], "initializationEnd": [652], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 818, "focalAPIEnd": 827, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wangshukunwsk/Inspection/tree/master/SourceCode/src/com/bchd/inspection/dal/CommonDataAccess.java", "rawCode": "  /** *********************START: TicketRoomConfig*********************************************** */\n  /*\n   * 返回全部的TicketRoom班组\n   */\n  public ArrayList<CategoryInfo> getTicketRoom() {\n    ArrayList<CategoryInfo> result = new ArrayList<CategoryInfo>();\n    SQLiteDatabase db = null;\n    CategoryInfo item = null;\n    Cursor c = null;\n\n    String sql =\n        \" SELECT DISTINCT TicketRoomID,TicketRoomName FROM View_Mobile_StaffInfo\"\n            + \" ORDER BY CDisplayOrder,HDisplayOrder,TDisplayOrder\";\n    try {\n      db = helper.getReadableDatabase();\n      Log.e(\"database\", \"CommonDataAccess getTicketRoom :open\");\n      c = db.rawQuery(sql, null);\n      while (c.moveToNext()) {\n        item = FillTicketRoom(c);\n        result.add(item);\n      }\n    } catch (Exception ex) {\n    } finally {\n      // 释放资源\n      c.close();\n      db.close();\n      Log.e(\"database\", \"CommonDataAccess getTicketRoom :close\");\n    }\n\n    return result;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1221, "initialization": ["Cursor cursor = TaskController.getBackupTaskListCursor()"], "initializationStart": [68], "initializationEnd": [108], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToNext()"], "configurationStart": [716], "configurationEnd": [730], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 737, "focalAPIEnd": 746, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kvite/astridclone/tree/master/astrid/src-legacy/com/timsu/astrid/utilities/LegacyTasksXmlExporter.java", "rawCode": "  private void serializeTasks() throws IOException {\n    Cursor c = taskController.getBackupTaskListCursor();\n    if (!c.moveToFirst()) {\n      return; // No tasks.\n    }\n    do {\n      TaskModelForXml task = new TaskModelForXml(c);\n      TaskIdentifier taskId = task.getTaskIdentifier();\n      xml.startTag(null, TASK_TAG);\n      HashMap<String, String> taskAttributes = task.getTaskAttributes();\n      for (String key : taskAttributes.keySet()) {\n        String value = taskAttributes.get(key);\n        xml.attribute(null, key, value);\n      }\n      serializeTags(taskId);\n      serializeAlerts(taskId);\n      serializeSyncMappings(taskId);\n      xml.endTag(null, TASK_TAG);\n      this.exportCount++;\n    } while (c.moveToNext());\n    c.close();\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1222, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [160], "initializationEnd": [210], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getInt(int)"], "configurationStart": [474], "configurationEnd": [509], "guardCondition": "!(cursor.moveToFirst())", "guardType": "IF {", "guardExpressionStart": 431, "guardExpressionEnd": 451, "guardBlockStart": 431, "guardBlockEnd": 609, "focalAPI": " = cursor.close()", "focalAPIStart": 632, "focalAPIEnd": 641, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmobile/themes-platform-packages-apps-Email/tree/master/src/com/android/email/activity/MessageList.java", "rawCode": "  /** Check a single account for security hold status. Do not call from UI thread. */\n  private boolean isSecurityHold(long accountId) {\n    Cursor c =\n        MessageList.this\n            .getContentResolver()\n            .query(\n                ContentUris.withAppendedId(Account.CONTENT_URI, accountId),\n                ACCOUNT_INFO_PROJECTION,\n                null,\n                null,\n                null);\n    try {\n      if (c.moveToFirst()) {\n        int flags = c.getInt(ACCOUNT_INFO_COLUMN_FLAGS);\n        if ((flags & Account.FLAGS_SECURITY_HOLD) != 0) {\n          return true;\n        }\n      }\n    } finally {\n      c.close();\n    }\n    return false;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1223, "initialization": ["Cursor cursor = query(*,*,String,*,String)"], "initializationStart": [211], "initializationEnd": [277], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnCount()", "cursor.getColumnNames()"], "configurationStart": [299, 393], "configurationEnd": [325, 419], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 717, "focalAPIEnd": 734, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TimotheeJeannin/ProviGen/tree/master/ProviGenTests/src/com/tjeannin/provigen/test/basis/SimpleContentProviderTest.java", "rawCode": "  public void testUpgradeFromContractOneToTwo() {\n\n    contentResolver.insert(ContractOne.CONTENT_URI, getContentValues(ContractOne.class));\n\n    // Check database fits ContractOne.\n    final Cursor cursorOne = contentResolver.query(ContractOne.CONTENT_URI, null, \"\", null, \"\");\n    assertEquals(2, cursorOne.getColumnCount());\n    final List<String> columnNameListContractOne = Arrays.asList(cursorOne.getColumnNames());\n    assertTrue(columnNameListContractOne.contains(ContractOne._ID));\n    assertTrue(columnNameListContractOne.contains(ContractOne.MY_INT));\n    assertFalse(columnNameListContractOne.contains(ContractTwo.MY_REAL));\n    assertFalse(columnNameListContractOne.contains(ContractTwo.MY_STRING));\n    cursorOne.close();\n\n    final List<String> columnsContractOne = getTableFields(ContractOne.CONTENT_URI);\n    assertEquals(2, columnsContractOne.size());\n    assertTrue(columnsContractOne.contains(ContractOne._ID));\n    assertTrue(columnsContractOne.contains(ContractOne.MY_INT));\n    assertFalse(columnsContractOne.contains(ContractTwo.MY_REAL));\n    assertFalse(columnsContractOne.contains(ContractTwo.MY_STRING));\n\n    resetContractClasses(new Class[] {ContractTwo.class});\n\n    // Check database fits ContractTwo.\n    final Cursor cursorTwo = contentResolver.query(ContractTwo.CONTENT_URI, null, \"\", null, \"\");\n    assertEquals(4, cursorTwo.getColumnCount());\n    final List<String> columnNameListContractTwo = Arrays.asList(cursorTwo.getColumnNames());\n    assertTrue(columnNameListContractTwo.contains(ContractTwo._ID));\n    assertTrue(columnNameListContractTwo.contains(ContractTwo.MY_INT));\n    assertTrue(columnNameListContractTwo.contains(ContractTwo.MY_REAL));\n    assertTrue(columnNameListContractTwo.contains(ContractTwo.MY_STRING));\n    cursorTwo.close();\n\n    final List<String> columnsContractTwo = getTableFields(ContractTwo.CONTENT_URI);\n    assertEquals(4, columnsContractTwo.size());\n    assertTrue(columnsContractTwo.contains(ContractTwo._ID));\n    assertTrue(columnsContractTwo.contains(ContractTwo.MY_INT));\n    assertTrue(columnsContractTwo.contains(ContractTwo.MY_REAL));\n    assertTrue(columnsContractTwo.contains(ContractTwo.MY_STRING));\n\n    assertEquals(\n        ContractOne.CONTENT_URI.getLastPathSegment(), ContractTwo.CONTENT_URI.getLastPathSegment());\n    assertTrue(columnsContractTwo.containsAll(columnsContractOne));\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1224, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [375], "initializationEnd": [400], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)"], "configurationStart": [480], "configurationEnd": [499], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 505, "focalAPIEnd": 519, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Temp1ar/WhereIsMyMoney/tree/master/src/ru/spbau/WhereIsMyMoney2/storage/CardNameSource.java", "rawCode": "  public String getName(String id) {\n    SQLiteDatabase dbR = helper.getReadableDatabase();\n\n    String query =\n        \"SELECT \"\n            + CardNameHelper.COLUMN_NAME\n            + \" FROM \"\n            + CardNameHelper.TABLE_NAME\n            + \" WHERE \"\n            + CardNameHelper.COLUMN_ID\n            + \" = '\"\n            + id\n            + \"'\";\n\n    Cursor cursor = dbR.rawQuery(query, null);\n\n    if (!cursor.moveToFirst()) {\n      return null;\n    }\n\n    String name = cursor.getString(0);\n    cursor.close();\n    dbR.close();\n    return name;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1225, "initialization": ["Cursor cursor = query(Uri,String[],*,*,String)"], "initializationStart": [1197], "initializationEnd": [1258], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.getInt(int)"], "configurationStart": [1307, 1376, 1452, 1915, 2078], "configurationEnd": [1359, 1430, 1511, 1932, 2095], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 2118, "focalAPIEnd": 2132, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/okey666/BBC-News-Reader/tree/master/src/com/digitallizard/bbcnewsreader/data/DatabaseHandler.java", "rawCode": "  /**\n   * Fetches all the undownloaded items from the last \"days\" days. Returns an array containing the\n   * item Ids of all these items\n   *\n   * @param days Number of days into the past to return undownloaded items for (Using timestamp from\n   *     entry)\n   * @return A 2d int[2][n], where 2 is the type of item and n is the number of undownloaded items\n   *     of that type. type is either 0 or 1 for html, and thumbnail respectively.\n   */\n  public Integer[][] getUndownloaded(int numItems) {\n    // query the content provider for undownloaded items\n    Uri uri =\n        Uri.withAppendedPath(\n            DatabaseProvider.CONTENT_URI_UNDOWNLOADED_ITEMS, Integer.toString(numItems));\n    String[] projection =\n        new String[] {\n          DatabaseHelper.COLUMN_ITEM_ID,\n          DatabaseHelper.COLUMN_ITEM_HTML,\n          DatabaseHelper.COLUMN_ITEM_THUMBNAIL\n        };\n    String sortOrder =\n        DatabaseHelper.RELATIONSHIP_TABLE\n            + \".\"\n            + DatabaseHelper.COLUMN_RELATIONSHIP_PRIORITY\n            + \" ASC, \"\n            + DatabaseHelper.ITEM_TABLE\n            + \".\"\n            + DatabaseHelper.COLUMN_ITEM_PUBDATE\n            + \" DESC\";\n    Cursor cursor = contentResolver.query(uri, projection, null, null, sortOrder);\n\n    // get the column name index\n    int id = cursor.getColumnIndex(DatabaseHelper.COLUMN_ITEM_ID);\n    int html = cursor.getColumnIndex(DatabaseHelper.COLUMN_ITEM_HTML);\n    int thumbnail = cursor.getColumnIndex(DatabaseHelper.COLUMN_ITEM_THUMBNAIL);\n\n    // create lists to save the arrays to\n    ArrayList<Integer> undownloadedArticles = new ArrayList<Integer>();\n    ArrayList<Integer> undownloadedThumbnails = new ArrayList<Integer>();\n\n    // loop through and save what needs to be loaded\n    while (cursor.moveToNext()) {\n      // check if we need to load this article\n      if (cursor.isNull(html)) {\n        undownloadedArticles.add(new Integer(cursor.getInt(id)));\n      }\n      // check if we need to load this thumbnail\n      if (cursor.isNull(thumbnail)) {\n        undownloadedThumbnails.add(new Integer(cursor.getInt(id)));\n      }\n    }\n\n    cursor.close();\n\n    // convert the array lists into a 2d array\n    Integer[][] values = new Integer[2][];\n    values[COLUMN_UNDOWNLOADED_ARTICLES] =\n        undownloadedArticles.toArray(new Integer[undownloadedArticles.size()]);\n    values[COLUMN_UNDOWNLOADED_THUMBNAILS] =\n        undownloadedThumbnails.toArray(new Integer[undownloadedThumbnails.size()]);\n\n    return values;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1226, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [518], "initializationEnd": [538], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 1021, "focalAPIEnd": 1035, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mikegr/android-shuffle/tree/master/client/src/org/dodgybits/shuffle/android/preference/activity/PreferencesRestoreBackupActivity.java", "rawCode": "    /**\n     * Attempts to match existing contexts against a list of context names.\n     *\n     * @return any matching contexts in a Map, keyed on the context name\n     */\n    private Map<String, Project> fetchProjectsByName(Collection<String> names) {\n      Map<String, Project> projects = new HashMap<String, Project>();\n      if (names.size() > 0) {\n        String params = StringUtils.repeat(names.size(), \"?\", \",\");\n        String[] paramValues = names.toArray(new String[0]);\n        Cursor cursor =\n            getContentResolver()\n                .query(\n                    ProjectProvider.Projects.CONTENT_URI,\n                    ProjectProvider.Projects.FULL_PROJECTION,\n                    ProjectProvider.Projects.NAME + \" IN (\" + params + \")\",\n                    paramValues,\n                    ProjectProvider.Projects.NAME + \" ASC\");\n        while (cursor.moveToNext()) {\n          Project project = mProjectPersister.read(cursor);\n          projects.put(project.getName(), project);\n        }\n        cursor.close();\n      }\n      return projects;\n    }\n"}, {"dataset": "cursorClose", "exampleID": 1227, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [958], "initializationEnd": [982], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)"], "configurationStart": [1152], "configurationEnd": [1169], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 1213, "guardExpressionEnd": 1232, "guardBlockStart": 1213, "guardBlockEnd": 1248, "focalAPI": " = cursor.close()", "focalAPIStart": 1233, "focalAPIEnd": 1247, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kwatson7/ShareBear/tree/master/src/com/instantPhotoShare/Adapters/UsersAdapter2.java", "rawCode": "  /**\n   * Return the contact id from the google address book. <br>\n   * This searches the contacts database to confirm we have the correct id, so it can be slow. If\n   * the contactId stored in this database is incorrect, it will be updated.\n   *\n   * @return the contacts Id\n   */\n  public long getContactDatabaseRowId() {\n\n    if (!checkCursor()) return -1;\n\n    // just use the current contactId if there is no lookupKey\n    if (getLookupKey().length() == 0) return getLong(KEY_CONTACTS_ROW_ID);\n\n    // keep track of original row id\n    long originalId = getLong(KEY_CONTACTS_ROW_ID);\n\n    // if we have a lookup key, then use it to search database\n    Uri uri = ContactsContract.Contacts.getLookupUri(getLong(KEY_CONTACTS_ROW_ID), getLookupKey());\n    Uri uri2 = ContactsContract.Contacts.lookupContact(ctx.getContentResolver(), uri);\n    String[] projection = {ContactsContract.Contacts._ID, ContactsContract.Contacts.LOOKUP_KEY};\n    Cursor cursor = ctx.getContentResolver().query(uri2, projection, null, null, null);\n\n    // read the id\n    long id = -1;\n    String lookupKey = \"\";\n    if (cursor != null && cursor.moveToFirst()) {\n      id = cursor.getLong(0);\n      lookupKey = getString(1);\n    }\n    if (cursor != null) cursor.close();\n\n    // if we have a changed id, then we need to update.\n    if (originalId != id) {\n      setContactIdAndLookupKey(getRowId(), id, lookupKey);\n    }\n\n    // return the value\n    return id;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1228, "initialization": ["Cursor cursor = rawQuery(*,*)"], "initializationStart": [193], "initializationEnd": [234], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)"], "configurationStart": [311, 391, 465], "configurationEnd": [360, 440, 513], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 1013, "focalAPIEnd": 1027, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/javroch/android_packages_providers_ContactsProvider/tree/master/src/com/android/providers/contacts/LegacyApiSupport.java", "rawCode": "  /** Brings legacy settings table in sync with the new settings. */\n  public void copySettingsToLegacySettings() {\n    SQLiteDatabase db = mDbHelper.getWritableDatabase();\n    Cursor cursor = db.rawQuery(SettingsMatchQuery.SQL, null);\n    try {\n      while (cursor.moveToNext()) {\n        String accountName = cursor.getString(SettingsMatchQuery.ACCOUNT_NAME);\n        String accountType = cursor.getString(SettingsMatchQuery.ACCOUNT_TYPE);\n        String value = cursor.getString(SettingsMatchQuery.SHOULD_SYNC);\n        mValues.clear();\n        mValues.put(android.provider.Contacts.Settings._SYNC_ACCOUNT, accountName);\n        mValues.put(android.provider.Contacts.Settings._SYNC_ACCOUNT_TYPE, accountType);\n        mValues.put(\n            android.provider.Contacts.Settings.KEY,\n            android.provider.Contacts.Settings.SYNC_EVERYTHING);\n        mValues.put(android.provider.Contacts.Settings.VALUE, value);\n        updateSetting(db, accountName, accountType, mValues);\n      }\n    } finally {\n      cursor.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1229, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [548], "initializationEnd": [592], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)"], "configurationStart": [785], "configurationEnd": [804], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 689, "guardExpressionEnd": 708, "guardBlockStart": 689, "guardBlockEnd": 941, "focalAPI": " = cursor.close()", "focalAPIStart": 848, "focalAPIEnd": 862, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/java/android/webkit/WebViewCore.java", "rawCode": "  /**\n   * Called by JNI. Open a file chooser to upload a file.\n   *\n   * @param acceptType The value of the 'accept' attribute of the input tag associated with this\n   *     file picker.\n   * @return String version of the URI.\n   */\n  private String openFileChooser(String acceptType) {\n    Uri uri = mCallbackProxy.openFileChooser(acceptType);\n    if (uri != null) {\n      String filePath = \"\";\n      // Note - querying for MediaStore.Images.Media.DATA\n      // seems to work for all content URIs, not just images\n      Cursor cursor =\n          mContext\n              .getContentResolver()\n              .query(uri, new String[] {MediaStore.Images.Media.DATA}, null, null, null);\n      if (cursor != null) {\n        try {\n          if (cursor.moveToNext()) {\n            filePath = cursor.getString(0);\n          }\n        } finally {\n          cursor.close();\n        }\n      } else {\n        filePath = uri.getLastPathSegment();\n      }\n      String uriString = uri.toString();\n      BrowserFrame.sJavaBridge.storeFilePathForContentUri(filePath, uriString);\n      return uriString;\n    }\n    return \"\";\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1230, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [4284], "initializationEnd": [4312], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 4578, "focalAPIEnd": 4591, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openintents/filemanager/tree/master/FileManager/src/org/openintents/filemanager/util/MenuUtils.java", "rawCode": "  /**\n   * Central point where we handle actions for single selection, for every API level.\n   *\n   * @param mItem The selected menu option/action.\n   * @param fItem The data to act upon.\n   */\n  public static boolean handleSingleSelectionAction(\n      final SimpleFileListFragment navigator, MenuItem mItem, FileHolder fItem, Context context) {\n    DialogFragment dialog;\n    Bundle args;\n\n    switch (mItem.getItemId()) {\n      case R.id.menu_open:\n        navigator.openInformingPathBar(fItem);\n        return true;\n\n      case R.id.menu_create_shortcut:\n        createShortcut(fItem, context);\n        return true;\n\n      case R.id.menu_move:\n        ((FileManagerApplication) navigator.getActivity().getApplication())\n            .getCopyHelper()\n            .cut(fItem);\n        navigator.updateClipboardInfo();\n\n        // Refresh options menu\n        navigator.getActivity().supportInvalidateOptionsMenu();\n        return true;\n\n      case R.id.menu_copy:\n        ((FileManagerApplication) navigator.getActivity().getApplication())\n            .getCopyHelper()\n            .copy(fItem);\n        navigator.updateClipboardInfo();\n\n        // Refresh options menu\n        navigator.getActivity().supportInvalidateOptionsMenu();\n        return true;\n\n      case R.id.menu_delete:\n        dialog = new SingleDeleteDialog();\n        dialog.setTargetFragment(navigator, 0);\n        args = new Bundle();\n        args.putParcelable(FileManagerIntents.EXTRA_DIALOG_FILE_HOLDER, fItem);\n        dialog.setArguments(args);\n        dialog.show(navigator.getFragmentManager(), SingleDeleteDialog.class.getName());\n        return true;\n\n      case R.id.menu_rename:\n        dialog = new RenameDialog();\n        dialog.setTargetFragment(navigator, 0);\n        args = new Bundle();\n        args.putParcelable(FileManagerIntents.EXTRA_DIALOG_FILE_HOLDER, fItem);\n        dialog.setArguments(args);\n        dialog.show(navigator.getFragmentManager(), RenameDialog.class.getName());\n        return true;\n\n      case R.id.menu_send:\n        sendFile(fItem, context);\n        return true;\n\n      case R.id.menu_details:\n        dialog = new DetailsDialog();\n        dialog.setTargetFragment(navigator, 0);\n        args = new Bundle();\n        args.putParcelable(FileManagerIntents.EXTRA_DIALOG_FILE_HOLDER, fItem);\n        dialog.setArguments(args);\n        dialog.show(navigator.getFragmentManager(), DetailsDialog.class.getName());\n        return true;\n\n      case R.id.menu_compress:\n        dialog = new SingleCompressDialog();\n        dialog.setTargetFragment(navigator, 0);\n        args = new Bundle();\n        args.putParcelable(FileManagerIntents.EXTRA_DIALOG_FILE_HOLDER, fItem);\n        dialog.setArguments(args);\n        dialog.show(navigator.getFragmentManager(), SingleCompressDialog.class.getName());\n        return true;\n\n      case R.id.menu_extract:\n        File dest =\n            new File(\n                fItem.getFile().getParentFile(),\n                FileUtils.getNameWithoutExtension(fItem.getFile()));\n        dest.mkdirs();\n\n        // Changed from the previous behavior.\n        // We just extract on the current directory. If the user needs to put it in another dir,\n        // he/she can copy/cut the file with the new, equally easy to use way.\n        new ExtractManager(context)\n            .setOnExtractFinishedListener(\n                new ExtractManager.OnExtractFinishedListener() {\n\n                  @Override\n                  public void extractFinished() {\n                    navigator.refresh();\n                  }\n                })\n            .extract(fItem.getFile(), dest.getAbsolutePath());\n        return true;\n\n      case R.id.menu_bookmark:\n        String path = fItem.getFile().getAbsolutePath();\n        Cursor query =\n            context\n                .getContentResolver()\n                .query(\n                    BookmarksProvider.CONTENT_URI,\n                    new String[] {BookmarksProvider._ID},\n                    BookmarksProvider.PATH + \"=?\",\n                    new String[] {path},\n                    null);\n        if (!query.moveToFirst()) {\n          ContentValues values = new ContentValues();\n          values.put(BookmarksProvider.NAME, fItem.getName());\n          values.put(BookmarksProvider.PATH, path);\n          context.getContentResolver().insert(BookmarksProvider.CONTENT_URI, values);\n          Toast.makeText(context, R.string.bookmark_added, Toast.LENGTH_SHORT).show();\n        } else {\n          Toast.makeText(context, R.string.bookmark_already_exists, Toast.LENGTH_SHORT).show();\n        }\n        query.close();\n        return true;\n\n      case R.id.menu_more:\n        if (!PreferenceActivity.getShowAllWarning(context)) {\n          showMoreCommandsDialog(fItem, context);\n          return true;\n        }\n        showWarningDialog(fItem, context);\n\n        return true;\n    }\n\n    return false;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1231, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [226], "initializationEnd": [267], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToFirst()", "guardType": "IF {", "guardExpressionStart": 654, "guardExpressionEnd": 676, "guardBlockStart": 654, "guardBlockEnd": 1002, "focalAPI": " = cursor.close()", "focalAPIStart": 960, "focalAPIEnd": 971, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [1008], "useEnd": [1019], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tinfoilhat/tinfoil-sms/tree/master/src/com/tinfoil/sms/database/DBAccessor.java", "rawCode": "  /**\n   * Used to retrieve the book paths\n   *\n   * @param reference The id of the contact\n   * @return The book path, and the book inverse path\n   */\n  public String[] getBookPath(long reference) {\n\n    Cursor cur =\n        context\n            .getContentResolver()\n            .query(\n                DatabaseProvider.BOOK_PATHS_CONTENT_URI,\n                new String[] {\n                  SQLitehelper.KEY_REFERENCE,\n                  SQLitehelper.KEY_BOOK_PATH,\n                  SQLitehelper.KEY_BOOK_INVERSE_PATH\n                },\n                SQLitehelper.KEY_REFERENCE + \" = \" + reference,\n                null,\n                null);\n\n    if (cur.moveToFirst()) {\n      // Found the reference number in the database\n      String bookPaths[] =\n          new String[] {\n            cur.getString(cur.getColumnIndex(SQLitehelper.KEY_BOOK_PATH)),\n            cur.getString(cur.getColumnIndex(SQLitehelper.KEY_BOOK_INVERSE_PATH))\n          };\n\n      cur.close();\n      return bookPaths;\n    }\n\n    cur.close();\n    return new String[] {DEFAULT_BOOK_PATH, DEFAULT_BOOK_INVERSE_PATH};\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1232, "initialization": ["Cursor cursor = query(*,*,*,*,*)"], "initializationStart": [630], "initializationEnd": [710], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)"], "configurationStart": [839], "configurationEnd": [858], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 903, "focalAPIEnd": 917, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jakenjarvis/Android-OrmLiteContentProvider/tree/master/ormlite-content-provider-library-test/src/com/tojc/ormlite/android/TestOrmLiteSimpleProvider.java", "rawCode": "  public void testContentProviderAcquisition() throws RemoteException {\n    // given\n    Account account1 = new Account(TEST_NAME_1);\n    Account account2 = new Account(TEST_NAME_2);\n    RuntimeExceptionDao<Account, Integer> simpleDao =\n        getHelper().getRuntimeExceptionDao(Account.class);\n    simpleDao.create(account1);\n    simpleDao.create(account2);\n    List<Account> accountList = simpleDao.queryForAll();\n    assertEquals(2, accountList.size());\n\n    // when\n    ContentProviderClient contentProviderClient =\n        this.resolver.acquireContentProviderClient(AccountContract.CONTENT_URI);\n    Cursor cursor =\n        contentProviderClient.query(AccountContract.CONTENT_URI, null, null, null, null);\n\n    // then\n    accountList = new ArrayList<Account>();\n    while (cursor.moveToNext()) {\n      Account account = new Account(cursor.getString(1));\n      accountList.add(account);\n    }\n    cursor.close();\n    contentProviderClient.release();\n\n    assertEquals(2, accountList.size());\n    assertEquals(TEST_NAME_1, accountList.get(0).getName());\n    assertEquals(TEST_NAME_2, accountList.get(1).getName());\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1233, "initialization": ["Cursor cursor = query(String,String[],*,*,String,*,*)"], "initializationStart": [1034], "initializationEnd": [1091], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getInt(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.getString(int)", "cursor.getInt(int)"], "configurationStart": [1408, 1457, 1514, 1576, 2669], "configurationEnd": [1424, 1476, 1531, 1595, 2685], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 2785, "guardExpressionEnd": 2804, "guardBlockStart": 2785, "guardBlockEnd": 2842, "focalAPI": " = cursor.close()", "focalAPIStart": 2817, "focalAPIEnd": 2831, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nolanlawson/KeepScore/tree/master/KeepScore/src/com/nolanlawson/keepscore/db/GameDBHelper.java", "rawCode": "  public List<GameSummary> findAllGameSummaries() {\n    synchronized (GameDBHelper.class) {\n      String[] columns = {\n        \"g.\" + COLUMN_ID,\n        \"g.\" + COLUMN_NAME,\n        \"g.\" + COLUMN_DATE_SAVED,\n        // player names; the \"separator\" is a trick to ensure that we can cleanly separate the\n        // response,\n        // and put it into the proper order, since group_concat is always unordered in sqlite\n        \"group_concat((ps.name || '\"\n            + GROUP_CONCAT_INNER_SEPARATOR\n            + \"' || ps.playerNumber), '\"\n            + GROUP_CONCAT_SEPARATOR\n            + \"')\",\n        \"max(length(ps.history) - length(replace(ps.history, ',', '')) + 1)\" // num rounds\n      };\n\n      String table =\n          TABLE_GAMES\n              + \" g join \"\n              + TABLE_PLAYER_SCORES\n              + \" ps \"\n              + \" on g.\"\n              + COLUMN_ID\n              + \" = ps.\"\n              + COLUMN_GAME_ID;\n      String groupBy = \"g.\" + COLUMN_ID;\n\n      Cursor cursor = null;\n\n      try {\n\n        cursor = db.query(table, columns, null, null, groupBy, null, null);\n\n        List<GameSummary> result = new ArrayList<GameSummary>();\n\n        // re-use sparse array for performance\n        SparseArray<String> playerNumbersToNames = new SparseArray<String>();\n\n        while (cursor.moveToNext()) {\n          GameSummary gameSummary = new GameSummary();\n\n          gameSummary.setId(cursor.getInt(0));\n          gameSummary.setName(cursor.getString(1));\n          gameSummary.setDateSaved(cursor.getLong(2));\n\n          String playerNumbersAndNames = cursor.getString(3);\n          // sort by player number, get player names in order (no way to do this in sqlite,\n          // unfortunately)\n\n          playerNumbersToNames.clear();\n          for (String playerNumberAndName :\n              StringUtil.split(playerNumbersAndNames, GROUP_CONCAT_SEPARATOR)) {\n            int idx = playerNumberAndName.indexOf(GROUP_CONCAT_INNER_SEPARATOR);\n            String playerName = playerNumberAndName.substring(0, idx);\n            int playerNumber =\n                Integer.parseInt(\n                    playerNumberAndName.substring(idx + GROUP_CONCAT_INNER_SEPARATOR.length()));\n            playerNumbersToNames.put(playerNumber, playerName);\n          }\n          List<String> playerNames = new ArrayList<String>(playerNumbersToNames.size());\n          for (int i = 0, len = playerNumbersToNames.size(); i < len; i++) {\n            int playerNumber = playerNumbersToNames.keyAt(i);\n            playerNames.add(playerNumbersToNames.get(playerNumber));\n          }\n          gameSummary.setPlayerNames(playerNames);\n\n          gameSummary.setNumRounds(cursor.getInt(4));\n\n          result.add(gameSummary);\n        }\n\n        return result;\n\n      } finally {\n        if (cursor != null) {\n          cursor.close();\n        }\n      }\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1234, "initialization": ["Cursor cursor = query(boolean,String,*,*,*,*,*,String,*)"], "initializationStart": [285], "initializationEnd": [520], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(cursor==null) && !(cursor.moveToFirst())", "guardType": "IF {", "guardExpressionStart": 545, "guardExpressionEnd": 564, "guardBlockStart": 545, "guardBlockEnd": 579, "focalAPI": " = cursor.close()", "focalAPIStart": 619, "focalAPIEnd": 633, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Group(cursor)", "cursor.close()"], "useStart": [975, 1023], "useEnd": [992, 1037], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kwatson7/ShareBear/tree/master/src/com/instantPhotoShare/Adapters/GroupsAdapter.java", "rawCode": "  /**\n   * Return a group for the given rowId\n   *\n   * @param rowId id of group to retrieve\n   * @return Group object, null if none found at rowId\n   */\n  public Group getGroup(long rowId) {\n\n    // default\n    Group output = null;\n\n    // grab the cursor\n    Cursor cursor =\n        database.query(\n            true,\n            TABLE_NAME,\n            null,\n            KEY_ROW_ID + \"='\" + rowId + \"'\" + ADDITIONAL_QUERY,\n            null,\n            null,\n            null,\n            SORT_ORDER,\n            null);\n\n    // check null\n    if (cursor == null) return output;\n    if (!cursor.moveToFirst()) {\n      cursor.close();\n      return output;\n    }\n\n    // check if we are accessing more than one row, this shouuldn't happen\n    if (cursor.getCount() > 1 && !Prefs.debug.allowMultipleUpdates)\n      throw new IllegalArgumentException(\n          \"attempting to access more than one row. This should never happen\");\n\n    // make the group from cursor\n    output = new Group(cursor);\n\n    // close and return\n    cursor.close();\n    return output;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1235, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [204], "initializationEnd": [249], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getInt(int)"], "configurationStart": [308], "configurationEnd": [319], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 331, "focalAPIEnd": 340, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/racamirko/Common-Sense-Net-2/tree/master/RealFarm/src/com/commonsensenet/realfarm/dataaccess/RealFarmProvider.java", "rawCode": "  public int getResourceImageById(long resId, String table, String field) {\n    final String MY_QUERY = \"SELECT \" + field + \" FROM \" + table + \" WHERE id = \" + resId;\n    mDatabase.open();\n    Cursor c = mDatabase.rawQuery(MY_QUERY, new String[] {});\n    int res = -1;\n    if (c.moveToFirst()) {\n      res = c.getInt(0);\n    }\n    c.close();\n    mDatabase.close();\n    return res;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1236, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [101], "initializationEnd": [144], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()"], "configurationStart": [377], "configurationEnd": [396], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 420, "guardExpressionEnd": 438, "guardBlockStart": 420, "guardBlockEnd": 471, "focalAPI": " = cursor.close()", "focalAPIStart": 449, "focalAPIEnd": 462, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BobEvans/omgpaco/tree/master/Paco/src/com/google/android/apps/paco/ExperimentProviderUtil.java", "rawCode": "  public boolean hasJoinedExperiments() {\n    Cursor query = null;\n    try {\n      query =\n          context\n              .getContentResolver()\n              .query(\n                  ExperimentColumns.JOINED_EXPERIMENTS_CONTENT_URI,\n                  new String[] {ExperimentColumns._ID},\n                  null,\n                  null,\n                  null);\n      return query.moveToFirst();\n    } finally {\n      if (query != null) {\n        query.close();\n      }\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1237, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 32, "guardExpressionEnd": 56, "guardBlockStart": 32, "guardBlockEnd": 91, "focalAPI": " = cursor.close()", "focalAPIStart": 65, "focalAPIEnd": 84, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thevoiceless/CSCI498/tree/master/LunchList/src/csci498/thevoiceless/lunchlist/LunchFragment.java", "rawCode": "  private void initList() {\n    if (restaurants != null) {\n      restaurants.close();\n    }\n\n    restaurants = dbHelper.getAll(prefs.getString(\"sort_order\", \"name\"));\n    setAdapters();\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1238, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [462], "initializationEnd": [490], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getInt(int)"], "configurationStart": [596, 664, 730, 774], "configurationEnd": [641, 709, 757, 797], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 835, "focalAPIEnd": 849, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/minstrelsy/servestream/tree/master/src/net/sourceforge/servestream/utils/MusicUtils.java", "rawCode": "  private static Map<String, Integer> retrieveAllRows(Context context) {\n    Map<String, Integer> list = new HashMap<String, Integer>();\n\n    // Form an array specifying which columns to return.\n    String[] projection = new String[] {Media.MediaColumns._ID, Media.MediaColumns.URI};\n\n    // Get the base URI for the Media Files table in the Media content provider.\n    Uri mediaFile = Media.MediaColumns.CONTENT_URI;\n\n    // Make the query.\n    Cursor cursor = context.getContentResolver().query(mediaFile, projection, null, null, null);\n\n    while (cursor.moveToNext()) {\n      int uriColumn = cursor.getColumnIndex(Media.MediaColumns.URI);\n      int idColumn = cursor.getColumnIndex(Media.MediaColumns._ID);\n      String uri = cursor.getString(uriColumn);\n      int id = cursor.getInt(idColumn);\n      list.put(uri, id);\n    }\n\n    cursor.close();\n\n    return list;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1239, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [435], "initializationEnd": [463], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndexOrThrow(String)", "cursor.moveToFirst()", "cursor.getString(int)"], "configurationStart": [555, 623, 667], "configurationEnd": [613, 643, 696], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 507, "guardExpressionEnd": 526, "guardBlockStart": 507, "guardBlockEnd": 730, "focalAPI": " = cursor.close()", "focalAPIStart": 707, "focalAPIEnd": 721, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TianziHou/tzPalette/tree/master/src/com/tzapps/common/utils/UriUtils.java", "rawCode": "  /**\n   * Get a uri's user-friendly display name\n   *\n   * @param context the application context\n   * @param uri the uri to query\n   * @return a user-friendly display name\n   */\n  public static String getUriDisplayName(Context context, Uri uri) {\n    String displayName = null;\n\n    String scheme = uri.getScheme();\n\n    if (scheme.startsWith(\"content\")) {\n      String[] proj = {OpenableColumns.DISPLAY_NAME};\n      Cursor cursor = context.getContentResolver().query(uri, proj, null, null, null);\n\n      if (cursor != null) {\n        int columnIndex = cursor.getColumnIndexOrThrow(OpenableColumns.DISPLAY_NAME);\n        cursor.moveToFirst();\n        displayName = cursor.getString(columnIndex);\n\n        cursor.close();\n      }\n    } else if (scheme.startsWith(\"file\")) {\n      displayName = uri.getLastPathSegment();\n    }\n\n    return displayName;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1240, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [679], "initializationEnd": [707], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 868, "focalAPIEnd": 882, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MythTV-Clients/MythTV-Android-Frontend/tree/master/src/org/mythtv/service/content/v25/LiveStreamHelperV25.java", "rawCode": "  public LiveStreamInfo findLiveStream(\n      final Context context, final LocationProfile locationProfile, final Long id) {\n    Log.d(TAG, \"findLiveStream : enter\");\n\n    String projection[] = null;\n    String selection = LiveStreamConstants.FIELD_ID + \" = ?\";\n    String[] selectionArgs = new String[] {String.valueOf(id)};\n\n    LiveStreamInfo liveStreamInfo = null;\n\n    Uri uri = LiveStreamConstants.CONTENT_URI;\n    if (null != id && id > 0) {\n      uri = ContentUris.withAppendedId(LiveStreamConstants.CONTENT_URI, id);\n    }\n\n    selection =\n        appendLocationHostname(context, locationProfile, selection, LiveStreamConstants.TABLE_NAME);\n\n    Cursor cursor =\n        context.getContentResolver().query(uri, projection, selection, selectionArgs, null);\n    if (cursor.moveToFirst()) {\n      liveStreamInfo = convertCursorToLiveStreamInfo(cursor);\n    }\n    cursor.close();\n\n    Log.d(TAG, \"findLiveStream : exit\");\n    return liveStreamInfo;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1241, "initialization": ["Cursor cursor = getAccountList()"], "initializationStart": [55], "initializationEnd": [71], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [89], "configurationEnd": [108], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 115, "focalAPIEnd": 131, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mbarbon/androidcash/tree/master/src/org/barbon/acash/ExpenseDatabase.java", "rawCode": "  public int getAccountCount() {\n    Cursor accounts = getAccountList();\n    int count = accounts.getCount();\n\n    accounts.close();\n\n    return count;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1242, "initialization": ["Cursor cursor = getContactByAddress(String)"], "initializationStart": [121], "initializationEnd": [154], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 161, "guardExpressionEnd": 175, "guardBlockStart": 161, "guardBlockEnd": 261, "focalAPI": " = cursor.close()", "focalAPIStart": 245, "focalAPIEnd": 254, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jca02266/k9mail/tree/master/src/com/fsck/k9/helper/ContactsSdk3_4.java", "rawCode": "  @Override\n  public boolean isInContacts(final String emailAddress) {\n    boolean result = false;\n\n    final Cursor c = getContactByAddress(emailAddress);\n\n    if (c != null) {\n      if (c.getCount() > 0) {\n        result = true;\n      }\n      c.close();\n    }\n\n    return result;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1243, "initialization": ["Cursor cursor = query(String,String[],*,*,*,*,*)"], "initializationStart": [104], "initializationEnd": [178], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()"], "configurationStart": [198], "configurationEnd": [218], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 232, "focalAPIEnd": 246, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/core/java/android/webkit/WebViewDatabase.java", "rawCode": "  boolean hasCache() {\n    if (mCacheDatabase == null) {\n      return false;\n    }\n\n    Cursor cursor = mCacheDatabase.query(\"cache\", ID_PROJECTION, null, null, null, null, null);\n    boolean ret = cursor.moveToFirst() == true;\n    cursor.close();\n    return ret;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1244, "initialization": ["Cursor cursor = query(*,String[],String,*,*)"], "initializationStart": [873], "initializationEnd": [1065], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()", "cursor.getLong(int)", "cursor.getString(int)", "cursor.moveToNext()"], "configurationStart": [1288, 1422, 1666, 1728], "configurationEnd": [1305, 1436, 1682, 1744], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 1770, "guardExpressionEnd": 1786, "guardBlockStart": 1770, "guardBlockEnd": 1817, "focalAPI": " = cursor.close()", "focalAPIStart": 1797, "focalAPIEnd": 1808, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dileepbapat/music/tree/master/src/com/android/music/MusicUtils.java", "rawCode": "  /**\n   * Fills out the given submenu with items for \"new playlist\" and any existing playlists. When the\n   * user selects an item, the application will receive PLAYLIST_SELECTED with the Uri of the\n   * selected playlist, NEW_PLAYLIST if a new playlist should be created, and QUEUE if the \"current\n   * playlist\" was selected.\n   *\n   * @param context The context to use for creating the menu items\n   * @param sub The submenu to add the items to.\n   */\n  public static void makePlaylistMenu(Context context, SubMenu sub) {\n    String[] cols = new String[] {MediaStore.Audio.Playlists._ID, MediaStore.Audio.Playlists.NAME};\n    ContentResolver resolver = context.getContentResolver();\n    if (resolver == null) {\n      System.out.println(\"resolver = null\");\n    } else {\n      String whereclause = MediaStore.Audio.Playlists.NAME + \" != ''\";\n      Cursor cur =\n          resolver.query(\n              MediaStore.Audio.Playlists.EXTERNAL_CONTENT_URI,\n              cols,\n              whereclause,\n              null,\n              MediaStore.Audio.Playlists.NAME);\n      sub.clear();\n      sub.add(1, Defs.QUEUE, 0, R.string.queue);\n      sub.add(1, Defs.NEW_PLAYLIST, 0, R.string.new_playlist);\n      if (cur != null && cur.getCount() > 0) {\n        // sub.addSeparator(1, 0);\n        cur.moveToFirst();\n        while (!cur.isAfterLast()) {\n          Intent intent = new Intent();\n          intent.putExtra(\"playlist\", cur.getLong(0));\n          // if (cur.getInt(0) == mLastPlaylistSelected) {\n          // sub.add(0, MusicBaseActivity.PLAYLIST_SELECTED, cur.getString(1)).setIntent(intent);\n          // } else {\n          sub.add(1, Defs.PLAYLIST_SELECTED, 0, cur.getString(1)).setIntent(intent);\n          // }\n          cur.moveToNext();\n        }\n      }\n      if (cur != null) {\n        cur.close();\n      }\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1245, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 70, "guardExpressionEnd": 90, "guardBlockStart": 70, "guardBlockEnd": 156, "focalAPI": " = cursor.close()", "focalAPIStart": 134, "focalAPIEnd": 149, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OMFGB/packages_apps_Mms/tree/master/src/com/android/mms/ui/ManageSimMessages.java", "rawCode": "  private void refreshMessageList() {\n    updateState(SHOW_BUSY);\n    if (mCursor != null) {\n      stopManagingCursor(mCursor);\n      mCursor.close();\n    }\n    startQuery();\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1246, "initialization": ["Cursor cursor = AndokuDatabase.findGamesBySource(String)"], "initializationStart": [64], "initializationEnd": [94], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [119], "configurationEnd": [136], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 160, "focalAPIEnd": 174, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/patzi/foss-andoku/tree/master/Andoku-Tests/src/com/googlecode/andoku/db/AndokuDatabaseSaveGameTest.java", "rawCode": "  private int countGames(String sourceId) {\n    Cursor cursor = db.findGamesBySource(sourceId);\n    try {\n      return cursor.getCount();\n    } finally {\n      cursor.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1247, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 111, "focalAPIEnd": 126, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ujayant/acal/tree/master/src/com/morphoss/acal/activity/serverconfig/ServerConfigList.java", "rawCode": "  @Override\n  public void onDestroy() {\n    super.onDestroy();\n    if (mCursor != null && !mCursor.isClosed()) mCursor.close();\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1248, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [298], "initializationEnd": [318], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 688, "focalAPIEnd": 702, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mikegr/android-shuffle/tree/master/client/src/org/dodgybits/shuffle/android/list/activity/expandable/ExpandableProjectsActivity.java", "rawCode": "  @Override\n  protected void refreshChildCount() {\n    TaskSelector selector =\n        getListConfig()\n            .getChildSelector()\n            .builderFrom()\n            .applyListPreferences(this, getListConfig().getListPreferenceSettings())\n            .build();\n\n    Cursor cursor =\n        getContentResolver()\n            .query(\n                ProjectProvider.Projects.PROJECT_TASKS_CONTENT_URI,\n                ProjectProvider.Projects.FULL_TASK_PROJECTION,\n                selector.getSelection(this),\n                selector.getSelectionArgs(),\n                selector.getSortOrder());\n    mTaskCountArray = getListConfig().getChildPersister().readCountArray(cursor);\n    cursor.close();\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1249, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [164], "initializationEnd": [193], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [215], "configurationEnd": [232], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 238, "focalAPIEnd": 252, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/marindijm/data/tree/master/_Mobile_Apps/DispenserInfoAndroidApp/src/com/dsw/dispenserapp/DbHandler.java", "rawCode": "  public int getCount(String tblName) {\n    String countQuery = \"SELECT * FROM \" + tblName;\n    SQLiteDatabase db = this.getReadableDatabase();\n    Cursor cursor = db.rawQuery(countQuery, null);\n\n    int tblCount = cursor.getCount();\n    cursor.close();\n    db.close(); // Closing database connection\n    // return count\n    return tblCount;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1250, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [450], "initializationEnd": [474], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)", "cursor.getLong(int)", "cursor.getInt(int)"], "configurationStart": [1915, 2008, 2061], "configurationEnd": [1929, 2020, 2072], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 2844, "guardExpressionEnd": 2858, "guardBlockStart": 2844, "guardBlockEnd": 2883, "focalAPI": " = cursor.close()", "focalAPIStart": 2867, "focalAPIEnd": 2876, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/krtek/Birthday-widget/tree/master/Birthday/src/main/java/cz/krtinec/birthday/data/BirthdayProvider.java", "rawCode": "  public List<EditableEvent> getEvents(Context ctx, long rawContactId) {\n    Log.i(\"Birthday\", \"Going to get events for \" + rawContactId);\n\n    String[] projection =\n        new String[] {\n          ContactsContract.CommonDataKinds.Event._ID,\n          ContactsContract.CommonDataKinds.Event.START_DATE,\n          ContactsContract.CommonDataKinds.Event.TYPE,\n          ContactsContract.CommonDataKinds.Event.LABEL,\n        };\n\n    Cursor c =\n        ctx.getContentResolver()\n            .query(\n                ContactsContract.Data.CONTENT_URI,\n                projection,\n                ContactsContract.Data.RAW_CONTACT_ID\n                    + \"= ? AND \"\n                    + ContactsContract.Data.MIMETYPE\n                    + \"= ? AND \"\n                    + \"(\"\n                    + ContactsContract.CommonDataKinds.Event.TYPE\n                    + \"=\"\n                    + ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY\n                    + \" OR \"\n                    + ContactsContract.CommonDataKinds.Event.TYPE\n                    + \"=\"\n                    + ContactsContract.CommonDataKinds.Event.TYPE_ANNIVERSARY\n                    + \" OR \"\n                    + ContactsContract.CommonDataKinds.Event.TYPE\n                    + \"=\"\n                    + ContactsContract.CommonDataKinds.Event.TYPE_CUSTOM\n                    + \" OR \"\n                    + ContactsContract.CommonDataKinds.Event.TYPE\n                    + \"=\"\n                    + ContactsContract.CommonDataKinds.Event.TYPE_OTHER\n                    + \")\",\n                new String[] {\n                  String.valueOf(rawContactId),\n                  ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE\n                },\n                null);\n\n    List<EditableEvent> events = new ArrayList<EditableEvent>();\n    while (c != null && c.moveToNext()) {\n      try {\n        ParseResult parseResult = tryParseBDay(c.getString(1));\n\n        EditableEvent evt =\n            new EditableEvent(\n                c.getLong(0),\n                EventType.getEventType(c.getInt(2)),\n                parseResult.date,\n                parseResult.integrity,\n                c.getString(3));\n\n        events.add(evt);\n\n      } catch (ParseException e) {\n        Log.i(\n            \"Birthday\",\n            \"Skipping \"\n                + c.getString(0)\n                + \" due to unparseable bday date (\"\n                + c.getString(2)\n                + \")\");\n      } catch (IllegalArgumentException e) {\n        Log.i(\n            \"Birthday\",\n            \"Skipping \"\n                + c.getString(0)\n                + \" due to unparseable bday date (\"\n                + c.getString(2)\n                + \")\");\n      } catch (NullPointerException e) {\n        Log.i(\"Birthday\", \"Skipping contact id: \" + c.getString(1) + \" due to NPE.\");\n      }\n    }\n\n    if (c != null) {\n      c.close();\n    }\n    Log.i(\"Birthday\", \"Returning \" + events);\n    return events;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1251, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 49, "guardExpressionEnd": 69, "guardBlockStart": 49, "guardBlockEnd": 100, "focalAPI": " = cursor.close()", "focalAPIStart": 78, "focalAPIEnd": 93, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mstauff/CallingWorkFlow/tree/master/src/main/java/org/lds/community/CallingWorkFlow/domain/WorkFlowDB.java", "rawCode": "  private void closeCursor(Cursor results) {\n    if (results != null) {\n      results.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1252, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 97, "guardExpressionEnd": 116, "guardBlockStart": 97, "guardBlockEnd": 302, "focalAPI": " = cursor.close()", "focalAPIStart": 230, "focalAPIEnd": 244, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/media/java/android/media/RingtoneManager.java", "rawCode": "  private static Uri getValidRingtoneUriFromCursorAndClose(Context context, Cursor cursor) {\n    if (cursor != null) {\n      Uri uri = null;\n\n      if (cursor.moveToFirst()) {\n        uri = getUriFromCursor(cursor);\n      }\n      cursor.close();\n\n      return uri;\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1253, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [248], "initializationEnd": [278], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToNext()"], "configurationStart": [408], "configurationEnd": [427], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 440, "focalAPIEnd": 454, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/phini/Android-cybercom/tree/master/RestfulClient/src/com/example/restfulclient/helpers/DatabaseHelper.java", "rawCode": "  public List<Category> getAllCats() {\n    List<Category> catList = new ArrayList<Category>();\n    // Select All Query\n    String selectQuery = \"SELECT * FROM \" + TABLE_CATS;\n\n    SQLiteDatabase db = this.getReadableDatabase();\n    Cursor cursor = db.rawQuery(selectQuery, null);\n\n    if (cursor.moveToFirst()) {\n      do {\n        Category cat = packToCat(cursor);\n\n        catList.add(cat);\n      } while (cursor.moveToNext());\n    }\n    cursor.close();\n    db.close();\n\n    return catList;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1254, "initialization": ["Cursor cursor = query(Uri,*,*,*,*)"], "initializationStart": [199], "initializationEnd": [259], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnNames()"], "configurationStart": [312], "configurationEnd": [335], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 265, "guardExpressionEnd": 284, "guardBlockStart": 265, "guardBlockEnd": 453, "focalAPI": " = cursor.close()", "focalAPIStart": 432, "focalAPIEnd": 446, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/damonkohler/sl4a/tree/master/android/Common/src/com/googlecode/android_scripting/facade/ContactsFacade.java", "rawCode": "  @Rpc(description = \"Returns a List of all possible attributes for contacts.\")\n  public List<String> contactsGetAttributes() {\n    List<String> result = new ArrayList<String>();\n    Cursor cursor = mContentResolver.query(CONTACTS_URI, null, null, null, null);\n    if (cursor != null) {\n      String[] columns = cursor.getColumnNames();\n      for (int i = 0; i < columns.length; i++) {\n        result.add(columns[i]);\n      }\n      cursor.close();\n    }\n    return result;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1255, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 213, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schoentoon/Connectbot/tree/master/src/com/schoentoon/connectbot/util/HostDatabase.java", "rawCode": "  /**\n   * @param c\n   * @return\n   */\n  private HostBean getFirstHostBean(Cursor c) {\n    HostBean host = null;\n\n    List<HostBean> hosts = createHostBeans(c);\n    if (hosts.size() > 0) host = hosts.get(0);\n\n    c.close();\n\n    return host;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1256, "initialization": ["Cursor cursor = query(boolean,String,String[],*,*,*,*,*,*)"], "initializationStart": [286], "initializationEnd": [397], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [415], "configurationEnd": [432], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 438, "focalAPIEnd": 452, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/us8560/common/src/main/java-se-android/com/funambol/storage/StringKeyValueSQLiteStore.java", "rawCode": "  /** @see StringKeyValueStore#contains(java.lang.String) */\n  public boolean contains(String key) {\n    if (dbStore == null) {\n      open();\n    }\n    StringBuffer where = new StringBuffer(KEY_COLUMN_NAME);\n    where.append(\"=\\\"\").append(key).append(\"\\\"\");\n    Cursor result =\n        dbStore.query(\n            true, tableName, QUERY_VALUE_COLUMN, where.toString(), null, null, null, null, null);\n    int count = result.getCount();\n    result.close();\n    return count > 0;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1257, "initialization": ["Cursor cursor = query(*,*,*,*,*)"], "initializationStart": [153], "initializationEnd": [267], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()", "cursor.moveToNext()"], "configurationStart": [273, 414], "configurationEnd": [293, 433], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 445, "focalAPIEnd": 459, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DVDPT/PDM/tree/master/code/src/pt/isel/adeetc/meic/pdm/controllers/TimelineContentProviderClient.java", "rawCode": "  @Override\n  public Iterable<Twitter.ITweet> getAll() {\n    List<Twitter.ITweet> tweets = new LinkedList<Twitter.ITweet>();\n    Cursor cursor =\n        _contentResolver.query(\n            TimelineContentProvider.CONTENT_URI, StatusTable.COLUMN_ALL, null, null, null);\n    cursor.moveToFirst();\n    while (!cursor.isAfterLast()) {\n      Twitter.ITweet tweet = cursorToTweet(cursor);\n      tweets.add(tweet);\n      cursor.moveToNext();\n    }\n    cursor.close();\n    return tweets;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1258, "initialization": ["Cursor cursor = query(String,*,String,*,*,*,*)"], "initializationStart": [68], "initializationEnd": [174], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.getCount()==0", "guardType": "IF {", "guardExpressionStart": 181, "guardExpressionEnd": 205, "guardBlockStart": 181, "guardBlockEnd": 275, "focalAPI": " = cursor.close()", "focalAPIStart": 214, "focalAPIEnd": 225, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToFirst()", "toSociety(cursor)", "cursor.close()"], "useStart": [257, 299, 320], "useEnd": [274, 313, 331], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/matthew117/DurhamLife-Android/tree/master/DuchessAndroid/src/uk/ac/dur/duchess/io/provider/DatabaseHandler.java", "rawCode": "  public Society getSociety(String name) {\n    Cursor row =\n        db.query(\n            SOCIETY_TABLE, null, KEY_SOCIETY_NAME + \"=\\\"\" + name + \"\\\"\", null, null, null, null);\n\n    if (row.getCount() == 0) {\n      row.close();\n      return null;\n    } else row.moveToFirst();\n\n    Society society = toSociety(row);\n\n    row.close();\n\n    return society;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1259, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [118], "initializationEnd": [160], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()", "cursor.getInt(int)"], "configurationStart": [382, 412], "configurationEnd": [397, 423], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 447, "focalAPIEnd": 456, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/droidjunk_packages_apps_Contacts/tree/master/src/com/android/contacts/detail/PhotoSelectionHandler.java", "rawCode": "  private int getPhotoPickSize() {\n    // Note that this URI is safe to call on the UI thread.\n    Cursor c =\n        mContext\n            .getContentResolver()\n            .query(\n                DisplayPhoto.CONTENT_MAX_DIMENSIONS_URI,\n                new String[] {DisplayPhoto.DISPLAY_MAX_DIM},\n                null,\n                null,\n                null);\n    try {\n      c.moveToFirst();\n      return c.getInt(0);\n    } finally {\n      c.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1260, "initialization": ["Cursor cursor = Activity.getContentResolver()"], "initializationStart": [384], "initializationEnd": [433], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 650, "focalAPIEnd": 664, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mit-cml/appinventor-sources/tree/master/appinventor/components/src/com/google/appinventor/components/runtime/ContactPicker.java", "rawCode": "  /** Email address getter for pre-Honeycomb. */\n  protected String getEmailAddress(String emailId) {\n    int id;\n    try {\n      id = Integer.parseInt(emailId);\n    } catch (NumberFormatException e) {\n      return \"\";\n    }\n\n    String data = \"\";\n    String where = \"contact_methods._id = \" + id;\n    String[] projection = {Contacts.ContactMethods.DATA};\n    Cursor cursor =\n        activityContext\n            .getContentResolver()\n            .query(Contacts.ContactMethods.CONTENT_EMAIL_URI, projection, where, null, null);\n    try {\n      if (cursor.moveToFirst()) {\n        data = guardCursorGetString(cursor, 0);\n      }\n    } finally {\n      cursor.close();\n    }\n    // this extra check for null might be redundant, but we given that there are mysterious errors\n    // on some phones, we'll leave it in just to be extra careful\n    return ensureNotNull(data);\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1261, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "DatabaseException", "exceptionHandlingCall": ["error(String,*)", "getMessage()", "new PersistenceFailureException(*,*)"], "tryExpressionStart": 56, "tryExpressionEnd": 60, "tryBlockStart": 56, "tryBlockEnd": 257, "catchExpressionStart": 110, "catchExpressionEnd": 138, "catchBlockStart": 110, "catchBlockEnd": 257, "exceptionHandlingCallStart": [146, 232, 200], "exceptionHandlingCallEnd": [186, 246, 250], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 68, "guardExpressionEnd": 87, "guardBlockStart": 68, "guardBlockEnd": 103, "focalAPI": " = cursor.close()", "focalAPIStart": 88, "focalAPIEnd": 102, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dukeboard/kevoree-extra/tree/master/org.kevoree.extra.voldemort/src/main/java/voldemort/store/bdb/BdbStorageEngine.java", "rawCode": "  private static void attemptClose(Cursor cursor) {\n    try {\n      if (cursor != null) cursor.close();\n    } catch (DatabaseException e) {\n      logger.error(\"Error closing cursor.\", e);\n      throw new PersistenceFailureException(e.getMessage(), e);\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1262, "initialization": ["Cursor cursor = query(String,String[],*,*,*,*,*)"], "initializationStart": [96], "initializationEnd": [173], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.getCount()<=0", "guardType": "IF {", "guardExpressionStart": 223, "guardExpressionEnd": 245, "guardBlockStart": 223, "guardBlockEnd": 922, "focalAPI": " = cursor.close()", "focalAPIStart": 254, "focalAPIEnd": 263, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [927], "useEnd": [936], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shlusiak/FruPic-App/tree/master/src/de/saschahlusiak/frupic/db/FrupicDB.java", "rawCode": "  public boolean addFrupic(Frupic frupic) {\n    final String fields[] = {ID_ID};\n    Cursor c = db.query(TABLE, fields, ID_ID + \"=\" + frupic.getId(), null, null, null, null);\n    /* don't add frupic with the same id */\n    if (c.getCount() <= 0) {\n      c.close();\n      ContentValues values = new ContentValues();\n\n      values.put(ID_ID, frupic.getId());\n      values.put(FULLURL_ID, frupic.getFullUrl());\n      values.put(THUMBURL_ID, frupic.getThumbUrl());\n      values.put(DATE_ID, frupic.getDate());\n      values.put(USERNAME_ID, frupic.getUsername());\n      values.put(FLAGS_ID, frupic.getFlags());\n\n      String tags_s = \"\";\n      String tags[] = frupic.getTags();\n      if (tags != null) {\n        for (int i = 0; i < tags.length - 1; i++) tags_s += tags[i] + \", \";\n        tags_s += tags[tags.length - 1];\n      }\n      values.put(TAGS_ID, tags_s);\n\n      db.insert(TABLE, null, values);\n      return true;\n    }\n    c.close();\n    return false;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1263, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [430], "initializationEnd": [460], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getLocalizedMessage()", "showMessage(String,*,Context)", "logE(String,boolean)", "printStackTrace(*,boolean)"], "tryExpressionStart": 402, "tryExpressionEnd": 406, "tryBlockStart": 402, "tryBlockEnd": 808, "catchExpressionStart": 634, "catchExpressionEnd": 654, "catchBlockStart": 634, "catchBlockEnd": 808, "exceptionHandlingCallStart": [689, 662, 728, 768], "exceptionHandlingCallEnd": [712, 720, 760, 801], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 612, "focalAPIEnd": 626, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnCount()", "cursor.close()"], "useStart": [1250, 1538], "useEnd": [1273, 1552], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tpruvot/android_packages_apps_SQLiteManager/tree/master/src/dk/andsen/asqlitemanager/Database.java", "rawCode": "  /**\n   * Retrieve a list of lookup values for selection lists\n   *\n   * @param foreignKey\n   * @return\n   */\n  public ForeignKeyHolder getFKList2(String foreignKey) {\n    // TODO must be changed to handle lookup tables with code - values\n    // must the return both the foreign key \"code\" and describing text\n    ForeignKeyHolder lists = new ForeignKeyHolder();\n    String[] ids = new String[0];\n    try {\n      Cursor cursor = _db.rawQuery(foreignKey, null);\n      ids = new String[cursor.getCount()];\n      int i = 0;\n      while (cursor.moveToNext()) {\n        ids[i++] = cursor.getString(0);\n      }\n      cursor.close();\n    } catch (Exception e) {\n      Utils.showMessage(\"Error\", e.getLocalizedMessage(), _cont);\n      Utils.logE(\"getFKList\", logging);\n      Utils.printStackTrace(e, logging);\n    }\n    // select [id] from [foreign]\n    // TODO replace field name with *\n    String sql =\n        foreignKey.substring(0, foreignKey.indexOf('['))\n            + \"*\"\n            + foreignKey.substring(foreignKey.indexOf(']') + 1);\n    Utils.logD(\"SQL: \" + sql, logging);\n    String[] texts = new String[0];\n    try {\n      Cursor cursor = _db.rawQuery(sql, null);\n      texts = new String[cursor.getCount()];\n      int i = 0;\n      int cols = cursor.getColumnCount();\n      while (cursor.moveToNext()) {\n        int j = 0;\n        String rowText = \"\";\n        for (j = 0; j < cols; j++) {\n          rowText += cursor.getString(j);\n          if (j < cols - 1) rowText += \" | \";\n        }\n        texts[i++] = rowText;\n      }\n      cursor.close();\n    } catch (Exception e) {\n      Utils.showMessage(\"Error\", e.getLocalizedMessage(), _cont);\n      Utils.logE(\"getFKList\", logging);\n      Utils.printStackTrace(e, logging);\n    }\n    lists.setId(ids);\n    lists.setText(texts);\n    return lists;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1264, "initialization": ["Cursor cursor = Context.getContentResolver()", "Cursor cursor = Context.getContentResolver()"], "initializationStart": [302, 628], "initializationEnd": [345, 671], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [993], "configurationEnd": [1010], "guardCondition": "!(null==cursor) && null!=cursor", "guardType": "IF {", "guardExpressionStart": 946, "guardExpressionEnd": 965, "guardBlockStart": 946, "guardBlockEnd": 979, "focalAPI": " = cursor.close()", "focalAPIStart": 1058, "focalAPIEnd": 1072, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_packages_apps_Settings/tree/master/src/com/android/settings/inputmethod/UserDictionaryAddWordContents.java", "rawCode": "  private boolean hasWord(final String word, final Context context) {\n    final Cursor cursor;\n    // mLocale == \"\" indicates this is an entry for all languages. Here, mLocale can't\n    // be null at all (it's ensured by the updateLocale method).\n    if (\"\".equals(mLocale)) {\n      cursor =\n          context\n              .getContentResolver()\n              .query(\n                  UserDictionary.Words.CONTENT_URI,\n                  HAS_WORD_PROJECTION,\n                  HAS_WORD_SELECTION_ALL_LOCALES,\n                  new String[] {word},\n                  null /* sort order */);\n    } else {\n      cursor =\n          context\n              .getContentResolver()\n              .query(\n                  UserDictionary.Words.CONTENT_URI,\n                  HAS_WORD_PROJECTION,\n                  HAS_WORD_SELECTION_ONE_LOCALE,\n                  new String[] {word, mLocale},\n                  null /* sort order */);\n    }\n    try {\n      if (null == cursor) return false;\n      return cursor.getCount() > 0;\n    } finally {\n      if (null != cursor) cursor.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1265, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 177, "focalAPIEnd": 192, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openintents/openintents/tree/master/compatibility/AndroidSupportV2/src/android/support/v2/content/CursorLoader.java", "rawCode": "  @Override\n  protected void onReset() {\n    super.onReset();\n\n    // Ensure the loader is stopped\n    onStopLoading();\n\n    if (mCursor != null && !mCursor.isClosed()) {\n      mCursor.close();\n    }\n    mCursor = null;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1266, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [414], "initializationEnd": [436], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 633, "focalAPIEnd": 647, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iliasbartolini/AgileDayConferenceApp/tree/master/AgileDayConferenceApp/src/it/agileday/data/SessionRepository.java", "rawCode": "  public Session getSessionFromId(long sessionId) {\n\n    String sql =\n        \"SELECT sessions._id AS session_id, sessions.session_type AS session_type, sessions.title AS session_title, sessions.speakers AS session_speakers, sessions.start AS session_start, sessions.end AS session_end , sessions.description AS session_description FROM sessions WHERE sessions._id = \"\n            + sessionId;\n    Cursor cursor = db.rawQuery(sql, null);\n    if (activity != null) {\n      activity.startManagingCursor(cursor);\n    }\n\n    Session session = new Session();\n    if (cursor.moveToNext()) {\n      session = buildSession(cursor);\n    }\n    cursor.close();\n\n    return session;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1267, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [391], "initializationEnd": [420], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)"], "configurationStart": [622], "configurationEnd": [639], "guardCondition": "!(cursor==null)", "guardType": "IF {", "guardExpressionStart": 481, "guardExpressionEnd": 500, "guardBlockStart": 481, "guardBlockEnd": 508, "focalAPI": " = cursor.close()", "focalAPIStart": 682, "focalAPIEnd": 696, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hecao/gallery3d/tree/master/src/com/android/gallery3d/gadget/LocalPhotoSource.java", "rawCode": "  public void reload() {\n    if (!mContentDirty) return;\n    mContentDirty = false;\n\n    ContentResolver resolver = mContext.getContentResolver();\n    int photoCount = getPhotoCount(resolver);\n    if (isContentSound(photoCount)) return;\n\n    int choosedIds[] = getExponentialIndice(photoCount, MAX_PHOTO_COUNT);\n    Arrays.sort(choosedIds);\n\n    mPhotos.clear();\n    Cursor cursor =\n        mContext.getContentResolver().query(CONTENT_URI, PROJECTION, SELECTION, null, ORDER);\n    if (cursor == null) return;\n    try {\n      for (int index : choosedIds) {\n        if (cursor.moveToPosition(index)) {\n          mPhotos.add(cursor.getLong(0));\n        }\n      }\n    } finally {\n      cursor.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1268, "initialization": ["Cursor cursor = getSettingValue(ContentResolver,long,String)"], "initializationStart": [524], "initializationEnd": [568], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getInt(int)"], "configurationStart": [607], "configurationEnd": [618], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 576, "guardExpressionEnd": 590, "guardBlockStart": 576, "guardBlockEnd": 651, "focalAPI": " = cursor.close()", "focalAPIStart": 633, "focalAPIEnd": 642, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/core/java/android/provider/Im.java", "rawCode": "    /**\n     * Get the boolean value of setting which is specified by provider id and the setting name.\n     *\n     * @param cr The ContentResolver to use to access the settings table.\n     * @param providerId The id of the provider.\n     * @param settingName The name of the setting.\n     * @return The value of the setting if the setting exist, otherwise return false.\n     */\n    public static boolean getBooleanValue(ContentResolver cr, long providerId, String settingName) {\n      boolean ret = false;\n      Cursor c = getSettingValue(cr, providerId, settingName);\n      if (c != null) {\n        ret = c.getInt(0) != 0;\n        c.close();\n      }\n      return ret;\n    }\n"}, {"dataset": "cursorClose", "exampleID": 1269, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(cursor==null||cursor.isClosed())", "guardType": "IF {", "guardExpressionStart": 125, "guardExpressionEnd": 167, "guardBlockStart": 125, "guardBlockEnd": 175, "focalAPI": " = cursor.close()", "focalAPIStart": 181, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chao-zhou/Lijiang/tree/master/src/com/utopia/lijiang/contacts/BaseContactReader.java", "rawCode": "  @Override\n  protected void finalize() throws Throwable {\n    // TODO Auto-generated method stub\n    super.finalize();\n\n    if (mCursor == null || mCursor.isClosed()) return;\n\n    mCursor.close();\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1270, "initialization": ["Cursor cursor = ItemAdapter.getCursor()"], "initializationStart": [115], "initializationEnd": [134], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 140, "guardExpressionEnd": 156, "guardBlockStart": 140, "guardBlockEnd": 169, "focalAPI": " = cursor.close()", "focalAPIStart": 157, "focalAPIEnd": 168, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ajlyon/zandy/tree/master/src/main/java/com/gimranov/zandy/app/ItemActivity.java", "rawCode": "  @Override\n  public void onDestroy() {\n    ItemAdapter adapter = (ItemAdapter) getListAdapter();\n    Cursor cur = adapter.getCursor();\n    if (cur != null) cur.close();\n    if (db != null) db.close();\n    super.onDestroy();\n    handler.removeCallbacksAndMessages(null);\n    syncHandler.removeCallbacksAndMessages(null);\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1271, "initialization": ["Cursor cursor = query(*,String[],String,String[],*,*,*)"], "initializationStart": [276], "initializationEnd": [479], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)", "cursor.getString(int)"], "configurationStart": [535, 577], "configurationEnd": [555, 597], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 706, "focalAPIEnd": 721, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ggc-itec/ggc-connect/tree/master/src/edu/ggc/it/banner/CourseSearchBuilder.java", "rawCode": "  private Instructor getInstructor(SQLiteDatabase db, long instId) {\n    if (cachedInstructors.containsKey(instId)) return cachedInstructors.get(instId);\n\n    Instructor instructor = null;\n    String[] args = new String[] {Long.toString(instId)};\n    Cursor instcsr =\n        db.query(\n            CourseDB.Instructors.TABLE,\n            INSTRUCTOR_COLUMNS,\n            CourseDB.Instructors.COL_ID + \" = ?\",\n            args,\n            null,\n            null,\n            null);\n    if (instcsr.moveToFirst()) {\n      String email = instcsr.getString(1);\n      String name = instcsr.getString(2);\n      instructor = new Instructor(name, email);\n      cachedInstructors.put(instId, instructor);\n    }\n    instcsr.close();\n\n    return instructor;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1272, "initialization": ["Cursor cursor = getAllThreads(Context)"], "initializationStart": [224], "initializationEnd": [246], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 472, "focalAPIEnd": 486, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmobile/themes-platform-packages-apps-Mms/tree/master/src/com/android/mms/util/Recycler.java", "rawCode": "  public void deleteOldMessages(Context context) {\n    if (LOCAL_DEBUG) {\n      Log.v(TAG, \"Recycler.deleteOldMessages this: \" + this);\n    }\n    if (!isAutoDeleteEnabled(context)) {\n      return;\n    }\n\n    Cursor cursor = getAllThreads(context);\n    try {\n      int limit = getMessageLimit(context);\n      while (cursor.moveToNext()) {\n        long threadId = getThreadId(cursor);\n        deleteMessagesForThread(context, threadId, limit);\n      }\n    } finally {\n      cursor.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1273, "initialization": ["Cursor cursor = query(*,*,String,String[],*)"], "initializationStart": [575], "initializationEnd": [768], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.getLong(int)"], "configurationStart": [1614, 2189, 2608, 3025], "configurationEnd": [1661, 2237, 2644, 3061], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 3135, "focalAPIEnd": 3144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mtwebster/IEmail/tree/master/src/com/mwebster/exchange/EasSyncService.java", "rawCode": "  private int parsePingResult(InputStream is, ContentResolver cr, HashMap<String, Integer> errorMap)\n      throws IOException, StaleFolderListException, IllegalHeartbeatException {\n    PingParser pp = new PingParser(is, this);\n    if (pp.parse()) {\n      // True indicates some mailboxes need syncing...\n      // syncList has the serverId's of the mailboxes...\n      mBindArguments[0] = Long.toString(mAccount.mId);\n      mPingChangeList = pp.getSyncList();\n      for (String serverId : mPingChangeList) {\n        mBindArguments[1] = serverId;\n        Cursor c =\n            cr.query(\n                Mailbox.CONTENT_URI,\n                Mailbox.CONTENT_PROJECTION,\n                WHERE_ACCOUNT_KEY_AND_SERVER_ID,\n                mBindArguments,\n                null);\n        try {\n          if (c.moveToFirst()) {\n\n            /**\n             * Check the boxes reporting changes to see if there really were any... We do this\n             * because bugs in various Exchange servers can put us into a looping behavior by\n             * continually reporting changes in a mailbox, even when there aren't any.\n             *\n             * <p>This behavior is seemingly random, and therefore we must code defensively by\n             * backing off of push behavior when it is detected.\n             *\n             * <p>One known cause, on certain Exchange 2003 servers, is acknowledged by Microsoft,\n             * and the server hotfix for this case can be found at\n             * http://support.microsoft.com/kb/923282\n             */\n\n            // Check the status of the last sync\n            String status = c.getString(Mailbox.CONTENT_SYNC_STATUS_COLUMN);\n            int type = SyncManager.getStatusType(status);\n            // This check should always be true...\n            if (type == SyncManager.SYNC_PING) {\n              int changeCount = SyncManager.getStatusChangeCount(status);\n              if (changeCount > 0) {\n                errorMap.remove(serverId);\n              } else if (changeCount == 0) {\n                // This means that a ping reported changes in error; we keep a count\n                // of consecutive errors of this kind\n                String name = c.getString(Mailbox.CONTENT_DISPLAY_NAME_COLUMN);\n                Integer failures = errorMap.get(serverId);\n                if (failures == null) {\n                  userLog(\"Last ping reported changes in error for: \", name);\n                  errorMap.put(serverId, 1);\n                } else if (failures > MAX_PING_FAILURES) {\n                  // We'll back off of push for this box\n                  pushFallback(c.getLong(Mailbox.CONTENT_ID_COLUMN));\n                  continue;\n                } else {\n                  userLog(\"Last ping reported changes in error for: \", name);\n                  errorMap.put(serverId, failures + 1);\n                }\n              }\n            }\n\n            // If there were no problems with previous sync, we'll start another one\n            SyncManager.startManualSync(\n                c.getLong(Mailbox.CONTENT_ID_COLUMN), SyncManager.SYNC_PING, null);\n          }\n        } finally {\n          c.close();\n        }\n      }\n    }\n    return pp.getSyncStatus();\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1274, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [277], "initializationEnd": [455], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()", "cursor.getColumnIndex(String)"], "configurationStart": [485, 648], "configurationEnd": [502, 684], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 738, "focalAPIEnd": 752, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/glennji/gnc4a/tree/master/project/gncandroid/src/rednus/gncandroid/GNCDataHandler.java", "rawCode": "  /** Return a list of the descriptions of recent transactions. */\n  public String[] getTransactionDescriptions() {\n    Calendar cal = Calendar.getInstance();\n    int year = cal.get(Calendar.YEAR);\n    String lastyear = Integer.toString(year - 1);\n\n    Cursor cursor =\n        sqliteHandle.rawQuery(\n            \"select distinct description from transactions where post_date > \"\n                + lastyear\n                + \"0101000000\",\n            null);\n    try {\n      int count = cursor.getCount();\n      String[] values = new String[count];\n\n      int index = 0;\n      while (cursor.moveToNext()) {\n        values[index++] = cursor.getString(cursor.getColumnIndex(\"description\"));\n      }\n      return values;\n    } finally {\n      cursor.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1275, "initialization": ["Cursor cursor = query(Context,*,Uri,*,*,*,*)"], "initializationStart": [172], "initializationEnd": [282], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)", "cursor.getString(int)"], "configurationStart": [495, 533], "configurationEnd": [507, 547], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 635, "focalAPIEnd": 644, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_Mms/tree/master/src/com/android/mms/data/RecipientIdCache.java", "rawCode": "  public static void canonicalTableDump() {\n    Log.d(TAG, \"**** Dump of canoncial_addresses table ****\");\n    Context context = sInstance.mContext;\n    Cursor c =\n        SqliteWrapper.query(\n            context, context.getContentResolver(), sAllCanonical, null, null, null, null);\n    if (c == null) {\n      Log.w(TAG, \"null Cursor in content://mms-sms/canonical-addresses\");\n    }\n    try {\n      while (c.moveToNext()) {\n        // TODO: don't hardcode the column indices\n        long id = c.getLong(0);\n        String number = c.getString(1);\n        Log.d(TAG, \"id: \" + id + \" number: \" + number);\n      }\n    } finally {\n      c.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1276, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [138], "initializationEnd": [161], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToNext()"], "configurationStart": [472], "configurationEnd": [487], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 520, "guardExpressionEnd": 535, "guardBlockStart": 520, "guardBlockEnd": 547, "focalAPI": " = cursor.close()", "focalAPIStart": 536, "focalAPIEnd": 546, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/traycold/crengine/tree/master/android/src/org/coolreader/db/MainDB.java", "rawCode": "  private boolean findBooks(String sql, ArrayList<FileInfo> list) {\n    Cursor rs = null;\n    boolean found = false;\n    try {\n      rs = mDB.rawQuery(sql, null);\n      if (rs.moveToFirst()) {\n        do {\n          FileInfo fileInfo = new FileInfo();\n          readFileInfoFromCursor(fileInfo, rs);\n          if (!fileInfo.fileExists()) continue;\n          fileInfoCache.put(fileInfo);\n          list.add(new FileInfo(fileInfo));\n          found = true;\n        } while (rs.moveToNext());\n      }\n    } finally {\n      if (rs != null) rs.close();\n    }\n    return found;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1277, "initialization": ["Cursor cursor = query(*,String[],*,*,*)"], "initializationStart": [222], "initializationEnd": [390], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)"], "configurationStart": [445, 733, 749, 765], "configurationEnd": [459, 747, 763, 779], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 801, "focalAPIEnd": 810, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OMFGB/packages_providers_ContactsProvider/tree/master/tests/src/com/android/providers/contacts/BaseContactsProvider2Test.java", "rawCode": "  private static void dumpData(ContentResolver resolver, long rawContactId) {\n    String[] projection =\n        new String[] {\n          Data.MIMETYPE, Data.DATA1, Data.DATA2, Data.DATA3,\n        };\n    Cursor c =\n        resolver.query(\n            Data.CONTENT_URI,\n            projection,\n            Data.RAW_CONTACT_ID + \"=\" + rawContactId,\n            null,\n            Data.MIMETYPE);\n    while (c.moveToNext()) {\n      String mimetype = c.getString(0);\n      if (Photo.CONTENT_ITEM_TYPE.equals(mimetype)) {\n        Log.i(\"Photo \", \"\");\n      } else {\n        mimetype = mimetype.substring(mimetype.indexOf('/') + 1);\n        Log.i(\n            \"Data \",\n            String.format(\n                \" %-10s %s,%s,%s\", mimetype, c.getString(1), c.getString(2), c.getString(3)));\n      }\n    }\n    c.close();\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1278, "initialization": ["Cursor cursor = query(*,*,String,String[],*)"], "initializationStart": [120], "initializationEnd": [333], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()", "cursor.moveToFirst()"], "configurationStart": [362, 388], "configurationEnd": [374, 403], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 496, "focalAPIEnd": 505, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elbenj/ICS-Exchange/tree/master/tests/src/com/android/exchange/adapter/FolderSyncParserTests.java", "rawCode": "  private Mailbox getMailboxWithName(String folderName) {\n    mMailboxQueryArgs[1] = folderName;\n    Cursor c =\n        mResolver.query(\n            Mailbox.CONTENT_URI,\n            Mailbox.CONTENT_PROJECTION,\n            Mailbox.ACCOUNT_KEY + \"=? AND \" + Mailbox.DISPLAY_NAME + \"=?\",\n            mMailboxQueryArgs,\n            null);\n    try {\n      assertTrue(c.getCount() == 1);\n      c.moveToFirst();\n      Mailbox m = new Mailbox();\n      m.restore(c);\n      return m;\n    } finally {\n      c.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1279, "initialization": ["Cursor cursor = getContext()"], "initializationStart": [3478], "initializationEnd": [3490], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)"], "configurationStart": [3688], "configurationEnd": [3720], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 3925, "guardExpressionEnd": 3944, "guardBlockStart": 3925, "guardBlockEnd": 3990, "focalAPI": " = cursor.close()", "focalAPIStart": 3961, "focalAPIEnd": 3975, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/android/platform_packages_providers_telephonyprovider/tree/master/src/com/android/providers/telephony/SmsProvider.java", "rawCode": "  private Uri insertInner(Uri url, ContentValues initialValues, int callerUid, String callerPkg) {\n    ContentValues values;\n    long rowID;\n    int type = Sms.MESSAGE_TYPE_ALL;\n\n    int match = sURLMatcher.match(url);\n    String table = TABLE_SMS;\n\n    switch (match) {\n      case SMS_ALL:\n        Integer typeObj = initialValues.getAsInteger(Sms.TYPE);\n        if (typeObj != null) {\n          type = typeObj.intValue();\n        } else {\n          // default to inbox\n          type = Sms.MESSAGE_TYPE_INBOX;\n        }\n        break;\n\n      case SMS_INBOX:\n        type = Sms.MESSAGE_TYPE_INBOX;\n        break;\n\n      case SMS_FAILED:\n        type = Sms.MESSAGE_TYPE_FAILED;\n        break;\n\n      case SMS_QUEUED:\n        type = Sms.MESSAGE_TYPE_QUEUED;\n        break;\n\n      case SMS_SENT:\n        type = Sms.MESSAGE_TYPE_SENT;\n        break;\n\n      case SMS_DRAFT:\n        type = Sms.MESSAGE_TYPE_DRAFT;\n        break;\n\n      case SMS_OUTBOX:\n        type = Sms.MESSAGE_TYPE_OUTBOX;\n        break;\n\n      case SMS_RAW_MESSAGE:\n        table = \"raw\";\n        break;\n\n      case SMS_STATUS_PENDING:\n        table = \"sr_pending\";\n        break;\n\n      case SMS_ATTACHMENT:\n        table = \"attachments\";\n        break;\n\n      case SMS_NEW_THREAD_ID:\n        table = \"canonical_addresses\";\n        break;\n\n      default:\n        Log.e(TAG, \"Invalid request: \" + url);\n        return null;\n    }\n\n    SQLiteDatabase db = getWritableDatabase(match);\n\n    if (table.equals(TABLE_SMS)) {\n      boolean addDate = false;\n      boolean addType = false;\n\n      // Make sure that the date and type are set\n      if (initialValues == null) {\n        values = new ContentValues(1);\n        addDate = true;\n        addType = true;\n      } else {\n        values = new ContentValues(initialValues);\n\n        if (!initialValues.containsKey(Sms.DATE)) {\n          addDate = true;\n        }\n\n        if (!initialValues.containsKey(Sms.TYPE)) {\n          addType = true;\n        }\n      }\n\n      if (addDate) {\n        values.put(Sms.DATE, new Long(System.currentTimeMillis()));\n      }\n\n      if (addType && (type != Sms.MESSAGE_TYPE_ALL)) {\n        values.put(Sms.TYPE, Integer.valueOf(type));\n      }\n\n      // thread_id\n      Long threadId = values.getAsLong(Sms.THREAD_ID);\n      String address = values.getAsString(Sms.ADDRESS);\n\n      if (((threadId == null) || (threadId == 0)) && (!TextUtils.isEmpty(address))) {\n        values.put(Sms.THREAD_ID, Threads.getOrCreateThreadId(getContext(), address));\n      }\n\n      // If this message is going in as a draft, it should replace any\n      // other draft messages in the thread. Just delete all draft\n      // messages with this thread ID. We could add an OR REPLACE to\n      // the insert below, but we'd have to query to find the old _id\n      // to produce a conflict anyway.\n      if (values.getAsInteger(Sms.TYPE) == Sms.MESSAGE_TYPE_DRAFT) {\n        db.delete(\n            TABLE_SMS,\n            \"thread_id=? AND type=?\",\n            new String[] {\n              values.getAsString(Sms.THREAD_ID), Integer.toString(Sms.MESSAGE_TYPE_DRAFT)\n            });\n      }\n\n      if (type == Sms.MESSAGE_TYPE_INBOX) {\n        // Look up the person if not already filled in.\n        if ((values.getAsLong(Sms.PERSON) == null) && (!TextUtils.isEmpty(address))) {\n          Cursor cursor = null;\n          Uri uri = Uri.withAppendedPath(Contacts.Phones.CONTENT_FILTER_URL, Uri.encode(address));\n          try {\n            cursor =\n                getContext()\n                    .getContentResolver()\n                    .query(uri, CONTACT_QUERY_PROJECTION, null, null, null);\n\n            if (cursor.moveToFirst()) {\n              Long id = Long.valueOf(cursor.getLong(PERSON_ID_COLUMN));\n              values.put(Sms.PERSON, id);\n            }\n          } catch (Exception ex) {\n            Log.e(TAG, \"insert: query contact uri \" + uri + \" caught \", ex);\n          } finally {\n            if (cursor != null) {\n              cursor.close();\n            }\n          }\n        }\n      } else {\n        // Mark all non-inbox messages read.\n        values.put(Sms.READ, ONE);\n      }\n      if (ProviderUtil.shouldSetCreator(values, callerUid)) {\n        // Only SYSTEM or PHONE can set CREATOR\n        // If caller is not SYSTEM or PHONE, or SYSTEM or PHONE does not set CREATOR\n        // set CREATOR using the truth on caller.\n        // Note: Inferring package name from UID may include unrelated package names\n        values.put(Sms.CREATOR, callerPkg);\n      }\n    } else {\n      if (initialValues == null) {\n        values = new ContentValues(1);\n      } else {\n        values = initialValues;\n      }\n    }\n\n    rowID = db.insert(table, \"body\", values);\n\n    // Don't use a trigger for updating the words table because of a bug\n    // in FTS3. The bug is such that the call to get the last inserted\n    // row is incorrect.\n    if (table == TABLE_SMS) {\n      // Update the words table with a corresponding row. The words table\n      // allows us to search for words quickly, without scanning the whole\n      // table;\n      ContentValues cv = new ContentValues();\n      cv.put(Telephony.MmsSms.WordsTable.ID, rowID);\n      cv.put(Telephony.MmsSms.WordsTable.INDEXED_TEXT, values.getAsString(\"body\"));\n      cv.put(Telephony.MmsSms.WordsTable.SOURCE_ROW_ID, rowID);\n      cv.put(Telephony.MmsSms.WordsTable.TABLE_ID, 1);\n      db.insert(TABLE_WORDS, Telephony.MmsSms.WordsTable.INDEXED_TEXT, cv);\n    }\n    if (rowID > 0) {\n      Uri uri = null;\n      if (table == TABLE_SMS) {\n        uri = Uri.withAppendedPath(Sms.CONTENT_URI, String.valueOf(rowID));\n      } else {\n        uri = Uri.withAppendedPath(url, String.valueOf(rowID));\n      }\n      if (Log.isLoggable(TAG, Log.VERBOSE)) {\n        Log.d(TAG, \"insert \" + uri + \" succeeded\");\n      }\n      return uri;\n    } else {\n      Log.e(TAG, \"insert: failed!\");\n    }\n\n    return null;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1280, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [319], "initializationEnd": [363], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(cursor==null)", "guardType": "IF {", "guardExpressionStart": 448, "guardExpressionEnd": 467, "guardBlockStart": 448, "guardBlockEnd": 670, "focalAPI": " = cursor.close()", "focalAPIStart": 798, "focalAPIEnd": 812, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_Mms/tree/master/src/com/android/mms/data/Contact.java", "rawCode": "    /** @return a Contact containing the info for the profile. */\n    private Contact getContactInfoForSelf() {\n      Contact entry = new Contact(true);\n      entry.mContactMethodType = CONTACT_METHOD_TYPE_SELF;\n\n      // if (LOCAL_DEBUG) log(\"getContactInfoForSelf: number=\" + number);\n      Cursor cursor =\n          mContext\n              .getContentResolver()\n              .query(Profile.CONTENT_URI, SELF_PROJECTION, null, null, null);\n      if (cursor == null) {\n        Log.w(\n            TAG,\n            \"getContactInfoForSelf() returned NULL cursor!\"\n                + \" contact uri used \"\n                + Profile.CONTENT_URI);\n        return entry;\n      }\n\n      try {\n        if (cursor.moveToFirst()) {\n          fillSelfContact(entry, cursor);\n        }\n      } finally {\n        cursor.close();\n      }\n      return entry;\n    }\n"}, {"dataset": "cursorClose", "exampleID": 1281, "initialization": ["Cursor cursor = getHelper()"], "initializationStart": [567], "initializationEnd": [578], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()"], "configurationStart": [79], "configurationEnd": [94], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 685, "focalAPIEnd": 694, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cokembel/csci498android/tree/master/LunchList/src/csci498/cokembel/lunchlist/DetailFragment.java", "rawCode": "  private void load() {\n    Cursor c = getHelper().getById(restaurantId);\n\n    c.moveToFirst();\n    name.setText(getHelper().getName(c));\n    address.setText(getHelper().getAddress(c));\n    notes.setText(getHelper().getNotes(c));\n    feed.setText(getHelper().getFeed(c));\n\n    if (getHelper().getType(c).equals(\"sit_down\")) {\n      types.check(R.id.sit_down);\n    } else if (getHelper().getType(c).equals(\"take_out\")) {\n      types.check(R.id.take_out);\n    } else {\n      types.check(R.id.delivery);\n    }\n\n    latitude = getHelper().getLatitude(c);\n    longitude = getHelper().getLongitude(c);\n\n    location.setText(String.valueOf(latitude) + \", \" + String.valueOf(longitude));\n\n    c.close();\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1282, "initialization": ["Cursor cursor = query(*,String[],*,*,*,*,*)"], "initializationStart": [108], "initializationEnd": [317], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()"], "configurationStart": [323], "configurationEnd": [343], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 395, "focalAPIEnd": 409, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dusken/Kulturkalender-Android/tree/master/Barteguiden/src/main/java/com/underdusken/kulturekalendar/data/db/DatabaseManager.java", "rawCode": "  public EventItem getEventsItemById(long id) {\n    EventItem eventItem = null;\n    Cursor cursor =\n        database.query(\n            MySQLiteHelper.TABLE_EVENTS,\n            allColumnsEvents,\n            MySQLiteHelper.COLUMN_ID + \" = \" + id,\n            null,\n            null,\n            null,\n            null);\n    cursor.moveToFirst();\n\n    eventItem = cursorToEventsItem(cursor);\n\n    cursor.close();\n    return eventItem;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1283, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [175], "initializationEnd": [203], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 272, "guardExpressionEnd": 291, "guardBlockStart": 272, "guardBlockEnd": 397, "focalAPI": " = cursor.close()", "focalAPIStart": 557, "focalAPIEnd": 571, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BobEvans/omgpaco/tree/master/Paco/src/com/google/android/apps/paco/ExperimentProviderUtil.java", "rawCode": "  private List<Feedback> findFeedbackBy(String select) {\n    List<Feedback> feedback = new ArrayList<Feedback>();\n    Cursor cursor = null;\n    try {\n      cursor =\n          context.getContentResolver().query(FeedbackColumns.CONTENT_URI, null, select, null, null);\n      if (cursor != null) {\n        while (cursor.moveToNext()) {\n          feedback.add(createFeedback(cursor));\n        }\n      }\n    } catch (RuntimeException e) {\n      Log.w(ExperimentProvider.TAG, \"Caught unexpected exception.\", e);\n    } finally {\n      if (cursor != null) {\n        cursor.close();\n      }\n    }\n    return feedback;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1284, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [134], "initializationEnd": [175], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()", "cursor.getInt(int)"], "configurationStart": [427, 471], "configurationEnd": [447, 487], "guardCondition": "!(cursor.getCount()!=1)", "guardType": "IF {", "guardExpressionStart": 369, "guardExpressionEnd": 396, "guardBlockStart": 369, "guardBlockEnd": 421, "focalAPI": " = cursor.close()", "focalAPIStart": 493, "focalAPIEnd": 507, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GrioSF/facebook-android-sdk/tree/master/samples/Hackbook/src/com/facebook/android/Utility.java", "rawCode": "  public static int getOrientation(Context context, Uri photoUri) {\n    /* it's on the external media. */\n    Cursor cursor =\n        context\n            .getContentResolver()\n            .query(\n                photoUri,\n                new String[] {MediaStore.Images.ImageColumns.ORIENTATION},\n                null,\n                null,\n                null);\n\n    if (cursor.getCount() != 1) {\n      return -1;\n    }\n\n    cursor.moveToFirst();\n    int orientation = cursor.getInt(0);\n    cursor.close();\n\n    return orientation;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1285, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [169], "initializationEnd": [337], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getInt(int)", "cursor.getInt(int)", "cursor.getInt(int)", "cursor.getInt(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getInt(int)"], "configurationStart": [389, 428, 469, 509, 553, 603, 649, 701], "configurationEnd": [405, 444, 485, 525, 572, 622, 668, 717], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 1019, "focalAPIEnd": 1033, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/StevenKo/novel_reader/tree/master/src/com/novel/db/SQLiteNovel.java", "rawCode": "  public ArrayList<Bookmark> getAllRecentReadBookmarks() {\n    Cursor cursor = null;\n    ArrayList<Bookmark> bookmarks = new ArrayList<Bookmark>();\n    cursor =\n        db.rawQuery(\n            \"SELECT * FROM \"\n                + BookmarkSchema.TABLE_NAME\n                + \" WHERE is_recent_read != 0 ORDER BY id DESC\",\n            null);\n\n    while (cursor.moveToNext()) {\n      int ID = cursor.getInt(0);\n      int NOVEL_ID = cursor.getInt(1);\n      int ARTICLE_ID = cursor.getInt(2);\n      int READ_RATE = cursor.getInt(3);\n      String NOVEL_NAME = cursor.getString(4);\n      String ARTICLE_TITLE = cursor.getString(5);\n      String NOVEL_PIC = cursor.getString(6);\n      Boolean IS_RECENT_READ = cursor.getInt(7) > 0;\n\n      Bookmark bookmark =\n          new Bookmark(\n              ID,\n              NOVEL_ID,\n              ARTICLE_ID,\n              READ_RATE,\n              NOVEL_NAME,\n              ARTICLE_TITLE,\n              NOVEL_PIC,\n              IS_RECENT_READ);\n      bookmarks.add(bookmark);\n    }\n    cursor.close();\n    return bookmarks;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1286, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 100, "guardExpressionEnd": 119, "guardBlockStart": 100, "guardBlockEnd": 170, "focalAPI": " = cursor.close()", "focalAPIStart": 128, "focalAPIEnd": 142, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new MessagesListAdapter(*,*,cursor,String[],int[])"], "useStart": [1064], "useEnd": [1174], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aiQon/crowdshare/tree/master/src/org/servalproject/messages/MessagesListActivity.java", "rawCode": "  private void populateList() {\n\n    if (V_LOG) {\n      Log.v(TAG, \"get cursor called\");\n    }\n\n    if (cursor != null) {\n      cursor.close();\n      cursor = null;\n    }\n\n    // get a content resolver\n    ContentResolver mContentResolver = getApplicationContext().getContentResolver();\n\n    Uri mGroupedUri = MessagesContract.CONTENT_URI;\n    Uri.Builder mUriBuilder = mGroupedUri.buildUpon();\n    mUriBuilder.appendPath(\"grouped-list\");\n    mGroupedUri = mUriBuilder.build();\n\n    cursor = mContentResolver.query(mGroupedUri, null, null, null, null);\n\n    // define the map between columns and layout elements\n    String[] mColumnNames = new String[3];\n    mColumnNames[0] = ThreadsContract.Table.PARTICIPANT_PHONE;\n    mColumnNames[1] = \"COUNT_RECIPIENT_PHONE\";\n    mColumnNames[2] = \"MAX_RECEIVED_TIME\";\n\n    int[] mLayoutElements = new int[3];\n    mLayoutElements[0] = R.id.messages_list_item_title;\n    mLayoutElements[1] = R.id.messages_list_item_count;\n    mLayoutElements[2] = R.id.messages_list_item_time;\n\n    MessagesListAdapter mDataAdapter =\n        new MessagesListAdapter(\n            this, R.layout.messages_list_item, cursor, mColumnNames, mLayoutElements);\n\n    setListAdapter(mDataAdapter);\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1287, "initialization": ["Cursor cursor = getActivity()"], "initializationStart": [620], "initializationEnd": [633], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 463, "guardExpressionEnd": 477, "guardBlockStart": 463, "guardBlockEnd": 951, "focalAPI": " = cursor.close()", "focalAPIStart": 931, "focalAPIEnd": 940, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SINTEF-9012/sensapp-android/tree/master/sensappdroid-main/src/main/java/org/sensapp/android/sensappdroid/fragments/SensorListFragment.java", "rawCode": "    @Override\n    public void run() {\n      for (String name : names) {\n        if (terminate) {\n          return;\n        }\n        Cursor c =\n            getActivity()\n                .getContentResolver()\n                .query(\n                    Uri.parse(SensAppContract.Measure.CONTENT_URI + \"/\" + name),\n                    new String[] {SensAppContract.Measure.ID},\n                    null,\n                    null,\n                    null);\n        if (c != null) {\n          if (!terminate) {\n            adapter.getCounts().put(name, c.getCount());\n            if (getActivity() != null) {\n              getActivity()\n                  .runOnUiThread(\n                      new Runnable() {\n                        @Override\n                        public void run() {\n                          adapter.notifyDataSetChanged();\n                        }\n                      });\n            }\n          }\n          c.close();\n        }\n      }\n    }\n"}, {"dataset": "cursorClose", "exampleID": 1288, "initialization": ["Cursor cursor = query(*,String[],*,*,*)"], "initializationStart": [222], "initializationEnd": [390], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)"], "configurationStart": [445, 733, 749, 765], "configurationEnd": [459, 747, 763, 779], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 801, "focalAPIEnd": 810, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/javroch/android_packages_providers_ContactsProvider/tree/master/tests/src/com/android/providers/contacts/BaseContactsProvider2Test.java", "rawCode": "  private static void dumpData(ContentResolver resolver, long rawContactId) {\n    String[] projection =\n        new String[] {\n          Data.MIMETYPE, Data.DATA1, Data.DATA2, Data.DATA3,\n        };\n    Cursor c =\n        resolver.query(\n            Data.CONTENT_URI,\n            projection,\n            Data.RAW_CONTACT_ID + \"=\" + rawContactId,\n            null,\n            Data.MIMETYPE);\n    while (c.moveToNext()) {\n      String mimetype = c.getString(0);\n      if (Photo.CONTENT_ITEM_TYPE.equals(mimetype)) {\n        Log.i(\"Photo \", \"\");\n      } else {\n        mimetype = mimetype.substring(mimetype.indexOf('/') + 1);\n        Log.i(\n            \"Data \",\n            String.format(\n                \" %-10s %s,%s,%s\", mimetype, c.getString(1), c.getString(2), c.getString(3)));\n      }\n    }\n    c.close();\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1289, "initialization": ["Cursor cursor = query(Context,ContentResolver,*,String[],String,*,String)"], "initializationStart": [304], "initializationEnd": [579], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()", "cursor.move(int)", "cursor.getLong(int)"], "configurationStart": [767, 1266, 1311], "configurationEnd": [784, 1283, 1342], "guardCondition": "!(cursor==null) && cursor!=null", "guardType": "IF {", "guardExpressionStart": 622, "guardExpressionEnd": 641, "guardBlockStart": 622, "guardBlockEnd": 746, "focalAPI": " = cursor.close()", "focalAPIStart": 1790, "focalAPIEnd": 1804, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/packages_apps_Mms/tree/master/src/com/android/mms/util/Recycler.java", "rawCode": "    protected void deleteMessagesForThread(Context context, long threadId, int keep) {\n      if (LOCAL_DEBUG) {\n        Log.v(TAG, \"SMS: deleteMessagesForThread\");\n      }\n      ContentResolver resolver = context.getContentResolver();\n      Cursor cursor = null;\n      try {\n        cursor =\n            SqliteWrapper.query(\n                context,\n                resolver,\n                ContentUris.withAppendedId(Sms.Conversations.CONTENT_URI, threadId),\n                SMS_MESSAGE_PROJECTION,\n                \"locked=0\",\n                null,\n                \"date DESC\"); // get in newest to oldest order\n        if (cursor == null) {\n          Log.e(TAG, \"SMS: deleteMessagesForThread got back null cursor\");\n          return;\n        }\n        int count = cursor.getCount();\n        int numberToDelete = count - keep;\n        if (LOCAL_DEBUG) {\n          Log.v(\n              TAG,\n              \"SMS: deleteMessagesForThread keep: \"\n                  + keep\n                  + \" count: \"\n                  + count\n                  + \" numberToDelete: \"\n                  + numberToDelete);\n        }\n        if (numberToDelete <= 0) {\n          return;\n        }\n        // Move to the keep limit and then delete everything older than that one.\n        cursor.move(keep);\n        long latestDate = cursor.getLong(COLUMN_SMS_DATE);\n\n        long cntDeleted =\n            SqliteWrapper.delete(\n                context,\n                resolver,\n                ContentUris.withAppendedId(Sms.Conversations.CONTENT_URI, threadId),\n                \"locked=0 AND date<\" + latestDate,\n                null);\n        if (LOCAL_DEBUG) {\n          Log.v(TAG, \"SMS: deleteMessagesForThread cntDeleted: \" + cntDeleted);\n        }\n      } finally {\n        if (cursor != null) {\n          cursor.close();\n        }\n      }\n    }\n"}, {"dataset": "cursorClose", "exampleID": 1290, "initialization": ["Cursor cursor = query(String,String[],*,*,*,*,String)"], "initializationStart": [211], "initializationEnd": [283], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)", "cursor.getBlob(int)", "cursor.getString(int)", "cursor.getLong(int)"], "configurationStart": [515, 567, 617, 668], "configurationEnd": [534, 584, 636, 685], "guardCondition": "!(cursor.moveToNext()) && cursor!=null", "guardType": "IF {", "guardExpressionStart": 423, "guardExpressionEnd": 442, "guardBlockStart": 423, "guardBlockEnd": 1419, "focalAPI": " = cursor.close()", "focalAPIStart": 1301, "focalAPIEnd": 1315, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RyanLee7/redreader/tree/master/src/main/java/org/quantumbadger/redreader/account/RedditAccountManager.java", "rawCode": "  private synchronized void reloadAccounts(final SQLiteDatabase db) {\n\n    final String[] fields =\n        new String[] {FIELD_USERNAME, FIELD_COOKIES, FIELD_MODHASH, FIELD_PRIORITY};\n\n    final Cursor cursor = db.query(TABLE, fields, null, null, null, null, FIELD_PRIORITY + \" ASC\");\n\n    accountsCache = new LinkedList<RedditAccount>();\n    defaultAccountCache = null;\n\n    // TODO handle null? can this even happen?\n    if (cursor != null) {\n\n      while (cursor.moveToNext()) {\n\n        final String username = cursor.getString(0);\n        final byte[] cookies = cursor.getBlob(1);\n        final String modhash = cursor.getString(2);\n        final long priority = cursor.getLong(3);\n\n        final RedditAccount account;\n\n        try {\n          account =\n              new RedditAccount(\n                  username,\n                  modhash,\n                  cookies == null ? null : new PersistentCookieStore(cookies),\n                  priority);\n\n        } catch (IOException e) {\n          BugReportActivity.handleGlobalError(context, new RRError(null, null, e));\n          return;\n        }\n\n        accountsCache.add(account);\n\n        if (defaultAccountCache == null || account.priority < defaultAccountCache.priority) {\n          defaultAccountCache = account;\n        }\n      }\n\n      cursor.close();\n\n    } else {\n      BugReportActivity.handleGlobalError(context, \"Cursor was null after query\");\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1291, "initialization": ["Cursor cursor = TrackerDataHelper.query(String)"], "initializationStart": [160], "initializationEnd": [188], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 895, "guardExpressionEnd": 914, "guardBlockStart": 895, "guardBlockEnd": 948, "focalAPI": " = cursor.close()", "focalAPIStart": 925, "focalAPIEnd": 939, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/tests/LocationTracker/src/com/android/locationtracker/TrackerActivity.java", "rawCode": "  private void exportFile(String tagFilter, String exportFileName, TrackerDataHelper trackerData) {\n    BufferedWriter exportWriter = null;\n    Cursor cursor = trackerData.query(tagFilter);\n    try {\n      exportWriter = new BufferedWriter(new FileWriter(exportFileName));\n      exportWriter.write(trackerData.getOutputHeader());\n\n      String line = null;\n\n      while ((line = trackerData.getNextOutput(cursor)) != null) {\n        exportWriter.write(line);\n      }\n      exportWriter.write(trackerData.getOutputFooter());\n      Toast.makeText(this, \"Successfully exported data to \" + exportFileName, Toast.LENGTH_SHORT)\n          .show();\n\n    } catch (IOException e) {\n      Toast.makeText(this, \"Error exporting file: \" + e.getLocalizedMessage(), Toast.LENGTH_SHORT)\n          .show();\n\n      Log.e(LOG_TAG, \"Error exporting file\", e);\n    } finally {\n      closeWriter(exportWriter);\n      if (cursor != null) {\n        cursor.close();\n      }\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1292, "initialization": ["Cursor cursor = CordovaInterface.getActivity()"], "initializationStart": [156], "initializationEnd": [177], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToPosition(int)", "cursor.getInt(int)"], "configurationStart": [271, 314], "configurationEnd": [295, 330], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 241, "guardExpressionEnd": 260, "guardBlockStart": 241, "guardBlockEnd": 363, "focalAPI": " = cursor.close()", "focalAPIStart": 340, "focalAPIEnd": 354, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iametza/Ihesi/tree/master/platforms/android/src/org/apache/cordova/camera/CameraLauncher.java", "rawCode": "  private int getImageOrientation(Uri uri) {\n    int rotate = 0;\n    String[] cols = {MediaStore.Images.Media.ORIENTATION};\n    try {\n      Cursor cursor = cordova.getActivity().getContentResolver().query(uri, cols, null, null, null);\n      if (cursor != null) {\n        cursor.moveToPosition(0);\n        rotate = cursor.getInt(0);\n        cursor.close();\n      }\n    } catch (Exception e) {\n      // You can get an IllegalArgumentException if ContentProvider doesn't support querying for\n      // orientation.\n    }\n    return rotate;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1293, "initialization": ["Cursor cursor = query(*,*,String,*,*,*,*)"], "initializationStart": [873], "initializationEnd": [1089], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)"], "configurationStart": [1165, 1240, 1311], "configurationEnd": [1207, 1282, 1349], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 1575, "focalAPIEnd": 1584, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [4532], "useEnd": [4541], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 4516, "finallyExpressionEnd": 4524, "finallyBlockStart": 4516, "finallyBlockEnd": 4548, "cleanUpCallStart": [4532], "cleanUpCallEnd": [4541], "url": "https://github.com/classicnerd/android_packages_providers_ContactsProvider/tree/master/src/com/android/providers/contacts/DataRowHandlerForGroupMembership.java", "rawCode": "  /**\n   * Returns the group id of the group with sourceId and the same account as rawContactId. If the\n   * group doesn't already exist then it is first created,\n   *\n   * @param db SQLiteDatabase to use for this operation\n   * @param rawContactId the contact this group is associated with\n   * @param sourceId the sourceIf of the group to query or create\n   * @return the group id of the existing or created group\n   * @throws IllegalArgumentException if the contact is not associated with an account\n   * @throws IllegalStateException if a group needs to be created but the creation failed\n   */\n  private long getOrMakeGroup(\n      SQLiteDatabase db,\n      long rawContactId,\n      String sourceId,\n      AccountWithDataSet accountWithDataSet) {\n\n    if (accountWithDataSet == null) {\n      mSelectionArgs1[0] = String.valueOf(rawContactId);\n      Cursor c =\n          db.query(\n              RawContactsQuery.TABLE,\n              RawContactsQuery.COLUMNS,\n              RawContacts._ID + \"=?\",\n              mSelectionArgs1,\n              null,\n              null,\n              null);\n      try {\n        if (c.moveToFirst()) {\n          String accountName = c.getString(RawContactsQuery.ACCOUNT_NAME);\n          String accountType = c.getString(RawContactsQuery.ACCOUNT_TYPE);\n          String dataSet = c.getString(RawContactsQuery.DATA_SET);\n          if (!TextUtils.isEmpty(accountName) && !TextUtils.isEmpty(accountType)) {\n            accountWithDataSet = new AccountWithDataSet(accountName, accountType, dataSet);\n          }\n        }\n      } finally {\n        c.close();\n      }\n    }\n\n    if (accountWithDataSet == null) {\n      throw new IllegalArgumentException(\n          \"if the groupmembership only \"\n              + \"has a sourceid the the contact must be associated with \"\n              + \"an account\");\n    }\n\n    ArrayList<GroupIdCacheEntry> entries = mGroupIdCache.get(sourceId);\n    if (entries == null) {\n      entries = new ArrayList<GroupIdCacheEntry>(1);\n      mGroupIdCache.put(sourceId, entries);\n    }\n\n    int count = entries.size();\n    for (int i = 0; i < count; i++) {\n      GroupIdCacheEntry entry = entries.get(i);\n      if (entry.accountName.equals(accountWithDataSet.getAccountName())\n          && entry.accountType.equals(accountWithDataSet.getAccountType())\n          && Objects.equal(entry.dataSet, accountWithDataSet.getDataSet())) {\n        return entry.groupId;\n      }\n    }\n\n    GroupIdCacheEntry entry = new GroupIdCacheEntry();\n    entry.accountName = accountWithDataSet.getAccountName();\n    entry.accountType = accountWithDataSet.getAccountType();\n    entry.dataSet = accountWithDataSet.getDataSet();\n    entry.sourceId = sourceId;\n    entries.add(0, entry);\n\n    // look up the group that contains this sourceId and has the same account name, type, and\n    // data set as the contact refered to by rawContactId\n    Cursor c;\n    if (accountWithDataSet.getDataSet() == null) {\n      c =\n          db.query(\n              Tables.GROUPS,\n              new String[] {RawContacts._ID},\n              Clauses.GROUP_HAS_ACCOUNT_AND_SOURCE_ID,\n              new String[] {\n                sourceId, accountWithDataSet.getAccountName(), accountWithDataSet.getAccountType()\n              },\n              null,\n              null,\n              null);\n    } else {\n      c =\n          db.query(\n              Tables.GROUPS,\n              new String[] {RawContacts._ID},\n              Clauses.GROUP_HAS_ACCOUNT_AND_DATA_SET_AND_SOURCE_ID,\n              new String[] {\n                sourceId,\n                accountWithDataSet.getAccountName(),\n                accountWithDataSet.getAccountType(),\n                accountWithDataSet.getDataSet()\n              },\n              null,\n              null,\n              null);\n    }\n    try {\n      if (c.moveToFirst()) {\n        entry.groupId = c.getLong(0);\n      } else {\n        ContentValues groupValues = new ContentValues();\n        groupValues.put(Groups.ACCOUNT_NAME, accountWithDataSet.getAccountName());\n        groupValues.put(Groups.ACCOUNT_TYPE, accountWithDataSet.getAccountType());\n        groupValues.put(Groups.DATA_SET, accountWithDataSet.getDataSet());\n        groupValues.put(Groups.SOURCE_ID, sourceId);\n        long groupId = db.insert(Tables.GROUPS, Groups.ACCOUNT_NAME, groupValues);\n        if (groupId < 0) {\n          throw new IllegalStateException(\n              \"unable to create a new group with \" + \"this sourceid: \" + groupValues);\n        }\n        entry.groupId = groupId;\n      }\n    } finally {\n      c.close();\n    }\n\n    return entry.groupId;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1294, "initialization": ["Cursor cursor = RSSOpenHelper.queryCategory()"], "initializationStart": [182], "initializationEnd": [211], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndex(String)", "cursor.moveToNext()"], "configurationStart": [298, 501], "configurationEnd": [343, 516], "guardCondition": "cursor.moveToFirst()", "guardType": "IF {", "guardExpressionStart": 248, "guardExpressionEnd": 269, "guardBlockStart": 248, "guardBlockEnd": 1304, "focalAPI": " = cursor.close()", "focalAPIStart": 545, "focalAPIEnd": 555, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AndrewChanChina/ppc1/tree/master/src/com/smit/rssreader/RSSReaderActivity.java", "rawCode": "  public void getBasicInfo() {\n    categoryGroup = new ArrayList<String>();\n    rssChild = new ArrayList<List<String>>();\n    rssUrl = new ArrayList<List<String>>();\n    Cursor c1 = rssOpenHelper.queryCategory();\n    String[] categorys = null;\n    if (c1.moveToFirst()) {\n      int categoryIndex = c1.getColumnIndex(RSSOpenHelper.RSS_CATEGORY);\n      categorys = new String[c1.getCount()];\n      int i = 0;\n      while (!c1.isAfterLast()) {\n        categorys[i] = c1.getString(categoryIndex);\n        c1.moveToNext();\n        i++;\n      }\n      c1.close();\n      for (int j = 0; j < categorys.length; j++) {\n        String[] titles = null;\n        String[] urls = null;\n        Cursor c2 = rssOpenHelper.queryWithCategory(categorys[j]);\n        if (c2.moveToFirst()) {\n          int titleIndex = c2.getColumnIndex(RSSOpenHelper.CHANNEL_TITLE);\n          int urlIndex = c2.getColumnIndex(RSSOpenHelper.RSS_URL);\n          titles = new String[c2.getCount()];\n          urls = new String[c2.getCount()];\n          int k = 0;\n          while (!c2.isAfterLast()) {\n            titles[k] = c2.getString(titleIndex);\n            urls[k] = c2.getString(urlIndex);\n            c2.moveToNext();\n            k++;\n          }\n          c2.close();\n        }\n        addInfo(categorys[j], titles, urls);\n      }\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1295, "initialization": ["Cursor cursor = getServerIdCursor(String)"], "initializationStart": [808], "initializationEnd": [835], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)"], "configurationStart": [1385], "configurationEnd": [1397], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 1499, "focalAPIEnd": 1508, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmobile/themes-platform-packages-apps-Email/tree/master/src/com/android/exchange/adapter/FolderSyncParser.java", "rawCode": "  public void updateParser(ArrayList<ContentProviderOperation> ops) throws IOException {\n    String serverId = null;\n    String displayName = null;\n    String parentId = null;\n    while (nextTag(Tags.FOLDER_UPDATE) != END) {\n      switch (tag) {\n        case Tags.FOLDER_SERVER_ID:\n          serverId = getValue();\n          break;\n        case Tags.FOLDER_DISPLAY_NAME:\n          displayName = getValue();\n          break;\n        case Tags.FOLDER_PARENT_ID:\n          parentId = getValue();\n          break;\n        default:\n          skipTag();\n          break;\n      }\n    }\n    // We'll make a change if one of parentId or displayName are specified\n    // serverId is required, but let's be careful just the same\n    if (serverId != null && (displayName != null || parentId != null)) {\n      Cursor c = getServerIdCursor(serverId);\n      try {\n        // If we find the mailbox (using serverId), make the change\n        if (c.moveToFirst()) {\n          userLog(\"Updating \", serverId);\n          ContentValues cv = new ContentValues();\n          if (displayName != null) {\n            cv.put(Mailbox.DISPLAY_NAME, displayName);\n          }\n          if (parentId != null) {\n            cv.put(Mailbox.PARENT_SERVER_ID, parentId);\n          }\n          ops.add(\n              ContentProviderOperation.newUpdate(\n                      ContentUris.withAppendedId(Mailbox.CONTENT_URI, c.getLong(0)))\n                  .withValues(cv)\n                  .build());\n        }\n      } finally {\n        c.close();\n      }\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1296, "initialization": ["Cursor cursor = query(String,*,*,*,*,*,*)"], "initializationStart": [96], "initializationEnd": [169], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()", "cursor.getString(int)"], "configurationStart": [236, 305], "configurationEnd": [248, 319], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 508, "focalAPIEnd": 517, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/btmura/rbb/tree/master/src/com/btmura/android/reddit/database/Subreddits.java", "rawCode": "  private static ArrayList<ContentValues> getSubredditNames(SQLiteDatabase db) {\n    Cursor c = db.query(TABLE_NAME, Array.of(COLUMN_NAME), null, null, null, null, null);\n    ArrayList<ContentValues> rows = new ArrayList<ContentValues>(c.getCount());\n    while (c.moveToNext()) {\n      String subreddit = c.getString(0);\n      if (Subreddits.isSyncable(subreddit)) {\n        ContentValues values = new ContentValues(1);\n        values.put(COLUMN_NAME, subreddit);\n        rows.add(values);\n      }\n    }\n    c.close();\n    return rows;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1297, "initialization": ["Cursor cursor = DbManager.getLUBRecordByRecordId(SQLiteDatabase,int)"], "initializationStart": [422], "initializationEnd": [471], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getDouble(int)"], "configurationStart": [528], "configurationEnd": [547], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 558, "focalAPIEnd": 572, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/f97one/android_Car-Kei-Bo/tree/master/src/net/formula97/andorid/car_kei_bo/MileageList.java", "rawCode": "  @Override\n  public boolean onContextItemSelected(MenuItem item) {\n    // TODO 自動生成されたメソッド・スタブ\n\n    switch (item.getItemId()) {\n      case R.id.ctxitem_edit_refuel_record:\n        // 燃費記録を修正する処理\n        callEditMileage(currentRecordId, getCAR_ID(), getCAR_NAME());\n        break;\n      case R.id.ctxitem_delete_refuel_record:\n        // 燃費記録を削除する処理\n        DateManager dmngr = new DateManager();\n\n        Cursor record = dbman.getLUBRecordByRecordId(db, currentRecordId);\n        final String refuelDate = dmngr.getISO8601Date(record.getDouble(1));\n        record.close();\n\n        AlertDialog.Builder adbuilder = new AlertDialog.Builder(this);\n        adbuilder.setTitle(refuelDate);\n        adbuilder.setMessage(getString(R.string.adbuilder_confirm_deletefuelrecord));\n        // [back]キーでキャンセルできるようにする\n        adbuilder.setCancelable(true);\n\n        // 「はい」ボタンの処理\n        adbuilder.setPositiveButton(\n            android.R.string.yes,\n            new DialogInterface.OnClickListener() {\n\n              public void onClick(DialogInterface dialog, int which) {\n                int ret;\n\n                ret = dbman.deleteLubsByCarId(db, getCAR_ID(), currentRecordId);\n                Log.i(\n                    \"onContextItemSelected\",\n                    \"Lub record has deleted, RECORD_ID = \" + String.valueOf(currentRecordId));\n                ret = dbman.deleteCostsByCarId(db, getCAR_ID(), currentRecordId);\n                Log.i(\n                    \"onContextItemSelected\",\n                    \"Costs record has deleted, RECORD_ID = \" + String.valueOf(currentRecordId));\n\n                // レコードを消したというトーストを表示する。\n                String line = refuelDate + getString(R.string.adbuilder_toast_deletefuel);\n                Toast.makeText(getApplicationContext(), line, Toast.LENGTH_LONG).show();\n\n                // トータルのランニングコストと燃費を再計算する\n                dbman.updateCurrentFuelMileageById(db, getCAR_ID());\n                dbman.updateCurrentRunningCostById(db, getCAR_ID());\n\n                // DBとCursorを閉じてActivityを再始動する\n                closeCursor(cMileageList);\n                closeDb(db);\n                onResume();\n              }\n            });\n\n        // 「キャンセル」ボタンの処理\n        // noなので「いいえ」かと思ったのだが....。\n        // 何もせずに終了する。\n        adbuilder.setNegativeButton(\n            android.R.string.no,\n            new DialogInterface.OnClickListener() {\n\n              @Override\n              public void onClick(DialogInterface dialog, int which) {\n                // TODO 自動生成されたメソッド・スタブ\n\n              }\n            });\n\n        // AlertDialogを表示する\n        adbuilder.show();\n\n        break;\n      default:\n        return super.onContextItemSelected(item);\n    }\n\n    return true;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1298, "initialization": ["Cursor cursor = query(String,String[],*,*,*,*,String)"], "initializationStart": [144], "initializationEnd": [250], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.getString(int)"], "configurationStart": [369, 426, 493, 561], "configurationEnd": [403, 471, 537, 599], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 1044, "focalAPIEnd": 1058, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/packages-apps-Gallery2/tree/master/src/com/android/gallery3d/data/DownloadCache.java", "rawCode": "  private synchronized void freeSomeSpaceIfNeed(int maxDeleteFileCount) {\n    if (mTotalBytes <= mCapacity) return;\n    Cursor cursor =\n        mDatabase.query(\n            TABLE_NAME, FREESPACE_PROJECTION, null, null, null, null, FREESPACE_ORDER_BY);\n    try {\n      while (maxDeleteFileCount > 0 && mTotalBytes > mCapacity && cursor.moveToNext()) {\n        long id = cursor.getLong(FREESPACE_IDNEX_ID);\n        String url = cursor.getString(FREESPACE_INDEX_CONTENT_URL);\n        long size = cursor.getLong(FREESPACE_INDEX_CONTENT_SIZE);\n        String path = cursor.getString(FREESPACE_IDNEX_DATA);\n        boolean containsKey;\n        synchronized (mEntryMap) {\n          containsKey = mEntryMap.containsKey(url);\n        }\n        if (!containsKey) {\n          --maxDeleteFileCount;\n          mTotalBytes -= size;\n          new File(path).delete();\n          mDatabase.delete(TABLE_NAME, ID_WHERE, new String[] {String.valueOf(id)});\n        } else {\n          // skip delete, since it is being used\n        }\n      }\n    } finally {\n      cursor.close();\n    }\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1299, "initialization": ["Cursor cursor = query(String,String[],*,*,*,*,*)"], "initializationStart": [493], "initializationEnd": [606], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()"], "configurationStart": [612], "configurationEnd": [632], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = cursor.close()", "focalAPIStart": 685, "focalAPIEnd": 699, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kevinschaul/PlanMyMeal/tree/master/src/com/csci5115/group2/planmymeal/database/DataSourceManager.java", "rawCode": "  public Recipe createCommunityRecipe(\n      String name, double time, String description, Integer numServings) {\n    ContentValues values = new ContentValues();\n    values.put(COLUMN_NAME, name);\n    values.put(COLUMN_TIME, time);\n    values.put(COLUMN_DESCRIPTION, description);\n    values.put(COLUMN_RECIPE_NUM_SERVINGS, numServings);\n    values.put(COLUMN_USER, 0);\n    values.put(COLUMN_CC, 1);\n    long insertId = database.insert(TABLE_RECIPE, null, values);\n    Cursor cursor =\n        database.query(\n            TABLE_RECIPE, allRecipeColumns, COLUMN_ID + \" = \" + insertId, null, null, null, null);\n    cursor.moveToFirst();\n    Recipe newRecipe = cursorToRecipe(cursor);\n    cursor.close();\n    return newRecipe;\n  }\n"}, {"dataset": "cursorClose", "exampleID": 1300, "initialization": ["Cursor cursor = TDDatabase.getDatabase()"], "initializationStart": [286], "initializationEnd": [302], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()", "cursor.getInt(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.moveToNext()"], "configurationStart": [436, 637, 679, 726, 781], "configurationEnd": [456, 653, 698, 745, 800], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 936, "guardExpressionEnd": 955, "guardBlockStart": 936, "guardBlockEnd": 989, "focalAPI": " = cursor.close()", "focalAPIStart": 966, "focalAPIEnd": 980, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bestehle/SeapalAndroidApp/tree/master/TouchDB-Android/src/com/couchbase/touchdb/TDView.java", "rawCode": "  /** * Querying ** */\n  public List<Map<String, Object>> dump() {\n    if (getViewId() < 0) {\n      return null;\n    }\n\n    String[] selectArgs = {Integer.toString(getViewId())};\n    Cursor cursor = null;\n    List<Map<String, Object>> result = null;\n\n    try {\n      cursor =\n          db.getDatabase()\n              .rawQuery(\n                  \"SELECT sequence, key, value FROM maps WHERE view_id=? ORDER BY key\", selectArgs);\n\n      cursor.moveToFirst();\n      result = new ArrayList<Map<String, Object>>();\n      while (!cursor.isAfterLast()) {\n        Map<String, Object> row = new HashMap<String, Object>();\n        row.put(\"seq\", cursor.getInt(0));\n        row.put(\"key\", cursor.getString(1));\n        row.put(\"value\", cursor.getString(2));\n        result.add(row);\n        cursor.moveToNext();\n      }\n    } catch (SQLException e) {\n      Log.e(TDDatabase.TAG, \"Error dumping view\", e);\n      return null;\n    } finally {\n      if (cursor != null) {\n        cursor.close();\n      }\n    }\n\n    return result;\n  }\n"}]