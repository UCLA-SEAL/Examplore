[{"dataset": "getEntity", "exampleID": 2401, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["exception(*)"], "tryExpressionStart": 90, "tryExpressionEnd": 94, "tryBlockStart": 90, "tryBlockEnd": 616, "catchExpressionStart": 558, "catchExpressionEnd": 581, "catchBlockStart": 558, "catchBlockEnd": 616, "exceptionHandlingCallStart": [591], "exceptionHandlingCallEnd": [607], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 177, "focalAPIEnd": 197, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["contentType(httpResponse)", "response.getContent()"], "useStart": [267, 424], "useEnd": [288, 443], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/jena/tree/master/jena-arq/src/main/java/org/apache/jena/riot/web/HttpResponseLib.java", "rawCode": "    @Override\n    public final void handle(String baseIRI, HttpResponse response) {\n      try {\n        Graph g = GraphFactory.createDefaultGraph();\n        HttpEntity entity = response.getEntity();\n        // org.apache.http.entity.ContentType ;\n        String ct = contentType(response);\n        Lang lang = RDFLanguages.contentTypeToLang(ct);\n        StreamRDF dest = StreamRDFLib.graph(g);\n        try (InputStream in = entity.getContent()) {\n          RDFParser.source(in).lang(lang).base(baseIRI).parse(dest);\n        }\n        this.graph = g;\n      } catch (IOException ex) {\n        IO.exception(ex);\n      }\n    }\n"}, {"dataset": "getEntity", "exampleID": 2402, "initialization": ["HttpResponse httpResponse = connect(AtomicReference<URI>)"], "initializationStart": [174], "initializationEnd": [189], "hasTryCatch": 1, "exceptionType": "ClosedByInterruptException", "exceptionHandlingCall": ["interrupted()", "currentThread()", "getName()", "LogContext.w(String)"], "tryExpressionStart": 65, "tryExpressionEnd": 69, "tryBlockStart": 65, "tryBlockEnd": 1021, "catchExpressionStart": 319, "catchExpressionEnd": 363, "catchBlockStart": 319, "catchBlockEnd": 482, "exceptionHandlingCallStart": [371, 406, 406, 399], "exceptionHandlingCallEnd": [391, 428, 438, 475], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 223, "focalAPIEnd": 239, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [282], "useEnd": [301], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mortenpi/ebookdroid/tree/master/src/org/ebookdroid/opds/OPDSClient.java", "rawCode": "  public File loadFile(final Feed parent, final Link link) {\n    try {\n      final AtomicReference<URI> uriRef = createURI(parent, link.uri);\n      final HttpResponse resp = connect(uriRef);\n      final HttpEntity entity = resp.getEntity();\n      return CacheManager.createTempFile(entity.getContent(), \".opds\");\n    } catch (final ClosedByInterruptException ex) {\n      Thread.interrupted();\n      LCTX.w(Thread.currentThread().getName() + \": Thumbnail loading interrupted\");\n    } catch (final InterruptedIOException ex) {\n      Thread.interrupted();\n      LCTX.w(Thread.currentThread().getName() + \": Thumbnail loading interrupted\");\n    } catch (final AuthorizationRequiredException ex) {\n      // No thumbnails without authentication\n    } catch (final OPDSException ex) {\n      LCTX.e(\n          Thread.currentThread().getName() + \": Error on OPDS thumbnail loading: \", ex.getCause());\n    } catch (final Throwable th) {\n      LCTX.e(Thread.currentThread().getName() + \": Error on OPDS catalog access: \", th);\n    }\n    return null;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2403, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpGet)"], "initializationStart": [240], "initializationEnd": [267], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 293, "focalAPIEnd": 313, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.toString()", "httpResponse.getStatusLine()"], "useStart": [293, 350], "useEnd": [324, 374], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/odata4j/odata4j/tree/master/odata4j-fit/src/test/java/org/odata4j/test/integration/issues/Issue184Test.java", "rawCode": "  @Test\n  public void readMetadata() throws ClientProtocolException, IOException {\n    HttpGet request = new HttpGet(Issue184Test.endpointUri + \"$metadata\");\n\n    HttpClient httpclient = new DefaultHttpClient();\n    HttpResponse response = httpclient.execute(request);\n\n    System.out.println(response.getEntity().toString());\n\n    assertEquals(200, response.getStatusLine().getStatusCode());\n  }\n"}, {"dataset": "getEntity", "exampleID": 2404, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpGet)"], "initializationStart": [384], "initializationEnd": [407], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [426], "configurationEnd": [450], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 650, "focalAPIEnd": 670, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)"], "useStart": [629], "useEnd": [671], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/helianbobo/FlipDroid/tree/master/app/src/com/goal98/flipdroid2/model/google/GReader.java", "rawCode": "  private StringBuilder requestList(String url) throws HttpException, IOException {\n    HttpClient httpclient = new DefaultHttpClient();\n    HttpGet get = new HttpGet(url);\n    get.setHeader(\"Authorization\", \"GoogleLogin auth=\" + auth);\n    get.setHeader(\"Cookie\", \"SID=\" + sid);\n    get.setHeader(\"accept-encoding\", \"gzip, deflate\");\n    HttpResponse response = null;\n    response = httpclient.execute(get);\n    int result = response.getStatusLine().getStatusCode();\n    StringBuilder requestListSB;\n    if (result == 200) {\n      // //System.out.println(get.getResponseBodyAsString());\n\n      requestListSB = new StringBuilder(EntityUtils.toString(response.getEntity()));\n\n    } else {\n      //// System.out.println(\"xxx:\" + String.valueOf(result));\n\n      requestListSB = null;\n    }\n    get.abort();\n    httpclient.getConnectionManager().shutdown();\n    httpclient = null;\n    return requestListSB;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2405, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpHost,HttpPost,BasicHttpContext)"], "initializationStart": [627], "initializationEnd": [668], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [693], "configurationEnd": [713], "guardCondition": "httpResponse.getEntity()!=null", "guardType": "IF {", "guardExpressionStart": 749, "guardExpressionEnd": 778, "guardBlockStart": 749, "guardBlockEnd": 843, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 753, "focalAPIEnd": 769, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)"], "useStart": [798], "useEnd": [836], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/conxgit/conxlogistics-gerrit4/tree/master/com.conx.logistics.kernel/portal/remote.services.impl/src/main/java/com/conx/logistics/kernel/portal/remote/services/impl/LiferayPortalServicesImpl.java", "rawCode": "  @Override\n  public void setUserRole(String userId, String roleId) throws Exception {\n    // Add AuthCache to the execution context\n    BasicHttpContext ctx = new BasicHttpContext();\n    ctx.setAttribute(ClientContext.AUTH_CACHE, authCache);\n\n    HttpPost post = new HttpPost(\"/api/secure/jsonws//user/set-role-users\");\n    MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n\n    entity.addPart(\"roleId\", new StringBody(roleId, Charset.forName(\"UTF-8\")));\n    entity.addPart(\"userIds[]\", new StringBody(userId, Charset.forName(\"UTF-8\")));\n\n    post.setEntity(entity);\n\n    HttpResponse resp = httpclient.execute(targetHost, post, ctx);\n    System.out.println(resp.getStatusLine());\n\n    String response = null;\n    if (resp.getEntity() != null) {\n      response = EntityUtils.toString(resp.getEntity());\n    }\n    System.out.println(\"setUserRole Res:[\" + response + \"]\");\n  }\n"}, {"dataset": "getEntity", "exampleID": 2406, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpPost)", "HttpResponse httpResponse = HttpClient.execute(HttpPut)", "HttpResponse httpResponse = HttpClient.execute(HttpGet)"], "initializationStart": [3294, 3374, 3750], "initializationEnd": [3314, 3393, 3769], "hasTryCatch": 1, "exceptionType": "RuntimeException", "exceptionHandlingCall": ["new RuntimeException(String,*)"], "tryExpressionStart": 3211, "tryExpressionEnd": 3215, "tryBlockStart": 3211, "tryBlockEnd": 6121, "catchExpressionStart": 4498, "catchExpressionEnd": 4525, "catchBlockStart": 4498, "catchBlockEnd": 4660, "exceptionHandlingCallStart": [4545], "exceptionHandlingCallEnd": [4647], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [3907], "configurationEnd": [3925], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 4001, "focalAPIEnd": 4015, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()", "httpResponse.getEntity()"], "useStart": [4044, 4759], "useEnd": [4059, 4773], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ajlyon/zandy/tree/master/src/main/java/com/gimranov/zandy/app/task/APIRequest.java", "rawCode": "  /**\n   * Issues the specified request, calling its specified handler as appropriate\n   *\n   * <p>This should not be run from a UI thread\n   *\n   * @return\n   * @throws APIException\n   */\n  public void issue(Database db, ServerCredentials cred) throws APIException {\n\n    URI uri;\n\n    // Add the API key, if missing and we have it\n    if (!query.contains(\"key=\") && key != null) {\n      String suffix = (query.contains(\"?\")) ? \"&key=\" + key : \"?key=\" + key;\n      query = query + suffix;\n    }\n\n    // Force lower-case\n    method = method.toLowerCase();\n\n    Log.i(TAG, \"Request \" + method + \": \" + query);\n\n    try {\n      uri = new URI(query);\n    } catch (URISyntaxException e1) {\n      throw new APIException(APIException.INVALID_URI, \"Invalid URI: \" + query, this);\n    }\n\n    HttpClient client = new DefaultHttpClient();\n    // The default implementation includes an Expect: header, which\n    // confuses the Zotero servers.\n    client.getParams().setParameter(\"http.protocol.expect-continue\", false);\n    // We also need to send our data nice and raw.\n    client.getParams().setParameter(\"http.protocol.content-charset\", \"UTF-8\");\n\n    HttpGet get = new HttpGet(uri);\n    HttpPost post = new HttpPost(uri);\n    HttpPut put = new HttpPut(uri);\n    HttpDelete delete = new HttpDelete(uri);\n\n    for (HttpRequest request : Arrays.asList(get, post, put, delete)) {\n      request.setHeader(\"Zotero-API-Version\", \"1\");\n    }\n\n    // There are several shared initialization routines for POST and PUT\n    if (\"post\".equals(method) || \"put\".equals(method)) {\n      if (ifMatch != null) {\n        post.setHeader(\"If-Match\", ifMatch);\n        put.setHeader(\"If-Match\", ifMatch);\n      }\n      if (contentType != null) {\n        post.setHeader(\"Content-Type\", contentType);\n        put.setHeader(\"Content-Type\", contentType);\n      }\n      if (body != null) {\n        Log.d(TAG, \"Request body: \" + body);\n        // Force the encoding to UTF-8\n        StringEntity entity;\n        try {\n          entity = new StringEntity(body, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n          throw new APIException(\n              APIException.INVALID_UUID,\n              \"UnsupportedEncodingException. This shouldn't \"\n                  + \"be possible-- UTF-8 is certainly supported\",\n              this);\n        }\n        post.setEntity(entity);\n        put.setEntity(entity);\n      }\n    }\n\n    if (\"get\".equals(method)) {\n      if (contentType != null) {\n        get.setHeader(\"Content-Type\", contentType);\n      }\n    }\n\n    /* For requests that return Atom feeds or entries (XML):\n     * ITEMS_ALL ]\n     * ITEMS_FOR_COLLECTION ]- Except format=keys\n     * ITEMS_CHILDREN ]\n     *\n     * ITEM_BY_KEY\n     * COLLECTIONS_ALL\n     * ITEM_NEW\n     * ITEM_UPDATE\n     * ITEM_ATTACHMENT_NEW\n     * ITEM_ATTACHMENT_UPDATE\n     */\n    if (\"xml\".equals(disposition)) {\n      XMLResponseParser parse = new XMLResponseParser(this);\n      // These types will always have a temporary key that we've\n      // been using locally, and which should be replaced by the\n      // incoming item key.\n      if (type == ITEM_NEW || type == ITEM_ATTACHMENT_NEW) {\n        parse.update(updateType, updateKey);\n      }\n\n      try {\n        HttpResponse hr;\n        if (\"post\".equals(method)) {\n          hr = client.execute(post);\n        } else if (\"put\".equals(method)) {\n          hr = client.execute(put);\n        } else {\n          // We fall back on GET here, but there really\n          // shouldn't be anything else, so we throw in that case\n          // for good measure\n          if (!\"get\".equals(method)) {\n            throw new APIException(\n                APIException.INVALID_METHOD, \"Unexpected method: \" + method, this);\n          }\n          hr = client.execute(get);\n        }\n\n        // Record the response code\n        status = hr.getStatusLine().getStatusCode();\n        Log.d(TAG, status + \" : \" + hr.getStatusLine().getReasonPhrase());\n\n        if (status < 400) {\n          HttpEntity he = hr.getEntity();\n          InputStream in = he.getContent();\n          parse.setInputStream(in);\n          // Entry mode if the request is an update (PUT) or if it is a request\n          // for a single item by key (ITEM_BY_KEY)\n          int mode =\n              (\"put\".equals(method) || type == APIRequest.ITEM_BY_KEY)\n                  ? XMLResponseParser.MODE_ENTRY\n                  : XMLResponseParser.MODE_FEED;\n          try {\n            parse.parse(mode, uri.toString(), db);\n          } catch (RuntimeException e) {\n            throw new RuntimeException(\n                \"Parser threw exception on request: \" + method + \" \" + query, e);\n          }\n        } else {\n          ByteArrayOutputStream ostream = new ByteArrayOutputStream();\n          hr.getEntity().writeTo(ostream);\n          Log.e(TAG, \"Error Body: \" + ostream.toString());\n          Log.e(TAG, \"Request Body:\" + body);\n\n          if (status == 412) {\n            // This is: \"Precondition Failed\", meaning that we provided\n            // the wrong etag to update the item. That should mean that\n            // there is a conflict between what we're sending (PUT) and\n            // the server. We mark that ourselves and save the request\n            // to the database, and also notify our handler.\n            getHandler().onError(this, APIRequest.HTTP_ERROR_CONFLICT);\n          } else {\n            Log.e(TAG, \"Response status \" + status + \" : \" + ostream.toString());\n            getHandler().onError(this, APIRequest.HTTP_ERROR_UNSPECIFIED);\n          }\n          status = getHttpStatus() + REQ_FAILING;\n          recordAttempt(db);\n\n          // I'm not sure whether we should throw here\n          throw new APIException(APIException.HTTP_ERROR, ostream.toString(), this);\n        }\n      } catch (Exception e) {\n        StringBuilder sb = new StringBuilder();\n        for (StackTraceElement el : e.getStackTrace()) {\n          sb.append(el.toString()).append(\"\\n\");\n        }\n        recordAttempt(db);\n        throw new APIException(\n            APIException.HTTP_ERROR, \"An IOException was thrown: \" + sb.toString(), this, e);\n      }\n    } // end if (\"xml\".equals(disposition)) {..}\n    /* For requests that return non-XML data:\n     * ITEMS_ALL ]\n     * ITEMS_FOR_COLLECTION ]- For format=keys\n     * ITEMS_CHILDREN ]\n     *\n     * No server response:\n     * ITEM_DELETE\n     * ITEM_MEMBERSHIP_ADD\n     * ITEM_MEMBERSHIP_REMOVE\n     * ITEM_ATTACHMENT_DELETE\n     *\n     * Currently not supported; return JSON:\n     * ITEM_FIELDS\n     * CREATOR_TYPES\n     * ITEM_FIELDS_L10N\n     * CREATOR_TYPES_L10N\n     *\n     * These ones use BasicResponseHandler, which gives us\n     * the response as a basic string. This is only appropriate\n     * for smaller responses, since it means we have to wait until\n     * the entire response is received before parsing it, so we\n     * don't use it for the XML responses.\n     *\n     * The disposition here is \"none\" or \"raw\".\n     *\n     * The JSON-returning requests, such as ITEM_FIELDS, are not currently\n     * supported; they should have a disposition of their own.\n     */\n    else {\n      BasicResponseHandler brh = new BasicResponseHandler();\n      String resp;\n\n      try {\n        if (\"post\".equals(method)) {\n          resp = client.execute(post, brh);\n        } else if (\"put\".equals(method)) {\n          resp = client.execute(put, brh);\n        } else if (\"delete\".equals(method)) {\n          resp = client.execute(delete, brh);\n        } else {\n          // We fall back on GET here, but there really\n          // shouldn't be anything else, so we throw in that case\n          // for good measure\n          if (!\"get\".equals(method)) {\n            throw new APIException(\n                APIException.INVALID_METHOD, \"Unexpected method: \" + method, this);\n          }\n          resp = client.execute(get, brh);\n        }\n      } catch (IOException e) {\n        StringBuilder sb = new StringBuilder();\n        for (StackTraceElement el : e.getStackTrace()) {\n          sb.append(el.toString()).append(\"\\n\");\n        }\n        recordAttempt(db);\n        throw new APIException(\n            APIException.HTTP_ERROR, \"An IOException was thrown: \" + sb.toString(), this);\n      }\n\n      if (\"raw\".equals(disposition)) {\n        /*\n         * The output should be a newline-delimited set of alphanumeric\n         * keys.\n         */\n\n        String[] keys = resp.split(\"\\n\");\n\n        ArrayList<String> missing = new ArrayList<String>();\n\n        if (type == ITEMS_ALL || type == ITEMS_FOR_COLLECTION) {\n\n          // Try to get a parent collection\n          // Our query looks like this:\n          // /users/5770/collections/2AJUSIU9/items\n          int colloc = query.indexOf(\"/collections/\");\n          int itemloc = query.indexOf(\"/items\");\n          // The string \"/collections/\" is thirteen characters long\n          ItemCollection coll = ItemCollection.load(query.substring(colloc + 13, itemloc), db);\n\n          if (coll != null) {\n            coll.loadChildren(db);\n\n            // If this is a collection's key listing, we first look\n            // for any synced keys we have that aren't in the list\n            ArrayList<String> keyAL = new ArrayList<String>(Arrays.asList(keys));\n            ArrayList<Item> notThere = coll.notInKeys(keyAL);\n            // We should then remove those memberships\n            for (Item i : notThere) {\n              coll.remove(i, true, db);\n            }\n          }\n\n          ArrayList<Item> recd = new ArrayList<Item>();\n          for (String key1 : keys) {\n            Item got = Item.load(key1, db);\n            if (got == null) {\n              missing.add(key1);\n            } else {\n              // We can update the collection membership immediately\n              if (coll != null) coll.add(got, true, db);\n              recd.add(got);\n            }\n          }\n\n          if (coll != null) {\n            coll.saveChildren(db);\n            coll.save(db);\n          }\n\n          Log.d(TAG, \"Received \" + keys.length + \" keys, \" + missing.size() + \" missing ones\");\n          Log.d(TAG, \"Have \" + (double) recd.size() / keys.length + \" of list\");\n\n          if (recd.size() == keys.length) {\n            Log.d(TAG, \"No new items\");\n            succeeded(db);\n          } else if ((double) recd.size() / keys.length < REREQUEST_CUTOFF) {\n            Log.d(TAG, \"Requesting full list\");\n            APIRequest mReq;\n            if (type == ITEMS_FOR_COLLECTION) {\n              mReq = fetchItems(coll, false, cred);\n            } else {\n              mReq = fetchItems(false, cred);\n            }\n\n            mReq.status = REQ_NEW;\n            mReq.save(db);\n          } else {\n            Log.d(TAG, \"Requesting \" + missing.size() + \" items one by one\");\n            APIRequest mReq;\n            for (String key : missing) {\n              // Queue request for the missing key\n              mReq = fetchItem(key, cred);\n              mReq.status = REQ_NEW;\n              mReq.save(db);\n            }\n            // Queue request for the collection again, by key\n            // XXX This is not the best way to make sure these\n            // items are put in the correct collection.\n            if (type == ITEMS_FOR_COLLECTION) {\n              fetchItems(coll, true, cred).save(db);\n            }\n          }\n        } else if (type == ITEMS_CHILDREN) {\n          // Try to get a parent item\n          // Our query looks like this:\n          // /users/5770/items/2AJUSIU9/children\n          int itemloc = query.indexOf(\"/items/\");\n          int childloc = query.indexOf(\"/children\");\n          // The string \"/items/\" is seven characters long\n          Item item = Item.load(query.substring(itemloc + 7, childloc), db);\n\n          ArrayList<Attachment> recd = new ArrayList<Attachment>();\n          for (String key1 : keys) {\n            Attachment got = Attachment.load(key1, db);\n            if (got == null) missing.add(key1);\n            else recd.add(got);\n          }\n\n          if ((double) recd.size() / keys.length < REREQUEST_CUTOFF) {\n            APIRequest mReq;\n            mReq = cred.prep(children(item));\n            mReq.status = REQ_NEW;\n            mReq.save(db);\n          } else {\n            APIRequest mReq;\n            for (String key : missing) {\n              // Queue request for the missing key\n              mReq = fetchItem(key, cred);\n              mReq.status = REQ_NEW;\n              mReq.save(db);\n            }\n          }\n        }\n      } else if (\"json\".equals(disposition)) {\n        // TODO\n      } else {\n        /* Here, disposition should be \"none\" */\n        // Nothing to be done.\n      }\n\n      getHandler().onComplete(this);\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2407, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpUriRequest)"], "initializationStart": [1108], "initializationEnd": [1135], "hasTryCatch": 1, "exceptionType": "AbstractMymedException", "exceptionHandlingCall": ["HttpCallHandler.callInterrupted(int)"], "tryExpressionStart": 132, "tryExpressionEnd": 136, "tryBlockStart": 132, "tryBlockEnd": 3525, "catchExpressionStart": 2726, "catchExpressionEnd": 2759, "catchBlockStart": 2726, "catchBlockEnd": 2944, "exceptionHandlingCallStart": [2832], "exceptionHandlingCallEnd": [2859], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1225, "focalAPIEnd": 1245, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()", "response.consumeContent()", "httpResponse.getStatusLine()"], "useStart": [1399, 1543, 1643], "useEnd": [1418, 1566, 1667], "hasFinally": 1, "cleanUpCall": ["currentTimeMillis()", "d(String,String)"], "finallyExpressionStart": 3186, "finallyExpressionEnd": 3194, "finallyBlockStart": 3186, "finallyBlockEnd": 3525, "cleanUpCallStart": [3217, 3272], "cleanUpCallEnd": [3243, 3304], "url": "https://github.com/luigiliquori/myMed/tree/master/frontend/binary/android/myjam/src/com/mymed/android/myjam/controller/HttpCall.java", "rawCode": "  /** Run the http method. */\n  public void run() {\n    long startCall = System.currentTimeMillis();\n    String message = null;\n    try {\n      if (handler != null) handler.callStart(id);\n      Log.d(TAG, \"Start call \" + id + \" :\" + String.valueOf(startCall));\n      URI uri = new URI(this.uri);\n\n      if (mStopped) return;\n\n      synchronized (lock) {\n        switch (method) {\n          case GET:\n            this.request = new HttpGet(uri);\n            break;\n          case POST:\n            request = new HttpPost(uri);\n            if (jSonObj != null)\n              ((HttpPost) request).setEntity(new StringEntity(jSonObj, CHARSET_NAME));\n            break;\n          case PUT:\n            request = new HttpPut(uri);\n            if (jSonObj != null)\n              ((HttpPut) request).setEntity(new StringEntity(jSonObj, CHARSET_NAME));\n            break;\n          case DELETE:\n            request = new HttpDelete(uri);\n            break;\n          default:\n            request = new HttpGet(uri);\n        }\n      }\n      // Log.i(TAG, \" REQUEST : \"+request.getURI());\n      HttpResponse response = httpClient.execute(request);\n\n      synchronized (lock) {\n        request = null;\n      }\n\n      HttpEntity entity = response.getEntity();\n      // Log.i(TAG,\" STATUS \"+String.valueOf(response.getStatusLine().getStatusCode()));\n      String responseContent =\n          convertStreamToString(entity.getContent(), entity.getContentLength());\n      if (responseContent == null) throw new InternalClientException(\"Response empty.\");\n      entity.consumeContent();\n      // Log.i(TAG,\" RESPONSE : \"+responseContent);\n      int statusCode = response.getStatusLine().getStatusCode();\n      switch (statusCode) {\n        case HttpStatus.SC_INTERNAL_SERVER_ERROR:\n        case HttpStatus.SC_NOT_FOUND:\n        case HttpStatus.SC_CONFLICT: // TODO Check if this error code is really used.\n        case HttpStatus.SC_FORBIDDEN:\n          JSONObject object = (JSONObject) new JSONTokener(responseContent).nextValue();\n          if (object.has(\"description\")) {\n            // JSONObject errObj = object.getJSONObject(\"error\");\n            message = object.getString(\"description\");\n          } else {\n            message = \"\";\n          }\n          if (statusCode == HttpStatus.SC_INTERNAL_SERVER_ERROR) {\n            message = \"Internal server error. \" + message;\n            throw new InternalBackEndException(message);\n          } else {\n            throw new IOBackEndException(message, 404);\n          }\n        case HttpStatus.SC_OK:\n          if (handler != null) handler.callSuccess(id, responseContent);\n          break;\n        default:\n          throw new InternalClientException(\"Unknown status code.\");\n      }\n    } catch (AbstractMymedException e) {\n      if (mStopped) {\n        message = CALL_INTERRUPTED + id;\n        handler.callInterrupted(id);\n      } else {\n        handler.callError(id, e.getStatus(), message);\n      }\n    } catch (Exception e) {\n      if (mStopped) {\n        message = CALL_INTERRUPTED + id;\n        handler.callInterrupted(id);\n      } else {\n        message = CALL_ERROR + e.toString();\n        handler.callError(id, 400, message);\n      }\n    } finally {\n      long endCall = System.currentTimeMillis();\n      if (message != null) Log.d(TAG, \"Result: \" + message);\n      Log.d(\n          TAG,\n          \"End call \"\n              + id\n              + \" :\"\n              + String.valueOf(endCall)\n              + \" Duration: \"\n              + String.valueOf(endCall - startCall));\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2408, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 357, "tryExpressionEnd": 361, "tryBlockStart": 357, "tryBlockEnd": 609, "catchExpressionStart": 493, "catchExpressionEnd": 518, "catchBlockStart": 493, "catchBlockEnd": 552, "exceptionHandlingCallStart": [526], "exceptionHandlingCallEnd": [545], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(httpResponse==null)", "guardType": "IF {", "guardExpressionStart": 281, "guardExpressionEnd": 302, "guardBlockStart": 281, "guardBlockEnd": 329, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 396, "focalAPIEnd": 416, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response,*)"], "useStart": [375], "useEnd": [429], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brunodea/infocity/tree/master/src/br/ufsm/brunodea/tcc/internet/Internet.java", "rawCode": "  /**\n   * Método que pega a resposta do servidor no tipo HttpResponse e transforma em string,\n   *\n   * @param response Resposta em HttpResponse do servidor.\n   * @return Resposta transformada em String.\n   */\n  private static String responseToString(HttpResponse response) {\n    if (response == null) {\n      return null;\n    }\n    String res = null;\n    try {\n      res = EntityUtils.toString(response.getEntity(), HTTP.UTF_8);\n      res = new String(res.getBytes(\"UTF-8\"), \"UTF-8\");\n    } catch (ParseException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return res;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2409, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpRequestBase,HttpContext)"], "initializationStart": [2211], "initializationEnd": [2255], "hasTryCatch": 1, "exceptionType": "ZLNetworkException", "exceptionHandlingCall": [], "tryExpressionStart": 2184, "tryExpressionEnd": 2188, "tryBlockStart": 2184, "tryBlockEnd": 2872, "catchExpressionStart": 3952, "catchExpressionEnd": 3981, "catchBlockStart": 3952, "catchBlockEnd": 4003, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 2276, "focalAPIEnd": 2296, "followUpCheck": "response != null && (true)", "checkType": "IF", "followUpCheckExpressionStart": 3066, "followUpCheckExpressionEnd": 3206, "followUpCheckBlockStart": 3066, "followUpCheckBlockEnd": 3254, "use": ["httpResponse.getStatusLine()", "response.getContent()", "response.getContentEncoding()", "httpResponse.getStatusLine()", "response.consumeContent()"], "useStart": [2344, 3226, 3332, 3890, 4656], "useEnd": [2368, 3245, 3359, 3914, 4679], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 3588, "finallyExpressionEnd": 3596, "finallyBlockStart": 3588, "finallyBlockEnd": 3633, "cleanUpCallStart": [3608], "cleanUpCallEnd": [3622], "url": "https://github.com/boussouira/android-arabic-reader/tree/master/src/org/geometerplus/zlibrary/core/network/ZLNetworkManager.java", "rawCode": "  private void perform(ZLNetworkRequest request, int socketTimeout, int connectionTimeout)\n      throws ZLNetworkException {\n    boolean success = false;\n    DefaultHttpClient httpClient = null;\n    HttpEntity entity = null;\n    try {\n      final HttpContext httpContext = new BasicHttpContext();\n      httpContext.setAttribute(ClientContext.COOKIE_STORE, myCookieStore);\n\n      request.doBefore();\n      final HttpParams params = new BasicHttpParams();\n      HttpConnectionParams.setSoTimeout(params, socketTimeout);\n      HttpConnectionParams.setConnectionTimeout(params, connectionTimeout);\n      httpClient = new DefaultHttpClient(params);\n      final HttpRequestBase httpRequest;\n      if (request.PostData != null) {\n        httpRequest = new HttpPost(request.URL);\n        ((HttpPost) httpRequest).setEntity(new StringEntity(request.PostData, \"utf-8\"));\n        /*\n        httpConnection.setRequestProperty(\n        \"Content-Length\",\n        Integer.toString(request.PostData.getBytes().length)\n        );\n        httpConnection.setRequestProperty(\n        \"Content-Type\",\n        \"application/x-www-form-urlencoded\"\n        );\n        */\n      } else if (!request.PostParameters.isEmpty()) {\n        httpRequest = new HttpPost(request.URL);\n        final List<BasicNameValuePair> list =\n            new ArrayList<BasicNameValuePair>(request.PostParameters.size());\n        for (Map.Entry<String, String> entry : request.PostParameters.entrySet()) {\n          list.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));\n        }\n        ((HttpPost) httpRequest).setEntity(new UrlEncodedFormEntity(list, \"utf-8\"));\n      } else {\n        httpRequest = new HttpGet(request.URL);\n      }\n      httpRequest.setHeader(\"User-Agent\", ZLNetworkUtil.getUserAgent());\n      httpRequest.setHeader(\"Accept-Encoding\", \"gzip\");\n      httpRequest.setHeader(\"Accept-Language\", Locale.getDefault().getLanguage());\n      httpClient.setCredentialsProvider(new MyCredentialsProvider(httpRequest, request.isQuiet()));\n      HttpResponse response = null;\n      IOException lastException = null;\n      for (int retryCounter = 0; retryCounter < 3 && entity == null; ++retryCounter) {\n        try {\n          response = httpClient.execute(httpRequest, httpContext);\n          entity = response.getEntity();\n          lastException = null;\n          if (response.getStatusLine().getStatusCode() == HttpURLConnection.HTTP_UNAUTHORIZED) {\n            final AuthState state =\n                (AuthState) httpContext.getAttribute(ClientContext.TARGET_AUTH_STATE);\n            if (state != null) {\n              final AuthScopeKey key = new AuthScopeKey(state.getAuthScope());\n              if (myCredentialsCreator.removeCredentials(key)) {\n                entity = null;\n              }\n            }\n          }\n        } catch (IOException e) {\n          lastException = e;\n        }\n      }\n      if (lastException != null) {\n        throw lastException;\n      }\n      final int responseCode = response.getStatusLine().getStatusCode();\n\n      InputStream stream = null;\n      if (entity != null\n          && (responseCode == HttpURLConnection.HTTP_OK\n              || responseCode == HttpURLConnection.HTTP_PARTIAL)) {\n        stream = entity.getContent();\n      }\n\n      if (stream != null) {\n        try {\n          final Header encoding = entity.getContentEncoding();\n          if (encoding != null && \"gzip\".equalsIgnoreCase(encoding.getValue())) {\n            stream = new GZIPInputStream(stream);\n          }\n          request.handleStream(stream, (int) entity.getContentLength());\n        } finally {\n          stream.close();\n        }\n        success = true;\n      } else {\n        if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n          throw new ZLNetworkException(ZLNetworkException.ERROR_AUTHENTICATION_FAILED);\n        } else {\n          throw new ZLNetworkException(true, response.getStatusLine().toString());\n        }\n      }\n    } catch (ZLNetworkException e) {\n      throw e;\n    } catch (IOException e) {\n      e.printStackTrace();\n      final String code;\n      if (e instanceof UnknownHostException) {\n        code = ZLNetworkException.ERROR_RESOLVE_HOST;\n      } else {\n        code = ZLNetworkException.ERROR_CONNECT_TO_HOST;\n      }\n      throw new ZLNetworkException(code, ZLNetworkUtil.hostFromUrl(request.URL), e);\n    } catch (Exception e) {\n      e.printStackTrace();\n      throw new ZLNetworkException(true, e.getMessage(), e);\n    } finally {\n      request.doAfter(success);\n      if (httpClient != null) {\n        httpClient.getConnectionManager().shutdown();\n      }\n      if (entity != null) {\n        try {\n          entity.consumeContent();\n        } catch (IOException e) {\n        }\n      }\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2410, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpPost)"], "initializationStart": [626], "initializationEnd": [646], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [676], "configurationEnd": [704], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 896, "focalAPIEnd": 920, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kerpie/truTest/tree/master/src/com/trustripes/adapters/CustomViewPagerAdapter.java", "rawCode": "    @Override\n    protected Void doInBackground(Boolean... params) {\n\n      try {\n\n        /* Prepare variables for remote data check */\n        HttpClient client = new DefaultHttpClient();\n        String postURL = ConstantValues.URL + \"/ws/ws-perfildetalle.php\";\n        HttpPost post = new HttpPost(postURL);\n        List<NameValuePair> param = new ArrayList<NameValuePair>();\n        param.add(new BasicNameValuePair(\"iduser\", id));\n        param.add(new BasicNameValuePair(\"tipo\", tipo));\n        UrlEncodedFormEntity ent = new UrlEncodedFormEntity(param);\n        post.setEntity(ent);\n        HttpResponse responsePOST = client.execute(post);\n        StatusLine status = responsePOST.getStatusLine();\n        /* Filter what kind of response was obtained */\n        /* Filtering http response 200 */\n        if (status.getStatusCode() == HttpStatus.SC_OK) {\n          HttpEntity new_entity = responsePOST.getEntity();\n          InputStream inputStream = new_entity.getContent();\n          BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n          String line = null;\n          stringBuilder = new StringBuilder();\n          while ((line = reader.readLine()) != null) {\n            stringBuilder.append(line);\n          }\n          JSONObject SnackjsonObject = new JSONObject(stringBuilder.toString());\n          statusResponse = SnackjsonObject.getString(\"status\");\n\n          if (Integer.parseInt(statusResponse) == 1) {\n            /* Sin error */\n            SnackjsonArray = new JSONArray(SnackjsonObject.getString(\"datos\"));\n            for (int i = 0; i < SnackjsonArray.length(); i++) {\n              JSONObject jsonObject = SnackjsonArray.getJSONObject(i);\n              pathPhoto = jsonObject.getString(\"rutafoto\");\n              String urls = ConstantValues.URL + \"/ws/productphoto/\" + pathPhoto;\n              LifeGuard tmpLG = new LifeGuard();\n              tmpLG.setPath(urls);\n              tmpLG.setImage(imageArray[i]);\n              tmpLG.setProgress(progressArray[i]);\n              SnackImageLoad imageLoader = new SnackImageLoad();\n              imageLoader.execute(tmpLG);\n            }\n\n          } else {\n            // Hubo un error\n          }\n          reader.close();\n          inputStream.close();\n\n        } else {\n          /* Check Other Status Code */\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n      return null;\n    }\n"}, {"dataset": "getEntity", "exampleID": 2411, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpHost,DavRequest)", "HttpResponse httpResponse = HttpClient.execute(HttpHost,DavRequest)"], "initializationStart": [2697, 3013], "initializationEnd": [2730, 3046], "hasTryCatch": 1, "exceptionType": "SSLHandshakeException", "exceptionHandlingCall": ["getClass()", "getSimpleName()", "getMessage()", "fullUrl()", "i(String,String)"], "tryExpressionStart": 2672, "tryExpressionEnd": 2676, "tryBlockStart": 2672, "tryBlockEnd": 3055, "catchExpressionStart": 4821, "catchExpressionEnd": 4853, "catchBlockStart": 4821, "catchBlockEnd": 4968, "exceptionHandlingCallStart": [4720, 4720, 4758, 4784, 4709], "exceptionHandlingCallEnd": [4732, 4748, 4772, 4793, 4794], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 3287, "focalAPIEnd": 3307, "followUpCheck": "response != null", "checkType": "IF", "followUpCheckExpressionStart": 3938, "followUpCheckExpressionEnd": 3957, "followUpCheckBlockStart": 3938, "followUpCheckBlockEnd": 4662, "use": ["response.getContent()", "entityToString(response)"], "useStart": [4010, 4568], "useEnd": [4029, 4590], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ujayant/acal/tree/master/src/com/morphoss/acal/service/connector/AcalRequestor.java", "rawCode": "  /**\n   * Marshall and send the request.\n   *\n   * @param headers\n   * @param entityString\n   * @return\n   * @throws SendRequestFailedException\n   * @throws SSLException\n   * @throws AuthenticationFailure\n   * @throws ConnectionFailedException\n   * @throws ConnectionPoolTimeoutException\n   */\n  private synchronized InputStream sendRequest(Header[] headers, String entityString)\n      throws SendRequestFailedException, SSLException, AuthenticationFailure,\n          ConnectionFailedException, ConnectionPoolTimeoutException {\n    long down = 0;\n    long up = 0;\n    long start = System.currentTimeMillis();\n\n    if (!initialised) throw new IllegalStateException(\"AcalRequestor has not been initialised!\");\n    statusCode = -1;\n    try {\n      // Create request and add headers and entity\n      request = new DavRequest(method, this.fullUrl());\n      // request.addHeader(new BasicHeader(\"User-Agent\", AcalConnectionPool.getUserAgent()));\n      if (headers != null) for (Header h : headers) request.addHeader(h);\n\n      if (authRequired && authType != Servers.AUTH_NONE) request.addHeader(buildAuthHeader());\n      else if (authRequired) {\n        // Assume basicAuth\n        request.addHeader(basicAuthHeader());\n      }\n\n      if (entityString != null) {\n        request.setEntity(new StringEntity(entityString.toString(), \"UTF-8\"));\n        up = request.getEntity().getContentLength();\n      }\n\n      // This trick greatly reduces the occurrence of host not found errors.\n      try {\n        InetAddress.getByName(this.hostName);\n      } catch (UnknownHostException e1) {\n        Thread.sleep(100);\n        try {\n          InetAddress.getByName(this.hostName);\n        } catch (UnknownHostException e2) {\n          Thread.sleep(100);\n        }\n      }\n\n      int requestPort = -1;\n      if (this.protocol == null) this.protocol = PROTOCOL_HTTP;\n      String requestProtocol = this.protocol;\n      if ((this.protocol.equals(PROTOCOL_HTTP) && this.port != 80)\n          || (this.protocol.equals(PROTOCOL_HTTPS) && this.port != 443)) {\n        requestPort = this.port;\n      }\n\n      if (Constants.LOG_DEBUG || debugThisRequest) {\n        Log.println(\n            Constants.LOGD,\n            TAG,\n            String.format(\n                \"Method: %s, Protocol: %s, Hostname: %s, Port: %d, Path: %s\",\n                method, requestProtocol, hostName, requestPort, path));\n      }\n      HttpHost host = new HttpHost(this.hostName, requestPort, requestProtocol);\n\n      if (debugThisRequest) logRequest(Constants.LOGV);\n\n      // Send request and get response\n      response = null;\n\n      if (Constants.debugHeap) AcalDebug.heapDebug(TAG, \"Making HTTP request\");\n      try {\n        response = httpClient.execute(host, request);\n      } catch (ConnectionPoolTimeoutException e) {\n        Log.println(\n            Constants.LOGI,\n            TAG,\n            e.getClass().getSimpleName() + \": \" + e.getMessage() + \" to \" + fullUrl());\n        Log.println(Constants.LOGI, TAG, \"Retrying...\");\n        response = httpClient.execute(host, request);\n      }\n      if (Constants.debugHeap) AcalDebug.heapDebug(TAG, \"Finished HTTP request\");\n\n      this.responseHeaders = response.getAllHeaders();\n      this.statusCode = response.getStatusLine().getStatusCode();\n\n      HttpEntity entity = response.getEntity();\n      down = (entity == null ? 0 : entity.getContentLength());\n\n      long finish = System.currentTimeMillis();\n      double timeTaken = ((double) (finish - start)) / 1000.0;\n\n      if (Constants.LOG_DEBUG || debugThisRequest)\n        Log.println(\n            Constants.LOGD,\n            TAG,\n            \"Response: \"\n                + statusCode\n                + \", Sent: \"\n                + up\n                + \", Received: \"\n                + down\n                + \", Took: \"\n                + timeTaken\n                + \" seconds\");\n\n      if (debugThisRequest) {\n        return logResponse(Constants.LOGV);\n      } else if (entity != null) {\n        if (entity.getContentLength() > 0) return entity.getContent();\n\n        // Kind of admitting defeat here, but I can't track down why we seem\n        // to end up in never-never land if we just return entity.getContent()\n        // directly when entity.getContentLength() is -1 ('unknown', apparently).\n        // Horribly inefficient too.\n        //\n        // @todo: Check whether this problem was caused by failing to close the InputStream\n        // and this hack can be removed... Need to find a server which does not send Content-Length\n        // headers.\n        //\n        String tmpEntity = entityToString(entity);\n        return new ByteArrayInputStream(tmpEntity.getBytes());\n      }\n\n    } catch (SSLProtocolException e) {\n      Log.i(TAG, e.getClass().getSimpleName() + \": \" + e.getMessage() + \" to \" + fullUrl());\n      return null;\n    } catch (SSLHandshakeException e) {\n      Log.i(TAG, e.getClass().getSimpleName() + \": \" + e.getMessage() + \" to \" + fullUrl());\n      throw e;\n    } catch (SSLException e) {\n      if (debugThisRequest) Log.println(Constants.LOGD, TAG, Log.getStackTraceString(e));\n      throw e;\n    } catch (AuthenticationFailure e) {\n      if (debugThisRequest) Log.println(Constants.LOGD, TAG, Log.getStackTraceString(e));\n      throw e;\n    } catch (ConnectionPoolTimeoutException e) {\n      Log.i(TAG, e.getClass().getSimpleName() + \": \" + e.getMessage() + \" to \" + fullUrl());\n      throw e;\n    } catch (SocketTimeoutException e) {\n      Log.i(TAG, e.getClass().getSimpleName() + \": \" + e.getMessage() + \" to \" + fullUrl());\n      return null;\n    } catch (ConnectTimeoutException e) {\n      Log.i(TAG, e.getClass().getSimpleName() + \": \" + e.getMessage() + \" to \" + fullUrl());\n      return null;\n    } catch (UnknownHostException e) {\n      Log.i(TAG, e.getClass().getSimpleName() + \": \" + e.getMessage() + \" to \" + fullUrl());\n      return null;\n    } catch (IOException e) {\n      Log.i(TAG, e.getClass().getSimpleName() + \": \" + e.getMessage() + \" to \" + fullUrl());\n      return null;\n    } catch (Exception e) {\n      Log.println(Constants.LOGD, TAG, Log.getStackTraceString(e));\n      if (statusCode < 300 || statusCode > 499)\n        throw new SendRequestFailedException(e.getMessage());\n    }\n    return null;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2412, "initialization": ["HttpResponse httpResponse = IMifiedDriver.execute(HttpPost)"], "initializationStart": [1403], "initializationEnd": [1424], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1444, "focalAPIEnd": 1464, "followUpCheck": "response.getContentType().getValue().trim().toLowerCase().startsWith(\"application/xml\")", "checkType": "IF", "followUpCheckExpressionStart": 1586, "followUpCheckExpressionEnd": 1734, "followUpCheckBlockStart": 1586, "followUpCheckBlockEnd": 2384, "use": ["response.getContent()", "response.consumeContent()"], "useStart": [1553, 2519], "useEnd": [1575, 2545], "hasFinally": 1, "cleanUpCall": ["HttpEntity.consumeContent()"], "finallyExpressionStart": 2470, "finallyExpressionEnd": 2478, "finallyBlockStart": 2470, "finallyBlockEnd": 2560, "cleanUpCallStart": [2519], "cleanUpCallEnd": [2545], "url": "https://github.com/voxeolabs/moho/tree/master/moho-impl/src/main/java/com/voxeo/moho/imified/ImifiedEndpointImpl.java", "rawCode": "  @Override\n  public void sendText(final TextableEndpoint from, final String text, final String type)\n      throws IOException {\n    ImifiedEndpointImpl bot = null;\n    if (from instanceof ImifiedEndpointImpl) {\n      bot = (ImifiedEndpointImpl) from;\n    } else {\n      throw new IllegalArgumentException(\"The from endpoint is not an ImifiedEndpoint instance.\");\n    }\n\n    final HttpPost post = new HttpPost(_driver.getIMifiedURL());\n\n    final String up = bot.getImifiedUserName() + \":\" + bot.getImifiedPasswd();\n    final String value = \"Basic \" + new String(Base64.encodeBase64(up.getBytes(\"UTF-8\")), \"UTF-8\");\n    post.addHeader(\"Authorization\", value);\n\n    final StringBuilder sb = new StringBuilder();\n    sb.append(\"botkey=\").append(bot.getKey());\n    sb.append(\"&apimethod=send&userkey=\").append(getKey());\n    sb.append(\"&msg=\").append(URLEncoder.encode(text, \"UTF-8\"));\n\n    final HttpEntity en = new StringEntity(sb.toString());\n    post.setEntity(en);\n    post.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    post.setHeader(\"Connection\", \"keep-alive\");\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\n          \"Sending message from \"\n              + bot.getAddress()\n              + \" to \"\n              + getAddress()\n              + \", content:\"\n              + sb.toString());\n    }\n    HttpEntity resEntity = null;\n    try {\n      final HttpResponse response = _driver.execute(post);\n      resEntity = response.getEntity();\n      final BufferedReader reader =\n          new BufferedReader(new InputStreamReader(resEntity.getContent()));\n\n      if (resEntity\n          .getContentType()\n          .getValue()\n          .trim()\n          .toLowerCase()\n          .startsWith(\"application/xml\")) {\n        String firstLine = null;\n        do {\n          firstLine = reader.readLine();\n        } while (firstLine.trim().length() == 0);\n\n        if (!(firstLine.indexOf(\"stat=\\\"ok\\\"\") > 0)) {\n          final StringBuilder output = new StringBuilder();\n          output.append(firstLine).append(\"\\r\\n\");\n          String line = null;\n          while ((line = reader.readLine()) != null) {\n            output.append(line).append(\"\\r\\n\");\n          }\n          throw new IOException(\"Imified returned error:\" + output.toString());\n        }\n      } else {\n        throw new IOException(\"Imified returned error message:\" + reader.readLine());\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Message sent.\");\n      }\n    } finally {\n      if (resEntity != null) {\n        resEntity.consumeContent();\n      }\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2413, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpGet)"], "initializationStart": [902], "initializationEnd": [930], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1006, "focalAPIEnd": 1026, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["consume(response)"], "useStart": [986], "useEnd": [1027], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nasa/coeci-cms-mpsp/tree/master/pesp-jboss/cms-external-sources/services/src/main/java/gov/medicaid/screening/dao/impl/HealthCareCommonDAO.java", "rawCode": "  /**\n   * Retrieves all results from the source site.\n   *\n   * @param criteria the search criteria.\n   * @return the providers matched\n   * @throws URISyntaxException if the URL could not be correctly constructed\n   * @throws IOException for any I/O related errors\n   * @throws ParsingException if any error occurs when parsing\n   * @throws ServiceException for any other errors encountered\n   */\n  private SearchResult<ProviderProfile> getAllResults(\n      HealthCareFacilitySearchCriteria criteria, String providerCatagory)\n      throws URISyntaxException, IOException, ServiceException {\n    DefaultHttpClient client = new DefaultHttpClient();\n    client.setRedirectStrategy(new LaxRedirectStrategy());\n\n    // we need to get a token from the start page, this will be stored in the client\n    HttpGet getFrontPage = new HttpGet(new URIBuilder(getSearchURL()).build());\n    HttpResponse response = client.execute(getFrontPage);\n    verifyAndAuditCall(getSearchURL(), response);\n    EntityUtils.consume(response.getEntity()); // releases the connection\n\n    // our client is now valid, pass the criteria to the search page\n    String postSearchURL = Util.replaceLastURLPart(getSearchURL(), \"showprovideroutput.cfm\");\n    HttpPost searchPage = new HttpPost(new URIBuilder(postSearchURL).build());\n    String whichArea = \"\", selectCounty = \"0\", cityToFind = \"\", providerToFind = \"\";\n    if (\"county\".equals(criteria.getCriteria())) {\n      whichArea = \"County\";\n      selectCounty = criteria.getValue();\n    } else if (\"city\".equals(criteria.getCriteria())) {\n      whichArea = \"City\";\n      cityToFind = criteria.getValue();\n    } else if (\"provider\".equals(criteria.getCriteria())) {\n      whichArea = \"Name\";\n      providerToFind = criteria.getValue();\n    }\n    HttpEntity entity =\n        postForm(\n            postSearchURL,\n            client,\n            searchPage,\n            new String[][] {\n              {\"ProviderCatagory\", providerCatagory},\n              {\"WhichArea\", whichArea},\n              {\"Submit\", \"Submit\"},\n              {\"SelectCounty\", selectCounty},\n              {\"CityToFind\", cityToFind},\n              {\"ProviderToFind\", providerToFind}\n            },\n            true);\n\n    List<ProviderProfile> allProviders = new ArrayList<ProviderProfile>();\n    // this now holds the search results, parse every row\n    Document page = Jsoup.parse(EntityUtils.toString(entity));\n    Elements rows = page.select(\"div#body table tbody tr:gt(0)\");\n    for (Element row : rows) {\n      ProviderProfile profile = parseProfile(row.children());\n      if (profile != null) {\n        allProviders.add(profile);\n      }\n    }\n\n    SearchResult<ProviderProfile> results = new SearchResult<ProviderProfile>();\n    results.setItems(allProviders);\n    return results;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2414, "initialization": ["HttpResponse httpResponse = attemptFetch(String,String,UriProvider,RequestProvider,int)"], "initializationStart": [268], "initializationEnd": [350], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [378], "configurationEnd": [402], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 475, "focalAPIEnd": 495, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpResponse.getEntity()", "consumeQuietly(response)"], "useStart": [778, 751], "useEnd": [798, 799], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Findwise/Hydra/tree/master/stages/utils/http/src/main/java/com/findwise/utils/http/HttpFetcher.java", "rawCode": "  public HttpEntity fetch(\n      String identifier,\n      String acceptHeader,\n      UriProvider uriProvider,\n      RequestProvider requestProvider)\n      throws HttpFetchException {\n    int attemptIndex = 0;\n    while (true) {\n      HttpResponse response =\n          attemptFetch(identifier, acceptHeader, uriProvider, requestProvider, attemptIndex);\n      StatusLine status = response.getStatusLine();\n      if (HttpStatus.SC_OK == status.getStatusCode()) {\n        return response.getEntity();\n      } else if (attemptIndex\n          < settings.getRetries()) { // If retries = 2, then we should attempt 3 times in total\n        logger.debug(\n            \"Retrying identifier '{}' due to response '{}'\", identifier, status.getStatusCode());\n        EntityUtils.consumeQuietly(response.getEntity());\n        attemptIndex++;\n        continue;\n      } else {\n        throw new HttpFetchException(\n            String.format(\n                \"Could not process identifier '%s', got response '%s'\",\n                identifier, status.toString()));\n      }\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2415, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["logNetworkState()", "getFinalStatusForHttpError(State)", "toString()", "new StopRequest(*,String,*)"], "tryExpressionStart": 245, "tryExpressionEnd": 249, "tryBlockStart": 245, "tryBlockEnd": 481, "catchExpressionStart": 305, "catchExpressionEnd": 328, "catchBlockStart": 305, "catchBlockEnd": 481, "exceptionHandlingCallStart": [336, 394, 456, 367], "exceptionHandlingCallEnd": [353, 427, 469, 474], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 264, "focalAPIEnd": 284, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [264], "useEnd": [297], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzo/packages_providers_downloadprovider/tree/master/src/com/android/providers/downloads/DownloadThread.java", "rawCode": "  /**\n   * Open a stream for the HTTP response entity, handling I/O errors.\n   *\n   * @return an InputStream to read the response entity\n   */\n  private InputStream openResponseEntity(State state, HttpResponse response) throws StopRequest {\n    try {\n      return response.getEntity().getContent();\n    } catch (IOException ex) {\n      logNetworkState();\n      throw new StopRequest(\n          getFinalStatusForHttpError(state), \"while getting entity: \" + ex.toString(), ex);\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2416, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpGet)"], "initializationStart": [346], "initializationEnd": [365], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [396], "configurationEnd": [420], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 516, "focalAPIEnd": 536, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()", "httpResponse.getStatusLine()", "httpResponse.getEntity()", "response.getContent()", "httpResponse.getStatusLine()", "httpResponse.getEntity()", "response.getContent()", "httpResponse.getStatusLine()", "httpResponse.getEntity()", "response.getContent()"], "useStart": [516, 948, 1045, 1045, 1469, 1566, 1566, 1991, 2088, 2088], "useEnd": [549, 972, 1065, 1078, 1493, 1586, 1599, 2015, 2108, 2121], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jersey/jersey-1.x/tree/master/contribs/bill-burke-book/ex05_1/src/test/java/com/restfully/shop/test/InjectionTest.java", "rawCode": "  @Test\n  public void testCarResource() throws Exception {\n    DefaultHttpClient client = new DefaultHttpClient();\n\n    System.out.println(\"**** CarResource Via @MatrixParam ***\");\n    HttpGet get =\n        new HttpGet(\n            \"http://localhost:\" + getJettyPort() + \"/cars/matrix/mercedes/e55;color=black/2006\");\n    HttpResponse response = client.execute(get);\n    Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n    BufferedReader reader =\n        new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n\n    String line = reader.readLine();\n    while (line != null) {\n      System.out.println(line);\n      line = reader.readLine();\n    }\n\n    System.out.println(\"**** CarResource Via PathSegment ***\");\n    get =\n        new HttpGet(\n            \"http://localhost:\" + getJettyPort() + \"/cars/segment/mercedes/e55;color=black/2006\");\n    response = client.execute(get);\n    Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n    reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n\n    line = reader.readLine();\n    while (line != null) {\n      System.out.println(line);\n      line = reader.readLine();\n    }\n\n    System.out.println(\"**** CarResource Via PathSegments ***\");\n    get =\n        new HttpGet(\n            \"http://localhost:\" + getJettyPort() + \"/cars/segments/mercedes/e55/amg/year/2006\");\n    response = client.execute(get);\n    Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n    reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n\n    line = reader.readLine();\n    while (line != null) {\n      System.out.println(line);\n      line = reader.readLine();\n    }\n\n    System.out.println(\"**** CarResource Via PathSegment ***\");\n    get =\n        new HttpGet(\n            \"http://localhost:\" + getJettyPort() + \"/cars/uriinfo/mercedes/e55;color=black/2006\");\n    response = client.execute(get);\n    Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n    reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n\n    line = reader.readLine();\n    while (line != null) {\n      System.out.println(line);\n      line = reader.readLine();\n    }\n    System.out.println();\n    System.out.println();\n  }\n"}, {"dataset": "getEntity", "exampleID": 2417, "initialization": ["HttpResponse httpResponse = CloseableHttpClient.execute(HttpGet)"], "initializationStart": [1742], "initializationEnd": [1765], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [1786], "configurationEnd": [1810], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1879, "focalAPIEnd": 1899, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)", "httpResponse.getFirstHeader(String)"], "useStart": [1858, 2172], "useEnd": [1900, 2211], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mathieupedrero/eclihand/tree/master/eclihand/rest-server/src/test/java/com/pedrero/eclihand/rest/security/AuthenticationSimulator.java", "rawCode": "  public static String testService(\n      final String path,\n      final String uri,\n      final String username,\n      final String password,\n      Boolean encode)\n      throws IOException {\n\n    HttpGet request = new HttpGet(path + uri);\n\n    Date javaDate = new Date();\n    String date = SECURITY_UTILITIES.printDate(javaDate);\n\n    EclihandRequestContent content =\n        new EclihandRequestContent(uri, javaDate, request.getMethod(), \"\", null);\n\n    request.addHeader(new BasicHeader(\"Date\", date));\n\n    if (username != null && password != null) {\n      final String auth;\n      if (encode) {\n        MessageDigest md = null;\n        try {\n          md = MessageDigest.getInstance(\"SHA-1\");\n        } catch (NoSuchAlgorithmException e) {\n          assert false;\n        }\n        byte[] encodedPasswordByte = md.digest(password.getBytes());\n        byte[] usernameByte = username.getBytes();\n        byte[] toEncode = new byte[encodedPasswordByte.length + usernameByte.length];\n        System.arraycopy(usernameByte, 0, toEncode, 0, usernameByte.length);\n        System.arraycopy(\n            encodedPasswordByte, 0, toEncode, usernameByte.length, encodedPasswordByte.length);\n        String encodedPassword = new String(Base64.encode(md.digest(toEncode)));\n        auth = username + \":\" + SECURITY_UTILITIES.signRequest(encodedPassword, content);\n      } else {\n        auth = username + \":\" + SECURITY_UTILITIES.signRequest(password, content);\n      }\n      request.addHeader(new BasicHeader(\"Authorization\", auth));\n    }\n    request.addHeader(\"Content-type\", ContentType.APPLICATION_JSON.getMimeType());\n\n    // send request\n    try (CloseableHttpClient client = HttpClientBuilder.create().build()) {\n      HttpResponse response = client.execute(request);\n      int status = response.getStatusLine().getStatusCode();\n      String responseString = EntityUtils.toString(response.getEntity());\n      if (status == 200) {\n        LOGGER.info(\"Test d'autentification passé avec succès\");\n      } else {\n        LOGGER.error(\"Echec du Test d'authentification - status {}\", status);\n      }\n      LOGGER.info(\"Contenu[{}]\", responseString);\n      Header tokenHeader = response.getFirstHeader(\"x-session-id\");\n      if (tokenHeader != null) {\n        return tokenHeader.getValue();\n      }\n      return null;\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2418, "initialization": ["HttpResponse httpResponse = execute(*)"], "initializationStart": [285], "initializationEnd": [317], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [341], "configurationEnd": [365], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 415, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["consumeQuietly(response)"], "useStart": [388], "useEnd": [436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/struberg/deltaspike/tree/master/deltaspike/modules/servlet/impl/src/test/java/org/apache/deltaspike/test/servlet/impl/event/session/SessionEventsTest.java", "rawCode": "  /** Now send a request which creates a session */\n  @Test\n  @RunAsClient\n  @InSequence(3)\n  public void sendRequestToCreateSession(@ArquillianResource URL contextPath) throws Exception {\n    String url = new URL(contextPath, \"create-session\").toString();\n    HttpResponse response = client.execute(new HttpGet(url));\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    EntityUtils.consumeQuietly(response.getEntity());\n  }\n"}, {"dataset": "getEntity", "exampleID": 2419, "initialization": ["HttpResponse httpResponse = getHttpClient()"], "initializationStart": [329], "initializationEnd": [344], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 420, "focalAPIEnd": 440, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [420], "useEnd": [453], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SAP/cloud-odata-java/tree/master/odata-fit/src/test/java/com/sap/core/odata/fit/basic/UrlRewriteTest.java", "rawCode": "  @Test\n  public void testGetMetadata() throws Exception {\n    final HttpGet get = new HttpGet(URI.create(getEndpoint().toString() + \"$metadata\"));\n    final HttpParams params = new BasicHttpParams();\n    params.setParameter(\"http.protocol.handle-redirects\", false);\n    get.setParams(params);\n\n    final HttpResponse response = getHttpClient().execute(get);\n\n    final String payload = StringHelper.inputStreamToString(response.getEntity().getContent());\n    assertEquals(\"metadata\", payload);\n    assertEquals(HttpStatusCodes.OK.getStatusCode(), response.getStatusLine().getStatusCode());\n  }\n"}, {"dataset": "getEntity", "exampleID": 2420, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpGet)"], "initializationStart": [747], "initializationEnd": [769], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getUrl()", "warn(String,*)", "setStatus(*)", "toString()", "setErrorMessage(*)", "PodcastDao.updateEpisode(PodcastEpisode)"], "tryExpressionStart": 400, "tryExpressionEnd": 404, "tryBlockStart": 400, "tryBlockEnd": 2582, "catchExpressionStart": 2220, "catchExpressionEnd": 2240, "catchBlockStart": 2220, "catchBlockEnd": 2453, "exceptionHandlingCallStart": [1714, 2248, 2322, 2392, 2368, 2413], "exceptionHandlingCallEnd": [1730, 2314, 2360, 2404, 2405, 2446], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 782, "focalAPIEnd": 802, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["closeQuietly(response)"], "useStart": [2470], "useEnd": [2494], "hasFinally": 1, "cleanUpCall": ["closeQuietly(InputStream)", "closeQuietly(OutputStream)", "HttpClient.getConnectionManager()", "shutdown()"], "finallyExpressionStart": 2454, "finallyExpressionEnd": 2462, "finallyBlockStart": 2454, "finallyBlockEnd": 2582, "cleanUpCallStart": [2470, 2502, 2535, 2535], "cleanUpCallEnd": [2494, 2527, 2564, 2575], "url": "https://github.com/hakko/subsonic/tree/master/subsonic-main/src/main/java/net/sourceforge/subsonic/service/PodcastService.java", "rawCode": "  private void doDownloadEpisode(PodcastEpisode episode) {\n    InputStream in = null;\n    OutputStream out = null;\n\n    if (getEpisode(episode.getId(), false) == null) {\n      LOG.info(\"Podcast \" + episode.getUrl() + \" was deleted. Aborting download.\");\n      return;\n    }\n\n    LOG.info(\"Starting to download Podcast from \" + episode.getUrl());\n\n    HttpClient client = new DefaultHttpClient();\n    try {\n      PodcastChannel channel = getChannel(episode.getChannelId());\n\n      HttpConnectionParams.setConnectionTimeout(client.getParams(), 2 * 60 * 1000); // 2 minutes\n      HttpConnectionParams.setSoTimeout(client.getParams(), 10 * 60 * 1000); // 10 minutes\n      HttpGet method = new HttpGet(episode.getUrl());\n\n      HttpResponse response = client.execute(method);\n      in = response.getEntity().getContent();\n\n      File file = getFile(channel, episode);\n      out = new FileOutputStream(file);\n\n      episode.setStatus(PodcastStatus.DOWNLOADING);\n      episode.setBytesDownloaded(0L);\n      episode.setErrorMessage(null);\n      episode.setPath(file.getPath());\n      podcastDao.updateEpisode(episode);\n\n      byte[] buffer = new byte[4096];\n      long bytesDownloaded = 0;\n      int n;\n      long nextLogCount = 30000L;\n\n      while ((n = in.read(buffer)) != -1) {\n        out.write(buffer, 0, n);\n        bytesDownloaded += n;\n\n        if (bytesDownloaded > nextLogCount) {\n          episode.setBytesDownloaded(bytesDownloaded);\n          nextLogCount += 30000L;\n          if (getEpisode(episode.getId(), false) == null) {\n            break;\n          }\n          podcastDao.updateEpisode(episode);\n        }\n      }\n\n      if (getEpisode(episode.getId(), false) == null) {\n        LOG.info(\"Podcast \" + episode.getUrl() + \" was deleted. Aborting download.\");\n        IOUtils.closeQuietly(out);\n        file.delete();\n      } else {\n        episode.setBytesDownloaded(bytesDownloaded);\n        podcastDao.updateEpisode(episode);\n        LOG.info(\"Downloaded \" + bytesDownloaded + \" bytes from Podcast \" + episode.getUrl());\n        IOUtils.closeQuietly(out);\n        episode.setStatus(PodcastStatus.COMPLETED);\n        podcastDao.updateEpisode(episode);\n        deleteObsoleteEpisodes(channel);\n      }\n\n    } catch (Exception x) {\n      LOG.warn(\"Failed to download Podcast from \" + episode.getUrl(), x);\n      episode.setStatus(PodcastStatus.ERROR);\n      episode.setErrorMessage(x.toString());\n      podcastDao.updateEpisode(episode);\n    } finally {\n      IOUtils.closeQuietly(in);\n      IOUtils.closeQuietly(out);\n      client.getConnectionManager().shutdown();\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2421, "initialization": ["HttpResponse httpResponse = execute(*)"], "initializationStart": [282], "initializationEnd": [318], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse.getStatusLine().getStatusCode()==HttpStatus.SC_OK", "guardType": "IF {", "guardExpressionStart": 328, "guardExpressionEnd": 393, "guardBlockStart": 328, "guardBlockEnd": 967, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 473, "focalAPIEnd": 493, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.writeTo(ByteArrayOutputStream)", "httpResponse.getEntity()", "response.getContent()"], "useStart": [473, 807, 807], "useEnd": [506, 827, 840], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/erichkleung/trydish/tree/master/src/com/trydish/review/ReviewHome.java", "rawCode": "    protected SQLiteDatabase doInBackground(Void... arg0) {\n      String url = \"http://trydish.pythonanywhere.com/sync_restaurants\";\n      SQLiteDatabase db = null;\n\n      HttpResponse response;\n      HttpClient httpclient = new DefaultHttpClient();\n\n      try {\n        response = httpclient.execute(new HttpGet(url));\n        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          response.getEntity().writeTo(out);\n\n          final String databaseCommands = out.toString();\n          out.close();\n\n          DatabaseHandler db_handler = new DatabaseHandler(context);\n          db_handler.dropTables();\n          db_handler.execSQL(databaseCommands);\n\n        } else {\n          // Closes the connection.\n          response.getEntity().getContent().close();\n          System.out.println(\"status: \" + response.getStatusLine().getStatusCode());\n          return null;\n        }\n      } catch (Exception e) {\n        return null;\n      }\n      return db;\n    }\n"}, {"dataset": "getEntity", "exampleID": 2422, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpPut)"], "initializationStart": [481], "initializationEnd": [500], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 106, "tryExpressionEnd": 110, "tryBlockStart": 106, "tryBlockEnd": 1027, "catchExpressionStart": 902, "catchExpressionEnd": 936, "catchBlockStart": 902, "catchBlockEnd": 970, "exceptionHandlingCallStart": [944], "exceptionHandlingCallEnd": [963], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [532], "configurationEnd": [556], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 706, "focalAPIEnd": 726, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)"], "useStart": [753], "useEnd": [781], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Genshin/SpreeWarehouseAndroid/tree/master/src/org/genshin/spree/RESTConnector.java", "rawCode": "  public int putWithArgs(String targetURL, ArrayList<NameValuePair> pairs) {\n    int statusCode = 0;\n\n    try {\n      HttpPut put = new HttpPut(baseURL() + targetURL);\n      // Set headers manually because Android doesn't seem to care to\n      put.addHeader(\"X-Spree-Token\", this.apiKey);\n      if (pairs != null) {\n        put.setEntity(new UrlEncodedFormEntity(pairs, \"UTF-8\"));\n        // Log.d(\"RESTConnector.putWithArgs\", \"added pairs\");\n      }\n      HttpResponse response = client.execute(put);\n      StatusLine statusLine = response.getStatusLine();\n      statusCode = statusLine.getStatusCode();\n      if (statusCode == 200 || statusCode == 201 || statusCode == 202) {\n        HttpEntity entity = response.getEntity();\n        String content = EntityUtils.toString(entity);\n      } else {\n        Log.d(\"RESTConnector.genericRequest\", \"Response not 200, Status: \" + statusCode);\n      }\n    } catch (ClientProtocolException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    return statusCode;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2423, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpGet)"], "initializationStart": [139], "initializationEnd": [165], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["HttpGet.abort()", "getClass()", "getSimpleName()", "w(*,String,*)"], "tryExpressionStart": 99, "tryExpressionEnd": 103, "tryBlockStart": 99, "tryBlockEnd": 639, "catchExpressionStart": 516, "catchExpressionEnd": 538, "catchBlockStart": 516, "catchBlockEnd": 639, "exceptionHandlingCallStart": [546, 578, 578, 572], "exceptionHandlingCallEnd": [564, 588, 604, 632], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [196], "configurationEnd": [223], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 439, "focalAPIEnd": 462, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [477], "useEnd": [507], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bulldog2011/nano/tree/master/sample/binding/AndroidMovieSearchAppProject/src/com/javacodegeeks/android/apps/moviesearchapp/services/HttpRetriever.java", "rawCode": "  public InputStream retrieveStream(String url) {\n\n    HttpGet getRequest = new HttpGet(url);\n\n    try {\n\n      HttpResponse getResponse = client.execute(getRequest);\n      final int statusCode = getResponse.getStatusLine().getStatusCode();\n\n      if (statusCode != HttpStatus.SC_OK) {\n        Log.w(getClass().getSimpleName(), \"Error \" + statusCode + \" for URL \" + url);\n        return null;\n      }\n\n      HttpEntity getResponseEntity = getResponse.getEntity();\n      return getResponseEntity.getContent();\n\n    } catch (IOException e) {\n      getRequest.abort();\n      Log.w(getClass().getSimpleName(), \"Error for URL \" + url, e);\n    }\n\n    return null;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2424, "initialization": ["HttpResponse httpResponse = execute(HttpGet)"], "initializationStart": [312], "initializationEnd": [339], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 426, "focalAPIEnd": 446, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)"], "useStart": [405], "useEnd": [447], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jerryofouc/AmazingMiniSkirt/tree/master/AmazingSDK/src/main/java/com/netease/amazing/sdk/client/AccountRestClient.java", "rawCode": "  public UserDTO getUserInfo() throws ClientProtocolException, IOException {\n    String requestUrl = baseUrl + RequestURLConstants.TEST_LOGIN_URL;\n    HttpGet httpget = new HttpGet(requestUrl);\n    httpget.setHeader(\"Authorization\", Utils.HttpBasicEncodeBase64(loginName, password));\n    HttpResponse response = httpclient.execute(httpget);\n    Gson gson = new Gson();\n    UserDTO userDTO = gson.fromJson(EntityUtils.toString(response.getEntity()), UserDTO.class);\n    return userDTO;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2425, "initialization": ["HttpResponse httpResponse = execute(HttpHost,HttpRequest,HttpContext)"], "initializationStart": [818], "initializationEnd": [871], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 888, "focalAPIEnd": 908, "followUpCheck": "response == null", "checkType": "IF", "followUpCheckExpressionStart": 952, "followUpCheckExpressionEnd": 971, "followUpCheckBlockStart": 952, "followUpCheckBlockEnd": 1256, "use": ["response.getContent()", "httpResponse.getStatusLine()", "consume(response)"], "useStart": [1143, 1288, 1377], "useEnd": [1162, 1312, 1404], "hasFinally": 1, "cleanUpCall": ["consume(HttpEntity)"], "finallyExpressionStart": 1361, "finallyExpressionEnd": 1369, "finallyBlockStart": 1361, "finallyBlockEnd": 1411, "cleanUpCallStart": [1377], "cleanUpCallEnd": [1404], "url": "https://github.com/nblair/sometime/tree/master/sometime-spi-caldav/src/main/java/org/jasig/schedassist/impl/caldav/CaldavCalendarDataDaoImpl.java", "rawCode": "  /**\n   * Store a new calendar using CalDAV PUT.\n   *\n   * @param eventOwner\n   * @param event\n   * @return\n   * @throws HttpException\n   * @throws IOException\n   */\n  protected int putNewCalendar(ICalendarAccount eventOwner, Calendar calendar, String eventUid)\n      throws HttpException, IOException {\n    String uri = generateEventUri(eventOwner, eventUid);\n\n    HttpPut method = constructPutMethod(uri, calendar);\n    method.addHeader(IF_NONE_MATCH_HEADER);\n\n    HttpRequest toExecute = this.methodInterceptor.doWithMethod(method, eventOwner);\n    if (log.isDebugEnabled()) {\n      log.debug(\"putNewCalendar executing \" + methodToString(method) + \" for \" + eventOwner);\n    }\n    final HttpContext context = constructHttpContext(eventOwner);\n\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = this.httpClient.execute(httpHost, toExecute, context);\n      entity = response.getEntity();\n      if (log.isDebugEnabled()) {\n        if (entity == null) {\n          log.debug(\n              \"putNewCalendar response entity was null, statusline: \" + response.getStatusLine());\n        } else {\n          InputStream content = entity.getContent();\n          log.debug(\"putNewCalendar response body: \" + IOUtils.toString(content));\n        }\n      }\n      int statusCode = response.getStatusLine().getStatusCode();\n      return statusCode;\n    } finally {\n      EntityUtils.consume(entity);\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2426, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpPost)"], "initializationStart": [550], "initializationEnd": [570], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 77, "tryExpressionEnd": 81, "tryBlockStart": 77, "tryBlockEnd": 1453, "catchExpressionStart": 1395, "catchExpressionEnd": 1415, "catchBlockStart": 1395, "catchBlockEnd": 1453, "exceptionHandlingCallStart": [1425], "exceptionHandlingCallEnd": [1444], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse!=null", "guardType": "IF {", "guardExpressionStart": 612, "guardExpressionEnd": 633, "guardBlockStart": 612, "guardBlockEnd": 1341, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 725, "focalAPIEnd": 745, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [725], "useEnd": [758], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jifeee/tb/tree/master/Desktop/Textbuster/src/com/access2/GetMac.java", "rawCode": "    protected UserStatus doInBackground(UserStatus... myUserStatus) {\n\n      try {\n\n        HttpClient client = new DefaultHttpClient();\n        HttpConnectionParams.setConnectionTimeout(client.getParams(), 10000); // Timeout Limit\n        HttpConnectionParams.setSoTimeout(client.getParams(), 10000);\n        HttpResponse response;\n\n        JSONObject json = new JSONObject();\n        String url = \"http://textbuster.mobilezapp.de/api/get_textbusters/\";\n        url = url.concat(imei);\n        HttpPost post = new HttpPost(url);\n\n        response = client.execute(post);\n\n        /*Checking response */\n        if (response != null) {\n          BufferedReader reader =\n              new BufferedReader(new InputStreamReader(response.getEntity().getContent(), \"UTF-8\"));\n          StringBuilder builder = new StringBuilder();\n          for (String line = null; (line = reader.readLine()) != null; ) {\n            builder.append(line).append(\"\\n\");\n          }\n\n          Log.d(TAG, builder.toString());\n\n          ArrayList<String> trips = new ArrayList<String>();\n\n          JSONArray array = new JSONArray(builder.toString());\n          for (int i = 0; i < array.length(); i++) {\n            JSONObject trip = array.getJSONObject(i);\n            trips.add(trip.toString());\n          }\n\n          myUserStatus[0].setTrips(trips);\n        }\n      } catch (ConnectTimeoutException e) {\n\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n\n      return myUserStatus[0];\n    }\n"}, {"dataset": "getEntity", "exampleID": 2427, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpPost)"], "initializationStart": [562], "initializationEnd": [593], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["new RequestFailedException(String,*)"], "tryExpressionStart": 215, "tryExpressionEnd": 219, "tryBlockStart": 215, "tryBlockEnd": 2104, "catchExpressionStart": 1675, "catchExpressionEnd": 1711, "catchBlockStart": 1675, "catchBlockEnd": 1782, "exceptionHandlingCallStart": [1725], "exceptionHandlingCallEnd": [1775], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 674, "focalAPIEnd": 694, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [674], "useEnd": [707], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/abdulazeezsk/netvogue/tree/master/Server/netvogue-email-service/src/main/java/org/netvogue/server/mandrill/request/MandrillRESTRequest.java", "rawCode": "  private BaseMandrillResponse performPostRequest(\n      BaseMandrillRequest request,\n      String serviceMethod,\n      Object responseClass,\n      TypeReference reference)\n      throws RequestFailedException {\n    try {\n      request.setKey(config.getApiKey());\n      HttpPost postRequest = new HttpPost(config.getServiceUrl() + serviceMethod);\n      String postData = getPostData(request);\n      StringEntity input = new StringEntity(postData);\n      input.setContentType(\"application/json\");\n      postRequest.setEntity(input);\n\n      HttpResponse response = httpClient.execute(postRequest);\n\n      BufferedReader br =\n          new BufferedReader(new InputStreamReader((response.getEntity().getContent())));\n\n      StringBuffer sb = new StringBuffer();\n      String output;\n      System.out.println(\"Output from Server .... \\n\");\n      while ((output = br.readLine()) != null) {\n        sb.append(output);\n        System.out.println(output);\n      }\n\n      String responseString = sb.toString();\n      if (response.getStatusLine().getStatusCode() != 200) {\n        throw new RequestFailedException(\n            \"Failed : HTTP error code : \"\n                + response.getStatusLine().getStatusCode()\n                + \" \"\n                + responseString);\n      }\n\n      // for whatever reason the ping response isn't well-formed\n      if (responseString.indexOf(\"PONG!\") > -1) {\n        return new BaseMandrillStringResponse(responseString);\n      }\n\n      if (reference == null) {\n        return convertResponseData(responseString, responseClass);\n      } else {\n        return convertAnonymousListResponseData(responseString, responseClass, reference);\n      }\n    } catch (MalformedURLException mURLE) {\n      throw new RequestFailedException(\"Malformed url\", mURLE);\n    } catch (JsonGenerationException jge) {\n      throw new RequestFailedException(\"Json Generation Exception\", jge);\n    } catch (JsonMappingException jme) {\n      throw new RequestFailedException(\"Json Mapping Exception\", jme);\n    } catch (IOException ioe) {\n      throw new RequestFailedException(\"IOException\", ioe);\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2428, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpGet)"], "initializationStart": [805], "initializationEnd": [832], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["debug(String,*)", "getJob()", "error(*,*,String,String)", "new TaskExecuterException(*,*)"], "tryExpressionStart": 585, "tryExpressionEnd": 589, "tryBlockStart": 585, "tryBlockEnd": 2763, "catchExpressionStart": 1955, "catchExpressionEnd": 1995, "catchBlockStart": 1955, "catchBlockEnd": 2241, "exceptionHandlingCallStart": [2003, 2108, 2060, 2163], "exceptionHandlingCallEnd": [2052, 2116, 2149, 2234], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [863], "configurationEnd": [887], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1270, "focalAPIEnd": 1290, "followUpCheck": "response == null", "checkType": "IF", "followUpCheckExpressionStart": 1299, "followUpCheckExpressionEnd": 1318, "followUpCheckBlockStart": 1299, "followUpCheckBlockEnd": 1948, "use": ["response.getContent()"], "useStart": [1545], "useEnd": [1564], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shaunjohnson/ute/tree/master/src/main/java/net/lmxm/ute/executers/tasks/HttpDownloadTaskExecuter.java", "rawCode": "  /**\n   * Download file.\n   *\n   * @param sourceUrl the source url\n   * @param queryParams the query params\n   * @param destinationFilePath the destination file path\n   */\n  private void downloadFile(\n      final String sourceUrl,\n      final Map<String, String> queryParams,\n      final String destinationFilePath) {\n    final String prefix = \"execute() :\";\n\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"{} entered\", prefix);\n      LOGGER.debug(\"{} sourceUrl={}\", prefix, sourceUrl);\n      LOGGER.debug(\"{} destinationFilePath={}\", prefix, destinationFilePath);\n    }\n\n    try {\n      final DefaultHttpClient httpClient = new DefaultHttpClient();\n      final HttpGet httpGet = new HttpGet(sourceUrl);\n      httpGet.setParams(buildQueryParams(queryParams));\n      final HttpResponse response = httpClient.execute(httpGet);\n      final int statusCode = response.getStatusLine().getStatusCode();\n\n      if (statusCode != HttpStatus.SC_OK) {\n        LOGGER.debug(\"HTTP status code {} returned\", statusCode);\n        StatusChangeEventBus.error(HTTP_DOWNLOAD_STATUS_ERROR, getJob(), sourceUrl, statusCode);\n        throw new TaskExecuterException(\n            ExceptionResourceType.HTTP_DOWNLOAD_STATUS_ERROR, statusCode);\n      }\n\n      final HttpEntity entity = response.getEntity();\n\n      if (entity == null) {\n        StatusChangeEventBus.error(HTTP_DOWNLOAD_NO_RESPONSE_ERROR, getJob());\n        throw new TaskExecuterException(ExceptionResourceType.HTTP_DOWNLOAD_NO_RESPONSE);\n      } else {\n        final InputStream inputStream = entity.getContent();\n        final OutputStream out = new FileOutputStream(destinationFilePath);\n        final byte buffer[] = new byte[1024];\n        int length;\n\n        while ((length = inputStream.read(buffer)) > 0) {\n          out.write(buffer, 0, length);\n        }\n\n        out.close();\n\n        StatusChangeEventBus.info(HTTP_DOWNLOAD_FINISHED, getJob(), sourceUrl, destinationFilePath);\n      }\n    } catch (final ClientProtocolException e) {\n      LOGGER.debug(\"ClientProtocolException caught\", e);\n      StatusChangeEventBus.error(HTTP_DOWNLOAD_ERROR, getJob(), sourceUrl, destinationFilePath);\n      throw new TaskExecuterException(ExceptionResourceType.HTTP_DOWNLOAD_ERROR, e);\n    } catch (final IOException e) {\n      LOGGER.debug(\"IOException caught\", e);\n      StatusChangeEventBus.error(HTTP_DOWNLOAD_ERROR, getJob(), sourceUrl, destinationFilePath);\n      throw new TaskExecuterException(ExceptionResourceType.HTTP_DOWNLOAD_ERROR, e);\n    } catch (final Exception e) {\n      LOGGER.debug(\"Exception caught\", e);\n      StatusChangeEventBus.error(HTTP_DOWNLOAD_ERROR, getJob(), sourceUrl, destinationFilePath);\n      throw new TaskExecuterException(ExceptionResourceType.HTTP_DOWNLOAD_ERROR, e);\n    }\n\n    LOGGER.debug(\"{} leaving\", prefix);\n  }\n"}, {"dataset": "getEntity", "exampleID": 2429, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpPost)"], "initializationStart": [563], "initializationEnd": [583], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 608, "focalAPIEnd": 628, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [664], "useEnd": [678], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/simon0191/MinerPCAdviser/tree/master/MpcaAndroidApp/src/com/mpca/mpcaandroidapp/ProductsListActivity.java", "rawCode": "    @Override\n    protected Void doInBackground(JSONObject... params) {\n      JSONObject jObject = params[0];\n\n      DefaultHttpClient client = new DefaultHttpClient();\n      HttpPost post = new HttpPost(url);\n\n      // setting json object to post request.\n      AbstractHttpEntity entity;\n      try {\n        entity = new ByteArrayEntity(jObject.toString().getBytes(\"UTF8\"));\n        entity.setContentType(new BasicHeader(HTTP.CONTENT_TYPE, \"application/json\"));\n        post.setEntity(entity);\n\n        // this is your response:\n        HttpResponse response = client.execute(post);\n        HttpEntity e = response.getEntity();\n        InputStream inputStream = e.getContent();\n        BufferedReader bf = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"), 8);\n        StringBuilder sb = new StringBuilder();\n\n        String line;\n        while ((line = bf.readLine()) != null) {\n          sb.append(line + \"\\n\");\n        }\n        System.out.println(sb.toString());\n        jObject = new JSONObject(sb.toString());\n        products = MpcaJObjectsReader.readJProducts(jObject);\n      } catch (Exception e1) {\n        // e1.printStackTrace();\n        success = false;\n      }\n\n      return null;\n    }\n"}, {"dataset": "getEntity", "exampleID": 2430, "initialization": ["HttpResponse httpResponse = execute(*,HttpGet,HttpContext)"], "initializationStart": [952], "initializationEnd": [1001], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1027, "focalAPIEnd": 1047, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["consume(response)", "httpResponse.getStatusLine()"], "useStart": [1007, 1190], "useEnd": [1048, 1214], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/darrenjl/pdfrun/tree/master/OpenGPSTracker/external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/impl/client/TestDefaultClientRequestDirector.java", "rawCode": "  @Test\n  public void testAutoGeneratedHeaders() throws Exception {\n    int port = this.localServer.getServiceAddress().getPort();\n    this.localServer.register(\"*\", new SimpleService());\n\n    FaultyHttpClient client = new FaultyHttpClient();\n\n    client.addRequestInterceptor(\n        new HttpRequestInterceptor() {\n\n          public void process(final HttpRequest request, final HttpContext context)\n              throws HttpException, IOException {\n            request.addHeader(\"my-header\", \"stuff\");\n          }\n        });\n\n    client.setHttpRequestRetryHandler(\n        new HttpRequestRetryHandler() {\n\n          public boolean retryRequest(\n              final IOException exception, int executionCount, final HttpContext context) {\n            return true;\n          }\n        });\n\n    HttpContext context = new BasicHttpContext();\n\n    String s = \"http://localhost:\" + port;\n    HttpGet httpget = new HttpGet(s);\n\n    HttpResponse response = client.execute(getServerHttp(), httpget, context);\n    EntityUtils.consume(response.getEntity());\n\n    HttpRequest reqWrapper = (HttpRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST);\n\n    Assert.assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n\n    Assert.assertTrue(reqWrapper instanceof RequestWrapper);\n    Header[] myheaders = reqWrapper.getHeaders(\"my-header\");\n    Assert.assertNotNull(myheaders);\n    Assert.assertEquals(1, myheaders.length);\n  }\n"}, {"dataset": "getEntity", "exampleID": 2431, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpGet)"], "initializationStart": [208], "initializationEnd": [234], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["HttpGet.abort()", "getSimpleName()", "w(*,String,*)"], "tryExpressionStart": 169, "tryExpressionEnd": 173, "tryBlockStart": 169, "tryBlockEnd": 759, "catchExpressionStart": 622, "catchExpressionEnd": 644, "catchBlockStart": 622, "catchBlockEnd": 759, "exceptionHandlingCallStart": [652, 684, 678], "exceptionHandlingCallEnd": [670, 724, 752], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [265], "configurationEnd": [292], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 522, "focalAPIEnd": 545, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [582], "useEnd": [612], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Lowkey2224/HAW_App/tree/master/src/com/example/haw_app/veranstaltungsplan/implementations/Veranstaltungsplan.java", "rawCode": "  private static InputStreamReader retrieveReader(String url) {\n\n    DefaultHttpClient client = new DefaultHttpClient();\n\n    HttpGet getRequest = new HttpGet(url);\n    try {\n      HttpResponse getResponse = client.execute(getRequest);\n      final int statusCode = getResponse.getStatusLine().getStatusCode();\n\n      if (statusCode != HttpStatus.SC_OK) {\n        Log.w(Veranstaltungsplan.class.getSimpleName(), \"Error \" + statusCode + \" for URL \" + url);\n        return null;\n      }\n\n      HttpEntity getResponseEntity = getResponse.getEntity();\n      return new InputStreamReader(getResponseEntity.getContent());\n\n    } catch (IOException e) {\n      getRequest.abort();\n      Log.w(Veranstaltungsplan.class.getSimpleName(), \"Error for URL \" + url, e);\n    }\n    return null;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2432, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 524, "focalAPIEnd": 549, "followUpCheck": "response == null", "checkType": "IF", "followUpCheckExpressionStart": 555, "followUpCheckExpressionEnd": 574, "followUpCheckBlockStart": 555, "followUpCheckBlockEnd": 601, "use": ["response.getContent()"], "useStart": [628], "useEnd": [647], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mmoutenot/SandFox/tree/master/mobile/android/base/sync/net/SyncResponse.java", "rawCode": "  /**\n   * Return the body as an Object.\n   *\n   * @return null if there is no body, or an Object if it successfully parses. The return value will\n   *     be an ExtendedJSONObject if it's a JSON object.\n   * @throws IllegalStateException\n   * @throws IOException\n   * @throws ParseException\n   */\n  public Object jsonBody() throws IllegalStateException, IOException, ParseException {\n    if (body != null) {\n      // Do it from the cached String.\n      return ExtendedJSONObject.parse(body);\n    }\n\n    HttpEntity entity = this.response.getEntity();\n    if (entity == null) {\n      return null;\n    }\n    InputStream content = entity.getContent();\n    try {\n      return ExtendedJSONObject.parse(content);\n    } finally {\n      content.close();\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2433, "initialization": ["HttpResponse httpResponse = execute(HttpGet)"], "initializationStart": [214], "initializationEnd": [237], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 282, "focalAPIEnd": 302, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)", "httpResponse.getStatusLine()"], "useStart": [261, 320], "useEnd": [303, 344], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ImmobilienScout24/yum-repo-server/tree/master/src/test/java/de/is24/infrastructure/gridfs/http/web/controller/StaticRepositoryInfoControllerIT.java", "rawCode": "  @Test\n  public void shouldNotFindReposForQueryStaticByNotMatchingName() throws IOException {\n    HttpGet get = new HttpGet(deploymentURL + \"/repo.txt?\" + \"name=\" + \"notMatchingName\");\n    HttpResponse response = httpClient.execute(get);\n\n    String content = EntityUtils.toString(response.getEntity());\n    assertThat(response.getStatusLine().getStatusCode(), is(HttpServletResponse.SC_OK));\n    assertThat(content, not(containsString(givenReponame)));\n  }\n"}, {"dataset": "getEntity", "exampleID": 2434, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpGet)"], "initializationStart": [787], "initializationEnd": [810], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new ApiException(String,*)"], "tryExpressionStart": 751, "tryExpressionEnd": 755, "tryBlockStart": 751, "tryBlockEnd": 1652, "catchExpressionStart": 1556, "catchExpressionEnd": 1578, "catchBlockStart": 1556, "catchBlockEnd": 1652, "exceptionHandlingCallStart": [1592], "exceptionHandlingCallEnd": [1645], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [882], "configurationEnd": [906], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1126, "focalAPIEnd": 1146, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [1180], "useEnd": [1199], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/andrograph/platform_development/tree/master/samples/WiktionarySimple/src/com/example/android/simplewiktionary/SimpleWikiHelper.java", "rawCode": "  /**\n   * Pull the raw text content of the given URL. This call blocks until the operation has completed,\n   * and is synchronized because it uses a shared buffer {@link #sBuffer}.\n   *\n   * @param url The exact URL to request.\n   * @return The raw content returned by the server.\n   * @throws ApiException If any connection or server error occurs.\n   */\n  protected static synchronized String getUrlContent(String url) throws ApiException {\n    if (sUserAgent == null) {\n      throw new ApiException(\"User-Agent string must be prepared\");\n    }\n\n    // Create client and set our specific user-agent string\n    HttpClient client = new DefaultHttpClient();\n    HttpGet request = new HttpGet(url);\n    request.setHeader(\"User-Agent\", sUserAgent);\n\n    try {\n      HttpResponse response = client.execute(request);\n\n      // Check if server response is valid\n      StatusLine status = response.getStatusLine();\n      if (status.getStatusCode() != HTTP_STATUS_OK) {\n        throw new ApiException(\"Invalid response from server: \" + status.toString());\n      }\n\n      // Pull content stream from response\n      HttpEntity entity = response.getEntity();\n      InputStream inputStream = entity.getContent();\n\n      ByteArrayOutputStream content = new ByteArrayOutputStream();\n\n      // Read response into a buffered stream\n      int readBytes = 0;\n      while ((readBytes = inputStream.read(sBuffer)) != -1) {\n        content.write(sBuffer, 0, readBytes);\n      }\n\n      // Return result from buffered stream\n      return new String(content.toByteArray());\n    } catch (IOException e) {\n      throw new ApiException(\"Problem communicating with API\", e);\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2435, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpGet)"], "initializationStart": [271], "initializationEnd": [290], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 178, "tryExpressionEnd": 182, "tryBlockStart": 178, "tryBlockEnd": 559, "catchExpressionStart": 441, "catchExpressionEnd": 461, "catchBlockStart": 441, "catchBlockEnd": 495, "exceptionHandlingCallStart": [469], "exceptionHandlingCallEnd": [488], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 353, "focalAPIEnd": 369, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [353], "useEnd": [382], "hasFinally": 1, "cleanUpCall": ["HttpClient.getConnectionManager()", "shutdown()"], "finallyExpressionStart": 496, "finallyExpressionEnd": 504, "finallyBlockStart": 496, "finallyBlockEnd": 559, "cleanUpCallStart": [512, 512], "cleanUpCallEnd": [541, 552], "url": "https://github.com/deegree/deegree3/tree/master/uncoupled/orphaned-after-3.2/deegree-featurestore-couchbase/src/main/java/org/deegree/feature/persistence/geocouch/GeoCouchFeatureStore.java", "rawCode": "  private Feature getFeatureById(String id) {\n    BlobCodec codec = new BlobCodec(schema.getGMLSchema().getVersion(), NONE);\n    HttpClient client = new DefaultHttpClient();\n    try {\n      HttpGet get = new HttpGet(couchUrl + id + \"/feature\");\n      HttpResponse resp = client.execute(get);\n      return (Feature)\n          codec.decode(\n              resp.getEntity().getContent(), schema.getNamespaceBindings(), schema, crs, null);\n    } catch (Throwable e) {\n      e.printStackTrace();\n    } finally {\n      client.getConnectionManager().shutdown();\n    }\n    return null;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2436, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpHost,HttpGet,BasicHttpContext)"], "initializationStart": [547], "initializationEnd": [587], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 692, "focalAPIEnd": 708, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/conxgit/conxlogistics-gerrit4/tree/master/com.conx.logistics.kernel/documentlibrary/remote.services.impl/src/main/java/com/conx/logistics/kernel/documentlibrary/remote/services/impl/LiferayPortalDocumentRepositoryImpl.java", "rawCode": "  @Override\n  public InputStream getFileAsStream(String fileEntryId, String version) throws Exception {\n    // Add AuthCache to the execution context\n    BasicHttpContext ctx = new BasicHttpContext();\n    ctx.setAttribute(ClientContext.AUTH_CACHE, authCache);\n\n    HttpGet get = new HttpGet(\"/api/secure/jsonws/dlfileentry/get-file-as-stream\");\n\n    HttpParams params = new SyncBasicHttpParams();\n    params.setParameter(\"fileEntryId\", fileEntryId);\n    params.setParameter(\"version\", version);\n    get.setParams(params);\n\n    HttpResponse resp = httpclient.execute(targetHost, get, ctx);\n    System.out.println(\"getFileAsStream Status:[\" + resp.getStatusLine() + \"]\");\n\n    InputStream is = resp.getEntity().getContent();\n\n    return is;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2437, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpGet)"], "initializationStart": [722], "initializationEnd": [745], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getMessage()", "w(String,*)"], "tryExpressionStart": 684, "tryExpressionEnd": 688, "tryBlockStart": 684, "tryBlockEnd": 1389, "catchExpressionStart": 1252, "catchExpressionEnd": 1274, "catchBlockStart": 1252, "catchBlockEnd": 1319, "exceptionHandlingCallStart": [1295, 1284], "exceptionHandlingCallEnd": [1309, 1310], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 826, "focalAPIEnd": 846, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [826], "useEnd": [859], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pobrienjhu/ase_w4156/tree/master/ASE - Android/SurveySays/src/edu/columbia/w4156/ase/android/MainActivity.java", "rawCode": "    @Override\n    protected List<EventListEntry> doInBackground(GetEventsTaskArgs... params) {\n      ArrayList<EventListEntry> results = new ArrayList<EventListEntry>();\n      GetEventsTaskArgs args = params[0];\n      this.receiver = args.getReceiver();\n      String controller = \"getEvents\" + (args.isPublicEvents() ? \"Public\" : \"Private\") + \".do\";\n      URI uri = null;\n      try {\n        uri = new URI(args.getBaseUrl() + \"/app/\" + controller);\n      } catch (URISyntaxException e) {\n        Log.w(TAG, e.getMessage());\n        return results;\n      }\n\n      DefaultHttpClient httpClient = Common.getHttpClient(uri, args.getSession());\n      HttpGet get = new HttpGet(uri);\n      try {\n        HttpResponse response = httpClient.execute(get);\n        JSONArray array =\n            new JSONArray(Common.inputStreamToString(response.getEntity().getContent()));\n        int length = array.length();\n        results.ensureCapacity(length);\n        for (int i = 0; i < length; i++) {\n          JSONObject object = array.getJSONObject(i);\n          EventListEntry entry =\n              new EventListEntry(\n                  object.getLong(\"id\"), object.getString(\"name\"), object.getString(\"description\"));\n          results.add(entry);\n        }\n      } catch (IOException e) {\n        Log.w(TAG, e.getMessage());\n      } catch (JSONException e) {\n        Log.w(TAG, e.getMessage());\n      }\n      return results;\n    }\n"}, {"dataset": "getEntity", "exampleID": 2438, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 429, "focalAPIEnd": 448, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response,*)", "assertHttpStatusOfMethod(String,httpResponse)"], "useStart": [408, 469], "useEnd": [461, 506], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/crh/escidoc-core-1.4/tree/master/integration-tests/src/test/java/de/escidoc/core/test/sb/SbTestBase.java", "rawCode": "  /**\n   * Handles the result of a base service access.\n   *\n   * @param result The result to handle.\n   * @return Returns the xml response.\n   * @throws Exception Thrown if anything fails.\n   */\n  private String handleResult(final Object result) throws Exception {\n\n    String xmlResult = null;\n    if (result instanceof HttpResponse) {\n      HttpResponse httpRes = (HttpResponse) result;\n      xmlResult = EntityUtils.toString(httpRes.getEntity(), HTTP.UTF_8);\n      assertHttpStatusOfMethod(\"\", httpRes);\n    } else if (result instanceof String) {\n      xmlResult = (String) result;\n    }\n    return xmlResult;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2439, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpGet)"], "initializationStart": [476], "initializationEnd": [503], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 440, "tryExpressionEnd": 444, "tryBlockStart": 440, "tryBlockEnd": 1288, "catchExpressionStart": 1095, "catchExpressionEnd": 1129, "catchBlockStart": 1095, "catchBlockEnd": 1197, "exceptionHandlingCallStart": [1171], "exceptionHandlingCallEnd": [1190], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [522], "configurationEnd": [546], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 698, "focalAPIEnd": 718, "followUpCheck": "response != null", "checkType": "IF", "followUpCheckExpressionStart": 730, "followUpCheckExpressionEnd": 749, "followUpCheckBlockStart": 730, "followUpCheckBlockEnd": 886, "use": ["toString(response)"], "useStart": [786], "useEnd": [814], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/omg-insa/client/tree/master/PlanYourParty/src/eu/chitic/syp/network/HttpRequest.java", "rawCode": "  public JSONObject executeGet() throws Exception {\n    boolean is_first = true;\n    if (urlParameters != null) {\n      for (NameValuePair el : urlParameters) {\n        if (is_first) {\n          is_first = false;\n          this.url += '?';\n        } else {\n          this.url += '&';\n        }\n        this.url += el.getName() + '=' + el.getValue();\n      }\n    }\n    HttpGet httpGet = new HttpGet(this.url);\n    // Making HTTP Request\n    try {\n      HttpResponse response = httpClient.execute(httpGet);\n      int code = response.getStatusLine().getStatusCode();\n      AppTools.debug(\"Status code :\" + code);\n      switch (code) {\n        case 400:\n        case 200:\n          HttpEntity entity = response.getEntity();\n          if (entity != null) {\n            String responseBody = EntityUtils.toString(entity);\n            return JSONParser.getJSONObject(responseBody);\n          }\n          return null;\n        case 403:\n          throw new Exception(\"403\");\n        case 405:\n          throw new Exception(\"405\");\n        default:\n          throw new Exception(\"Unknown\");\n      }\n    } catch (ClientProtocolException e) {\n      // writing exception to log\n      e.printStackTrace();\n    } catch (IOException e) {\n      // writing exception to log\n      e.printStackTrace();\n    }\n    return null;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2440, "initialization": ["HttpResponse httpResponse = IClientLoginHelper.execute(HttpUriRequest)"], "initializationStart": [360], "initializationEnd": [390], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()", "getMessage()"], "tryExpressionStart": 206, "tryExpressionEnd": 210, "tryBlockStart": 206, "tryBlockEnd": 724, "catchExpressionStart": 633, "catchExpressionEnd": 655, "catchBlockStart": 633, "catchBlockEnd": 724, "exceptionHandlingCallStart": [665, 701], "exceptionHandlingCallEnd": [684, 715], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 471, "focalAPIEnd": 491, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.writeTo(ByteArrayOutputStream)"], "useStart": [471], "useEnd": [510], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rkipper/AppInventor_RK/tree/master/appinventor/components/src/com/google/appinventor/components/runtime/FusiontablesControl.java", "rawCode": "    /**\n     * Query the fusiontables server.\n     *\n     * @return The resulant table, error page, or exception message.\n     */\n    @Override\n    protected String doInBackground(String... params) {\n      try {\n        HttpUriRequest request = genFusiontablesQuery(params[0]);\n        Log.d(LOG_TAG, \"Fetching: \" + params[0]);\n        HttpResponse response = requestHelper.execute(request);\n        ByteArrayOutputStream outstream = new ByteArrayOutputStream();\n        response.getEntity().writeTo(outstream);\n        Log.d(LOG_TAG, \"Response: \" + response.getStatusLine().toString());\n        return outstream.toString();\n      } catch (IOException e) {\n        e.printStackTrace();\n        return e.getMessage();\n      }\n    }\n"}, {"dataset": "getEntity", "exampleID": 2441, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpRequestBase)"], "initializationStart": [1003], "initializationEnd": [1029], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["new FreebaseException(*)"], "tryExpressionStart": 814, "tryExpressionEnd": 818, "tryBlockStart": 814, "tryBlockEnd": 1574, "catchExpressionStart": 1274, "catchExpressionEnd": 1308, "catchBlockStart": 1274, "catchBlockEnd": 1353, "exceptionHandlingCallStart": [1322], "exceptionHandlingCallEnd": [1346], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1057, "focalAPIEnd": 1077, "followUpCheck": "response != null", "checkType": "IF", "followUpCheckExpressionStart": 1085, "followUpCheckExpressionEnd": 1104, "followUpCheckBlockStart": 1085, "followUpCheckBlockEnd": 1267, "use": ["response.getContent()"], "useStart": [1154], "useEnd": [1173], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tentejswi/PersonalityExtraction/tree/master/lair/freebase-java-1.0.0/src/main/java/com/freebase/api/Freebase.java", "rawCode": "  /**\n   * http://www.freebase.com/docs/web_services/trans_raw\n   * http://www.freebase.com/docs/web_services/trans_blurb\n   */\n  public String get_blob(String id, JSON options) {\n    if (id == null || id.trim().length() == 0)\n      throw new FreebaseException(\"You must provide the id of the blob you want\");\n    String path = BLOB_API_PREFIX;\n    String mode = (options != null && options.has(\"mode\")) ? options.get(\"mode\").string() : \"raw\";\n    if (\"raw\".equals(mode) || \"unsafe\".equals(mode) || \"blurb\".equals(mode)) {\n      path += mode;\n    } else {\n      throw new FreebaseException(\"Invalid mode; must be 'raw' or 'blurb' or 'unsafe'\");\n    }\n    path += id;\n\n    List<NameValuePair> qparams = transform_params(options);\n\n    String url = host + path + \"?\" + URLEncodedUtils.format(qparams, \"UTF-8\");\n\n    try {\n      HttpClient httpclient = new DefaultHttpClient();\n      HttpRequestBase method = new HttpGet(url);\n      method.setHeader(\"X-Requested-With\", \"1\");\n      HttpResponse response = httpclient.execute(method);\n      HttpEntity entity = response.getEntity();\n      if (entity != null) {\n        return stringify(new InputStreamReader(entity.getContent(), \"UTF-8\"));\n      } else {\n        throw new FreebaseException(\"Response was empty\");\n      }\n    } catch (ClientProtocolException e) {\n      throw new FreebaseException(e);\n    } catch (IOException e) {\n      throw new FreebaseException(e);\n    } catch (IllegalStateException e) {\n      throw new FreebaseException(e);\n    } catch (ClassCastException e) {\n      throw new FreebaseException(e);\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2442, "initialization": ["HttpResponse httpResponse = execute(HttpDelete)"], "initializationStart": [188], "initializationEnd": [211], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 225, "focalAPIEnd": 245, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["consume(response)", "httpResponse.getStatusLine()"], "useStart": [217, 264], "useEnd": [246, 288], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ImmobilienScout24/yum-repo-server/tree/master/src/test/java/de/is24/infrastructure/gridfs/http/security/AuthenticationIT.java", "rawCode": "  @Test\n  public void denyAccessForWrongCredentials() throws Exception {\n    givenCredentials(\"user\", \"pass\");\n\n    HttpDelete get = new HttpDelete(deleteUrl);\n    HttpResponse response = httpClient.execute(get);\n    consume(response.getEntity());\n\n    assertThat(response.getStatusLine().getStatusCode(), is(SC_UNAUTHORIZED));\n  }\n"}, {"dataset": "getEntity", "exampleID": 2443, "initialization": ["HttpResponse httpResponse = ResponseFactory.createResponse(int,String,String)"], "initializationStart": [84], "initializationEnd": [143], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 161, "focalAPIEnd": 181, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContentType()"], "useStart": [161], "useEnd": [198], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tjhart/swivel/tree/master/swivel-server/src/test/java/com/tjh/swivel/model/ResponseFactoryTest.java", "rawCode": "  @Test\n  public void createResponsePopulatesEntity() {\n    HttpResponse response = responseFactory.createResponse(200, \"entity\", \"text/plain\");\n\n    assertThat(response.getEntity().getContentType().getValue(), equalTo(\"text/plain\"));\n  }\n"}, {"dataset": "getEntity", "exampleID": 2444, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpPost)"], "initializationStart": [193], "initializationEnd": [223], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [246], "configurationEnd": [270], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 312, "focalAPIEnd": 332, "followUpCheck": "response != null", "checkType": "IF", "followUpCheckExpressionStart": 338, "followUpCheckExpressionEnd": 357, "followUpCheckBlockStart": 338, "followUpCheckBlockEnd": 382, "use": ["response.consumeContent()"], "useStart": [358], "useEnd": [381], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jmcc0nn3ll/jetty-project/tree/master/jetty-reverse-http/reverse-http-client/src/main/java/org/mortbay/jetty/rhttp/client/ApacheClient.java", "rawCode": "  protected void syncDisconnect() throws IOException {\n    HttpPost disconnect =\n        new HttpPost(gatewayPath + \"/\" + urlEncode(getTargetId()) + \"/disconnect\");\n    HttpResponse response = httpClient.execute(disconnect);\n    int statusCode = response.getStatusLine().getStatusCode();\n    HttpEntity entity = response.getEntity();\n    if (entity != null) entity.consumeContent();\n    if (statusCode != HttpStatus.SC_OK) throw new IOException(\"Disconnect failed\");\n    getLogger().debug(\"Client {} disconnect returned from gateway\", getTargetId(), null);\n  }\n"}, {"dataset": "getEntity", "exampleID": 2445, "initialization": ["HttpResponse httpResponse = execute(HttpHost,HttpRequest,HttpContext)"], "initializationStart": [671], "initializationEnd": [724], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["Log.error(String)", "new CaldavDataAccessException(*)"], "tryExpressionStart": 635, "tryExpressionEnd": 639, "tryBlockStart": 635, "tryBlockEnd": 1541, "catchExpressionStart": 1257, "catchExpressionEnd": 1279, "catchBlockStart": 1257, "catchBlockEnd": 1495, "exceptionHandlingCallStart": [1287, 1456], "exceptionHandlingCallEnd": [1442, 1488], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 741, "focalAPIEnd": 761, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpResponse.getStatusLine()", "quietlyConsume(response)"], "useStart": [786, 1512], "useEnd": [810, 1534], "hasFinally": 1, "cleanUpCall": ["quietlyConsume(HttpEntity)"], "finallyExpressionStart": 1496, "finallyExpressionEnd": 1504, "finallyBlockStart": 1496, "finallyBlockEnd": 1541, "cleanUpCallStart": [1512], "cleanUpCallEnd": [1534], "url": "https://github.com/Jasig/sched-assist/tree/master/sched-assist-spi-caldav/src/main/java/org/jasig/schedassist/impl/caldav/CaldavCalendarDataDaoImpl.java", "rawCode": "  /**\n   * @param calendarWithURI\n   * @param calendarAccount\n   * @return\n   */\n  protected int deleteCalendar(CalendarWithURI calendarWithURI, ICalendarAccount calendarAccount) {\n    URI uri = this.caldavDialect.resolveCalendarURI(calendarWithURI);\n    HttpDelete method = new HttpDelete(uri.toString());\n    if (log.isDebugEnabled()) {\n      log.debug(\"deleteCalendar executing \" + methodToString(method) + \" for \" + calendarAccount);\n    }\n    HttpRequest toExecute = methodInterceptor.doWithMethod(method, calendarAccount);\n    final HttpContext context = constructHttpContext(calendarAccount);\n\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = this.httpClient.execute(httpHost, toExecute, context);\n      entity = response.getEntity();\n      int statusCode = response.getStatusLine().getStatusCode();\n      log.debug(\"deleteCalendar status code: \" + statusCode);\n      if (statusCode == HttpStatus.SC_NO_CONTENT) {\n        return statusCode;\n      } else {\n        throw new CaldavDataAccessException(\n            \"deleteCalendar for \"\n                + calendarAccount\n                + \", \"\n                + calendarWithURI\n                + \" failed with unexpected status code: \"\n                + statusCode);\n      }\n    } catch (IOException e) {\n      log.error(\n          \"an IOException occurred in deleteCalendar for \"\n              + calendarAccount\n              + \", \"\n              + calendarWithURI);\n      throw new CaldavDataAccessException(e);\n    } finally {\n      quietlyConsume(entity);\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2446, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpGet)"], "initializationStart": [1402], "initializationEnd": [1425], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse.getStatusLine().getStatusCode()==HttpStatus.SC_OK", "guardType": "IF {", "guardExpressionStart": 1433, "guardExpressionEnd": 1494, "guardBlockStart": 1433, "guardBlockEnd": 2836, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1525, "focalAPIEnd": 1541, "followUpCheck": "response.getContentType().getValue().equals(\"application/json\")", "checkType": "IF", "followUpCheckExpressionStart": 1551, "followUpCheckExpressionEnd": 1617, "followUpCheckBlockStart": 1551, "followUpCheckBlockEnd": 2530, "use": ["toString(response)"], "useStart": [1655], "useEnd": [1683], "hasFinally": 1, "cleanUpCall": ["HttpGet.releaseConnection()"], "finallyExpressionStart": 2843, "finallyExpressionEnd": 2851, "finallyBlockStart": 2843, "finallyBlockEnd": 2924, "cleanUpCallStart": [2886], "cleanUpCallEnd": [2909], "url": "https://github.com/meltmedia/cadmium/tree/master/cli/src/main/java/com/meltmedia/cadmium/cli/HistoryCommand.java", "rawCode": "  /**\n   * Retrieves the history of a Cadmium site.\n   *\n   * @param siteUri The uri of a cadmium site.\n   * @param limit The maximum number of history entries to retrieve or if set to -1 tells the site\n   *     to retrieve all history.\n   * @param filter If true filters out the non revertable history entries.\n   * @param token The Github API token to pass to the Cadmium site for authentication.\n   * @return A list of {@link HistoryEntry} Objects that are populated with the history returned\n   *     from the Cadmium site.\n   * @throws URISyntaxException\n   * @throws IOException\n   * @throws ClientProtocolException\n   * @throws Exception\n   */\n  public static List<HistoryEntry> getHistory(\n      String siteUri, int limit, boolean filter, String token)\n      throws URISyntaxException, IOException, ClientProtocolException, Exception {\n\n    if (!siteUri.endsWith(\"/system/history\")) {\n      siteUri += \"/system/history\";\n    }\n\n    List<HistoryEntry> history = null;\n\n    HttpClient httpClient = httpClient();\n    HttpGet get = null;\n    try {\n      URIBuilder uriBuilder = new URIBuilder(siteUri);\n      if (limit > 0) {\n        uriBuilder.addParameter(\"limit\", limit + \"\");\n      }\n      if (filter) {\n        uriBuilder.addParameter(\"filter\", filter + \"\");\n      }\n      URI uri = uriBuilder.build();\n      get = new HttpGet(uri);\n      addAuthHeader(token, get);\n\n      HttpResponse resp = httpClient.execute(get);\n      if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n        HttpEntity entity = resp.getEntity();\n        if (entity.getContentType().getValue().equals(\"application/json\")) {\n          String responseContent = EntityUtils.toString(entity);\n          Gson gson =\n              new GsonBuilder()\n                  .registerTypeAdapter(\n                      Date.class,\n                      new JsonDeserializer<Date>() {\n\n                        @Override\n                        public Date deserialize(\n                            JsonElement json, Type typeOfT, JsonDeserializationContext ctx)\n                            throws JsonParseException {\n                          return new Date(json.getAsLong());\n                        }\n                      })\n                  .create();\n          history =\n              gson.fromJson(responseContent, new TypeToken<List<HistoryEntry>>() {}.getType());\n        } else {\n          System.err.println(\n              \"Invalid response content type [\" + entity.getContentType().getValue() + \"]\");\n          System.exit(1);\n        }\n      } else {\n        System.err.println(\n            \"Request failed due to a [\"\n                + resp.getStatusLine().getStatusCode()\n                + \":\"\n                + resp.getStatusLine().getReasonPhrase()\n                + \"] response from the remote server.\");\n        System.exit(1);\n      }\n    } finally {\n      if (get != null) {\n        get.releaseConnection();\n      }\n    }\n    return history;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2447, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpPost)"], "initializationStart": [488], "initializationEnd": [516], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 73, "tryExpressionEnd": 77, "tryBlockStart": 73, "tryBlockEnd": 1852, "catchExpressionStart": 1210, "catchExpressionEnd": 1230, "catchBlockStart": 1210, "catchBlockEnd": 1272, "exceptionHandlingCallStart": [1242], "exceptionHandlingCallEnd": [1261], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 539, "focalAPIEnd": 563, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpResponse.getEntity()", "toString(response)"], "useStart": [1131, 1295], "useEnd": [1155, 1327], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vserrago/Soapbox-Android/tree/master/src/com/example/soapbox/CommentTask.java", "rawCode": "  @Override\n  protected JSONArray doInBackground(String... params) {\n    try {\n      // Making HTTP request\n      // check for request method\n      HttpEntity httpEntity = null;\n      if (method.equals(POST)) {\n        // request method is POST\n        // defaultHttpClient\n        DefaultHttpClient httpClient = new DefaultHttpClient();\n        HttpPost httpPost = new HttpPost(URL);\n        httpPost.setEntity(new UrlEncodedFormEntity(postparams));\n\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        httpEntity = httpResponse.getEntity();\n        // is = httpEntity.getContent();\n\n      } else if (method.equals(GET)) {\n        System.out.println(\"Pre Execute TASK\");\n        try {\n          // request method is GET\n          DefaultHttpClient httpClient = new DefaultHttpClient();\n\n          URL += \".json\"; // Retrieve json\n\n          // Encode params\n          String paramString = URLEncodedUtils.format(postparams, \"utf-8\");\n          URL += \"?\" + paramString;\n\n          HttpGet httpGet = new HttpGet(URL);\n\n          HttpResponse httpResponse = httpClient.execute(httpGet);\n          httpEntity = httpResponse.getEntity();\n          // is = httpEntity.getContent();\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }\n\n      json = EntityUtils.toString(httpEntity);\n      try {\n        // TODO String json is a JSON array, not a single object\n        jArray = new JSONArray(json);\n        // jObj = new JSONObject(json);\n      } catch (JSONException e) {\n\n        e.printStackTrace();\n      }\n      System.out.println(json.toString());\n      System.out.println(\"Post Execute TASK\");\n\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n    } catch (ClientProtocolException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    // return JSON String\n    return jArray;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2448, "initialization": ["HttpResponse httpResponse = execute(*)"], "initializationStart": [142], "initializationEnd": [206], "hasTryCatch": 1, "exceptionType": "InterruptedException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 102, "tryExpressionEnd": 106, "tryBlockStart": 102, "tryBlockEnd": 728, "catchExpressionStart": 513, "catchExpressionEnd": 544, "catchBlockStart": 513, "catchBlockEnd": 586, "exceptionHandlingCallStart": [556], "exceptionHandlingCallEnd": [575], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 218, "focalAPIEnd": 238, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.consumeContent()"], "useStart": [218], "useEnd": [255], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/srl-mcgill/rter/tree/master/android/rter/src/ca/nehil/rter/streamingapp2/FFmpegFrameSender.java", "rawCode": "    /** Start sending requests. */\n    @Override\n    public void run() {\n      while (true) {\n        try {\n          HttpResponse response = this.httpclient.execute(FFmpegFrameSender.this.postqueue.take());\n          response.getEntity().consumeContent();\n          Log.i(\n              \"MSC\",\n              \"Response status \"\n                  + response.getStatusLine().getStatusCode()\n                  + \" (\"\n                  + response.getStatusLine().getReasonPhrase()\n                  + \")\");\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        } catch (ClientProtocolException e) {\n          e.printStackTrace();\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n      // this.httpclient.getConnectionManager().shutdown();\n    }\n"}, {"dataset": "getEntity", "exampleID": 2449, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 111, "focalAPIEnd": 131, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new BufferedHttpEntity(response)"], "useStart": [88], "useEnd": [132], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Sravan2j/Cinequest-Android/tree/master/Android/src/edu/sjsu/cinequest/android/AndroidWebConnection.java", "rawCode": "  protected InputStream getInputStream() throws IOException {\n    execute();\n    return new BufferedHttpEntity(response.getEntity()).getContent();\n  }\n"}, {"dataset": "getEntity", "exampleID": 2450, "initialization": ["HttpResponse httpResponse = new DefaultHttpClient()"], "initializationStart": [367], "initializationEnd": [390], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse.getStatusLine().getStatusCode()==HttpStatus.SC_OK", "guardType": "IF {", "guardExpressionStart": 415, "guardExpressionEnd": 480, "guardBlockStart": 415, "guardBlockEnd": 706, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 511, "focalAPIEnd": 531, "followUpCheck": "response != null", "checkType": "IF", "followUpCheckExpressionStart": 542, "followUpCheckExpressionEnd": 561, "followUpCheckBlockStart": 542, "followUpCheckBlockEnd": 608, "use": ["response.consumeContent()", "httpResponse.getStatusLine()"], "useStart": [574, 654], "useEnd": [597, 678], "hasFinally": 1, "cleanUpCall": ["HttpPut.abort()"], "finallyExpressionStart": 713, "finallyExpressionEnd": 721, "finallyBlockStart": 713, "finallyBlockEnd": 788, "cleanUpCallStart": [759], "cleanUpCallEnd": [773], "url": "https://github.com/escidoc/escidoc-core/tree/master/persistence-impl/src/main/java/org/escidoc/core/persistence/impl/fedora/util/HttpUtil.java", "rawCode": "  public void put(final String url, String content) throws IOException, AuthenticationException {\n    HttpPut method = null;\n\n    try {\n      method = new HttpPut(url);\n      setAuthHeader(method);\n      StringEntity reqEntity = new StringEntity(content);\n\n      reqEntity.setContentType(\"text/xml\");\n      method.setEntity(reqEntity);\n\n      HttpResponse response = new DefaultHttpClient().execute(method);\n\n      if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n        HttpEntity entity = response.getEntity();\n\n        if (entity != null) {\n          entity.consumeContent();\n        }\n      } else {\n        throw new IOException(response.getStatusLine().getReasonPhrase());\n      }\n    } finally {\n      if (method != null) {\n        method.abort();\n      }\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2451, "initialization": ["HttpResponse httpResponse = execute(*)"], "initializationStart": [282], "initializationEnd": [318], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse.getStatusLine().getStatusCode()==HttpStatus.SC_OK", "guardType": "IF {", "guardExpressionStart": 328, "guardExpressionEnd": 393, "guardBlockStart": 328, "guardBlockEnd": 967, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 473, "focalAPIEnd": 493, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.writeTo(ByteArrayOutputStream)", "httpResponse.getEntity()", "response.getContent()"], "useStart": [473, 807, 807], "useEnd": [506, 827, 840], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/erichkleung/trydish/tree/master/src/com/trydish/review/ReviewHome.java", "rawCode": "    protected SQLiteDatabase doInBackground(Void... arg0) {\n      String url = \"http://trydish.pythonanywhere.com/sync_restaurants\";\n      SQLiteDatabase db = null;\n\n      HttpResponse response;\n      HttpClient httpclient = new DefaultHttpClient();\n\n      try {\n        response = httpclient.execute(new HttpGet(url));\n        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          response.getEntity().writeTo(out);\n\n          final String databaseCommands = out.toString();\n          out.close();\n\n          DatabaseHandler db_handler = new DatabaseHandler(context);\n          db_handler.dropTables();\n          db_handler.execSQL(databaseCommands);\n\n        } else {\n          // Closes the connection.\n          response.getEntity().getContent().close();\n          System.out.println(\"status: \" + response.getStatusLine().getStatusCode());\n          return null;\n        }\n      } catch (Exception e) {\n        return null;\n      }\n      return db;\n    }\n"}, {"dataset": "getEntity", "exampleID": 2452, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpGet)"], "initializationStart": [1183], "initializationEnd": [1202], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["printStackTrace()", "MemoryCache.clear()"], "tryExpressionStart": 304, "tryExpressionEnd": 308, "tryBlockStart": 304, "tryBlockEnd": 1572, "catchExpressionStart": 1434, "catchExpressionEnd": 1455, "catchBlockStart": 1434, "catchBlockEnd": 1572, "exceptionHandlingCallStart": [1463, 1527], "exceptionHandlingCallEnd": [1483, 1546], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1227, "focalAPIEnd": 1243, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["CopyStream(response,OutputStream)", "decodeStream(response)"], "useStart": [1314, 1355], "useEnd": [1338, 1385], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RonnieVandenPoel/SourceFish/tree/master/SourceDroid/projectmanagement/src/com/fedorvlasov/lazylist/ImageLoader.java", "rawCode": "  private Bitmap getBitmap(String url) {\n    Log.i(\"url:\", url);\n    File f = fileCache.getFile(url);\n    Log.i(\"File location:\", f.getAbsolutePath());\n\n    // from SD cache\n    Bitmap b = decodeFile(f);\n    if (b != null) {\n      Log.i(\"Image:\", \"niet leeg\");\n      return b;\n    }\n\n    // from web\n    try {\n      Log.i(\"Image:\", \"leeg\");\n      Bitmap bitmap = null;\n      /*URL imageUrl = new URL(url);\n      HttpURLConnection conn = (HttpURLConnection)imageUrl.openConnection();\n      conn.setConnectTimeout(30000);\n      conn.setReadTimeout(30000);\n      conn.setInstanceFollowRedirects(true);\n      InputStream is=conn.getInputStream();\n      OutputStream os = new FileOutputStream(f);\n      Utils.CopyStream(is, os);\n      os.close();\n      conn.disconnect();\n      bitmap = decodeFile(f);*/\n\n      AccountManager am = AccountManager.get(context);\n      Account[] accounts = am.getAccountsByType(\"com.sourcefish.authenticator\");\n\n      DefaultHttpClient client =\n          SourceFishHttpClient.getClient(accounts[0].name, am.getPassword(accounts[0]));\n      HttpGet get = new HttpGet(\"http://projecten3.eu5.org/webservice/getProfilePicture/\" + url);\n      HttpResponse resp = client.execute(get);\n      InputStream is = resp.getEntity().getContent();\n\n      OutputStream os = new FileOutputStream(f);\n      Utils.CopyStream(is, os);\n      bitmap = BitmapFactory.decodeStream(is);\n\n      os.close();\n\n      return bitmap;\n    } catch (Throwable ex) {\n      ex.printStackTrace();\n      if (ex instanceof OutOfMemoryError) memoryCache.clear();\n      return null;\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2453, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpPost)"], "initializationStart": [1188], "initializationEnd": [1223], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse!=null", "guardType": "IF {", "guardExpressionStart": 1230, "guardExpressionEnd": 1255, "guardBlockStart": 1230, "guardBlockEnd": 1336, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1273, "focalAPIEnd": 1297, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [1310], "useEnd": [1329], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/photon-infotech/nodejs-webservice-eshop/tree/master/test/functional/src/main/java/com/photon/phresco/Screens/HttpRequest.java", "rawCode": "  /**\n   * Send the JSON data to specified URL and get the httpResponse back\n   *\n   * @param sURL\n   * @param jObject\n   * @return InputStream\n   * @throws IOException\n   */\n  public static InputStream post(String sURL, JSONObject jObject) throws IOException {\n    HttpResponse httpResponse = null;\n    InputStream is = null;\n\n    HttpPost httpPostRequest = new HttpPost(sURL);\n    HttpEntity entity;\n\n    httpPostRequest.setHeader(\"Accept\", \"application/json\");\n    httpPostRequest.setHeader(HTTP.CONTENT_TYPE, \"application/json\");\n    httpPostRequest.setEntity(new ByteArrayEntity(jObject.toString().getBytes(\"UTF-8\")));\n    HttpParams httpParameters = new BasicHttpParams();\n    // Set the timeout in milliseconds until a connection is established.\n    int timeoutConnection = TIME_OUT;\n    HttpConnectionParams.setConnectionTimeout(httpParameters, timeoutConnection);\n    // Set the default socket timeout (SO_TIMEOUT)\n    // in milliseconds which is the timeout for waiting for data.\n    int timeoutSocket = TIME_OUT;\n    HttpConnectionParams.setSoTimeout(httpParameters, timeoutSocket);\n\n    DefaultHttpClient httpClient = new DefaultHttpClient(httpParameters);\n    httpResponse = httpClient.execute(httpPostRequest);\n\n    if (httpResponse != null) {\n      entity = httpResponse.getEntity();\n      is = entity.getContent();\n    }\n    return is;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2454, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpPost)"], "initializationStart": [1030], "initializationEnd": [1058], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1089, "focalAPIEnd": 1109, "followUpCheck": "response != null", "checkType": "IF", "followUpCheckExpressionStart": 1240, "followUpCheckExpressionEnd": 1262, "followUpCheckBlockStart": 1240, "followUpCheckBlockEnd": 1426, "use": ["httpResponse.getStatusLine()", "consume(response)"], "useStart": [1207, 1433], "useEnd": [1231, 1463], "hasFinally": 1, "cleanUpCall": ["HttpClient.getConnectionManager()", "shutdown()"], "finallyExpressionStart": 1471, "finallyExpressionEnd": 1479, "finallyBlockStart": 1471, "finallyBlockEnd": 1701, "cleanUpCallStart": [1650, 1650], "cleanUpCallEnd": [1683, 1694], "url": "https://github.com/pwansch/iTradeTunes/tree/master/iTradeTunesApplication/lib/httpcomponents-client-4.1.2/examples/org/apache/http/examples/client/ClientChunkEncodedPost.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    if (args.length != 1) {\n      System.out.println(\"File path not given\");\n      System.exit(1);\n    }\n    HttpClient httpclient = new DefaultHttpClient();\n    try {\n      HttpPost httppost =\n          new HttpPost(\"http://localhost:8080\" + \"/servlets-examples/servlet/RequestInfoExample\");\n\n      File file = new File(args[0]);\n\n      InputStreamEntity reqEntity = new InputStreamEntity(new FileInputStream(file), -1);\n      reqEntity.setContentType(\"binary/octet-stream\");\n      reqEntity.setChunked(true);\n      // It may be more appropriate to use FileEntity class in this particular\n      // instance but we are using a more generic InputStreamEntity to demonstrate\n      // the capability to stream out data from any arbitrary source\n      //\n      // FileEntity entity = new FileEntity(file, \"binary/octet-stream\");\n\n      httppost.setEntity(reqEntity);\n\n      System.out.println(\"executing request \" + httppost.getRequestLine());\n      HttpResponse response = httpclient.execute(httppost);\n      HttpEntity resEntity = response.getEntity();\n\n      System.out.println(\"----------------------------------------\");\n      System.out.println(response.getStatusLine());\n      if (resEntity != null) {\n        System.out.println(\"Response content length: \" + resEntity.getContentLength());\n        System.out.println(\"Chunked?: \" + resEntity.isChunked());\n      }\n      EntityUtils.consume(resEntity);\n    } finally {\n      // When HttpClient instance is no longer needed,\n      // shut down the connection manager to ensure\n      // immediate deallocation of all system resources\n      httpclient.getConnectionManager().shutdown();\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2455, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpGet)"], "initializationStart": [503], "initializationEnd": [530], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 558, "focalAPIEnd": 578, "followUpCheck": "response != null", "checkType": "IF", "followUpCheckExpressionStart": 709, "followUpCheckExpressionEnd": 728, "followUpCheckBlockStart": 709, "followUpCheckBlockEnd": 823, "use": ["httpResponse.getStatusLine()", "consume(response)"], "useStart": [676, 830], "useEnd": [700, 857], "hasFinally": 1, "cleanUpCall": ["DefaultHttpClient.getConnectionManager()", "shutdown()"], "finallyExpressionStart": 865, "finallyExpressionEnd": 873, "finallyBlockStart": 865, "finallyBlockEnd": 1095, "cleanUpCallStart": [1044, 1044], "cleanUpCallEnd": [1077, 1088], "url": "https://github.com/luigiliquori/myMed/tree/master/frontend/binary/android/myFSA/lib/httpcomponents-client-4.1.2/examples/org/apache/http/examples/client/ClientAuthentication.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    DefaultHttpClient httpclient = new DefaultHttpClient();\n    try {\n      httpclient\n          .getCredentialsProvider()\n          .setCredentials(\n              new AuthScope(\"localhost\", 443),\n              new UsernamePasswordCredentials(\"username\", \"password\"));\n\n      HttpGet httpget = new HttpGet(\"https://localhost/protected\");\n\n      System.out.println(\"executing request\" + httpget.getRequestLine());\n      HttpResponse response = httpclient.execute(httpget);\n      HttpEntity entity = response.getEntity();\n\n      System.out.println(\"----------------------------------------\");\n      System.out.println(response.getStatusLine());\n      if (entity != null) {\n        System.out.println(\"Response content length: \" + entity.getContentLength());\n      }\n      EntityUtils.consume(entity);\n    } finally {\n      // When HttpClient instance is no longer needed,\n      // shut down the connection manager to ensure\n      // immediate deallocation of all system resources\n      httpclient.getConnectionManager().shutdown();\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2456, "initialization": ["HttpResponse httpResponse = execute(*)"], "initializationStart": [925], "initializationEnd": [998], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1026, "focalAPIEnd": 1046, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["consume(response)", "httpResponse.getEntity()", "consume(response)"], "useStart": [1006, 1614, 1594], "useEnd": [1047, 1634, 1635], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sasasin/sreader/tree/master/commons/src/main/java/net/sasasin/sreader/commons/util/impl/WgetHttpComponentsImpl.java", "rawCode": "  private CloseableHttpClient httpClientFactory() throws IOException {\n\n    // HTTP 30xを追跡する\n    RequestConfig config =\n        RequestConfig.custom()\n            .setRedirectsEnabled(true)\n            .setConnectTimeout(DEFAULT_TIMEOUT_MILLISECONDS)\n            .setConnectionRequestTimeout(DEFAULT_TIMEOUT_MILLISECONDS)\n            .build();\n\n    // UserAgentを設定。無難にMSIE。\n    List<Header> headers = new ArrayList<Header>();\n    headers.add(\n        new BasicHeader(\"User-Agent\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\"));\n\n    CloseableHttpClient httpclient =\n        HttpClientBuilder.create()\n            .setDefaultRequestConfig(config)\n            .setDefaultHeaders(headers)\n            .build();\n\n    HttpResponse response = null;\n\n    // ログイン情報があれば、ログイン済みのHttpClientを返す。\n    if (getLoginId() != null && getLoginPassword() != null && getLoginInfo() != null) {\n\n      // access top page.\n      response = httpclient.execute(new HttpGet(\"http://\" + getLoginInfo().getHostName()));\n      EntityUtils.consume(response.getEntity());\n\n      // login\n      HttpPost httpost = new HttpPost(getLoginInfo().getPostUrl());\n      List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n      // ログインID入力欄の名前と、ログインIDをセット\n      nvps.add(new BasicNameValuePair(getLoginInfo().getIdBoxName(), getLoginId()));\n      // パスワード入力欄の名前と、パスワードをセット\n      nvps.add(new BasicNameValuePair(getLoginInfo().getPasswordBoxName(), getLoginPassword()));\n      httpost.setEntity((HttpEntity) new UrlEncodedFormEntity(nvps, Charset.forName(\"UTF-8\")));\n      response = httpclient.execute(httpost);\n      EntityUtils.consume(response.getEntity());\n    }\n    return httpclient;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2457, "initialization": ["HttpResponse httpResponse = MyHttpClient.execute(HttpGet)"], "initializationStart": [530], "initializationEnd": [553], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getMessage()"], "tryExpressionStart": 475, "tryExpressionEnd": 479, "tryBlockStart": 475, "tryBlockEnd": 769, "catchExpressionStart": 631, "catchExpressionEnd": 654, "catchBlockStart": 631, "catchBlockEnd": 769, "exceptionHandlingCallStart": [745], "exceptionHandlingCallEnd": [760], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 599, "focalAPIEnd": 619, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)"], "useStart": [578], "useEnd": [620], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/edaniels/Seminole_Tix/tree/master/src/com/dunksoftware/seminoletix/ListActivity.java", "rawCode": "    @Override\n    protected String doInBackground(Void... params) {\n\n      // Create a new HttpClient and Post Header\n      MyHttpClient client = new MyHttpClient(null);\n\n      // sets cookie\n      client.setCookieStore(UserControl.mCookie);\n\n      // Prepare a request object\n      HttpGet httpget = new HttpGet(Constants.CurrentUserAddress);\n\n      // Execute the request\n      HttpResponse response = null;\n\n      // return string\n      String returnString = null;\n\n      try {\n        // Open the web page.\n        response = client.execute(httpget);\n        returnString = EntityUtils.toString(response.getEntity());\n\n      } catch (IOException ex) {\n        // Connection was not established\n        returnString = \"Connection failed; \" + ex.getMessage();\n      }\n      return returnString;\n    }\n"}, {"dataset": "getEntity", "exampleID": 2458, "initialization": ["HttpResponse httpResponse = ODataClientResponse.getHttpResponse()"], "initializationStart": [94], "initializationEnd": [142], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["propagate(*)"], "tryExpressionStart": 148, "tryExpressionEnd": 152, "tryBlockStart": 148, "tryBlockEnd": 389, "catchExpressionStart": 325, "catchExpressionEnd": 345, "catchBlockStart": 325, "catchBlockEnd": 389, "exceptionHandlingCallStart": [359], "exceptionHandlingCallEnd": [382], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 185, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new InputStreamReader(response,*)"], "useStart": [261], "useEnd": [316], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rolisv/odata4j-fork/tree/master/odata4j-cxf/src/main/java/org/odata4j/cxf/consumer/ODataCxfClient.java", "rawCode": "  public Reader getFeedReader(ODataClientResponse response) {\n    HttpResponse httpResponse = ((CxfClientResponse) response).getHttpResponse();\n    try {\n      InputStream textEntity = httpResponse.getEntity().getContent();\n      return new BOMWorkaroundReader(new InputStreamReader(textEntity, Charsets.Upper.UTF_8));\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2459, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpPost)"], "initializationStart": [643], "initializationEnd": [663], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 284, "tryExpressionEnd": 288, "tryBlockStart": 284, "tryBlockEnd": 958, "catchExpressionStart": 902, "catchExpressionEnd": 924, "catchBlockStart": 902, "catchBlockEnd": 958, "exceptionHandlingCallStart": [932], "exceptionHandlingCallEnd": [951], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 742, "focalAPIEnd": 762, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [742], "useEnd": [775], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rosedu/wouso-extras/tree/master/android/Demos/TestPush/src/test/push/C2DMRegistrationReceiver.java", "rawCode": "  public void sendRegistrationIdToServer(String deviceId, String registrationId) {\n    Log.d(\"C2DM\", \"Sending registration ID to my application server\");\n    HttpClient client = new DefaultHttpClient();\n    HttpPost post = new HttpPost(\"http://vogellac2dm.appspot.com/register\");\n    try {\n      List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);\n      // Get the deviceID\n      nameValuePairs.add(new BasicNameValuePair(\"deviceid\", deviceId));\n      nameValuePairs.add(new BasicNameValuePair(\"registrationid\", registrationId));\n\n      post.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n      HttpResponse response = client.execute(post);\n      BufferedReader rd =\n          new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n\n      String line = \"\";\n      while ((line = rd.readLine()) != null) {\n        Log.e(\"HttpResponse\", line);\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2460, "initialization": ["HttpResponse httpResponse = NetworkClient.get(String)"], "initializationStart": [580], "initializationEnd": [597], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 684, "focalAPIEnd": 699, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()", "response.consumeContent()"], "useStart": [817, 845], "useEnd": [833, 865], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mitmel/Locast-Android-UNICEF/tree/master/src/edu/mit/mobile/android/locast/net/NetworkClient.java", "rawCode": "  /**\n   * @param context\n   * @param username\n   * @param password\n   * @return a Bundle containing the user's profile or null if authentication failed.\n   * @throws IOException\n   * @throws JSONException\n   * @throws NetworkProtocolException\n   */\n  public static Bundle authenticate(Context context, String username, String password)\n      throws IOException, JSONException, NetworkProtocolException {\n    final NetworkClient nc = getInstance(context);\n    nc.overrideCredentials(username, password);\n    boolean authenticated = false;\n    try {\n      final HttpResponse res = nc.get(PATH_USER);\n\n      authenticated = nc.checkStatusCode(res, false);\n\n      final HttpEntity ent = res.getEntity();\n      JSONObject jo = null;\n\n      if (authenticated) {\n        jo = new JSONObject(StreamUtils.inputStreamToString(ent.getContent()));\n        ent.consumeContent();\n      } else {\n        jo = null;\n      }\n      // ensure that this instance is never reused, as it could have invalid authentication cached.\n      nc.clearCredentialsOverride();\n\n      return jsonObjectToBundle(jo, true);\n    } catch (final HttpResponseException e) {\n      if (e.getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2461, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpPost,HttpContext)"], "initializationStart": [840], "initializationEnd": [882], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 647, "tryExpressionEnd": 651, "tryBlockStart": 647, "tryBlockEnd": 1151, "catchExpressionStart": 1097, "catchExpressionEnd": 1117, "catchBlockStart": 1097, "catchBlockEnd": 1151, "exceptionHandlingCallStart": [1125], "exceptionHandlingCallEnd": [1144], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 907, "focalAPIEnd": 927, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["DocumentBuilder.parse(response)"], "useStart": [1054], "useEnd": [1071], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ese-unibe-ch/ese2013-team7/tree/master/Programming/Mensa@Unibe/src/com/ese2013/mensaunibe/map/GetMapDirection.java", "rawCode": "  /**\n   * Connects with google mpa api and request direction\n   *\n   * @param start Starting point for directions request\n   * @param end Endpoint for directions request\n   * @param mode travel mode e.g. walking\n   */\n  public Document getDocument(LatLng start, LatLng end, String mode) {\n    String url =\n        \"http://maps.googleapis.com/maps/api/directions/xml?\"\n            + \"origin=\"\n            + start.latitude\n            + \",\"\n            + start.longitude\n            + \"&destination=\"\n            + end.latitude\n            + \",\"\n            + end.longitude\n            + \"&sensor=false&units=metric&mode=\"\n            + mode;\n\n    try {\n      HttpClient httpClient = new DefaultHttpClient();\n      HttpContext localContext = new BasicHttpContext();\n      HttpPost httpPost = new HttpPost(url);\n      HttpResponse response = httpClient.execute(httpPost, localContext);\n      InputStream in = response.getEntity().getContent();\n      DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      Document doc = builder.parse(in);\n      return doc;\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return null;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2462, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpGet)"], "initializationStart": [610], "initializationEnd": [632], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getUrl()", "warn(String,*)", "setStatus(*)", "toString()", "setErrorMessage(*)", "PodcastDao.updateChannel(PodcastChannel)"], "tryExpressionStart": 200, "tryExpressionEnd": 204, "tryBlockStart": 200, "tryBlockEnd": 1508, "catchExpressionStart": 1162, "catchExpressionEnd": 1182, "catchBlockStart": 1162, "catchBlockEnd": 1412, "exceptionHandlingCallStart": [1253, 1190, 1281, 1351, 1327, 1372], "exceptionHandlingCallEnd": [1269, 1273, 1319, 1363, 1364, 1405], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 645, "focalAPIEnd": 665, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["build(response)", "closeQuietly(response)"], "useStart": [707, 1429], "useEnd": [733, 1453], "hasFinally": 1, "cleanUpCall": ["closeQuietly(InputStream)", "HttpClient.getConnectionManager()", "shutdown()"], "finallyExpressionStart": 1413, "finallyExpressionEnd": 1421, "finallyBlockStart": 1413, "finallyBlockEnd": 1508, "cleanUpCallStart": [1429, 1461, 1461], "cleanUpCallEnd": [1453, 1490, 1501], "url": "https://github.com/Adi3000/subsonic-main/tree/master/src/main/java/net/sourceforge/subsonic/service/PodcastService.java", "rawCode": "  @SuppressWarnings({\"unchecked\"})\n  private void doRefreshChannel(PodcastChannel channel, boolean downloadEpisodes) {\n    InputStream in = null;\n    HttpClient client = new DefaultHttpClient();\n\n    try {\n      channel.setStatus(PodcastStatus.DOWNLOADING);\n      channel.setErrorMessage(null);\n      podcastDao.updateChannel(channel);\n\n      HttpConnectionParams.setConnectionTimeout(client.getParams(), 2 * 60 * 1000); // 2 minutes\n      HttpConnectionParams.setSoTimeout(client.getParams(), 10 * 60 * 1000); // 10 minutes\n      HttpGet method = new HttpGet(channel.getUrl());\n\n      HttpResponse response = client.execute(method);\n      in = response.getEntity().getContent();\n\n      Document document = new SAXBuilder().build(in);\n      Element channelElement = document.getRootElement().getChild(\"channel\");\n\n      channel.setTitle(channelElement.getChildTextTrim(\"title\"));\n      channel.setDescription(channelElement.getChildTextTrim(\"description\"));\n      channel.setStatus(PodcastStatus.COMPLETED);\n      channel.setErrorMessage(null);\n      podcastDao.updateChannel(channel);\n\n      refreshEpisodes(channel, channelElement.getChildren(\"item\"));\n\n    } catch (Exception x) {\n      LOG.warn(\"Failed to get/parse RSS file for Podcast channel \" + channel.getUrl(), x);\n      channel.setStatus(PodcastStatus.ERROR);\n      channel.setErrorMessage(x.toString());\n      podcastDao.updateChannel(channel);\n    } finally {\n      IOUtils.closeQuietly(in);\n      client.getConnectionManager().shutdown();\n    }\n\n    if (downloadEpisodes) {\n      for (final PodcastEpisode episode : getEpisodes(channel.getId(), false)) {\n        if (episode.getStatus() == PodcastStatus.NEW && episode.getUrl() != null) {\n          downloadEpisode(episode);\n        }\n      }\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2463, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpPost)"], "initializationStart": [542], "initializationEnd": [562], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 344, "tryExpressionEnd": 348, "tryBlockStart": 344, "tryBlockEnd": 941, "catchExpressionStart": 821, "catchExpressionEnd": 843, "catchBlockStart": 821, "catchBlockEnd": 877, "exceptionHandlingCallStart": [851], "exceptionHandlingCallEnd": [870], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 641, "focalAPIEnd": 661, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [641], "useEnd": [674], "hasFinally": 1, "cleanUpCall": ["DefaultHttpClient.getConnectionManager()", "shutdown()"], "finallyExpressionStart": 878, "finallyExpressionEnd": 886, "finallyBlockStart": 878, "finallyBlockEnd": 941, "cleanUpCallStart": [894, 894], "cleanUpCallEnd": [923, 934], "url": "https://github.com/RonnieVandenPoel/SourceFish/tree/master/Java-semester1/GUI/Entry.java", "rawCode": "  public boolean delete(User u, JFrame[] frame) {\n    if (!Methodes.testConnectie()) {\n      Methodes.Disconnect(frame, \"Connectie verloren, terug naar login scherm\");\n    }\n    boolean check = false;\n\n    DefaultHttpClient client = u.getClient();\n    HttpPost post = new HttpPost(\"http://\" + Methodes.getIp() + \"/webservice/deleteEntry\");\n    try {\n\n      StringEntity remove = new StringEntity(\"{\\\"trid\\\":\\\"\" + entryid + \"\\\"}\");\n\n      remove.setContentType(\"application/json\");\n      post.setEntity(remove);\n\n      HttpResponse response = client.execute(post);\n      BufferedReader rd =\n          new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n      String line = \"\";\n      while ((line = rd.readLine()) != null) {\n        System.out.println(line);\n\n        check = true;\n      }\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      client.getConnectionManager().shutdown();\n    }\n    return check;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2464, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpGet)"], "initializationStart": [1492], "initializationEnd": [1519], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpResponse.getStatusLine()", "httpResponse.getLastHeader(String)", "httpResponse.getLastHeader(String)"], "configurationStart": [1617, 1669, 1739], "configurationEnd": [1641, 1711, 1779], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1879, "focalAPIEnd": 1899, "followUpCheck": "response != null", "checkType": "IF", "followUpCheckExpressionStart": 1908, "followUpCheckExpressionEnd": 1927, "followUpCheckBlockStart": 1908, "followUpCheckBlockEnd": 2171, "use": ["toString(response)"], "useStart": [1955], "useEnd": [1983], "hasFinally": 1, "cleanUpCall": ["DefaultHttpClient.getConnectionManager()", "shutdown()"], "finallyExpressionStart": 2179, "finallyExpressionEnd": 2187, "finallyBlockStart": 2179, "finallyBlockEnd": 2409, "cleanUpCallStart": [2358, 2358], "cleanUpCallEnd": [2391, 2402], "url": "https://github.com/luigiliquori/myMed/tree/master/frontend/binary/android/myEuroCin/lib/httpcomponents-client-4.1.2/examples/org/apache/http/examples/client/ClientGZipContentCompression.java", "rawCode": "  public static final void main(String[] args) throws Exception {\n    DefaultHttpClient httpclient = new DefaultHttpClient();\n    try {\n      httpclient.addRequestInterceptor(\n          new HttpRequestInterceptor() {\n\n            public void process(final HttpRequest request, final HttpContext context)\n                throws HttpException, IOException {\n              if (!request.containsHeader(\"Accept-Encoding\")) {\n                request.addHeader(\"Accept-Encoding\", \"gzip\");\n              }\n            }\n          });\n\n      httpclient.addResponseInterceptor(\n          new HttpResponseInterceptor() {\n\n            public void process(final HttpResponse response, final HttpContext context)\n                throws HttpException, IOException {\n              HttpEntity entity = response.getEntity();\n              Header ceheader = entity.getContentEncoding();\n              if (ceheader != null) {\n                HeaderElement[] codecs = ceheader.getElements();\n                for (int i = 0; i < codecs.length; i++) {\n                  if (codecs[i].getName().equalsIgnoreCase(\"gzip\")) {\n                    response.setEntity(new GzipDecompressingEntity(response.getEntity()));\n                    return;\n                  }\n                }\n              }\n            }\n          });\n\n      HttpGet httpget = new HttpGet(\"http://www.apache.org/\");\n\n      // Execute HTTP request\n      System.out.println(\"executing request \" + httpget.getURI());\n      HttpResponse response = httpclient.execute(httpget);\n\n      System.out.println(\"----------------------------------------\");\n      System.out.println(response.getStatusLine());\n      System.out.println(response.getLastHeader(\"Content-Encoding\"));\n      System.out.println(response.getLastHeader(\"Content-Length\"));\n      System.out.println(\"----------------------------------------\");\n\n      HttpEntity entity = response.getEntity();\n\n      if (entity != null) {\n        String content = EntityUtils.toString(entity);\n        System.out.println(content);\n        System.out.println(\"----------------------------------------\");\n        System.out.println(\"Uncompressed size: \" + content.length());\n      }\n\n    } finally {\n      // When HttpClient instance is no longer needed,\n      // shut down the connection manager to ensure\n      // immediate deallocation of all system resources\n      httpclient.getConnectionManager().shutdown();\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2465, "initialization": ["HttpResponse httpResponse = download(String)"], "initializationStart": [392], "initializationEnd": [405], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(httpResponse==null)", "guardType": "IF {", "guardExpressionStart": 411, "guardExpressionEnd": 436, "guardBlockStart": 411, "guardBlockEnd": 458, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 522, "focalAPIEnd": 546, "followUpCheck": "response != null", "checkType": "IF", "followUpCheckExpressionStart": 1998, "followUpCheckExpressionEnd": 2015, "followUpCheckBlockStart": 1998, "followUpCheckBlockEnd": 2047, "use": ["response.close()"], "useStart": [2026], "useEnd": [2038], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 1982, "finallyExpressionEnd": 1990, "finallyBlockStart": 1982, "finallyBlockEnd": 2135, "cleanUpCallStart": [2026], "cleanUpCallEnd": [2038], "url": "https://github.com/madeye/dbartists/tree/master/src/org/dbartists/StreamProxy.java", "rawCode": "  private void processRequest(HttpRequest request, Socket client)\n      throws IllegalStateException, IOException {\n    if (request == null) {\n      return;\n    }\n    Log.d(LOG_TAG, \"processing\");\n    String url = request.getRequestLine().getUri();\n\n    String cache = getFileName(title);\n    File f = new File(cache);\n    if (!f.exists()) f.createNewFile();\n\n    HttpResponse realResponse = download(url);\n    if (realResponse == null) {\n      return;\n    }\n\n    Log.d(LOG_TAG, \"downloading...\");\n\n    InputStream data = realResponse.getEntity().getContent();\n\n    int totalFileSize = -1;\n    for (Header h : realResponse.getAllHeaders()) {\n      if (h.getName().toLowerCase().equals(\"content-length\"))\n        try {\n          totalFileSize = Integer.valueOf(h.getValue());\n        } catch (NumberFormatException e) {\n          // Ignore\n        }\n    }\n    StringBuilder httpString = new StringBuilder();\n    httpString.append(\"HTTP/1.1 200 OK\\r\\n\");\n    httpString.append(\"Content-Type: audio/mpeg\\r\\n\");\n    httpString.append(\"Connection: close\\r\\n\");\n    httpString.append(\"Accept-Ranges: bytes\\r\\n\");\n    if (totalFileSize != -1) httpString.append(\"Content-Length: \" + totalFileSize + \"\\r\\n\");\n    httpString.append(\"Content-Disposition: inline; filename=\" + cache + \".mp3\\r\\n\\r\\n\");\n\n    Log.d(LOG_TAG, \"headers done\");\n\n    OutputStream output = new FileOutputStream(cache);\n\n    try {\n      byte[] buffer = httpString.toString().getBytes();\n      int readBytes;\n      Log.d(LOG_TAG, \"writing to client\");\n      client.getOutputStream().write(buffer, 0, buffer.length);\n\n      // Start streaming content.\n      byte[] buff = new byte[1024 * 250];\n      while (isRunning && (readBytes = data.read(buff, 0, buff.length)) != -1) {\n        client.getOutputStream().write(buff, 0, readBytes);\n        output.write(buff, 0, readBytes);\n        client.getOutputStream().flush();\n        output.flush();\n      }\n    } catch (Exception e) {\n      Log.e(\"\", e.getMessage(), e);\n    } finally {\n      if (data != null) {\n        data.close();\n      }\n      if (output != null) {\n        output.close();\n      }\n      client.close();\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2466, "initialization": ["HttpResponse httpResponse = ResponseFactory.createResponse(int)"], "initializationStart": [90], "initializationEnd": [125], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 143, "focalAPIEnd": 163, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertThat(response,*)"], "useStart": [132], "useEnd": [177], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tjhart/swivel/tree/master/swivel-server/src/test/java/com/tjh/swivel/model/ResponseFactoryTest.java", "rawCode": "  @Test\n  public void createResponseWithCodeHasNullEntity() {\n    HttpResponse response = responseFactory.createResponse(201);\n\n    assertThat(response.getEntity(), nullValue());\n  }\n"}, {"dataset": "getEntity", "exampleID": 2467, "initialization": ["HttpResponse httpResponse = new DefaultHttpClient()"], "initializationStart": [177], "initializationEnd": [200], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse.getStatusLine().getStatusCode()==200", "guardType": "IF {", "guardExpressionStart": 224, "guardExpressionEnd": 280, "guardBlockStart": 224, "guardBlockEnd": 951, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 331, "focalAPIEnd": 355, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)"], "useStart": [310], "useEnd": [356], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tomdong/borrow/tree/master/src/com/intalker/borrow/cloud/CloudUtility.java", "rawCode": "  public static int _getUsersByISBN(String url) {\n    AppData.getInstance().clearTempUsers();\n    HttpGet getReq = new HttpGet(url);\n    try {\n      HttpResponse httpResponse = new DefaultHttpClient().execute(getReq);\n      if (httpResponse.getStatusLine().getStatusCode() == 200) {\n        String strResult = EntityUtils.toString(httpResponse.getEntity());\n        if (null != strResult && strResult.length() > 0) {\n          if (strResult.compareTo(CloudConfig.ServerReturnCode_EmptyResult) == 0) {\n            return CloudConfig.Return_OK;\n          } else if (strResult.compareTo(CloudConfig.ServerReturnCode_BadSession) == 0) {\n            return CloudConfig.Return_BadToken;\n          } else {\n            JSONUtil.parseTempUsersInfo(strResult);\n          }\n          return CloudConfig.Return_OK;\n        } else {\n          return CloudConfig.Return_UnknownError;\n        }\n      } else {\n        return CloudConfig.Return_NetworkError;\n      }\n    } catch (Exception e) {\n      return CloudConfig.Return_NetworkError;\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2468, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpPost)"], "initializationStart": [4548], "initializationEnd": [4576], "hasTryCatch": 1, "exceptionType": "InvalidInputException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 76, "tryExpressionEnd": 80, "tryBlockStart": 76, "tryBlockEnd": 6525, "catchExpressionStart": 6385, "catchExpressionEnd": 6417, "catchBlockStart": 6385, "catchBlockEnd": 6470, "exceptionHandlingCallStart": [6444], "exceptionHandlingCallEnd": [6463], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 4789, "focalAPIEnd": 4809, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)"], "useStart": [4768], "useEnd": [4810], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ian-Wright1979/INB372-Solar/tree/master/INB372-SolarAndroid/src/solar/solarAndroid/SolarPowerCalculator.java", "rawCode": "  private void originalSubmit(View view) throws InvalidInputException {\n    try {\n      Float panelEfficiency =\n          InputChecking.getPanelEfficiency(\n              ((EditText) findViewById(R.id.PanelEfficiency)).getText().toString());\n      Float inverterEfficiency =\n          InputChecking.getInverterEfficiency(\n              ((EditText) findViewById(R.id.InverterEfficiency)).getText().toString());\n      String address =\n          InputChecking.getAddress(((EditText) findViewById(R.id.Address)).getText().toString());\n      Button panelOrientationButton = ((Button) findViewById(R.id.PanelOrientation));\n      if (panelOrientationButton.getText().toString().equals(\"Click to set\"))\n        panelOrientationButton.setText(orientationText);\n      String orientation = InputChecking.getOrientation(Float.toString(actualOrientation));\n      Button panelAngleButton = ((Button) findViewById(R.id.PanelAngle));\n      if (panelAngleButton.getText().toString().equals(\"Click to set\"))\n        panelAngleButton.setText(Float.toString(actualAngle));\n      Float angle = InputChecking.getAngle(Float.toString(actualAngle));\n      // Integer sunlight = getSunlight();\n      Float consumption =\n          InputChecking.getAngle(\n              ((EditText) findViewById(R.id.PowerConsumption)).getText().toString());\n      Float tariff =\n          InputChecking.getTariff(\n              ((Spinner) findViewById(R.id.TariffRate)).getSelectedItem().toString());\n      Integer panelQuantity =\n          InputChecking.getPanelQuantity(\n              ((EditText) findViewById(R.id.PanelQuantity)).getText().toString());\n      String panelManufacturer =\n          InputChecking.getPanelManufacturer(\n              ((Spinner) findViewById(R.id.PanelManufacturer)).getSelectedItem().toString());\n      String panelModel =\n          InputChecking.getPanelModel(\n              ((Spinner) findViewById(R.id.PanelModel)).getSelectedItem().toString());\n      String inverterManufacturer =\n          InputChecking.getInverterManufacturer(\n              ((Spinner) findViewById(R.id.InverterManufacturer)).getSelectedItem().toString());\n      String inverterModel =\n          InputChecking.getInverterModel(\n              ((Spinner) findViewById(R.id.InverterModel)).getSelectedItem().toString());\n\n      // Create a new HttpClient and Post Header\n      ConnectivityManager connec =\n          (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n      if (connec.getActiveNetworkInfo().isAvailable()) {\n        HttpClient httpclient = new DefaultHttpClient();\n        HttpPost httppost =\n            new HttpPost(\n                baseServletAddress\n                    + \"solarServlet\"); // 10.0.2.2 magic thing that accesses localhost from emulator\n\n        ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\n        nameValuePairs.add(new BasicNameValuePair(\"panelManufacturer\", panelManufacturer));\n        nameValuePairs.add(new BasicNameValuePair(\"panelModel\", panelModel));\n        nameValuePairs.add(new BasicNameValuePair(\"panelEfficiency\", panelEfficiency.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"panelQty\", panelQuantity.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"orientation\", orientation.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"angle\", angle.toString()));\n\n        nameValuePairs.add(new BasicNameValuePair(\"inverterManufacturer\", inverterManufacturer));\n        nameValuePairs.add(new BasicNameValuePair(\"inverterModel\", inverterModel));\n        nameValuePairs.add(\n            new BasicNameValuePair(\"inverterEfficiency\", inverterEfficiency.toString()));\n\n        // nameValuePairs.add(new BasicNameValuePair(\"sunlight\", sunlight.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"consumption\", consumption.toString()));\n        nameValuePairs.add(\n            new BasicNameValuePair(\"latitude\", Double.toString(lastKnownLocation.getLatitude())));\n        nameValuePairs.add(\n            new BasicNameValuePair(\"longitude\", Double.toString(lastKnownLocation.getLongitude())));\n        nameValuePairs.add(new BasicNameValuePair(\"address\", address.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"tariff\", tariff.toString()));\n\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"c\");\n        httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"d\");\n        // Execute HTTP Post Request\n        HttpResponse response = httpclient.execute(httppost);\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"e\");\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"e\");\n        JSONObject jObject = new JSONObject(EntityUtils.toString(response.getEntity()));\n        JSONObject savingsJSONObject = jObject.getJSONObject(\"Savings\");\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"f\");\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"f\");\n        if (savingsJSONObject.getBoolean(\"Success\")) {\n          Double savings = savingsJSONObject.getDouble(\"Amount\");\n          savings = Math.round(savings * 100.0) / 100.0;\n          DecimalFormat f = new DecimalFormat(\"#.00\");\n          ((TextView) findViewById(R.id.Savings)).setText(\"$\" + f.format(savings));\n          resultsTab(view);\n          findViewById(R.id.Results).setEnabled(true);\n\n          // graphView = new LineGraphView(this, \"Electricity Generated\");\n\n          // graphView.setVisibility(View.GONE);\n          graphViewInstantiated = true;\n\n          graphView = new LineGraphView(this, \"Electricity Generated\");\n          graphView.setShowLegend(true);\n          graphView.setLegendAlign(LegendAlign.TOP);\n          graphView.setHorizontalLabels(\n              new String[] {\n                \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n              });\n\n          SetElectricityGraph(savingsJSONObject.getJSONArray(\"DailyGen\"));\n          TableLayout layout = (TableLayout) findViewById(R.id.layout);\n          layout.addView(graphView);\n\n          // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"g\");\n          // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"g\");\n        }\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"h\");\n      }\n    } catch (InvalidInputException e) {\n      // do stuffs\n      e.printStackTrace();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2469, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpHost,HttpGet)"], "initializationStart": [323], "initializationEnd": [354], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 382, "focalAPIEnd": 397, "followUpCheck": "response != null", "checkType": "IF", "followUpCheckExpressionStart": 737, "followUpCheckExpressionEnd": 756, "followUpCheckBlockStart": 737, "followUpCheckBlockEnd": 824, "use": ["httpResponse.getStatusLine()", "httpResponse.getAllHeaders()", "toString(response)"], "useStart": [495, 542, 786], "useEnd": [514, 561, 814], "hasFinally": 1, "cleanUpCall": ["DefaultHttpClient.getConnectionManager()", "shutdown()"], "finallyExpressionStart": 832, "finallyExpressionEnd": 840, "finallyBlockStart": 832, "finallyBlockEnd": 1062, "cleanUpCallStart": [1011, 1011], "cleanUpCallEnd": [1044, 1055], "url": "https://github.com/luigiliquori/myMed/tree/master/frontend/binary/android/myEdu/lib/httpcomponents-client-4.1.2/examples/org/apache/http/examples/client/ClientExecuteDirect.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    DefaultHttpClient httpclient = new DefaultHttpClient();\n    try {\n      HttpHost target = new HttpHost(\"www.apache.org\", 80, \"http\");\n      HttpGet req = new HttpGet(\"/\");\n\n      System.out.println(\"executing request to \" + target);\n\n      HttpResponse rsp = httpclient.execute(target, req);\n      HttpEntity entity = rsp.getEntity();\n\n      System.out.println(\"----------------------------------------\");\n      System.out.println(rsp.getStatusLine());\n      Header[] headers = rsp.getAllHeaders();\n      for (int i = 0; i < headers.length; i++) {\n        System.out.println(headers[i]);\n      }\n      System.out.println(\"----------------------------------------\");\n\n      if (entity != null) {\n        System.out.println(EntityUtils.toString(entity));\n      }\n\n    } finally {\n      // When HttpClient instance is no longer needed,\n      // shut down the connection manager to ensure\n      // immediate deallocation of all system resources\n      httpclient.getConnectionManager().shutdown();\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2470, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpPost)"], "initializationStart": [262], "initializationEnd": [290], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 87, "tryExpressionEnd": 91, "tryBlockStart": 87, "tryBlockEnd": 589, "catchExpressionStart": 390, "catchExpressionEnd": 429, "catchBlockStart": 390, "catchBlockEnd": 463, "exceptionHandlingCallStart": [437], "exceptionHandlingCallEnd": [456], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 322, "focalAPIEnd": 346, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [359], "useEnd": [382], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/filip-jovanovic/chase_game/tree/master/src/edu/elfak/chasegame/HTTPHelper.java", "rawCode": "  public static JSONObject getJSONFromUrl(String url) {\n    // Making HTTP request\n    try {\n      // defaultHttpClient\n      DefaultHttpClient httpClient = new DefaultHttpClient();\n      HttpPost httpPost = new HttpPost(url);\n\n      HttpResponse httpResponse = httpClient.execute(httpPost);\n      HttpEntity httpEntity = httpResponse.getEntity();\n      is = httpEntity.getContent();\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n    } catch (ClientProtocolException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(is, \"iso-8859-1\"), 8);\n      StringBuilder sb = new StringBuilder();\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        sb.append(line + \"\\n\");\n      }\n      is.close();\n      json = sb.toString();\n    } catch (Exception e) {\n      // Log.e(\"Buffer Error\", \"Error converting result \" + e.toString());\n    }\n    // try parse the string to a JSON object\n    try {\n      jObj = new JSONObject(json);\n    } catch (JSONException e) {\n      // Log.e(\"JSON Parser\", \"Error parsing data \" + e.toString());\n    }\n    // return JSON String\n    return jObj;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2471, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["propagate(*)"], "tryExpressionStart": 131, "tryExpressionEnd": 135, "tryBlockStart": 131, "tryBlockEnd": 266, "catchExpressionStart": 196, "catchExpressionEnd": 218, "catchBlockStart": 196, "catchBlockEnd": 266, "exceptionHandlingCallStart": [234], "exceptionHandlingCallEnd": [257], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 165, "focalAPIEnd": 185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["consume(response)"], "useStart": [145], "useEnd": [186], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cloudsoft/brooklyn-marklogic/tree/master/brooklyn-marklogic-api/src/main/java/io/cloudsoft/marklogic/client/Responses.java", "rawCode": "    /** @see org.apache.http.util.EntityUtils#consume(org.apache.http.HttpEntity) */\n    public Response consumeResponse() {\n      try {\n        EntityUtils.consume(response.getEntity());\n      } catch (IOException e) {\n        throw Throwables.propagate(e);\n      }\n      return this;\n    }\n"}, {"dataset": "getEntity", "exampleID": 2472, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpGet)"], "initializationStart": [224], "initializationEnd": [251], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 264, "focalAPIEnd": 284, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [264], "useEnd": [297], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rotinom/CSE-5324/tree/master/MyTutor/src/com/mytutor/search/ImageLoader.java", "rawCode": "  private InputStream fetch(String urlString) throws MalformedURLException, IOException {\n    DefaultHttpClient httpClient = new DefaultHttpClient();\n    HttpGet request = new HttpGet(urlString);\n    HttpResponse response = httpClient.execute(request);\n    return response.getEntity().getContent();\n  }\n"}, {"dataset": "getEntity", "exampleID": 2473, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 108, "focalAPIEnd": 128, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpResponse.getEntity()"], "useStart": [266], "useEnd": [286], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DomoTop/DomoTop/tree/master/Product/Android/tests/src/org/openremote/android/test/console/net/ORConnectionTest.java", "rawCode": "  private void assertHttpBodyLength(HttpResponse response, int bodyLen) {\n    long httpResponseContentLen = response.getEntity().getContentLength();\n\n    assertTrue(\n        \"Expected content length of '\" + bodyLen + \" bytes, got \" + httpResponseContentLen,\n        response.getEntity().getContentLength() == bodyLen);\n  }\n"}, {"dataset": "getEntity", "exampleID": 2474, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(httpResponse==null)", "guardType": "IF {", "guardExpressionStart": 58, "guardExpressionEnd": 75, "guardBlockStart": 58, "guardBlockEnd": 141, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 244, "focalAPIEnd": 260, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [273], "useEnd": [292], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 607, "finallyExpressionEnd": 615, "finallyBlockStart": 607, "finallyBlockEnd": 844, "cleanUpCallStart": [665], "cleanUpCallEnd": [675], "url": "https://github.com/shinobushiva/jagkuma/tree/master/src/aharisu/util/HttpClient.java", "rawCode": "  public byte[] getContentData() throws IOException {\n    if (_res == null) {\n      throw new RuntimeException(\"not setting data yet\");\n    }\n\n    InputStream is = null;\n    ByteArrayOutputStream out = null;\n    try {\n      HttpEntity entity = _res.getEntity();\n      is = entity.getContent();\n\n      out = new ByteArrayOutputStream((int) entity.getContentLength());\n      byte[] line = new byte[1024];\n      int size = 0;\n      while (true) {\n        size = is.read(line);\n        if (size <= 0) {\n          break;\n        }\n        out.write(line, 0, size);\n      }\n\n      return out.toByteArray();\n    } finally {\n      if (is != null) {\n        try {\n          is.close();\n        } catch (Exception e) {\n        }\n      }\n      if (out != null) {\n        try {\n          out.close();\n        } catch (Exception e) {\n        }\n      }\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2475, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 116, "focalAPIEnd": 136, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContentType()", "response.getContentEncoding()", "response.getContent()"], "useStart": [171, 275, 406], "useEnd": [194, 302, 425], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dhara-uom/WPS/tree/master/52n-wps-server/src/main/java/org/n52/wps/server/request/strategy/DefaultReferenceStrategy.java", "rawCode": "  private ReferenceInputStream processResponse(HttpResponse response) throws IOException {\n\n    HttpEntity entity = response.getEntity();\n    Header header;\n\n    header = entity.getContentType();\n    String mimeType = header == null ? null : header.getValue();\n\n    header = entity.getContentEncoding();\n    String encoding = header == null ? null : header.getValue();\n\n    return new ReferenceInputStream(entity.getContent(), mimeType, encoding);\n  }\n"}, {"dataset": "getEntity", "exampleID": 2476, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpPost)"], "initializationStart": [1188], "initializationEnd": [1223], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse!=null", "guardType": "IF {", "guardExpressionStart": 1230, "guardExpressionEnd": 1255, "guardBlockStart": 1230, "guardBlockEnd": 1336, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1273, "focalAPIEnd": 1297, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [1310], "useEnd": [1329], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/photon-infotech/java-webservice-eshop/tree/master/test/functional/src/main/java/com/photon/phresco/Screens/HttpRequest.java", "rawCode": "  /**\n   * Send the JSON data to specified URL and get the httpResponse back\n   *\n   * @param sURL\n   * @param jObject\n   * @return InputStream\n   * @throws IOException\n   */\n  public static InputStream post(String sURL, JSONObject jObject) throws IOException {\n    HttpResponse httpResponse = null;\n    InputStream is = null;\n\n    HttpPost httpPostRequest = new HttpPost(sURL);\n    HttpEntity entity;\n\n    httpPostRequest.setHeader(\"Accept\", \"application/json\");\n    httpPostRequest.setHeader(HTTP.CONTENT_TYPE, \"application/json\");\n    httpPostRequest.setEntity(new ByteArrayEntity(jObject.toString().getBytes(\"UTF-8\")));\n    HttpParams httpParameters = new BasicHttpParams();\n    // Set the timeout in milliseconds until a connection is established.\n    int timeoutConnection = TIME_OUT;\n    HttpConnectionParams.setConnectionTimeout(httpParameters, timeoutConnection);\n    // Set the default socket timeout (SO_TIMEOUT)\n    // in milliseconds which is the timeout for waiting for data.\n    int timeoutSocket = TIME_OUT;\n    HttpConnectionParams.setSoTimeout(httpParameters, timeoutSocket);\n\n    DefaultHttpClient httpClient = new DefaultHttpClient(httpParameters);\n    httpResponse = httpClient.execute(httpPostRequest);\n\n    if (httpResponse != null) {\n      entity = httpResponse.getEntity();\n      is = entity.getContent();\n    }\n    return is;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2477, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpGet)"], "initializationStart": [829], "initializationEnd": [853], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 954, "focalAPIEnd": 974, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)"], "useStart": [933], "useEnd": [975], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nasa/coeci-cms-mpsp/tree/master/pesp-jboss/cms-external-sources/services/src/main/java/gov/medicaid/screening/dao/impl/NursingLicenseDAOBean.java", "rawCode": "  /**\n   * This method performs login to the configured site.\n   *\n   * @return the cookies generated by the login process\n   * @throws URISyntaxException if an error occurs while building the URL.\n   * @throws ClientProtocolException if client does not support protocol used.\n   * @throws IOException if an error occurs while parsing response.\n   * @throws ServiceException for any other problems encountered\n   */\n  private CookieStore loginAsPublicUser()\n      throws URISyntaxException, ClientProtocolException, IOException, ServiceException {\n    DefaultHttpClient client = new DefaultHttpClient(getLaxSSLConnectionManager());\n    client.setRedirectStrategy(new LaxRedirectStrategy());\n\n    String loginSite = getLoginURL();\n    HttpGet getLogin = new HttpGet(new URIBuilder(loginSite).build());\n    HttpResponse response = client.execute(getLogin);\n    verifyAndAuditCall(loginSite, response);\n\n    Document page = Jsoup.parse(EntityUtils.toString(response.getEntity()));\n\n    // select public user\n    HttpPost login = new HttpPost(new URIBuilder(loginSite).build());\n    HttpEntity entity =\n        postForm(\n            loginSite,\n            client,\n            login,\n            new String[][] {\n              {\"__EVENTTARGET\", \"_ctl0_rblUserType_2\"},\n              {\"__EVENTARGUMENT\", \"\"},\n              {\"__VIEWSTATE\", page.select(\"input[name=__VIEWSTATE]\").first().val()}\n            },\n            true);\n\n    page = Jsoup.parse(EntityUtils.toString(entity));\n\n    // enter credentials\n    entity =\n        postForm(\n            loginSite,\n            client,\n            login,\n            new String[][] {\n              {\"__EVENTTARGET\", \"\"},\n              {\"__EVENTARGUMENT\", \"\"},\n              {\"_ctl0:cmdLogin\", \"Log In\"},\n              {\"_ctl0:rblUserType\", \"14\"},\n              {\"_ctl0:txtEMailAddress\", getUsername()},\n              {\"_ctl0:txtPassword\", getPassword()},\n              {\"__VIEWSTATE\", page.select(\"input[name=__VIEWSTATE]\").first().val()}\n            },\n            true);\n\n    page = Jsoup.parse(EntityUtils.toString(entity));\n\n    // check that the user was actually logged in\n    if (page.select(\"a#Banner_hlLogoff\").size() == 0) {\n      throw new ServiceException(ErrorCode.MITA50003.getDesc());\n    }\n    return client.getCookieStore();\n  }\n"}, {"dataset": "getEntity", "exampleID": 2478, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpGet)"], "initializationStart": [989], "initializationEnd": [1008], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [1034], "configurationEnd": [1058], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1133, "focalAPIEnd": 1153, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [1133], "useEnd": [1166], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cloudfoundry-community/cf-java-component/tree/master/cf-spring/src/test/java/cf/spring/CfComponentTest.java", "rawCode": "  @Test\n  public void extraVarz() throws Exception {\n    final SpringApplication application =\n        new SpringApplication(TestConfiguration.class, ExtraVarzConfiguration.class);\n    try (ConfigurableApplicationContext context = application.run()) {\n      final CfComponentConfiguration componentConfiguration =\n          context.getBean(CfComponentConfiguration.class);\n      final ComponentAnnounce natsAnnouncement = getComponentAnnounce(context);\n\n      final BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n      credentialsProvider.setCredentials(\n          AuthScope.ANY,\n          new UsernamePasswordCredentials(\n              componentConfiguration.getUsername(), componentConfiguration.getPassword()));\n      HttpClient client =\n          HttpClientBuilder.create().setDefaultCredentialsProvider(credentialsProvider).build();\n      HttpGet get = new HttpGet(\"http://\" + natsAnnouncement.getHost() + \"/varz\");\n      final HttpResponse response = client.execute(get);\n      assertEquals(200, response.getStatusLine().getStatusCode());\n      final JsonNode node = new ObjectMapper().readTree(response.getEntity().getContent());\n      assertEquals(node.get(\"type\").asText(), \"Test\");\n      assertEquals(node.get(\"test\").asText(), \"value\");\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2479, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpDelete)"], "initializationStart": [528], "initializationEnd": [550], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpResponse.getStatusLine()", "httpResponse.getStatusLine()"], "configurationStart": [573, 641], "configurationEnd": [597, 665], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 689, "focalAPIEnd": 709, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.consumeContent()"], "useStart": [689], "useEnd": [726], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/grkg8tr/BurnBot/tree/master/src/com/nicknackhacks/dailyburn/api/FoodDao.java", "rawCode": "  public void deleteFoodLogEntry(int entryId)\n      throws ClientProtocolException, IOException, OAuthNotAuthorizedException, URISyntaxException,\n          OAuthMessageSignerException, OAuthExpectationFailedException {\n    URI uri =\n        URIUtils.createURI(\n            \"https\",\n            \"dailyburn.com\",\n            -1,\n            \"/api/food_log_entries/\" + String.valueOf(entryId),\n            null,\n            null);\n    HttpDelete delete = new HttpDelete(uri);\n    consumer.sign(delete);\n    HttpResponse response = client.execute(delete);\n    int statusCode = response.getStatusLine().getStatusCode();\n    final String reason = response.getStatusLine().getReasonPhrase();\n    response.getEntity().consumeContent();\n    if (statusCode != 200) {\n      LogHelper.LogE(reason);\n      throw new OAuthNotAuthorizedException();\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2480, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse.getEntity().getContentType()!=null && httpResponse.getEntity()!=null", "guardType": "IF {", "guardExpressionStart": 78, "guardExpressionEnd": 115, "guardBlockStart": 78, "guardBlockEnd": 271, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 82, "focalAPIEnd": 106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContentType()"], "useStart": [130], "useEnd": [171], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SmartBear/soapui/tree/master/soapui/src/main/java/com/eviware/soapui/impl/wsdl/submit/transports/http/HttpMethodSupport.java", "rawCode": "  public String getResponseContentType() {\n    if (hasHttpResponse()) {\n      if (httpResponse.getEntity() != null) {\n        if (httpResponse.getEntity().getContentType() != null) {\n          return httpResponse.getEntity().getContentType().getValue();\n        }\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2481, "initialization": ["HttpResponse httpResponse = AndroidHttpClient.execute(HttpGet)"], "initializationStart": [512], "initializationEnd": [535], "hasTryCatch": 1, "exceptionType": "IllegalArgumentException", "exceptionHandlingCall": ["HttpGet.abort()"], "tryExpressionStart": 474, "tryExpressionEnd": 478, "tryBlockStart": 474, "tryBlockEnd": 1097, "catchExpressionStart": 927, "catchExpressionEnd": 963, "catchBlockStart": 927, "catchBlockEnd": 997, "exceptionHandlingCallStart": [973], "exceptionHandlingCallEnd": [988], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse.getStatusLine().getStatusCode()==200", "guardType": "IF {", "guardExpressionStart": 546, "guardExpressionEnd": 598, "guardBlockStart": 546, "guardBlockEnd": 918, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 631, "focalAPIEnd": 651, "followUpCheck": "response != null", "checkType": "IF", "followUpCheckExpressionStart": 663, "followUpCheckExpressionEnd": 682, "followUpCheckBlockStart": 663, "followUpCheckBlockEnd": 908, "use": ["response.getContent()"], "useStart": [719], "useEnd": [738], "hasFinally": 1, "cleanUpCall": ["AndroidHttpClient.close()"], "finallyExpressionStart": 1056, "finallyExpressionEnd": 1064, "finallyBlockStart": 1056, "finallyBlockEnd": 1097, "cleanUpCallStart": [1074], "cleanUpCallEnd": [1088], "url": "https://github.com/faux123/android_packages_apps_Browser/tree/master/src/com/android/browser/DownloadTouchIcon.java", "rawCode": "  @Override\n  public Void doInBackground(String... values) {\n    mCursor =\n        BrowserBookmarksAdapter.queryBookmarksForUrl(mContentResolver, mOriginalUrl, mUrl, true);\n    if (mCursor != null && mCursor.getCount() > 0) {\n      String url = values[0];\n\n      AndroidHttpClient client = AndroidHttpClient.newInstance(mUserAgent);\n      HttpGet request = new HttpGet(url);\n\n      // Follow redirects\n      HttpClientParams.setRedirecting(client.getParams(), true);\n\n      try {\n        HttpResponse response = client.execute(request);\n\n        if (response.getStatusLine().getStatusCode() == 200) {\n          HttpEntity entity = response.getEntity();\n          if (entity != null) {\n            InputStream content = entity.getContent();\n            if (content != null) {\n              Bitmap icon = BitmapFactory.decodeStream(content, null, null);\n              storeIcon(icon);\n            }\n          }\n        }\n      } catch (IllegalArgumentException ex) {\n        request.abort();\n      } catch (IOException ex) {\n        request.abort();\n      } finally {\n        client.close();\n      }\n    }\n    if (mCursor != null) {\n      mCursor.close();\n    }\n    return null;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2482, "initialization": ["HttpResponse httpResponse = getClient()"], "initializationStart": [414], "initializationEnd": [425], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new ApplicationRunTimeException(*)"], "tryExpressionStart": 241, "tryExpressionEnd": 245, "tryBlockStart": 241, "tryBlockEnd": 975, "catchExpressionStart": 691, "catchExpressionEnd": 713, "catchBlockStart": 691, "catchBlockEnd": 768, "exceptionHandlingCallStart": [727], "exceptionHandlingCallEnd": [761], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 511, "focalAPIEnd": 531, "followUpCheck": "Objects.nonNull(response)", "checkType": "IF", "followUpCheckExpressionStart": 799, "followUpCheckExpressionEnd": 835, "followUpCheckBlockStart": 799, "followUpCheckBlockEnd": 881, "use": ["readValue(response,*)", "response.close()"], "useStart": [581, 848], "useEnd": [628, 870], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 769, "finallyExpressionEnd": 777, "finallyBlockStart": 769, "finallyBlockEnd": 975, "cleanUpCallStart": [848], "cleanUpCallEnd": [870], "url": "https://github.com/AntStudio/moon/tree/master/src/main/java/org/moon/support/ip/IPQueryer.java", "rawCode": "  /**\n   * 获取ip地址的归属地,返回格式为：\n   *\n   * <p><code>{country:国家,area:西南地区,region:省,city:市,isp:服务商,如电信}</code>\n   *\n   * @param ip\n   * @return\n   */\n  public Map<String, String> getAddress(String ip) {\n    InputStream responseStream = null;\n    try {\n      String ipUrl = String.format(taobaoIPURL, ip);\n      client = HttpClients.createDefault();\n      HttpGet get = new HttpGet(ipUrl);\n      HttpResponse response = getClient().execute(get);\n      ObjectMapper mapper = new ObjectMapper();\n      responseStream = response.getEntity().getContent();\n      Map<String, Object> result = mapper.readValue(responseStream, HashMap.class);\n      return (Map<String, String>) result.get(\"data\");\n    } catch (IOException e) {\n      throw new ApplicationRunTimeException(e);\n    } finally {\n      try {\n        if (Objects.nonNull(responseStream)) {\n          responseStream.close();\n        }\n      } catch (Exception e) {\n        throw new ApplicationRunTimeException(e);\n      }\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2483, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 208, "focalAPIEnd": 228, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["List<InputStream>.add(response)"], "useStart": [247], "useEnd": [273], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ieb/sparsemapcontent/tree/master/extensions/proxy/src/main/java/uk/co/tfd/sm/proxy/ProxyResponseImpl.java", "rawCode": "  /**\n   * {@inheritDoc}\n   *\n   * @see uk.co.tfd.sm.api.proxy.ProxyResponse#getResponseBodyAsInputStream()\n   */\n  public InputStream getResponseBodyAsInputStream() throws IOException {\n    InputStream in = response.getEntity().getContent();\n    leakedInputStreams.add(in);\n    return in;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2484, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpGet)"], "initializationStart": [277], "initializationEnd": [304], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["onError(*)"], "tryExpressionStart": 241, "tryExpressionEnd": 245, "tryBlockStart": 241, "tryBlockEnd": 613, "catchExpressionStart": 541, "catchExpressionEnd": 563, "catchBlockStart": 541, "catchBlockEnd": 613, "exceptionHandlingCallStart": [571], "exceptionHandlingCallEnd": [606], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse.getStatusLine().getStatusCode()==200", "guardType": "IF {", "guardExpressionStart": 312, "guardExpressionEnd": 364, "guardBlockStart": 312, "guardBlockEnd": 534, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 396, "focalAPIEnd": 416, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ConnectionInterface.onResponse(response)"], "useStart": [439], "useEnd": [466], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIT-Mobile/MIT-Mobile-for-Android/tree/master/src/edu/mit/mitmobile2/ConnectionWrapper.java", "rawCode": "  private static void synchronous(final String url, final ConnectionInterface callback) {\n    HttpClient httpClient = new DefaultHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    httpGet.setHeader(\"User-Agent\", HTTP_USER_AGENT);\n    try {\n      HttpResponse response = httpClient.execute(httpGet);\n      if (response.getStatusLine().getStatusCode() == 200) {\n        InputStream stream = response.getEntity().getContent();\n        callback.onResponse(stream);\n      } else {\n        callback.onError(ErrorType.Server);\n      }\n    } catch (IOException e) {\n      callback.onError(ErrorType.Network);\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2485, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpDelete)"], "initializationStart": [364], "initializationEnd": [386], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 454, "focalAPIEnd": 474, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [454], "useEnd": [487], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/slok/mdissphoto/tree/master/mdiss-api/src/test/java/org/mdissjava/api/AlbumsTest.java", "rawCode": "  @Test\n  public void HttpDeleteAlbumTest() throws ClientProtocolException, IOException {\n\n    String url =\n        \"http://127.0.0.1:8080/mdissapi/api/1.0/albums/51758be8-2d48-4567-8660-740173633da8/\";\n\n    HttpDelete delete = ApiHelper.assembleHttpDelete(this.user, this.secret, url);\n    HttpClient client = new DefaultHttpClient();\n    HttpResponse response = client.execute(delete);\n\n    String message =\n        ApiHelper.inputStreamToOutputStream(response.getEntity().getContent()).toString();\n\n    System.out.println(message);\n  }\n"}, {"dataset": "getEntity", "exampleID": 2486, "initialization": ["HttpResponse httpResponse = AndroidHttpClient.execute(HttpGet)"], "initializationStart": [325], "initializationEnd": [352], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["w(String,String,*)"], "tryExpressionStart": 248, "tryExpressionEnd": 252, "tryBlockStart": 248, "tryBlockEnd": 651, "catchExpressionStart": 573, "catchExpressionEnd": 595, "catchBlockStart": 573, "catchBlockEnd": 651, "exceptionHandlingCallStart": [603], "exceptionHandlingCallEnd": [625], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse.getStatusLine().getStatusCode()==200", "guardType": "IF {", "guardExpressionStart": 360, "guardExpressionEnd": 412, "guardBlockStart": 360, "guardBlockEnd": 566, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 451, "focalAPIEnd": 471, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)"], "useStart": [430], "useEnd": [472], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OMFGB/packages_apps_Browser/tree/master/src/com/android/browser/search/OpenSearchSearchEngine.java", "rawCode": "  /**\n   * Executes a GET request and returns the response content.\n   *\n   * @param url Request URI.\n   * @return The response content. This is the empty string if the response contained no content.\n   */\n  public String readUrl(String url) {\n    try {\n      HttpGet method = new HttpGet(url);\n      HttpResponse response = mHttpClient.execute(method);\n      if (response.getStatusLine().getStatusCode() == 200) {\n        return EntityUtils.toString(response.getEntity());\n      } else {\n        Log.i(TAG, \"Suggestion request failed\");\n        return null;\n      }\n    } catch (IOException e) {\n      Log.w(TAG, \"Error\", e);\n      return null;\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2487, "initialization": ["HttpResponse httpResponse = getOrDelete(HttpGet,*,boolean)"], "initializationStart": [339], "initializationEnd": [379], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [394], "configurationEnd": [418], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 467, "focalAPIEnd": 487, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["consumeQuietly(response)", "httpResponse.getStatusLine()", "readString(httpResponse)", "httpResponse.getStatusLine()", "httpResponse.getEntity()", "consumeQuietly(response)"], "useStart": [440, 816, 884, 1286, 1359, 1332], "useEnd": [488, 840, 904, 1310, 1379, 1380], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fcrepo/fcrepo/tree/master/fcrepo-integrationtest/fcrepo-integrationtest-core/src/main/java/org/fcrepo/test/api/TestRESTAPI.java", "rawCode": "  @Test\n  public void testListMethodsForSDep() throws Exception {\n    URI url =\n        getURI(String.format(\"/objects/%s/methods/fedora-system:3\", DEMO_REST_PID.toString()));\n    verifyNoAuthFailOnAPIAAuth(url);\n    HttpGet get = new HttpGet(url);\n    HttpResponse response;\n    int status = 0;\n    get = new HttpGet(url);\n    response = getOrDelete(get, getAuthAccess(), false);\n    status = response.getStatusLine().getStatusCode();\n    EntityUtils.consumeQuietly(response.getEntity());\n    assertEquals(SC_OK, status);\n\n    url =\n        getURI(\n            String.format(\n                \"/objects/%s/methods/fedora-system:3?format=xml\", DEMO_REST_PID.toString()));\n    verifyNoAuthFailOnAPIAAuth(url);\n    get = new HttpGet(url);\n    response = getOrDelete(get, getAuthAccess(), true);\n    assertEquals(SC_OK, response.getStatusLine().getStatusCode());\n    String responseXML = readString(response);\n    assertTrue(responseXML.contains(\"sDef=\\\"fedora-system:3\\\"\"));\n\n    url =\n        getURI(\n            String.format(\n                \"/objects/%s/methods/fedora-system:3?asOfDateTime=%s\",\n                DEMO_REST_PID.toString(), datetime));\n    verifyNoAuthFailOnAPIAAuth(url);\n    get = new HttpGet(url);\n    response = getOrDelete(get, getAuthAccess(), false);\n    status = response.getStatusLine().getStatusCode();\n    EntityUtils.consumeQuietly(response.getEntity());\n    assertEquals(SC_OK, status);\n  }\n"}, {"dataset": "getEntity", "exampleID": 2488, "initialization": ["HttpResponse httpResponse = execute(*)"], "initializationStart": [276], "initializationEnd": [327], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 240, "tryExpressionEnd": 244, "tryBlockStart": 240, "tryBlockEnd": 890, "catchExpressionStart": 765, "catchExpressionEnd": 799, "catchBlockStart": 765, "catchBlockEnd": 833, "exceptionHandlingCallStart": [807], "exceptionHandlingCallEnd": [826], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 490, "focalAPIEnd": 510, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)"], "useStart": [469], "useEnd": [511], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Xormis/grikly-java/tree/master/grikly/src/main/java/com/grikly/request/HttpContactRequest.java", "rawCode": "  /**\n   * Executes HTTP Get Request to Grikly Server.\n   *\n   * @author Mario Dennis\n   * @return ArrayList<Card>\n   */\n  public ArrayList<Connection> execute() throws GriklyException {\n    HttpClient client = new DefaultHttpClient();\n    try {\n      HttpResponse response = client.execute(prepareRequestMethod(new HttpGet()));\n      int statusCode = response.getStatusLine().getStatusCode();\n      if (statusCode >= 200 && statusCode < 300) {\n        String entity = EntityUtils.toString(response.getEntity());\n        ArrayList<Connection> arrayList =\n            new Gson().fromJson(entity, new TypeToken<ArrayList<Connection>>() {}.getType());\n        return arrayList;\n      } else throw new GriklyException(EntityUtils.toString(response.getEntity()));\n    } catch (ClientProtocolException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return null;\n  } // end execute method\n"}, {"dataset": "getEntity", "exampleID": 2489, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 641, "focalAPIEnd": 660, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response,*)", "assertHttpStatusOfMethod(String,httpResponse)"], "useStart": [621, 682], "useEnd": [673, 719], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/escidoc/escidoc-core/tree/master/integration-tests/src/test/java/de/escidoc/core/test/sm/PreprocessingTestBase.java", "rawCode": "  /**\n   * Test preprocessing raw statistic data.\n   *\n   * @param dataXml The preprocessing-information xml.\n   * @param aggregationDefinitionId The id of the aggregationDefinition to preprocess.\n   * @return The created item.\n   * @throws Exception If anything fails.\n   */\n  public String preprocess(final String aggregationDefinitionId, final String dataXml)\n      throws Exception {\n\n    Object result = getPreprocessingClient().preprocess(aggregationDefinitionId, dataXml);\n    String xmlResult = null;\n    if (result instanceof HttpResponse) {\n      HttpResponse httpRes = (HttpResponse) result;\n      xmlResult = EntityUtil.toString(httpRes.getEntity(), HTTP.UTF_8);\n\n      assertHttpStatusOfMethod(\"\", httpRes);\n\n    } else if (result instanceof String) {\n      xmlResult = (String) result;\n    }\n    return xmlResult;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2490, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpGet,HttpContext)"], "initializationStart": [618], "initializationEnd": [658], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getLocalizedMessage()", "e(String,String,*)"], "tryExpressionStart": 582, "tryExpressionEnd": 586, "tryBlockStart": 582, "tryBlockEnd": 879, "catchExpressionStart": 767, "catchExpressionEnd": 789, "catchBlockStart": 767, "catchBlockEnd": 879, "exceptionHandlingCallStart": [831, 797], "exceptionHandlingCallEnd": [854, 858], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 686, "focalAPIEnd": 706, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)"], "useStart": [731], "useEnd": [759], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/michaelgobbers/QuantifyThis/tree/master/QuantifyThisAndroid/src/be/mume/quantifythis/helpers/EnterMoodAsync.java", "rawCode": "  /** get the weather from the yahoo api */\n  private void getWeather() {\n    int woeid = getWoeid();\n    if (woeid == 0) {\n      return; // commit without weather info\n    }\n\n    HttpClient httpClient = new DefaultHttpClient();\n    HttpContext httpContext = new BasicHttpContext();\n\n    String requestString =\n        \"http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%3D\"\n            + woeid\n            + \"%20and%20u%3D'c'&format=json&callback=\";\n    HttpGet httpGet = new HttpGet(requestString);\n    String responseString = \"\";\n    try {\n      HttpResponse response = httpClient.execute(httpGet, httpContext);\n      HttpEntity entity = response.getEntity();\n      responseString = EntityUtils.toString(entity);\n    } catch (IOException e) {\n      Log.e(\"QuantifyThis\", \"error: \" + e.getLocalizedMessage(), e);\n      return;\n    }\n\n    try {\n      JSONObject json = new JSONObject(responseString);\n      JSONObject resultSet = json.getJSONObject(\"query\");\n      JSONObject results = resultSet.getJSONObject(\"results\");\n      JSONObject channel = results.getJSONObject(\"channel\");\n      JSONObject item = channel.getJSONObject(\"item\");\n      JSONObject condition = item.getJSONObject(\"condition\");\n      int temperature = condition.getInt(\"temp\");\n      Log.i(\"QuantifyThis\", \"Temperature: \" + temperature);\n      model.setTemperature(temperature);\n    } catch (JSONException e) {\n      Log.e(\"QuantifyThis\", \"error: \" + e.getLocalizedMessage());\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2491, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpPost)"], "initializationStart": [1120], "initializationEnd": [1155], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse!=null", "guardType": "IF {", "guardExpressionStart": 1162, "guardExpressionEnd": 1187, "guardBlockStart": 1162, "guardBlockEnd": 1268, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1205, "focalAPIEnd": 1229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [1242], "useEnd": [1261], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/photon-infotech/android-native-shoppingcart/tree/master/source/src/com/photon/phresco/nativeapp/eshop/net/HttpRequest.java", "rawCode": "  public static InputStream httppost(String sURL, JSONObject jObject) throws IOException {\n    HttpResponse httpResponse = null;\n    InputStream is = null;\n\n    PhrescoLogger.info(TAG + \" post: \" + sURL);\n    PhrescoLogger.info(TAG + \" jObject: \" + jObject);\n\n    HttpPost httpPostRequest = new HttpPost(sURL);\n    HttpEntity entity;\n\n    httpPostRequest.setHeader(\"Accept\", \"application/json\");\n    httpPostRequest.setHeader(HTTP.CONTENT_TYPE, \"application/json\");\n    httpPostRequest.setEntity(new ByteArrayEntity(jObject.toString().getBytes(\"UTF-8\")));\n    HttpParams httpParameters = new BasicHttpParams();\n    // Set the timeout in milliseconds until a connection is established.\n    int timeoutConnection = TIME_OUT;\n    HttpConnectionParams.setConnectionTimeout(httpParameters, timeoutConnection);\n    // Set the default socket timeout (SO_TIMEOUT)\n    // in milliseconds which is the timeout for waiting for data.\n    int timeoutSocket = TIME_OUT;\n    HttpConnectionParams.setSoTimeout(httpParameters, timeoutSocket);\n\n    DefaultHttpClient httpClient = new DefaultHttpClient(httpParameters);\n    httpResponse = httpClient.execute(httpPostRequest);\n\n    if (httpResponse != null) {\n      entity = httpResponse.getEntity();\n      is = entity.getContent();\n    }\n    return is;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2492, "initialization": ["HttpResponse httpResponse = sendMetric(List<NameValuePair>)"], "initializationStart": [1065], "initializationEnd": [1088], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 1042, "tryExpressionEnd": 1046, "tryBlockStart": 1042, "tryBlockEnd": 1577, "catchExpressionStart": 1370, "catchExpressionEnd": 1404, "catchBlockStart": 1370, "catchBlockEnd": 1479, "exceptionHandlingCallStart": [1453], "exceptionHandlingCallEnd": [1472], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [1152], "configurationEnd": [1176], "guardCondition": "httpResponse.getStatusLine().getStatusCode()!=202", "guardType": "IF {", "guardExpressionStart": 1148, "guardExpressionEnd": 1200, "guardBlockStart": 1148, "guardBlockEnd": 1314, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1284, "focalAPIEnd": 1304, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["consume(response)", "httpResponse.getEntity()", "consume(response)"], "useStart": [1264, 1341, 1321], "useEnd": [1305, 1361, 1362], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/araujodavid/mydbaas-monitor/tree/master/mydbaasmonitor-agent/src/main/java/br/com/arida/ufc/mydbaasmonitor/agent/collector/machine/MachineCollector.java", "rawCode": "  @Override\n  public void run() {\n    Sigar sigar = new Sigar();\n    // Collecting metrics\n    try {\n      this.loadMetric(new Object[] {sigar});\n    } catch (SigarException e2) {\n      System.out.println(\"Problem loading the System metric values (Sigar)\");\n      e2.printStackTrace();\n    }\n\n    // Setting the parameters of the POST request\n    List<NameValuePair> params = null;\n    try {\n      params = this.loadRequestParams(new Date(), 0, 0);\n    } catch (IllegalAccessException e1) {\n      // TODO Auto-generated catch block\n      e1.printStackTrace();\n    } catch (IllegalArgumentException e1) {\n      // TODO Auto-generated catch block\n      e1.printStackTrace();\n    } catch (InvocationTargetException e1) {\n      // TODO Auto-generated catch block\n      e1.printStackTrace();\n    } catch (NoSuchMethodException e1) {\n      // TODO Auto-generated catch block\n      e1.printStackTrace();\n    } catch (SecurityException e1) {\n      // TODO Auto-generated catch block\n      e1.printStackTrace();\n    }\n\n    HttpResponse response;\n\n    try {\n      response = this.sendMetric(params);\n      System.out.println(response.getStatusLine());\n      if (response.getStatusLine().getStatusCode() != 202) {\n        System.out.println(\"System request error!\");\n        EntityUtils.consume(response.getEntity());\n      }\n      EntityUtils.consume(response.getEntity());\n    } catch (ClientProtocolException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (IOException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    // Release any native resources associated with this sigar instance\n    sigar.close();\n  }\n"}, {"dataset": "getEntity", "exampleID": 2493, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 548, "focalAPIEnd": 566, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response,*)", "assertHttpStatusOfMethod(String,httpResponse)"], "useStart": [527, 587], "useEnd": [579, 623], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/crh/escidoc-core-1.4/tree/master/integration-tests/src/test/java/de/escidoc/core/test/aa/UserGroupTestBase.java", "rawCode": "  /**\n   * Test activating an UserGroup.\n   *\n   * @param id The id of the UserGroup.\n   * @param taskParamXml The task parameter in an XML structure.\n   * @return userGroup-XML\n   * @throws Exception If anything fails.\n   */\n  protected String activate(final String id, final String taskParamXml) throws Exception {\n\n    Object result = getUserGroupClient().activate(id, taskParamXml);\n    String xmlResult = null;\n    if (result instanceof HttpResponse) {\n      HttpResponse method = (HttpResponse) result;\n      xmlResult = EntityUtils.toString(method.getEntity(), HTTP.UTF_8);\n      assertHttpStatusOfMethod(\"\", method);\n      if (xmlResult.equals(\"\")) {\n        xmlResult = null;\n      }\n\n    } else if (result instanceof String) {\n      xmlResult = (String) result;\n    }\n    return xmlResult;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2494, "initialization": ["HttpResponse httpResponse = execute(HttpGet)"], "initializationStart": [225], "initializationEnd": [248], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 293, "focalAPIEnd": 313, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)", "httpResponse.getStatusLine()"], "useStart": [272, 331], "useEnd": [314, 355], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ImmobilienScout24/yum-repo-server/tree/master/src/test/java/de/is24/infrastructure/gridfs/http/web/controller/StaticRepositoryInfoControllerIT.java", "rawCode": "  @Test\n  public void shouldNotFindReposForQueryStaticByMatchingNewerAndOlderDate() throws IOException {\n    HttpGet get = new HttpGet(deploymentURL + \"/repo.txt?\" + \"newer=\" + 5 + \"&older=\" + 1);\n    HttpResponse response = httpClient.execute(get);\n\n    String content = EntityUtils.toString(response.getEntity());\n    assertThat(response.getStatusLine().getStatusCode(), is(HttpServletResponse.SC_OK));\n    assertThat(content, not(containsString(givenReponame)));\n  }\n"}, {"dataset": "getEntity", "exampleID": 2495, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpPost)"], "initializationStart": [774], "initializationEnd": [798], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(httpResponse.getStatusLine().getStatusCode()!=HttpStatus.SC_OK)", "guardType": "IF {", "guardExpressionStart": 804, "guardExpressionEnd": 865, "guardBlockStart": 804, "guardBlockEnd": 938, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 983, "focalAPIEnd": 999, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toString(response)"], "useStart": [962], "useEnd": [1000], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/masconsult/bgBanking/tree/master/bgBanking/src/eu/masconsult/bgbanking/banks/fibank/ebanking/EFIBankClient.java", "rawCode": "  private void obtainSession(DefaultHttpClient httpClient, AuthToken authToken)\n      throws IOException, AuthenticationException {\n    HttpEntity entity;\n    try {\n      entity =\n          new StringEntity(\n              \"<?xml version=\\\"1.0\\\"?><LOGIN><USER_NAME>\"\n                  + authToken.username\n                  + \"</USER_NAME><USER_PASS>\"\n                  + authToken.password\n                  + \"</USER_PASS><USER_LANG>BG</USER_LANG><PATH>Login</PATH></LOGIN>\",\n              \"utf-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n    HttpPost post = new HttpPost(LOGIN_URL);\n    post.addHeader(\"Content-Type\", \"text/xml\");\n    post.setHeader(\"Accept\", \"*/*\");\n    post.setEntity(entity);\n\n    HttpResponse resp = httpClient.execute(post);\n    if (resp.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n      throw new AuthenticationException(\"Invalid credentials!\");\n    }\n\n    String response = EntityUtils.toString(resp.getEntity());\n\n    Log.v(TAG, \"response = \" + response);\n\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n    DocumentBuilder db;\n    try {\n      db = dbf.newDocumentBuilder();\n    } catch (ParserConfigurationException e) {\n      throw new ParseException(e.getMessage());\n    }\n\n    InputSource is = new InputSource();\n    is.setCharacterStream(new StringReader(response));\n\n    Document doc;\n    try {\n      doc = db.parse(is);\n    } catch (SAXException e) {\n      throw new ParseException(e.getMessage());\n    }\n\n    NodeList session = doc.getElementsByTagName(\"SESSION\");\n    if (session == null || session.getLength() != 1) {\n      throw new ParseException(\"can't find SESSION \");\n    }\n\n    NamedNodeMap attributes = session.item(0).getAttributes();\n    authToken.sessionId = attributes.getNamedItem(\"id\").getTextContent();\n  }\n"}, {"dataset": "getEntity", "exampleID": 2496, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpGet)"], "initializationStart": [213], "initializationEnd": [240], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpResponse.getStatusLine().getStatusCode()==HttpStatus.SC_OK", "guardType": "IF {", "guardExpressionStart": 248, "guardExpressionEnd": 317, "guardBlockStart": 248, "guardBlockEnd": 465, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 337, "focalAPIEnd": 361, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OSAStudio/newshub/tree/master/src/com/osastudio/newshub/net/NewsBaseApi.java", "rawCode": "  public static long getFileLength(String url) {\n    long length = -1;\n    try {\n      HttpClient httpClient = new DefaultHttpClient();\n      HttpGet httpGet = new HttpGet(url);\n\n      HttpResponse httpResponse = httpClient.execute(httpGet);\n      if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n        length = httpResponse.getEntity().getContentLength();\n        Utils.log(TAG, \"getFileLength() URL=\" + url + \" length=\" + length);\n      }\n    } catch (ClientProtocolException e) {\n      // e.printStackTrace();\n    } catch (IllegalArgumentException e) {\n      // e.printStackTrace();\n    } catch (IllegalStateException e) {\n      // e.printStackTrace();\n    } catch (IOException e) {\n      // e.printStackTrace();\n    }\n    return length;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2497, "initialization": ["HttpResponse httpResponse = HttpClient.execute(HttpGet)"], "initializationStart": [499], "initializationEnd": [522], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 475, "tryExpressionEnd": 479, "tryBlockStart": 475, "tryBlockEnd": 1623, "catchExpressionStart": 1498, "catchExpressionEnd": 1532, "catchBlockStart": 1498, "catchBlockEnd": 1566, "exceptionHandlingCallStart": [1161], "exceptionHandlingCallEnd": [1180], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 603, "focalAPIEnd": 623, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [603], "useEnd": [636], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/VersusProject/versus-service/tree/master/src/main/java/edu/illinois/ncsa/versus/rest/ComparisonResource1.java", "rawCode": "  @SuppressWarnings(\"unused\")\n  private Map<String, Object> queryGetSlaves(\n      String id, String requestUrl, @Context ServletContext context) {\n\n    HttpClient client = new DefaultHttpClient();\n\n    String reqUrl = requestUrl + \"/\" + id + \"/value\";\n\n    log.debug(\"queryGETSlaves Url: \" + reqUrl);\n\n    // HashIdSlave list= (HashIdSlave)\n    // context.getAttribute(HashIdSlave.class.getName());\n\n    HttpGet httpGet = new HttpGet(reqUrl);\n\n    HttpResponse response;\n    try {\n\n      response = client.execute(httpGet);\n\n      BufferedReader br =\n          new BufferedReader(new InputStreamReader((response.getEntity().getContent())));\n\n      String output, output1 = null;\n      System.out.println(\"Response from Slave Server ....GET: \\n\");\n\n      while ((output = br.readLine()) != null) {\n        output1 = output;\n        log.debug(output);\n      }\n\n      ObjectMapper mapper = new ObjectMapper();\n      Map<String, Object> json = new HashMap<String, Object>();\n\n      try {\n        json = mapper.readValue(output1, new TypeReference<Map<String, Object>>() {});\n      } catch (JsonParseException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      } catch (JsonMappingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      }\n\n      return json;\n\n      // System.out.println(response.getEntity().getContent());\n    } catch (ClientProtocolException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    return null;\n  }\n"}, {"dataset": "getEntity", "exampleID": 2498, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpGet)"], "initializationStart": [706], "initializationEnd": [747], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 854, "focalAPIEnd": 874, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()", "httpResponse.getEntity()", "response.getContent()", "httpResponse.getEntity()", "response.getContent()"], "useStart": [854, 1263, 1263, 1922, 1922], "useEnd": [887, 1283, 1296, 1942, 1955], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/easysoa/EasySOA/tree/master/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-tests/src/test/java/org/easysoa/tests/ScenarioTest.java", "rawCode": "  /**\n   * Send twitter REST requests\n   *\n   * @throws Exception If a problem occurs\n   */\n  private void sendTwitterRestRequests() throws Exception {\n\n    DefaultHttpClient httpProxyClient = new DefaultHttpClient();\n\n    // Set client to use the HTTP Discovery Proxy\n    HttpHost proxy = new HttpHost(\"localhost\", EasySOAConstants.HTTP_DISCOVERY_PROXY_PORT);\n    httpProxyClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);\n\n    // Send first request - GET request with only path parameters\n    HttpResponse response;\n    HttpGet lastTweetRequest =\n        new HttpGet(\n            \"http://localhost:\" + EasySOAConstants.TWITTER_MOCK_PORT + \"/1/tweets/lastTweet/toto\");\n    response = httpProxyClient.execute(lastTweetRequest);\n    // Need to read the response body entirely to be able to send another request\n    ContentReader.read(response.getEntity().getContent());\n\n    // Send second request - GET request with path parameters and query parameters\n    HttpGet severalTweetRequest =\n        new HttpGet(\n            \"http://localhost:\"\n                + EasySOAConstants.TWITTER_MOCK_PORT\n                + \"/1/tweets/severalTweets/toto?tweetNumber=5\");\n    response = httpProxyClient.execute(severalTweetRequest);\n    ContentReader.read(response.getEntity().getContent());\n\n    // Send third request - POST request with form parameters\n    HttpPost postTweetRequest =\n        new HttpPost(\n            \"http://localhost:\" + EasySOAConstants.TWITTER_MOCK_PORT + \"/1/tweets/postNewTweet\");\n    List<NameValuePair> formparams = new ArrayList<NameValuePair>();\n    formparams.add(new BasicNameValuePair(\"user\", \"toto\"));\n    formparams.add(new BasicNameValuePair(\"tweet\", \"This is a tweet test\"));\n    UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\n    postTweetRequest.setEntity(entity);\n    response = httpProxyClient.execute(postTweetRequest);\n    ContentReader.read(response.getEntity().getContent());\n  }\n"}, {"dataset": "getEntity", "exampleID": 2499, "initialization": ["HttpResponse httpResponse = HttpStack.performRequest(Request<?>,Map<String, String>)"], "initializationStart": [510], "initializationEnd": [553], "hasTryCatch": 1, "exceptionType": "SocketTimeoutException", "exceptionHandlingCall": ["new TimeoutError()", "attemptRetryOnException(String,Request<?>,*)"], "tryExpressionStart": 326, "tryExpressionEnd": 330, "tryBlockStart": 326, "tryBlockEnd": 2837, "catchExpressionStart": 1544, "catchExpressionEnd": 1577, "catchBlockStart": 1544, "catchBlockEnd": 1658, "exceptionHandlingCallStart": [1630, 1587], "exceptionHandlingCallEnd": [1648, 1649], "configuration": ["httpResponse.getStatusLine()", "httpResponse.getAllHeaders()"], "configurationStart": [587, 712], "configurationEnd": [615, 740], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 1021, "focalAPIEnd": 1045, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["entityToBytes(response)", "httpResponse.getStatusLine()"], "useStart": [1007, 2050], "useEnd": [1046, 2078], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Vinayrraj/CustomVolley/tree/master/src/com/android/volley/toolbox/BasicNetwork.java", "rawCode": "  @Override\n  public NetworkResponse performRequest(Request<?> request) throws VolleyError {\n    long requestStart = SystemClock.elapsedRealtime();\n    while (true) {\n      HttpResponse httpResponse = null;\n      byte[] responseContents = null;\n      Map<String, String> responseHeaders = new HashMap<String, String>();\n      try {\n        // Gather headers.\n        Map<String, String> headers = new HashMap<String, String>();\n        addCacheHeaders(headers, request.getCacheEntry());\n        httpResponse = mHttpStack.performRequest(request, headers);\n        StatusLine statusLine = httpResponse.getStatusLine();\n        int statusCode = statusLine.getStatusCode();\n\n        responseHeaders = convertHeaders(httpResponse.getAllHeaders());\n        // Handle cache validation.\n        if (statusCode == HttpStatus.SC_NOT_MODIFIED) {\n          return new NetworkResponse(\n              HttpStatus.SC_NOT_MODIFIED, request.getCacheEntry().data, responseHeaders, true);\n        }\n\n        responseContents = entityToBytes(httpResponse.getEntity());\n        // if the request is slow, log it.\n        long requestLifetime = SystemClock.elapsedRealtime() - requestStart;\n        logSlowRequests(requestLifetime, request, responseContents, statusLine);\n\n        // Status code from 200 to 207 are successful requests\n        if (statusCode < HttpStatus.SC_OK || statusCode > HttpStatus.SC_MULTI_STATUS) {\n          throw new IOException();\n        }\n        return new NetworkResponse(statusCode, responseContents, responseHeaders, false);\n      } catch (SocketTimeoutException e) {\n        attemptRetryOnException(\"socket\", request, new TimeoutError());\n      } catch (ConnectTimeoutException e) {\n        attemptRetryOnException(\"connection\", request, new TimeoutError());\n      } catch (MalformedURLException e) {\n        throw new RuntimeException(\"Bad URL \" + request.getUrl(), e);\n      } catch (IOException e) {\n        int statusCode = 0;\n        NetworkResponse networkResponse = null;\n        if (httpResponse != null) {\n          statusCode = httpResponse.getStatusLine().getStatusCode();\n        } else {\n          throw new NoConnectionError(e);\n        }\n        VolleyLog.e(\"Unexpected response code %d for %s\", statusCode, request.getUrl());\n        if (responseContents != null) {\n          networkResponse =\n              new NetworkResponse(statusCode, responseContents, responseHeaders, false);\n          if (statusCode == HttpStatus.SC_UNAUTHORIZED || statusCode == HttpStatus.SC_FORBIDDEN) {\n            attemptRetryOnException(\"auth\", request, new AuthFailureError(networkResponse));\n          } else {\n            // TODO: Only throw ServerError for 5xx status codes.\n            throw new ServerError(networkResponse);\n          }\n        } else {\n          throw new NetworkError(networkResponse);\n        }\n      }\n    }\n  }\n"}, {"dataset": "getEntity", "exampleID": 2500, "initialization": ["HttpResponse httpResponse = DefaultHttpClient.execute(HttpPost)"], "initializationStart": [480], "initializationEnd": [504], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["toString()", "e(String,String)"], "tryExpressionStart": 242, "tryExpressionEnd": 246, "tryBlockStart": 242, "tryBlockEnd": 1475, "catchExpressionStart": 1362, "catchExpressionEnd": 1382, "catchBlockStart": 1362, "catchBlockEnd": 1475, "exceptionHandlingCallStart": [1455, 1390], "exceptionHandlingCallEnd": [1467, 1468], "configuration": ["httpResponse.getStatusLine()"], "configurationStart": [536], "configurationEnd": [560], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "response = httpResponse.getEntity()", "focalAPIStart": 661, "focalAPIEnd": 681, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["response.getContent()"], "useStart": [705], "useEnd": [724], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mauriciojovel/clasificados/tree/master/GuanaAnuncios/src/com/udb/mad/shinmen/benja/guana/anuncios/servicios/PublicarAnuncioService.java", "rawCode": "  private JSONObject postRequest(String url, List<NameValuePair> parametrosLista) {\n    HttpResponse response = null;\n    HttpEntity entity = null;\n    InputStream inputStream = null;\n    JSONObject jsonData = null;\n    String json = \"\";\n    try {\n      DefaultHttpClient httpClient = new DefaultHttpClient();\n      HttpPost post = new HttpPost(url);\n      if (parametrosLista != null) {\n        post.setEntity(new UrlEncodedFormEntity(parametrosLista));\n      }\n      response = httpClient.execute(post);\n      StatusLine statusLine = response.getStatusLine();\n      int statusCode = statusLine.getStatusCode();\n      if (statusCode == 200) {\n        entity = response.getEntity();\n        inputStream = entity.getContent();\n        // obtuvimos respuesta, a transformar...\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, \"utf-8\"), 8);\n        StringBuilder sb = new StringBuilder();\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n          sb.append(line).append(\"\\n\");\n        }\n        inputStream.close();\n        json = sb.toString();\n        jsonData = new JSONObject(json);\n      } else {\n        Log.e(NOMBRE_SERVICIO, \"Failed to download JSON\");\n        jsonData =\n            new JSONObject(\"{'estado':'0','errors':{'status':'Status code = \" + statusCode + \"'}}\");\n      }\n    } catch (Exception e) {\n      Log.e(NOMBRE_SERVICIO, \"Ocurrio un error al parsear los datos\" + e.toString());\n    }\n    return jsonData;\n  }\n"}]