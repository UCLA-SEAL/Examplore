[{"dataset": "getJSONObject", "exampleID": 4201, "initialization": ["JSONObject jSONObject = new JSONObject(String)", "String name = JSONArray.getString(int)"], "initializationStart": [406, 542], "initializationEnd": [430, 560], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "name.equals(\"table\",)", "guardType": "IF {", "guardExpressionStart": 569, "guardExpressionEnd": 594, "guardBlockStart": 569, "guardBlockEnd": 885, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 664, "focalAPIEnd": 694, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parse(value)", "jSONObject.getJSONObject(String)", "parse(value)"], "useStart": [652, 823, 812], "useEnd": [695, 853, 854], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hanguyenhuu/DTUI_201105_Android/tree/master/src/com/group5/android/fd/helper/ScanHelper.java", "rawCode": "  /**\n   * Parses the contents with JSON parser of {@link CategoryEntity} and {@link ItemEntity}. Probably\n   * will add more support later\n   *\n   * @param contents\n   * @return a parsed entity\n   * @throws Exception\n   */\n  public static AbstractEntity parse(String contents) throws Exception {\n    Log.d(FdConfig.DEBUG_TAG, \"Trying to parse scanned contents: \" + contents);\n\n    JSONObject jsonObject = new JSONObject(contents);\n    JSONArray names = jsonObject.names();\n\n    for (int i = 0; i < names.length(); i++) {\n      String name = names.getString(i);\n\n      if (name.equals(\"table\")) {\n        TableEntity table = new TableEntity();\n        table.parse(jsonObject.getJSONObject(name));\n\n        return table;\n      } else if (name.equals(\"item\")) {\n        ItemEntity item = new ItemEntity();\n        item.parse(jsonObject.getJSONObject(name));\n\n        return item;\n      }\n    }\n\n    return null;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4202, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [82], "initializationEnd": [105], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["toString()", "e(String,*)"], "tryExpressionStart": 50, "tryExpressionEnd": 54, "tryBlockStart": 50, "tryBlockEnd": 741, "catchExpressionStart": 650, "catchExpressionEnd": 670, "catchBlockStart": 650, "catchBlockEnd": 741, "exceptionHandlingCallStart": [721, 710], "exceptionHandlingCallEnd": [733, 734], "configuration": ["jSONObject.getInt(String)"], "configurationStart": [121], "configurationEnd": [139], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 187, "focalAPIEnd": 214, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)"], "useStart": [240], "useEnd": [259], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xunroudabing/DaBing/tree/master/WeiXinEmoj/src/com/dabing/emoj/BaseApplication.java", "rawCode": "  protected void sendIntent(String content) {\n    try {\n      JSONObject object = new JSONObject(content);\n      int c = object.getInt(\"c\");\n      if (c == 1) {\n        JSONObject json = object.getJSONObject(\"obj\");\n        String emojId = json.getString(\"i\");\n        Intent intent = new Intent(getApplicationContext(), PushEmojActivity.class);\n        intent.putExtra(AppConstant.INTENT_PUSH_EMOJID, emojId);\n        intent.putExtra(AppConstant.INTENT_PUSH_FROM_NOTIFY, true);\n        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);\n        startActivity(intent);\n        Log.d(TAG, \"sendIntent...\");\n      }\n    } catch (Exception e) {\n      // TODO: handle exception\n      Log.e(TAG, e.toString());\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4203, "initialization": ["JSONObject jSONObject = getEntity(*)"], "initializationStart": [614], "initializationEnd": [650], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.length()"], "configurationStart": [706], "configurationEnd": [719], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 746, "focalAPIEnd": 772, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["verifyHsJobConf(value,*)"], "useStart": [780], "useEnd": [818], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guoliqiang/coding/tree/master/third_part/hadoop_src/hadoop-2.0.5-alpha-src/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/webapp/TestHsWebServicesJobConf.java", "rawCode": "  @Test\n  public void testJobConfDefault() throws JSONException, Exception {\n    WebResource r = resource();\n    Map<JobId, Job> jobsMap = appContext.getAllJobs();\n    for (JobId id : jobsMap.keySet()) {\n      String jobId = MRApps.toString(id);\n\n      ClientResponse response =\n          r.path(\"ws\")\n              .path(\"v1\")\n              .path(\"history\")\n              .path(\"mapreduce\")\n              .path(\"jobs\")\n              .path(jobId)\n              .path(\"conf\")\n              .get(ClientResponse.class);\n      assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());\n      JSONObject json = response.getEntity(JSONObject.class);\n      assertEquals(\"incorrect number of elements\", 1, json.length());\n      JSONObject info = json.getJSONObject(\"conf\");\n      verifyHsJobConf(info, jobsMap.get(id));\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4204, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [185], "initializationEnd": [216], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject!=null", "guardType": "IF {", "guardExpressionStart": 325, "guardExpressionEnd": 350, "guardBlockStart": 325, "guardBlockEnd": 844, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 472, "focalAPIEnd": 520, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 612, "followUpCheckExpressionEnd": 641, "followUpCheckBlockStart": 612, "followUpCheckBlockEnd": 698, "use": ["new ContainerTaxonomy(value)"], "useStart": [657], "useEnd": [696], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Genshin/SpreeWarehouseAndroid/tree/master/src/org/genshin/warehouse/racks/ContainerTaxonomies.java", "rawCode": "  public void getTaxonomies(JSONArray taxonomiesJSON) {\n    for (int i = 0; i < taxonomiesJSON.length(); i++) {\n      JSONObject taxonomyJSON = null;\n      try {\n        taxonomyJSON = taxonomiesJSON.getJSONObject(i);\n      } catch (JSONException e) {\n        taxonomyJSON = null;\n        e.printStackTrace();\n      }\n\n      if (taxonomyJSON != null) {\n        // take off the wrapper\n        JSONObject taxonomyJSONData = null;\n        try {\n          taxonomyJSONData = taxonomyJSON.getJSONObject(\"container_taxonomy\");\n        } catch (JSONException e) {\n          taxonomyJSONData = null;\n        }\n\n        if (taxonomyJSONData != null) taxonomies.add(new ContainerTaxonomy(taxonomyJSONData));\n\n        Log.d(\n            \"ContainerTaxonomies\",\n            \"Added container taxonomy \" + taxonomies.get(taxonomies.size() - 1).name);\n      }\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4205, "initialization": ["JSONObject jSONObject = parseSourceFile(String)"], "initializationStart": [245], "initializationEnd": [268], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new IllegalArgumentException(String)"], "tryExpressionStart": 274, "tryExpressionEnd": 278, "tryBlockStart": 274, "tryBlockEnd": 505, "catchExpressionStart": 377, "catchExpressionEnd": 401, "catchBlockStart": 377, "catchBlockEnd": 505, "exceptionHandlingCallStart": [415], "exceptionHandlingCallEnd": [498], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 308, "focalAPIEnd": 352, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["collectComponentTypes(value,Set<String>)"], "useStart": [286], "useEnd": [369], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ajhalbleib/aicg/tree/master/appinventor/buildserver/src/com/google/appinventor/buildserver/FormPropertiesAnalyzer.java", "rawCode": "  /** Returns the Set of component types used in the given form file source. */\n  public static Set<String> getComponentTypesFromFormFile(String source) {\n    Set<String> componentTypes = new HashSet<String>();\n    JSONObject propertiesObject = parseSourceFile(source);\n    try {\n      collectComponentTypes(propertiesObject.getJSONObject(\"Properties\"), componentTypes);\n    } catch (JSONException e) {\n      throw new IllegalArgumentException(\"Unable to parse file - invalid $JSON section syntax\");\n    }\n    return componentTypes;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4206, "initialization": ["JSONObject jSONObject = getItem(int)"], "initializationStart": [332], "initializationEnd": [349], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 357, "tryExpressionEnd": 361, "tryBlockStart": 357, "tryBlockEnd": 945, "catchExpressionStart": 883, "catchExpressionEnd": 907, "catchBlockStart": 883, "catchBlockEnd": 945, "exceptionHandlingCallStart": [917], "exceptionHandlingCallEnd": [936], "configuration": ["jSONObject.getString(String)", "jSONObject.getString(String)"], "configurationStart": [390, 483], "configurationEnd": [418, 509], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 550, "focalAPIEnd": 582, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "setText(value)"], "useStart": [674, 709], "useEnd": [698, 773], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jakubkinst/Course-Manager/tree/master/cd/android_app_sources/src/cz/kinst/jakub/coursemanager/Forum.java", "rawCode": "    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n      View v = convertView;\n      if (v == null) {\n        LayoutInflater vi = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        v = vi.inflate(R.layout.forum_topic_row, null);\n      }\n      final JSONObject topic = getItem(position);\n      try {\n        String lastReply = topic.getString(\"lastreply\");\n        if (lastReply.equals(\"false\")) {\n          lastReply = topic.getString(\"created\");\n        } else {\n          lastReply = topic.getJSONObject(\"lastreply\").getString(\"created\");\n        }\n\n        ((TextView) (v.findViewById(R.id.label))).setText(topic.getString(\"label\"));\n        ((TextView) (v.findViewById(R.id.lastReply))).setText(lastReply);\n        ((TextView) (v.findViewById(R.id.count))).setText(\"(\" + topic.getString(\"replies\") + \")\");\n\n      } catch (JSONException e) {\n        e.printStackTrace();\n      }\n\n      // click to open topic page\n      v.setOnClickListener(\n          new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n              Intent i = new Intent(Forum.this, ForumReplies.class);\n              try {\n                i.putExtra(\"tid\", topic.getInt(\"id\"));\n              } catch (JSONException e) {\n                e.printStackTrace();\n              }\n              i.putExtra(\"cm\", courseManagerCon);\n              startActivity(i);\n            }\n          });\n\n      return v;\n    }\n"}, {"dataset": "getJSONObject", "exampleID": 4207, "initialization": ["JSONObject jSONObject = evaluateJsonStringToObject(String)"], "initializationStart": [78], "initializationEnd": [124], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getInt(String)"], "configurationStart": [157], "configurationEnd": [180], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 261, "guardExpressionEnd": 288, "guardBlockStart": 261, "guardBlockEnd": 383, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 343, "focalAPIEnd": 375, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["reconstruct(value)", "jSONObject.getJSONObject(String)"], "useStart": [319, 460], "useEnd": [376, 491], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dfci-cccb/mev/tree/master/annotation/server/src/main/java/com/google/refine/model/Column.java", "rawCode": "  public static Column load(String s) throws Exception {\n    JSONObject obj = ParsingUtilities.evaluateJsonStringToObject(s);\n    Column column = new Column(obj.getInt(\"cellIndex\"), obj.getString(\"originalName\"));\n\n    column._name = obj.getString(\"name\");\n    if (obj.has(\"reconConfig\")) {\n      column._reconConfig = ReconConfig.reconstruct(obj.getJSONObject(\"reconConfig\"));\n    }\n    if (obj.has(\"reconStats\")) {\n      column._reconStats = ReconStats.load(obj.getJSONObject(\"reconStats\"));\n    }\n\n    return column;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4208, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 252, "focalAPIEnd": 281, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fromJSON(Context,Uri,value,*)"], "useStart": [195], "useEnd": [294], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mitmel/memory-traces/tree/master/src/edu/mit/mobile/android/locast/data/JsonSyncableItem.java", "rawCode": "    @Override\n    public ContentValues fromJSON(Context context, Uri localItem, JSONObject item, String lProp)\n        throws JSONException, NetworkProtocolException, IOException {\n\n      return JsonSyncableItem.fromJSON(\n          context, localItem, item.getJSONObject(remoteKey), getChain());\n    }\n"}, {"dataset": "getJSONObject", "exampleID": 4209, "initialization": ["JSONObject jSONObject = parseFormProperties(String)"], "initializationStart": [997], "initializationEnd": [1053], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new YailGenerationException(String)"], "tryExpressionStart": 1210, "tryExpressionEnd": 1214, "tryBlockStart": 1210, "tryBlockEnd": 1418, "catchExpressionStart": 1310, "catchExpressionEnd": 1334, "catchBlockStart": 1310, "catchBlockEnd": 1418, "exceptionHandlingCallStart": [1352], "exceptionHandlingCallEnd": [1407], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jSONObject==null)", "guardType": "IF {", "guardExpressionStart": 1063, "guardExpressionEnd": 1090, "guardBlockStart": 1063, "guardBlockEnd": 1175, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1237, "focalAPIEnd": 1279, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["generateYailForProject(jSONObject,HashMap<String, ArrayList<RenderableBlock>>,boolean)", "getYailPrelude(String,value)"], "useStart": [2676, 3188], "useEnd": [2768, 3238], "hasFinally": 1, "cleanUpCall": ["Workspace.reset()", "ComponentBlockManager.reset()", "ProcedureBlockManager.reset()"], "finallyExpressionStart": 3322, "finallyExpressionEnd": 3330, "finallyBlockStart": 3322, "finallyBlockEnd": 3439, "cleanUpCallStart": [1428, 3371, 3398], "cleanUpCallEnd": [1445, 3388, 3409], "url": "https://github.com/ajhalbleib/aicg/tree/master/appinventor/buildserver/src/com/google/appinventor/yailgenerator/YailGenerator.java", "rawCode": "  private String loadBlocksAndGenerateYail(\n      String formPropertiesSource, String codeblocksSource, String yailPath)\n      throws YailGenerationException {\n    // Currently when YailGenerator is executed as a separate process, this method is called only\n    // once. However, in tests (see YailGeneratorTest.java), it may called multiple times in\n    // parallel. We use synchronized here to handle (prevent) concurreny.\n    synchronized (generateYailLock) {\n      try {\n\n        // The first time this method is called, langDefRoot will be null.\n        if (langDefRoot == null) {\n          try {\n            langDefRoot = WorkspaceUtils.loadLangDef();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n          WorkspaceUtils.resetLanguage();\n          WorkspaceUtils.loadLanguage(langDefRoot);\n          // The following is required to load the \"My Definitions\" page/drawer.\n          loadBlocks(null);\n        }\n\n        JSONObject formProperties = WorkspaceUtils.parseFormProperties(formPropertiesSource);\n        if (formProperties == null) {\n          throw new YailGenerationException(\"Unable to generate code.\");\n        }\n\n        String formName;\n        try {\n          formName = formProperties.getJSONObject(\"Properties\").getString(\"$Name\");\n        } catch (JSONException e) {\n          throw new YailGenerationException(\"Unable to generate code.\");\n        }\n\n        workspace.reset();\n\n        if (!codeblocksSource.isEmpty()) {\n          BlockSaveFile blockSaveFile = new BlockSaveFile(langDefRoot, codeblocksSource);\n          loadBlocks(blockSaveFile.getRoot());\n          if (!cbm.loadComponents(blockSaveFile)) {\n            throw new YailGenerationException(\"Unable to generate code for \" + formName + \".\");\n          }\n        }\n\n        if (!cbm.syncFromJson(formProperties)) {\n          throw new YailGenerationException(\"Unable to generate code for \" + formName + \".\");\n        }\n\n        projectLoaded = true;\n\n        if (containsBadBlocks()) {\n          throw new YailGenerationException(\"There are bad blocks in \" + formName + \".\");\n        }\n\n        ComplaintDepartment.clearComplaints();\n\n        HashMap<String, ArrayList<RenderableBlock>> componentMap =\n            new HashMap<String, ArrayList<RenderableBlock>>();\n        Map<Block, String> warnings = new HashMap<Block, String>();\n        List<String> errors = new ArrayList<String>();\n        WorkspaceUtils.populateComponentMap(\n            componentMap,\n            warnings,\n            errors,\n            false, // not for REPL\n            false, // don't compile unattached blocks\n            cbm);\n\n        String code =\n            YABlockCompiler.generateYailForProject(\n                formProperties, componentMap, false); // not for REPL\n        String[] compileErrors = ComplaintDepartment.getCompileErrors();\n        if (compileErrors.length > 0) {\n          String errorMessages = Joiner.on(\"\\n\").join(compileErrors);\n          throw new YailGenerationException(\n              \"There are errors that must be fixed in \" + formName + \".\\n\" + errorMessages);\n        }\n\n        StringBuilder yail = new StringBuilder();\n        yail.append(YABlockCompiler.getYailPrelude(yailPath, formName));\n        yail.append(code).append(\"\\n\");\n        return yail.toString();\n\n      } finally {\n        projectLoaded = false;\n        workspace.reset();\n        cbm.reset();\n        pbm.reset();\n      }\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4210, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 301, "focalAPIEnd": 345, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getJSONArray(String)", "jSONObject.getJSONObject(int)"], "useStart": [301, 301], "useEnd": [363, 380], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AndlyticsProject/andlytics/tree/master/src/com/github/andlyticsproject/console/v2/JsonParser.java", "rawCode": "  /**\n   * Parses the supplied JSON string and adds the extracted ratings to the supplied {@link AppStats}\n   * object\n   *\n   * @param json\n   * @param stats\n   * @throws JSONException\n   */\n  static void parseRatings(String json, AppStats stats) throws JSONException {\n    JSONObject data =\n        new JSONObject(json).getJSONObject(\"result\").getJSONArray(\"1\").getJSONObject(0);\n\n    // Ratings values is in 8\n    JSONObject values = data.getJSONObject(\"8\");\n    // Ratings are at index 1 - 5\n    stats.setRating(\n        values.getInt(\"1\"),\n        values.getInt(\"2\"),\n        values.getInt(\"3\"),\n        values.getInt(\"4\"),\n        values.getInt(\"5\"));\n\n    // Comment count is in 7\n    stats.setNumberOfComments(data.getInt(\"7\"));\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4211, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [452], "initializationEnd": [476], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 541, "focalAPIEnd": 568, "followUpCheck": "!value.isNull(\"message\")", "checkType": "IF", "followUpCheckExpressionStart": 578, "followUpCheckExpressionEnd": 608, "followUpCheckBlockStart": 578, "followUpCheckBlockEnd": 688, "use": ["value.getString(String)", "value.getString(String)", "value.getInt(String)", "value.getInt(String)"], "useStart": [649, 762, 872, 996], "useEnd": [676, 786, 893, 1026], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lbaye/repo/tree/master/android/src/com/socmaps/util/ServerResponseParser.java", "rawCode": "  /**\n   * Parse server (JSON) response and returns FacebookErrorResponse object.\n   *\n   * @param response would be String converted from server response (JSON file)\n   * @return FacebookErrorResponse object\n   * @see com.socmaps.entity.FacebookErrorResponse\n   */\n  public static FacebookErrorResponse parseFacebookError(String response) {\n    FacebookErrorResponse fbResponseEntity = new FacebookErrorResponse();\n\n    try {\n\n      JSONObject jObj = new JSONObject(response);\n      if (!jObj.isNull(\"error\")) {\n        JSONObject errObj = jObj.getJSONObject(\"error\");\n        if (!errObj.isNull(\"message\")) {\n          fbResponseEntity.setMessage(errObj.getString(\"message\"));\n        }\n        if (!errObj.isNull(\"type\")) {\n          fbResponseEntity.setType(errObj.getString(\"type\"));\n        }\n        if (!errObj.isNull(\"code\")) {\n          fbResponseEntity.setCode(errObj.getInt(\"code\"));\n        }\n        if (!errObj.isNull(\"error_subcode\")) {\n          fbResponseEntity.setErrorSubCode(errObj.getInt(\"error_subcode\"));\n        }\n      }\n    } catch (JSONException e) {\n      // TODO: handle exception\n    }\n\n    return fbResponseEntity;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4212, "initialization": ["JSONObject jSONObject = JSONArray.get(int)"], "initializationStart": [19366], "initializationEnd": [19390], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)"], "configurationStart": [19422], "configurationEnd": [19454], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 19500, "focalAPIEnd": 19541, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)"], "useStart": [19570], "useEnd": [19599], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Lorquas/testrepo/tree/master/src/rhsm/cli/tasks/CandlepinTasks.java", "rawCode": "  public static String getSubscriptionIdFromProductName(\n      String authenticator, String password, String url, String ownerKey, String fromProductName)\n      throws JSONException, Exception {\n    // get the owner's subscriptions for the authenticator\n    // # curl -k -u testuser1:password --request GET\n    // https://jsefler-onprem-62candlepin.usersys.redhat.com:8443/candlepin/owners/admin/subscriptions | python -mjson.tool\n    JSONArray jsonSubscriptions =\n        new JSONArray(\n            CandlepinTasks.getResourceUsingRESTfulAPI(\n                authenticator, password, url, \"/owners/\" + ownerKey + \"/subscriptions\"));\n    for (int i = 0; i < jsonSubscriptions.length(); i++) {\n      /*\n      {\n      \"accountNumber\": \"12331131231\",\n      \"certificate\": null,\n      \"contractNumber\": \"21\",\n      \"created\": \"2011-07-27T02:12:51.464+0000\",\n      \"endDate\": \"2012-08-24T04:00:00.000+0000\",\n      \"id\": \"8a90f8c631695cb30131695daa8800f5\",\n      \"modified\": null,\n      \"owner\": {\n      \"displayName\": \"Admin Owner\",\n      \"href\": \"/owners/admin\",\n      \"id\": \"8a90f8c631695cb30131695d39b30006\",\n      \"key\": \"admin\"\n      },\n      \"product\": {\n      \"attributes\": [\n      {\n      \"created\": \"2011-07-27T02:12:51.168+0000\",\n      \"name\": \"variant\",\n      \"updated\": \"2011-07-27T02:12:51.168+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:51.168+0000\",\n      \"name\": \"sockets\",\n      \"updated\": \"2011-07-27T02:12:51.168+0000\",\n      \"value\": \"2\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:51.168+0000\",\n      \"name\": \"arch\",\n      \"updated\": \"2011-07-27T02:12:51.168+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:51.168+0000\",\n      \"name\": \"support_level\",\n      \"updated\": \"2011-07-27T02:12:51.168+0000\",\n      \"value\": \"Basic\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:51.168+0000\",\n      \"name\": \"support_type\",\n      \"updated\": \"2011-07-27T02:12:51.168+0000\",\n      \"value\": \"L1-L3\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:51.168+0000\",\n      \"name\": \"management_enabled\",\n      \"updated\": \"2011-07-27T02:12:51.168+0000\",\n      \"value\": \"1\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:51.169+0000\",\n      \"name\": \"type\",\n      \"updated\": \"2011-07-27T02:12:51.169+0000\",\n      \"value\": \"MKT\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:51.169+0000\",\n      \"name\": \"warning_period\",\n      \"updated\": \"2011-07-27T02:12:51.169+0000\",\n      \"value\": \"30\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:51.169+0000\",\n      \"name\": \"version\",\n      \"updated\": \"2011-07-27T02:12:51.169+0000\",\n      \"value\": \"6.1\"\n      }\n      ],\n      \"created\": \"2011-07-27T02:12:51.168+0000\",\n      \"dependentProductIds\": [],\n      \"href\": \"/products/awesomeos-server-2-socket-bas\",\n      \"id\": \"awesomeos-server-2-socket-bas\",\n      \"multiplier\": 1,\n      \"name\": \"Awesome OS Server Bundled (2 Sockets, L1-L3, Basic Support)\",\n      \"productContent\": [],\n      \"updated\": \"2011-07-27T02:12:51.168+0000\"\n      },\n      \"providedProducts\": [\n      {\n      \"attributes\": [\n      {\n      \"created\": \"2011-07-27T02:12:30.020+0000\",\n      \"name\": \"version\",\n      \"updated\": \"2011-07-27T02:12:30.020+0000\",\n      \"value\": \"1.0\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:30.020+0000\",\n      \"name\": \"variant\",\n      \"updated\": \"2011-07-27T02:12:30.020+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:30.020+0000\",\n      \"name\": \"sockets\",\n      \"updated\": \"2011-07-27T02:12:30.020+0000\",\n      \"value\": \"2\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:30.020+0000\",\n      \"name\": \"arch\",\n      \"updated\": \"2011-07-27T02:12:30.020+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:30.026+0000\",\n      \"name\": \"type\",\n      \"updated\": \"2011-07-27T02:12:30.026+0000\",\n      \"value\": \"SVC\"\n      }\n      ],\n      \"created\": \"2011-07-27T02:12:30.019+0000\",\n      \"dependentProductIds\": [],\n      \"href\": \"/products/37065\",\n      \"id\": \"37065\",\n      \"multiplier\": 1,\n      \"name\": \"Clustering Bits\",\n      \"productContent\": [\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path/never\",\n      \"created\": \"2011-07-27T02:12:28.261+0000\",\n      \"gpgUrl\": \"/foo/path/never/gpg\",\n      \"id\": \"0\",\n      \"label\": \"never-enabled-content\",\n      \"metadataExpire\": 600,\n      \"modifiedProductIds\": [],\n      \"name\": \"never-enabled-content\",\n      \"requiredTags\": null,\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.261+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": false\n      },\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path/always\",\n      \"created\": \"2011-07-27T02:12:28.381+0000\",\n      \"gpgUrl\": \"/foo/path/always/gpg\",\n      \"id\": \"1\",\n      \"label\": \"always-enabled-content\",\n      \"metadataExpire\": 200,\n      \"modifiedProductIds\": [],\n      \"name\": \"always-enabled-content\",\n      \"requiredTags\": null,\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.381+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": true\n      }\n      ],\n      \"updated\": \"2011-07-27T02:12:30.019+0000\"\n      },\n      {\n      \"attributes\": [\n      {\n      \"created\": \"2011-07-27T02:12:42.434+0000\",\n      \"name\": \"version\",\n      \"updated\": \"2011-07-27T02:12:42.434+0000\",\n      \"value\": \"1.0\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:42.434+0000\",\n      \"name\": \"variant\",\n      \"updated\": \"2011-07-27T02:12:42.434+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:42.434+0000\",\n      \"name\": \"support_level\",\n      \"updated\": \"2011-07-27T02:12:42.434+0000\",\n      \"value\": \"Premium\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:42.435+0000\",\n      \"name\": \"sockets\",\n      \"updated\": \"2011-07-27T02:12:42.435+0000\",\n      \"value\": \"2\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:42.434+0000\",\n      \"name\": \"arch\",\n      \"updated\": \"2011-07-27T02:12:42.434+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:42.435+0000\",\n      \"name\": \"management_enabled\",\n      \"updated\": \"2011-07-27T02:12:42.435+0000\",\n      \"value\": \"1\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:42.435+0000\",\n      \"name\": \"type\",\n      \"updated\": \"2011-07-27T02:12:42.435+0000\",\n      \"value\": \"MKT\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:42.435+0000\",\n      \"name\": \"warning_period\",\n      \"updated\": \"2011-07-27T02:12:42.435+0000\",\n      \"value\": \"30\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:42.435+0000\",\n      \"name\": \"support_type\",\n      \"updated\": \"2011-07-27T02:12:42.435+0000\",\n      \"value\": \"Level 3\"\n      }\n      ],\n      \"created\": \"2011-07-27T02:12:42.427+0000\",\n      \"dependentProductIds\": [],\n      \"href\": \"/products/awesomeos-server\",\n      \"id\": \"awesomeos-server\",\n      \"multiplier\": 1,\n      \"name\": \"Awesome OS Server Bundled\",\n      \"productContent\": [],\n      \"updated\": \"2011-07-27T02:12:42.427+0000\"\n      },\n      {\n      \"attributes\": [\n      {\n      \"created\": \"2011-07-27T02:12:35.789+0000\",\n      \"name\": \"variant\",\n      \"updated\": \"2011-07-27T02:12:35.789+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:35.789+0000\",\n      \"name\": \"sockets\",\n      \"updated\": \"2011-07-27T02:12:35.789+0000\",\n      \"value\": \"2\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:35.789+0000\",\n      \"name\": \"arch\",\n      \"updated\": \"2011-07-27T02:12:35.789+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:35.789+0000\",\n      \"name\": \"type\",\n      \"updated\": \"2011-07-27T02:12:35.789+0000\",\n      \"value\": \"SVC\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:35.789+0000\",\n      \"name\": \"warning_period\",\n      \"updated\": \"2011-07-27T02:12:35.789+0000\",\n      \"value\": \"30\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:35.789+0000\",\n      \"name\": \"version\",\n      \"updated\": \"2011-07-27T02:12:35.789+0000\",\n      \"value\": \"6.1\"\n      }\n      ],\n      \"created\": \"2011-07-27T02:12:35.789+0000\",\n      \"dependentProductIds\": [],\n      \"href\": \"/products/37060\",\n      \"id\": \"37060\",\n      \"multiplier\": 1,\n      \"name\": \"Awesome OS Server Bits\",\n      \"productContent\": [\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path/never\",\n      \"created\": \"2011-07-27T02:12:28.261+0000\",\n      \"gpgUrl\": \"/foo/path/never/gpg\",\n      \"id\": \"0\",\n      \"label\": \"never-enabled-content\",\n      \"metadataExpire\": 600,\n      \"modifiedProductIds\": [],\n      \"name\": \"never-enabled-content\",\n      \"requiredTags\": null,\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.261+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": false\n      },\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path/always\",\n      \"created\": \"2011-07-27T02:12:28.468+0000\",\n      \"gpgUrl\": \"/foo/path/always/gpg\",\n      \"id\": \"2\",\n      \"label\": \"tagged-content\",\n      \"metadataExpire\": null,\n      \"modifiedProductIds\": [],\n      \"name\": \"tagged-content\",\n      \"requiredTags\": \"TAG1,TAG2\",\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.468+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": true\n      },\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path/always\",\n      \"created\": \"2011-07-27T02:12:28.381+0000\",\n      \"gpgUrl\": \"/foo/path/always/gpg\",\n      \"id\": \"1\",\n      \"label\": \"always-enabled-content\",\n      \"metadataExpire\": 200,\n      \"modifiedProductIds\": [],\n      \"name\": \"always-enabled-content\",\n      \"requiredTags\": null,\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.381+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": true\n      },\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path\",\n      \"created\": \"2011-07-27T02:12:28.555+0000\",\n      \"gpgUrl\": \"/foo/path/gpg/\",\n      \"id\": \"1111\",\n      \"label\": \"content-label\",\n      \"metadataExpire\": 0,\n      \"modifiedProductIds\": [],\n      \"name\": \"content\",\n      \"requiredTags\": null,\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.555+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": true\n      }\n      ],\n      \"updated\": \"2011-07-27T02:12:35.789+0000\"\n      },\n      {\n      \"attributes\": [\n      {\n      \"created\": \"2011-07-27T02:12:31.345+0000\",\n      \"name\": \"version\",\n      \"updated\": \"2011-07-27T02:12:31.345+0000\",\n      \"value\": \"1.0\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:31.345+0000\",\n      \"name\": \"variant\",\n      \"updated\": \"2011-07-27T02:12:31.345+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:31.346+0000\",\n      \"name\": \"sockets\",\n      \"updated\": \"2011-07-27T02:12:31.346+0000\",\n      \"value\": \"2\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:31.346+0000\",\n      \"name\": \"arch\",\n      \"updated\": \"2011-07-27T02:12:31.346+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:31.346+0000\",\n      \"name\": \"type\",\n      \"updated\": \"2011-07-27T02:12:31.346+0000\",\n      \"value\": \"SVC\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:31.346+0000\",\n      \"name\": \"warning_period\",\n      \"updated\": \"2011-07-27T02:12:31.346+0000\",\n      \"value\": \"30\"\n      }\n      ],\n      \"created\": \"2011-07-27T02:12:31.345+0000\",\n      \"dependentProductIds\": [],\n      \"href\": \"/products/37070\",\n      \"id\": \"37070\",\n      \"multiplier\": 1,\n      \"name\": \"Load Balancing Bits\",\n      \"productContent\": [\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path/never\",\n      \"created\": \"2011-07-27T02:12:28.261+0000\",\n      \"gpgUrl\": \"/foo/path/never/gpg\",\n      \"id\": \"0\",\n      \"label\": \"never-enabled-content\",\n      \"metadataExpire\": 600,\n      \"modifiedProductIds\": [],\n      \"name\": \"never-enabled-content\",\n      \"requiredTags\": null,\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.261+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": false\n      },\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path/always\",\n      \"created\": \"2011-07-27T02:12:28.381+0000\",\n      \"gpgUrl\": \"/foo/path/always/gpg\",\n      \"id\": \"1\",\n      \"label\": \"always-enabled-content\",\n      \"metadataExpire\": 200,\n      \"modifiedProductIds\": [],\n      \"name\": \"always-enabled-content\",\n      \"requiredTags\": null,\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.381+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": true\n      }\n      ],\n      \"updated\": \"2011-07-27T02:12:31.345+0000\"\n      },\n      {\n      \"attributes\": [\n      {\n      \"created\": \"2011-07-27T02:12:33.469+0000\",\n      \"name\": \"version\",\n      \"updated\": \"2011-07-27T02:12:33.469+0000\",\n      \"value\": \"1.0\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:33.469+0000\",\n      \"name\": \"variant\",\n      \"updated\": \"2011-07-27T02:12:33.469+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:33.469+0000\",\n      \"name\": \"sockets\",\n      \"updated\": \"2011-07-27T02:12:33.469+0000\",\n      \"value\": \"2\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:33.469+0000\",\n      \"name\": \"arch\",\n      \"updated\": \"2011-07-27T02:12:33.469+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:33.469+0000\",\n      \"name\": \"type\",\n      \"updated\": \"2011-07-27T02:12:33.469+0000\",\n      \"value\": \"SVC\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:33.469+0000\",\n      \"name\": \"warning_period\",\n      \"updated\": \"2011-07-27T02:12:33.469+0000\",\n      \"value\": \"30\"\n      }\n      ],\n      \"created\": \"2011-07-27T02:12:33.469+0000\",\n      \"dependentProductIds\": [],\n      \"href\": \"/products/37068\",\n      \"id\": \"37068\",\n      \"multiplier\": 1,\n      \"name\": \"Large File Support Bits\",\n      \"productContent\": [\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path/never\",\n      \"created\": \"2011-07-27T02:12:28.261+0000\",\n      \"gpgUrl\": \"/foo/path/never/gpg\",\n      \"id\": \"0\",\n      \"label\": \"never-enabled-content\",\n      \"metadataExpire\": 600,\n      \"modifiedProductIds\": [],\n      \"name\": \"never-enabled-content\",\n      \"requiredTags\": null,\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.261+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": false\n      },\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path/always\",\n      \"created\": \"2011-07-27T02:12:28.381+0000\",\n      \"gpgUrl\": \"/foo/path/always/gpg\",\n      \"id\": \"1\",\n      \"label\": \"always-enabled-content\",\n      \"metadataExpire\": 200,\n      \"modifiedProductIds\": [],\n      \"name\": \"always-enabled-content\",\n      \"requiredTags\": null,\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.381+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": true\n      }\n      ],\n      \"updated\": \"2011-07-27T02:12:33.469+0000\"\n      },\n      {\n      \"attributes\": [\n      {\n      \"created\": \"2011-07-27T02:12:32.964+0000\",\n      \"name\": \"version\",\n      \"updated\": \"2011-07-27T02:12:32.964+0000\",\n      \"value\": \"1.0\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:32.964+0000\",\n      \"name\": \"variant\",\n      \"updated\": \"2011-07-27T02:12:32.964+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:32.964+0000\",\n      \"name\": \"sockets\",\n      \"updated\": \"2011-07-27T02:12:32.964+0000\",\n      \"value\": \"2\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:32.964+0000\",\n      \"name\": \"arch\",\n      \"updated\": \"2011-07-27T02:12:32.964+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:32.964+0000\",\n      \"name\": \"type\",\n      \"updated\": \"2011-07-27T02:12:32.964+0000\",\n      \"value\": \"SVC\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:32.964+0000\",\n      \"name\": \"warning_period\",\n      \"updated\": \"2011-07-27T02:12:32.964+0000\",\n      \"value\": \"30\"\n      }\n      ],\n      \"created\": \"2011-07-27T02:12:32.963+0000\",\n      \"dependentProductIds\": [],\n      \"href\": \"/products/37067\",\n      \"id\": \"37067\",\n      \"multiplier\": 1,\n      \"name\": \"Shared Storage Bits\",\n      \"productContent\": [\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path/never\",\n      \"created\": \"2011-07-27T02:12:28.261+0000\",\n      \"gpgUrl\": \"/foo/path/never/gpg\",\n      \"id\": \"0\",\n      \"label\": \"never-enabled-content\",\n      \"metadataExpire\": 600,\n      \"modifiedProductIds\": [],\n      \"name\": \"never-enabled-content\",\n      \"requiredTags\": null,\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.261+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": false\n      },\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path/always\",\n      \"created\": \"2011-07-27T02:12:28.381+0000\",\n      \"gpgUrl\": \"/foo/path/always/gpg\",\n      \"id\": \"1\",\n      \"label\": \"always-enabled-content\",\n      \"metadataExpire\": 200,\n      \"modifiedProductIds\": [],\n      \"name\": \"always-enabled-content\",\n      \"requiredTags\": null,\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.381+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": true\n      }\n      ],\n      \"updated\": \"2011-07-27T02:12:32.963+0000\"\n      },\n      {\n      \"attributes\": [\n      {\n      \"created\": \"2011-07-27T02:12:34.320+0000\",\n      \"name\": \"version\",\n      \"updated\": \"2011-07-27T02:12:34.320+0000\",\n      \"value\": \"1.0\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:34.321+0000\",\n      \"name\": \"variant\",\n      \"updated\": \"2011-07-27T02:12:34.321+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:34.321+0000\",\n      \"name\": \"sockets\",\n      \"updated\": \"2011-07-27T02:12:34.321+0000\",\n      \"value\": \"2\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:34.321+0000\",\n      \"name\": \"arch\",\n      \"updated\": \"2011-07-27T02:12:34.321+0000\",\n      \"value\": \"ALL\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:34.321+0000\",\n      \"name\": \"type\",\n      \"updated\": \"2011-07-27T02:12:34.321+0000\",\n      \"value\": \"SVC\"\n      },\n      {\n      \"created\": \"2011-07-27T02:12:34.321+0000\",\n      \"name\": \"warning_period\",\n      \"updated\": \"2011-07-27T02:12:34.321+0000\",\n      \"value\": \"30\"\n      }\n      ],\n      \"created\": \"2011-07-27T02:12:34.320+0000\",\n      \"dependentProductIds\": [],\n      \"href\": \"/products/37069\",\n      \"id\": \"37069\",\n      \"multiplier\": 1,\n      \"name\": \"Management Bits\",\n      \"productContent\": [\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path/never\",\n      \"created\": \"2011-07-27T02:12:28.261+0000\",\n      \"gpgUrl\": \"/foo/path/never/gpg\",\n      \"id\": \"0\",\n      \"label\": \"never-enabled-content\",\n      \"metadataExpire\": 600,\n      \"modifiedProductIds\": [],\n      \"name\": \"never-enabled-content\",\n      \"requiredTags\": null,\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.261+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": false\n      },\n      {\n      \"content\": {\n      \"contentUrl\": \"/foo/path/always\",\n      \"created\": \"2011-07-27T02:12:28.381+0000\",\n      \"gpgUrl\": \"/foo/path/always/gpg\",\n      \"id\": \"1\",\n      \"label\": \"always-enabled-content\",\n      \"metadataExpire\": 200,\n      \"modifiedProductIds\": [],\n      \"name\": \"always-enabled-content\",\n      \"requiredTags\": null,\n      \"type\": \"yum\",\n      \"updated\": \"2011-07-27T02:12:28.381+0000\",\n      \"vendor\": \"test-vendor\"\n      },\n      \"enabled\": true\n      }\n      ],\n      \"updated\": \"2011-07-27T02:12:34.320+0000\"\n      }\n      ],\n      \"quantity\": 10,\n      \"startDate\": \"2011-06-25T04:00:00.000+0000\",\n      \"updated\": \"2011-07-27T02:12:51.464+0000\",\n      \"upstreamPoolId\": null\n      }\n      */\n      JSONObject jsonSubscription = (JSONObject) jsonSubscriptions.get(i);\n      String subscriptionId = jsonSubscription.getString(\"id\");\n      JSONObject jsonProduct = (JSONObject) jsonSubscription.getJSONObject(\"product\");\n      String productName = jsonProduct.getString(\"name\");\n      if (productName.equals(fromProductName)) {\n        return subscriptionId;\n      }\n    }\n    log.warning(\"CandlepinTasks could not getSubscriptionIdFromProductName.\");\n    return null;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4213, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [845], "initializationEnd": [877], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.containsKey(String)", "jSONObject.containsKey(String)", "jSONObject.containsKey(String)"], "configurationStart": [1036, 1148, 1267], "configurationEnd": [1067, 1180, 1304], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1389, "focalAPIEnd": 1426, "followUpCheck": "value.keySet()", "checkType": "LOOP {", "followUpCheckExpressionStart": 1606, "followUpCheckExpressionEnd": 1661, "followUpCheckBlockStart": 1606, "followUpCheckBlockEnd": 3819, "use": ["value.getJSONObject(String)"], "useStart": [1745], "useEnd": [1798], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lmco/eurekastreams/tree/master/server/src/main/java/org/eurekastreams/server/service/opensocial/gadgets/spec/GadgetMetaDataHttpFetcher.java", "rawCode": "  /**\n   * This method converts the MetaData JSON into a List of GadgetMetaData objects.\n   *\n   * @param inGadgetsJSON raw results from the metadata request.\n   * @param gadgetDefs Map of gadget definitions with the string key as the gadget def url.\n   * @return List of GadgetMetaData objects from the request.\n   */\n  private List<GadgetMetaDataDTO> mapGadgetMetaDataJSONToObject(\n      final String inGadgetsJSON, final Map<String, GeneralGadgetDefinition> gadgetDefs) {\n    List<GadgetMetaDataDTO> currentGadgetMetaData = new ArrayList<GadgetMetaDataDTO>();\n    JSONObject gadgetsMetaData = JSONObject.fromObject(inGadgetsJSON.toString());\n    JSONArray gadgetsJSON = gadgetsMetaData.getJSONArray(\"gadgets\");\n    GadgetMetaDataDTO currentGadget;\n\n    for (int index = 0; index < gadgetsJSON.size(); index++) {\n      JSONObject gadgetJSON = gadgetsJSON.getJSONObject(index);\n      currentGadget = new GadgetMetaDataDTO(gadgetDefs.get(gadgetJSON.get(\"url\")));\n      // set the user prefs here as a list.\n      currentGadget.setTitle(gadgetJSON.containsKey(\"title\") ? gadgetJSON.getString(\"title\") : \"\");\n      currentGadget.setAuthor(\n          gadgetJSON.containsKey(\"author\") ? gadgetJSON.getString(\"author\") : \"\");\n      currentGadget.setDescription(\n          gadgetJSON.containsKey(\"description\") ? gadgetJSON.getString(\"description\") : \"\");\n      JSONObject gadgetUserPrefsJSON = gadgetJSON.getJSONObject(\"userPrefs\");\n      List<UserPrefDTO> userPrefs = new ArrayList<UserPrefDTO>();\n      UserPrefDTO currentUserPref;\n      JSONObject currentUserPrefJSON;\n      String currentUserPrefKey;\n      for (Object userPrefKey : gadgetUserPrefsJSON.keySet()) {\n        currentUserPrefKey = (String) userPrefKey;\n        currentUserPrefJSON = gadgetUserPrefsJSON.getJSONObject(currentUserPrefKey);\n        currentUserPref = new UserPrefDTO();\n        currentUserPref.setName(currentUserPrefKey);\n        currentUserPref.setDisplayName(currentUserPrefJSON.getString(\"displayName\"));\n        currentUserPref.setDataType(currentUserPrefJSON.getString(\"type\"));\n        currentUserPref.setDefaultValue(currentUserPrefJSON.getString(\"default\"));\n        if (currentUserPref.getDataType().name() == DataType.ENUM.name()) {\n          // Unordered easy access map of enum values.\n          Map<String, String> enumValues = new HashMap<String, String>();\n          String enumKey;\n          String userPrefEnumValue;\n          // parse enum values here\n          for (Object enumKeyObject : currentUserPrefJSON.getJSONObject(\"enumValues\").keySet()) {\n            enumKey = (String) enumKeyObject;\n            userPrefEnumValue =\n                (String) currentUserPrefJSON.getJSONObject(\"enumValues\").get(enumKey);\n            enumValues.put(enumKey, userPrefEnumValue);\n          }\n          currentUserPref.setEnumValues(enumValues);\n\n          // Ordered enum values for creating preferences.\n          List<EnumValuePairDTO> orderedEnumValues = new LinkedList<EnumValuePairDTO>();\n          JSONArray orderedEnumValuesJson = currentUserPrefJSON.getJSONArray(\"orderedEnumValues\");\n          JSONObject currentOrderedEnumValueJson;\n          for (int arrayIndex = 0; arrayIndex < orderedEnumValuesJson.size(); arrayIndex++) {\n            currentOrderedEnumValueJson = orderedEnumValuesJson.getJSONObject(arrayIndex);\n            orderedEnumValues.add(\n                new EnumValuePairDTO(\n                    currentOrderedEnumValueJson.getString(\"value\"),\n                    currentOrderedEnumValueJson.getString(\"displayValue\")));\n          }\n          currentUserPref.setOrderedEnumValues(orderedEnumValues);\n        }\n\n        if (currentUserPrefJSON.containsKey(\"required\")) {\n          currentUserPref.setRequired(currentUserPrefJSON.getString(\"required\"));\n        }\n        userPrefs.add(currentUserPref);\n      }\n      currentGadget.setUserPrefs(userPrefs);\n      currentGadgetMetaData.add(currentGadget);\n    }\n    return currentGadgetMetaData;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4214, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 128, "focalAPIEnd": 161, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getBoolean(String)", "new RowStarOperation(value,boolean)"], "useStart": [185, 224], "useEnd": [210, 267], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdunck/google-refine/tree/master/main/src/com/google/refine/operations/row/RowStarOperation.java", "rawCode": "  public static AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {\n    JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");\n    boolean starred = obj.getBoolean(\"starred\");\n\n    return new RowStarOperation(engineConfig, starred);\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4215, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getJSONArray(String)"], "configurationStart": [174], "configurationEnd": [223], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 711, "focalAPIEnd": 761, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/siga111/PFM/tree/master/ANDROID/src/main/pfmandroid/getdata/RetrieveTransferData.java", "rawCode": "  @Override\n  protected void onPostExecute(String result) {\n    // Attempt to extract an array of currencies (more than one in database)\n    try {\n      JSONArray getArray = new JSONObject(currency).getJSONArray(\"currency\");\n\n      for (int i = 0; i < getArray.length(); i++) {\n        int id = ((JSONObject) getArray.get(i)).getInt(\"id\");\n        String code = ((JSONObject) getArray.get(i)).getString(\"code\");\n        DataStorage.typesOfCurrency.add(new Currency(id, code));\n      }\n    } catch (JSONException e) {\n      // If we reach here, it means we couldn't find currency array (only one in database)\n      // Create a single currency, extracted from database.\n      try {\n        JSONObject getObject = new JSONObject(currency).getJSONObject(\"currency\");\n        int id = getObject.getInt(\"id\");\n        String code = getObject.getString(\"code\");\n        DataStorage.typesOfCurrency.add(new Currency(id, code));\n      } catch (JSONException e1) {\n        // TODO Auto-generated catch block\n        e1.printStackTrace();\n      }\n    }\n\n    // Try to extract an array of wallets.\n    try {\n      JSONArray getArray = new JSONObject(wallets).getJSONArray(\"account\");\n\n      // Add all wallets and for each wallet, every currency without any amount.\n      for (int i = 0; i < getArray.length(); i++) {\n        int id = ((JSONObject) getArray.get(i)).getInt(\"id\");\n        String name = ((JSONObject) getArray.get(i)).getString(\"name\");\n        DataStorage.listOfWallets.add(new Wallet(id, name));\n        for (int j = 0; j < DataStorage.typesOfCurrency.size(); j++) {\n          DataStorage.listOfWallets\n              .get(i)\n              .addMoney(\n                  new Money(\n                      DataStorage.typesOfCurrency.get(j).getId(),\n                      DataStorage.typesOfCurrency.get(j).getCode()));\n        }\n      }\n    } catch (JSONException e) {\n      // If we are here, there is no array -> Only one wallet for the user, extract it.\n      try {\n        JSONObject getObject = new JSONObject(wallets).getJSONObject(\"account\");\n        int id = getObject.getInt(\"id\");\n        String name = getObject.getString(\"name\");\n        DataStorage.listOfWallets.add(new Wallet(id, name));\n        for (int j = 0; j < DataStorage.typesOfCurrency.size(); j++) {\n          DataStorage.listOfWallets\n              .get(DataStorage.listOfWallets.size() - 1)\n              .addMoney(\n                  new Money(\n                      DataStorage.typesOfCurrency.get(j).getId(),\n                      DataStorage.typesOfCurrency.get(j).getCode()));\n        }\n      } catch (JSONException e1) {\n        // TODO Auto-generated catch block\n        e1.printStackTrace();\n      }\n    }\n\n    GetBalanceInfo innertask = new GetBalanceInfo();\n    innertask.execute();\n\n    try {\n      innertask.get();\n    } catch (InterruptedException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (ExecutionException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    if (dialog.isShowing()) {\n      dialog.dismiss();\n    }\n\n    context.displayData();\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4216, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 75, "tryExpressionEnd": 79, "tryBlockStart": 75, "tryBlockEnd": 581, "catchExpressionStart": 507, "catchExpressionEnd": 527, "catchBlockStart": 507, "catchBlockEnd": 581, "exceptionHandlingCallStart": [535], "exceptionHandlingCallEnd": [574], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 108, "guardExpressionEnd": 131, "guardBlockStart": 108, "guardBlockEnd": 262, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 147, "focalAPIEnd": 175, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.put(String,JSONObject)", "value.put(String,JSONObject)", "value.put(String,String)", "ConnectedThread.sendJson(jSONObject)"], "useStart": [231, 386, 418, 465], "useEnd": [253, 410, 457, 499], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenJunction/JavaJunction/tree/master/src/main/java/edu/stanford/junction/provider/jx/Junction.java", "rawCode": "  @Override\n  public void doSendMessageToSession(JSONObject message) {\n    try {\n      JSONObject jx;\n      if (message.has(NS_JX)) {\n        jx = message.getJSONObject(NS_JX);\n      } else {\n        jx = new JSONObject();\n        message.put(NS_JX, jx);\n      }\n\n      JSONObject send = new JSONObject();\n      send.put(\"action\", \"send_s\");\n      send.put(\"session\", mSession);\n\n      jx.put(JX_SYS_MSG, send);\n      jx.put(\"from\", getActor().getActorID());\n      mConnectedThread.sendJson(message);\n    } catch (Exception e) {\n      Log.e(TAG, \"Failed to send message\", e);\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4217, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [332], "initializationEnd": [356], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new TwitterException(String,*)"], "tryExpressionStart": 302, "tryExpressionEnd": 306, "tryBlockStart": 302, "tryBlockEnd": 582, "catchExpressionStart": 473, "catchExpressionEnd": 497, "catchBlockStart": 473, "catchBlockEnd": 582, "exceptionHandlingCallStart": [511], "exceptionHandlingCallEnd": [575], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 408, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)"], "useStart": [408], "useEnd": [457], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/decamun/personalitweet/tree/master/twitter4j-3.0.3/twitter4j-media-support/src/main/java/twitter4j/media/MobypictureUpload.java", "rawCode": "  @Override\n  protected String postUpload() throws TwitterException {\n    int statusCode = httpResponse.getStatusCode();\n    if (statusCode != 200)\n      throw new TwitterException(\"Mobypic image upload returned invalid status code\", httpResponse);\n\n    String response = httpResponse.asString();\n\n    try {\n      JSONObject json = new JSONObject(response);\n      if (!json.isNull(\"media\")) {\n        return json.getJSONObject(\"media\").getString(\"mediaurl\");\n      }\n    } catch (JSONException e) {\n      throw new TwitterException(\"Invalid Mobypic response: \" + response, e);\n    }\n\n    throw new TwitterException(\"Unknown Mobypic response\", httpResponse);\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4218, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.length()"], "configurationStart": [144], "configurationEnd": [157], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 182, "focalAPIEnd": 213, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.length()", "value.getJSONObject(String)", "value.length()", "value.getString(String)", "value.getString(String)"], "useStart": [267, 294, 384, 448, 480], "useEnd": [280, 329, 397, 470, 504], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anbangr/trusted-mr/tree/master/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServices.java", "rawCode": "  public void verifyClusterSchedulerFifo(JSONObject json) throws JSONException, Exception {\n    assertEquals(\"incorrect number of elements\", 1, json.length());\n    JSONObject info = json.getJSONObject(\"scheduler\");\n    assertEquals(\"incorrect number of elements\", 1, info.length());\n    info = info.getJSONObject(\"schedulerInfo\");\n    assertEquals(\"incorrect number of elements\", 11, info.length());\n\n    verifyClusterSchedulerFifoGeneric(\n        info.getString(\"type\"),\n        info.getString(\"qstate\"),\n        (float) info.getDouble(\"capacity\"),\n        (float) info.getDouble(\"usedCapacity\"),\n        info.getInt(\"minQueueMemoryCapacity\"),\n        info.getInt(\"maxQueueMemoryCapacity\"),\n        info.getInt(\"numNodes\"),\n        info.getInt(\"usedNodeCapacity\"),\n        info.getInt(\"availNodeCapacity\"),\n        info.getInt(\"totalNodeCapacity\"),\n        info.getInt(\"numContainers\"));\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4219, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)"], "configurationStart": [276], "configurationEnd": [302], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 319, "focalAPIEnd": 353, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.put(String,String)", "jSONObject.getString(String)", "bindJSON(Class<? extends Series>,value)"], "useStart": [359, 405, 742], "useEnd": [385, 432, 775], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jenkinsci/plot-plugin/tree/master/src/main/java/hudson/plugins/plot/SeriesFactory.java", "rawCode": "  /**\n   * Using file and label and the Stapler request, create a subclass of series that can process the\n   * type selected.\n   *\n   * @param formData JSON data for series\n   */\n  public static Series createSeries(JSONObject formData, StaplerRequest req) {\n    String file = formData.getString(\"file\");\n    formData = formData.getJSONObject(\"fileType\");\n    formData.put(\"file\", file);\n    String type = formData.getString(\"value\");\n    Class<? extends Series> typeClass = null;\n\n    if (\"properties\".equals(type)) {\n      typeClass = PropertiesSeries.class;\n    } else if (\"csv\".equals(type)) {\n      typeClass = CSVSeries.class;\n    } else if (\"xml\".equals(type)) {\n      typeClass = XMLSeries.class;\n    }\n\n    return typeClass != null ? req.bindJSON(typeClass, formData) : null;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4220, "initialization": ["JSONObject jSONObject = DataRequest.getJSONData()"], "initializationStart": [312], "initializationEnd": [328], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "e(String,*)"], "tryExpressionStart": 284, "tryExpressionEnd": 288, "tryBlockStart": 284, "tryBlockEnd": 838, "catchExpressionStart": 777, "catchExpressionEnd": 797, "catchBlockStart": 777, "catchBlockEnd": 838, "exceptionHandlingCallStart": [816, 805], "exceptionHandlingCallEnd": [830, 831], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 357, "focalAPIEnd": 384, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)", "value.getJSONArray(String)"], "useStart": [406, 484], "useEnd": [431, 513], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ese-unibe-ch/ese2013-team7/tree/master/Programming/Mensa@Unibe/src/com/ese2013/mensaunibe/model/menu/MenuData.java", "rawCode": "  /**\n   * returns the daily menu of a specific mensa\n   *\n   * @param mensaId\n   * @return Menuplan of one day\n   */\n  public Menuplan getMenuList(int mensaId) {\n    Menuplan plan = new Menuplan();\n    rq.setUrl(String.format(ApiUrl.API_DAILY_MENU, mensaId));\n    rq.execute();\n\n    try {\n      JSONObject js = rq.getJSONData();\n      JSONObject content = js.getJSONObject(\"content\");\n      String date = content.getString(\"date\");\n      plan.parseDate(date);\n      JSONArray list = content.getJSONArray(\"menus\");\n\n      for (int i = 0; i < list.length(); i++) {\n        DailyMenuBuilder mb = new DailyMenuBuilder();\n        mb.parseJson(list.getJSONObject(i));\n        DailyMenu menu = mb.create();\n        plan.add(menu);\n        plan.setDate(menu.getDate());\n      }\n    } catch (Exception e) {\n      Log.e(TAG, e.getMessage());\n    }\n    return plan;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4221, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new CloudException(*)"], "tryExpressionStart": 242, "tryExpressionEnd": 246, "tryBlockStart": 242, "tryBlockEnd": 2829, "catchExpressionStart": 2763, "catchExpressionEnd": 2787, "catchBlockStart": 2763, "catchBlockEnd": 2829, "exceptionHandlingCallStart": [2801], "exceptionHandlingCallEnd": [2822], "configuration": ["jSONObject.has(String)", "jSONObject.has(String)", "jSONObject.has(String)", "jSONObject.has(String)", "jSONObject.getString(String)", "jSONObject.has(String)"], "configurationStart": [269, 394, 601, 1425, 1476, 1537], "configurationEnd": [283, 410, 619, 1444, 1501, 1557], "guardCondition": "!(jSONObject==null) &&  jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 150, "guardExpressionEnd": 167, "guardBlockStart": 150, "guardBlockEnd": 194, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1680, "focalAPIEnd": 1708, "followUpCheck": "value != null && value.has(\"id\")", "checkType": "IF", "followUpCheckExpressionStart": 1719, "followUpCheckExpressionEnd": 1748, "followUpCheckBlockStart": 1719, "followUpCheckBlockEnd": 1798, "use": ["value.getString(String)", "jSONObject.getJSONObject(String)", "jSONObject.has(String)"], "useStart": [1770, 1883, 2027], "useEnd": [1787, 1911, 2043], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/greese/dasein-cloud-openstack/tree/master/src/main/java/org/dasein/cloud/openstack/nova/os/ext/rackspace/db/RackspaceRDBMS.java", "rawCode": "  private @Nullable Database toDatabase(@Nonnull ProviderContext ctx, @Nullable JSONObject json)\n      throws CloudException, InternalException {\n    if (json == null) {\n      return null;\n    }\n\n    String regionId = ctx.getRegionId();\n\n    try {\n      String dbId = (json.has(\"id\") ? json.getString(\"id\") : null);\n\n      if (dbId == null) {\n        return null;\n      }\n\n      String name = (json.has(\"name\") ? json.getString(\"name\") : null);\n\n      if (name == null) {\n        name = \"RDBMS MySQL #\" + dbId;\n      }\n\n      DatabaseState currentState = DatabaseState.PENDING;\n      String status = (json.has(\"status\") ? json.getString(\"status\") : null);\n\n      if (status != null) {\n        if (status.equalsIgnoreCase(\"BUILD\") || status.equalsIgnoreCase(\"building\")) {\n          currentState = DatabaseState.PENDING;\n        } else if (status.equalsIgnoreCase(\"ACTIVE\") || status.equalsIgnoreCase(\"AVAILABLE\")) {\n          currentState = DatabaseState.AVAILABLE;\n        } else if (status.equalsIgnoreCase(\"RESIZE\")) {\n          currentState = DatabaseState.MODIFYING;\n        } else if (status.equalsIgnoreCase(\"SHUTDOWN\")) {\n          currentState = DatabaseState.RESTARTING;\n        } else if (status.equalsIgnoreCase(\"BLOCKED\")) {\n          currentState = DatabaseState.PENDING;\n        } else {\n          System.out.println(\"DEBUG OS Rackspace DB STATE: \" + status);\n        }\n      }\n      long created =\n          (json.has(\"created\") ? getProvider().parseTimestamp(json.getString(\"created\")) : -1L);\n\n      String hostname = (json.has(\"hostname\") ? json.getString(\"hostname\") : null);\n      String flavor = null;\n\n      if (json.has(\"flavor\")) {\n        JSONObject f = json.getJSONObject(\"flavor\");\n\n        if (f != null && f.has(\"id\")) {\n          flavor = f.getString(\"id\");\n        }\n      }\n      int size = 0;\n\n      if (json.has(\"volume\")) {\n        JSONObject v = json.getJSONObject(\"volume\");\n\n        if (v != null && v.has(\"size\")) {\n          size = v.getInt(\"size\");\n        }\n      }\n      int port = (json.has(\"port\") ? json.getInt(\"port\") : 3306);\n\n      Database database = new Database();\n\n      database.setAdminUser(null);\n      database.setAllocatedStorageInGb(size);\n      database.setCreationTimestamp(created);\n      database.setCurrentState(currentState);\n      database.setEngine(DatabaseEngine.MYSQL);\n      database.setHighAvailability(false);\n      database.setHostName(hostname);\n      database.setHostPort(port);\n      database.setName(name);\n      database.setProductSize(flavor + \":\" + size);\n      database.setProviderDatabaseId(dbId);\n      database.setProviderDataCenterId(regionId + \"-a\");\n      database.setProviderOwnerId(getTenantId());\n      database.setProviderRegionId(regionId);\n      return database;\n    } catch (JSONException e) {\n      throw new CloudException(e);\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4222, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["getMessage()", "d(String,*)"], "tryExpressionStart": 596, "tryExpressionEnd": 600, "tryBlockStart": 596, "tryBlockEnd": 2155, "catchExpressionStart": 2074, "catchExpressionEnd": 2100, "catchBlockStart": 2074, "catchBlockEnd": 2155, "exceptionHandlingCallStart": [2131, 2108], "exceptionHandlingCallEnd": [2147, 2148], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1353, "focalAPIEnd": 1392, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kogeva/Reactr/tree/master/Reactr/src/main/java/reactr/network/ReactorApi.java", "rawCode": "  public ArrayList<MessageEntity> getMessages(Integer from, Integer to) {\n    postParams = new HashMap<String, ContentBody>();\n    ArrayList<MessageEntity> messageArray = new ArrayList<MessageEntity>();\n\n    try {\n      postParams.put(\"user_id\", new StringBody((new Integer(userId)).toString()));\n      postParams.put(\"session_hash\", new StringBody(session_token));\n      postParams.put(\"from\", new StringBody(from.toString()));\n      postParams.put(\"to\", new StringBody(to.toString()));\n    } catch (UnsupportedEncodingException exp) {\n      Log.d(\"Reactor API: \", exp.getMessage());\n    }\n\n    try {\n      jsonData = new JSONObject(networkManager.sendRequest(GET_MESSAGES, postParams));\n      if (jsonData.get(\"status\").equals(\"success\")) {\n        JSONArray messageJSONArray = (JSONArray) jsonData.getJSONArray(\"messages\");\n\n        for (int i = 0; i < messageJSONArray.length(); i++) {\n          JSONObject messageJson = messageJSONArray.getJSONObject(i);\n          MessageEntity messageEntity =\n              new MessageEntity(\n                  messageJson.getInt(\"id\"),\n                  messageJson.getInt(\"from_user\"),\n                  messageJson.getInt(\"to_user\"),\n                  messageJson.getString(\"text\"),\n                  messageJson.getString(\"photo\"),\n                  messageJson.getString(\"reaction_photo\"),\n                  messageJson.getJSONObject(\"created_at\").getString(\"date\"),\n                  messageJson.getBoolean(\"from_me\"),\n                  (!messageJson.getString(\"is_read\").equals(\"null\"))\n                      ? messageJson.getBoolean(\"is_read\")\n                      : false,\n                  messageJson.getString(\"username\"),\n                  messageJson.getString(\"to_username\"),\n                  messageJson.getBoolean(\"deleted\"));\n\n          int timeZone =\n              Integer.parseInt(messageJson.getJSONObject(\"created_at\").getString(\"timezone_type\"));\n          messageEntity.setCreatedAt(convertTime(messageEntity.getCreatedAt(), timeZone));\n\n          messageArray.add(i, messageEntity);\n        }\n      }\n    } catch (JSONException exp) {\n      Log.d(\"Reactor API: \", exp.getMessage());\n    }\n    return messageArray;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4223, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [387], "initializationEnd": [407], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["getMessage()", "d(String,String)"], "tryExpressionStart": 301, "tryExpressionEnd": 305, "tryBlockStart": 301, "tryBlockEnd": 936, "catchExpressionStart": 628, "catchExpressionEnd": 662, "catchBlockStart": 628, "catchBlockEnd": 731, "exceptionHandlingCallStart": [707, 670], "exceptionHandlingCallEnd": [723, 724], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 426, "focalAPIEnd": 457, "followUpCheck": "value == 200", "checkType": "IF", "followUpCheckExpressionStart": 480, "followUpCheckExpressionEnd": 496, "followUpCheckBlockStart": 480, "followUpCheckBlockEnd": 621, "use": ["jSONObject.getJSONArray(String)"], "useStart": [540], "useEnd": [573], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RudolfWeeber/eyes-free/tree/master/tags/LastVersionForSDK1.1/shell/src/com/google/marvin/shell/StreetLocator.java", "rawCode": "  /**\n   * Queries the map server and obtains the reverse geocoded address of the specified location.\n   *\n   * @param lat The latitude in degrees\n   * @param lon The longitude in degrees\n   * @return Returns the reverse geocoded address\n   */\n  public String getAddress(double lat, double lon) {\n    try {\n      String resp = getResult(makeGeoURL(lat, lon));\n      JSONObject jsonObj = new JSONObject(resp);\n      int code = jsonObj.getJSONObject(\"Status\").getInt(\"code\");\n      if (code == 200) {\n        return extendShorts(\n            jsonObj.getJSONArray(\"Placemark\").getJSONObject(0).getString(\"address\"));\n      }\n    } catch (MalformedURLException mue) {\n      Log.d(\"Locator\", \"Malformed URL: \" + mue.getMessage());\n    } catch (IOException e) {\n      Log.d(\"Locator\", \"Error reading from Map server: \" + e.toString());\n    } catch (JSONException e) {\n      Log.d(\"Locator\", \"Error in JSON response: \" + e.getMessage());\n    }\n    return null;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4224, "initialization": ["JSONObject jSONObject = new JSONObject(*)"], "initializationStart": [746], "initializationEnd": [780], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)", "jSONObject.getString(String)"], "configurationStart": [820, 909], "configurationEnd": [877, 957], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 989, "focalAPIEnd": 1031, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)", "value.getString(String)", "getChild(jSONObject,String)", "getChild(jSONObject,String)"], "useStart": [1060, 1132, 1511, 2582], "useEnd": [1104, 1175, 1538, 2609], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/skaegi/orion.server/tree/master/tests/org.eclipse.orion.server.tests/src/org/eclipse/orion/server/tests/servlets/git/GitMergeSquashTest.java", "rawCode": "  @Test\n  public void testMergeSquashRemovingFolders() throws Exception {\n    // see org.eclipse.jgit.api.MergeCommandTest.testMergeRemovingFolders()\n    URI workspaceLocation = createWorkspace(getMethodName());\n    IPath[] clonePaths = createTestProjects(workspaceLocation);\n\n    for (IPath clonePath : clonePaths) {\n      // clone a repo\n      JSONObject clone = clone(clonePath);\n      String cloneContentLocation = clone.getString(ProtocolConstants.KEY_CONTENT_LOCATION);\n\n      // get project/folder metadata\n      WebRequest request = getGetRequest(cloneContentLocation);\n      WebResponse response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n      JSONObject folder = new JSONObject(response.getText());\n      String folderChildrenLocation = folder.getString(ProtocolConstants.KEY_CHILDREN_LOCATION);\n      String folderLocation = folder.getString(ProtocolConstants.KEY_LOCATION);\n      JSONObject gitSection = folder.getJSONObject(GitConstants.KEY_GIT);\n      String gitIndexUri = gitSection.getString(GitConstants.KEY_INDEX);\n      String gitHeadUri = gitSection.getString(GitConstants.KEY_HEAD);\n\n      String folderName = \"folder1\";\n      request =\n          getPostFilesRequest(\n              folderLocation + \"/\", getNewDirJSON(folderName).toString(), folderName);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_CREATED, response.getResponseCode());\n      JSONObject folder1 = getChild(folder, \"folder1\");\n\n      String fileName = \"file1.txt\";\n      request =\n          getPostFilesRequest(\n              folder1.getString(ProtocolConstants.KEY_LOCATION),\n              getNewFileJSON(fileName).toString(),\n              fileName);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_CREATED, response.getResponseCode());\n\n      fileName = \"file2.txt\";\n      request =\n          getPostFilesRequest(\n              folder1.getString(ProtocolConstants.KEY_LOCATION),\n              getNewFileJSON(fileName).toString(),\n              fileName);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_CREATED, response.getResponseCode());\n\n      folderName = \"folder2\";\n      request =\n          getPostFilesRequest(\n              folderLocation + \"/\", getNewDirJSON(folderName).toString(), folderName);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_CREATED, response.getResponseCode());\n      JSONObject folder2 = getChild(folder, \"folder2\");\n\n      fileName = \"file1.txt\";\n      request =\n          getPostFilesRequest(\n              folder2.getString(ProtocolConstants.KEY_LOCATION),\n              getNewFileJSON(fileName).toString(),\n              fileName);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_CREATED, response.getResponseCode());\n\n      fileName = \"file2.txt\";\n      request =\n          getPostFilesRequest(\n              folder2.getString(ProtocolConstants.KEY_LOCATION),\n              getNewFileJSON(fileName).toString(),\n              fileName);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_CREATED, response.getResponseCode());\n\n      request = GitAddTest.getPutGitIndexRequest(gitIndexUri);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n\n      request = GitCommitTest.getPostGitCommitRequest(gitHeadUri, \"folders and files\", false);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n\n      deleteFile(folder1);\n\n      deleteFile(folder2);\n\n      request = GitAddTest.getPutGitIndexRequest(gitIndexUri);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n\n      request = GitCommitTest.getPostGitCommitRequest(gitHeadUri, \"removing folders\", false);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n\n      JSONArray commitsArray = log(gitHeadUri);\n      assertEquals(3, commitsArray.length());\n      JSONObject commit = commitsArray.getJSONObject(0);\n      assertEquals(\"removing folders\", commit.get(GitConstants.KEY_COMMIT_MESSAGE));\n      String toMerge = commit.getString(ProtocolConstants.KEY_NAME);\n      commit = commitsArray.getJSONObject(1);\n      assertEquals(\"folders and files\", commit.get(GitConstants.KEY_COMMIT_MESSAGE));\n      String toCheckout = commit.getString(ProtocolConstants.KEY_NAME);\n\n      Repository db1 = getRepositoryForContentLocation(cloneContentLocation);\n      Git git = new Git(db1);\n      git.checkout().setName(toCheckout).call();\n\n      JSONObject merge = merge(gitHeadUri, toMerge, true);\n      MergeStatus mergeResult = MergeStatus.valueOf(merge.getString(GitConstants.KEY_RESULT));\n      assertEquals(MergeStatus.FAST_FORWARD_SQUASHED, mergeResult);\n\n      request = getGetRequest(folderChildrenLocation);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n      List<JSONObject> children = getDirectoryChildren(new JSONObject(response.getText()));\n      assertNull(getChildByName(children, \"folder1\"));\n      assertNull(getChildByName(children, \"folder2\"));\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4225, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [1031], "initializationEnd": [1053], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1082, "focalAPIEnd": 1118, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getDouble(String)", "value.getDouble(String)", "jSONObject.getJSONObject(String)"], "useStart": [1147, 1231, 1443], "useEnd": [1177, 1261, 1477], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Frolle/Schmaps/tree/master/src/com/chalmers/schmaps/GoogleMapSearchLocation.java", "rawCode": "  /**\n   * Parses json response from google directions api\n   *\n   * @param returnedJson\n   */\n  public void parseJson(JSONObject returnedJson) {\n\n    JSONObject step, startLocation, endLocation;\n    int srcLat, srcLng, destLat, destLng;\n    GeoPoint geo;\n    geoList = new ArrayList<GeoPoint>();\n\n    try {\n      JSONArray routes = returnedJson.getJSONArray(\"routes\");\n      JSONObject route = routes.getJSONObject(0);\n      // Take all legs from the route\n      JSONArray legs = route.getJSONArray(\"legs\");\n      // Grab first leg\n      JSONObject leg = legs.getJSONObject(0);\n      // Grab all the steps from the led\n      JSONArray steps = leg.getJSONArray(\"steps\");\n\n      for (int count = 0; count < steps.length(); count++) {\n        Log.e(\"Json\", \"b\");\n        // the json returns start and end for each step, we only want one geopoint of each position\n        // that is why we only get the start once and then get the end\n        // we add the geopoint to an array of geopoints\n        if (count == 0) {\n          step = steps.getJSONObject(0);\n\n          startLocation = step.getJSONObject(\"start_location\");\n\n          srcLat = (int) (startLocation.getDouble(\"lat\") * CONVERTTOGEOPOINTVALUE);\n          srcLng = (int) (startLocation.getDouble(\"lng\") * CONVERTTOGEOPOINTVALUE);\n\n          geo = new GeoPoint(srcLat, srcLng);\n          geoList.add(0, geo);\n        }\n        step = steps.getJSONObject(count);\n\n        endLocation = step.getJSONObject(\"end_location\");\n        destLat = (int) (endLocation.getDouble(\"lat\") * CONVERTTOGEOPOINTVALUE);\n        destLng = (int) (endLocation.getDouble(\"lng\") * CONVERTTOGEOPOINTVALUE);\n\n        geo = new GeoPoint(destLat, destLng);\n        geoList.add(count + 1, geo);\n      }\n\n      // creata an overlay and canvas so we can draw the path\n      pathOverlay = new PathOverlay(geoList);\n      Canvas canvas = new Canvas();\n\n      // adds the overay to the list of overlays and calls the draw-method to dra it\n      mapOverlays.add(pathOverlay);\n      pathOverlay.draw(canvas, mapView, true);\n      mapView.postInvalidate();\n\n    } catch (JSONException e) {\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4226, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject!=null&&jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 96, "guardExpressionEnd": 139, "guardBlockStart": 96, "guardBlockEnd": 312, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 176, "focalAPIEnd": 208, "followUpCheck": "value.has(\"namespace\")", "checkType": "IF", "followUpCheckExpressionStart": 217, "followUpCheckExpressionEnd": 253, "followUpCheckBlockStart": 217, "followUpCheckBlockEnd": 306, "use": ["value.getString(String)"], "useStart": [261], "useEnd": [298], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bluesoft-rnd/signavio-core-mirror/tree/master/platform extensions/diagram core/src/org/oryxeditor/server/diagram/generic/GenericDiagramBuilder.java", "rawCode": "  protected String parseStencilsetNamespaceInternal(JSONObject json) throws JSONException {\n    if (json != null && json.has(\"stencilset\")) {\n      JSONObject jsonStencilset = json.getJSONObject(\"stencilset\");\n\n      if (jsonStencilset.has(\"namespace\")) return jsonStencilset.getString(\"namespace\").trim();\n    }\n    return null;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4227, "initialization": ["JSONObject jSONObject = getModules()"], "initializationStart": [2506], "initializationEnd": [2526], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["error(String,*)"], "tryExpressionStart": 2379, "tryExpressionEnd": 2383, "tryBlockStart": 2379, "tryBlockEnd": 5982, "catchExpressionStart": 5852, "catchExpressionEnd": 5878, "catchBlockStart": 5852, "catchBlockEnd": 5982, "exceptionHandlingCallStart": [5894], "exceptionHandlingCallEnd": [5967], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 3611, "focalAPIEnd": 3670, "followUpCheck": "i < value.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 4172, "followUpCheckExpressionEnd": 4220, "followUpCheckBlockStart": 4172, "followUpCheckBlockEnd": 5837, "use": ["jSONObject.getJSONObject(int)", "value.getJSONObject(int)"], "useStart": [3611, 4268], "useEnd": [3756, 4298], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Adimpression/Baby/tree/master/src/main/java/ai/baby/logic/sits9/SubscriberNotifications.java", "rawCode": "  @Timeout\n  public synchronized void timeout(final Timer timer)\n      throws IOException, SAXException, TransformerException, JSONException, SQLException {\n\n    final HBaseCrudService<GeohashSubscriber> _geohashSubscriberHBaseCrudService =\n        new HBaseCrudService<GeohashSubscriber>();\n    final HBaseCrudService<GeohashSubscriber>.Scanner _scanner =\n        _geohashSubscriberHBaseCrudService.scan(new GeohashSubscriber(), 1).returnValueBadly();\n\n    while (_scanner.getNewValue() != null) {\n      final String _newValue = _scanner.getNewValue();\n      Loggers.debug(\"Scanned value:\" + _newValue);\n      final RowResponse _rowResponse = new Gson().fromJson(_newValue, RowResponse.class);\n      Loggers.debug(\"Scanned as GSON:\" + _rowResponse.toString());\n\n      for (final Row _row : _rowResponse.Row) {\n\n        final BASE64Decoder _base64DecoderRowKey = new BASE64Decoder();\n        final byte[] _bytes = _base64DecoderRowKey.decodeBuffer(_row.key);\n        final String rowKey = new String(_bytes);\n        Loggers.debug(\"Decoded row key:\" + rowKey);\n\n        for (final Cell _cell : _row.Cell) {\n          final BASE64Decoder _base64DecoderValue = new BASE64Decoder();\n          final byte[] _valueBytes = _base64DecoderValue.decodeBuffer(_cell.$);\n          final String _cellAsString = new String(_valueBytes);\n          Loggers.debug(\"Cell as string:\" + _cellAsString);\n          final GeohashSubscriber _geohashSubscriber = new GeohashSubscriber();\n\n          final DatumReader<GeohashSubscriber> _geohashSubscriberSpecificDatumReader =\n              new SpecificDatumReader<GeohashSubscriber>(_geohashSubscriber.getSchema());\n          final BinaryDecoder _binaryDecoder =\n              DecoderFactory.get().binaryDecoder(_valueBytes, null);\n          final GeohashSubscriber _read =\n              _geohashSubscriberSpecificDatumReader.read(_geohashSubscriber, _binaryDecoder);\n          Loggers.debug(\"Decoded value avro:\" + _read.toString());\n\n          final Date now = new Date();\n          final Calendar _week = Calendar.getInstance();\n          _week.setTimeInMillis(now.getTime() + (7 * 24 * 60 * 60 * 1000));\n          final SimpleDateFormat _simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n          _simpleDateFormat.format(_week.getTime());\n\n          final StringBuffer eventList = new StringBuffer(\"\");\n\n          { // Foursquare\n            try {\n\n              _simpleDateFormat.format(_week.getTime());\n\n              final JSONObject jsonObject =\n                  Modules.getModules()\n                      .getFoursquareFactory()\n                      .getInstance(\"https://api.foursquare.com/v2/venues/explore\")\n                      .get(\n                          \"\",\n                          new HashMap<String, String>() {\n                            { // Don't worry, this is a static initializer of this map :)\n                              put(\"ll\", \"\" + _read.getLatitude() + \",\" + _read.getLongitude());\n                              put(\"radius\", \"\" + 50000); // meters\n                              put(\"intent\", \"browse\");\n                              put(\"section\", \"topPicks\");\n                              put(\n                                  \"client_secret\",\n                                  \"PODRX5YWBSLAKAYRQ5CLPEPS3WHCXWFIJ3LXF3AKH4U1BDNI\");\n                              put(\"client_id\", \"25JZAK3TQPLIPUUXPIJWXQ5NSKSPTP4SYZLUZSCTZF3UJ4YX\");\n                            }\n                          });\n\n              Loggers.debug(\"Foursquare Reply:\" + jsonObject.toString());\n\n              final JSONArray referralArray =\n                  jsonObject\n                      .getJSONObject(\"response\")\n                      .getJSONArray(\"groups\")\n                      .getJSONObject(0)\n                      .getJSONArray(\"items\");\n\n              final Document eventTemplateDocument =\n                  HTMLDocParser.getDocument(\n                      RBGet.getGlobalConfigKey(\"PAGEFILES\") + SUBSCRIBER_EMAIL_PLACE);\n              final String eventTemplate =\n                  HTMLDocParser.convertNodeToHtml(\n                      HTMLDocParser.$(\"content\", eventTemplateDocument));\n\n              for (int i = 0; i < referralArray.length(); i++) {\n\n                final JSONObject referral = referralArray.getJSONObject(i);\n                referral.getJSONObject(\"venue\").getJSONObject(\"location\").getDouble(\"lng\");\n                referral.getJSONObject(\"venue\").getJSONObject(\"location\").getDouble(\"lat\");\n                final String eventName = referral.getJSONObject(\"venue\").getString(\"name\");\n                final String eventUrl = referral.getJSONObject(\"venue\").optString(\"url\");\n                final String eventVenue =\n                    referral.getJSONObject(\"venue\").getJSONObject(\"location\").getString(\"address\");\n                Loggers.debug(\"Event name:\" + eventName);\n                eventList.append(\n                    eventTemplate\n                        .replace(\n                            \"_name_link_\",\n                            !((\"\" + eventUrl).isEmpty())\n                                ? eventUrl\n                                : (\"https://www.google.com/search?q=\"\n                                    + eventName.replaceAll(\" \", \"+\").replaceAll(\"-\", \"+\")))\n                        .replace(\n                            \"_place_link_\",\n                            \"https://maps.googleapis.com/maps/api/staticmap?sensor=false&size=600x600&markers=color:blue%7Clabel:S%7C\"\n                                + _read.getLatitude().toString()\n                                + \",\"\n                                + _read.getLongitude().toString())\n                        .replace(\"_name_\", eventName)\n                        .replace(\"_place_\", eventVenue)\n                        .replace(\"_date_\", eventName));\n              }\n            } catch (final Throwable t) {\n              Loggers.error(\"Error appending Foursquare data to Geohash Subscriber\", t);\n            }\n          }\n\n          final String template =\n              HTMLDocParser.getDocumentAsString(\n                  RBGet.getGlobalConfigKey(\"PAGEFILES\") + EMAIL_FRAME);\n          final Document email =\n              HTMLDocParser.getDocument(RBGet.getGlobalConfigKey(\"PAGEFILES\") + SUBSCRIBER_EMAIL);\n          final String _content =\n              HTMLDocParser.convertNodeToHtml(HTMLDocParser.$(\"content\", email));\n          final Parameter _unsubscribeLink =\n              new Parameter(\"http://www.ilikeplaces.com/unsubscribe/\")\n                  .append(Unsubscribe.TYPE, Unsubscribe.Type.GeohashSubscribe.name(), true)\n                  .append(Unsubscribe.VALUE, rowKey);\n          final String finalEmail =\n              template.replace(\n                  \"_FrameContent_\",\n                  _content\n                      .replace(\" ___||_\", eventList.toString())\n                      .replace(\"_unsubscribe_link_\", _unsubscribeLink.get()));\n          Loggers.debug(\"Final email:\" + finalEmail);\n          sendMailLocal.sendAsHTML(\n              _read.getEmailId().toString(), \"Thank God it's Friday!\", finalEmail);\n        }\n      }\n\n      _geohashSubscriberHBaseCrudService.scan(new GeohashSubscriber(), _scanner);\n    }\n\n    Loggers.debug(\"Completed scanner\");\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4228, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,*)"], "tryExpressionStart": 126, "tryExpressionEnd": 130, "tryBlockStart": 126, "tryBlockEnd": 531, "catchExpressionStart": 444, "catchExpressionEnd": 464, "catchBlockStart": 444, "catchBlockEnd": 531, "exceptionHandlingCallStart": [472], "exceptionHandlingCallEnd": [524], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 225, "focalAPIEnd": 256, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Tapad/tapestry-android-sdk/tree/master/tapestry/src/com/tapad/tapestry/TapestryResponse.java", "rawCode": "  /**\n   * Returns the analytics values.\n   *\n   * @return map of values\n   */\n  public Map<String, String> analytics() {\n    try {\n      HashMap<String, String> map = new HashMap<String, String>();\n      JSONObject object = json.getJSONObject(\"analytics\");\n      JSONArray names = object.names();\n      for (int i = 0; i < names.length(); i++)\n        map.put(names.getString(i), object.getString(names.getString(i)));\n      return map;\n    } catch (Exception e) {\n      Logging.e(\"Could not parse analytics in \" + json, e);\n    }\n    return new HashMap<String, String>();\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4229, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [408], "initializationEnd": [436], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)"], "configurationStart": [460], "configurationEnd": [486], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1040, "focalAPIEnd": 1097, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.keys()", "value.get(String)"], "useStart": [1138, 1370], "useEnd": [1164, 1399], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/SpagoBI-V4x/tree/master/SpagoBIQbeEngine/src/it/eng/spagobi/engines/worksheet/serializer/json/WorkSheetJSONDeserializer.java", "rawCode": "  private void deserializeOptions(\n      JSONObject workSheetDefinitionJSON, WorkSheetDefinition workSheetDefinition)\n      throws Exception {\n    JSONArray optionsJSON =\n        workSheetDefinitionJSON.getJSONArray(WorkSheetSerializationUtils.FIELDS_OPTIONS);\n    WorksheetFieldsOptions options = new WorksheetFieldsOptions();\n    for (int i = 0; i < optionsJSON.length(); i++) {\n\n      JSONObject aField = optionsJSON.getJSONObject(i);\n      String nature = aField.getString(\"nature\");\n      Field field = null;\n      if (nature.equals(\"postLineCalculated\")\n          || nature.equals(\"segment_attribute\")\n          || nature.equals(\"attribute\")) {\n        Attribute attribute =\n            (Attribute)\n                SerializationManager.deserialize(aField, \"application/json\", Attribute.class);\n        field = attribute;\n      } else {\n        Measure measure =\n            (Measure) SerializationManager.deserialize(aField, \"application/json\", Measure.class);\n        field = measure;\n      }\n\n      JSONObject optionsForFieldJSON = aField.getJSONObject(WorkSheetSerializationUtils.OPTIONS);\n      Iterator optionsForFieldKeysIt = optionsForFieldJSON.keys();\n      List<FieldOption> fieldOptionList = new ArrayList<FieldOption>();\n      while (optionsForFieldKeysIt.hasNext()) {\n        String name = (String) optionsForFieldKeysIt.next();\n        Object value = optionsForFieldJSON.get(name);\n        FieldOption o = WorksheetFieldsOptions.createOption(field, name, value);\n        fieldOptionList.add(o);\n      }\n\n      FieldOptions fieldOptions = new FieldOptions();\n      fieldOptions.setField(field);\n      fieldOptions.setOptions(fieldOptionList);\n\n      options.addFieldOptions(fieldOptions);\n    }\n    workSheetDefinition.setFieldsOptions(options);\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4230, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [264], "initializationEnd": [287], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 314, "focalAPIEnd": 359, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)", "value.getString(String)", "jSONObject.getJSONObject(String)"], "useStart": [380, 428, 480], "useEnd": [404, 454, 523], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dashanzi/idiomgame/tree/master/src/dashanzi/android/util/Json2BeansUtil.java", "rawCode": "  private static GetUserInfoResponseMsg getGetUserInfoResponseFromJsonStr(String jsonStr)\n      throws JSONException {\n    if (jsonStr == null) {\n      return null;\n    }\n\n    GetUserInfoResponseMsg result = new GetUserInfoResponseMsg();\n    JSONObject dataJson = new JSONObject(jsonStr);\n\n    JSONObject header = dataJson.getJSONObject(Constants.JSON.HEADER);\n    result.setType(header.getString(\"type\"));\n    result.setStatus(header.getString(\"status\"));\n\n    JSONObject body = dataJson.getJSONObject(Constants.JSON.BODY);\n\n    result.setName(body.getString(\"name\"));\n    result.setGender(body.getString(\"gender\"));\n    result.setScore(body.getString(\"score\"));\n    result.setLevel(body.getString(\"level\"));\n\n    return result;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4231, "initialization": ["JSONObject jSONObject = new JSONObject()", "String name = JSONObject.getString(String)"], "initializationStart": [2145, 2193], "initializationEnd": [2161, 2218], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.put(String,String)", "name.indexOf(*)", "name.startsWith(String)", "name.substring(int,int)"], "configurationStart": [913, 2345, 2561, 2632], "configurationEnd": [1025, 2388, 2589, 2687], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 3393, "focalAPIEnd": 3438, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)"], "useStart": [3393], "useEnd": [3463], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/collectionspace/application/tree/master/cspi-webui/src/main/java/org/collectionspace/chain/csp/webui/record/RecordRead.java", "rawCode": "  private JSONArray getPermissions(Storage storage, JSONObject activePermissionInfo)\n      throws ExistException, UnimplementedException, UnderlyingStorageException, JSONException,\n          UIException {\n    final String WORKFLOW_DELETE_RESOURCE_TAIL = WORKFLOW_SUB_RESOURCE + \"delete\";\n    final String WORKFLOW_LOCK_RESOURCE_TAIL = WORKFLOW_SUB_RESOURCE + \"lock\";\n\n    JSONArray set = new JSONArray();\n    JSONObject activePermissions = new JSONObject();\n\n    // log.info(activePermissionInfo.toString());\n    // we are ignoring pagination so this will return the first 40 roles only\n    // UI doesn't know what it wants to do about pagination etc\n    // mark active roles\n    if (activePermissionInfo.has(\"permission\")) {\n      JSONArray active = activePermissionInfo.getJSONArray(\"permission\");\n      for (int j = 0; j < active.length(); j++) {\n        if (active.getJSONObject(j).length() != 0) {\n          activePermissions.put(\n              active.getJSONObject(j).getString(\"resourceName\"), active.getJSONObject(j));\n        }\n      }\n    }\n\n    JSONObject mergedPermissions = new JSONObject();\n\n    // get all permissions\n    int pageNum = 0;\n    JSONObject permrestrictions = new JSONObject();\n    permrestrictions.put(\"queryTerm\", \"actGrp\");\n    permrestrictions.put(\"queryString\", \"CRUDL\");\n    // Passing page size 0 gets all the perms in one call.\n    permrestrictions.put(\"pageSize\", Integer.toString(pageNum));\n    String permbase = spec.getRecordByWebUrl(\"permission\").getID();\n    JSONObject returndata = searcher.getJSON(storage, permrestrictions, \"items\", permbase);\n\n    // While loop since perms do not return pagination info - must call till no more\n    // while(returndata.has(\"items\") && returndata.getJSONArray(\"items\").length()>0){\n    // Using pageSize=0, we get all perms in one call, so no need to loop\n    if (returndata.has(\"items\") && returndata.getJSONArray(\"items\").length() > 0) {\n\n      // merge active and nonactive\n      JSONArray items = returndata.getJSONArray(\"items\");\n      for (int i = 0; i < items.length(); i++) {\n        JSONObject item = items.getJSONObject(i);\n        JSONObject permission = new JSONObject();\n        String resourceName = item.getString(\"summary\");\n        String resourceNameUI;\n        // Need to get baseResource for workflow perms\n        int startWorkflowSubResource = resourceName.indexOf(WORKFLOW_SUB_RESOURCE);\n        if (startWorkflowSubResource > 0) { // Contains the workflow subresource\n          // Get the base resource that the workflow is related to\n          int start = (resourceName.startsWith(\"/\")) ? 1 : 0;\n          String baseResource = resourceName.substring(start, startWorkflowSubResource);\n          resourceNameUI = Generic.ResourceNameUI(spec, baseResource);\n        } else {\n          resourceNameUI = Generic.ResourceNameUI(spec, resourceName);\n        }\n        permission.put(\"resourceName\", resourceNameUI);\n        String permlevel = \"none\";\n\n        Record recordForPermResource = Generic.RecordNameServices(spec, resourceNameUI);\n\n        if ((startWorkflowSubResource > 0) && (recordForPermResource != null)) {\n          // Handle the lock workflow resource\n          if (recordForPermResource.supportsLocking()\n              && resourceName.endsWith(\"lock\")\n              && activePermissions.has(resourceName)\n              && Generic.PermissionIncludesWritable(\n                  activePermissions.getJSONObject(resourceName).getString(\"actionGroup\"))) {\n            // If we have write or delete perms on the workflow resource, set the permLevel\n            // on the base resource.\n            // Should be, but UI not ready: permission.put(\"permission\", Generic.LOCK_PERMISSION);\n            if (!mergedPermissions.has(resourceNameUI)) {\n              // With no other knowledge, assume lock perm means writable\n              permission.put(\"permission\", Generic.WRITE_PERMISSION);\n              mergedPermissions.put(resourceNameUI, permission);\n            } else {\n              // We could check it and make sure it makes sense, but we have to trust that the UI\n              // has\n              // done something reasonable by not combining lock perm with read-only or other\n              // silliness.\n            }\n          }\n          // Handle the delete workflow resource\n          else if (recordForPermResource.hasSoftDeleteMethod()\n              && resourceName.endsWith(\"delete\")\n              && activePermissions.has(resourceName)\n              && Generic.PermissionIncludesWritable(\n                  activePermissions.getJSONObject(resourceName).getString(\"actionGroup\"))) {\n            // If we have write or delete perms on the workflow resource, set the permLevel\n            // on the base resource.\n            permission.put(\"permission\", Generic.DELETE_PERMISSION);\n            mergedPermissions.put(resourceNameUI, permission);\n          } else {\n            // Filter these out - no need to model them, as we do not support them\n            // This is a performance improvement so we do not have to handle them on\n            // update.\n          }\n        } else if (activePermissions.has(resourceName) && !mergedPermissions.has(resourceNameUI)) {\n          permlevel =\n              Generic.PermissionLevelString(\n                  activePermissions.getJSONObject(resourceName).getString(\"actionGroup\"));\n\n          permission.put(\"permission\", permlevel);\n          mergedPermissions.put(resourceNameUI, permission);\n        } else if (!mergedPermissions.has(resourceNameUI)) {\n          permlevel = \"none\";\n\n          permission.put(\"permission\", permlevel);\n          mergedPermissions.put(resourceNameUI, permission);\n        }\n      }\n\n      // pageNum++;\n      // permrestrictions.put(\"pageNum\", Integer.toString(pageNum));\n      // returndata = searcher.getJSON(storage,permrestrictions,\"items\",permbase);\n    }\n\n    // change soft workflow to main Delete\n\n    // now put the permissions in order...\n    String[] recordsweburl = spec.getAllRecordsOrdered();\n\n    for (String weburl : recordsweburl) {\n      if (mergedPermissions.has(weburl)) {\n        Object value = mergedPermissions.get(weburl);\n        set.put(value);\n      }\n    }\n    Iterator rit = mergedPermissions.keys();\n    while (rit.hasNext()) {\n      String key = (String) rit.next();\n      Object value = mergedPermissions.get(key);\n\n      if (!spec.hasRecordByWebUrl(key)) {\n        set.put(value);\n      }\n    }\n\n    return set;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4232, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [1249], "initializationEnd": [1273], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 1219, "tryExpressionEnd": 1223, "tryBlockStart": 1219, "tryBlockEnd": 2091, "catchExpressionStart": 1950, "catchExpressionEnd": 1974, "catchBlockStart": 1950, "catchBlockEnd": 2091, "exceptionHandlingCallStart": [2037], "exceptionHandlingCallEnd": [2056], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1398, "focalAPIEnd": 1428, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getJSONArray(String)", "jSONObject.getString(String)"], "useStart": [1469, 1745], "useEnd": [1500, 1774], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bryanjimenez/empanada/tree/master/cache/cache/src/cache_controller/FileReader.java", "rawCode": "  public void run() {\n    runThread = true;\n\n    while (runThread) {\n      // Sleep on every iteration\n      try {\n\n        Thread.sleep(SLEEP_TIME);\n      } catch (InterruptedException e) {\n        // Should never happen\n        e.printStackTrace();\n      }\n\n      // Read file\n      File outputFile = new File(OUTPUT_FILE_LOCATION);\n\n      if (outputFile.exists()) {\n        // Get scanner for the file\n        Scanner filescan = null;\n        try {\n          filescan = new Scanner(outputFile);\n        } catch (FileNotFoundException e) {\n          // File was just deleted\n          e.printStackTrace();\n          continue;\n        }\n\n        Map<String, String[]> parsedTweets = new HashMap<String, String[]>();\n\n        while (filescan.hasNextLine()) {\n          String line = filescan.nextLine();\n\n          // Get values from tweet\n          String[] lineSplit = line.split(\"\\t\");\n          String tweetFilter = lineSplit[FILE_FILTER_INDEX];\n          String tweetStr = lineSplit[FILE_JSON_INDEX];\n          String tweetRating = lineSplit[FILE_RATING_INDEX];\n\n          JSONObject tweetJson = null;\n          String tweetID = null;\n          String tweetLat = null;\n          String tweetLng = null;\n\n          try {\n            tweetJson = new JSONObject(tweetStr);\n\n            // Get coordinates\n            if (tweetStr.indexOf(\"\\\"geo\\\": null\") == -1) {\n\n              JSONObject geo = tweetJson.getJSONObject(\"geo\");\n\n              JSONArray coordinates = geo.getJSONArray(\"coordinates\");\n              tweetLat = Double.toString(coordinates.getDouble(JSON_LAT_INDEX)); // Latitude\n              tweetLng = Double.toString(coordinates.getDouble(JSON_LONG_INDEX)); // Longitude\n\n              // Get tweet ID\n              tweetID = tweetJson.getString(\"id_str\"); // ID\n\n              String[] columns = {tweetFilter, tweetStr, tweetLat, tweetLng, tweetRating};\n              parsedTweets.put(tweetID, columns);\n            }\n          } catch (JSONException e) {\n            // json not formatted properly, skip\n            e.printStackTrace();\n            continue;\n          }\n        }\n\n        filescan.close();\n\n        // Add to HBase\n        HBaseConnection hbase = new HBaseConnection();\n\n        try {\n          hbase.put(parsedTweets);\n        } catch (IOException e) {\n          // Not written to HBase, don't delete the file\n          e.printStackTrace();\n          continue;\n        }\n\n        // Erase file\n        outputFile.setWritable(true);\n        outputFile.delete();\n      }\n    }\n\n    threadFinished = true;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4233, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)", "JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [417, 959], "initializationEnd": [445, 987], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)", "jSONObject.getJSONArray(String)"], "configurationStart": [516, 613], "configurationEnd": [543, 641], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1014, "focalAPIEnd": 1042, "followUpCheck": "\"Task\".equals(value)", "checkType": "IF", "followUpCheckExpressionStart": 1067, "followUpCheckExpressionEnd": 1096, "followUpCheckBlockStart": 1067, "followUpCheckBlockEnd": 1554, "use": ["jSONObject.getJSONObject(String)", "enrichBpmn20AssignmentConfig(jSONObject,Map<String, JSONObject>)", "enrichBpmn20JavaTask(jSONObject,Map<String, JSONObject>)", "enrichBpmn20SequenceFlow(jSONObject,Map<String, JSONObject>,Map<String, JSONObject>)"], "useStart": [1125, 1229, 1306, 1419], "useEnd": [1156, 1277, 1346, 1476], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bluesoft-rnd/signavio-core-mirror/tree/master/platform/src/pl/net/bluesoft/rnd/processtool/editor/AperteWorkflowDefinitionGenerator.java", "rawCode": "  private JSONObject enrichModelerDataForBpmn20() throws JSONException {\n    JSONObject jsonObj = new JSONObject(json);\n    JSONArray childShapes = jsonObj.getJSONArray(\"childShapes\");\n    Map<String, JSONObject> outgoingMap = new HashMap<String, JSONObject>();\n    Map<String, JSONObject> resourceIdMap = new HashMap<String, JSONObject>();\n    for (int i = 0; i < childShapes.length(); i++) {\n      JSONObject obj = childShapes.getJSONObject(i);\n      fixBounds(obj);\n      fixDockers(obj);\n      resourceIdMap.put(obj.getString(\"resourceId\"), obj);\n      if (obj.has(\"outgoing\")) {\n        JSONArray outgoing = obj.getJSONArray(\"outgoing\");\n        for (int j = 0; j < outgoing.length(); j++) {\n          JSONObject outobj = outgoing.getJSONObject(j);\n          outgoingMap.put(outobj.getString(\"resourceId\"), obj);\n        }\n      }\n    } // update user step with assignment data\n    for (int i = 0; i < childShapes.length(); i++) {\n      JSONObject obj = childShapes.getJSONObject(i);\n      String stencilId = obj.getJSONObject(\"stencil\").getString(\"id\");\n\n      if (\"Task\".equals(stencilId)) {\n        String taskType = obj.getJSONObject(\"properties\").getString(\"tasktype\");\n        if (\"User\".equals(taskType)) {\n          enrichBpmn20AssignmentConfig(obj, resourceIdMap);\n        } else {\n          enrichBpmn20JavaTask(obj, resourceIdMap);\n        }\n      } else if (\"SequenceFlow\".equals(stencilId)) {\n        enrichBpmn20SequenceFlow(obj, outgoingMap, resourceIdMap);\n      } else if (\"Exclusive_Databased_Gateway\".equals(stencilId)) {\n\n      }\n    }\n    return jsonObj;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4234, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [822], "initializationEnd": [848], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)", "jSONObject.optJSONObject(String)"], "configurationStart": [871, 961], "configurationEnd": [902, 994], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1041, "focalAPIEnd": 1075, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)"], "useStart": [1103], "useEnd": [1133], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/znerd/xins/tree/master/src/tests/org/xins/tests/server/JSONRPCCallingConventionTests.java", "rawCode": "  /**\n   * Posts JSON-RPC 1.1 request.\n   *\n   * @param randomFive A randomly generated String.\n   * @param success <code>true</code> if the expected result should be successful, <code>false\n   *     </code> otherwise.\n   * @throws Throwable If anything goes wrong.\n   */\n  private void postJSONRPCRequest1_1(String randomFive, boolean success) throws Throwable {\n    String destination = AllTests.url() + \"allinone/?_convention=_xins-jsonrpc\";\n    String input =\n        \"{ \\\"version\\\" : \\\"1.1\\\", \\\"method\\\" : \\\"ResultCode\\\", \\\"params\\\" : { \\\"useDefault\\\" : false, \\\"inputText\\\" : \\\"\"\n            + randomFive\n            + \"\\\" } }\";\n    String jsonResult =\n        CallingConventionTests.postData(destination, input, \"application/json\", 200);\n    // System.err.println(\"1_1: \" + jsonResult);\n    JSONObject jsonObject = new JSONObject(jsonResult);\n    String version = jsonObject.getString(\"version\");\n    assertEquals(\"1.1\", version);\n    JSONObject error = jsonObject.optJSONObject(\"error\");\n    if (success) {\n      JSONObject result = jsonObject.getJSONObject(\"result\");\n      String outputText = result.getString(\"outputText\");\n      assertEquals(\"Incorrect result received: \" + outputText, randomFive + \" added.\", outputText);\n      assertNull(error);\n    } else {\n      assertNotNull(error);\n      String errorName = error.getString(\"name\");\n      assertEquals(\"Incorrect error code received: \" + errorName, \"AlreadySet\", errorName);\n      int errorCode = error.getInt(\"code\");\n      assertTrue(errorCode >= 100 && errorCode <= 999);\n      String errorMessage = error.getString(\"message\");\n      assertEquals(\n          \"Unexpected error message: \" + errorMessage,\n          \"The parameter has already been given.\",\n          errorMessage);\n      JSONObject errorParams = error.getJSONObject(\"error\");\n      int count = errorParams.getInt(\"count\");\n      assertTrue(count > 0);\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4235, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [694], "initializationEnd": [714], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getInt(String)", "jSONObject.getString(String)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)"], "configurationStart": [765, 809, 865, 1107], "configurationEnd": [780, 836, 888, 1132], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1944, "focalAPIEnd": 1968, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)", "jSONObject.getString(String)", "jSONObject.getJSONArray(String)"], "useStart": [1995, 2057, 2117], "useEnd": [2024, 2083, 2144], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cangevine/STEAMnet/tree/master/android/src/APIHandlers/GetIdeaForDetail.java", "rawCode": "    Idea parseData(String data) throws JSONException {\n      // Ideas\n      final String ID = \"id\";\n      final String DESCRIPTION = \"description\";\n      final String TAGS = \"tags\";\n      final String SPARKS = \"sparks\";\n      final String USER = \"user\";\n      // Sparks (currently unused)\n      final String SPARK_TYPE = \"spark_type\";\n      final String CONTENT_TYPE = \"content_type\";\n      final String CONTENT = \"content\";\n      final String CREATED_AT = \"created_at\";\n      final String COMMENTS = \"comments\";\n      final String COMMENT_TEXT = \"comment_text\";\n      final String NAME = \"name\";\n      final String FILE = \"file\";\n\n      // getting JSON string from URL\n      JSONObject json = new JSONObject(data);\n\n      // Getting Idea parameters\n      int id = json.getInt(ID);\n      String description = json.getString(DESCRIPTION);\n      JSONArray tagsJSON = json.getJSONArray(TAGS);\n      String[] tags = new String[tagsJSON.length()];\n      for (int i = 0; i < tagsJSON.length(); i++) {\n        tags[i] = tagsJSON.getString(i);\n      }\n\n      // Getting Array of Sparks\n      JSONArray sparksJSON = json.getJSONArray(SPARKS);\n      Spark[] sparks = new Spark[sparksJSON.length()];\n      for (int i = 0; i < sparksJSON.length(); i++) {\n        Log.v(\"Get idea for detail\", \"One spark retrieved\");\n        JSONObject s = sparksJSON.getJSONObject(i);\n\n        int sparkId = s.getInt(ID);\n        String sparkDate = s.getString(CREATED_AT);\n        char sparkContentType = s.getString(CONTENT_TYPE).charAt(0);\n        char sparkType = s.getString(SPARK_TYPE).charAt(0);\n        String content = s.getString(CONTENT);\n\n        Spark newSpark = new Spark(sparkId, sparkType, sparkContentType, content, sparkDate);\n        if (s.has(FILE)) {\n          String fileUrl = s.getString(FILE);\n          newSpark.setCloudLink(fileUrl);\n        }\n        sparks[i] = newSpark;\n      }\n      // Getting Array of Users\n      JSONObject firstUserJSON = json.getJSONObject(USER);\n      String firstUser = firstUserJSON.getString(NAME);\n\n      String firstCreatedAt = json.getString(CREATED_AT);\n\n      JSONArray ideaComments = json.getJSONArray(COMMENTS);\n      Comment[] comments = new Comment[ideaComments.length()];\n      for (int i = 0; i < ideaComments.length(); i++) {\n        JSONObject c = ideaComments.getJSONObject(i);\n        int curCommentId = c.getInt(ID);\n        String curCommentContent = c.getString(COMMENT_TEXT);\n        JSONObject curCommentUser = c.getJSONObject(USER);\n        String curCommentUsername = curCommentUser.getString(NAME);\n        Comment newComment = new Comment(curCommentId, curCommentContent, curCommentUsername);\n        comments[i] = newComment;\n      }\n\n      return new Idea(id, description, tags, sparks, firstUser, firstCreatedAt, comments);\n    }\n"}, {"dataset": "getJSONObject", "exampleID": 4236, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [270], "initializationEnd": [291], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)"], "configurationStart": [315], "configurationEnd": [340], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 373, "focalAPIEnd": 403, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)", "value.isNull(String)", "value.isNull(String)", "value.isNull(String)", "value.isNull(String)", "value.isNull(String)", "value.optString(String,String)", "value.getInt(String)"], "useStart": [449, 505, 606, 705, 802, 896, 1003, 1068], "useEnd": [484, 537, 637, 736, 831, 926, 1046, 1099], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cloudspokes/mobile_campus/tree/master/aau/android/VFConnector/src/com/salesforce/androidsdk/phonegap/SmartStorePlugin.java", "rawCode": "  /**\n   * Native implementation of pgQuerySoup\n   *\n   * @param args\n   * @param callbackId\n   * @return\n   * @throws JSONException\n   */\n  private PluginResult querySoup(JSONArray args, String callbackId) throws JSONException {\n    // Parse args\n    JSONObject arg0 = args.getJSONObject(0);\n    String soupName = arg0.getString(SOUP_NAME);\n    JSONObject querySpecJson = arg0.getJSONObject(QUERY_SPEC);\n    QueryType queryType = QueryType.valueOf(querySpecJson.getString(QUERY_TYPE));\n    String path = querySpecJson.isNull(INDEX_PATH) ? null : querySpecJson.getString(INDEX_PATH);\n    String matchKey = querySpecJson.isNull(MATCH_KEY) ? null : querySpecJson.getString(MATCH_KEY);\n    String beginKey = querySpecJson.isNull(BEGIN_KEY) ? null : querySpecJson.getString(BEGIN_KEY);\n    String endKey = querySpecJson.isNull(END_KEY) ? null : querySpecJson.getString(END_KEY);\n    String likeKey = querySpecJson.isNull(LIKE_KEY) ? null : querySpecJson.getString(LIKE_KEY);\n    Order order = Order.valueOf(querySpecJson.optString(ORDER, \"ascending\"));\n    int pageSize = querySpecJson.getInt(PAGE_SIZE);\n\n    // Building query spec\n    QuerySpec querySpec = null;\n    switch (queryType) {\n      case exact:\n        querySpec = QuerySpec.buildExactQuerySpec(path, matchKey, pageSize);\n        break;\n      case range:\n        querySpec = QuerySpec.buildRangeQuerySpec(path, beginKey, endKey, order, pageSize);\n        break;\n      case like:\n        querySpec = QuerySpec.buildLikeQuerySpec(path, likeKey, order, pageSize);\n        break;\n      default:\n        throw new RuntimeException(\"Fell through switch: \" + queryType);\n    }\n\n    // Run query\n    SmartStore smartStore = ForceApp.APP.getSmartStore();\n    int countRows = smartStore.countQuerySoup(soupName, querySpec);\n    int totalPages = countRows / querySpec.pageSize + 1;\n\n    // Build store cursor\n    StoreCursor storeCursor = new StoreCursor(soupName, querySpec, totalPages, 0);\n    storeCursors.put(storeCursor.cursorId, storeCursor);\n\n    // Build json result\n    JSONObject result = storeCursor.toJSON(smartStore);\n\n    // Done\n    return new PluginResult(PluginResult.Status.OK, result);\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4237, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["d(*,String)"], "tryExpressionStart": 1092, "tryExpressionEnd": 1096, "tryBlockStart": 1092, "tryBlockEnd": 3172, "catchExpressionStart": 3096, "catchExpressionEnd": 3121, "catchBlockStart": 3096, "catchBlockEnd": 3172, "exceptionHandlingCallStart": [3129], "exceptionHandlingCallEnd": [3165], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1177, "focalAPIEnd": 1206, "followUpCheck": "true || value != null", "checkType": "IF", "followUpCheckExpressionStart": 1214, "followUpCheckExpressionEnd": 1254, "followUpCheckBlockStart": 1214, "followUpCheckBlockEnd": 3089, "use": ["getJsonString(value,String)", "getJsonString(value,String)", "getJsonString(value,String)", "getJsonString(value,String)", "getJsonString(value,String)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)", "getJsonString(jSONObject,String)", "getJsonString(jSONObject,String)", "jSONObject.getJSONArray(String)", "getJsonString(jSONObject,String)", "jSONObject.getJSONArray(String)"], "useStart": [1945, 2169, 2392, 2602, 2841, 3256, 5474, 7664, 11750, 14642, 16625, 17172, 17821, 20038, 21099], "useEnd": [1978, 2202, 2424, 2640, 2879, 3292, 5504, 7697, 11787, 14669, 16655, 17206, 17849, 20072, 21129], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cloudspokes/mobile_campus/tree/master/aau/android/SalesforceSDK/libs/incubator-cordova-android-framework/src/org/apache/cordova/ContactAccessorSdk5.java", "rawCode": "  /**\n   * Creates a new contact and stores it in the database\n   *\n   * @param id the raw contact id which is required for linking items to the contact\n   * @param contact the contact to be saved\n   * @param account the account to be saved under\n   */\n  private String modifyContact(\n      String id, JSONObject contact, String accountType, String accountName) {\n    // Get the RAW_CONTACT_ID which is needed to insert new values in an already existing contact.\n    // But not needed to update existing values.\n    int rawId = (new Integer(getJsonString(contact, \"rawId\"))).intValue();\n\n    // Create a list of attributes to add to the contact database\n    ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();\n\n    // Add contact type\n    ops.add(\n        ContentProviderOperation.newUpdate(ContactsContract.RawContacts.CONTENT_URI)\n            .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, accountType)\n            .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, accountName)\n            .build());\n\n    // Modify name\n    JSONObject name;\n    try {\n      String displayName = getJsonString(contact, \"displayName\");\n      name = contact.getJSONObject(\"name\");\n      if (displayName != null || name != null) {\n        ContentProviderOperation.Builder builder =\n            ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                .withSelection(\n                    ContactsContract.Data.CONTACT_ID\n                        + \"=? AND \"\n                        + ContactsContract.Data.MIMETYPE\n                        + \"=?\",\n                    new String[] {\n                      id, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE\n                    });\n\n        if (displayName != null) {\n          builder.withValue(\n              ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, displayName);\n        }\n\n        String familyName = getJsonString(name, \"familyName\");\n        if (familyName != null) {\n          builder.withValue(\n              ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME, familyName);\n        }\n        String middleName = getJsonString(name, \"middleName\");\n        if (middleName != null) {\n          builder.withValue(\n              ContactsContract.CommonDataKinds.StructuredName.MIDDLE_NAME, middleName);\n        }\n        String givenName = getJsonString(name, \"givenName\");\n        if (givenName != null) {\n          builder.withValue(ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME, givenName);\n        }\n        String honorificPrefix = getJsonString(name, \"honorificPrefix\");\n        if (honorificPrefix != null) {\n          builder.withValue(\n              ContactsContract.CommonDataKinds.StructuredName.PREFIX, honorificPrefix);\n        }\n        String honorificSuffix = getJsonString(name, \"honorificSuffix\");\n        if (honorificSuffix != null) {\n          builder.withValue(\n              ContactsContract.CommonDataKinds.StructuredName.SUFFIX, honorificSuffix);\n        }\n\n        ops.add(builder.build());\n      }\n    } catch (JSONException e1) {\n      Log.d(LOG_TAG, \"Could not get name\");\n    }\n\n    // Modify phone numbers\n    JSONArray phones = null;\n    try {\n      phones = contact.getJSONArray(\"phoneNumbers\");\n      if (phones != null) {\n        for (int i = 0; i < phones.length(); i++) {\n          JSONObject phone = (JSONObject) phones.get(i);\n          String phoneId = getJsonString(phone, \"id\");\n          // This is a new phone so do a DB insert\n          if (phoneId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE);\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Phone.NUMBER, getJsonString(phone, \"value\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Phone.TYPE,\n                getPhoneType(getJsonString(phone, \"type\")));\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing phone so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.Phone._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {\n                          phoneId, ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE\n                        })\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Phone.NUMBER,\n                        getJsonString(phone, \"value\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Phone.TYPE,\n                        getPhoneType(getJsonString(phone, \"type\")))\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get phone numbers\");\n    }\n\n    // Modify emails\n    JSONArray emails = null;\n    try {\n      emails = contact.getJSONArray(\"emails\");\n      if (emails != null) {\n        for (int i = 0; i < emails.length(); i++) {\n          JSONObject email = (JSONObject) emails.get(i);\n          String emailId = getJsonString(email, \"id\");\n          // This is a new email so do a DB insert\n          if (emailId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE);\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Email.DATA, getJsonString(email, \"value\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Email.TYPE,\n                getContactType(getJsonString(email, \"type\")));\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing email so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.Email._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {\n                          emailId, ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE\n                        })\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Email.DATA, getJsonString(email, \"value\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Email.TYPE,\n                        getContactType(getJsonString(email, \"type\")))\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get emails\");\n    }\n\n    // Modify addresses\n    JSONArray addresses = null;\n    try {\n      addresses = contact.getJSONArray(\"addresses\");\n      if (addresses != null) {\n        for (int i = 0; i < addresses.length(); i++) {\n          JSONObject address = (JSONObject) addresses.get(i);\n          String addressId = getJsonString(address, \"id\");\n          // This is a new address so do a DB insert\n          if (addressId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE);\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.TYPE,\n                getAddressType(getJsonString(address, \"type\")));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS,\n                getJsonString(address, \"formatted\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.STREET,\n                getJsonString(address, \"streetAddress\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.CITY,\n                getJsonString(address, \"locality\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.REGION,\n                getJsonString(address, \"region\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE,\n                getJsonString(address, \"postalCode\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.COUNTRY,\n                getJsonString(address, \"country\"));\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing address so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.StructuredPostal._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {\n                          addressId,\n                          ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE\n                        })\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.TYPE,\n                        getAddressType(getJsonString(address, \"type\")))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS,\n                        getJsonString(address, \"formatted\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.STREET,\n                        getJsonString(address, \"streetAddress\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.CITY,\n                        getJsonString(address, \"locality\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.REGION,\n                        getJsonString(address, \"region\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE,\n                        getJsonString(address, \"postalCode\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.COUNTRY,\n                        getJsonString(address, \"country\"))\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get addresses\");\n    }\n\n    // Modify organizations\n    JSONArray organizations = null;\n    try {\n      organizations = contact.getJSONArray(\"organizations\");\n      if (organizations != null) {\n        for (int i = 0; i < organizations.length(); i++) {\n          JSONObject org = (JSONObject) organizations.get(i);\n          String orgId = getJsonString(org, \"id\");\n          // This is a new organization so do a DB insert\n          if (orgId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE);\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Organization.TYPE,\n                getOrgType(getJsonString(org, \"type\")));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Organization.DEPARTMENT,\n                getJsonString(org, \"department\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Organization.COMPANY, getJsonString(org, \"name\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Organization.TITLE, getJsonString(org, \"title\"));\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing organization so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.Organization._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {\n                          orgId, ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE\n                        })\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Organization.TYPE,\n                        getOrgType(getJsonString(org, \"type\")))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Organization.DEPARTMENT,\n                        getJsonString(org, \"department\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Organization.COMPANY,\n                        getJsonString(org, \"name\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Organization.TITLE,\n                        getJsonString(org, \"title\"))\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get organizations\");\n    }\n\n    // Modify IMs\n    JSONArray ims = null;\n    try {\n      ims = contact.getJSONArray(\"ims\");\n      if (ims != null) {\n        for (int i = 0; i < ims.length(); i++) {\n          JSONObject im = (JSONObject) ims.get(i);\n          String imId = getJsonString(im, \"id\");\n          // This is a new IM so do a DB insert\n          if (imId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.Im.CONTENT_ITEM_TYPE);\n            contentValues.put(ContactsContract.CommonDataKinds.Im.DATA, getJsonString(im, \"value\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Im.TYPE,\n                getContactType(getJsonString(im, \"type\")));\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing IM so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.Im._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {imId, ContactsContract.CommonDataKinds.Im.CONTENT_ITEM_TYPE})\n                    .withValue(ContactsContract.CommonDataKinds.Im.DATA, getJsonString(im, \"value\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Im.TYPE,\n                        getContactType(getJsonString(im, \"type\")))\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get emails\");\n    }\n\n    // Modify note\n    String note = getJsonString(contact, \"note\");\n    ops.add(\n        ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n            .withSelection(\n                ContactsContract.Data.CONTACT_ID\n                    + \"=? AND \"\n                    + ContactsContract.Data.MIMETYPE\n                    + \"=?\",\n                new String[] {id, ContactsContract.CommonDataKinds.Note.CONTENT_ITEM_TYPE})\n            .withValue(ContactsContract.CommonDataKinds.Note.NOTE, note)\n            .build());\n\n    // Modify nickname\n    String nickname = getJsonString(contact, \"nickname\");\n    if (nickname != null) {\n      ops.add(\n          ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n              .withSelection(\n                  ContactsContract.Data.CONTACT_ID\n                      + \"=? AND \"\n                      + ContactsContract.Data.MIMETYPE\n                      + \"=?\",\n                  new String[] {id, ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE})\n              .withValue(ContactsContract.CommonDataKinds.Nickname.NAME, nickname)\n              .build());\n    }\n\n    // Modify urls\n    JSONArray websites = null;\n    try {\n      websites = contact.getJSONArray(\"urls\");\n      if (websites != null) {\n        for (int i = 0; i < websites.length(); i++) {\n          JSONObject website = (JSONObject) websites.get(i);\n          String websiteId = getJsonString(website, \"id\");\n          // This is a new website so do a DB insert\n          if (websiteId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE);\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Website.DATA, getJsonString(website, \"value\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Website.TYPE,\n                getContactType(getJsonString(website, \"type\")));\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing website so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.Website._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {\n                          websiteId, ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE\n                        })\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Website.DATA,\n                        getJsonString(website, \"value\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Website.TYPE,\n                        getContactType(getJsonString(website, \"type\")))\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get websites\");\n    }\n\n    // Modify birthday\n    String birthday = getJsonString(contact, \"birthday\");\n    if (birthday != null) {\n      ops.add(\n          ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n              .withSelection(\n                  ContactsContract.Data.CONTACT_ID\n                      + \"=? AND \"\n                      + ContactsContract.Data.MIMETYPE\n                      + \"=? AND \"\n                      + ContactsContract.CommonDataKinds.Event.TYPE\n                      + \"=?\",\n                  new String[] {\n                    id,\n                    ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE,\n                    new String(\"\" + ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY)\n                  })\n              .withValue(\n                  ContactsContract.CommonDataKinds.Event.TYPE,\n                  ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY)\n              .withValue(ContactsContract.CommonDataKinds.Event.START_DATE, birthday)\n              .build());\n    }\n\n    // Modify photos\n    JSONArray photos = null;\n    try {\n      photos = contact.getJSONArray(\"photos\");\n      if (photos != null) {\n        for (int i = 0; i < photos.length(); i++) {\n          JSONObject photo = (JSONObject) photos.get(i);\n          String photoId = getJsonString(photo, \"id\");\n          byte[] bytes = getPhotoBytes(getJsonString(photo, \"value\"));\n          // This is a new photo so do a DB insert\n          if (photoId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE);\n            contentValues.put(ContactsContract.Data.IS_SUPER_PRIMARY, 1);\n            contentValues.put(ContactsContract.CommonDataKinds.Photo.PHOTO, bytes);\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing photo so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.Photo._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {\n                          photoId, ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE\n                        })\n                    .withValue(ContactsContract.Data.IS_SUPER_PRIMARY, 1)\n                    .withValue(ContactsContract.CommonDataKinds.Photo.PHOTO, bytes)\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get photos\");\n    }\n\n    boolean retVal = true;\n\n    // Modify contact\n    try {\n      mApp.getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);\n    } catch (RemoteException e) {\n      Log.e(LOG_TAG, e.getMessage(), e);\n      Log.e(LOG_TAG, Log.getStackTraceString(e), e);\n      retVal = false;\n    } catch (OperationApplicationException e) {\n      Log.e(LOG_TAG, e.getMessage(), e);\n      Log.e(LOG_TAG, Log.getStackTraceString(e), e);\n      retVal = false;\n    }\n\n    // if the save was a succes return the contact ID\n    if (retVal) {\n      return id;\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4238, "initialization": ["JSONObject jSONObject = Storage.getPathsJSON(String,JSONObject)", "JSONObject jSONObject = Storage.getPathsJSON(String,JSONObject)"], "initializationStart": [641, 1590], "initializationEnd": [679, 1628], "hasTryCatch": 1, "exceptionType": "UnimplementedException", "exceptionHandlingCall": ["new JSONException(String)"], "tryExpressionStart": 618, "tryExpressionEnd": 622, "tryBlockStart": 618, "tryBlockEnd": 1639, "catchExpressionStart": 2748, "catchExpressionEnd": 2781, "catchBlockStart": 2748, "catchBlockEnd": 2846, "exceptionHandlingCallStart": [2795], "exceptionHandlingCallEnd": [2839], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(\"listItems\",)", "guardType": "IF {", "guardExpressionStart": 1648, "guardExpressionEnd": 1674, "guardBlockStart": 1648, "guardBlockEnd": 2650, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 2034, "focalAPIEnd": 2066, "followUpCheck": "value <= (pagesize * (pagenum))", "checkType": "IF", "followUpCheckExpressionStart": 2393, "followUpCheckExpressionEnd": 2429, "followUpCheckBlockStart": 2393, "followUpCheckBlockEnd": 2462, "use": ["jSONObject.getJSONObject(String)", "jSONObject.getJSONObject(String)"], "useStart": [2110, 2274], "useEnd": [2142, 2306], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/collectionspace/application/tree/master/cspi-webui/src/main/java/org/collectionspace/chain/csp/webui/nuispec/CacheTermList.java", "rawCode": "  public JSONArray controlledLists(Storage storage, String vocabname, Record vr, Integer limit)\n      throws JSONException {\n    JSONArray displayNames = new JSONArray();\n    try {\n      // Get List\n      int resultsize = 1;\n      int pagenum = 0;\n      int pagesize = 200;\n      if (limit != 0 && limit < pagesize) {\n        pagesize = limit;\n      }\n      while (resultsize > 0) {\n        JSONObject restriction = new JSONObject();\n        restriction.put(\"pageNum\", pagenum);\n        restriction.put(\"pageSize\", pagesize);\n\n        String url = vr.getID() + \"/\" + vocabname;\n        JSONObject data = null;\n        try {\n          data = storage.getPathsJSON(url, restriction);\n        } catch (UnderlyingStorageException e) {\n          // need to initialise this vocab\n          log.error(\"Could not retreive term list with URL '%s' from Services layer.\", url);\n          // REM 8/28/2015 - This code is broken? See\n          // https://issues.collectionspace.org/browse/CSPACE-6151\n          Instance n = vr.getInstance(vr.getID() + \"-\" + vocabname);\n          JSONObject fields =\n              new JSONObject(\n                  \"{'displayName':'\"\n                      + n.getTitle()\n                      + \"','shortIdentifier':'\"\n                      + n.getWebURL()\n                      + \"'}\");\n          if (vr.getFieldFullList(\"termStatus\") instanceof Field) {\n            fields.put(\n                \"termStatus\", ((Field) vr.getFieldFullList(\"termStatus\")).getOptionDefault());\n          }\n          storage.autocreateJSON(vr.getID(), fields, restriction);\n          data = storage.getPathsJSON(url, restriction);\n        }\n        if (data.has(\"listItems\")) {\n          String[] results = (String[]) data.get(\"listItems\");\n          /* Get a view of each */\n          for (String result : results) {\n            // change csid into displayName\n            JSONObject namedata = getDisplayNameList(storage, vr.getID(), vocabname, result);\n            displayNames.put(namedata);\n          }\n\n          Integer total = data.getJSONObject(\"pagination\").getInt(\"totalItems\");\n          pagesize = data.getJSONObject(\"pagination\").getInt(\"pageSize\");\n          // Integer itemsInPage = data.getJSONObject(\"pagination\").getInt(\"itemsInPage\");\n          pagenum = data.getJSONObject(\"pagination\").getInt(\"pageNum\");\n          pagenum++;\n          // are there more results\n          if (total <= (pagesize * (pagenum))) {\n            break;\n          }\n          // have we got enough results?\n          if (limit != 0 && limit <= (pagesize * (pagenum))) {\n            break;\n          }\n        } else {\n          resultsize = 0;\n        }\n      }\n    } catch (ExistException e) {\n      throw new JSONException(\"Exist exception\");\n    } catch (UnimplementedException e) {\n      throw new JSONException(\"Unimplemented exception\");\n    } catch (UnderlyingStorageException e) {\n      throw new JSONException(\"Underlying storage exception\" + vocabname + e);\n    }\n    return displayNames;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4239, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 796, "focalAPIEnd": 837, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yuyang226/FlickrjApi4Android/tree/master/flickrj-android/src/main/java/com/googlecode/flickrjandroid/tags/TagsInterface.java", "rawCode": "  /**\n   * Get a list of tags for the specified photo.\n   *\n   * <p>This method does not require authentication.\n   *\n   * @param photoId The photo ID\n   * @return The collection of Tag objects\n   * @throws JSONException\n   */\n  public Photo getListPhoto(String photoId) throws IOException, FlickrException, JSONException {\n    List<Parameter> parameters = new ArrayList<Parameter>();\n    parameters.add(new Parameter(\"method\", METHOD_GET_LIST_PHOTO));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n\n    parameters.add(new Parameter(\"photo_id\", photoId));\n\n    Response response = transportAPI.get(transportAPI.getPath(), parameters);\n    if (response.isError()) {\n      throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n\n    JSONObject photoElement = response.getData().getJSONObject(\"photo\");\n    Photo photo = new Photo();\n    photo.setId(photoElement.getString(\"id\"));\n\n    List<Tag> tags = new ArrayList<Tag>();\n    JSONObject tagsElement = photoElement.getJSONObject(\"tags\");\n    JSONArray tagElements = tagsElement.optJSONArray(\"tag\");\n    for (int i = 0; tagElements != null && i < tagElements.length(); i++) {\n      JSONObject tagElement = tagElements.getJSONObject(i);\n      Tag tag = new Tag();\n      tag.setId(tagElement.getString(\"id\"));\n      tag.setAuthor(tagElement.getString(\"author\"));\n      tag.setAuthorName(tagElement.getString(\"authorname\"));\n      tag.setRaw(tagElement.getString(\"raw\"));\n      tag.setValue(tagElement.getString(\"_content\"));\n      tags.add(tag);\n    }\n    photo.setTags(tags);\n    return photo;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4240, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 85, "focalAPIEnd": 126, "followUpCheck": "value.has(\"resourceReference\")", "checkType": "IF", "followUpCheckExpressionStart": 222, "followUpCheckExpressionEnd": 260, "followUpCheckBlockStart": 222, "followUpCheckBlockEnd": 432, "use": ["value.getString(String)", "value.getJSONObject(String)"], "useStart": [153, 286], "useEnd": [184, 329], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/attdevsupport/ATT_APIPlatform_SampleApps/tree/master/RESTFul/SMS/Java/app1/src/main/java/com/att/api/sms/model/SMSSendResponse.java", "rawCode": "  public static SMSSendResponse valueOf(JSONObject jobj) {\n    JSONObject response = jobj.getJSONObject(\"outboundSMSResponse\");\n    final String msgId = response.getString(\"messageId\");\n\n    String resourceUrl = null;\n    if (response.has(\"resourceReference\")) {\n      JSONObject ref = response.getJSONObject(\"resourceReference\");\n      if (ref.has(\"resourceURL\")) {\n        resourceUrl = ref.getString(\"resourceURL\");\n      }\n    }\n\n    return new SMSSendResponse(msgId, resourceUrl);\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4241, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "e(String,*,*)", "toString()", "makeText(RegistroActivity,String,*)", "show()"], "tryExpressionStart": 81, "tryExpressionEnd": 85, "tryBlockStart": 81, "tryBlockEnd": 1792, "catchExpressionStart": 1529, "catchExpressionEnd": 1549, "catchBlockStart": 1529, "catchBlockEnd": 1792, "exceptionHandlingCallStart": [1652, 1628, 1734, 1678, 1678], "exceptionHandlingCallEnd": [1666, 1670, 1746, 1767, 1785], "configuration": ["jSONObject.getString(String)", "jSONObject.getString(String)"], "configurationStart": [110, 402], "configurationEnd": [136, 427], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1090, "focalAPIEnd": 1122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mauriciojovel/clasificados/tree/master/GuanaAnuncios/src/com/udb/mad/shinmen/benja/guana/anuncios/adapters/GestionUsuariosImpl.java", "rawCode": "  @Override\n  public void onFinishDownloadJSONObject(JSONObject jsonData) {\n\n    try {\n\n      String status = jsonData.getString(ESTADO);\n\n      if (status.equals(EXITO)) {\n\n        /*\n         * Guardando el token en los shared preferences para que la proxima vez no pida logearse al usuario\n         * sino lo envie directamente a la lista de anuncios\n         *\n         * */\n        String token = jsonData.getString(TOKEN);\n\n        /*SharedPreferences.Editor editor = prefs.edit();\n        editor.putString(TOKEN, token);\n        editor.putString(USUARIO, usuario);\n        editor.commit();*/\n        PreferenciasUsuario.setToken(token, activity);\n        PreferenciasUsuario.setUsuario(usuario, activity);\n\n        /*Si el registro es exitoso se inicia la siguiente actividad*/\n        Intent intento = new Intent(activity, AnuncioActivity.class);\n        activity.startActivity(intento);\n\n        /*\n         * se termina la actividad de registro para que vuelva a la\n         * pantalla de login\n         */\n        activity.finish();\n\n      } else {\n\n        JSONObject errores = jsonData.getJSONObject(\"errors\");\n\n        /*\n         * String usuario = errores.getString(\"usuario\"); String clave =\n         * errores.getString(\"clave\");\n         */\n        Toast.makeText(\n                activity,\n                \"Error al guardar usuario: \" + errores.getString(\"mensaje\"),\n                Toast.LENGTH_LONG)\n            .show();\n\n        Log.e(RegistroActivity.class.toString(), errores.toString());\n      }\n\n    } catch (Exception e) {\n      // TODO Auto-generated catch block\n      // e.printStackTrace();\n      Log.e(\"GestionUsuario\", e.getMessage(), e);\n      Toast.makeText(activity, \"Error al guardar usuario: \" + e.toString(), Toast.LENGTH_SHORT)\n          .show();\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4242, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 80, "tryExpressionEnd": 84, "tryBlockStart": 80, "tryBlockEnd": 500, "catchExpressionStart": 442, "catchExpressionEnd": 466, "catchBlockStart": 442, "catchBlockEnd": 500, "exceptionHandlingCallStart": [474], "exceptionHandlingCallEnd": [493], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 178, "focalAPIEnd": 204, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new KeyframeData(value)", "jSONObject.getJSONArray(String)"], "useStart": [161, 271], "useEnd": [205, 298], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shi-314/AngryKings/tree/master/src/com/angrykings/Keyframe.java", "rawCode": "  @Override\n  public void fromJson(JSONObject json) throws JSONException {\n\n    try {\n      this.timestampSec = json.getDouble(\"t\");\n      this.cannonballData = new KeyframeData(json.getJSONObject(\"ball\"));\n\n      this.castleBlocksData.clear();\n\n      JSONArray blocks = json.getJSONArray(\"castle\");\n      for (int i = 0; i < blocks.length(); i++) {\n        this.castleBlocksData.add(new KeyframeData(blocks.getJSONObject(i)));\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4243, "initialization": ["JSONObject jSONObject = new JSONObject(*)"], "initializationStart": [4753], "initializationEnd": [4811], "hasTryCatch": 1, "exceptionType": "InvalidInputException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 76, "tryExpressionEnd": 80, "tryBlockStart": 76, "tryBlockEnd": 6525, "catchExpressionStart": 6385, "catchExpressionEnd": 6417, "catchBlockStart": 6385, "catchBlockEnd": 6470, "exceptionHandlingCallStart": [6444], "exceptionHandlingCallEnd": [6463], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 4852, "focalAPIEnd": 4884, "followUpCheck": "value.getBoolean(\"Success\")", "checkType": "IF", "followUpCheckExpressionStart": 5040, "followUpCheckExpressionEnd": 5084, "followUpCheckBlockStart": 5040, "followUpCheckBlockEnd": 6297, "use": ["value.getDouble(String)", "value.getJSONArray(String)"], "useStart": [5114, 5983], "useEnd": [5151, 6025], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ian-Wright1979/INB372-Solar/tree/master/INB372-SolarAndroid/src/solar/solarAndroid/SolarPowerCalculator.java", "rawCode": "  private void originalSubmit(View view) throws InvalidInputException {\n    try {\n      Float panelEfficiency =\n          InputChecking.getPanelEfficiency(\n              ((EditText) findViewById(R.id.PanelEfficiency)).getText().toString());\n      Float inverterEfficiency =\n          InputChecking.getInverterEfficiency(\n              ((EditText) findViewById(R.id.InverterEfficiency)).getText().toString());\n      String address =\n          InputChecking.getAddress(((EditText) findViewById(R.id.Address)).getText().toString());\n      Button panelOrientationButton = ((Button) findViewById(R.id.PanelOrientation));\n      if (panelOrientationButton.getText().toString().equals(\"Click to set\"))\n        panelOrientationButton.setText(orientationText);\n      String orientation = InputChecking.getOrientation(Float.toString(actualOrientation));\n      Button panelAngleButton = ((Button) findViewById(R.id.PanelAngle));\n      if (panelAngleButton.getText().toString().equals(\"Click to set\"))\n        panelAngleButton.setText(Float.toString(actualAngle));\n      Float angle = InputChecking.getAngle(Float.toString(actualAngle));\n      // Integer sunlight = getSunlight();\n      Float consumption =\n          InputChecking.getAngle(\n              ((EditText) findViewById(R.id.PowerConsumption)).getText().toString());\n      Float tariff =\n          InputChecking.getTariff(\n              ((Spinner) findViewById(R.id.TariffRate)).getSelectedItem().toString());\n      Integer panelQuantity =\n          InputChecking.getPanelQuantity(\n              ((EditText) findViewById(R.id.PanelQuantity)).getText().toString());\n      String panelManufacturer =\n          InputChecking.getPanelManufacturer(\n              ((Spinner) findViewById(R.id.PanelManufacturer)).getSelectedItem().toString());\n      String panelModel =\n          InputChecking.getPanelModel(\n              ((Spinner) findViewById(R.id.PanelModel)).getSelectedItem().toString());\n      String inverterManufacturer =\n          InputChecking.getInverterManufacturer(\n              ((Spinner) findViewById(R.id.InverterManufacturer)).getSelectedItem().toString());\n      String inverterModel =\n          InputChecking.getInverterModel(\n              ((Spinner) findViewById(R.id.InverterModel)).getSelectedItem().toString());\n\n      // Create a new HttpClient and Post Header\n      ConnectivityManager connec =\n          (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n      if (connec.getActiveNetworkInfo().isAvailable()) {\n        HttpClient httpclient = new DefaultHttpClient();\n        HttpPost httppost =\n            new HttpPost(\n                baseServletAddress\n                    + \"solarServlet\"); // 10.0.2.2 magic thing that accesses localhost from emulator\n\n        ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\n        nameValuePairs.add(new BasicNameValuePair(\"panelManufacturer\", panelManufacturer));\n        nameValuePairs.add(new BasicNameValuePair(\"panelModel\", panelModel));\n        nameValuePairs.add(new BasicNameValuePair(\"panelEfficiency\", panelEfficiency.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"panelQty\", panelQuantity.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"orientation\", orientation.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"angle\", angle.toString()));\n\n        nameValuePairs.add(new BasicNameValuePair(\"inverterManufacturer\", inverterManufacturer));\n        nameValuePairs.add(new BasicNameValuePair(\"inverterModel\", inverterModel));\n        nameValuePairs.add(\n            new BasicNameValuePair(\"inverterEfficiency\", inverterEfficiency.toString()));\n\n        // nameValuePairs.add(new BasicNameValuePair(\"sunlight\", sunlight.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"consumption\", consumption.toString()));\n        nameValuePairs.add(\n            new BasicNameValuePair(\"latitude\", Double.toString(lastKnownLocation.getLatitude())));\n        nameValuePairs.add(\n            new BasicNameValuePair(\"longitude\", Double.toString(lastKnownLocation.getLongitude())));\n        nameValuePairs.add(new BasicNameValuePair(\"address\", address.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"tariff\", tariff.toString()));\n\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"c\");\n        httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"d\");\n        // Execute HTTP Post Request\n        HttpResponse response = httpclient.execute(httppost);\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"e\");\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"e\");\n        JSONObject jObject = new JSONObject(EntityUtils.toString(response.getEntity()));\n        JSONObject savingsJSONObject = jObject.getJSONObject(\"Savings\");\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"f\");\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"f\");\n        if (savingsJSONObject.getBoolean(\"Success\")) {\n          Double savings = savingsJSONObject.getDouble(\"Amount\");\n          savings = Math.round(savings * 100.0) / 100.0;\n          DecimalFormat f = new DecimalFormat(\"#.00\");\n          ((TextView) findViewById(R.id.Savings)).setText(\"$\" + f.format(savings));\n          resultsTab(view);\n          findViewById(R.id.Results).setEnabled(true);\n\n          // graphView = new LineGraphView(this, \"Electricity Generated\");\n\n          // graphView.setVisibility(View.GONE);\n          graphViewInstantiated = true;\n\n          graphView = new LineGraphView(this, \"Electricity Generated\");\n          graphView.setShowLegend(true);\n          graphView.setLegendAlign(LegendAlign.TOP);\n          graphView.setHorizontalLabels(\n              new String[] {\n                \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n              });\n\n          SetElectricityGraph(savingsJSONObject.getJSONArray(\"DailyGen\"));\n          TableLayout layout = (TableLayout) findViewById(R.id.layout);\n          layout.addView(graphView);\n\n          // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"g\");\n          // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"g\");\n        }\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"h\");\n      }\n    } catch (InvalidInputException e) {\n      // do stuffs\n      e.printStackTrace();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4244, "initialization": ["JSONObject jSONObject = setRestricted(UIRequest,*,*,*,boolean,*)"], "initializationStart": [210], "initializationEnd": [273], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["getMessage()", "new UIException(String,*)"], "tryExpressionStart": 125, "tryExpressionEnd": 129, "tryBlockStart": 125, "tryBlockEnd": 1360, "catchExpressionStart": 824, "catchExpressionEnd": 848, "catchBlockStart": 824, "catchBlockEnd": 944, "exceptionHandlingCallStart": [919, 862], "exceptionHandlingCallEnd": [933, 937], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 306, "focalAPIEnd": 348, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "buildQuery(*,JSONObject,value)", "getJSON(Storage,value,String,String)", "createTraverser(UIRequest,*,String,JSONObject,value,String,int)"], "useStart": [369, 407, 503, 689], "useEnd": [399, 460, 543, 772], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/collectionspace/application/tree/master/cspi-webui/src/main/java/org/collectionspace/chain/csp/webui/record/RecordSearchList.java", "rawCode": "  private void advancedSearch(Storage storage, UIRequest ui, String path, JSONObject params)\n      throws UIException {\n\n    try {\n\n      JSONObject results = new JSONObject();\n      JSONObject restrictedkey = GenericSearch.setRestricted(ui, null, null, null, true, this.r);\n      JSONObject restriction = restrictedkey.getJSONObject(\"restriction\");\n      String key = restrictedkey.getString(\"key\");\n      GenericSearch.buildQuery(this.r, params, restriction);\n\n      key = \"results\";\n\n      results = getJSON(storage, restriction, key, base);\n\n      // cache for record traverser\n      if (results.has(\"pagination\") && results.getJSONObject(\"pagination\").has(\"separatelists\")) {\n        GenericSearch.createTraverser(ui, this.r.getID(), \"\", results, restriction, key, 1);\n      }\n      ui.sendJSONResponse(results);\n    } catch (JSONException e) {\n      throw new UIException(\"JSONException during advancedSearch \" + e.getMessage(), e);\n    } catch (ExistException e) {\n      throw new UIException(\"ExistException during search_or_list\", e);\n    } catch (UnimplementedException e) {\n      throw new UIException(\"UnimplementedException during search_or_list\", e);\n    } catch (UnderlyingStorageException x) {\n      UIException uiexception = new UIException(x.getMessage(), x.getStatus(), x.getUrl(), x);\n      ui.sendJSONResponse(uiexception.getJSON());\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4245, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 164, "focalAPIEnd": 194, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 200, "followUpCheckExpressionEnd": 220, "followUpCheckBlockStart": 200, "followUpCheckBlockEnd": 334, "use": ["value.getJSONArray(String)"], "useStart": [357], "useEnd": [385], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zostay/CPAN-Sidekick/tree/master/src/com/qubling/sidekick/fetch/cpan/AuthorDetailsFetcher.java", "rawCode": "  @Override\n  protected void consumeResponse(JSONObject response) throws JSONException {\n\n    ResultSet<Author> authors = getResultSet();\n\n    JSONObject topHits = response.getJSONObject(\"hits\");\n    if (topHits == null) {\n      Log.e(\"AuthorDetailsFetcher\", \"Unexpected response (top hits missing): \" + response);\n      return;\n    }\n\n    JSONArray hits = topHits.getJSONArray(\"hits\");\n    if (hits == null) {\n      Log.e(\"AuthorDetailsFetcher\", \"Unexpected response (nested hits missing): \" + response);\n      return;\n    }\n\n    // Log.d(\"AuthorDetailsFetcher\", response.toString());\n\n    for (int i = 0; i < hits.length(); i++) {\n      JSONObject jsonAuthor = hits.getJSONObject(i).getJSONObject(\"_source\");\n\n      String pauseId = jsonAuthor.getString(\"pauseid\");\n      String fullName = jsonAuthor.getString(\"name\");\n      String gravatarUrl = jsonAuthor.getString(\"gravatar_url\");\n\n      Author author = authors.get(pauseId);\n      if (author != null) {\n        author.setFullName(fullName);\n        author.setGravatarUrl(gravatarUrl);\n        // Log.d(\"AuthorDetailsFetcher\", \"Setting author Gravatar \" + author.getPauseId() + \": \" +\n        // gravatarUrl);\n      }\n      // else {\n      // Log.d(\"AuthorDetailsFetcher\", \"Not setting author Gravatar \" + pauseId);\n      // }\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4246, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [1158], "initializationEnd": [1182], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 1286, "guardExpressionEnd": 1308, "guardBlockStart": 1286, "guardBlockEnd": 1457, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1336, "focalAPIEnd": 1363, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)", "value.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [1395, 1423, 1558, 1608, 1749, 1850, 1952], "useEnd": [1421, 1446, 1585, 1636, 1777, 1877, 1982], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emolinablas/CoretelProject/tree/master/libs externas/facebook/src/com/facebook/android/Util.java", "rawCode": "  /**\n   * Parse a server response into a JSON Object. This is a basic implementation using\n   * org.json.JSONObject representation. More sophisticated applications may wish to do their own\n   * parsing.\n   *\n   * <p>The parsed JSON is checked for a variety of error fields and a FacebookException is thrown\n   * if an error condition is set, populated with the error message and error type or code if\n   * available.\n   *\n   * @param response - string representation of the response\n   * @return the response as a JSON Object\n   * @throws JSONException - if the response is not valid JSON\n   * @throws FacebookError - if an error condition is set\n   */\n  @Deprecated\n  public static JSONObject parseJson(String response) throws JSONException, FacebookError {\n    // Edge case: when sending a POST request to /[post_id]/likes\n    // the return value is 'true' or 'false'. Unfortunately\n    // these values cause the JSONObject constructor to throw\n    // an exception.\n    if (response.equals(\"false\")) {\n      throw new FacebookError(\"request failed\");\n    }\n    if (response.equals(\"true\")) {\n      response = \"{value : true}\";\n    }\n    JSONObject json = new JSONObject(response);\n\n    // errors set by the server are not consistent\n    // they depend on the method and endpoint\n    if (json.has(\"error\")) {\n      JSONObject error = json.getJSONObject(\"error\");\n      throw new FacebookError(error.getString(\"message\"), error.getString(\"type\"), 0);\n    }\n    if (json.has(\"error_code\") && json.has(\"error_msg\")) {\n      throw new FacebookError(\n          json.getString(\"error_msg\"), \"\", Integer.parseInt(json.getString(\"error_code\")));\n    }\n    if (json.has(\"error_code\")) {\n      throw new FacebookError(\"request failed\", \"\", Integer.parseInt(json.getString(\"error_code\")));\n    }\n    if (json.has(\"error_msg\")) {\n      throw new FacebookError(json.getString(\"error_msg\"));\n    }\n    if (json.has(\"error_reason\")) {\n      throw new FacebookError(json.getString(\"error_reason\"));\n    }\n    return json;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4247, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,) && jSONObject.getJSONObject(name,).has(TITLE,)", "guardType": "IF {", "guardExpressionStart": 97, "guardExpressionEnd": 120, "guardBlockStart": 97, "guardBlockEnd": 355, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 229, "focalAPIEnd": 257, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)"], "useStart": [302], "useEnd": [347], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/societies/SOCIETIES-Platform/tree/master/platform-infrastructure/sns/socialdata/src/main/java/org/societies/platform/socialdata/converters/ActivityConverterFromGooglePlus.java", "rawCode": "  private void parseProvider(JSONObject json, ActivityEntry activity) throws JSONException {\n    if (json.has(PROVIDER)) {\n      ActivityObject provider = new ActivityObjectImpl();\n      activity.setProvider(provider);\n      if (json.getJSONObject(PROVIDER).has(TITLE))\n        provider.setDisplayName(json.getJSONObject(PROVIDER).getString(TITLE));\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4248, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 536, "focalAPIEnd": 592, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getJSONObject(String)"], "useStart": [959], "useEnd": [1015], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/collectionspace/application/tree/master/tomcat-main/src/test/java/org/collectionspace/chain/csp/persistence/services/vocab/TestVocabThroughWebapp.java", "rawCode": "  @Test\n  public void testCRUDitem() throws Exception {\n    String displayname = \"XXXStuff1\";\n    String displaynameUpdate = \"XXXLessStuff\";\n    String vocabtype = \"languages\";\n    String testfield = \"displayName\";\n\n    // Create\n    JSONObject data = new JSONObject(\"{'fields':{'\" + testfield + \"':'\" + displayname + \"'}}\");\n    HttpTester out = tester.POSTData(\"/vocabularies/\" + vocabtype + \"/\", data, jetty);\n    String url = out.getHeader(\"Location\");\n    // Read\n    out = tester.GETData(\"/vocabularies\" + url, jetty);\n    data = new JSONObject(out.getContent()).getJSONObject(\"fields\");\n    assertEquals(data.getString(\"csid\"), url.split(\"/\")[2]);\n    assertEquals(displayname, data.getString(testfield));\n    // Update\n    data = new JSONObject(\"{'fields':{'\" + testfield + \"':'\" + displaynameUpdate + \"'}}\");\n    out = tester.PUTData(\"/vocabularies\" + url, data, jetty);\n    // Read\n    out = tester.GETData(\"/vocabularies\" + url, jetty);\n    data = new JSONObject(out.getContent()).getJSONObject(\"fields\");\n    assertEquals(data.getString(\"csid\"), url.split(\"/\")[2]);\n    assertEquals(displaynameUpdate, data.getString(testfield));\n    // Delete\n    tester.DELETEData(\"/vocabularies/\" + url, jetty);\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4249, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 113, "tryExpressionEnd": 117, "tryBlockStart": 113, "tryBlockEnd": 574, "catchExpressionStart": 497, "catchExpressionEnd": 521, "catchBlockStart": 497, "catchBlockEnd": 574, "exceptionHandlingCallStart": [529], "exceptionHandlingCallEnd": [548], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 148, "focalAPIEnd": 201, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/flintinatux/neverbelate/tree/master/src/com/madhackerdesigns/neverbelate/reg/GeoCoder.java", "rawCode": "  private GeoCodeResult parseJsonResponse(String response) {\n    GeoCodeResult result = new GeoCodeResult();\n    try {\n      JSONObject resultSet = (new JSONObject(response)).getJSONObject(\"ResultSet\");\n      int found = resultSet.getInt(\"Found\");\n      if (found > 0) {\n        JSONObject firstResult = resultSet.getJSONArray(\"Results\").getJSONObject(0);\n        result.setCountryCode(firstResult.getString(\"countrycode\"));\n        result.setZipCode(firstResult.getString(\"uzip\"));\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n      return null;\n    }\n    return result;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4250, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1167, "focalAPIEnd": 1199, "followUpCheck": "value.has(\"entries\") && !value.isNull(\"entries\")", "checkType": "IF", "followUpCheckExpressionStart": 1209, "followUpCheckExpressionEnd": 1260, "followUpCheckBlockStart": 1209, "followUpCheckBlockEnd": 1680, "use": ["value.getJSONObject(String)", "jSONObject.getJSONObject(String)", "value.get(String)"], "useStart": [1294, 1855, 2071], "useEnd": [1323, 1890, 2084], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/analyst1001/OpenRefine-Hbase/tree/master/main/src/com/google/refine/hbase/HBaseWriterStream.java", "rawCode": "  public void saveFromJSON(JSONObject obj) throws IOException {\n    Date _created = JSONUtilities.getDate(obj, \"created\", new Date());\n    insertRecord(tableName, rowKey, \"created\", \"created\", String.format(\"%tFT%<tTZ\", _created));\n    Date _modified = JSONUtilities.getDate(obj, \"modified\", new Date());\n    insertRecord(tableName, rowKey, \"modified\", \"modified\", String.format(\"%tFT%<tTZ\", _modified));\n    String _name = JSONUtilities.getString(obj, \"name\", \"<Error recovering project name>\");\n    insertRecord(tableName, rowKey, \"name\", \"name\", _name.toString());\n    String _password = JSONUtilities.getString(obj, \"password\", \"\");\n    insertRecord(tableName, rowKey, \"password\", \"password\", _password.toString());\n    String _encoding = JSONUtilities.getString(obj, \"encoding\", \"\");\n    insertRecord(tableName, rowKey, \"encoding\", \"encoding\", _encoding.toString());\n    int _encodingConfidence = JSONUtilities.getInt(obj, \"encodingConfidence\", 0);\n    insertRecord(\n        tableName, rowKey, \"encodingConfidence\", \"encodingConfidence\", _encodingConfidence);\n    if (obj.has(\"preferences\") && !obj.isNull(\"preferences\")) {\n      try {\n        JSONObject obj2 = obj.getJSONObject(\"preferences\");\n        if (obj2.has(\"entries\") && !obj2.isNull(\"entries\")) {\n          JSONObject entries = obj2.getJSONObject(\"entries\");\n\n          @SuppressWarnings(\"unchecked\")\n          Iterator<String> i = entries.keys();\n          while (i.hasNext()) {\n            String key = i.next();\n            if (!entries.isNull(key)) {\n              Object o = entries.get(key);\n              insertRecord(tableName, rowKey, \"preferences\", key, o.toString());\n            }\n          }\n        }\n      } catch (JSONException e) {\n        // ignore\n      }\n    }\n    if (obj.has(\"customMetadata\") && !obj.isNull(\"customMetadata\")) {\n      try {\n        JSONObject obj2 = obj.getJSONObject(\"customMetadata\");\n\n        @SuppressWarnings(\"unchecked\")\n        Iterator<String> keys = obj2.keys();\n        while (keys.hasNext()) {\n          String key = keys.next();\n          Object value = obj2.get(key);\n          if (value != null && value instanceof Serializable) {\n            insertRecord(tableName, rowKey, \"customMetadata\", key, value.toString());\n          }\n        }\n      } catch (JSONException e) {\n        // ignore\n      }\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4251, "initialization": ["JSONObject jSONObject = JSONObject.optJSONObject(String)"], "initializationStart": [698], "initializationEnd": [726], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.optJSONObject(String)"], "configurationStart": [830], "configurationEnd": [863], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1064, "focalAPIEnd": 1093, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertNotNull(value)", "value.getJSONObject(int)"], "useStart": [1134, 1214], "useEnd": [1170, 1245], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tinkerpop/blueprints/tree/master/blueprints-test/src/test/java/com/tinkerpop/blueprints/util/io/graphson/GraphSONUtilityTest.java", "rawCode": "  @Test\n  public void jsonFromElementNullsNoKeysWithTypes() throws JSONException {\n    Graph g = new TinkerGraph();\n    Vertex v = g.addVertex(1);\n\n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(\"innerkey\", null);\n\n    List<String> innerList = new ArrayList<String>();\n    innerList.add(null);\n    innerList.add(\"innerstring\");\n    map.put(\"list\", innerList);\n\n    v.setProperty(\"keyMap\", map);\n\n    List<String> list = new ArrayList<String>();\n    list.add(null);\n    list.add(\"string\");\n    v.setProperty(\"keyList\", list);\n\n    JSONObject json = GraphSONUtility.jsonFromElement(v, null, GraphSONMode.EXTENDED);\n\n    Assert.assertNotNull(json);\n\n    JSONObject jsonMap = json.optJSONObject(\"keyMap\").optJSONObject(GraphSONTokens.VALUE);\n    Assert.assertNotNull(jsonMap);\n    JSONObject jsonObjectMap = jsonMap.optJSONObject(\"innerkey\");\n    Assert.assertTrue(jsonObjectMap.isNull(GraphSONTokens.VALUE));\n    Assert.assertEquals(GraphSONTokens.TYPE_UNKNOWN, jsonObjectMap.optString(GraphSONTokens.TYPE));\n\n    JSONArray jsonInnerArray = jsonMap.getJSONObject(\"list\").getJSONArray(GraphSONTokens.VALUE);\n    Assert.assertNotNull(jsonInnerArray);\n    JSONObject jsonObjectInnerListFirst = jsonInnerArray.getJSONObject(0);\n    Assert.assertTrue(jsonObjectInnerListFirst.isNull(GraphSONTokens.VALUE));\n    Assert.assertEquals(\n        GraphSONTokens.TYPE_UNKNOWN, jsonObjectInnerListFirst.optString(GraphSONTokens.TYPE));\n\n    JSONArray jsonArray = json.getJSONObject(\"keyList\").getJSONArray(GraphSONTokens.VALUE);\n    Assert.assertNotNull(jsonArray);\n    JSONObject jsonObjectListFirst = jsonArray.getJSONObject(0);\n    Assert.assertTrue(jsonObjectListFirst.isNull(GraphSONTokens.VALUE));\n    Assert.assertEquals(\n        GraphSONTokens.TYPE_UNKNOWN, jsonObjectListFirst.optString(GraphSONTokens.TYPE));\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4252, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [171], "initializationEnd": [197], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 76, "tryExpressionEnd": 80, "tryBlockStart": 76, "tryBlockEnd": 1215, "catchExpressionStart": 1143, "catchExpressionEnd": 1167, "catchBlockStart": 1143, "catchBlockEnd": 1215, "exceptionHandlingCallStart": [1183], "exceptionHandlingCallEnd": [1206], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 207, "guardExpressionEnd": 233, "guardBlockStart": 207, "guardBlockEnd": 652, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 273, "focalAPIEnd": 304, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.names()", "value.getString(String)", "jSONObject.getJSONArray(String)"], "useStart": [342, 515, 724], "useEnd": [363, 543, 753], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lukeweber/libjingle-override/tree/master/talk/examples/android/src/org/appspot/apprtc/AppRTCClient.java", "rawCode": "    private MediaConstraints constraintsFromJSON(String jsonString) {\n      try {\n        MediaConstraints constraints = new MediaConstraints();\n        JSONObject json = new JSONObject(jsonString);\n        if (json.has(\"mandatory\")) {\n          JSONObject mandatoryJSON = json.getJSONObject(\"mandatory\");\n          JSONArray mandatoryKeys = mandatoryJSON.names();\n          for (int i = 0; i < mandatoryKeys.length(); ++i) {\n            String key = (String) mandatoryKeys.getString(i);\n            String value = mandatoryJSON.getString(key);\n            constraints.mandatory.add(new MediaConstraints.KeyValuePair(key, value));\n          }\n        }\n        if (json.has(\"optional\")) {\n          JSONArray optionalJSON = json.getJSONArray(\"optional\");\n          for (int i = 0; i < optionalJSON.length(); ++i) {\n            JSONObject keyValueDict = optionalJSON.getJSONObject(i);\n            String key = keyValueDict.names().getString(0);\n            String value = keyValueDict.getString(key);\n            constraints.optional.add(new MediaConstraints.KeyValuePair(key, value));\n          }\n        }\n        return constraints;\n      } catch (JSONException e) {\n        throw new RuntimeException(e);\n      }\n    }\n"}, {"dataset": "getJSONObject", "exampleID": 4253, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [270], "initializationEnd": [296], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 327, "focalAPIEnd": 374, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getJSONArray(String)"], "useStart": [673], "useEnd": [724], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/easysoa/EasySOA/tree/master/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-scaffolderproxy/src/main/java/org/easysoa/scaffolding/wsdltemplate/WSRequest.java", "rawCode": "  /**\n   * Parse a JSON expression and transform it to a WSRequest object\n   *\n   * @param jsonString\n   * @return\n   * @throws JSONException\n   */\n  public static final WSRequest parseJSON(String jsonString) throws JSONException {\n    JSONObject jsonParametersObject = new JSONObject(jsonString);\n    JSONObject jsonRequest = jsonParametersObject.getJSONObject(\"wsRequest\");\n    WSRequest request = new WSRequest();\n    request.service = jsonRequest.getString(\"service\");\n    request.binding = jsonRequest.getString(\"binding\");\n    request.operation = jsonRequest.getString(\"operation\");\n    request.wsdlUrl = jsonRequest.getString(\"wsdlUrl\");\n    JSONArray paramsArray = jsonParametersObject.getJSONArray(\"formParameters\");\n    for (int i = 0; i < paramsArray.length(); i++) {\n      if (!request\n          .getParamList()\n          .containsKey(paramsArray.getJSONObject(i).getString(\"paramName\"))) {\n        List<String> valueList = new ArrayList<String>();\n        valueList.add(paramsArray.getJSONObject(i).getString(\"paramValue\"));\n        request.getParamList().put(paramsArray.getJSONObject(i).getString(\"paramName\"), valueList);\n      } else {\n        request\n            .getParamList()\n            .get(paramsArray.getJSONObject(i).getString(\"paramName\"))\n            .add(paramsArray.getJSONObject(i).getString(\"paramValue\"));\n      }\n    }\n    return request;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4254, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getBoolean(String)"], "configurationStart": [122, 216, 417], "configurationEnd": [145, 241, 454], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 298, "guardExpressionEnd": 316, "guardBlockStart": 298, "guardBlockEnd": 526, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 490, "focalAPIEnd": 513, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["reconstructType(value)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getJSONObject(String)", "jSONObject.getJSONObject(String)", "jSONObject.get(String)", "jSONObject.getJSONObject(String)", "reconstructType(value)", "jSONObject.getJSONArray(String)"], "useStart": [474, 625, 651, 784, 919, 1017, 1175, 1159, 1359], "useEnd": [514, 649, 670, 812, 943, 1031, 1198, 1199, 1382], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/johan/gridworks/tree/master/src/main/java/com/metaweb/gridworks/protograph/Protograph.java", "rawCode": "  protected static Node reconstructNode(JSONObject o) throws JSONException {\n    Node node = null;\n\n    String nodeType = o.getString(\"nodeType\");\n    if (nodeType.startsWith(\"cell-as-\")) {\n      String columnName = o.getString(\"columnName\");\n\n      if (\"cell-as-topic\".equals(nodeType)) {\n        if (o.has(\"type\")) {\n          node =\n              new CellTopicNode(\n                  columnName,\n                  o.getBoolean(\"createForNoReconMatch\"),\n                  reconstructType(o.getJSONObject(\"type\")));\n        }\n      } else if (\"cell-as-value\".equals(nodeType)) {\n        node = new CellValueNode(columnName, o.getString(\"valueType\"), o.getString(\"lang\"));\n      } else if (\"cell-as-key\".equals(nodeType)) {\n        node = new CellKeyNode(columnName, reconstructTopic(o.getJSONObject(\"namespace\")));\n      }\n    } else if (\"topic\".equals(nodeType)) {\n      node = new FreebaseTopicNode(reconstructTopic(o.getJSONObject(\"topic\")));\n    } else if (\"value\".equals(nodeType)) {\n      node = new ValueNode(o.get(\"value\"), o.getString(\"valueType\"), o.getString(\"lang\"));\n    } else if (\"anonymous\".equals(nodeType)) {\n      node = new AnonymousNode(reconstructType(o.getJSONObject(\"type\")));\n    }\n\n    if (node != null && node instanceof NodeWithLinks && o.has(\"links\")) {\n      NodeWithLinks node2 = (NodeWithLinks) node;\n\n      JSONArray links = o.getJSONArray(\"links\");\n      int linkCount = links.length();\n\n      for (int j = 0; j < linkCount; j++) {\n        JSONObject oLink = links.getJSONObject(j);\n\n        node2.addLink(\n            new Link(\n                reconstructProperty(oLink.getJSONObject(\"property\")),\n                oLink.has(\"target\") && !oLink.isNull(\"target\")\n                    ? reconstructNode(oLink.getJSONObject(\"target\"))\n                    : null));\n      }\n    }\n\n    return node;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4255, "initialization": ["JSONObject jSONObject = getEntity(*)"], "initializationStart": [319], "initializationEnd": [355], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.length()"], "configurationStart": [409], "configurationEnd": [422], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 447, "focalAPIEnd": 473, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getJSONArray(String)"], "useStart": [495], "useEnd": [519], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anbangr/trusted-mr/tree/master/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/webapp/TestAMWebServicesJobs.java", "rawCode": "  @Test\n  public void testJobsDefault() throws JSONException, Exception {\n    WebResource r = resource();\n    ClientResponse response =\n        r.path(\"ws\").path(\"v1\").path(\"mapreduce\").path(\"jobs\").get(ClientResponse.class);\n    assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());\n    JSONObject json = response.getEntity(JSONObject.class);\n    assertEquals(\"incorrect number of elements\", 1, json.length());\n    JSONObject jobs = json.getJSONObject(\"jobs\");\n    JSONArray arr = jobs.getJSONArray(\"job\");\n    JSONObject info = arr.getJSONObject(0);\n    Job job = appContext.getJob(MRApps.toJobID(info.getString(\"id\")));\n    verifyAMJob(info, job);\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4256, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)"], "configurationStart": [162], "configurationEnd": [188], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 248, "focalAPIEnd": 276, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseBasicUser(value)", "jSONObject.getString(String)", "jSONObject.getInt(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "parseOptionalURI(jSONObject,String)"], "useStart": [219, 341, 390, 439, 517, 574], "useEnd": [277, 366, 409, 465, 542, 621], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/behrica/jira-rest-java-client/tree/master/atlassian-jira-rest-java-client/src/main/java/com/atlassian/jira/rest/client/internal/json/AttachmentJsonParser.java", "rawCode": "  @Override\n  public Attachment parse(JSONObject json) throws JSONException {\n    final URI selfUri = JsonParseUtil.getSelfUri(json);\n    final String filename = json.getString(\"filename\");\n    final BasicUser author = JsonParseUtil.parseBasicUser(json.getJSONObject(\"author\"));\n    final DateTime creationDate = JsonParseUtil.parseDateTime(json.getString(\"created\"));\n    final int size = json.getInt(\"size\");\n    final String mimeType = json.getString(\"mimeType\");\n    final URI contentURI = JsonParseUtil.parseURI(json.getString(\"content\"));\n    final URI thumbnailURI = JsonParseUtil.parseOptionalURI(json, THUMBNAIL);\n    return new Attachment(\n        selfUri, filename, author, creationDate, size, mimeType, contentURI, thumbnailURI);\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4257, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [915], "initializationEnd": [945], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["getLocalizedMessage()", "e(String,String)"], "tryExpressionStart": 885, "tryExpressionEnd": 889, "tryBlockStart": 885, "tryBlockEnd": 1500, "catchExpressionStart": 1403, "catchExpressionEnd": 1427, "catchBlockStart": 1403, "catchBlockEnd": 1500, "exceptionHandlingCallStart": [1469, 1435], "exceptionHandlingCallEnd": [1492, 1493], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 976, "focalAPIEnd": 1003, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getJSONObject(String)"], "useStart": [1032], "useEnd": [1066], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/michaelgobbers/QuantifyThis/tree/master/QuantifyThisAndroid/src/be/mume/quantifythis/helpers/EnterMoodAsync.java", "rawCode": "  /** get the weather from the yahoo api */\n  private void getWeather() {\n    int woeid = getWoeid();\n    if (woeid == 0) {\n      return; // commit without weather info\n    }\n\n    HttpClient httpClient = new DefaultHttpClient();\n    HttpContext httpContext = new BasicHttpContext();\n\n    String requestString =\n        \"http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%3D\"\n            + woeid\n            + \"%20and%20u%3D'c'&format=json&callback=\";\n    HttpGet httpGet = new HttpGet(requestString);\n    String responseString = \"\";\n    try {\n      HttpResponse response = httpClient.execute(httpGet, httpContext);\n      HttpEntity entity = response.getEntity();\n      responseString = EntityUtils.toString(entity);\n    } catch (IOException e) {\n      Log.e(\"QuantifyThis\", \"error: \" + e.getLocalizedMessage(), e);\n      return;\n    }\n\n    try {\n      JSONObject json = new JSONObject(responseString);\n      JSONObject resultSet = json.getJSONObject(\"query\");\n      JSONObject results = resultSet.getJSONObject(\"results\");\n      JSONObject channel = results.getJSONObject(\"channel\");\n      JSONObject item = channel.getJSONObject(\"item\");\n      JSONObject condition = item.getJSONObject(\"condition\");\n      int temperature = condition.getInt(\"temp\");\n      Log.i(\"QuantifyThis\", \"Temperature: \" + temperature);\n      model.setTemperature(temperature);\n    } catch (JSONException e) {\n      Log.e(\"QuantifyThis\", \"error: \" + e.getLocalizedMessage());\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4258, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 128, "focalAPIEnd": 161, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new RowRemovalOperation(value)"], "useStart": [175], "useEnd": [212], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/johan/gridworks/tree/master/src/main/java/com/metaweb/gridworks/operations/RowRemovalOperation.java", "rawCode": "  public static AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {\n    JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");\n\n    return new RowRemovalOperation(engineConfig);\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4259, "initialization": ["JSONObject jSONObject = new JSONObject(JSONTokener)", "String name = Object.toString()"], "initializationStart": [631, 766], "initializationEnd": [657, 780], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.keys()"], "configurationStart": [678], "configurationEnd": [689], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 806, "focalAPIEnd": 828, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new DiseaseInfo(String,value)"], "useStart": [858], "useEnd": [883], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ARUP-NGS/Pipeline/tree/master/src/main/java/disease/OMIMDB.java", "rawCode": "  /**\n   * Parse the omim.json file to read disease and phenotype information\n   *\n   * @throws IOException\n   * @throws JSONException\n   */\n  private void readDiseaseInfo() throws IOException, JSONException {\n    String pathToOMIMJSON = rootDir.getAbsolutePath() + \"/omim.json\";\n    File omimJSON = new File(pathToOMIMJSON);\n    if (!omimJSON.exists()) {\n      throw new IllegalArgumentException(\n          \"OMIM json file at path \" + pathToOMIMJSON + \" does not exist\");\n    }\n\n    BufferedReader reader = new BufferedReader(new FileReader(omimJSON));\n    JSONTokener jsonReader = new JSONTokener(reader);\n\n    JSONObject omim = new JSONObject(jsonReader);\n\n    Iterator it = omim.keys();\n    while (it.hasNext()) {\n      Object key = it.next();\n      String id = key.toString();\n      JSONObject jobj = omim.getJSONObject(id);\n      DiseaseInfo disInfo = new DiseaseInfo(id, jobj);\n      diseaseMap.put(id, disInfo);\n    }\n\n    System.out.println(\"Found \" + diseaseMap.size() + \" disease descriptions\");\n    reader.close();\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4260, "initialization": ["JSONObject jSONObject = new JSONObject(*)"], "initializationStart": [812], "initializationEnd": [846], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 879, "focalAPIEnd": 922, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)", "value.getString(String)", "value.getString(String)", "getChild(jSONObject,String)"], "useStart": [951, 1023, 1097, 1211], "useEnd": [994, 1067, 1142, 1240], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/skaegi/orion.server/tree/master/tests/org.eclipse.orion.server.tests/src/org/eclipse/orion/server/tests/servlets/git/GitRebaseTest.java", "rawCode": "  @Test\n  public void testRebaseStopOnConflictAndContinue() throws Exception {\n    URI workspaceLocation = createWorkspace(getMethodName());\n    IPath[] clonePaths = createTestProjects(workspaceLocation);\n\n    for (IPath clonePath : clonePaths) {\n      // clone a repo\n      JSONObject clone = clone(clonePath);\n\n      String contentLocation = clone.getString(ProtocolConstants.KEY_CONTENT_LOCATION);\n      String cloneLocation = clone.getString(ProtocolConstants.KEY_LOCATION);\n      String branchesLocation = clone.getString(GitConstants.KEY_BRANCH);\n\n      // get project metadata\n      WebRequest request = getGetRequest(contentLocation);\n      WebResponse response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n      JSONObject project = new JSONObject(response.getText());\n\n      JSONObject gitSection = project.getJSONObject(GitConstants.KEY_GIT);\n\n      String gitHeadUri = gitSection.getString(GitConstants.KEY_HEAD);\n      String gitIndexUri = gitSection.getString(GitConstants.KEY_INDEX);\n      String gitStatusUri = gitSection.getString(GitConstants.KEY_STATUS);\n\n      // modify file while on 'master'\n      JSONObject testTxt = getChild(project, \"test.txt\");\n      modifyFile(testTxt, \"1\\n2\\n3\");\n\n      // \"git add .\"\n      request = GitAddTest.getPutGitIndexRequest(gitIndexUri);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n\n      // commit all\n      request = GitCommitTest.getPostGitCommitRequest(gitHeadUri, \"first commit on master\", false);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n\n      // create branch 'a'\n      branch(branchesLocation, \"a\");\n\n      // modify file while on 'master'\n      modifyFile(testTxt, \"1master\\n2\\n3\");\n\n      // \"git add .\"\n      request = GitAddTest.getPutGitIndexRequest(gitIndexUri);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n\n      // commit all\n      request = GitCommitTest.getPostGitCommitRequest(gitHeadUri, \"second commit on master\", false);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n\n      // checkout 'a'\n      Repository db1 = getRepositoryForContentLocation(contentLocation);\n      Git git = new Git(db1);\n      assertBranchExist(git, \"a\");\n      checkoutBranch(cloneLocation, \"a\");\n\n      // modify while on 'a' - conflicting change (first line) and non-conflicting (last line)\n      modifyFile(testTxt, \"1a\\n2\\n3\\n4a\");\n\n      // \"git add .\"\n      request = GitAddTest.getPutGitIndexRequest(gitIndexUri);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n\n      // commit all\n      request = GitCommitTest.getPostGitCommitRequest(gitHeadUri, \"first commit on a\", false);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n\n      // assert clean\n      assertStatus(StatusResult.CLEAN, gitStatusUri);\n\n      // rebase: \"git rebase master\"\n      JSONObject rebase = rebase(gitHeadUri, \"master\");\n      RebaseResult.Status rebaseResult =\n          RebaseResult.Status.valueOf(rebase.getString(GitConstants.KEY_RESULT));\n      assertEquals(RebaseResult.Status.STOPPED, rebaseResult);\n\n      // check conflicting file\n      request = getGetRequest(testTxt.getString(ProtocolConstants.KEY_LOCATION));\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n      assertTrue(\n          response.getText(),\n          Pattern.matches(\n              \"<<<<<<< Upstream, based on .*\\n1master\\n=======\\n1a\\n>>>>>>> .* first commit on a\\n2\\n3\\n4a\\n\",\n              response.getText()));\n\n      // continue rebase without conflict resolving\n      rebase = rebase(gitHeadUri, Operation.CONTINUE);\n      AdditionalRebaseStatus errRebaseResult =\n          AdditionalRebaseStatus.valueOf(rebase.getString(GitConstants.KEY_RESULT));\n      assertEquals(AdditionalRebaseStatus.FAILED_UNMERGED_PATHS, errRebaseResult);\n\n      // resolve conflict\n      modifyFile(testTxt, \"1amaster\\n2\\n3\\n4a\");\n\n      // and add\n      request = GitAddTest.getPutGitIndexRequest(gitIndexUri);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n\n      // continue rebase\n      rebase = rebase(gitHeadUri, Operation.CONTINUE);\n      rebaseResult = RebaseResult.Status.valueOf(rebase.getString(GitConstants.KEY_RESULT));\n      assertEquals(RebaseResult.Status.OK, rebaseResult);\n\n      // assert clean\n      assertStatus(StatusResult.CLEAN, gitStatusUri);\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4261, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.length()"], "configurationStart": [393], "configurationEnd": [406], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1209, "focalAPIEnd": 1237, "followUpCheck": "i < value.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 1291, "followUpCheckExpressionEnd": 1329, "followUpCheckBlockStart": 1291, "followUpCheckBlockEnd": 1522, "use": ["value.getJSONObject(int)"], "useStart": [1357], "useEnd": [1377], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anbangr/trusted-mr/tree/master/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServicesCapacitySched.java", "rawCode": "  private void verifySubQueue(\n      JSONObject info, String q, float parentAbsCapacity, float parentAbsMaxCapacity)\n      throws JSONException, Exception {\n    int numExpectedElements = 11;\n    boolean isParentQueue = true;\n    if (!info.has(\"queues\")) {\n      numExpectedElements = 20;\n      isParentQueue = false;\n    }\n    assertEquals(\"incorrect number of elements\", numExpectedElements, info.length());\n\n    QueueInfo qi = isParentQueue ? new QueueInfo() : new LeafQueueInfo();\n    qi.capacity = (float) info.getDouble(\"capacity\");\n    qi.usedCapacity = (float) info.getDouble(\"usedCapacity\");\n    qi.maxCapacity = (float) info.getDouble(\"maxCapacity\");\n    qi.absoluteCapacity = (float) info.getDouble(\"absoluteCapacity\");\n    qi.absoluteMaxCapacity = (float) info.getDouble(\"absoluteMaxCapacity\");\n    qi.absoluteUsedCapacity = (float) info.getDouble(\"absoluteUsedCapacity\");\n    qi.numApplications = info.getInt(\"numApplications\");\n    qi.usedResources = info.getString(\"usedResources\");\n    qi.queueName = info.getString(\"queueName\");\n    qi.state = info.getString(\"state\");\n\n    verifySubQueueGeneric(q, qi, parentAbsCapacity, parentAbsMaxCapacity);\n\n    if (isParentQueue) {\n      JSONArray arr = info.getJSONObject(\"queues\").getJSONArray(\"queue\");\n      // test subqueues\n      for (int i = 0; i < arr.length(); i++) {\n        JSONObject obj = arr.getJSONObject(i);\n        String q2 = q + \".\" + obj.getString(\"queueName\");\n        verifySubQueue(obj, q2, qi.absoluteCapacity, qi.absoluteMaxCapacity);\n      }\n    } else {\n      LeafQueueInfo lqi = (LeafQueueInfo) qi;\n      lqi.numActiveApplications = info.getInt(\"numActiveApplications\");\n      lqi.numPendingApplications = info.getInt(\"numPendingApplications\");\n      lqi.numContainers = info.getInt(\"numContainers\");\n      lqi.maxApplications = info.getInt(\"maxApplications\");\n      lqi.maxApplicationsPerUser = info.getInt(\"maxApplicationsPerUser\");\n      lqi.maxActiveApplications = info.getInt(\"maxActiveApplications\");\n      lqi.maxActiveApplicationsPerUser = info.getInt(\"maxActiveApplicationsPerUser\");\n      lqi.userLimit = info.getInt(\"userLimit\");\n      lqi.userLimitFactor = (float) info.getDouble(\"userLimitFactor\");\n      verifyLeafQueueGeneric(q, lqi);\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4262, "initialization": ["JSONObject jSONObject = getEntity(*)"], "initializationStart": [761], "initializationEnd": [797], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 828, "focalAPIEnd": 864, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.length()", "value.getString(String)", "value.getString(String)", "value.getString(String)"], "useStart": [920, 964, 1016, 1075], "useEnd": [938, 994, 1048, 1111], "hasFinally": 1, "cleanUpCall": ["MockRM.stop()"], "finallyExpressionStart": 1549, "finallyExpressionEnd": 1557, "finallyBlockStart": 1549, "finallyBlockEnd": 1581, "cleanUpCallStart": [1565], "cleanUpCallEnd": [1574], "url": "https://github.com/guoliqiang/coding/tree/master/third_part/hadoop_src/hadoop-2.0.5-alpha-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServicesNodes.java", "rawCode": "  @Test\n  public void testNodesQueryHealthyInvalid() throws JSONException, Exception {\n    WebResource r = resource();\n    rm.registerNode(\"h1:1234\", 5120);\n    rm.registerNode(\"h2:1235\", 5121);\n\n    try {\n      r.path(\"ws\")\n          .path(\"v1\")\n          .path(\"cluster\")\n          .path(\"nodes\")\n          .queryParam(\"healthy\", \"tr\")\n          .accept(MediaType.APPLICATION_JSON)\n          .get(JSONObject.class);\n      fail(\"should have thrown exception querying invalid healthy string\");\n    } catch (UniformInterfaceException ue) {\n      ClientResponse response = ue.getResponse();\n      assertEquals(Status.BAD_REQUEST, response.getClientResponseStatus());\n      assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());\n      JSONObject msg = response.getEntity(JSONObject.class);\n      JSONObject exception = msg.getJSONObject(\"RemoteException\");\n      assertEquals(\"incorrect number of elements\", 3, exception.length());\n      String message = exception.getString(\"message\");\n      String type = exception.getString(\"exception\");\n      String classname = exception.getString(\"javaClassName\");\n      WebServicesTestUtils.checkStringMatch(\n          \"exception message\",\n          \"java.lang.Exception: Error: You must specify either true or false to query on health\",\n          message);\n      WebServicesTestUtils.checkStringMatch(\"exception type\", \"BadRequestException\", type);\n      WebServicesTestUtils.checkStringMatch(\n          \"exception classname\", \"org.apache.hadoop.yarn.webapp.BadRequestException\", classname);\n\n    } finally {\n      rm.stop();\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4263, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 114, "focalAPIEnd": 139, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toMap(value)"], "useStart": [108], "useEnd": [140], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MyMalcom/malcom-lib-android/tree/master/src/main/java/com/malcom/library/android/utils/JSONHelper.java", "rawCode": "  public static Map<String, Object> getMap(JSONObject object, String key) throws JSONException {\n    return toMap(object.getJSONObject(key));\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4264, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [316], "initializationEnd": [336], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 223, "tryExpressionEnd": 227, "tryBlockStart": 223, "tryBlockEnd": 709, "catchExpressionStart": 531, "catchExpressionEnd": 563, "catchBlockStart": 531, "catchBlockEnd": 597, "exceptionHandlingCallStart": [571], "exceptionHandlingCallEnd": [590], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 358, "focalAPIEnd": 381, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)", "jSONObject.getJSONObject(String)", "value.getInt(String)"], "useStart": [358, 416, 416], "useEnd": [402, 439, 453], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/isenseDev/iSENSE-Hardware/tree/master/Hardware/Vernier/src/REST/RestAPI.java", "rawCode": "  public void login(String username, String password) {\n    String url =\n        \"method=login&username=\"\n            + URLEncoder.encode(username)\n            + \"&password=\"\n            + URLEncoder.encode(password);\n\n    try {\n      String data = makeRequest(url);\n\n      // Parse JSON Result\n      JSONObject o = new JSONObject(data);\n      session_key = o.getJSONObject(\"data\").getString(\"session\");\n      uid = o.getJSONObject(\"data\").getInt(\"uid\");\n\n      if (isLoggedIn()) {\n        this.username = username;\n      }\n\n    } catch (MalformedURLException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4265, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [1144], "initializationEnd": [1168], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 1272, "guardExpressionEnd": 1294, "guardBlockStart": 1272, "guardBlockEnd": 1443, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1322, "focalAPIEnd": 1349, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)", "value.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [1381, 1409, 1544, 1594, 1735, 1836, 1938], "useEnd": [1407, 1432, 1571, 1622, 1763, 1863, 1968], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/matiasf/GeoRedTSI2/tree/master/GeoRed/source/facebook/src/com/facebook/android/Util.java", "rawCode": "  /**\n   * Parse a server response into a JSON Object. This is a basic implementation using\n   * org.json.JSONObject representation. More sophisticated applications may wish to do their own\n   * parsing.\n   *\n   * <p>The parsed JSON is checked for a variety of error fields and a FacebookException is thrown\n   * if an error condition is set, populated with the error message and error type or code if\n   * available.\n   *\n   * @param response - string representation of the response\n   * @return the response as a JSON Object\n   * @throws JSONException - if the response is not valid JSON\n   * @throws FacebookError - if an error condition is set\n   */\n  public static JSONObject parseJson(String response) throws JSONException, FacebookError {\n    // Edge case: when sending a POST request to /[post_id]/likes\n    // the return value is 'true' or 'false'. Unfortunately\n    // these values cause the JSONObject constructor to throw\n    // an exception.\n    if (response.equals(\"false\")) {\n      throw new FacebookError(\"request failed\");\n    }\n    if (response.equals(\"true\")) {\n      response = \"{value : true}\";\n    }\n    JSONObject json = new JSONObject(response);\n\n    // errors set by the server are not consistent\n    // they depend on the method and endpoint\n    if (json.has(\"error\")) {\n      JSONObject error = json.getJSONObject(\"error\");\n      throw new FacebookError(error.getString(\"message\"), error.getString(\"type\"), 0);\n    }\n    if (json.has(\"error_code\") && json.has(\"error_msg\")) {\n      throw new FacebookError(\n          json.getString(\"error_msg\"), \"\", Integer.parseInt(json.getString(\"error_code\")));\n    }\n    if (json.has(\"error_code\")) {\n      throw new FacebookError(\"request failed\", \"\", Integer.parseInt(json.getString(\"error_code\")));\n    }\n    if (json.has(\"error_msg\")) {\n      throw new FacebookError(json.getString(\"error_msg\"));\n    }\n    if (json.has(\"error_reason\")) {\n      throw new FacebookError(json.getString(\"error_reason\"));\n    }\n    return json;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4266, "initialization": ["JSONObject jSONObject = getEntity(*)"], "initializationStart": [1152], "initializationEnd": [1188], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.length()"], "configurationStart": [1242], "configurationEnd": [1255], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1280, "focalAPIEnd": 1306, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.length()", "value.getJSONArray(String)"], "useStart": [1360, 1398], "useEnd": [1373, 1422], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guoliqiang/coding/tree/master/third_part/hadoop_src/hadoop-2.0.5-alpha-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServicesApps.java", "rawCode": "  @Test\n  public void testAppsQueryFinishBeginEnd() throws JSONException, Exception {\n    rm.start();\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    long start = System.currentTimeMillis();\n    Thread.sleep(1);\n    RMApp app1 = rm.submitApp(1024);\n    amNodeManager.nodeHeartbeat(true);\n    // finish App\n    MockAM am = rm.sendAMLaunched(app1.getCurrentAppAttempt().getAppAttemptId());\n    am.registerAppAttempt();\n    am.unregisterAppAttempt();\n    amNodeManager.nodeHeartbeat(\n        app1.getCurrentAppAttempt().getAppAttemptId(), 1, ContainerState.COMPLETE);\n\n    rm.submitApp(1024);\n    rm.submitApp(1024);\n    long end = System.currentTimeMillis();\n\n    WebResource r = resource();\n    ClientResponse response =\n        r.path(\"ws\")\n            .path(\"v1\")\n            .path(\"cluster\")\n            .path(\"apps\")\n            .queryParam(\"finishedTimeBegin\", String.valueOf(start))\n            .queryParam(\"finishedTimeEnd\", String.valueOf(end))\n            .accept(MediaType.APPLICATION_JSON)\n            .get(ClientResponse.class);\n    assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());\n    JSONObject json = response.getEntity(JSONObject.class);\n    assertEquals(\"incorrect number of elements\", 1, json.length());\n    JSONObject apps = json.getJSONObject(\"apps\");\n    assertEquals(\"incorrect number of elements\", 1, apps.length());\n    JSONArray array = apps.getJSONArray(\"app\");\n    assertEquals(\"incorrect number of elements\", 1, array.length());\n    rm.stop();\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4267, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new EnvSocialContentException(String,*,*)"], "tryExpressionStart": 1492, "tryExpressionEnd": 1496, "tryBlockStart": 1492, "tryBlockEnd": 2264, "catchExpressionStart": 2020, "catchExpressionEnd": 2044, "catchBlockStart": 2020, "catchBlockEnd": 2141, "exceptionHandlingCallStart": [2058], "exceptionHandlingCallEnd": [2134], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1686, "focalAPIEnd": 1736, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/asorici/envsmth/tree/master/EnvSocialApp/src/com/envsocial/android/api/Annotation.java", "rawCode": "  private static List<Annotation> getAnnotationsList(\n      Context context, String annotationRequestUrl, Location location, boolean retrieveAll)\n      throws EnvSocialComException, EnvSocialContentException {\n\n    // get data of the user executing this action\n    String userUri = Preferences.getUserUri(context);\n    AppClient client = new AppClient(context);\n\n    // append virtual access flag to the request url\n    // if location is null, the flag will have been set earlier in the url\n    if (location != null) {\n      boolean virtualAccess = location.hasVirtualAccess();\n      annotationRequestUrl =\n          Url.appendOrReplaceParameter(\n              annotationRequestUrl, \"virtual\", Boolean.toString(virtualAccess));\n    }\n\n    HttpResponse response;\n    String responseData;\n\n    try {\n      response = client.makeGetRequest(annotationRequestUrl);\n      responseData = EntityUtils.toString(response.getEntity());\n    } catch (Exception e) {\n      throw new EnvSocialComException(userUri, HttpMethod.GET, EnvSocialResource.ANNOTATION, e);\n    }\n\n    // Check the status code\n    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n      // Log.d(TAG, \"[DEBUG]>> Error response on annotations list: \" + responseData);\n      throw EnvSocialComException.newInstanceFrom(\n          response.getStatusLine().getStatusCode(),\n          userUri,\n          HttpMethod.GET,\n          EnvSocialResource.ANNOTATION,\n          null);\n    }\n\n    // If SC_OK, parse response\n    try {\n      List<Annotation> annotations = parse(context, responseData, location);\n\n      // if we want to consume the entire annotations list\n      if (retrieveAll) {\n        JSONObject meta = new JSONObject(responseData).getJSONObject(\"meta\");\n        String next = meta.getString(\"next\");\n\n        if (next != null && !next.equalsIgnoreCase(\"null\")) {\n          next = Url.getFullPath(next);\n          annotations.addAll(getAnnotationsList(context, next, location, true));\n        }\n      }\n\n      return annotations;\n\n    } catch (JSONException e) {\n      throw new EnvSocialContentException(responseData, EnvSocialResource.ANNOTATION, e);\n    } catch (ParseException e) {\n      throw new EnvSocialContentException(responseData, EnvSocialResource.ANNOTATION, e);\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4268, "initialization": ["JSONObject jSONObject = TCPMessageHandler.readMessageAsJSONObject()"], "initializationStart": [3056], "initializationEnd": [3089], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["JSONObject.put(String,String)", "JSONObject.put(String,String)", "getMessage()", "w(String,*)", "JSONObject.put(String,JSONObject)"], "tryExpressionStart": 1329, "tryExpressionEnd": 1333, "tryBlockStart": 1329, "tryBlockEnd": 5874, "catchExpressionStart": 4096, "catchExpressionEnd": 4116, "catchBlockStart": 4096, "catchBlockEnd": 4357, "exceptionHandlingCallStart": [3781, 4181, 4274, 4263, 4307], "exceptionHandlingCallEnd": [3810, 4245, 4288, 4289, 4340], "configuration": ["jSONObject.getString(String)", "jSONObject.getString(String)"], "configurationStart": [3217, 3273], "configurationEnd": [3241, 3300], "guardCondition": "jSONObject.getString(\"type\",).equals(\"invoke\",) && jSONObject.has(\"type\",)", "guardType": "IF {", "guardExpressionStart": 3101, "guardExpressionEnd": 3125, "guardBlockStart": 3101, "guardBlockEnd": 5430, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 3334, "focalAPIEnd": 3363, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getInt(String)", "RPCService.accessMethod(String,String,value)", "JSONObject.put(String,jSONObject)", "JSONObject.put(String,jSONObject)", "JSONObject.put(String,jSONObject)", "JSONObject.put(String,jSONObject)"], "useStart": [3556, 3685, 3907, 4307, 4745, 5253], "useEnd": [3576, 3723, 3940, 4340, 4778, 5286], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/djmailhot/CSE461projects/tree/master/Net/src/edu/uw/cs/cse461/Net/RPC/RPCThread.java", "rawCode": "  @Override\n  public void run() {\n    try {\n      socket = new ServerSocket(portNum);\n      Log.v(TAG, \"Server set up at port: \" + portNum);\n    } catch (IOException e) {\n      Log.e(TAG, \"Failure to create ServerSocket\");\n      return;\n    }\n    // attempt to set the timeout between successive checks of _timeToClose flag\n    try {\n      socket.setSoTimeout(_timeOut);\n    } catch (SocketException e) {\n      e.printStackTrace();\n      return;\n    }\n    Log.v(\"RPCThread\", \"Server ready to accept clients\");\n    // loop until time to close\n    boolean error = false;\n    boolean timeout = false;\n    Socket s = null;\n    int id = 1;\n    while (true) {\n      // set up socket to accept. Code hangs on .accept() until a connection is established or\n      // TIMEOUT ms have passed.\n      TCPMessageHandler handler = null;\n      try {\n        s = socket.accept();\n        s.setSoTimeout(_timeOut);\n        handler = new TCPMessageHandler(s);\n        handler.setMaxReadLength(Integer.MAX_VALUE);\n        Log.v(TAG, \"run: TCP connection established.\");\n      } catch (SocketTimeoutException e) {\n        timeout = true;\n      } catch (IOException e) {\n        Log.e(TAG, \"run: IOException on accept.\");\n        error = true;\n      }\n      if (!error && !timeout) {\n        String host = s.getInetAddress().getHostAddress();\n        try {\n          Log.v(TAG, \"reading from client\");\n          JSONObject handshake = handler.readMessageAsJSONObject();\n          if (handshake.has(\"type\")) {\n            if (handshake.getString(\"type\").equals(\"control\")) {\n              JSONObject successMsg = new JSONObject();\n              successMsg.put(\"id\", id);\n              id++;\n              successMsg.put(\"host\", host);\n              successMsg.put(\"callid\", handshake.getInt(\"id\"));\n              successMsg.put(\"type\", \"OK\");\n              handler.sendMessage(successMsg);\n              Log.v(TAG, \"received handshake\");\n            } else {\n              JSONObject errorMsg = new JSONObject();\n              errorMsg.put(\"id\", id);\n              id++;\n              errorMsg.put(\"host\", host);\n              errorMsg.put(\"callid\", -1);\n              errorMsg.put(\"type\", \"ERROR\");\n              errorMsg.put(\"msg\", \"Error establishing connection\");\n              handler.sendMessage(errorMsg);\n              Log.w(TAG, \"received improper handshake\");\n              s.close();\n              handler.discard();\n              break;\n            }\n          } else {\n            JSONObject errorMsg = new JSONObject();\n            errorMsg.put(\"id\", id);\n            id++;\n            errorMsg.put(\"host\", host);\n            errorMsg.put(\"callid\", -1);\n            errorMsg.put(\"type\", \"ERROR\");\n            errorMsg.put(\"msg\", \"Error establishing connection\");\n            handler.sendMessage(errorMsg);\n            Log.w(TAG, \"received potential handshake that was not formulated correctly\");\n            s.close();\n            handler.discard();\n            break;\n          }\n          Log.v(TAG, \"reading request from client\");\n          JSONObject request = handler.readMessageAsJSONObject();\n          if (request.has(\"type\")) {\n            if (request.getString(\"type\").equals(\"invoke\")) {\n              String app = request.getString(\"app\");\n              String method = request.getString(\"method\");\n              JSONObject args = request.getJSONObject(\"args\");\n              JSONObject response = new JSONObject();\n              response.put(\"id\", id);\n              id++;\n              response.put(\"host\", host);\n              response.put(\"callid\", request.getInt(\"id\"));\n              try {\n                Log.v(TAG, \"Evaluating request\");\n                JSONObject result = parent.accessMethod(app, method, args);\n                if (result == null) {\n                  response.put(\"type\", \"ERROR\");\n                  response.put(\"message\", \"That method/app does not exist\");\n                  response.put(\"callargs\", request);\n                } else {\n                  response.put(\"type\", \"OK\");\n                  response.put(\"value\", result);\n                }\n              } catch (Exception e) {\n                response.put(\"type\", \"ERROR\");\n                response.put(\"message\", \"The method called caused an exception\");\n                Log.w(TAG, e.getMessage());\n                response.put(\"callargs\", request);\n              }\n              handler.sendMessage(response);\n            } else {\n              JSONObject errorMsg = new JSONObject();\n              errorMsg.put(\"id\", id);\n              id++;\n              errorMsg.put(\"host\", host);\n              errorMsg.put(\"callid\", -1);\n              errorMsg.put(\"type\", \"ERROR\");\n              errorMsg.put(\"message\", \"Error receiving request\");\n              errorMsg.put(\"callargs\", request);\n              handler.sendMessage(errorMsg);\n              Log.w(TAG, \"received potential request that was not formulated correctly\");\n            }\n          } else {\n            JSONObject errorMsg = new JSONObject();\n            errorMsg.put(\"id\", id);\n            id++;\n            errorMsg.put(\"host\", host);\n            errorMsg.put(\"callid\", -1);\n            errorMsg.put(\"type\", \"ERROR\");\n            errorMsg.put(\"message\", \"Error receiving request\");\n            errorMsg.put(\"callargs\", request);\n            handler.sendMessage(errorMsg);\n            Log.w(TAG, \"received potential request that was not formulated correctly\");\n          }\n\n        } catch (NullPointerException e) {\n          Log.e(TAG, \"run: socket connection closed unexpectedly\");\n        } catch (SocketTimeoutException e) {\n          Log.e(TAG, \"run: socket timeout while waiting for request\");\n        } catch (IOException e) {\n          Log.e(TAG, \"run: IOException when reading from socket\");\n        } catch (JSONException e) {\n          Log.e(TAG, \"run: JSONException when reading from socket\");\n        }\n      }\n      if (!timeout) {\n        try {\n          Log.v(TAG, \"run: Attempting to close connection\");\n          s.close();\n          handler.discard();\n          handler = null;\n          s = null;\n        } catch (IOException e) {\n          Log.e(TAG, \"failed to close socket to client\");\n        }\n      }\n\n      // check if time to close; close if it is\n      if (_timeToClose) {\n        try {\n          socket.close();\n          Log.v(TAG, \"closed server socket\");\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n        return;\n      }\n      error = false;\n      timeout = false;\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4269, "initialization": ["JSONObject jSONObject = getEntity(*)"], "initializationStart": [801], "initializationEnd": [837], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 868, "focalAPIEnd": 904, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.length()", "value.getString(String)", "value.getString(String)", "value.getString(String)"], "useStart": [960, 1004, 1056, 1115], "useEnd": [978, 1034, 1088, 1151], "hasFinally": 1, "cleanUpCall": ["MockRM.stop()"], "finallyExpressionStart": 1498, "finallyExpressionEnd": 1506, "finallyBlockStart": 1498, "finallyBlockEnd": 1530, "cleanUpCallStart": [1514], "cleanUpCallEnd": [1523], "url": "https://github.com/nourlcn/yarn-comment/tree/master/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServicesApps.java", "rawCode": "  @Test\n  public void testInvalidApp() throws JSONException, Exception {\n    rm.start();\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    rm.submitApp(1024);\n    amNodeManager.nodeHeartbeat(true);\n    WebResource r = resource();\n\n    try {\n      r.path(\"ws\")\n          .path(\"v1\")\n          .path(\"cluster\")\n          .path(\"apps\")\n          .path(\"application_invalid_12\")\n          .accept(MediaType.APPLICATION_JSON)\n          .get(JSONObject.class);\n      fail(\"should have thrown exception on invalid appid\");\n    } catch (UniformInterfaceException ue) {\n      ClientResponse response = ue.getResponse();\n\n      assertEquals(Status.BAD_REQUEST, response.getClientResponseStatus());\n      assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());\n      JSONObject msg = response.getEntity(JSONObject.class);\n      JSONObject exception = msg.getJSONObject(\"RemoteException\");\n      assertEquals(\"incorrect number of elements\", 3, exception.length());\n      String message = exception.getString(\"message\");\n      String type = exception.getString(\"exception\");\n      String classname = exception.getString(\"javaClassName\");\n      WebServicesTestUtils.checkStringMatch(\n          \"exception message\", \"For input string: \\\"invalid\\\"\", message);\n      WebServicesTestUtils.checkStringMatch(\"exception type\", \"NumberFormatException\", type);\n      WebServicesTestUtils.checkStringMatch(\n          \"exception classname\", \"java.lang.NumberFormatException\", classname);\n\n    } finally {\n      rm.stop();\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4270, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [372], "initializationEnd": [396], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 107, "tryExpressionEnd": 111, "tryBlockStart": 107, "tryBlockEnd": 859, "catchExpressionStart": 801, "catchExpressionEnd": 825, "catchBlockStart": 801, "catchBlockEnd": 859, "exceptionHandlingCallStart": [833], "exceptionHandlingCallEnd": [852], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 428, "focalAPIEnd": 457, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)"], "useStart": [486], "useEnd": [509], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/societies/SOCIETIES-Platform/tree/master/platform-infrastructure/sns/socialdata/src/main/java/org/societies/platform/socialdata/converters/GroupConverterFromLinkedin.java", "rawCode": "  @Override\n  public List<Group> load(String data) {\n\n    List<Group> groups = new ArrayList<Group>();\n    try {\n      JSONObject jsonData = new JSONObject(data);\n      if (jsonData.has(DATA)) {\n        JSONArray jgroups = jsonData.getJSONArray(DATA);\n        for (int i = 0; i < jgroups.length(); i++) {\n          Group g = new GroupImpl();\n          JSONObject jGroup = jgroups.getJSONObject(i);\n\n          JSONObject gInfo = jGroup.getJSONObject(\"group\");\n          g.setDescription(gInfo.getString(\"name\"));\n          g.setId(new GroupId(Type.groupId, \"linkedin:\" + gInfo.getString(\"id\")));\n\n          if (jGroup.has(\"membershipState\")) {\n            g.setTitle(\"linkedin:\" + jGroup.getJSONObject(\"membershipState\").getString(\"code\"));\n          }\n          groups.add(g);\n        }\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n\n    return groups;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4271, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "configurationStart": [297, 351, 414, 473], "configurationEnd": [329, 382, 445, 503], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 765, "focalAPIEnd": 803, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getHighFiversFromJson(value)"], "useStart": [743], "useEnd": [804], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Slashat/slashat-android/tree/master/slashat.se/src/main/java/se/slashat/slashapp/async/HighFiveGetUserAsyncTask.java", "rawCode": "  private User getUserFromJson(JSONObject jsonObject) throws JSONException, MalformedURLException {\n\n    List<HighFiver> highFivers = new ArrayList<HighFiver>();\n    List<Achivement> achivements = new ArrayList<Achivement>();\n    List<Badge> badges = new ArrayList<Badge>();\n    String username = jsonObject.getString(\"username\");\n    String userId = jsonObject.getString(\"user_id\");\n    String pictureUrlString = jsonObject.getString(\"picture\");\n    String qrcodeString = jsonObject.getString(\"qrcode\");\n    // String qrcode_id = jsonObject.getString(\"qrcode_id\");\n    String qrcode_id = \"\";\n    HighFivedBy highFivedBy = getHighFivedByFromJson(jsonObject);\n\n    if (!(jsonObject.get(\"highfivers\") instanceof JSONArray)) {\n      highFivers = getHighFiversFromJson(jsonObject.getJSONObject(\"highfivers\"));\n      Collections.sort(\n          highFivers,\n          new Comparator<HighFiver>() {\n            @Override\n            public int compare(HighFiver highFiver, HighFiver highFiver2) {\n              Long date1 = Long.valueOf(highFiver.getHighfivedDate());\n              Long date2 = Long.valueOf(highFiver2.getHighfivedDate());\n              return date2.compareTo(date1);\n            }\n          });\n    }\n\n    if (jsonObject.get(\"badges\") instanceof JSONArray) {\n      badges.addAll(getBadgesFromJson(jsonObject.getJSONArray(\"badges\")));\n    }\n\n    if (jsonObject.get(\"achievements\") instanceof JSONArray) {\n      achivements.addAll(getAchivementsFromJson(jsonObject.getJSONArray(\"achievements\")));\n    }\n\n    URL pictureUrl = null;\n    URL qrcode = null;\n\n    if (!Strings.isNullOrEmpty(pictureUrlString)) {\n      pictureUrl = new URL(pictureUrlString);\n    }\n\n    if (!Strings.isNullOrEmpty(qrcodeString)) {\n      qrcode = new URL(qrcodeString);\n    }\n\n    return new User(\n        username,\n        userId,\n        highFivedBy,\n        pictureUrl,\n        qrcode,\n        qrcode_id,\n        highFivers,\n        achivements,\n        badges);\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4272, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "getActivity()", "makeText(*,String,*)", "show()"], "tryExpressionStart": 559, "tryExpressionEnd": 563, "tryBlockStart": 559, "tryBlockEnd": 1109, "catchExpressionStart": 810, "catchExpressionEnd": 830, "catchBlockStart": 810, "catchBlockEnd": 1109, "exceptionHandlingCallStart": [848, 925, 885, 885], "exceptionHandlingCallEnd": [867, 938, 1064, 1092], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 671, "focalAPIEnd": 705, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getJSONObject(String)"], "useStart": [671], "useEnd": [727], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NetworksAreMadeOfString/Rhybudd/tree/master/src/net/networksaremadeofstring/rhybudd/ViewZenossDeviceFragment.java", "rawCode": "  @Override\n  public boolean onOptionsItemSelected(MenuItem item) {\n    // Log.e(\"ViewZenossDeviceFragment\", Integer.toString(item.getItemId()) + \" / \" +\n    // Integer.toString(R.id.writenfc));\n\n    switch (item.getItemId()) {\n      case R.id.writenfc:\n        {\n          try {\n            if (getActivity().getPackageManager().hasSystemFeature(PackageManager.FEATURE_NFC)\n                && Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n              Intent NFCIntent = new Intent(getActivity(), WriteNFCActivity.class);\n              try {\n                NFCIntent.putExtra(\n                    WriteNFCActivity.PAYLOAD_UID,\n                    deviceJSON.getJSONObject(\"result\").getJSONObject(\"data\").getString(\"uid\"));\n                this.startActivity(NFCIntent);\n              } catch (Exception e) {\n                e.printStackTrace();\n                Toast.makeText(\n                        getActivity(),\n                        \"Sorry there was error parsing the UID for this device\",\n                        Toast.LENGTH_SHORT)\n                    .show();\n              }\n              return true;\n            } else {\n              return false;\n            }\n          } catch (Exception e) {\n            BugSenseHandler.sendExceptionMessage(\n                \"ViewZenossDeviceFragment\", \"onOptionsItemSelected\", e);\n            return false;\n          }\n        }\n\n      default:\n        break;\n    }\n\n    return false;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4273, "initialization": ["JSONObject jSONObject = new JSONObject()"], "initializationStart": [152], "initializationEnd": [168], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.put(String,JSONArray)", "jSONObject.put(String,JSONObject)", "jSONObject.getJSONArray(String)"], "configurationStart": [174, 200, 241], "configurationEnd": [194, 220, 267], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 288, "focalAPIEnd": 315, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertSame(JSONObject,value)", "jSONObject.getJSONObject(String)", "jSONObject.getJSONArray(String)", "jSONObject.optJSONArray(String)", "jSONObject.optJSONObject(String)", "jSONObject.optJSONArray(String)", "jSONObject.optJSONObject(String)"], "useStart": [274, 334, 431, 531, 580, 633, 685], "useEnd": [316, 361, 457, 557, 607, 659, 712], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TaintDroid/android_platform_libcore/tree/master/json/src/test/java/org/json/JSONObjectTest.java", "rawCode": "  public void testJSONObjects() throws JSONException {\n    JSONObject object = new JSONObject();\n\n    JSONArray a = new JSONArray();\n    JSONObject b = new JSONObject();\n    object.put(\"foo\", a);\n    object.put(\"bar\", b);\n\n    assertSame(a, object.getJSONArray(\"foo\"));\n    assertSame(b, object.getJSONObject(\"bar\"));\n    try {\n      object.getJSONObject(\"foo\");\n      fail();\n    } catch (JSONException e) {\n    }\n    try {\n      object.getJSONArray(\"bar\");\n      fail();\n    } catch (JSONException e) {\n    }\n    assertEquals(a, object.optJSONArray(\"foo\"));\n    assertEquals(b, object.optJSONObject(\"bar\"));\n    assertEquals(null, object.optJSONArray(\"bar\"));\n    assertEquals(null, object.optJSONObject(\"foo\"));\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4274, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 602, "focalAPIEnd": 630, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.length()"], "useStart": [602], "useEnd": [639], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jmesnil/hornetq-old/tree/master/tests/src/org/hornetq/tests/integration/management/HornetQServerControlTest.java", "rawCode": "  public void testGetConnectorsAsJSON() throws Exception {\n    HornetQServerControl serverControl = createManagementControl();\n\n    String jsonString = serverControl.getConnectorsAsJSON();\n    Assert.assertNotNull(jsonString);\n    JSONArray array = new JSONArray(jsonString);\n    Assert.assertEquals(1, array.length());\n    JSONObject data = array.getJSONObject(0);\n    Assert.assertEquals(connectorConfig.getName(), data.optString(\"name\"));\n    Assert.assertEquals(connectorConfig.getFactoryClassName(), data.optString(\"factoryClassName\"));\n    Assert.assertEquals(connectorConfig.getParams().size(), data.getJSONObject(\"params\").length());\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4275, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 144, "focalAPIEnd": 172, "followUpCheck": "value.has(\"status\")", "checkType": "IF", "followUpCheckExpressionStart": 178, "followUpCheckExpressionEnd": 211, "followUpCheckBlockStart": 178, "followUpCheckBlockEnd": 839, "use": ["value.getJSONObject(String)", "value.getJSONObject(String)"], "useStart": [412, 508], "useEnd": [450, 554], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yusuke/twitter4j/tree/master/twitter4j-stream/src/main/java/twitter4j/SiteStreamsImpl.java", "rawCode": "  @Override\n  protected void onDelete(final JSONObject json, StreamListener[] listeners) throws JSONException {\n    JSONObject deletionNotice = json.getJSONObject(\"delete\");\n    if (deletionNotice.has(\"status\")) {\n      for (StreamListener listener : listeners) {\n        ((SiteStreamsListener) listener)\n            .onDeletionNotice(\n                forUser.get(),\n                new StatusDeletionNoticeImpl(deletionNotice.getJSONObject(\"status\")));\n      }\n    } else {\n      JSONObject directMessage = deletionNotice.getJSONObject(\"direct_message\");\n      for (StreamListener listener : listeners) {\n        ((SiteStreamsListener) listener)\n            .onDeletionNotice(\n                forUser.get(),\n                ParseUtil.getInt(\"id\", directMessage),\n                ParseUtil.getLong(\"user_id\", directMessage));\n      }\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4276, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [135], "initializationEnd": [157], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 118, "tryExpressionEnd": 122, "tryBlockStart": 118, "tryBlockEnd": 1835, "catchExpressionStart": 1734, "catchExpressionEnd": 1759, "catchBlockStart": 1734, "catchBlockEnd": 1835, "exceptionHandlingCallStart": [1808], "exceptionHandlingCallEnd": [1828], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "sensorid<jSONObject.length()", "guardType": "LOOP {", "guardExpressionStart": 165, "guardExpressionEnd": 223, "guardBlockStart": 165, "guardBlockEnd": 1726, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 253, "focalAPIEnd": 304, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getJSONObject(String)", "getNames(jSONObject)", "jSONObject.getJSONObject(String)", "jSONObject.getJSONObject(String)", "value.getJSONArray(String)", "value.getString(String)", "value.getString(String)", "value.getDouble(String)", "value.getDouble(String)", "getNames(jSONObject)"], "useStart": [577, 664, 647, 647, 1209, 1379, 1438, 1492, 1541, 1650], "useEnd": [603, 687, 698, 720, 1234, 1404, 1467, 1518, 1568, 1673], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/b0m0x/PSE-Augmented-Reality-for-Pervasive-Computing/tree/master/Vision/src/vision/model/JSONConverter.java", "rawCode": "  /** */\n  public void convert() {\n    this.resetList();\n    String stream = getJSONStream();\n    JSONObject jo;\n\n    try {\n      jo = new JSONObject(stream);\n      for (int sensorid = 0; sensorid < jo.length(); sensorid++) {\n\n        JSONObject lvl1 = jo.getJSONObject(JSONObject.getNames(jo)[sensorid]);\n        sensor = new Sensor();\n\n        for (int type = 0;\n            type\n                < jo.getJSONObject(JSONObject.getNames(jo)[sensorid])\n                    .getJSONObject(\"data\")\n                    .length();\n            type++) {\n\n          JSONObject lvl2 = lvl1.getJSONObject(\"data\");\n          JSONObject temp =\n              jo.getJSONObject(JSONObject.getNames(jo)[sensorid]).getJSONObject(\"data\");\n          Sample sample = new Sample();\n\n          JSONObject lvl3 = lvl2.getJSONObject(JSONObject.getNames(lvl2)[type]);\n\n          // sample.setSensor(sensor);\n\n          sample.setType(JSONObject.getNames(lvl2)[type]);\n          sample.setUnit(lvl3.getString(\"unit\"));\n          sample.setUpdate(Long.parseLong(lvl3.getString(\"updated\")));\n          sample.setValue(Float.parseFloat(lvl3.getString(\"value\")));\n\n          sensor.addToSamples(sample);\n        }\n\n        JSONArray ja = lvl1.getJSONArray(\"tags\");\n        for (int i = 0; i < ja.length(); i++) {\n          sensor.addToTags(ja.getString(i));\n        }\n        sensor.setUpdate(Long.parseLong(lvl1.getString(\"updated\")));\n        sensor.setDescription(lvl1.getString(\"description\"));\n\n        double lat = lvl1.getDouble(\"latitude\");\n        double lon = lvl1.getDouble(\"longitude\");\n        sensor.setPosition(getLocalCoordinates(lat, lon));\n        sensor.setId(JSONObject.getNames(jo)[sensorid]);\n\n        this.addSensorToList();\n      }\n\n    } catch (JSONException e1) {\n      // TODO Auto-generated catch block\n      e1.printStackTrace();\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4277, "initialization": ["JSONObject jSONObject = new JSONObject(*)"], "initializationStart": [655], "initializationEnd": [689], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)"], "configurationStart": [788], "configurationEnd": [836], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1262, "focalAPIEnd": 1304, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)", "value.getString(String)"], "useStart": [1312, 1386], "useEnd": [1356, 1431], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/skaegi/orion.server/tree/master/tests/org.eclipse.orion.server.tests/src/org/eclipse/orion/server/tests/servlets/git/GitStatusTest.java", "rawCode": "  @Test\n  public void testStatusAdded() throws Exception {\n    URI workspaceLocation = createWorkspace(getMethodName());\n    IPath[] clonePaths = createTestProjects(workspaceLocation);\n\n    for (IPath clonePath : clonePaths) {\n      // clone a repo\n      JSONObject clone = clone(clonePath);\n      String cloneContentLocation = clone.getString(ProtocolConstants.KEY_CONTENT_LOCATION);\n\n      // get project/folder metadata\n      WebRequest request = getGetRequest(cloneContentLocation);\n      WebResponse response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode());\n      JSONObject folder = new JSONObject(response.getText());\n\n      String fileName = \"new.txt\";\n      request =\n          getPostFilesRequest(\n              folder.getString(ProtocolConstants.KEY_LOCATION),\n              getNewFileJSON(fileName).toString(),\n              fileName);\n      response = webConversation.getResponse(request);\n      assertEquals(HttpURLConnection.HTTP_CREATED, response.getResponseCode());\n\n      // git section for the new file\n      JSONObject newFile = getChild(folder, \"new.txt\");\n\n      // \"git add {path}\"\n      addFile(newFile);\n\n      // git section for the folder\n      JSONObject gitSection = folder.getJSONObject(GitConstants.KEY_GIT);\n      gitSection.getString(GitConstants.KEY_INDEX);\n      String gitStatusUri = gitSection.getString(GitConstants.KEY_STATUS);\n\n      assertStatus(new StatusResult().setAddedNames(fileName), gitStatusUri);\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4278, "initialization": ["JSONObject jSONObject = getPresets(Context)"], "initializationStart": [91], "initializationEnd": [110], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 56, "tryExpressionEnd": 60, "tryBlockStart": 56, "tryBlockEnd": 623, "catchExpressionStart": 565, "catchExpressionEnd": 589, "catchBlockStart": 565, "catchBlockEnd": 623, "exceptionHandlingCallStart": [597], "exceptionHandlingCallEnd": [616], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jSONObject==null)", "guardType": "IF {", "guardExpressionStart": 118, "guardExpressionEnd": 140, "guardBlockStart": 118, "guardBlockEnd": 153, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 181, "focalAPIEnd": 215, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.keys()", "value.getJSONObject(String)"], "useStart": [315, 433], "useEnd": [329, 459], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rjmarsan/PlasmaSound/tree/master/src/com/rj/processing/plasmasoundhd/sequencer/JSONSequencerPresets.java", "rawCode": "  public String[] getPresetNames(Context context) {\n    try {\n      JSONObject presetobj = getPresets(context);\n      if (presetobj == null) return null;\n      JSONObject presets = presetobj.getJSONObject(\"presets\");\n      String[] presetnames = new String[presets.length()];\n      int i = 0;\n      Iterator iter = presets.keys();\n      while (iter.hasNext()) {\n        String key = (String) iter.next();\n        JSONObject preset = presets.getJSONObject(key);\n        presetnames[i] = preset.getString(\"name\");\n        i++;\n      }\n      return presetnames;\n    } catch (JSONException j) {\n      j.printStackTrace();\n    }\n    return null;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4279, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [228], "initializationEnd": [249], "hasTryCatch": 1, "exceptionType": "CryptoServiceException", "exceptionHandlingCall": ["getTrace(*)", "fine(*)", "getResult()"], "tryExpressionStart": 166, "tryExpressionEnd": 170, "tryBlockStart": 166, "tryBlockEnd": 2050, "catchExpressionStart": 1100, "catchExpressionEnd": 1133, "catchBlockStart": 1100, "catchBlockEnd": 1217, "exceptionHandlingCallStart": [1154, 1145, 1193], "exceptionHandlingCallEnd": [1174, 1175, 1206], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(JSONObject.getNames(jSONObject,)==null) && JSONObject.getNames(jSONObject,)", "guardType": "IF {", "guardExpressionStart": 463, "guardExpressionEnd": 503, "guardBlockStart": 463, "guardBlockEnd": 557, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 824, "focalAPIEnd": 847, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)", "value.get()"], "useStart": [977, 934], "useEnd": [1000, 1014], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Digt/TrustedNet/tree/master/Server/Sources/src/main/java/com/digt/handler/AddSignRequestAction.java", "rawCode": "  @Override\n  public InputStream doAction(HttpServletRequest request) throws InvalidParameterException {\n    String jsStr = HttpUtils.getParam(\"param\", request);\n    try {\n      // Extract data to sign\n      JSONObject params = new JSONObject(jsStr);\n      SecurityToken token = new AuthInfo(request).getSecurityToken();\n      UserId userId = new UserId(UserId.Type.me, null);\n      HashMap<String, JSONObject> uriStat = new HashMap<String, JSONObject>();\n\n      if (JSONObject.getNames(params) == null) throw new InvalidParameterException(\"No parameters\");\n\n      for (String i : JSONObject.getNames(params)) {\n        JSONObject jo = new JSONObject();\n        SigningState stat = SigningState.FINISHED;\n        SigningResult res = SigningResult.ERR_FAIL;\n        SigningRequestDb signReq = null;\n        JSONObject data = params.getJSONObject(i);\n        try {\n          signReq =\n              (SigningRequestDb)\n                  cryptoService.addSigningRequest(userId, i, data.getString(\"title\"), token).get();\n          stat = signReq.getState();\n          res = signReq.getResult();\n        } catch (CryptoServiceException e) {\n          LOG.fine(LogUtils.getTrace(e));\n          res = e.getResult();\n        } catch (JSONException e) {\n          LOG.severe(LogUtils.getTrace(e));\n          throw new InvalidParameterException(e.getMessage());\n        } catch (Exception e) {\n          LOG.severe(LogUtils.getTrace(e));\n        }\n\n        if (signReq != null) {\n          jo.put(\"transaction_id\", signReq.getObjectId());\n          String title = \"Добавлен запрос на подпись.\";\n          activGen.generateActivity(request, title, title);\n        }\n        jo.put(\"status\", stat.ordinal());\n        jo.put(\"result\", res.ordinal());\n        uriStat.put(i, jo);\n      }\n\n      JSONObject jsRes = new JSONObject(uriStat);\n      // Writing response\n      return new ByteArrayInputStream(jsRes.toString().getBytes());\n    } catch (Exception e) {\n      LOG.severe(LogUtils.getTrace(e));\n      throw new InvalidParameterException(e.getMessage());\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4280, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [668], "initializationEnd": [694], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()", "e(String,String)"], "tryExpressionStart": 522, "tryExpressionEnd": 526, "tryBlockStart": 522, "tryBlockEnd": 1397, "catchExpressionStart": 1280, "catchExpressionEnd": 1304, "catchBlockStart": 1280, "catchBlockEnd": 1397, "exceptionHandlingCallStart": [1314, 1343], "exceptionHandlingCallEnd": [1333, 1388], "configuration": ["jSONObject.getString(String)", "jSONObject.getString(String)"], "configurationStart": [724, 779], "configurationEnd": [749, 802], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 834, "focalAPIEnd": 862, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)", "value.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [895, 955, 1012, 1067], "useEnd": [923, 979, 1038, 1089], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/njuyyz/ebayFriends/tree/master/src/activity/profile/ProfileFragment.java", "rawCode": "  private List<NewsFeedItem> getNewsFeedList(int page) {\n    List<NewsFeedItem> list = new ArrayList<NewsFeedItem>();\n    String getURL = Constants.GET_PROFILE_URL_PREFIX + \"num=\" + page + \"&name=\" + name;\n    GetRequest getRequest = new GetRequest(getURL);\n    String jsonResult = getRequest.getContent();\n    Log.v(\"ProfileFragment\", \"Request URL: \" + getURL);\n    Log.v(\"ProfileFragment\", \"Response: \" + jsonResult);\n    if (jsonResult == null) {\n      Log.e(\"NewsFeedFragment\", \"Json Parse Error\");\n    } else {\n      try {\n        JSONArray itemArray = new JSONArray(jsonResult);\n        for (int i = 0; i < itemArray.length(); i++) {\n          JSONObject item = itemArray.getJSONObject(i);\n          String imageURL = item.getString(\"picture\");\n          String voiceURL = item.getString(\"voice\");\n          JSONObject person = item.getJSONObject(\"author\");\n          String portraitURL = person.getString(\"portrait\");\n          String authorName = person.getString(\"name\");\n          String commentsURL = item.getString(\"comments\");\n          String goodURL = item.getString(\"good\");\n          NewsFeedItem newsFeedItem =\n              new NewsFeedItem(imageURL, portraitURL, authorName, voiceURL, commentsURL, goodURL);\n          list.add(newsFeedItem);\n        }\n      } catch (JSONException e) {\n        e.printStackTrace();\n        Log.e(\"ProfileFragement\", \"Parse Json Error\");\n      }\n    }\n    return list;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4281, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["cleanupTables()", "new EnvSocialContentException(String,*,*)"], "tryExpressionStart": 253, "tryExpressionEnd": 257, "tryBlockStart": 253, "tryBlockEnd": 1071, "catchExpressionStart": 929, "catchExpressionEnd": 954, "catchBlockStart": 929, "catchBlockEnd": 1071, "exceptionHandlingCallStart": [962, 991], "exceptionHandlingCallEnd": [977, 1064], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 329, "focalAPIEnd": 381, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/asorici/envived-client/tree/master/src/com/envived/android/features/program/ProgramDbHelper.java", "rawCode": "  private void insertProgram() throws EnvSocialContentException {\n    // perform initial insertion of the program if and only if the database is created\n    // Log.d(TAG, \"Inserting program\");\n\n    String programJSON = feature.getSerializedData();\n\n    try {\n      // Parse program's JSON\n      JSONObject program = (JSONObject) new JSONObject(programJSON).getJSONObject(\"program\");\n      JSONArray sessionsArray = (JSONArray) program.getJSONArray(\"sessions\");\n      JSONArray presentationsArray = (JSONArray) program.getJSONArray(\"presentations\");\n      JSONArray speakersArray = (JSONArray) program.getJSONArray(\"speakers\");\n      JSONArray presentationSpeakersArray =\n          (JSONArray) program.getJSONArray(\"presentation_speakers\");\n\n      insertSessions(sessionsArray);\n      insertPresentations(presentationsArray);\n      insertSpeakers(speakersArray);\n      insertPresentationSpeakers(presentationSpeakersArray);\n    } catch (JSONException ex) {\n      cleanupTables();\n      throw new EnvSocialContentException(programJSON, EnvSocialResource.FEATURE, ex);\n    }\n\n    dbStatus = DB_POPULATED;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4282, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [518], "initializationEnd": [543], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.put(String,String)"], "configurationStart": [549], "configurationEnd": [609], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 635, "focalAPIEnd": 665, "followUpCheck": "!value.has(eventId)", "checkType": "IF", "followUpCheckExpressionStart": 671, "followUpCheckExpressionEnd": 696, "followUpCheckBlockStart": 671, "followUpCheckBlockEnd": 845, "use": ["value.put(String,JSONObject)", "value.getJSONObject(String)", "value.getJSONObject(String)", "jSONObject.toString()"], "useStart": [808, 850, 850, 1061], "useEnd": [838, 888, 928, 1078], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xhanin/voxxrin/tree/master/voxxr-web/src/main/java/voxxr/web/MyResources.java", "rawCode": "  public static void updateMyPresentation(MyPresentation myPresentation) throws JSONException {\n    DatastoreService ds = DatastoreServiceFactory.getDatastoreService();\n    User me = myPresentation.getUser();\n    String eventId = myPresentation.getEventId();\n    Entity my = null;\n    try {\n      my = ds.get(Rests.createKey(\"My\", me.getId()));\n    } catch (EntityNotFoundException e) {\n      my = MyResources.newMy(me);\n    }\n    String myJsonStr = ((Text) my.getProperty(\"json\")).getValue();\n    JSONObject myJson = new JSONObject(myJsonStr);\n    myJson.put(\"lastmodified\", myPresentation.getLastModified());\n    JSONObject events = myJson.getJSONObject(\"events\");\n    if (!events.has(eventId)) {\n      JSONObject jsonEvent = new JSONObject();\n      jsonEvent.put(\"presentations\", new JSONObject());\n      events.put(eventId, jsonEvent);\n    }\n    events\n        .getJSONObject(eventId)\n        .getJSONObject(\"presentations\")\n        .put(myPresentation.getPresentationId(), MyPresentation.TO_JSON.apply(myPresentation));\n    my.setProperty(\"json\", new Text(myJson.toString()));\n    my.setProperty(\"lastmodified\", myPresentation.getLastModified());\n    ds.put(my);\n    MemcacheService memcache = MemcacheServiceFactory.getMemcacheService(\"entities\");\n    String cacheKey = KeyFactory.keyToString(my.getKey());\n    memcache.put(cacheKey, my);\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4283, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)"], "configurationStart": [725, 1130], "configurationEnd": [777, 1185], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 1836, "guardExpressionEnd": 1879, "guardBlockStart": 1836, "guardBlockEnd": 3875, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1914, "focalAPIEnd": 1962, "followUpCheck": "value.has(JSONConsts.STORE_GOODS_SU)", "checkType": "IF", "followUpCheckExpressionStart": 1971, "followUpCheckExpressionEnd": 2019, "followUpCheckBlockStart": 1971, "followUpCheckBlockEnd": 2291, "use": ["value.getJSONArray(String)", "value.getJSONArray(String)", "value.getJSONArray(String)", "value.getJSONArray(String)", "value.getJSONArray(String)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)"], "useStart": [2050, 2378, 2704, 3034, 3370, 4056, 4558], "useEnd": [2102, 2430, 2756, 3086, 3422, 4108, 4614], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tooflya/project-birds/tree/master/proj.android/src/com/soomla/store/data/StoreInfo.java", "rawCode": "  /** Private functions * */\n  private static void fromJSONObject(JSONObject jsonObject) throws JSONException {\n    mVirtualItems = new HashMap<String, VirtualItem>();\n    mPurchasableItems = new HashMap<String, PurchasableVirtualItem>();\n    mGoodsCategories = new HashMap<String, VirtualCategory>();\n    mGoodsUpgrades = new HashMap<String, List<UpgradeVG>>();\n\n    mCurrencyPacks = new LinkedList<VirtualCurrencyPack>();\n    mGoods = new LinkedList<VirtualGood>();\n    mCategories = new LinkedList<VirtualCategory>();\n    mCurrencies = new LinkedList<VirtualCurrency>();\n    mNonConsumables = new LinkedList<NonConsumableItem>();\n\n    if (jsonObject.has(JSONConsts.STORE_CURRENCIES)) {\n      JSONArray virtualCurrencies = jsonObject.getJSONArray(JSONConsts.STORE_CURRENCIES);\n      for (int i = 0; i < virtualCurrencies.length(); i++) {\n        JSONObject o = virtualCurrencies.getJSONObject(i);\n        VirtualCurrency c = new VirtualCurrency(o);\n        mCurrencies.add(c);\n\n        mVirtualItems.put(c.getItemId(), c);\n      }\n    }\n\n    if (jsonObject.has(JSONConsts.STORE_CURRENCYPACKS)) {\n      JSONArray currencyPacks = jsonObject.getJSONArray(JSONConsts.STORE_CURRENCYPACKS);\n      for (int i = 0; i < currencyPacks.length(); i++) {\n        JSONObject o = currencyPacks.getJSONObject(i);\n        VirtualCurrencyPack pack = new VirtualCurrencyPack(o);\n        mCurrencyPacks.add(pack);\n\n        mVirtualItems.put(pack.getItemId(), pack);\n\n        PurchaseType purchaseType = pack.getPurchaseType();\n        if (purchaseType instanceof PurchaseWithMarket) {\n          mPurchasableItems.put(\n              ((PurchaseWithMarket) purchaseType).getGoogleMarketItem().getProductId(), pack);\n        }\n      }\n    }\n\n    // The order in which VirtualGoods are created matters!\n    // For example: VGU and VGP depend on other VGs\n    if (jsonObject.has(JSONConsts.STORE_GOODS)) {\n      JSONObject virtualGoods = jsonObject.getJSONObject(JSONConsts.STORE_GOODS);\n\n      if (virtualGoods.has(JSONConsts.STORE_GOODS_SU)) {\n        JSONArray suGoods = virtualGoods.getJSONArray(JSONConsts.STORE_GOODS_SU);\n        for (int i = 0; i < suGoods.length(); i++) {\n          JSONObject o = suGoods.getJSONObject(i);\n          SingleUseVG g = new SingleUseVG(o);\n          addVG(g);\n        }\n      }\n\n      if (virtualGoods.has(JSONConsts.STORE_GOODS_LT)) {\n        JSONArray ltGoods = virtualGoods.getJSONArray(JSONConsts.STORE_GOODS_LT);\n        for (int i = 0; i < ltGoods.length(); i++) {\n          JSONObject o = ltGoods.getJSONObject(i);\n          LifetimeVG g = new LifetimeVG(o);\n          addVG(g);\n        }\n      }\n\n      if (virtualGoods.has(JSONConsts.STORE_GOODS_EQ)) {\n        JSONArray eqGoods = virtualGoods.getJSONArray(JSONConsts.STORE_GOODS_EQ);\n        for (int i = 0; i < eqGoods.length(); i++) {\n          JSONObject o = eqGoods.getJSONObject(i);\n          EquippableVG g = new EquippableVG(o);\n          addVG(g);\n        }\n      }\n\n      if (virtualGoods.has(JSONConsts.STORE_GOODS_PA)) {\n        JSONArray paGoods = virtualGoods.getJSONArray(JSONConsts.STORE_GOODS_PA);\n        for (int i = 0; i < paGoods.length(); i++) {\n          JSONObject o = paGoods.getJSONObject(i);\n          SingleUsePackVG g = new SingleUsePackVG(o);\n          addVG(g);\n        }\n      }\n\n      if (virtualGoods.has(JSONConsts.STORE_GOODS_UP)) {\n        JSONArray upGoods = virtualGoods.getJSONArray(JSONConsts.STORE_GOODS_UP);\n        for (int i = 0; i < upGoods.length(); i++) {\n          JSONObject o = upGoods.getJSONObject(i);\n          UpgradeVG g = new UpgradeVG(o);\n          addVG(g);\n\n          List<UpgradeVG> upgrades = mGoodsUpgrades.get(g.getGoodItemId());\n          if (upgrades == null) {\n            upgrades = new ArrayList<UpgradeVG>();\n            mGoodsUpgrades.put(g.getGoodItemId(), upgrades);\n          }\n          upgrades.add(g);\n        }\n      }\n    }\n\n    // Categories depend on virtual goods. That's why the have to be initialized after!\n    if (jsonObject.has(JSONConsts.STORE_CATEGORIES)) {\n      JSONArray virtualCategories = jsonObject.getJSONArray(JSONConsts.STORE_CATEGORIES);\n      for (int i = 0; i < virtualCategories.length(); i++) {\n        JSONObject o = virtualCategories.getJSONObject(i);\n        VirtualCategory category = new VirtualCategory(o);\n        mCategories.add(category);\n        for (String goodItemId : category.getGoodsItemIds()) {\n          mGoodsCategories.put(goodItemId, category);\n        }\n      }\n    }\n\n    if (jsonObject.has(JSONConsts.STORE_NONCONSUMABLES)) {\n      JSONArray nonConsumables = jsonObject.getJSONArray(JSONConsts.STORE_NONCONSUMABLES);\n      for (int i = 0; i < nonConsumables.length(); i++) {\n        JSONObject o = nonConsumables.getJSONObject(i);\n        NonConsumableItem non = new NonConsumableItem(o);\n        mNonConsumables.add(non);\n\n        mVirtualItems.put(non.getItemId(), non);\n\n        PurchaseType purchaseType = non.getPurchaseType();\n        if (purchaseType instanceof PurchaseWithMarket) {\n          mPurchasableItems.put(\n              ((PurchaseWithMarket) purchaseType).getGoogleMarketItem().getProductId(), non);\n        }\n      }\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4284, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [190], "initializationEnd": [213], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["i(String,String)"], "tryExpressionStart": 160, "tryExpressionEnd": 164, "tryBlockStart": 160, "tryBlockEnd": 503, "catchExpressionStart": 414, "catchExpressionEnd": 434, "catchBlockStart": 414, "catchBlockEnd": 503, "exceptionHandlingCallStart": [442], "exceptionHandlingCallEnd": [496], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 252, "focalAPIEnd": 279, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)"], "useStart": [301], "useEnd": [330], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mmoutenot/SandFox/tree/master/embedding/android/GeckoAppShell.java", "rawCode": "  public static String handleGeckoMessage(String message) {\n    //\n    // {\"gecko\": {\n    // \"type\": \"value\",\n    // \"event_specific\": \"value\",\n    // ....\n    try {\n      JSONObject json = new JSONObject(message);\n      final JSONObject geckoObject = json.getJSONObject(\"gecko\");\n      String type = geckoObject.getString(\"type\");\n\n      if (type.equals(\"Gecko:Ready\")) {\n        onAppShellReady();\n      }\n    } catch (Exception e) {\n      Log.i(LOG_FILE_NAME, \"handleGeckoMessage throws \" + e);\n    }\n\n    return \"\";\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4285, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [271], "initializationEnd": [299], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 326, "focalAPIEnd": 361, "followUpCheck": "XPDLActivitySet.handlesStencil(value)", "checkType": "IF", "followUpCheckExpressionStart": 388, "followUpCheckExpressionEnd": 432, "followUpCheckBlockStart": 388, "followUpCheckBlockEnd": 683, "use": ["createActivitySet(jSONObject)", "createTransition(jSONObject)", "createActivity(jSONObject)"], "useStart": [445, 547, 646], "useEnd": [474, 575, 672], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jak786/VASE/tree/master/editor/server/src/de/hpi/bpmn2xpdl/XPDLWorkflowProcess.java", "rawCode": "  public void readJSONchildShapes(JSONObject modelElement) throws JSONException {\n    JSONArray childShapes = modelElement.optJSONArray(\"childShapes\");\n\n    if (childShapes != null) {\n      for (int i = 0; i < childShapes.length(); i++) {\n        JSONObject childShape = childShapes.getJSONObject(i);\n        String stencil = childShape.getJSONObject(\"stencil\").getString(\"id\");\n\n        if (XPDLActivitySet.handlesStencil(stencil)) {\n          createActivitySet(childShape);\n        } else if (XPDLTransition.handlesStencil(stencil)) {\n          createTransition(childShape);\n        } else if (XPDLActivity.handlesStencil(stencil)) {\n          createActivity(childShape);\n        }\n      }\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4286, "initialization": ["String name = generateFrameKey(int,int,int)"], "initializationStart": [91], "initializationEnd": [131], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["JSONObject.toString(int)"], "tryExpressionStart": 137, "tryExpressionEnd": 141, "tryBlockStart": 137, "tryBlockEnd": 335, "catchExpressionStart": 264, "catchExpressionEnd": 288, "catchBlockStart": 264, "catchBlockEnd": 335, "exceptionHandlingCallStart": [303], "exceptionHandlingCallEnd": [328], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 170, "focalAPIEnd": 197, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)"], "useStart": [212], "useEnd": [256], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/astraw/micromanager1.3/tree/master/mmstudio/src/org/micromanager/metadata/ImageKey.java", "rawCode": "  public static String getChannelName(JSONObject metadata, int channel) {\n    String key = ImageKey.generateFrameKey(0, channel, 0);\n    try {\n      JSONObject imgData = metadata.getJSONObject(key);\n      return imgData.getString(ImagePropertyKeys.CHANNEL);\n    } catch (JSONException e) {\n      return Integer.toString(channel);\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4287, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 185, "focalAPIEnd": 231, "followUpCheck": "!value.has(FieldsKeys.SINGLE_KEY)", "checkType": "IF", "followUpCheckExpressionStart": 237, "followUpCheckExpressionEnd": 278, "followUpCheckBlockStart": 237, "followUpCheckBlockEnd": 298, "use": ["value.getJSONArray(String)"], "useStart": [327], "useEnd": [371], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shamansir/vimeoid/tree/master/apk/src/org/vimeoid/dto/advanced/User.java", "rawCode": "  public static User[] collectListFromJson(JSONObject jsonObj) throws JSONException {\n    if (!jsonObj.has(FieldsKeys.MULTIPLE_KEY)) return new User[0];\n    final JSONObject jsonColl = jsonObj.getJSONObject(FieldsKeys.MULTIPLE_KEY);\n    if (!jsonColl.has(FieldsKeys.SINGLE_KEY)) return new User[0];\n    final JSONArray array = jsonColl.getJSONArray(FieldsKeys.SINGLE_KEY);\n    final User[] users = new User[array.length()];\n    for (int i = 0; i < array.length(); i++) {\n      users[i] = extractFromJson(array.getJSONObject(i));\n    }\n    return users;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4288, "initialization": ["JSONObject jSONObject = new JSONObject(*)", "String name = Iterator<String>.next()"], "initializationStart": [2557, 2951], "initializationEnd": [2605, 2962], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 655, "tryExpressionEnd": 659, "tryBlockStart": 655, "tryBlockEnd": 4327, "catchExpressionStart": 4271, "catchExpressionEnd": 4292, "catchBlockStart": 4271, "catchBlockEnd": 4327, "exceptionHandlingCallStart": [4300], "exceptionHandlingCallEnd": [4320], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 2999, "focalAPIEnd": 3032, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.get(String)", "value.get(String)", "value.get(String)", "value.get(String)", "value.get(String)", "value.get(String)"], "useStart": [3092, 3264, 3431, 3587, 3745, 3912], "useEnd": [3124, 3296, 3458, 3613, 3775, 3943], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/omar-sr88/ProjetoLP3/tree/master/SigaaBiblio/src/br/nti/SigaaBiblio/operations/JSONOperations.java", "rawCode": "  @Override\n  public Livro informacoesLivro(String... pararametrosLivro) {\n    // TODO Auto-generated method stub\n    Map<String, String> map = new HashMap<String, String>();\n    String jsonString;\n    map.put(\"Operacao\", String.valueOf(Operations.INFORMACOES_EXEMPLAR_ACERVO));\n    map.put(\"IdDetalhes\", pararametrosLivro[0]);\n    JSONObject inputsJson = new JSONObject(map);\n    Livro livro = null;\n    String registro = \"\",\n        numero = \"\",\n        titulo = \"\",\n        subtitulo = \"\",\n        assunto = \"\",\n        autor = \"\",\n        autorSecundario = \"\",\n        publicacao = \"\",\n        editora = \"\",\n        ano = \"\",\n        notas = \"\";\n\n    try {\n      jsonString = HttpUtils.urlContentPost(HOST, \"sigaaAndroid\", inputsJson.toString());\n      JSONObject resposta = new JSONObject(jsonString);\n      registro =\n          JSONObject.NULL.equals(resposta.get(\"Registro\")) ? \"-\" : resposta.getString(\"Registro\");\n      numero =\n          JSONObject.NULL.equals(resposta.get(\"NumeroChamada\"))\n              ? \"-\"\n              : resposta.getString(\"NumeroChamada\");\n      titulo = JSONObject.NULL.equals(resposta.get(\"Titulo\")) ? \"-\" : resposta.getString(\"Titulo\");\n      subtitulo =\n          JSONObject.NULL.equals(resposta.get(\"SubTitulo\")) ? \"-\" : resposta.getString(\"SubTitulo\");\n      assunto =\n          JSONObject.NULL.equals(resposta.get(\"Assunto\")) ? \"-\" : resposta.getString(\"Assunto\");\n      autor = JSONObject.NULL.equals(resposta.get(\"Autor\")) ? \"-\" : resposta.getString(\"Autor\");\n      publicacao =\n          JSONObject.NULL.equals(resposta.get(\"Publicacao\"))\n              ? \"-\"\n              : resposta.getString(\"Publicacao\");\n      editora =\n          JSONObject.NULL.equals(resposta.get(\"Editora\")) ? \"-\" : resposta.getString(\"Editora\");\n      ano =\n          JSONObject.NULL.equals(resposta.get(\"AnoPublicacao\"))\n              ? \"-\"\n              : resposta.getString(\"AnoPublicacao\");\n      notas =\n          JSONObject.NULL.equals(resposta.get(\"NotasGerais\"))\n              ? \"-\"\n              : resposta.getString(\"NotasGerais\");\n      autorSecundario =\n          JSONObject.NULL.equals(resposta.get(\"AutorSecundario\"))\n              ? \"-\"\n              : resposta.getString(\"AutorSecundario\");\n\n      livro =\n          new Livro(\n              autor,\n              titulo,\n              ano,\n              registro,\n              numero,\n              subtitulo,\n              assunto,\n              publicacao,\n              editora,\n              notas,\n              autorSecundario);\n\n      JSONObject exemplaresJson = new JSONObject(resposta.getString(\"Exemplares\"));\n      Iterator<String> keys = exemplaresJson.keys();\n      String codigoBarras = \"\",\n          tipoMaterial = \"\",\n          colecao = \"\",\n          status = \"\",\n          disponivel = \"\",\n          localizacao = \"\";\n      ArrayList<ExemplarLivro> exemplares = new ArrayList<ExemplarLivro>();\n      while (keys.hasNext()) {\n        String key = keys.next();\n\n        JSONObject exemplarJson = exemplaresJson.getJSONObject(key);\n        codigoBarras =\n            JSONObject.NULL.equals(exemplarJson.get(\"CodigoBarras\"))\n                ? \"-\"\n                : exemplarJson.getString(\"CodigoBarras\");\n        tipoMaterial =\n            JSONObject.NULL.equals(exemplarJson.get(\"TipoMaterial\"))\n                ? \"-\"\n                : exemplarJson.getString(\"TipoMaterial\");\n        colecao =\n            JSONObject.NULL.equals(exemplarJson.get(\"Colecao\"))\n                ? \"-\"\n                : exemplarJson.getString(\"Colecao\");\n        status =\n            JSONObject.NULL.equals(exemplarJson.get(\"Status\"))\n                ? \"-\"\n                : exemplarJson.getString(\"Status\");\n        disponivel =\n            JSONObject.NULL.equals(exemplarJson.get(\"Disponivel\"))\n                ? \"-\"\n                : exemplarJson.getString(\"Disponivel\");\n        localizacao =\n            JSONObject.NULL.equals(exemplarJson.get(\"Localizacao\"))\n                ? \"-\"\n                : exemplarJson.getString(\"Localizacao\");\n        exemplares.add(\n            new ExemplarLivro(codigoBarras, tipoMaterial, colecao, localizacao, disponivel));\n      }\n\n      livro.setExemplares(exemplares); // adiciona o exemplar\n      Log.d(\"MARCILIO_DEBUG\", resposta.toString());\n    } catch (Exception ex) {\n      ex.printStackTrace();\n    }\n    return livro;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4289, "initialization": ["JSONObject jSONObject = fromObject(String)"], "initializationStart": [1378], "initializationEnd": [1404], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["StringBuilder.append(String)"], "tryExpressionStart": 1342, "tryExpressionEnd": 1346, "tryBlockStart": 1342, "tryBlockEnd": 2041, "catchExpressionStart": 1982, "catchExpressionEnd": 2002, "catchBlockStart": 1982, "catchBlockEnd": 2041, "exceptionHandlingCallStart": [2010], "exceptionHandlingCallEnd": [2034], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1428, "focalAPIEnd": 1462, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getJSONObject(int)", "value.getJSONArray(String)"], "useStart": [1428, 1528], "useEnd": [1502, 1552], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/linking12/WeiChat/tree/master/src/main/java/net/chat/utils/BaiduAPI.java", "rawCode": "  public static String navagation(String origin, String destination, String city)\n      throws IOException {\n\n    if (origin == null || destination == null || origin.equals(\"\") || destination.equals(\"\"))\n      return \"暂时无法导航\";\n\n    URL url =\n        new URL(\n            \"http://api.map.baidu.com/direction/v1?mode=driving&origin=\"\n                + java.net.URLEncoder.encode(origin, \"utf-8\")\n                + \"&destination=\"\n                + java.net.URLEncoder.encode(destination, \"utf-8\")\n                + \"&origin_region=\"\n                + city\n                + \"&destination_region=\"\n                + java.net.URLEncoder.encode(city, \"utf-8\")\n                + \"&output=json&ak=\"\n                + ak);\n    URLConnection connection = url.openConnection();\n    connection.setDoOutput(true);\n    OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream(), \"utf-8\");\n    // remember to clean up\n    out.flush();\n    out.close();\n    String res;\n    InputStream l_urlStream;\n    l_urlStream = connection.getInputStream();\n    BufferedReader in = new BufferedReader(new InputStreamReader(l_urlStream, \"UTF-8\"));\n    StringBuilder sb = new StringBuilder(\"\");\n    while ((res = in.readLine()) != null) {\n      sb.append(res.trim());\n    }\n    String str = sb.toString();\n    StringBuilder st = new StringBuilder();\n    try {\n      JSONObject jsonObject = JSONObject.fromObject(str);\n      JSONObject ob = jsonObject.getJSONObject(\"result\").getJSONArray(\"routes\").getJSONObject(0);\n      JSONArray steps = ob.getJSONArray(\"steps\");\n      for (int i = 0; i < steps.size(); i++) {\n        String instruction = (String) steps.getJSONObject(i).get(\"instructions\");\n        instruction =\n            StringUtils.replaceEach(\n                instruction,\n                new String[] {\"<b>\", \"</b>\", \"<font color=\\\"0x000000\\\"\", \"</font>\", \">\", \"起点\"},\n                new String[] {\"\", \"\", \"\", \"\", \"\", \"您当前的位置\"});\n        st.append(instruction + \"\\n\");\n      }\n    } catch (Exception e) {\n      st.append(\"你上传位置暂时无法导航\");\n    }\n    return st.toString();\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4290, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [240], "initializationEnd": [264], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 211, "tryExpressionEnd": 215, "tryBlockStart": 211, "tryBlockEnd": 8099, "catchExpressionStart": 8000, "catchExpressionEnd": 8024, "catchBlockStart": 8000, "catchBlockEnd": 8099, "exceptionHandlingCallStart": [2942], "exceptionHandlingCallEnd": [2961], "configuration": ["jSONObject.getJSONArray(String)"], "configurationStart": [292], "configurationEnd": [319], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 348, "focalAPIEnd": 373, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)"], "useStart": [400], "useEnd": [429], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/29jitender/Mixpanel/tree/master/src/com/mixpanel/src/streams/Stream_activity_list_update.java", "rawCode": "  @Override\n  public void methodToCallback(String response) {\n    stream_list_page_update = new ArrayList<HashMap<String, String>>();\n    stream_list_event_update = new ArrayList<HashMap<String, String>>();\n    try {\n      JSONObject obj = new JSONObject(response);\n\n      JSONArray array2 = obj.getJSONArray(\"history\");\n      JSONObject lastobj = obj.getJSONObject(\"last\");\n      String timestamp = lastobj.getString(\"ts_epoch\");\n\n      if (Stream_activity_final.timestampcheck.contains(timestamp)) {\n        Stream_activity_final obj1 = new Stream_activity_final();\n        obj1.dialog.dismiss();\n        obj1.dialog.setMessage(\"No more data\");\n        obj1.dialog.show();\n\n      } else {\n        for (int i = 0; i < array2.length(); i++) {\n          HashMap<String, String> map = new HashMap<String, String>();\n\n          JSONObject obj2 = array2.getJSONObject(i);\n          String timestampinside = obj2.getString(\"ts_epoch\");\n          Stream_activity_final.timestampcheck.add(timestampinside); // adding all timestamp\n          String name = obj2.getString(\"event\");\n          if (name.equals(\"mp_page_view\")) { // if it is a page view\n            map.put(\"name\", \"page view\");\n            /// last seen/////////////////////////////\n            String last_seen = obj2.getString(\"ts\");\n\n            //////////////\n            /// caluclation difference in time\n            SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n            formatter.setTimeZone(TimeZone.getTimeZone(\"GMT\")); // //////setting utc time zone\n            Date date = new Date();\n            String timediff;\n\n            try {\n              Date date7 = formatter.parse(last_seen);\n              String now = formatter.format(date);\n              String getting = formatter.format(date7);\n              Date date1 = formatter.parse(now);\n              Date date2 = formatter.parse(getting);\n              long diff = date1.getTime() - date2.getTime();\n              diff = diff / 1000;\n              int day = (int) TimeUnit.SECONDS.toDays(diff);\n              long hours = TimeUnit.SECONDS.toHours(diff) - (day * 24);\n              long minute =\n                  TimeUnit.SECONDS.toMinutes(diff) - (TimeUnit.SECONDS.toHours(diff) * 60);\n              long second =\n                  TimeUnit.SECONDS.toSeconds(diff) - (TimeUnit.SECONDS.toMinutes(diff) * 60);\n\n              if (day == 0) {\n                if (hours == 0) {\n                  if (minute == 0) {\n                    timediff = second + \" S ago\";\n\n                  } else {\n                    timediff = minute + \" M ago\";\n                  }\n\n                } else {\n                  timediff = hours + \" H ago\";\n                }\n\n              } else {\n                timediff = day + \" D ago\";\n              }\n\n              map.put(\"last_seen\", timediff);\n\n            } catch (ParseException e) {\n              // TODO Auto-generated catch block\n              e.printStackTrace();\n            }\n\n            ////\n\n            ////\n            /// getting notes\n            if (obj2.has(\"properties\")) {\n\n              JSONObject obj3 = obj2.getJSONObject(\"properties\");\n              // Toast.makeText(Stream_activity_final.this, \"Date picked: \"+obj3 ,\n              // Toast.LENGTH_SHORT).show();\n\n              if (obj3.has(\"referrer\")) {\n                String referrer = obj3.getString(\"referrer\");\n                map.put(\"referrer\", referrer);\n              } else {\n                String referrer = \"N/A\";\n                map.put(\"referrer\", referrer);\n              }\n              if (obj3.has(\"page\")) {\n                String page = obj3.getString(\"page\");\n                map.put(\"page\", page);\n              } else {\n                String page = \"N/A\";\n\n                map.put(\"page\", page);\n              }\n            }\n\n            ///////////////////////\n\n            stream_list_page_update.add(map);\n\n          } else { // if it is a defined event\n            String event_name = obj2.getString(\"event\");\n            String event_last_seen = obj2.getString(\"ts\");\n            Log.i(\"eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeea1111\", event_name);\n            map.put(\"event_name\", event_name);\n\n            //////////////\n            /// caluclation difference in time\n            SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n            formatter.setTimeZone(TimeZone.getTimeZone(\"GMT\")); // //////setting utc time zone\n            Date date = new Date();\n            String timediff;\n\n            try {\n              Date date7 = formatter.parse(event_last_seen);\n              String now = formatter.format(date);\n              String getting = formatter.format(date7);\n              Date date1 = formatter.parse(now);\n              Date date2 = formatter.parse(getting);\n              long diff = date1.getTime() - date2.getTime();\n              diff = diff / 1000;\n              int day = (int) TimeUnit.SECONDS.toDays(diff);\n              long hours = TimeUnit.SECONDS.toHours(diff) - (day * 24);\n              long minute =\n                  TimeUnit.SECONDS.toMinutes(diff) - (TimeUnit.SECONDS.toHours(diff) * 60);\n              long second =\n                  TimeUnit.SECONDS.toSeconds(diff) - (TimeUnit.SECONDS.toMinutes(diff) * 60);\n\n              if (day == 0) {\n                if (hours == 0) {\n                  if (minute == 0) {\n                    timediff = second + \" S ago\";\n\n                  } else {\n                    timediff = minute + \" M ago\";\n                  }\n\n                } else {\n                  timediff = hours + \" H ago\";\n                }\n\n              } else {\n                timediff = day + \" D ago\";\n              }\n\n              map.put(\"event_last_seen\", timediff);\n\n            } catch (ParseException e) {\n              // TODO Auto-generated catch block\n              e.printStackTrace();\n            }\n\n            ////\n\n            ////\n\n            stream_list_event_update.add(map);\n          }\n        }\n        Stream_activity_final obj1 = new Stream_activity_final();\n        /////// updateing array list of stream final\n        ////////////// iff the event are coming empty keep it updating until you get the event\n        if (stream_list_event_update.isEmpty() && type == 20) { // if not getting data in list\n          /// update the page\n          for (int i = 0; i < stream_list_page_update.size(); i++) {\n            HashMap<String, String> map = new HashMap<String, String>();\n            map = stream_list_page_update.get(i);\n            Stream_activity_final.stream_list_page.add(map);\n          }\n\n          more_count =\n              Integer.parseInt(\n                  All_api_define\n                      .stream_user_update_page); /// taking the count from api define which was set\n                                                 // in final\n          more_count = more_count + 1;\n          All_api_define.stream_user_update_page =\n              Integer.toString(more_count); // changing it again\n          All_api_define.stream_user_update();\n          thecall(); // calling it again\n\n        }\n\n        /// migt remove this after testing\n        else {\n          // updateing count\n          for (int i = 0; i < stream_list_event_update.size(); i++) {\n            HashMap<String, String> map = new HashMap<String, String>();\n            map = stream_list_event_update.get(i);\n\n            Stream_activity_final.stream_list_event.add(map);\n          }\n          for (int i = 0; i < stream_list_page_update.size(); i++) {\n            HashMap<String, String> map = new HashMap<String, String>();\n            map = stream_list_page_update.get(i);\n            Stream_activity_final.stream_list_page.add(map);\n          }\n          if (type == 10) {\n            ((BaseAdapter) obj1.adapter_page).notifyDataSetChanged();\n\n          } else if (type == 20) {\n            ((BaseAdapter) obj1.adapter_event).notifyDataSetChanged();\n          }\n          obj1.dialog.dismiss();\n        }\n      }\n\n    } catch (JSONException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4291, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [628], "initializationEnd": [653], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 682, "focalAPIEnd": 716, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getInt(String)", "value.getInt(String)", "value.getBoolean(String)", "value.getBoolean(String)", "value.getInt(String)", "value.getJSONArray(String)"], "useStart": [804, 857, 911, 972, 1044, 1105], "useEnd": [825, 880, 937, 1002, 1077, 1133], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wanglu0919/chianwuxi_android/tree/master/chinaw/src/com/wuxi/app/engine/LetterService.java", "rawCode": "  /**\n   * 杨宸 智佳\n   *\n   * @param start 开始索引\n   * @param end 结束索引\n   * @param previous 是否可以上一页\n   * @param totalRowsAmount ; 数据列表中元素个数\n   * @param next ; 是否可以下一页\n   * @return PoliticsWrapper Politics包装对象\n   * @throws NetException\n   * @throws JSONException\n   * @throws NODataException\n   */\n  public LetterWrapper getLettersWrapper(String url)\n      throws NetException, JSONException, NODataException {\n\n    if (!checkNet()) {\n      throw new NetException(Constants.ExceptionMessage.NO_NET);\n    }\n\n    String resultStr = httpUtils.executeGetToString(url, TIME_OUT);\n    if (resultStr != null) {\n      JSONObject jsonObject = new JSONObject(resultStr);\n      JSONObject jresult = jsonObject.getJSONObject(\"result\");\n\n      LetterWrapper letterWrapper = new LetterWrapper();\n\n      letterWrapper.setEnd(jresult.getInt(\"end\"));\n      letterWrapper.setStart(jresult.getInt(\"start\"));\n      letterWrapper.setNext(jresult.getBoolean(\"next\"));\n      letterWrapper.setPrevious(jresult.getBoolean(\"previous\"));\n      letterWrapper.setTotalRowsAmount(jresult.getInt(\"totalRowsAmount\"));\n\n      JSONArray jData = jresult.getJSONArray(\"data\");\n      if (jData != null) {\n        letterWrapper.setData(parseData(jData)); // 解析数组\n      }\n\n      return letterWrapper;\n\n    } else {\n      throw new NODataException(Constants.ExceptionMessage.NODATA_MEG); // 没有获取到数据异常\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4292, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ScreenConfigException", "exceptionHandlingCall": ["new ScreenConfigException(String,*)"], "tryExpressionStart": 305, "tryExpressionEnd": 309, "tryBlockStart": 305, "tryBlockEnd": 1263, "catchExpressionStart": 970, "catchExpressionEnd": 1002, "catchBlockStart": 970, "catchBlockEnd": 1110, "exceptionHandlingCallStart": [1022], "exceptionHandlingCallEnd": [1097], "configuration": ["jSONObject.getJSONArray(String)"], "configurationStart": [346], "configurationEnd": [379], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 417, "focalAPIEnd": 451, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "new View(String,JSONArray,value,String,boolean)"], "useStart": [473, 521], "useEnd": [500, 585], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/crux-framework/tree/master/tags/crux/5.1.1/crux-dev/src/main/java/org/cruxframework/crux/core/rebind/screen/ViewFactory.java", "rawCode": "  /**\n   * Parse the HTML page and build the Crux View.\n   *\n   * @param id\n   * @param metaData\n   * @return\n   * @throws IOException\n   * @throws ScreenConfigException\n   */\n  private View parseView(String id, JSONObject metaData, boolean rootView)\n      throws IOException, ScreenConfigException {\n    try {\n      JSONArray elementsMetadata = metaData.getJSONArray(\"elements\");\n      JSONObject lazyDependencies = metaData.getJSONObject(\"lazyDeps\");\n      String html = metaData.getString(\"_html\");\n\n      View view = new View(id, elementsMetadata, lazyDependencies, html, rootView);\n\n      int length = elementsMetadata.length();\n      for (int i = 0; i < length; i++) {\n        JSONObject compCandidate = elementsMetadata.getJSONObject(i);\n\n        if (isScreenDefinition(compCandidate)) {\n          parseViewElement(view, compCandidate);\n        } else if (isValidWidget(compCandidate)) {\n          try {\n            createWidget(compCandidate, view);\n          } catch (ScreenConfigException e) {\n            throw new ScreenConfigException(\"Error creating widget on view [\" + id + \"].\", e);\n          }\n        }\n      }\n      return view;\n    } catch (JSONException e) {\n      throw new ScreenConfigException(\"Error parsing view [\" + id + \"].\", e);\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4293, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 75, "guardExpressionEnd": 98, "guardBlockStart": 75, "guardBlockEnd": 154, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 106, "focalAPIEnd": 134, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getInt(String)", "jSONObject.getInt(String)"], "useStart": [106, 166], "useEnd": [153, 188], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/haizi-zh/micromanager/tree/master/mmstudio/src/org/micromanager/utils/MDUtils.java", "rawCode": "  public static int getBitDepth(JSONObject map) throws JSONException {\n    if (map.has(\"Summary\")) return map.getJSONObject(\"Summary\").getInt(\"BitDepth\");\n    return map.getInt(\"BitDepth\");\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4294, "initialization": ["JSONObject jSONObject = new JSONObject(*)"], "initializationStart": [563], "initializationEnd": [597], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 401, "tryExpressionEnd": 405, "tryBlockStart": 401, "tryBlockEnd": 7620, "catchExpressionStart": 7562, "catchExpressionEnd": 7586, "catchBlockStart": 7562, "catchBlockEnd": 7620, "exceptionHandlingCallStart": [7594], "exceptionHandlingCallEnd": [7613], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 626, "focalAPIEnd": 655, "followUpCheck": "Integer.parseInt(value.getString(\"paid_count\")) == 0", "checkType": "IF", "followUpCheckExpressionStart": 2565, "followUpCheckExpressionEnd": 2621, "followUpCheckBlockStart": 2565, "followUpCheckBlockEnd": 2907, "use": ["value.getJSONObject(String)", "jSONObject.getJSONObject(String)", "value.getJSONObject(String)", "jSONObject.getJSONObject(String)", "value.getString(String)", "value.getString(String)", "value.getString(String)", "value.getString(String)"], "useStart": [684, 1517, 1575, 2465, 2526, 2771, 2842, 2938], "useEnd": [716, 1546, 1607, 2495, 2554, 2795, 2870, 2962], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/29jitender/Mixpanel/tree/master/src/com/mixpanel/revenue/Revenuefragment.java", "rawCode": "  @Override\n  public void onResume() {\n    revenue_cust = (TextView) getView().findViewById(R.id.revenue_cust);\n    revenue_avg = (TextView) getView().findViewById(R.id.revenue_avg);\n    revenue_total = (TextView) getView().findViewById(R.id.revenue_total);\n    progress = (RelativeLayout) getView().findViewById(R.id.progress);\n    mainlayout = (LinearLayout) getView().findViewById(R.id.main);\n\n    try {\n\n      if (mContent.equals(\"Today\")) {\n        progress.setVisibility(View.VISIBLE);\n        mainlayout.setVisibility(View.GONE);\n        JSONObject obj1 = new JSONObject(Revenue_first.data);\n\n        JSONObject obj2 = obj1.getJSONObject(\"results\");\n\n        JSONObject obj3 = obj2.getJSONObject(date_call(0)); // today\n        revenue_cust.setText(obj3.getString(\"paid_count\"));\n        if (Integer.parseInt(obj3.getString(\"paid_count\")) == 0) {\n          revenue_avg.setText(\"0\");\n\n        } else {\n\n          revenue_avg.setText(\n              roundof(\n                      Float.parseFloat(obj3.getString(\"amount\"))\n                          / Float.parseFloat(obj3.getString(\"paid_count\")))\n                  + \"\");\n        }\n        revenue_total.setText(obj3.getString(\"amount\"));\n        progress.setVisibility(View.GONE);\n        mainlayout.setVisibility(View.VISIBLE);\n\n      } else if (mContent.equals(\"Yesterday\")) {\n        progress.setVisibility(View.VISIBLE);\n        mainlayout.setVisibility(View.GONE);\n        JSONObject obj1 = new JSONObject(Revenue_first.data);\n\n        JSONObject obj2 = obj1.getJSONObject(\"results\");\n\n        JSONObject obj3 = obj2.getJSONObject(date_call(1)); // yesterday\n        revenue_cust.setText(obj3.getString(\"paid_count\"));\n        if (Integer.parseInt(obj3.getString(\"paid_count\")) == 0) {\n          revenue_avg.setText(\"0\");\n\n        } else {\n          revenue_avg.setText(\n              roundof(\n                      Float.parseFloat(obj3.getString(\"amount\"))\n                          / Float.parseFloat(obj3.getString(\"paid_count\")))\n                  + \"\");\n        }\n        revenue_total.setText(obj3.getString(\"amount\"));\n\n        progress.setVisibility(View.GONE);\n        mainlayout.setVisibility(View.VISIBLE);\n      } else if (mContent.equals(\"This week\")) {\n        progress.setVisibility(View.VISIBLE);\n        mainlayout.setVisibility(View.GONE);\n        JSONObject obj = new JSONObject(Revenue_first.data);\n        JSONObject obj1 = obj.getJSONObject(\"results\");\n        JSONObject obj2 = obj1.getJSONObject(\"$overall\");\n        revenue_cust.setText(obj2.getString(\"paid_count\"));\n        if (Integer.parseInt(obj2.getString(\"paid_count\")) == 0) {\n          revenue_avg.setText(\"0\");\n\n        } else {\n          revenue_avg.setText(\n              roundof(\n                      Float.parseFloat(obj2.getString(\"amount\"))\n                          / Float.parseFloat(obj2.getString(\"paid_count\")))\n                  + \"\");\n        }\n        revenue_total.setText(obj2.getString(\"amount\"));\n\n        progress.setVisibility(View.GONE);\n        mainlayout.setVisibility(View.VISIBLE);\n      } else if (mContent.equals(\"Last week\")) {\n        progress.setVisibility(View.VISIBLE);\n        mainlayout.setVisibility(View.GONE);\n        if (last_week != null) {\n          callin_ui(last_week);\n          progress.setVisibility(View.GONE);\n          mainlayout.setVisibility(View.VISIBLE);\n        } else {\n\n          AsyncHttpClient client = new AsyncHttpClient();\n          client.get(\n              All_api_define.revenu_home(\n                  Revenuefragment.date_call(13), Revenuefragment.date_call(7)),\n              new AsyncHttpResponseHandler() {\n                @Override\n                public void onSuccess(String response) {\n                  last_week = response;\n                  callin_ui(last_week);\n                  progress.setVisibility(View.GONE);\n                  mainlayout.setVisibility(View.VISIBLE);\n                }\n              });\n        }\n\n      } else if (mContent.equals(\"This month\")) {\n        progress.setVisibility(View.VISIBLE);\n        mainlayout.setVisibility(View.GONE);\n        if (this_month != null) {\n          callin_ui(this_month);\n          progress.setVisibility(View.GONE);\n          mainlayout.setVisibility(View.VISIBLE);\n        } else {\n\n          AsyncHttpClient client = new AsyncHttpClient();\n          client.get(\n              All_api_define.revenu_home(\n                  Revenuefragment.date_call(30), Revenuefragment.date_call(0)),\n              new AsyncHttpResponseHandler() {\n                @Override\n                public void onSuccess(String response) {\n                  this_month = response;\n                  callin_ui(this_month);\n                  progress.setVisibility(View.GONE);\n                  mainlayout.setVisibility(View.VISIBLE);\n                }\n              });\n        }\n\n      } else if (mContent.equals(\"Last month\")) {\n        progress.setVisibility(View.VISIBLE);\n        mainlayout.setVisibility(View.GONE);\n        if (last_month != null) {\n          callin_ui(last_month);\n          progress.setVisibility(View.GONE);\n          mainlayout.setVisibility(View.VISIBLE);\n        } else {\n\n          AsyncHttpClient client = new AsyncHttpClient();\n          client.get(\n              All_api_define.revenu_home(\n                  Revenuefragment.date_call(60), Revenuefragment.date_call(31)),\n              new AsyncHttpResponseHandler() {\n                @Override\n                public void onSuccess(String response) {\n                  last_month = response;\n                  callin_ui(last_month);\n                  progress.setVisibility(View.GONE);\n                  mainlayout.setVisibility(View.VISIBLE);\n                }\n              });\n        }\n\n      } else if (mContent.equals(\"This year\")) {\n        progress.setVisibility(View.VISIBLE);\n        mainlayout.setVisibility(View.GONE);\n        if (this_year != null) {\n          Log.i(\"year\", this_year);\n          callin_ui(this_year);\n          progress.setVisibility(View.GONE);\n          mainlayout.setVisibility(View.VISIBLE);\n        } else {\n\n          AsyncHttpClient client = new AsyncHttpClient();\n          client.get(\n              All_api_define.revenu_home(\n                  Revenuefragment.date_call(364), Revenuefragment.date_call(0)),\n              new AsyncHttpResponseHandler() {\n                @Override\n                public void onSuccess(String response) {\n                  this_year = response;\n\n                  callin_ui(this_year);\n                  progress.setVisibility(View.GONE);\n                  mainlayout.setVisibility(View.VISIBLE);\n                }\n              });\n        }\n\n      } else if (mContent.equals(\"Last year\")) {\n        progress.setVisibility(View.VISIBLE);\n        mainlayout.setVisibility(View.GONE);\n        if (last_year != null) {\n          callin_ui(last_year);\n          progress.setVisibility(View.GONE);\n          mainlayout.setVisibility(View.VISIBLE);\n        } else {\n\n          AsyncHttpClient client = new AsyncHttpClient();\n          client.get(\n              All_api_define.revenu_home(\n                  Revenuefragment.date_call(730), Revenuefragment.date_call(365)),\n              new AsyncHttpResponseHandler() {\n                @Override\n                public void onSuccess(String response) {\n                  last_year = response;\n                  callin_ui(last_year);\n                  progress.setVisibility(View.GONE);\n                  mainlayout.setVisibility(View.VISIBLE);\n                }\n              });\n        }\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n    super.onResume();\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4295, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 62, "tryExpressionEnd": 66, "tryBlockStart": 62, "tryBlockEnd": 4569, "catchExpressionStart": 4511, "catchExpressionEnd": 4535, "catchBlockStart": 4511, "catchBlockEnd": 4569, "exceptionHandlingCallStart": [4543], "exceptionHandlingCallEnd": [4562], "configuration": ["jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getJSONArray(String)"], "configurationStart": [98, 371, 834, 1553, 1872, 2587, 2850], "configurationEnd": [126, 405, 862, 1584, 1900, 2618, 2884], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 3420, "focalAPIEnd": 3464, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseJson(value)", "jSONObject.getString(String)", "jSONObject.getJSONObject(String)"], "useStart": [3511, 3840, 3984], "useEnd": [3532, 3870, 4028], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tae1560/battler_dog/tree/master/src/contest/lab/gala/NetworkManager.java", "rawCode": "  private void parseReceivedData(JSONObject jsonObject) {\n    try {\n      String dataTypeString = jsonObject.getString(\"type\");\n\n      debug(\"dataTypeString : \" + dataTypeString);\n      debug(\"jsonObject : \" + jsonObject.toString());\n\n      if (dataTypeString != null) {\n        if (dataTypeString.equalsIgnoreCase(TYPE_GET_DAMAGED)) {\n          String skillTypeString = jsonObject.getString(\"skill_type\");\n          int skillType = Integer.parseInt(skillTypeString);\n\n          if (this.getDamagedCallback != null) {\n            this.getDamagedCallback.didGetDamaged(SkillType.parseInt(skillType));\n          }\n        } else if (dataTypeString.equalsIgnoreCase(TYPE_LOGIN)) {\n          if (this.loginCallback != null) {\n            if (jsonObject.getString(\"status\").equalsIgnoreCase(\"success\")) {\n              String userString = jsonObject.getString(\"user\");\n              JSONObject userJsonObject = new JSONObject(userString);\n              String id = userJsonObject.getString(\"login_id\");\n              int character = Integer.parseInt(userJsonObject.getString(\"character\"));\n              int number_of_wins = userJsonObject.getInt(\"number_of_wins\");\n              int total_wins = userJsonObject.getInt(\"total_wins\");\n              int total_loses = userJsonObject.getInt(\"total_loses\");\n              boolean is_logon = true;\n\n              this.loginCallback.didSuccessLogin(\n                  new User(id, character, number_of_wins, is_logon, total_wins, total_loses));\n            } else {\n              this.loginCallback.didFailedLogin(jsonObject.getString(\"message\"));\n            }\n            this.loginCallback = null;\n          }\n        } else if (dataTypeString.equalsIgnoreCase(TYPE_JOIN)) {\n          if (this.joinCallback != null) {\n            if (jsonObject.getString(\"status\").equalsIgnoreCase(\"success\")) {\n              String userString = jsonObject.getString(\"user\");\n              JSONObject userJsonObject = new JSONObject(userString);\n              String id = userJsonObject.getString(\"login_id\");\n              int character = Integer.parseInt(userJsonObject.getString(\"character\"));\n              int number_of_wins = userJsonObject.getInt(\"number_of_wins\");\n              boolean is_logon = true;\n              int total_wins = userJsonObject.getInt(\"total_wins\");\n              int total_loses = userJsonObject.getInt(\"total_loses\");\n\n              this.joinCallback.didSuccessJoin(\n                  new User(id, character, number_of_wins, is_logon, total_wins, total_loses));\n            } else {\n              this.joinCallback.didFailedJoin(jsonObject.getString(\"message\"));\n            }\n            this.joinCallback = null;\n          }\n        } else if (dataTypeString.equalsIgnoreCase(TYPE_REQUEST_FRIENDS)) {\n          if (this.requestFriendsCallback != null) {\n            JSONArray jsonFriends = jsonObject.getJSONArray(\"friends\");\n\n            ArrayList<User> friends = new ArrayList<User>();\n            for (int i = 0; i < jsonFriends.length(); i++) {\n              JSONObject friend = jsonFriends.getJSONObject(i);\n              friends.add(User.parseJson(friend));\n            }\n\n            this.requestFriendsCallback.didGetFriends(friends);\n\n            this.requestFriendsCallback = null;\n          }\n        } else if (dataTypeString.equalsIgnoreCase(TYPE_REQUEST_MATCHING)) {\n          if (this.onMatchedCallback != null) {\n            JSONObject enemy = jsonObject.getJSONObject(\"user_information\");\n            this.onMatchedCallback.onMatched(User.parseJson(enemy));\n            this.onMatchedCallback = null;\n          }\n        } else if (dataTypeString.equalsIgnoreCase(TYPE_GAME_END_CHECK)) {\n          gameEndRequest();\n        } else if (dataTypeString.equalsIgnoreCase(TYPE_GAME_END)) {\n          if (this.onGameEndedCallback != null) {\n            boolean isWin = jsonObject.getString(\"status\").equalsIgnoreCase(\"win\");\n            this.onGameEndedCallback.onGameEnded(\n                isWin, User.parseJson(jsonObject.getJSONObject(\"user_information\")));\n            this.onGameEndedCallback = null;\n          }\n        } else if (dataTypeString.equalsIgnoreCase(TYPE_LOGOUT)) {\n          if (this.onLogout != null) {\n            if (jsonObject.getString(\"status\").equalsIgnoreCase(\"success\")) {\n              this.onLogout.onLogoutSuccess();\n              closeSocketConnection();\n            } else {\n              this.onLogout.onLogoutFailed();\n            }\n            this.onLogout = null;\n          }\n        }\n      }\n\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4296, "initialization": ["JSONObject jSONObject = evaluateJsonStringToObject(String)"], "initializationStart": [1904], "initializationEnd": [1950], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 2138, "focalAPIEnd": 2158, "followUpCheck": "!(value.has(\"result\"))", "checkType": "IF", "followUpCheckExpressionStart": 2170, "followUpCheckExpressionEnd": 2194, "followUpCheckBlockStart": 2170, "followUpCheckBlockEnd": 2230, "use": ["value.getJSONArray(String)"], "useStart": [2262], "useEnd": [2287], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 3400, "finallyExpressionEnd": 3408, "finallyBlockStart": 3400, "finallyBlockEnd": 3437, "cleanUpCallStart": [3418], "cleanUpCallEnd": [3428], "url": "https://github.com/lbjay/gridworks/tree/master/src/main/java/com/metaweb/gridworks/commands/freebase/GuessTypesOfColumnCommand.java", "rawCode": "  /**\n   * Run relevance searches for the first n cells in the given column and count the types of the\n   * results. Return a sorted list of types, from most frequent to least.\n   *\n   * @param project\n   * @param column\n   * @return\n   */\n  protected List<TypeGroup> guessTypes(Project project, Column column) {\n    Map<String, TypeGroup> map = new HashMap<String, TypeGroup>();\n\n    int cellIndex = column.getCellIndex();\n\n    List<String> samples = new ArrayList<String>(s_sampleSize);\n    Set<String> sampleSet = new HashSet<String>();\n\n    for (Row row : project.rows) {\n      Object value = row.getCellValue(cellIndex);\n      if (ExpressionUtils.isNonBlankData(value)) {\n        String s = value.toString().trim();\n        if (!sampleSet.contains(s)) {\n          samples.add(s);\n          sampleSet.add(s);\n          if (samples.size() >= s_sampleSize) {\n            break;\n          }\n        }\n      }\n    }\n\n    try {\n      StringWriter stringWriter = new StringWriter();\n      JSONWriter jsonWriter = new JSONWriter(stringWriter);\n\n      jsonWriter.object();\n      for (int i = 0; i < samples.size(); i++) {\n        jsonWriter.key(\"q\" + i + \":search\");\n        jsonWriter.object();\n\n        jsonWriter.key(\"query\");\n        jsonWriter.value(samples.get(i));\n        jsonWriter.key(\"limit\");\n        jsonWriter.value(3);\n\n        jsonWriter.endObject();\n      }\n      jsonWriter.endObject();\n\n      StringBuffer sb = new StringBuffer(1024);\n      sb.append(\"http://api.freebase.com/api/service/search?queries=\");\n      sb.append(ParsingUtilities.encode(stringWriter.toString()));\n\n      URL url = new URL(sb.toString());\n      URLConnection connection = url.openConnection();\n      connection.setConnectTimeout(5000);\n      connection.connect();\n\n      InputStream is = connection.getInputStream();\n      try {\n        String s = ParsingUtilities.inputStreamToString(is);\n        JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);\n\n        for (int i = 0; i < samples.size(); i++) {\n          String key = \"q\" + i + \":search\";\n          if (!o.has(key)) {\n            continue;\n          }\n\n          JSONObject o2 = o.getJSONObject(key);\n          if (!(o2.has(\"result\"))) {\n            continue;\n          }\n\n          JSONArray results = o2.getJSONArray(\"result\");\n          int count = results.length();\n\n          for (int j = 0; j < count; j++) {\n            JSONObject result = results.getJSONObject(j);\n            double score = 1.0 / (1 + j); // score by each result's rank\n\n            JSONArray types = result.getJSONArray(\"type\");\n            int typeCount = types.length();\n\n            for (int t = 0; t < typeCount; t++) {\n              JSONObject type = types.getJSONObject(t);\n              String id = type.getString(\"id\");\n              if (id.equals(\"/common/topic\")\n                  || id.equals(\"/base/ontologies/ontology_instance\")\n                  || (id.startsWith(\"/base/\") && id.endsWith(\"/topic\"))\n                  || id.startsWith(\"/user/\")\n                  || id.startsWith(\"/freebase/\")) {\n                continue;\n              }\n\n              if (map.containsKey(id)) {\n                TypeGroup tg = map.get(id);\n                tg.score += score;\n                tg.count++;\n              } else {\n                map.put(id, new TypeGroup(id, type.getString(\"name\"), score));\n              }\n            }\n          }\n        }\n      } finally {\n        is.close();\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n\n    List<TypeGroup> types = new ArrayList<TypeGroup>(map.values());\n    Collections.sort(\n        types,\n        new Comparator<TypeGroup>() {\n          public int compare(TypeGroup o1, TypeGroup o2) {\n            int c = Math.min(s_sampleSize, o2.count) - Math.min(s_sampleSize, o1.count);\n            if (c != 0) {\n              return c;\n            }\n            return (int) Math.signum(o2.score / o2.count - o1.score / o1.count);\n          }\n        });\n\n    return types;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4297, "initialization": ["JSONObject jSONObject = getEntity(*)"], "initializationStart": [630], "initializationEnd": [666], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.length()"], "configurationStart": [722], "configurationEnd": [735], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 763, "focalAPIEnd": 790, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getJSONArray(String)"], "useStart": [814], "useEnd": [840], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guoliqiang/coding/tree/master/third_part/hadoop_src/hadoop-2.0.5-alpha-src/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/webapp/TestAMWebServicesTasks.java", "rawCode": "  @Test\n  public void testTasksSlash() throws JSONException, Exception {\n    WebResource r = resource();\n    Map<JobId, Job> jobsMap = appContext.getAllJobs();\n    for (JobId id : jobsMap.keySet()) {\n      String jobId = MRApps.toString(id);\n      ClientResponse response =\n          r.path(\"ws\")\n              .path(\"v1\")\n              .path(\"mapreduce\")\n              .path(\"jobs\")\n              .path(jobId)\n              .path(\"tasks/\")\n              .accept(MediaType.APPLICATION_JSON)\n              .get(ClientResponse.class);\n      assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());\n      JSONObject json = response.getEntity(JSONObject.class);\n      assertEquals(\"incorrect number of elements\", 1, json.length());\n      JSONObject tasks = json.getJSONObject(\"tasks\");\n      JSONArray arr = tasks.getJSONArray(\"task\");\n      assertEquals(\"incorrect number of elements\", 2, arr.length());\n\n      verifyAMTask(arr, jobsMap.get(id), null);\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4298, "initialization": ["JSONObject jSONObject = SimpleSynoServer.sendMultiPart(String,MultipartBuilder)"], "initializationStart": [1364], "initializationEnd": [1405], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getBoolean(String)", "jSONObject.getString(String)"], "configurationStart": [1473, 1671], "configurationEnd": [1499, 1695], "guardCondition": "jSONObject.has(name,) && !(jSONObject.has(\"reason\",)) &&  jSONObject!=null", "guardType": "IF {", "guardExpressionStart": 1425, "guardExpressionEnd": 1442, "guardBlockStart": 1425, "guardBlockEnd": 1925, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 1772, "focalAPIEnd": 1799, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)"], "useStart": [1824], "useEnd": [1844], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stevegaron/Synodroid/tree/master/src/com/bigpupdev/synodroid/protocol/v40/DSHandlerDSM40.java", "rawCode": "  public void upload(Uri uriP) throws Exception {\n    // If we are logged on\n    if (server.isConnected()) {\n      if (uriP.getPath() != null) {\n        // Create the multipart\n        MultipartBuilder builder = new MultipartBuilder(BOUNDARY, DEBUG);\n\n        // The upload_type's part\n        builder.addPart(new Part(\"upload_type\").setContent(\"torrent\".getBytes()));\n        // The upload_type's part\n        builder.addPart(new Part(\"desttext\").setContent(getSharedDirectory(false).getBytes()));\n        // The direction's part\n        builder.addPart(new Part(\"direction\").setContent(\"ASC\".getBytes()));\n        // The field's part\n        builder.addPart(new Part(\"field\").setContent(\"task_id\".getBytes()));\n\n        // The torrent's part\n        Part filePart = new Part(\"torrent\");\n        filePart.addExtra(\"filename\", uriP.getLastPathSegment());\n        if (uriP.getPath().toLowerCase().endsWith(\"nzb\")) {\n          filePart.setContentType(\"application/octet-stream\");\n        } else {\n          filePart.setContentType(\"application/x-bittorrent\");\n        }\n\n        // Get the stream according to the Uri\n        byte[] buffer = StreamFactory.getStream(uriP);\n\n        // Set the content\n        filePart.setContent(buffer);\n        builder.addPart(filePart);\n        // Execute\n        JSONObject json;\n        synchronized (server) {\n          json = server.sendMultiPart(DM_URI_NEW, builder);\n        }\n        if (json != null) {\n          boolean success = json.getBoolean(\"success\");\n          // If successful then build details list\n          if (!success) {\n            String reason = \"\";\n            if (json.has(\"reason\")) {\n              reason = json.getString(\"reason\");\n            } else if (json.has(\"errno\")) {\n              JSONObject err = json.getJSONObject(\"errno\");\n              reason = err.getString(\"key\");\n            }\n            throw new DSMException(reason);\n          }\n        }\n      }\n    }\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4299, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [523], "initializationEnd": [547], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 495, "tryExpressionEnd": 499, "tryBlockStart": 495, "tryBlockEnd": 1680, "catchExpressionStart": 1622, "catchExpressionEnd": 1646, "catchBlockStart": 1622, "catchBlockEnd": 1680, "exceptionHandlingCallStart": [1654], "exceptionHandlingCallEnd": [1673], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 575, "focalAPIEnd": 601, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getString(String)", "value.getString(String)", "value.getString(String)", "value.getString(String)", "value.getString(String)", "value.getString(String)", "value.getString(String)", "value.getString(String)", "value.getString(String)", "value.getString(String)", "value.getString(String)", "value.getString(String)"], "useStart": [652, 737, 812, 884, 965, 1042, 1123, 1206, 1282, 1361, 1439, 1530], "useEnd": [680, 763, 837, 913, 993, 1068, 1154, 1229, 1311, 1388, 1469, 1568], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lbaye/repo/tree/master/android/src/com/socmaps/util/ServerResponseParser.java", "rawCode": "  /**\n   * Parse server (JSON) response and returns InformationSharingPreferences object.\n   *\n   * @param response would be String converted from server response (JSON file)\n   * @return InformationSharingPreferences object\n   * @see com.socmaps.entity.InformationSharingPreferences\n   */\n  public static InformationSharingPreferences parseInformationSettings(String response) {\n    InformationSharingPreferences informationSharingPreferences =\n        new InformationSharingPreferences();\n    try {\n      JSONObject jo = new JSONObject(response);\n      JSONObject result = jo.getJSONObject(\"result\");\n\n      informationSharingPreferences.setNewsFeed(result.getString(\"newsfeed\"));\n      informationSharingPreferences.setProfilePicture(result.getString(\"avatar\"));\n\n      informationSharingPreferences.setEmail(result.getString(\"email\"));\n      informationSharingPreferences.setName(result.getString(\"firstName\"));\n\n      informationSharingPreferences.setUserName(result.getString(\"username\"));\n      informationSharingPreferences.setGender(result.getString(\"gender\"));\n\n      informationSharingPreferences.setDateOfBirth(result.getString(\"dateOfBirth\"));\n      informationSharingPreferences.setBiography(result.getString(\"bio\"));\n\n      informationSharingPreferences.setInterests(result.getString(\"interests\"));\n      informationSharingPreferences.setAddress(result.getString(\"address\"));\n\n      informationSharingPreferences.setService(result.getString(\"workStatus\"));\n      informationSharingPreferences.setRelationshipStatus(result.getString(\"relationshipStatus\"));\n\n      return informationSharingPreferences;\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n\n    return null;\n  }\n"}, {"dataset": "getJSONObject", "exampleID": 4300, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "configurationStart": [174, 256, 346], "configurationEnd": [226, 314, 406], "guardCondition": "!(jSONObject==null)", "guardType": "IF {", "guardExpressionStart": 120, "guardExpressionEnd": 137, "guardBlockStart": 120, "guardBlockEnd": 150, "focalAPI": "value = jSONObject.getJSONObject(name)", "focalAPIStart": 688, "focalAPIEnd": 746, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getInt(String)", "jSONObject.getString(String)", "jSONObject.getInt(String)", "jSONObject.getInt(String)", "jSONObject.getInt(String)", "jSONObject.getInt(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getInt(String)"], "useStart": [928, 1058, 1219, 1272, 1334, 1425, 1569, 1639, 1743, 1800], "useEnd": [980, 1115, 1262, 1324, 1387, 1475, 1623, 1689, 1790, 1846], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Palatis/danbooru-gallery-android/tree/master/DanbooruGallery/src/main/java/tw/idv/palatis/danboorugallery/siteapi/DanbooruLegacyAPI.java", "rawCode": "  public static Post parseJSONObjectToPost(Host host, JSONObject json)\n      throws JSONException, ParseException {\n    if (json == null) return null;\n\n    String file_url = json.getString(DanbooruLegacyPost.KEY_POST_FILE_URL);\n    String file_url_large = json.getString(DanbooruLegacyPost.KEY_POST_LARGE_FILE_URL);\n    String file_url_preview = json.getString(DanbooruLegacyPost.KEY_POST_PREVIEW_FILE_URL);\n    if (!file_url.startsWith(\"http\")) file_url = host.url + file_url;\n    if (!file_url_large.startsWith(\"http\")) file_url_large = host.url + file_url_large;\n    if (!file_url_preview.startsWith(\"http\")) file_url_preview = host.url + file_url_preview;\n\n    JSONObject json_date = json.getJSONObject(DanbooruLegacyPost.KEY_POST_CREATED_AT);\n    Date date = new Date(json_date.getLong(\"s\") * 1000 + json_date.getLong(\"n\") / 1000000);\n\n    int uploader_id = -1;\n    String uploader_name = \"\";\n    try {\n      uploader_id = json.getInt(DanbooruLegacyPost.KEY_POST_UPLOADER_ID);\n    } catch (JSONException ignored) {\n    }\n    try {\n      uploader_name = json.getString(DanbooruLegacyPost.KEY_POST_UPLOADER_NAME);\n    } catch (JSONException ignored) {\n    }\n\n    return new DanbooruLegacyPost(\n        host,\n        json.getInt(DanbooruLegacyPost.KEY_POST_ID),\n        json.getInt(DanbooruLegacyPost.KEY_POST_IMAGE_WIDTH),\n        json.getInt(DanbooruLegacyPost.KEY_POST_IMAGE_HEIGHT),\n        date,\n        date,\n        json.getInt(DanbooruLegacyPost.KEY_POST_FILE_SIZE),\n        file_url,\n        file_url_large,\n        file_url_preview,\n        TextUtils.split(json.getString(DanbooruLegacyPost.KEY_POST_TAG_STRING), \" \"),\n        json.getString(DanbooruLegacyPost.KEY_POST_RATING),\n        uploader_id,\n        uploader_name,\n        json.getString(DanbooruLegacyPost.KEY_POST_MD5),\n        json.getInt(DanbooruLegacyPost.KEY_POST_SCORE));\n  }\n"}]