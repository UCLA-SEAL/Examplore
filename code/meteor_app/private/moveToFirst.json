[{"dataset": "moveToFirst", "exampleID": 1401, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 352, "focalAPIEnd": 372, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.getColumnIndex(String)", "cursor.getInt(int)"], "useStart": [417, 499, 550, 630, 681, 759, 810, 898, 952, 1050, 1101, 1175], "useEnd": [484, 527, 610, 658, 740, 787, 867, 929, 1022, 1078, 1158, 1203], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Enough-Software/j2mepolish/tree/master/enough-polish-j2me/source/src/de/enough/polish/android/rms/SqlDao.java", "rawCode": "  /**\n   * This methods extracts a RecordStore object from the database cursor. This method will not close\n   * this cursor, the caller is responsible for it.\n   *\n   * @param result A Cursor object which is not closed and will not be closed by this method.\n   * @return\n   */\n  private synchronized RecordStore extractRecordStore(Cursor result) {\n    result.moveToFirst();\n    int indexOfColumn;\n    indexOfColumn = result.getColumnIndex(SqlDao.COLUMNNAME_RECORDSTORE_RECORDSTORE_PK);\n    int id = result.getInt(indexOfColumn);\n\n    indexOfColumn = result.getColumnIndex(SqlDao.COLUMNNAME_RECORDSTORE_VERSION);\n    int version = result.getInt(indexOfColumn);\n\n    indexOfColumn = result.getColumnIndex(SqlDao.COLUMNNAME_RECORDSTORE_NEXTID);\n    int nextId = result.getInt(indexOfColumn);\n\n    indexOfColumn = result.getColumnIndex(SqlDao.COLUMNNAME_RECORDSTORE_NAME);\n    String recordStoreName = result.getString(indexOfColumn);\n\n    indexOfColumn = result.getColumnIndex(SqlDao.COLUMNNAME_RECORDSTORE_NUMBER_OF_RECORDS);\n    int numberOfRecords = result.getInt(indexOfColumn);\n\n    indexOfColumn = result.getColumnIndex(SqlDao.COLUMNNAME_RECORDSTORE_SIZE);\n    int size = result.getInt(indexOfColumn);\n\n    RecordStore recordStore = new RecordStore(recordStoreName, id);\n    recordStore.setVersion(version);\n    recordStore.setNextId(nextId);\n    recordStore.setNumberOfRecords(numberOfRecords);\n    recordStore.setSize(size);\n\n    return recordStore;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1402, "initialization": ["Cursor cursor = query(Uri,String[],*,*,*)"], "initializationStart": [239], "initializationEnd": [282], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 288, "focalAPIEnd": 305, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.close()"], "useStart": [328, 347], "useEnd": [341, 358], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_packages_apps_SoundRecorder/tree/master/src/com/android/soundrecorder/SoundRecorder.java", "rawCode": "  private void addToPlaylist(ContentResolver resolver, int audioId, long playlistId) {\n    String[] cols = new String[] {\"count(*)\"};\n    Uri uri = MediaStore.Audio.Playlists.Members.getContentUri(\"external\", playlistId);\n    Cursor cur = resolver.query(uri, cols, null, null, null);\n    cur.moveToFirst();\n    final int base = cur.getInt(0);\n    cur.close();\n    ContentValues values = new ContentValues();\n    values.put(MediaStore.Audio.Playlists.Members.PLAY_ORDER, Integer.valueOf(base + audioId));\n    values.put(MediaStore.Audio.Playlists.Members.AUDIO_ID, audioId);\n    resolver.insert(uri, values);\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1403, "initialization": ["Cursor cursor = query(String,*,*,*,*,*,*)"], "initializationStart": [447], "initializationEnd": [503], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getStackTraceString(*)", "i(String,*)"], "tryExpressionStart": 749, "tryExpressionEnd": 753, "tryBlockStart": 749, "tryBlockEnd": 1419, "catchExpressionStart": 1286, "catchExpressionEnd": 1306, "catchBlockStart": 1286, "catchBlockEnd": 1359, "exceptionHandlingCallStart": [1325, 1314], "exceptionHandlingCallEnd": [1351, 1352], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(cursor.getCount()<1)", "guardType": "IF {", "guardExpressionStart": 761, "guardExpressionEnd": 788, "guardBlockStart": 761, "guardBlockEnd": 1226, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 1133, "focalAPIEnd": 1154, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursorRowToContentValues(cursor,ContentValues)", "cursor.close()"], "useStart": [1164, 1397], "useEnd": [1217, 1412], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 1360, "finallyExpressionEnd": 1368, "finallyBlockStart": 1360, "finallyBlockEnd": 1419, "cleanUpCallStart": [1397], "cleanUpCallEnd": [1412], "url": "https://github.com/ujayant/acal/tree/master/src/com/morphoss/acal/database/cachemanager/CacheManager.java", "rawCode": "  /** Called on start up. if safe==false flush cache. set safe to false regardless. */\n  private void loadState() {\n    acquireMetaLock();\n    ContentValues data = new ContentValues();\n    AcalDBHelper dbHelper = new AcalDBHelper(context);\n    SQLiteDatabase db = dbHelper.getWritableDatabase();\n\n    // load start/end range from meta table\n    AcalDateTime defaultWindow = new AcalDateTime();\n    Cursor mCursor = null;\n    try {\n      mCursor = db.query(META_TABLE, null, null, null, null, null, null);\n    } catch (SQLiteException e) {\n      Log.i(TAG, Log.getStackTraceString(e));\n      // AcalDBHelper.recoverDatabase(db,true);\n      db.close();\n      dbHelper.close();\n      releaseMetaLock();\n      return;\n    }\n    int closedState = 0;\n    try {\n      if (mCursor.getCount() < 1) {\n        if (CacheManager.DEBUG && Constants.LOG_DEBUG)\n          Log.println(Constants.LOGD, TAG, \"Initializing cache for first use.\");\n        data.put(FIELD_CLOSED, 0);\n        data.put(FIELD_COUNT, 0);\n        data.put(FIELD_START, defaultWindow.getMillis());\n        data.put(FIELD_END, defaultWindow.getMillis());\n      } else {\n        mCursor.moveToFirst();\n        DatabaseUtils.cursorRowToContentValues(mCursor, data);\n      }\n      closedState = data.getAsInteger(FIELD_CLOSED);\n    } catch (Exception e) {\n      Log.i(TAG, Log.getStackTraceString(e));\n    } finally {\n      if (mCursor != null) mCursor.close();\n    }\n\n    if (!(closedState == 1)) {\n      Log.println(\n          Constants.LOGI, TAG, \"Application not closed correctly last time. Resetting cache.\");\n      Toast.makeText(\n              context,\n              \"aCal was not correctly shutdown last time.\\nRebuilding cache - It may take some time before events are visible.\",\n              Toast.LENGTH_LONG)\n          .show();\n      this.CTMinstance.clearCache();\n      data.put(FIELD_COUNT, 0);\n      data.put(FIELD_START, defaultWindow.getMillis());\n      data.put(FIELD_END, defaultWindow.getMillis());\n    }\n    data.put(FIELD_CLOSED, 1);\n    db.delete(META_TABLE, null, null);\n    data.remove(FIELD_ID);\n    this.metaRow = db.insert(META_TABLE, null, data);\n    db.close();\n    dbHelper.close();\n    long start = data.getAsLong(FIELD_START);\n    long end = data.getAsLong(FIELD_END);\n    AcalDateRange range = null;\n    if (start >= 0 && end >= 0)\n      range = new AcalDateRange(AcalDateTime.fromMillis(start), AcalDateTime.fromMillis(end));\n\n    window =\n        new CacheWindow(\n            lookForward,\n            lookBack,\n            maxSize,\n            minPaddingBack,\n            minPaddingForward,\n            increment,\n            this,\n            new AcalDateTime());\n    if (range != null) window.setWindowSize(range);\n\n    rm.addListener(this);\n    releaseMetaLock();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1404, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 104, "focalAPIEnd": 124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.close()"], "useStart": [216, 256], "useEnd": [242, 270], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_providers_CalendarProvider/tree/master/tests/src/com/android/providers/calendar/CalendarProvider2Test.java", "rawCode": "  private void verifyContentValueAgainstCursor(ContentValues cv, Set<String> keys, Cursor cursor) {\n    cursor.moveToFirst();\n    for (String key : keys) {\n      assertEquals(cv.get(key).toString(), cursor.getString(cursor.getColumnIndex(key)));\n    }\n    cursor.close();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1405, "initialization": ["Cursor cursor = query(String,String[],String,String[],*,*,*)"], "initializationStart": [481], "initializationEnd": [686], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["warn(String,*)"], "tryExpressionStart": 106, "tryExpressionEnd": 110, "tryBlockStart": 106, "tryBlockEnd": 983, "catchExpressionStart": 891, "catchExpressionEnd": 917, "catchBlockStart": 891, "catchBlockEnd": 983, "exceptionHandlingCallStart": [925], "exceptionHandlingCallEnd": [976], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.getCount()!=0", "guardType": "IF {", "guardExpressionStart": 695, "guardExpressionEnd": 719, "guardBlockStart": 695, "guardBlockEnd": 812, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 730, "focalAPIEnd": 747, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getBlob(int)", "cursor.close()"], "useStart": [788, 819], "useEnd": [802, 830], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kops/osmdroid-itinerennes/tree/master/osmdroid-android/src/main/java/org/osmdroid/tileprovider/modules/MBTilesFileArchive.java", "rawCode": "  @Override\n  public InputStream getInputStream(final ITileSource pTileSource, final MapTile pTile) {\n    try {\n      InputStream ret = null;\n      final String[] tile = {COL_TILES_TILE_DATA};\n      final String[] xyz = {\n        Integer.toString(pTile.getX()),\n        Double.toString(\n            Math.pow(2, pTile.getZoomLevel()) - pTile.getY() - 1) // Use Google Tiling Spec\n        ,\n        Integer.toString(pTile.getZoomLevel())\n      };\n\n      final Cursor cur =\n          mDatabase.query(\n              TABLE_TILES,\n              tile,\n              \"tile_column=? and tile_row=? and zoom_level=?\",\n              xyz,\n              null,\n              null,\n              null);\n\n      if (cur.getCount() != 0) {\n        cur.moveToFirst();\n        ret = new ByteArrayInputStream(cur.getBlob(0));\n      }\n      cur.close();\n      if (ret != null) {\n        return ret;\n      }\n    } catch (final Throwable e) {\n      logger.warn(\"Error getting db stream: \" + pTile, e);\n    }\n\n    return null;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1406, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [278], "initializationEnd": [298], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 393, "focalAPIEnd": 408, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.close()", "cursor.getLong(int)"], "useStart": [426, 443, 697], "useEnd": [437, 452, 709], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ChainsDD/Superuser/tree/master/src/com/noshufou/android/su/service/ResultService.java", "rawCode": "  private void recycle() {\n    ensurePrefs();\n    if (!mPrefs.getBoolean(Preferences.DELETE_OLD_LOGS, true)) {\n      // Log recycling is disabled, no need to go further\n      return;\n    }\n\n    int limit = mPrefs.getInt(Preferences.LOG_ENTRY_LIMIT, 200);\n    Cursor c =\n        getContentResolver()\n            .query(Logs.CONTENT_URI, new String[] {\"COUNT() as rows\"}, null, null, null);\n    c.moveToFirst();\n    int count = c.getInt(0);\n    c.close();\n    if (count > limit) {\n      c =\n          getContentResolver()\n              .query(Logs.CONTENT_URI, new String[] {Logs._ID}, null, null, Logs.DATE + \" ASC\");\n      long id = 0;\n      while (count > limit && c.moveToNext()) {\n        id = c.getLong(0);\n        count -=\n            getContentResolver()\n                .delete(Logs.CONTENT_URI, Logs._ID + \"=?\", new String[] {String.valueOf(id)});\n      }\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1407, "initialization": ["Cursor cursor = query(*,*,String,String[],String,String,String)"], "initializationStart": [285], "initializationEnd": [471], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 478, "guardExpressionEnd": 505, "guardBlockStart": 478, "guardBlockEnd": 585, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 514, "focalAPIEnd": 535, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new DbMetadata(cursor)", "cursor.close()"], "useStart": [555, 590], "useEnd": [578, 605], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/element14/nocturne/tree/master/Android/mobile/src/main/java/com/projectnocturne/datamodel/DataModel.java", "rawCode": "  private DbMetadata getDbMetadata() {\n    DbMetadata dbMetaDta = null;\n\n    final String selectionSql = null;\n    final String[] selectionArgs = null;\n    final String groupBy = null;\n    final String having = null;\n    final String orderBy = null;\n    final Cursor results =\n        db.query(\n            DbMetadata.DATABASE_TABLE_NAME,\n            null,\n            selectionSql,\n            selectionArgs,\n            groupBy,\n            having,\n            orderBy);\n\n    if (results.getCount() > 0) {\n      results.moveToFirst();\n      dbMetaDta = new DbMetadata(results);\n    }\n    results.close();\n    if (dbMetaDta == null) {\n      dbMetaDta = new DbMetadata();\n      dbMetaDta.lastUpdated = new DateTime().toString(NocturneApplication.simpleDateFmtStrDb);\n      db.insert(DbMetadata.DATABASE_TABLE_NAME, null, dbMetaDta.getContentValues());\n      NocturneApplication.logMessage(\n          Log.DEBUG, LOG_TAG + \"getDbMetadata() new metadata object created\");\n    }\n    return dbMetaDta;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1408, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [1181], "initializationEnd": [1210], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [1232], "configurationEnd": [1244], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 1251, "focalAPIEnd": 1266, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getLong(int)", "cursor.close()", "cursor.getCount()", "cursor.moveToFirst()", "cursor.getLong(int)", "cursor.close()"], "useStart": [1300, 1319, 3081, 3100, 3150, 3169], "useEnd": [1312, 1328, 3093, 3115, 3162, 3178], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/tests/coretests/src/android/database/sqlite/SQLiteDatabaseTest.java", "rawCode": "  private void runTestForStartXactBeforeUpdateSql(int stmtType) throws InterruptedException {\n    createTableAndClearCache();\n\n    ContentValues values = new ContentValues();\n    // make some changes to data in TEST_TABLE\n    for (int i = 0; i < 5; i++) {\n      values.put(\"i\", i);\n      values.put(\"j\", \"i\" + System.currentTimeMillis());\n      mDatabase.insert(TEST_TABLE, null, values);\n      switch (stmtType) {\n        case UPDATE:\n          values.put(\"j\", \"u\" + System.currentTimeMillis());\n          mDatabase.update(TEST_TABLE, values, \"i = \" + i, null);\n          break;\n        case DELETE:\n          mDatabase.delete(TEST_TABLE, \"i = 1\", null);\n          break;\n      }\n    }\n    // do a query. even though query uses a different database connection,\n    // it should still see the above changes to data because the above standalone\n    // insert/update/deletes are done in transactions automatically.\n    String sql = \"select count(*) from \" + TEST_TABLE;\n    SQLiteStatement stmt = mDatabase.compileStatement(sql);\n    final int expectedValue = (stmtType == DELETE) ? 4 : 5;\n    assertEquals(expectedValue, stmt.simpleQueryForLong());\n    stmt.close();\n    Cursor c = mDatabase.rawQuery(sql, null);\n    assertEquals(1, c.getCount());\n    c.moveToFirst();\n    assertEquals(expectedValue, c.getLong(0));\n    c.close();\n\n    // do 5 more changes in a transaction but do a query before and after the commit\n    mDatabase.beginTransaction();\n    for (int i = 10; i < 15; i++) {\n      values.put(\"i\", i);\n      values.put(\"j\", \"i\" + System.currentTimeMillis());\n      mDatabase.insert(TEST_TABLE, null, values);\n      switch (stmtType) {\n        case UPDATE:\n          values.put(\"j\", \"u\" + System.currentTimeMillis());\n          mDatabase.update(TEST_TABLE, values, \"i = \" + i, null);\n          break;\n        case DELETE:\n          mDatabase.delete(TEST_TABLE, \"i = 1\", null);\n          break;\n      }\n    }\n    mDatabase.setTransactionSuccessful();\n    // do a query before commit - should still have 5 rows\n    // this query should run in a different thread to force it to use a different database\n    // connection\n    Thread t =\n        new Thread() {\n          @Override\n          public void run() {\n            String sql = \"select count(*) from \" + TEST_TABLE;\n            SQLiteStatement stmt = getDb().compileStatement(sql);\n            assertEquals(expectedValue, stmt.simpleQueryForLong());\n            stmt.close();\n            Cursor c = getDb().rawQuery(sql, null);\n            assertEquals(1, c.getCount());\n            c.moveToFirst();\n            assertEquals(expectedValue, c.getLong(0));\n            c.close();\n          }\n        };\n    t.start();\n    // wait until the above thread is done\n    t.join();\n    // commit and then query. should see changes from the transaction\n    mDatabase.endTransaction();\n    stmt = mDatabase.compileStatement(sql);\n    final int expectedValue2 = (stmtType == DELETE) ? 9 : 10;\n    assertEquals(expectedValue2, stmt.simpleQueryForLong());\n    stmt.close();\n    c = mDatabase.rawQuery(sql, null);\n    assertEquals(1, c.getCount());\n    c.moveToFirst();\n    assertEquals(expectedValue2, c.getLong(0));\n    c.close();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1409, "initialization": ["Cursor cursor = getReadableDatabase()"], "initializationStart": [106], "initializationEnd": [132], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 293, "focalAPIEnd": 315, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.close()"], "useStart": [333, 423, 520, 612, 706, 788], "useEnd": [367, 464, 556, 650, 740, 804], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rtroncoso/Termono/tree/master/src/com/quest/database/StaticDatabase.java", "rawCode": "  public int[] getMobAttributes(int pID) {\n    int[] myAnswer = new int[5];\n    Cursor myCursor =\n        this.getReadableDatabase()\n            .rawQuery(\n                \"Select * from \" + tMobAttributes + \" where \" + fMobID + \" =?\",\n                new String[] {String.valueOf(pID)});\n    myCursor.moveToFirst();\n    int index = myCursor.getColumnIndex(fMobPower);\n    myAnswer[0] = myCursor.getInt(index);\n    index = myCursor.getColumnIndex(fMobIntelligence);\n    myAnswer[1] = myCursor.getInt(index);\n    index = myCursor.getColumnIndex(fMobDefense);\n    myAnswer[2] = myCursor.getInt(index);\n    index = myCursor.getColumnIndex(fMobEndurance);\n    myAnswer[3] = myCursor.getInt(index);\n    index = myCursor.getColumnIndex(fMobLevel);\n    myAnswer[4] = myCursor.getInt(index);\n    myCursor.close();\n    this.close();\n    return myAnswer;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1410, "initialization": ["Cursor cursor = query(String,String[],String,String[],*,*,*)"], "initializationStart": [433], "initializationEnd": [507], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 363, "tryExpressionEnd": 367, "tryBlockStart": 363, "tryBlockEnd": 943, "catchExpressionStart": 673, "catchExpressionEnd": 693, "catchBlockStart": 673, "catchBlockEnd": 766, "exceptionHandlingCallStart": [701], "exceptionHandlingCallEnd": [759], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 535, "focalAPIEnd": 550, "followUpCheck": "result && !cursor.isNull(0)", "checkType": "IF", "followUpCheckExpressionStart": 558, "followUpCheckExpressionEnd": 588, "followUpCheckBlockStart": 558, "followUpCheckBlockEnd": 631, "use": ["cursor.getString(int)", "cursor.close()", "cursor.close()"], "useStart": [608, 638, 824], "useEnd": [622, 647, 833], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 767, "finallyExpressionEnd": 775, "finallyBlockStart": 767, "finallyBlockEnd": 943, "cleanUpCallStart": [638], "cleanUpCallEnd": [647], "url": "https://github.com/chrispbailey/ToDo-List-Widget/tree/master/src/org/chrisbailey/todo/db/ToDoDatabase.java", "rawCode": "  /**\n   * Reads the value of the parameter identified by <code>name</code>\n   *\n   * @param name\n   * @return String value of the parameter, <code>null</code> otherwise\n   */\n  private String getVariable(String name) {\n    String[] cols = new String[] {\"value\"};\n    String[] whereArgs = new String[] {name};\n\n    Cursor c = null;\n\n    String result = null;\n    try {\n      SQLiteDatabase db = this.getReadableDatabase();\n      c = db.query(VARIABLE_TABLE_NAME, cols, \"name=?\", whereArgs, null, null, null);\n      boolean hasResult = c.moveToFirst();\n      if (hasResult && !c.isNull(0)) {\n        result = c.getString(0);\n      }\n      c.close();\n      db.close();\n    } catch (Exception e) {\n      Log.e(LOG_TAG, \"Error getting variable [\" + name + \"]\", e);\n    } finally {\n      if (null != c) {\n        try {\n          c.close();\n        } catch (Exception e) {\n          Log.e(LOG_TAG, \"Error closing cursor\", e);\n        }\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1411, "initialization": ["Cursor cursor = managedQuery(Uri,*,*,*,*)"], "initializationStart": [570], "initializationEnd": [613], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 684, "focalAPIEnd": 702, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.moveToNext()", "cursor.close()"], "useStart": [779, 826, 908], "useEnd": [793, 843, 920], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sntc06/Icequeen/tree/master/src/com/mis/icequeen/PreTest.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.pre_test);\n    Bundle extras = getIntent().getExtras();\n    // ¨ú¥X¿ï¾Üªº³¹¸`\n    cptrange = extras.getIntArray(\"selected\");\n    showlist = new ArrayList<Integer>();\n    for (int i = 0; i < cptrange.length; i++) {\n      if (cptrange[i] == 1) {\n        getIntent()\n            .setData(\n                Uri.parse(\"content://com.mis.icequeen.testprovider/getVOCbyChapter:\" + (i + 1)));\n        total = getIntent().getData();\n        test = managedQuery(total, null, null, null, null);\n        System.out.println(\"voc count: \" + test.getCount());\n        test.moveToFirst();\n        for (int j = 0; j < test.getCount(); j++) {\n          showlist.add(test.getInt(0));\n          if (!test.isLast()) test.moveToNext();\n        }\n        System.out.println(showlist.size());\n        test.close();\n      }\n    }\n\n    ButtonListener buttonListener = new ButtonListener();\n    btnConfirmTest = (Button) findViewById(R.id.btnConfirmTest);\n    btnConfirmTest.setOnClickListener(buttonListener);\n    pendingVocLinearLayout = (LinearLayout) findViewById(R.id.pendingVocLinearLayout);\n    TextView word = (TextView) findViewById(R.id.textView2);\n    word.setText(\"\");\n    for (int i = 0; i < cptrange.length; i++) {\n      if (cptrange[i] == 1) {\n        word.append(\" Chapter \" + (i + 1) + \"\\n\");\n      }\n    }\n    word.setText(word.getText().toString().substring(0, word.getText().length() - 1));\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1412, "initialization": ["Cursor cursor = query(String,String[],String,*,*,*,String)"], "initializationStart": [744], "initializationEnd": [815], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 871, "guardExpressionEnd": 897, "guardBlockStart": 871, "guardBlockEnd": 1617, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 906, "focalAPIEnd": 926, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.moveToNext()"], "useStart": [1029, 1070, 1115, 1165, 1214, 1265, 1435, 1478, 1521, 1583], "useEnd": [1045, 1089, 1134, 1184, 1233, 1284, 1454, 1497, 1540, 1602], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cainan/TccInatel/tree/master/GerenciadorFinanceiro/src/br/com/tcc/model/database/DatabaseDelegate.java", "rawCode": "  /**\n   * Read the bills of current day\n   *\n   * @param month\n   * @param year\n   */\n  public synchronized ArrayList<Conta> readDailyBills(int day, int month, int year) {\n    // Open Database\n    mDataBase = mDatabaseHelper.getWritableDatabase();\n\n    ArrayList<Conta> arrayConta = new ArrayList<Conta>();\n    Conta conta;\n\n    String[] allColumns = {\n      \"_id\", \"conta\", \"valor\", \"vencimento\", \"notificar\", \"codigo\", \"status\", \"dia\", \"mes\", \"ano\"\n    };\n\n    String where;\n    where = \"dia=\" + day + \" and mes=\" + month + \" and ano=\" + year + \" and status=\" + \"0\";\n    Log.d(\"log\", \"dia \" + day);\n    Log.d(\"log\", \"mes \" + month);\n    Log.d(\"log\", \"ano \" + year);\n\n    // SELECT * FROM CONTAS WHERE MES = ? AND ANO = ?\n    Cursor cursor = mDataBase.query(TABLE_NAME, allColumns, where, null, null, null, \"dia\");\n    Log.d(\"log\", \"cursor: \" + cursor.getCount());\n    if (cursor.getCount() > 0) {\n      cursor.moveToFirst();\n      for (int i = 0; i < cursor.getCount(); i++) {\n        conta = new Conta();\n        conta.setId(cursor.getInt(0));\n        conta.setNome(cursor.getString(1));\n        conta.setValor(cursor.getString(2));\n        conta.setVencimento(cursor.getString(3));\n        conta.setNotificar(cursor.getString(4));\n        conta.setCodigoBarra(cursor.getString(5));\n        if (cursor.getInt(6) == 0) {\n          conta.setPago(false);\n        } else {\n          conta.setPago(true);\n        }\n        conta.setDia(cursor.getString(7));\n        conta.setMes(cursor.getString(8));\n        conta.setAno(cursor.getString(9));\n\n        arrayConta.add(conta);\n        cursor.moveToNext();\n      }\n    }\n\n    // Open Database\n    closeDb();\n\n    return arrayConta;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1413, "initialization": ["Cursor cursor = query(String,*,*,*,*,*,*)"], "initializationStart": [172], "initializationEnd": [232], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 239, "guardExpressionEnd": 259, "guardBlockStart": 239, "guardBlockEnd": 304, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 276, "focalAPIEnd": 297, "followUpCheck": "!result", "checkType": "IF", "followUpCheckExpressionStart": 309, "followUpCheckExpressionEnd": 320, "followUpCheckBlockStart": 309, "followUpCheckBlockEnd": 409, "use": ["cursor.close()"], "useStart": [360], "useEnd": [375], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/welovechickens/Annenberg-Friend-Finder/tree/master/Annenberg Friend Finder/src/com/harvard/annenberg/DbAdapter.java", "rawCode": "  /**\n   * Fetch a list of all contacts in the database\n   *\n   * @return Db cursor\n   */\n  public Cursor fetchAllUsers() {\n    boolean found = false;\n    Cursor mCursor = mDb.query(USER_DB_TABLE, null, null, null, null, null, null);\n\n    if (mCursor != null) {\n      found = mCursor.moveToFirst();\n    }\n    if (!found) {\n      if (mCursor != null) {\n        mCursor.close();\n      }\n      return null;\n    }\n    return mCursor;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1414, "initialization": ["Cursor cursor = query(*,*,*,*,*,*,*)"], "initializationStart": [115], "initializationEnd": [610], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 616, "focalAPIEnd": 636, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["timeBlockFromCursor(cursor)", "cursor.moveToNext()", "cursor.close()"], "useStart": [886, 922, 954], "useEnd": [913, 941, 968], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hamo26/EECE419Group7/tree/master/schedushare-android/SchedUShare/src/com/schedushare/android/db/SchedulesDataSource.java", "rawCode": "  public ArrayList<TimeBlockData> getScheduleDayTimeBlocks(long scheduleId, int day) {\n    Cursor cursor =\n        this.database.query(\n            SchedulesSQLiteHelper.TABLE_TIME_BLOCK,\n            SchedulesDataSource.allTimeBlockColumns,\n            SchedulesSQLiteHelper.COLUMN_SCHEDULE_ID\n                + \" = \"\n                + Long.toString(scheduleId)\n                + \" AND \"\n                + SchedulesSQLiteHelper.COLUMN_DAY\n                + \" = \"\n                + Integer.toString(day),\n            null,\n            null,\n            null,\n            SchedulesSQLiteHelper.COLUMN_START_TIME);\n    cursor.moveToFirst();\n\n    ArrayList<TimeBlockData> timeBlocks = new ArrayList<TimeBlockData>();\n    while (!cursor.isAfterLast()) {\n      // System.out.println(\"DataSource: start: \" + cursor.getString(2) + \" end: \" +\n      // cursor.getString(3));\n      timeBlocks.add(timeBlockFromCursor(cursor));\n      cursor.moveToNext();\n    }\n\n    cursor.close();\n    return timeBlocks;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1415, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [252], "initializationEnd": [280], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(cursor==null)", "guardType": "IF {", "guardExpressionStart": 328, "guardExpressionEnd": 347, "guardBlockStart": 328, "guardBlockEnd": 597, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 458, "focalAPIEnd": 478, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getString(int)"], "useStart": [496, 569], "useEnd": [554, 590], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xplodwild/android_packages_apps_Focal/tree/master/src/org/cyanogenmod/focal/Util.java", "rawCode": "  /**\n   * Returns the physical path (on emmc/sd) of the provided URI from MediaGallery\n   *\n   * @param context\n   * @param contentURI\n   * @return\n   */\n  public static String getRealPathFromURI(Context context, Uri contentURI) {\n    Cursor cursor = context.getContentResolver().query(contentURI, null, null, null, null);\n    if (cursor == null) { // Source is Dropbox or other similar local file path\n      return contentURI.getPath();\n    } else {\n      cursor.moveToFirst();\n      int idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);\n      return cursor.getString(idx);\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1416, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 414, "focalAPIEnd": 429, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.moveToNext()"], "useStart": [1193, 1282, 1835, 3089], "useEnd": [1254, 1343, 1847, 3103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iwabuchiken/ShoppingList/tree/master/src/sl/utils/Methods_sl.java", "rawCode": "  private static boolean refactorData_colPrice_CanDo(\n      Activity actv, SQLiteDatabase wdb, DBUtils dbu, String tableName, Cursor c) {\n    // Log\n    Log.d(\n        \"Methods_sl.java\"\n            + \"[\"\n            + Thread.currentThread().getStackTrace()[2].getLineNumber()\n            + \":\"\n            + Thread.currentThread().getStackTrace()[2].getMethodName()\n            + \"]\",\n        \"Starting...\");\n\n    c.moveToFirst();\n\n    // Log\n    Log.d(\n        \"Methods_sl.java\"\n            + \"[\"\n            + Thread.currentThread().getStackTrace()[2].getLineNumber()\n            + \":\"\n            + Thread.currentThread().getStackTrace()[2].getMethodName()\n            + \"]\",\n        \"Cursor moved to the first\");\n\n    /**\n     * ******************************* Among records which data in the \"store\" column is\n     * \"�L�����E�h�E\", if the value of the column \"price\" is blank(i.e. \"\"), then insert the value\n     * 100 *******************************\n     */\n    boolean res = true;\n\n    for (int i = 0; i < c.getCount(); i++) {\n      /**\n       * ******************************* Get data in the \"price\" column\n       * *******************************\n       */\n      String storeName = c.getString(1 + Methods.getArrayIndex(CONS.columns, \"store\"));\n\n      String priceData = c.getString(1 + Methods.getArrayIndex(CONS.columns, \"price\"));\n\n      // Log\n      Log.d(\n          \"Methods_sl.java\"\n              + \"[\"\n              + Thread.currentThread().getStackTrace()[2].getLineNumber()\n              + \":\"\n              + Thread.currentThread().getStackTrace()[2].getMethodName()\n              + \"]\",\n          \"store=\" + storeName + \"/\" + \"price=\" + priceData);\n\n      // if (storeName.equals(\"�L�����E�h�E\") &&\n      if (storeName.equals(\"�L�����E�h�D\") && (priceData.equals(\"\") || priceData == null)) {\n\n        long dbId = c.getLong(0);\n\n        // Log\n        Log.d(\n            \"Methods_sl.java\"\n                + \"[\"\n                + Thread.currentThread().getStackTrace()[2].getLineNumber()\n                + \":\"\n                + Thread.currentThread().getStackTrace()[2].getMethodName()\n                + \"]\",\n            \"Refactoring data: \" + dbId);\n\n        String targetColName = \"price\";\n\n        res =\n            dbu.updateData(\n                actv,\n                wdb,\n                tableName,\n                dbId,\n                CONS.columns[Methods.getArrayIndex(CONS.columns, targetColName)],\n                100);\n\n        if (res == false) {\n\n          return res;\n        } // if (res == false)\n\n      } else { // if (storeName.equals(\"�L�����E�h�E\"))\n\n        // Log\n        Log.d(\n            \"Methods_sl.java\"\n                + \"[\"\n                + Thread.currentThread().getStackTrace()[2].getLineNumber()\n                + \":\"\n                + Thread.currentThread().getStackTrace()[2].getMethodName()\n                + \"]\",\n            \"No processing: data=\" + c.getLong(0));\n\n        // continue;\n\n      } // if (storeName.equals(\"�L�����E�h�E\"))\n\n      /** ******************************* Next data ******************************* */\n      c.moveToNext();\n    } // for (int i = 0; i < c.getCount(); i++)\n\n    return res;\n  } // private static boolean refactorData_colPrice_CanDo(\n"}, {"dataset": "moveToFirst", "exampleID": 1417, "initialization": ["Cursor cursor = query(*,String[],*,*,*,*,*)"], "initializationStart": [213], "initializationEnd": [286], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 294, "focalAPIEnd": 314, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "close(cursor,SQLiteDatabase)"], "useStart": [329, 373], "useEnd": [345, 390], "hasFinally": 1, "cleanUpCall": ["close(Cursor,SQLiteDatabase)"], "finallyExpressionStart": 357, "finallyExpressionEnd": 365, "finallyBlockStart": 357, "finallyBlockEnd": 397, "cleanUpCallStart": [373], "cleanUpCallEnd": [390], "url": "https://github.com/jTurnerCPW/sprintAndroid/tree/master/CaptureActivity/src/com/google/zxing/client/android/history/HistoryManager.java", "rawCode": "  public boolean hasHistoryItems() {\n    SQLiteOpenHelper helper = new DBHelper(activity);\n    SQLiteDatabase db = null;\n    Cursor cursor = null;\n    try {\n      db = helper.getReadableDatabase();\n      cursor = db.query(DBHelper.TABLE_NAME, COUNT_COLUMN, null, null, null, null, null);\n      cursor.moveToFirst();\n      return cursor.getInt(0) > 0;\n    } finally {\n      close(cursor, db);\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1418, "initialization": ["Cursor cursor = getCursor(String,String[],String,*,*,*,String,String)"], "initializationStart": [485], "initializationEnd": [550], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 611, "focalAPIEnd": 626, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Entity(String,cursor)", "cursor.moveToNext()", "cursor.close()"], "useStart": [760, 809, 835], "useEnd": [780, 823, 844], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emolinablas/CoretelProject/tree/master/Coretel/src/com/android/dataframework/DataFramework.java", "rawCode": "  /**\n   * Devuelve una lista los objetos Entity de la tabla de una consulta ordenados\n   *\n   * @param table tabla a usar\n   * @param where parte WHERE de la consulta SQL\n   * @param orderby parte ORDER BY de la consulta SQL\n   * @param limit parte LIMIT de la consulta SQL\n   * @return lista de objetos\n   */\n  public ArrayList<Entity> getEntityList(String table, String where, String orderby, String limit) {\n    String[] fields = getTable(table).getFieldsToArray();\n    Cursor c = getCursor(table, fields, where, null, null, null, orderby, limit);\n\n    ArrayList<Entity> aux = new ArrayList<Entity>();\n\n    c.moveToFirst();\n    while (!c.isAfterLast()) {\n      // Creamos la entidad a partir del cursor y nos ahorramos el acceso a la BD\n      Entity ent = new Entity(table, c);\n\n      aux.add(ent);\n      c.moveToNext();\n    }\n    c.close();\n    return aux;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1419, "initialization": ["Cursor cursor = query(Uri,String[],*,*,*)"], "initializationStart": [390], "initializationEnd": [450], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 456, "focalAPIEnd": 476, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.close()"], "useStart": [517, 500, 559], "useEnd": [552, 553, 573], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hdodenhof/holoreader/tree/master/src/de/hdodenhof/holoreader/misc/Helpers.java", "rawCode": "  /**\n   * Queries the name of the feed with the given ID\n   *\n   * @param feedID\n   * @return Name of the feed with the given ID\n   */\n  public static String queryFeedName(ContentResolver contentResolver, int feedID) {\n    Uri baseUri = Uri.withAppendedPath(RSSContentProvider.URI_FEEDS, String.valueOf(feedID));\n    String[] projection = {FeedDAO._ID, FeedDAO.NAME};\n\n    Cursor cursor = contentResolver.query(baseUri, projection, null, null, null);\n    cursor.moveToFirst();\n    String feedName = cursor.getString(cursor.getColumnIndex(FeedDAO.NAME));\n    cursor.close();\n\n    return feedName;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1420, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [2159], "initializationEnd": [2184], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 2313, "tryExpressionEnd": 2317, "tryBlockStart": 2313, "tryBlockEnd": 3979, "catchExpressionStart": 3836, "catchExpressionEnd": 3856, "catchBlockStart": 3836, "catchBlockEnd": 3937, "exceptionHandlingCallStart": [3866], "exceptionHandlingCallEnd": [3928], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.getCount()>0 && cursor!=null", "guardType": "IF {", "guardExpressionStart": 2285, "guardExpressionEnd": 2304, "guardBlockStart": 2285, "guardBlockEnd": 3985, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 2366, "focalAPIEnd": 2386, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursorRowToContentValues(cursor,ContentValues)", "cursor.close()"], "useStart": [2449, 3956], "useEnd": [2499, 3970], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 3938, "finallyExpressionEnd": 3946, "finallyBlockStart": 3938, "finallyBlockEnd": 3979, "cleanUpCallStart": [3956], "cleanUpCallEnd": [3970], "url": "https://github.com/duzy/CSipSimple/tree/master/src/com/csipsimple/utils/contacts/ContactsUtils5.java", "rawCode": "  @Override\n  public CallerInfo findCallerInfoForUri(Context ctxt, String sipUri) {\n    CallerInfo callerInfo = new CallerInfo();\n    String[] projection;\n    if (Compatibility.isCompatible(11)) {\n      projection =\n          new String[] {\n            Data._ID,\n            Data.CONTACT_ID,\n            Data.DATA1,\n            Data.DISPLAY_NAME,\n            Data.PHOTO_ID,\n            Data.CUSTOM_RINGTONE,\n            Data.LOOKUP_KEY,\n            Data.PHOTO_URI\n          };\n    } else {\n      projection =\n          new String[] {\n            Data._ID,\n            Data.CONTACT_ID,\n            Data.DATA1,\n            Data.DISPLAY_NAME,\n            Data.PHOTO_ID,\n            Data.CUSTOM_RINGTONE,\n            Data.LOOKUP_KEY\n          };\n    }\n\n    Uri uri = Data.CONTENT_URI;\n\n    // Has phone number\n    String whereSipUriClause =\n        \"(\"\n            + Data.MIMETYPE\n            + \"='\"\n            + CommonDataKinds.Im.CONTENT_ITEM_TYPE\n            + \"' \"\n            + \" AND \"\n            + CommonDataKinds.Im.PROTOCOL\n            + \"=\"\n            + CommonDataKinds.Im.PROTOCOL_CUSTOM\n            + \" AND \"\n            + CommonDataKinds.Im.CUSTOM_PROTOCOL\n            + \"='\"\n            + SipManager.PROTOCOL_SIP\n            + \"'\"\n            + \")\";\n\n    // CSip IM custo\n    whereSipUriClause +=\n        \" OR (\"\n            + Data.MIMETYPE\n            + \"='\"\n            + CommonDataKinds.Im.CONTENT_ITEM_TYPE\n            + \"' \"\n            + \" AND \"\n            + CommonDataKinds.Im.PROTOCOL\n            + \"=\"\n            + CommonDataKinds.Im.PROTOCOL_CUSTOM\n            + \" AND \"\n            + CommonDataKinds.Im.CUSTOM_PROTOCOL\n            + \"='\"\n            + SipManager.PROTOCOL_CSIP\n            + \"'\"\n            + \")\";\n\n    // Has sip uri\n    if (Compatibility.isCompatible(9)) {\n      whereSipUriClause +=\n          \" OR \" + Data.MIMETYPE + \"='\" + CommonDataKinds.SipAddress.CONTENT_ITEM_TYPE + \"'\";\n    }\n\n    String query =\n        Contacts.DISPLAY_NAME\n            + \" IS NOT NULL \"\n            + \" AND (\"\n            + whereSipUriClause\n            + \") AND \"\n            + Data.DATA1\n            + \"=?\";\n\n    Cursor cursor =\n        ctxt.getContentResolver()\n            .query(uri, projection, query, new String[] {sipUri}, Data.DISPLAY_NAME + \" ASC\");\n\n    if (cursor != null) {\n      try {\n        if (cursor.getCount() > 0) {\n          cursor.moveToFirst();\n\n          ContentValues cv = new ContentValues();\n          DatabaseUtils.cursorRowToContentValues(cursor, cv);\n          callerInfo.contactExists = true;\n          if (cv.containsKey(Data.DISPLAY_NAME)) {\n            callerInfo.name = cv.getAsString(Data.DISPLAY_NAME);\n          }\n\n          callerInfo.phoneNumber = sipUri;\n\n          callerInfo.numberLabel = \"sip\";\n          callerInfo.phoneLabel = \"sip\";\n\n          if (cv.containsKey(Data.CONTACT_ID)) {\n            callerInfo.personId = cv.getAsLong(Data.CONTACT_ID);\n\n            callerInfo.contactContentUri =\n                ContentUris.withAppendedId(Contacts.CONTENT_URI, callerInfo.personId);\n          }\n\n          if (cv.containsKey(Data.CUSTOM_RINGTONE)) {\n            String cRt = cv.getAsString(Data.CUSTOM_RINGTONE);\n            if (!TextUtils.isEmpty(cRt)) {\n              callerInfo.contactRingtoneUri = Uri.parse(cRt);\n            }\n          }\n\n          if (cv.containsKey(Data.PHOTO_ID) && cv.getAsLong(Data.PHOTO_ID) != null) {\n            callerInfo.photoId = cv.getAsLong(Data.PHOTO_ID);\n          }\n\n          if (cv.containsKey(Data.PHOTO_URI)) {\n            String cPu = cv.getAsString(Data.PHOTO_URI);\n            if (!TextUtils.isEmpty(cPu)) {\n              callerInfo.photoUri = Uri.parse(cPu);\n            }\n          }\n\n          if (callerInfo.name != null && callerInfo.name.length() == 0) {\n            callerInfo.name = null;\n          }\n        }\n      } catch (Exception e) {\n        Log.e(THIS_FILE, \"Exception while retrieving cursor infos\", e);\n      } finally {\n        cursor.close();\n      }\n    }\n\n    return callerInfo;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1421, "initialization": ["Cursor cursor = managedQuery(Uri,String[],*,*)"], "initializationStart": [2417], "initializationEnd": [2460], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 2466, "focalAPIEnd": 2487, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mnlk2-custom/android_packages_apps_Settings/tree/master/src/com/android/settings/ApnEditor.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    addPreferencesFromResource(R.xml.apn_editor);\n\n    sNotSet = getResources().getString(R.string.apn_not_set);\n    mName = (EditTextPreference) findPreference(\"apn_name\");\n    mApn = (EditTextPreference) findPreference(\"apn_apn\");\n    mProxy = (EditTextPreference) findPreference(\"apn_http_proxy\");\n    mPort = (EditTextPreference) findPreference(\"apn_http_port\");\n    mUser = (EditTextPreference) findPreference(\"apn_user\");\n    mServer = (EditTextPreference) findPreference(\"apn_server\");\n    mPassword = (EditTextPreference) findPreference(\"apn_password\");\n    mMmsProxy = (EditTextPreference) findPreference(\"apn_mms_proxy\");\n    mMmsPort = (EditTextPreference) findPreference(\"apn_mms_port\");\n    mMmsc = (EditTextPreference) findPreference(\"apn_mmsc\");\n    mMcc = (EditTextPreference) findPreference(\"apn_mcc\");\n    mMnc = (EditTextPreference) findPreference(\"apn_mnc\");\n    mApnType = (EditTextPreference) findPreference(\"apn_type\");\n\n    mAuthType = (ListPreference) findPreference(KEY_AUTH_TYPE);\n    mAuthType.setOnPreferenceChangeListener(this);\n\n    mProtocol = (ListPreference) findPreference(KEY_PROTOCOL);\n    mProtocol.setOnPreferenceChangeListener(this);\n\n    mRes = getResources();\n\n    final Intent intent = getIntent();\n    final String action = intent.getAction();\n\n    mFirstTime = icicle == null;\n\n    if (action.equals(Intent.ACTION_EDIT)) {\n      mUri = intent.getData();\n    } else if (action.equals(Intent.ACTION_INSERT)) {\n      if (mFirstTime || icicle.getInt(SAVED_POS) == 0) {\n        mUri = getContentResolver().insert(intent.getData(), new ContentValues());\n      } else {\n        mUri = ContentUris.withAppendedId(Telephony.Carriers.CONTENT_URI, icicle.getInt(SAVED_POS));\n      }\n      mNewApn = true;\n      // If we were unable to create a new note, then just finish\n      // this activity. A RESULT_CANCELED will be sent back to the\n      // original activity if they requested a result.\n      if (mUri == null) {\n        Log.w(TAG, \"Failed to insert new telephony provider into \" + getIntent().getData());\n        finish();\n        return;\n      }\n\n      // The new entry was created, so assume all will end well and\n      // set the result to be returned.\n      setResult(RESULT_OK, (new Intent()).setAction(mUri.toString()));\n\n    } else {\n      finish();\n      return;\n    }\n\n    mCursor = managedQuery(mUri, sProjection, null, null);\n    mCursor.moveToFirst();\n\n    fillUi();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1422, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [91], "initializationEnd": [111], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 305, "guardExpressionEnd": 331, "guardBlockStart": 305, "guardBlockEnd": 407, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 340, "focalAPIEnd": 360, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.close()"], "useStart": [374, 412], "useEnd": [400, 426], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vokalinteractive/android_packages_apps_Settings/tree/master/src/com/android/settings/ApnSettings.java", "rawCode": "  private String getSelectedApnKey() {\n    String key = null;\n\n    Cursor cursor =\n        getContentResolver()\n            .query(\n                PREFERAPN_URI,\n                new String[] {\"_id\"},\n                null,\n                null,\n                Telephony.Carriers.DEFAULT_SORT_ORDER);\n    if (cursor.getCount() > 0) {\n      cursor.moveToFirst();\n      key = cursor.getString(ID_INDEX);\n    }\n    cursor.close();\n    return key;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1423, "initialization": ["Cursor cursor = query(String,String[],String,*,*,*,*)"], "initializationStart": [476], "initializationEnd": [553], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 559, "guardExpressionEnd": 582, "guardBlockStart": 559, "guardBlockEnd": 964, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 591, "focalAPIEnd": 608, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/igrir/teroka/tree/master/src/com/tanyoo/teroka/lib/DbTeroka.java", "rawCode": "  /**\n   * Tidak digunakan, karena pemain cuma ada 1\n   *\n   * @param nama\n   * @return\n   */\n  public DataPemain getDataPemainByNama(String nama) {\n    Cursor cur = null;\n    DataPemain T = new DataPemain();\n\n    String[] COLS =\n        new String[] {\n          \"ID\",\n          \"NAMA\",\n          \"LEVEL\",\n          \"J_BINTANG\",\n          \"J_STEP\",\n          \"J_KALORI\",\n          \"MAX_STEP\",\n          \"NOW_ARMOR\",\n          \"J_WIN\",\n          \"J_LOSE\"\n        };\n\n    cur = db.query(\"DATA_PEMAIN\", COLS, \"NAMA ='\" + nama + \"'\", null, null, null, null);\n    if (cur.getCount() > 0) {\n      cur.moveToFirst();\n      T.id = cur.getInt(0);\n      T.nama = cur.getString(1);\n      T.level = cur.getString(2);\n      T.j_bintang = cur.getString(3);\n      T.j_step = cur.getString(4);\n      T.j_kalori = cur.getString(5);\n      T.max_step = cur.getString(6);\n      T.now_armor = cur.getString(7);\n      T.j_win = cur.getString(7);\n      T.j_lose = cur.getString(7);\n    }\n\n    return T;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1424, "initialization": ["Cursor cursor = query(String,String[],*,*,*,*,*)"], "initializationStart": [139], "initializationEnd": [347], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 354, "focalAPIEnd": 374, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getLong(int)", "cursor.moveToNext()", "cursor.close()"], "useStart": [432, 488, 556], "useEnd": [449, 507, 570], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kevinschaul/PlanMyMeal/tree/master/src/com/csci5115/group2/planmymeal/database/DataSourceManager.java", "rawCode": "  private List<Long> getStepIdsForRecipe(long recipeId) {\n    List<Long> recipeSteps = new ArrayList<Long>();\n\n    Cursor cursor =\n        database.query(\n            TABLE_RECIPE_STEP_REL,\n            allRecipeStepRelColumns,\n            COLUMN_RECIPE_ID + \" = \" + recipeId,\n            null,\n            null,\n            null,\n            null);\n\n    cursor.moveToFirst();\n    while (!cursor.isAfterLast()) {\n      long stepId = cursor.getLong(2);\n      recipeSteps.add(stepId);\n      cursor.moveToNext();\n    }\n    // make sure to close the cursor\n    cursor.close();\n    return recipeSteps;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1425, "initialization": ["Cursor cursor = managedQuery(Uri,String[],*,*,*)"], "initializationStart": [113], "initializationEnd": [160], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndexOrThrow(String)"], "configurationStart": [344], "configurationEnd": [402], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 166, "guardExpressionEnd": 185, "guardBlockStart": 166, "guardBlockEnd": 500, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 410, "focalAPIEnd": 430, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)"], "useStart": [445], "useEnd": [475], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kerpie/truTest/tree/master/src/com/trustripes/principal/NewUserRegistration.java", "rawCode": "  public String getPath(Uri uri) {\n    String[] projection = {MediaStore.Images.Media.DATA};\n    Cursor cursor = managedQuery(uri, projection, null, null, null);\n    if (cursor != null) {\n      // HERE YOU WILL GET A NULLPOINTER IF CURSOR IS NULL\n      // THIS CAN BE, IF YOU USED OI FILE MANAGER FOR PICKING THE MEDIA\n      int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);\n      cursor.moveToFirst();\n      return cursor.getString(column_index);\n    } else return null;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1426, "initialization": ["Cursor cursor = DataBaseHelper.fetchEventsByCategory(String)"], "initializationStart": [106], "initializationEnd": [152], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 158, "focalAPIEnd": 184, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new MySimpleCursorAdapter(*,*,cursor,String[],int[])"], "useStart": [701], "useEnd": [790], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vaugan/whatsON/tree/master/src/com/nextgen/bemore/EventListFragment.java", "rawCode": "  private void fillData() {\n\n    myDbHelper = MainActivity.getDatabaseHelper();\n    Cursor eventsCursor = myDbHelper.fetchEventsByCategory(mCurCategory);\n    eventsCursor.moveToFirst();\n    // Create an array to specify the fields we want to display in the list (only TITLE)\n\n    String[] from =\n        new String[] {\n          DataBaseHelper.KEY_EVENT_NAME, DataBaseHelper.KEY_DATE, DataBaseHelper.KEY_IMAGE_BANNER\n        };\n\n    // and an array of the fields we want to bind those fields to\n    int[] to = new int[] {R.id.event_row_name, R.id.event_row_date, R.id.event_row_image_banner};\n\n    // Now create a simple cursor adapter and set it to display\n    MySimpleCursorAdapter events =\n        new MySimpleCursorAdapter(this.getActivity(), R.layout.event_row, eventsCursor, from, to);\n    setListAdapter(events);\n\n    // eventsCursor.close();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1427, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [941], "initializationEnd": [961], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(cursor==null)", "guardType": "IF {", "guardExpressionStart": 1061, "guardExpressionEnd": 1080, "guardBlockStart": 1061, "guardBlockEnd": 1110, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 1120, "focalAPIEnd": 1140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndexOrThrow(String)", "cursor.getInt(int)", "insertShare(cursor,int)", "cursor.moveToNext()", "updateShare(cursor,int,boolean)", "cursor.moveToNext()", "insertShare(cursor,int)", "cursor.moveToNext()", "cursor.close()"], "useStart": [1275, 2828, 2914, 3399, 3968, 4404, 4692, 5114, 5289], "useEnd": [1323, 2851, 2943, 3418, 4011, 4423, 4721, 5133, 5303], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_packages_apps_Bluetooth/tree/master/src/com/android/bluetooth/opp/BluetoothOppService.java", "rawCode": "    @Override\n    public void run() {\n      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);\n\n      boolean keepService = false;\n      for (; ; ) {\n        synchronized (BluetoothOppService.this) {\n          if (mUpdateThread != this) {\n            throw new IllegalStateException(\"multiple UpdateThreads in BluetoothOppService\");\n          }\n          if (V)\n            Log.v(\n                TAG,\n                \"pendingUpdate is \"\n                    + mPendingUpdate\n                    + \" keepUpdateThread is \"\n                    + keepService\n                    + \" sListenStarted is \"\n                    + mListenStarted);\n          if (!mPendingUpdate) {\n            mUpdateThread = null;\n            if (!keepService && !mListenStarted) {\n              stopSelf();\n              break;\n            }\n            return;\n          }\n          mPendingUpdate = false;\n        }\n        Cursor cursor =\n            getContentResolver()\n                .query(BluetoothShare.CONTENT_URI, null, null, null, BluetoothShare._ID);\n\n        if (cursor == null) {\n          return;\n        }\n\n        cursor.moveToFirst();\n\n        int arrayPos = 0;\n\n        keepService = false;\n        boolean isAfterLast = cursor.isAfterLast();\n\n        int idColumn = cursor.getColumnIndexOrThrow(BluetoothShare._ID);\n        /*\n         * Walk the cursor and the local array to keep them in sync. The\n         * key to the algorithm is that the ids are unique and sorted\n         * both in the cursor and in the array, so that they can be\n         * processed in order in both sources at the same time: at each\n         * step, both sources point to the lowest id that hasn't been\n         * processed from that source, and the algorithm processes the\n         * lowest id from those two possibilities. At each step: -If the\n         * array contains an entry that's not in the cursor, remove the\n         * entry, move to next entry in the array. -If the array\n         * contains an entry that's in the cursor, nothing to do, move\n         * to next cursor row and next array entry. -If the cursor\n         * contains an entry that's not in the array, insert a new entry\n         * in the array, move to next cursor row and next array entry.\n         */\n        while (!isAfterLast || arrayPos < mShares.size()) {\n          if (isAfterLast) {\n            // We're beyond the end of the cursor but there's still\n            // some\n            // stuff in the local array, which can only be junk\n            if (V)\n              Log.v(TAG, \"Array update: trimming \" + mShares.get(arrayPos).mId + \" @ \" + arrayPos);\n\n            if (shouldScanFile(arrayPos)) {\n              scanFile(null, arrayPos);\n            }\n            deleteShare(arrayPos); // this advances in the array\n          } else {\n            int id = cursor.getInt(idColumn);\n\n            if (arrayPos == mShares.size()) {\n              insertShare(cursor, arrayPos);\n              if (V) Log.v(TAG, \"Array update: inserting \" + id + \" @ \" + arrayPos);\n              if (shouldScanFile(arrayPos) && (!scanFile(cursor, arrayPos))) {\n                keepService = true;\n              }\n              if (visibleNotification(arrayPos)) {\n                keepService = true;\n              }\n              if (needAction(arrayPos)) {\n                keepService = true;\n              }\n\n              ++arrayPos;\n              cursor.moveToNext();\n              isAfterLast = cursor.isAfterLast();\n            } else {\n              int arrayId = mShares.get(arrayPos).mId;\n\n              if (arrayId < id) {\n                if (V) Log.v(TAG, \"Array update: removing \" + arrayId + \" @ \" + arrayPos);\n                if (shouldScanFile(arrayPos)) {\n                  scanFile(null, arrayPos);\n                }\n                deleteShare(arrayPos);\n              } else if (arrayId == id) {\n                // This cursor row already exists in the stored\n                // array\n                updateShare(cursor, arrayPos, userAccepted);\n                if (shouldScanFile(arrayPos) && (!scanFile(cursor, arrayPos))) {\n                  keepService = true;\n                }\n                if (visibleNotification(arrayPos)) {\n                  keepService = true;\n                }\n                if (needAction(arrayPos)) {\n                  keepService = true;\n                }\n\n                ++arrayPos;\n                cursor.moveToNext();\n                isAfterLast = cursor.isAfterLast();\n              } else {\n                // This cursor entry didn't exist in the stored\n                // array\n                if (V) Log.v(TAG, \"Array update: appending \" + id + \" @ \" + arrayPos);\n                insertShare(cursor, arrayPos);\n\n                if (shouldScanFile(arrayPos) && (!scanFile(cursor, arrayPos))) {\n                  keepService = true;\n                }\n                if (visibleNotification(arrayPos)) {\n                  keepService = true;\n                }\n                if (needAction(arrayPos)) {\n                  keepService = true;\n                }\n                ++arrayPos;\n                cursor.moveToNext();\n                isAfterLast = cursor.isAfterLast();\n              }\n            }\n          }\n        }\n\n        mNotifier.updateNotification();\n\n        cursor.close();\n      }\n    }\n"}, {"dataset": "moveToFirst", "exampleID": 1428, "initialization": ["Cursor cursor = query(String,*,String,*,*,*,*)"], "initializationStart": [925], "initializationEnd": [1003], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 1011, "focalAPIEnd": 1031, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.moveToNext()", "cursor.moveToFirst()", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.moveToFirst()", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.moveToFirst()", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.moveToFirst()", "cursor.getColumnIndex(String)", "cursor.getInt(int)", "cursor.moveToNext()", "cursor.moveToFirst()", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getInt(int)"], "useStart": [1107, 1093, 1179, 1162, 1259, 1242, 1339, 1322, 1521, 1507, 1561, 1767, 1822, 1808, 1950, 2019, 2002, 2094, 2080, 2168, 2154, 2355, 2341, 2420, 2406, 2665, 2718, 2704, 2797, 2780, 2870, 2856, 2942, 2928, 3188, 3284, 3270, 3324, 3506, 3774, 3757, 3847, 3830, 4040, 4023, 4116, 4102], "useEnd": [1135, 1136, 1208, 1209, 1295, 1296, 1369, 1370, 1549, 1550, 1580, 1787, 1850, 1851, 1970, 2048, 2049, 2122, 2123, 2196, 2197, 2383, 2384, 2448, 2449, 2685, 2746, 2747, 2826, 2827, 2898, 2899, 2970, 2971, 3208, 3312, 3313, 3343, 3526, 3803, 3804, 3877, 3878, 4076, 4077, 4144, 4145], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/erichare/RevMiner-OpenMenu-Integration/tree/master/Android/OpenMenu/src/com/net/rmopenmenu/LoadList.java", "rawCode": "  public Bundle load(String query) {\n    SQLiteDatabase db = new Database(context).getReadableDatabase();\n    ArrayList<Integer> item_ids = new ArrayList<Integer>();\n    ArrayList<String> restaurant_names = new ArrayList<String>();\n    ArrayList<Integer> restaurant_lats = new ArrayList<Integer>();\n    ArrayList<Integer> restaurant_lons = new ArrayList<Integer>();\n    ArrayList<String> restaurant_distances = new ArrayList<String>();\n    ArrayList<String> item_names = new ArrayList<String>();\n    ArrayList<String> item_prices = new ArrayList<String>();\n    ArrayList<String> item_descriptions = new ArrayList<String>();\n    ArrayList<Integer> item_vegs = new ArrayList<Integer>();\n\n    final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n    GeoPoint myLoc = new GeoPoint(prefs.getInt(\"lat\", 47662150), prefs.getInt(\"lon\", -122313237));\n    if (menu) {\n      Cursor cursor =\n          db.query(\"items\", null, \"name LIKE '%\" + query + \"%'\", null, null, null, null);\n      cursor.moveToFirst();\n\n      while (!cursor.isAfterLast()) {\n        item_ids.add(cursor.getInt(cursor.getColumnIndex(\"iid\")));\n        item_names.add(cursor.getString(cursor.getColumnIndex(\"name\")));\n        item_descriptions.add(cursor.getString(cursor.getColumnIndex(\"description\")));\n        String price = cursor.getString(cursor.getColumnIndex(\"price\"));\n        if (price.equals(\"0.00\")) {\n          price = \"Unknown Price\";\n        }\n        item_prices.add(price);\n        item_vegs.add(cursor.getInt(cursor.getColumnIndex(\"veg\")));\n        cursor.moveToNext();\n      }\n\n      for (int i = 0; i < item_ids.size(); i++) {\n        cursor =\n            db.query(\"restaurants_items\", null, \"iid = \" + item_ids.get(i), null, null, null, null);\n        cursor.moveToFirst();\n\n        int rid = cursor.getInt(cursor.getColumnIndex(\"rid\"));\n\n        cursor = db.query(\"restaurants\", null, \"rid = \" + rid, null, null, null, null);\n        cursor.moveToFirst();\n\n        restaurant_names.add(cursor.getString(cursor.getColumnIndex(\"name\")));\n        restaurant_lats.add(cursor.getInt(cursor.getColumnIndex(\"lat\")));\n        restaurant_lons.add(cursor.getInt(cursor.getColumnIndex(\"lon\")));\n\n        double distance =\n            MapFragment.distanceBetween(\n                myLoc,\n                new GeoPoint(\n                    cursor.getInt(cursor.getColumnIndex(\"lat\")),\n                    cursor.getInt(cursor.getColumnIndex(\"lon\"))));\n        restaurant_distances.add(String.format(\"%.1f\", distance));\n      }\n    } else {\n      Cursor cursor =\n          db.query(\"restaurants\", null, \"name LIKE '%\" + query + \"%'\", null, null, null, null);\n      cursor.moveToFirst();\n\n      int rid = cursor.getInt(cursor.getColumnIndex(\"rid\"));\n      String restaurant_name = cursor.getString(cursor.getColumnIndex(\"name\"));\n      int restaurant_lat = cursor.getInt(cursor.getColumnIndex(\"lat\"));\n      int restaurant_lon = cursor.getInt(cursor.getColumnIndex(\"lon\"));\n      double distance =\n          MapFragment.distanceBetween(myLoc, new GeoPoint(restaurant_lat, restaurant_lon));\n\n      cursor = db.query(\"restaurants_items\", null, \"rid = \" + rid, null, null, null, null);\n      cursor.moveToFirst();\n\n      while (!cursor.isAfterLast()) {\n        item_ids.add(cursor.getInt(cursor.getColumnIndex(\"iid\")));\n        cursor.moveToNext();\n      }\n\n      for (int i = 0; i < item_ids.size(); i++) {\n        cursor = db.query(\"items\", null, \"iid = \" + item_ids.get(i), null, null, null, null);\n        cursor.moveToFirst();\n\n        restaurant_names.add(restaurant_name);\n        restaurant_lats.add(restaurant_lat);\n        restaurant_lons.add(restaurant_lon);\n        restaurant_distances.add(String.format(\"%.1f\", distance));\n\n        item_names.add(cursor.getString(cursor.getColumnIndex(\"name\")));\n        String price = cursor.getString(cursor.getColumnIndex(\"price\"));\n        if (price.equals(\"0.00\")) {\n          price = \"Unknown Price\";\n        }\n        item_prices.add(price);\n        item_descriptions.add(cursor.getString(cursor.getColumnIndex(\"description\")));\n        item_vegs.add(cursor.getInt(cursor.getColumnIndex(\"veg\")));\n      }\n    }\n\n    if (db != null) db.close();\n\n    Bundle b = new Bundle();\n    b.putString(\"query\", query);\n    b.putBoolean(\"menu\", menu);\n    b.putIntegerArrayList(\"item_ids\", item_ids);\n    b.putStringArrayList(\"restaurant_names\", restaurant_names);\n    b.putIntegerArrayList(\"restaurant_lats\", restaurant_lats);\n    b.putIntegerArrayList(\"restaurant_lons\", restaurant_lons);\n    b.putStringArrayList(\"restaurant_distances\", restaurant_distances);\n    b.putStringArrayList(\"item_names\", item_names);\n    b.putStringArrayList(\"item_prices\", item_prices);\n    b.putStringArrayList(\"item_descriptions\", item_descriptions);\n    b.putIntegerArrayList(\"item_vegs\", item_vegs);\n\n    ArrayList<Item> item_list = new ArrayList<Item>();\n\n    for (int i = 0; i < item_ids.size(); i++) {\n      boolean mSort = (menu ? prefs.getBoolean(\"sortPrice\", false) : true);\n      Item item =\n          new Item(\n              item_ids.get(i),\n              restaurant_names.get(i),\n              restaurant_lats.get(i),\n              restaurant_lons.get(i),\n              restaurant_distances.get(i),\n              item_names.get(i),\n              item_prices.get(i),\n              item_descriptions.get(i),\n              item_vegs.get(i),\n              mSort);\n      item_list.add(item);\n    }\n\n    Collections.sort(item_list);\n\n    ArrayList<String> combined = new ArrayList<String>();\n    String thisName = \"\";\n    for (Iterator<Item> i = item_list.iterator(); i.hasNext(); ) {\n      Item item = i.next();\n      if (!item.restaurant_name.equals(thisName)) {\n        combined.add(\n            (combined.size() == 0 ? \"\" : \"\\n\\n\")\n                + item.restaurant_name\n                + \"\\n\"\n                + item.restaurant_distance\n                + \" mi.\\n\\n\");\n      }\n      combined.add(\n          item.item_name\n              + (item.item_description.equals(\"\") ? \"\" : \"\\n\" + item.item_description)\n              + (item.item_price.equals(\"Unknown Price\") ? \"\" : \"\\n$\" + item.item_price)\n              + \"\\n\"\n              + (item.item_veg == 1\n                  ? \"We think this IS a vegetarian item\"\n                  : \"We think this is NOT a vegetarian item\"));\n      thisName = item.restaurant_name;\n    }\n\n    b.putStringArrayList(\"combined\", combined);\n\n    return b;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1429, "initialization": ["Cursor cursor = getContext()"], "initializationStart": [205], "initializationEnd": [217], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndexOrThrow(String)"], "configurationStart": [266], "configurationEnd": [307], "guardCondition": "cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 342, "guardExpressionEnd": 363, "guardBlockStart": 342, "guardBlockEnd": 439, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 372, "focalAPIEnd": 387, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)"], "useStart": [407], "useEnd": [432], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/viewworld/odk-collect/tree/master/src/org/odk/collect/android/widgets/VideoWidget.java", "rawCode": "  private String getPathFromUri(Uri uri) {\n    String[] videoProjection = {Video.Media.DATA};\n    Cursor c = ((Activity) getContext()).managedQuery(uri, videoProjection, null, null, null);\n    ((Activity) getContext()).startManagingCursor(c);\n    int column_index = c.getColumnIndexOrThrow(Video.Media.DATA);\n    String videoPath = null;\n    if (c.getCount() > 0) {\n      c.moveToFirst();\n      videoPath = c.getString(column_index);\n    }\n    return videoPath;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1430, "initialization": ["Cursor cursor = query(String,*,*,*,*,*,*)"], "initializationStart": [576], "initializationEnd": [635], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [679], "configurationEnd": [691], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 710, "focalAPIEnd": 725, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertTrue(result)", "cursor.getPosition()", "cursor.getColumnIndexOrThrow(String)", "cursor.getString(int)", "cursor.close()"], "useStart": [699, 748, 803, 791, 929], "useEnd": [726, 763, 834, 835, 938], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/core/tests/coretests/src/android/database/DatabaseCursorTest.java", "rawCode": "  @MediumTest\n  public void testLargeField() throws Exception {\n    mDatabase.execSQL(\"CREATE TABLE test (_id INTEGER PRIMARY KEY, data TEXT);\");\n\n    StringBuilder sql = new StringBuilder(2100);\n    sql.append(\"INSERT INTO test (data) VALUES ('\");\n    Random random = new Random(System.currentTimeMillis());\n    StringBuilder randomString = new StringBuilder(1979);\n    for (int i = 0; i < 1979; i++) {\n      randomString.append((random.nextInt() & 0xf) % 10);\n    }\n    sql.append(randomString);\n    sql.append(\"');\");\n    mDatabase.execSQL(sql.toString());\n\n    Cursor c = mDatabase.query(\"test\", null, null, null, null, null, null);\n    assertNotNull(c);\n    assertEquals(1, c.getCount());\n\n    assertTrue(c.moveToFirst());\n    assertEquals(0, c.getPosition());\n    String largeString = c.getString(c.getColumnIndexOrThrow(\"data\"));\n    assertNotNull(largeString);\n    assertEquals(randomString.toString(), largeString);\n    c.close();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1431, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [181], "initializationEnd": [225], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 231, "focalAPIEnd": 251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursorToElementType(cursor)", "cursor.moveToNext()", "cursor.close()"], "useStart": [312, 378, 409], "useEnd": [339, 397, 423], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Mendroyxx/FeatureApp/tree/master/Code/src/com/ecn/urbapp/db/LocalDataSource.java", "rawCode": "  /** execute the query and update elementType list */\n  public void getAllElementType() {\n    List<ElementType> elementTypeList = new ArrayList<ElementType>();\n    Cursor cursor = database.rawQuery(GETALLELEMENTTYPEID, null);\n    cursor.moveToFirst();\n    while (!cursor.isAfterLast()) {\n      ElementType p1 = cursorToElementType(cursor);\n      elementTypeList.add(p1);\n      cursor.moveToNext();\n    }\n    cursor.close();\n    MainActivity.elementType = (ArrayList<ElementType>) elementTypeList;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1432, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [114], "initializationEnd": [140], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 147, "guardExpressionEnd": 161, "guardBlockStart": 147, "guardBlockEnd": 178, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 162, "focalAPIEnd": 177, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.close()"], "useStart": [202, 318], "useEnd": [213, 327], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kimcoop/SociaList/tree/master/src/zebrafish/util/DBHelper.java", "rawCode": "  public User getUserByID(int row) {\n\n    String myQuery = \"SELECT * FROM user WHERE id = \" + row;\n    Cursor c = db.rawQuery(myQuery, null);\n\n    if (c != null) c.moveToFirst();\n\n    User u = new User(c.getInt(0), c.getString(1), c.getString(2), c.getString(3));\n    // Log.i(\"DB USER\", \"Name is \" +u.getName());\n    c.close();\n    return u;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1433, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 407, "focalAPIEnd": 427, "followUpCheck": "result", "checkType": "IF", "followUpCheckExpressionStart": 435, "followUpCheckExpressionEnd": 452, "followUpCheckBlockStart": 435, "followUpCheckBlockEnd": 987, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Anasthase/TintBrowser/tree/master/src/org/tint/providers/BookmarksWrapper.java", "rawCode": "  public static void toggleBookmark(ContentResolver contentResolver, long id, boolean bookmark) {\n    String[] colums = new String[] {BookmarksProvider.Columns._ID};\n    String whereClause = String.format(TOGGLE_BOOKMARK_WHERE_PATTERN, id);\n\n    Cursor cursor =\n        contentResolver.query(BookmarksProvider.BOOKMARKS_URI, colums, whereClause, null, null);\n    boolean recordExists = (cursor != null) && (cursor.moveToFirst());\n\n    if (recordExists) {\n      ContentValues values = new ContentValues();\n\n      values.put(BookmarksProvider.Columns.BOOKMARK, bookmark);\n      values.put(BookmarksProvider.Columns.PARENT_FOLDER_ID, -1);\n\n      if (bookmark) {\n        values.put(BookmarksProvider.Columns.CREATION_DATE, new Date().getTime());\n      } else {\n        values.putNull(BookmarksProvider.Columns.CREATION_DATE);\n        values.putNull(BookmarksProvider.Columns.THUMBNAIL);\n      }\n\n      contentResolver.update(BookmarksProvider.BOOKMARKS_URI, values, whereClause, null);\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1434, "initialization": ["Cursor cursor = query(*)"], "initializationStart": [217], "initializationEnd": [258], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 264, "focalAPIEnd": 279, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.moveToNext()"], "useStart": [416, 404, 486, 474, 560, 548, 637, 625, 823], "useEnd": [443, 444, 515, 516, 591, 592, 669, 670, 837], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sdywcd/jshoperv2/tree/master/jshop_android/src/com/jshop/android/action/JshopMelectrocartAction.java", "rawCode": "  /** 读取我的菜单数据 */\n  public ArrayList<HashMap<String, Object>> setElecartListView(Context context) {\n    electrocartgoodslists.clear();\n    // 读取ele_cart缓存\n    DBHelper dbhelper = new DBHelper(context);\n    Cursor c = dbhelper.query(DBHelper.ELE_CART_TM_NAME);\n    c.moveToFirst();\n    while (!c.isAfterLast()) {\n      HashMap<String, Object> map = new HashMap<String, Object>();\n      map.put(\"goodsid\", c.getString(c.getColumnIndex(\"goodsid\")));\n      map.put(\"goodsname\", c.getString(c.getColumnIndex(\"goodsname\")));\n      map.put(\"memberprice\", c.getString(c.getColumnIndex(\"memberprice\")));\n      map.put(\"needquantity\", c.getString(c.getColumnIndex(\"needquantity\")));\n      int ineed = Integer.parseInt(map.get(\"needquantity\").toString());\n      if (ineed >= 1) {\n        electrocartgoodslists.add(map);\n      }\n      c.moveToNext();\n    }\n    dbhelper.close();\n    return electrocartgoodslists;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1435, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [54], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 179, "guardExpressionEnd": 200, "guardBlockStart": 179, "guardBlockEnd": 562, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 209, "focalAPIEnd": 224, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.close()"], "useStart": [378, 431, 485, 540, 567], "useEnd": [392, 445, 499, 554, 576], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vyloy/lnvc/tree/master/stb/vovo_android/src/com/lorent/LCCUtil.java", "rawCode": "  public SetupBean getRegisterInfo() {\n    Cursor c = getContentResolver().query(DBProvider.SIP_ACCOUNT_TB_URI, null, null, null, null);\n    SetupBean bean = new SetupBean();\n    if (c.getCount() > 0) {\n      c.moveToFirst();\n      bean.userName = c.getString(1);\n      bean.password = c.getString(2);\n      bean.sipip = c.getString(3);\n      bean.serverPort = Integer.parseInt(c.getString(4));\n      bean.width = Integer.parseInt(c.getString(5));\n      bean.height = Integer.parseInt(c.getString(6));\n      bean.bitrate = Integer.parseInt(c.getString(7));\n    }\n    c.close();\n    return bean;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1436, "initialization": ["Cursor cursor = query(*,String[],*,*,*)"], "initializationStart": [370], "initializationEnd": [433], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 439, "guardExpressionEnd": 455, "guardBlockStart": 439, "guardBlockEnd": 523, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 464, "focalAPIEnd": 481, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)"], "useStart": [500], "useEnd": [516], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pankajkainthla/phonegap-plugins-all/tree/master/Android/OcrApiService/com/ocrapiservice/OcrApiServicePlugin.java", "rawCode": "  private String getFilePathFromResourcePath(String resourcePath) {\n    String filePath = \"\";\n    // Discussion about the warning\n    // http://simonmacdonald.blogspot.fr/2012/07/phonegap-android-plugins-sometimes-we.html\n    ContentResolver cr = this.cordova.getContext().getContentResolver();\n    String[] projection = {MediaStore.Images.Media.DATA};\n    Cursor cur = cr.query(Uri.parse(resourcePath), projection, null, null, null);\n    if (cur != null) {\n      cur.moveToFirst();\n      filePath = cur.getString(0);\n    }\n\n    return filePath;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1437, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [271], "initializationEnd": [322], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 329, "focalAPIEnd": 344, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToNext()", "cursor.moveToNext()", "cursor.moveToNext()"], "useStart": [376, 422, 468], "useEnd": [390, 436, 482], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Reyhaneh-Ameri/software-engineering2-GroupB/tree/master/Fandogh/Fandogh/src/com/iust/fandogh/controllers/DatabaseController.java", "rawCode": "  /**\n   * @author Mahsa Asadi, Amin Fallahi Get vibra, music and sound status from settings table in\n   *     order to toggle them on and off in settings activity.\n   * @return\n   */\n  public int[] getSettingsValues() {\n    Cursor c;\n    int[] gsv = new int[4];\n    c = sd.rawQuery(\"select * from \" + settingsTable, null);\n\n    c.moveToFirst();\n    gsv[0] = c.getInt(0);\n    c.moveToNext();\n    gsv[1] = c.getInt(0);\n    c.moveToNext();\n    gsv[2] = c.getInt(0);\n    c.moveToNext();\n    gsv[3] = c.getInt(0);\n    return gsv;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1438, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [348], "initializationEnd": [378], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["SQLiteDatabase.close()", "printStackTrace()"], "tryExpressionStart": 325, "tryExpressionEnd": 329, "tryBlockStart": 325, "tryBlockEnd": 957, "catchExpressionStart": 885, "catchExpressionEnd": 905, "catchBlockStart": 885, "catchBlockEnd": 957, "exceptionHandlingCallStart": [913, 931], "exceptionHandlingCallEnd": [923, 950], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 387, "guardExpressionEnd": 401, "guardBlockStart": 387, "guardBlockEnd": 878, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 412, "focalAPIEnd": 427, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)"], "useStart": [501, 489, 568, 556, 637, 625, 704, 765, 824], "useEnd": [527, 528, 595, 596, 665, 666, 729, 788, 847], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Balkanbomb/Itslearning/tree/master/application/MahAppStudent_ITSL_20131106/src/se/mah/kd330a/project/find/data/RoomDbHandler.java", "rawCode": "  public boolean isRoomExists(String roomNr) {\n\n    String selectQuery =\n        \"SELECT * FROM \"\n            + TABLE_ROOMS\n            + \" WHERE \"\n            + ROW_ROOMNR\n            + \" = '\"\n            + roomNr.toUpperCase(Locale.getDefault())\n            + \"'\";\n\n    SQLiteDatabase db = this.getReadableDatabase();\n\n    try {\n      Cursor c = db.rawQuery(selectQuery, null);\n\n      if (c != null) {\n        c.moveToFirst();\n        room = new PathToRoom(roomNr);\n        room.setPath(c.getString(c.getColumnIndex(ROW_PATH)));\n        room.setTextList(c.getString(c.getColumnIndex(ROW_TEXTS)));\n        room.setArrowList(c.getString(c.getColumnIndex(ROW_ARROWS)));\n        room.mMapPic = c.getString(c.getColumnIndex(ROW_MAP));\n        room.mCoord_x = c.getInt(c.getColumnIndex(ROW_X));\n        room.mCoord_y = c.getInt(c.getColumnIndex(ROW_Y));\n        return true;\n      }\n    } catch (Exception e) {\n      db.close();\n      e.printStackTrace();\n    }\n    return false;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1439, "initialization": ["Cursor cursor = query(Uri,*,*,*,*)"], "initializationStart": [704], "initializationEnd": [815], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [834], "configurationEnd": [851], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 862, "focalAPIEnd": 882, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.getCount()", "cursor.getCount()", "cursor.getCount()"], "useStart": [899, 1831, 2824, 3602], "useEnd": [918, 1848, 2841, 3619], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/johanbrook/watchme/tree/master/WatchMeTest/src/se/chalmers/watchmetest/database/WatchMeContentProviderTest.java", "rawCode": "  public void testInsert() {\n    ContentValues values = new ContentValues();\n\n    /*\n     * Test insert into uri_movie\n     */\n    values.put(MoviesTable.COLUMN_TITLE, \"batman\");\n    values.put(MoviesTable.COLUMN_RATING, 1);\n    values.put(MoviesTable.COLUMN_NOTE, \"\");\n    values.put(MoviesTable.COLUMN_DATE, 0);\n    values.put(MoviesTable.COLUMN_IMDB_ID, 0);\n    values.put(MoviesTable.COLUMN_POSTER_LARGE, \"\");\n    values.put(MoviesTable.COLUMN_POSTER_SMALL, \"\");\n\n    Uri tmpUri = contentResolver.insert(uri_movies, values);\n    long movieId = Long.parseLong(tmpUri.getLastPathSegment());\n    // Check that the id of the movie was returned.\n    assertTrue(movieId != 0);\n\n    Cursor cursor =\n        contentResolver.query(\n            uri_movies, null, MoviesTable.COLUMN_MOVIE_ID + \" = \" + movieId, null, null);\n    assertEquals(cursor.getCount(), 1);\n\n    cursor.moveToFirst();\n    assertTrue(cursor.getString(1).equals(\"batman\"));\n\n    /*\n     * Test insert the movie with the same title into uri_movie\n     */\n    values = new ContentValues();\n\n    values.put(MoviesTable.COLUMN_TITLE, \"batman\");\n    values.put(MoviesTable.COLUMN_RATING, 1);\n    values.put(MoviesTable.COLUMN_NOTE, \"\");\n    values.put(MoviesTable.COLUMN_DATE, 0);\n    values.put(MoviesTable.COLUMN_IMDB_ID, 0);\n    values.put(MoviesTable.COLUMN_POSTER_LARGE, \"\");\n    values.put(MoviesTable.COLUMN_POSTER_SMALL, \"\");\n\n    tmpUri = contentResolver.insert(uri_movies, values);\n    long zeroId = Long.parseLong(tmpUri.getLastPathSegment());\n\n    // If the movie already existed insert should return 0.\n    assertEquals(zeroId, 0);\n\n    // Confirms that there exist one and only one movie with the title 'batman'\n    cursor =\n        contentResolver.query(\n            uri_movies, null, MoviesTable.COLUMN_TITLE + \" = 'batman'\", null, null);\n    assertEquals(cursor.getCount(), 1);\n\n    /*\n     * Test insert into uri_tag\n     */\n    values = new ContentValues();\n\n    values.put(TagsTable.COLUMN_NAME, \"tag\");\n    try {\n      tmpUri = contentResolver.insert(uri_tags, values);\n      Assert.fail(\"Should throw UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n    }\n\n    /*\n     * Test insert into uri_hastag\n     */\n    values = new ContentValues();\n\n    values.put(MoviesTable.COLUMN_MOVIE_ID, movieId);\n    values.put(TagsTable.COLUMN_NAME, \"tag\");\n    tmpUri = contentResolver.insert(uri_hastag, values);\n    long tagId = Long.parseLong(tmpUri.getLastPathSegment());\n\n    cursor =\n        contentResolver.query(\n            uri_hastag,\n            null,\n            HasTagTable.COLUMN_MOVIE_ID\n                + \" = \"\n                + movieId\n                + \" AND \"\n                + HasTagTable.COLUMN_TAG_ID\n                + \" = \"\n                + tagId,\n            null,\n            null);\n    assertEquals(cursor.getCount(), 1);\n\n    /*\n     * Attach a tag to a movie it is already attached to.\n     */\n    tmpUri = contentResolver.insert(uri_hastag, values);\n    zeroId = Long.parseLong(tmpUri.getLastPathSegment());\n\n    // If the attachment already existed insert should return 0.\n    assertEquals(zeroId, 0);\n\n    cursor =\n        contentResolver.query(\n            uri_hastag,\n            null,\n            HasTagTable.COLUMN_MOVIE_ID\n                + \" = \"\n                + movieId\n                + \" AND \"\n                + HasTagTable.COLUMN_TAG_ID\n                + \" = \"\n                + tagId,\n            null,\n            null);\n    /* Confirms that there exist one and only one attachment between the\n     * movie 'batman' and the tag 'tag'\n     */\n    assertEquals(cursor.getCount(), 1);\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1440, "initialization": ["Cursor cursor = query(String,String[],*,*,*,*,*)"], "initializationStart": [113], "initializationEnd": [189], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 196, "focalAPIEnd": 216, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursorToRecipe(cursor)", "cursor.moveToNext()", "cursor.close()"], "useStart": [276, 333, 401], "useEnd": [298, 352, 415], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kevinschaul/PlanMyMeal/tree/master/src/com/csci5115/group2/planmymeal/database/DataSourceManager.java", "rawCode": "  public List<Recipe> getAllRecipes() {\n    List<Recipe> recipes = new ArrayList<Recipe>();\n\n    Cursor cursor = database.query(TABLE_RECIPE, allRecipeColumns, null, null, null, null, null);\n\n    cursor.moveToFirst();\n    while (!cursor.isAfterLast()) {\n      Recipe recipe = cursorToRecipe(cursor);\n      recipes.add(recipe);\n      cursor.moveToNext();\n    }\n    // make sure to close the cursor\n    cursor.close();\n    return recipes;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1441, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [50], "initializationEnd": [119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 125, "focalAPIEnd": 140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getLong(int)", "cursor.close()"], "useStart": [159, 177], "useEnd": [171, 186], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RMLL/droidrmll/tree/master/src/org/rmll/db/DBAdapter.java", "rawCode": "  public long getBookmarkCount() {\n    Cursor c = db.rawQuery(\"select count(\" + ID + \") from \" + TABLE_FAVORITES, null);\n    c.moveToFirst();\n    long count = c.getLong(0);\n    c.close();\n    return count;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1442, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.requery()"], "configurationStart": [330], "configurationEnd": [341], "guardCondition": "!(cursor.getCount()<1)", "guardType": "IF {", "guardExpressionStart": 92, "guardExpressionEnd": 113, "guardBlockStart": 92, "guardBlockEnd": 325, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 347, "focalAPIEnd": 362, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndexOrThrow(String)", "cursor.getString(int)"], "useStart": [393, 381], "useEnd": [437, 438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/remi/andrake/tree/master/examples/android/WikiNotes/src/com/google/android/wikinotes/WikiNotes.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n    Cursor c = mCursor;\n    if (c.getCount() < 1) {\n      // if the note can't be found, don't try to load it -- bail out\n      // (probably means it got deleted while we were frozen;\n      // thx to joe.bowbeer for the find)\n      finish();\n      return;\n    }\n    c.requery();\n    c.moveToFirst();\n    showWikiNote(c.getString(c.getColumnIndexOrThrow(WikiNote.Notes.BODY)));\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1443, "initialization": ["Cursor cursor = rawQuery(*,*)"], "initializationStart": [200], "initializationEnd": [412], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 420, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursorToCurrencyPair(cursor)", "cursor.moveToNext()", "cursor.close()"], "useStart": [496, 598, 628], "useEnd": [532, 612, 637], "hasFinally": 1, "cleanUpCall": ["close()"], "finallyExpressionStart": 666, "finallyExpressionEnd": 674, "finallyBlockStart": 666, "finallyBlockEnd": 696, "cleanUpCallStart": [628], "cleanUpCallEnd": [637], "url": "https://github.com/nkostyukovich/acctrip/tree/master/src/com/dzebsu/acctrip/db/datasources/CurrencyPairDataSource.java", "rawCode": "  public Map<Long, CurrencyPair> getCurrencyPairMapByEventId(long eventId) {\n    open();\n    try {\n      Map<Long, CurrencyPair> result = new HashMap<Long, CurrencyPair>();\n      Cursor c =\n          database.rawQuery(\n              SELECT_OP_QUERY\n                  + \" where \"\n                  + EventAccContract.CurrencyPair.EVENT_ID\n                  + \" = \"\n                  + eventId,\n              null);\n      c.moveToFirst();\n      while (!c.isAfterLast()) {\n        CurrencyPair cp = ConvertUtils.cursorToCurrencyPair(c);\n        result.put(cp.getSecondCurrency().getId(), cp);\n        c.moveToNext();\n      }\n      c.close();\n      return result;\n    } finally {\n      close();\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1444, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 66, "focalAPIEnd": 91, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RudolfWeeber/eyes-free/tree/master/trunk/documentation/RockLockTutorial/RockLock_04/src/com/marvin/rocklock/TagStructuredSongPicker.java", "rawCode": "  private boolean restoreFromPrefs(SharedPreferences prefs) {\n    musicCursor.moveToFirst();\n    currentArtist = prefs.getString(PREF_ARTIST, \"\");\n    currentAlbum = prefs.getString(PREF_ALBUM, \"\");\n    currentTrack = prefs.getString(PREF_TRACK, \"\");\n    while (musicCursor.moveToNext()) {\n      if (musicCursor.getString(ARTIST).equals(currentArtist)\n          && musicCursor.getString(ALBUM).equals(currentAlbum)\n          && musicCursor.getString(TRACK).equals(currentTrack)) {\n        return true;\n      }\n    }\n    return false;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1445, "initialization": ["Cursor cursor = query(Uri,String[],*,*,*)", "Cursor cursor = query(Uri,String[],*,*,*)"], "initializationStart": [1567, 1694], "initializationEnd": [1612, 1741], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null&&cursor.getCount()==1", "guardType": "IF {", "guardExpressionStart": 1778, "guardExpressionEnd": 1823, "guardBlockStart": 1778, "guardBlockEnd": 1976, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 1838, "focalAPIEnd": 1858, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.close()"], "useStart": [1879, 2041], "useEnd": [1898, 2055], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 1987, "finallyExpressionEnd": 1995, "finallyBlockStart": 1987, "finallyBlockEnd": 2078, "cleanUpCallStart": [2041], "cleanUpCallEnd": [2055], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/media/java/android/media/Ringtone.java", "rawCode": "  private static String getTitle(Context context, Uri uri, boolean followSettingsUri) {\n    Cursor cursor = null;\n    ContentResolver res = context.getContentResolver();\n\n    String title = null;\n\n    if (uri != null) {\n      String authority = uri.getAuthority();\n\n      if (Settings.AUTHORITY.equals(authority)) {\n        if (followSettingsUri) {\n          Uri actualUri =\n              RingtoneManager.getActualDefaultRingtoneUri(\n                  context, RingtoneManager.getDefaultType(uri));\n          String actualTitle = getTitle(context, actualUri, false);\n          title =\n              context.getString(\n                  com.android.internal.R.string.ringtone_default_with_actual, actualTitle);\n        }\n      } else if (RingtoneManager.THEME_AUTHORITY.equals(authority)) {\n        Uri themes = Uri.parse(\"content://com.tmobile.thememanager.themes/themes\");\n        title =\n            stringForQuery(\n                res.query(\n                    themes,\n                    new String[] {\"ringtone_name\"},\n                    \"ringtone_uri = ?\",\n                    new String[] {uri.toString()},\n                    null));\n        if (title == null) {\n          title =\n              stringForQuery(\n                  res.query(\n                      themes,\n                      new String[] {\"notif_ringtone_name\"},\n                      \"notif_ringtone_uri = ?\",\n                      new String[] {uri.toString()},\n                      null));\n        }\n      } else {\n        if (DrmStore.AUTHORITY.equals(authority)) {\n          cursor = res.query(uri, DRM_COLUMNS, null, null, null);\n        } else if (MediaStore.AUTHORITY.equals(authority)) {\n          cursor = res.query(uri, MEDIA_COLUMNS, null, null, null);\n        }\n\n        try {\n          if (cursor != null && cursor.getCount() == 1) {\n            cursor.moveToFirst();\n            return cursor.getString(2);\n          } else {\n            title = uri.getLastPathSegment();\n          }\n        } finally {\n          if (cursor != null) {\n            cursor.close();\n          }\n        }\n      }\n    }\n\n    if (title == null) {\n      title = context.getString(com.android.internal.R.string.ringtone_unknown);\n\n      if (title == null) {\n        title = \"\";\n      }\n    }\n\n    return title;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1446, "initialization": ["Cursor cursor = rawQuery(*,*)"], "initializationStart": [606], "initializationEnd": [641], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.close()"], "configurationStart": [679], "configurationEnd": [689], "guardCondition": "!(cursor.getCount()==0)", "guardType": "IF {", "guardExpressionStart": 647, "guardExpressionEnd": 670, "guardBlockStart": 647, "guardBlockEnd": 818, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 823, "focalAPIEnd": 839, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.close()", "cursor.close()"], "useStart": [865, 919, 1303], "useEnd": [880, 929, 1313], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dimagi/rapidandroid/tree/master/rapidandroid/org.rapidandroid/src/org/rapidandroid/data/controller/ParsedDataReporter.java", "rawCode": "  public static synchronized Date getOldestMessageDate(SmsDbHelper mHelper, Form f) {\n    // TODO Auto-generated method stub\n    StringBuilder query = new StringBuilder();\n    query.append(\"select min(rapidandroid_message.time) \");\n    query.append(\" from \" + RapidSmsDBConstants.FormData.TABLE_PREFIX + f.getPrefix());\n    query.append(\" join rapidandroid_message on (\");\n    query.append(RapidSmsDBConstants.FormData.TABLE_PREFIX + f.getPrefix());\n    query.append(\".message_id = rapidandroid_message._id\");\n    query.append(\") \");\n\n    SQLiteDatabase db = mHelper.getReadableDatabase();\n    Cursor cr = db.rawQuery(query.toString(), null);\n    if (cr.getCount() == 0) {\n      cr.close();\n      db.close();\n      // this is the caller's responsibility\n      // mHelper.close();\n      return Constants.NULLDATE;\n    }\n    cr.moveToFirst();\n    String dateString = cr.getString(0);\n\n    if (dateString == null) {\n      cr.close();\n      db.close();\n      // this is the caller's responsibility\n      // mHelper.close();\n      return Constants.NULLDATE;\n    }\n\n    Date ret = new Date();\n    try {\n      ret = Message.SQLDateFormatter.parse(dateString);\n    } catch (ParseException e) {\n      // TODO Auto-generated catch block\n\n      e.printStackTrace();\n      try {\n        if (cr != null) {\n          cr.close();\n        }\n        if (db != null) {\n          db.close();\n        }\n        if (mHelper != null) {\n          // this is the caller's responsibility\n          // mHelper.close();\n        }\n      } catch (Exception ex2) {\n\n      }\n    }\n    cr.close();\n    db.close();\n    // this is the caller's responsibility\n    // mHelper.close();\n    return ret;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1447, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [2539], "initializationEnd": [2559], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 2838, "focalAPIEnd": 2858, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()", "cursor.moveToFirst()", "cursor.getString(int)", "cursor.close()"], "useStart": [4412, 4932, 5105, 6108], "useEnd": [4426, 4952, 5124, 6122], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/doits/Sparse-RSS/tree/master/src/de/shandschuh/sparserss/RSSOverview.java", "rawCode": "  @SuppressWarnings(\"deprecation\")\n  @Override\n  public boolean onMenuItemSelected(int featureId, final MenuItem item) {\n    setFeedSortEnabled(false);\n    switch (item.getItemId()) {\n      case R.id.menu_addfeed:\n        {\n          startActivity(new Intent(Intent.ACTION_INSERT).setData(FeedData.FeedColumns.CONTENT_URI));\n          break;\n        }\n      case R.id.menu_refresh:\n        {\n          new Thread() {\n            public void run() {\n              sendBroadcast(\n                  new Intent(Strings.ACTION_REFRESHFEEDS)\n                      .putExtra(\n                          Strings.SETTINGS_OVERRIDEWIFIONLY,\n                          PreferenceManager.getDefaultSharedPreferences(RSSOverview.this)\n                              .getBoolean(Strings.SETTINGS_OVERRIDEWIFIONLY, false)));\n            }\n          }.start();\n          break;\n        }\n      case CONTEXTMENU_EDIT_ID:\n        {\n          startActivity(\n              new Intent(Intent.ACTION_EDIT)\n                  .setData(\n                      FeedData.FeedColumns.CONTENT_URI(\n                          ((AdapterView.AdapterContextMenuInfo) item.getMenuInfo()).id)));\n          break;\n        }\n      case CONTEXTMENU_REFRESH_ID:\n        {\n          final String id =\n              Long.toString(((AdapterView.AdapterContextMenuInfo) item.getMenuInfo()).id);\n\n          ConnectivityManager connectivityManager =\n              (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\n          final NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n\n          if (networkInfo != null\n              && networkInfo.getState()\n                  == NetworkInfo.State\n                      .CONNECTED) { // since we have acquired the networkInfo, we use it for basic\n                                    // checks\n            final Intent intent =\n                new Intent(Strings.ACTION_REFRESHFEEDS).putExtra(Strings.FEEDID, id);\n\n            final Thread thread =\n                new Thread() {\n                  public void run() {\n                    sendBroadcast(intent);\n                  }\n                };\n\n            if (networkInfo.getType() == ConnectivityManager.TYPE_WIFI\n                || PreferenceManager.getDefaultSharedPreferences(RSSOverview.this)\n                    .getBoolean(Strings.SETTINGS_OVERRIDEWIFIONLY, false)) {\n              intent.putExtra(Strings.SETTINGS_OVERRIDEWIFIONLY, true);\n              thread.start();\n            } else {\n              Cursor cursor =\n                  getContentResolver()\n                      .query(\n                          FeedData.FeedColumns.CONTENT_URI(id),\n                          new String[] {FeedData.FeedColumns.WIFIONLY},\n                          null,\n                          null,\n                          null);\n\n              cursor.moveToFirst();\n\n              if (cursor.isNull(0) || cursor.getInt(0) == 0) {\n                thread.start();\n              } else {\n                Builder builder = new AlertDialog.Builder(this);\n\n                builder.setIcon(android.R.drawable.ic_dialog_alert);\n                builder.setTitle(R.string.dialog_hint);\n                builder.setMessage(R.string.question_refreshwowifi);\n                builder.setPositiveButton(\n                    android.R.string.yes,\n                    new DialogInterface.OnClickListener() {\n                      public void onClick(DialogInterface dialog, int which) {\n                        intent.putExtra(Strings.SETTINGS_OVERRIDEWIFIONLY, true);\n                        thread.start();\n                      }\n                    });\n                builder.setNeutralButton(\n                    R.string.button_alwaysokforall,\n                    new DialogInterface.OnClickListener() {\n                      public void onClick(DialogInterface dialog, int which) {\n                        PreferenceManager.getDefaultSharedPreferences(RSSOverview.this)\n                            .edit()\n                            .putBoolean(Strings.SETTINGS_OVERRIDEWIFIONLY, true)\n                            .commit();\n                        intent.putExtra(Strings.SETTINGS_OVERRIDEWIFIONLY, true);\n                        thread.start();\n                      }\n                    });\n                builder.setNegativeButton(android.R.string.no, null);\n                builder.show();\n              }\n              cursor.close();\n            }\n          }\n          break;\n        }\n      case CONTEXTMENU_DELETE_ID:\n        {\n          String id = Long.toString(((AdapterView.AdapterContextMenuInfo) item.getMenuInfo()).id);\n\n          Cursor cursor =\n              getContentResolver()\n                  .query(\n                      FeedData.FeedColumns.CONTENT_URI(id),\n                      new String[] {FeedData.FeedColumns.NAME},\n                      null,\n                      null,\n                      null);\n\n          cursor.moveToFirst();\n\n          Builder builder = new AlertDialog.Builder(this);\n\n          builder.setIcon(android.R.drawable.ic_dialog_alert);\n          builder.setTitle(cursor.getString(0));\n          builder.setMessage(R.string.question_deletefeed);\n          builder.setPositiveButton(\n              android.R.string.yes,\n              new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                  new Thread() {\n                    public void run() {\n                      getContentResolver()\n                          .delete(\n                              FeedData.FeedColumns.CONTENT_URI(\n                                  Long.toString(\n                                      ((AdapterView.AdapterContextMenuInfo) item.getMenuInfo())\n                                          .id)),\n                              null,\n                              null);\n                      sendBroadcast(new Intent(Strings.ACTION_UPDATEWIDGET));\n                    }\n                  }.start();\n                }\n              });\n          builder.setNegativeButton(android.R.string.no, null);\n          cursor.close();\n          builder.show();\n          break;\n        }\n      case CONTEXTMENU_MARKASREAD_ID:\n        {\n          new Thread() {\n            public void run() {\n              String id =\n                  Long.toString(((AdapterView.AdapterContextMenuInfo) item.getMenuInfo()).id);\n\n              if (getContentResolver()\n                      .update(\n                          FeedData.EntryColumns.CONTENT_URI(id),\n                          getReadContentValues(),\n                          new StringBuilder(FeedData.EntryColumns.READDATE)\n                              .append(Strings.DB_ISNULL)\n                              .toString(),\n                          null)\n                  > 0) {\n                getContentResolver().notifyChange(FeedData.FeedColumns.CONTENT_URI(id), null);\n              }\n            }\n          }.start();\n          break;\n        }\n      case CONTEXTMENU_MARKASUNREAD_ID:\n        {\n          new Thread() {\n            public void run() {\n              String id =\n                  Long.toString(((AdapterView.AdapterContextMenuInfo) item.getMenuInfo()).id);\n\n              if (getContentResolver()\n                      .update(\n                          FeedData.EntryColumns.CONTENT_URI(id),\n                          getUnreadContentValues(),\n                          null,\n                          null)\n                  > 0) {\n                getContentResolver().notifyChange(FeedData.FeedColumns.CONTENT_URI(id), null);\n                ;\n              }\n            }\n          }.start();\n          break;\n        }\n      case CONTEXTMENU_SETTINGS_ID:\n        {\n          startActivity(\n              new Intent(this, FeedPrefsActivity.class)\n                  .putExtra(\n                      FeedData.FeedColumns._ID,\n                      Long.toString(((AdapterView.AdapterContextMenuInfo) item.getMenuInfo()).id)));\n          break;\n        }\n      case CONTEXTMENU_DELETEREAD_ID:\n        {\n          new Thread() {\n            public void run() {\n              String id =\n                  Long.toString(((AdapterView.AdapterContextMenuInfo) item.getMenuInfo()).id);\n\n              Uri uri = FeedData.EntryColumns.CONTENT_URI(id);\n\n              String selection =\n                  Strings.READDATE_GREATERZERO\n                      + Strings.DB_AND\n                      + \" (\"\n                      + Strings.DB_EXCUDEFAVORITE\n                      + \")\";\n\n              FeedData.deletePicturesOfFeed(RSSOverview.this, uri, selection);\n              if (getContentResolver().delete(uri, selection, null) > 0) {\n                getContentResolver().notifyChange(FeedData.FeedColumns.CONTENT_URI(id), null);\n              }\n            }\n          }.start();\n          break;\n        }\n      case CONTEXTMENU_DELETEALLENTRIES_ID:\n        {\n          showDeleteAllEntriesQuestion(\n              this,\n              FeedData.EntryColumns.CONTENT_URI(\n                  Long.toString(((AdapterView.AdapterContextMenuInfo) item.getMenuInfo()).id)));\n          break;\n        }\n      case CONTEXTMENU_RESETUPDATEDATE_ID:\n        {\n          ContentValues values = new ContentValues();\n\n          values.put(FeedData.FeedColumns.LASTUPDATE, 0);\n          values.put(FeedData.FeedColumns.REALLASTUPDATE, 0);\n          getContentResolver()\n              .update(\n                  FeedData.FeedColumns.CONTENT_URI(\n                      Long.toString(((AdapterView.AdapterContextMenuInfo) item.getMenuInfo()).id)),\n                  values,\n                  null,\n                  null);\n          break;\n        }\n\n      case R.id.menu_settings:\n        {\n          startActivityForResult(\n              new Intent(this, ApplicationPreferencesActivity.class),\n              ACTIVITY_APPLICATIONPREFERENCES_ID);\n          break;\n        }\n      case R.id.menu_allread:\n        {\n          new Thread() {\n            public void run() {\n              if (getContentResolver()\n                      .update(\n                          FeedData.EntryColumns.CONTENT_URI,\n                          getReadContentValues(),\n                          new StringBuilder(FeedData.EntryColumns.READDATE)\n                              .append(Strings.DB_ISNULL)\n                              .toString(),\n                          null)\n                  > 0) {\n                getContentResolver().notifyChange(FeedData.FeedColumns.CONTENT_URI, null);\n              }\n            }\n          }.start();\n          break;\n        }\n      case R.id.menu_about:\n        {\n          showDialog(DIALOG_ABOUT);\n          break;\n        }\n      case R.id.menu_import:\n        {\n          if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)\n              || Environment.getExternalStorageState()\n                  .equals(Environment.MEDIA_MOUNTED_READ_ONLY)) {\n            final AlertDialog.Builder builder = new AlertDialog.Builder(this);\n\n            builder.setTitle(R.string.select_file);\n\n            try {\n              final String[] fileNames =\n                  Environment.getExternalStorageDirectory()\n                      .list(\n                          new FilenameFilter() {\n                            public boolean accept(File dir, String filename) {\n                              return new File(dir, filename).isFile();\n                            }\n                          });\n              builder.setItems(\n                  fileNames,\n                  new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                      try {\n                        OPML.importFromFile(\n                            new StringBuilder(Environment.getExternalStorageDirectory().toString())\n                                .append(File.separator)\n                                .append(fileNames[which])\n                                .toString(),\n                            RSSOverview.this);\n                      } catch (Exception e) {\n                        showDialog(DIALOG_ERROR_FEEDIMPORT);\n                      }\n                    }\n                  });\n              builder.show();\n            } catch (Exception e) {\n              showDialog(DIALOG_ERROR_FEEDIMPORT);\n            }\n          } else {\n            showDialog(DIALOG_ERROR_EXTERNALSTORAGENOTAVAILABLE);\n          }\n\n          break;\n        }\n      case R.id.menu_export:\n        {\n          if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)\n              || Environment.getExternalStorageState()\n                  .equals(Environment.MEDIA_MOUNTED_READ_ONLY)) {\n            try {\n              String filename =\n                  new StringBuilder(Environment.getExternalStorageDirectory().toString())\n                      .append(\"/sparse_rss_\")\n                      .append(System.currentTimeMillis())\n                      .append(\".opml\")\n                      .toString();\n\n              OPML.exportToFile(filename, this);\n              Toast.makeText(\n                      this,\n                      String.format(getString(R.string.message_exportedto), filename),\n                      Toast.LENGTH_LONG)\n                  .show();\n            } catch (Exception e) {\n              showDialog(DIALOG_ERROR_FEEDEXPORT);\n            }\n          } else {\n            showDialog(DIALOG_ERROR_EXTERNALSTORAGENOTAVAILABLE);\n          }\n          break;\n        }\n      case R.id.menu_enablefeedsort:\n        {\n          setFeedSortEnabled(true);\n          break;\n        }\n      case R.id.menu_deleteread:\n        {\n          FeedData.deletePicturesOfFeedAsync(\n              this, FeedData.EntryColumns.CONTENT_URI, Strings.READDATE_GREATERZERO);\n          getContentResolver()\n              .delete(FeedData.EntryColumns.CONTENT_URI, Strings.READDATE_GREATERZERO, null);\n          ((RSSOverviewListAdapter) getListAdapter()).notifyDataSetChanged();\n          break;\n        }\n      case R.id.menu_deleteallentries:\n        {\n          showDeleteAllEntriesQuestion(this, FeedData.EntryColumns.CONTENT_URI);\n          break;\n        }\n      case R.id.menu_disablefeedsort:\n        {\n          // do nothing as the feed sort gets disabled anyway\n          break;\n        }\n    }\n    return true;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1448, "initialization": ["Cursor cursor = query(String,*,String,*,*,*,*)"], "initializationStart": [274], "initializationEnd": [336], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [380], "configurationEnd": [392], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 399, "focalAPIEnd": 414, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndexOrThrow(String)", "cursor.getString(int)"], "useStart": [447, 435], "useEnd": [478, 479], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/tests/coretests/src/android/database/DatabaseGeneralTest.java", "rawCode": "  @MediumTest\n  public void testUpdate() throws Exception {\n    populateDefaultTable();\n\n    ContentValues values = new ContentValues(1);\n    values.put(\"data\", \"this is an updated test\");\n    assertEquals(1, mDatabase.update(\"test\", values, \"_id=1\", null));\n    Cursor c = mDatabase.query(\"test\", null, \"_id=1\", null, null, null, null);\n    assertNotNull(c);\n    assertEquals(1, c.getCount());\n    c.moveToFirst();\n    String value = c.getString(c.getColumnIndexOrThrow(\"data\"));\n    assertEquals(\"this is an updated test\", value);\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1449, "initialization": ["Cursor cursor = getActivity()"], "initializationStart": [110], "initializationEnd": [123], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 285, "focalAPIEnd": 300, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.close()"], "useStart": [337, 325, 389], "useEnd": [382, 383, 398], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SINTEF-9012/sensapp-android/tree/master/sensappdroid-main/src/main/java/org/sensapp/android/sensappdroid/fragments/GraphsListFragment.java", "rawCode": "  @Override\n  public void onListItemClick(ListView l, View v, int position, long id) {\n    Cursor c =\n        getActivity()\n            .getContentResolver()\n            .query(Uri.parse(SensAppContract.Graph.CONTENT_URI + \"/\" + id), null, null, null, null);\n    // Only one graph\n    c.moveToFirst();\n    String graphName = c.getString(c.getColumnIndex(SensAppContract.Graph.TITLE));\n    c.close();\n    graphSelectedListener.onGraphSelected(\n        Uri.parse(SensAppContract.Graph.CONTENT_URI + \"/\" + id + \"/\" + graphName));\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1450, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getString(int)"], "configurationStart": [175], "configurationEnd": [208], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 417, "focalAPIEnd": 443, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToLast()", "cursor.getString(int)", "cursor.getString(int)"], "useStart": [553, 830, 898], "useEnd": [578, 862, 931], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RudolfWeeber/eyes-free/tree/master/trunk/apps/RockLock/src/com/marvin/rocklock/navigation/SongPicker.java", "rawCode": "  /**\n   * Moves music cursor to next valid position\n   *\n   * @return true if we looped in this move\n   */\n  public boolean navigateTracks(int dir) {\n    String currentKey = mMusicCursor.getString(TITLE_KEY);\n    boolean valid = true;\n    boolean hasLooped = false;\n    do {\n\n      boolean success = true;\n      // Move according to direction\n      if (dir > 0) {\n        if (!mMusicCursor.moveToNext()) {\n          mMusicCursor.moveToFirst();\n          success = false;\n        }\n      } else {\n        if (!mMusicCursor.moveToPrevious()) {\n          mMusicCursor.moveToLast();\n          success = false;\n        }\n      }\n      // Make sure we are not looping in search of valid files\n      if (!success) {\n        if (hasLooped) {\n          return false;\n        }\n        hasLooped = true;\n      }\n      File test = new File(mMusicCursor.getString(FILEPATH));\n      valid = !currentKey.equals(mMusicCursor.getString(TITLE_KEY)) && test.exists();\n    } while (!valid);\n    return !hasLooped;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1451, "initialization": ["Cursor cursor = DBHandler.getReadableDatabase()"], "initializationStart": [64], "initializationEnd": [108], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 199, "guardExpressionEnd": 220, "guardBlockStart": 199, "guardBlockEnd": 304, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 229, "focalAPIEnd": 244, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getString(int)"], "useStart": [271, 259], "useEnd": [296, 297], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/noamtz/SyncMe/tree/master/Coupling/src/coupling/app/data/DALShopListOverview.java", "rawCode": "  public String retrieve(Long localId) {\n    Cursor c =\n        dbHandler\n            .getReadableDatabase()\n            .rawQuery(\"SELECT * FROM ShopListOverview WHERE _id = \" + localId, null);\n    if (c.getCount() > 0) {\n      c.moveToFirst();\n      return c.getString(c.getColumnIndex(\"Title\"));\n    }\n    return null;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1452, "initialization": ["Cursor cursor = query(String,String[],*,*,*,*,*)"], "initializationStart": [515], "initializationEnd": [628], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 634, "focalAPIEnd": 654, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursorToRecipe(cursor)", "cursor.close()"], "useStart": [679, 707], "useEnd": [701, 721], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kevinschaul/PlanMyMeal/tree/master/src/com/csci5115/group2/planmymeal/database/DataSourceManager.java", "rawCode": "  public Recipe updateRecipe(\n      long id, String name, double time, String description, Integer numServings) {\n    ContentValues values = new ContentValues();\n    values.put(COLUMN_NAME, name);\n    values.put(COLUMN_TIME, time);\n    values.put(COLUMN_DESCRIPTION, description);\n    values.put(COLUMN_RECIPE_NUM_SERVINGS, numServings);\n    values.put(COLUMN_USER, 1);\n    values.put(COLUMN_CC, 0);\n    long insertId = database.update(TABLE_RECIPE, values, COLUMN_ID + \"=\" + id, null);\n    Cursor cursor =\n        database.query(\n            TABLE_RECIPE, allRecipeColumns, COLUMN_ID + \" = \" + insertId, null, null, null, null);\n    cursor.moveToFirst();\n    Recipe newRecipe = cursorToRecipe(cursor);\n    cursor.close();\n    return newRecipe;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1453, "initialization": ["Cursor cursor = query(Uri,*,*,*,*)"], "initializationStart": [354], "initializationEnd": [408], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [427], "configurationEnd": [444], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 455, "focalAPIEnd": 475, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.close()"], "useStart": [513, 496, 590, 573, 720], "useEnd": [552, 553, 632, 633, 734], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Guillermoo/unutopia-android/tree/master/erralberto/08-MyContentProviderTest/src/org/francho/unutopia/mycontenterprovider/test/MyContentProviderTest.java", "rawCode": "  public void testSelectOne() {\n    ContentValues values = new ContentValues();\n    values.put(MembersContract.UsersTable.USERNAME, \"Clark Ken\");\n    values.put(MembersContract.UsersTable.EMAIL, \"super@man.com\");\n\n    Uri uri = UsersTable.getUri();\n\n    Uri newUri = mContentResolver.insert(uri, values);\n\n    assertNotNull(newUri);\n\n    Cursor cursor = mContentResolver.query(newUri, null, null, null, null);\n    assertEquals(cursor.getCount(), 1);\n\n    cursor.moveToFirst();\n    String email = cursor.getString(cursor.getColumnIndex(UsersTable.EMAIL));\n    String name = cursor.getString(cursor.getColumnIndex(UsersTable.USERNAME));\n\n    assertEquals(\"Clark Ken\", name);\n    assertEquals(\"super@man.com\", email);\n\n    cursor.close();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1454, "initialization": ["Cursor cursor = buildCombinedMailboxes(Context,*)"], "initializationStart": [2109], "initializationEnd": [2185], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [2232], "configurationEnd": [2249], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 2319, "focalAPIEnd": 2339, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertTrue(result)", "checkSpecialMailboxRow(cursor,*,*,int)", "cursor.moveToNext()", "checkSpecialMailboxRow(cursor,*,*,int)", "cursor.moveToNext()", "checkSpecialMailboxRow(cursor,*,*,int)", "cursor.moveToNext()", "checkSpecialMailboxRow(cursor,*,*,int)"], "useStart": [2308, 2346, 2491, 2517, 2662, 2688, 2837, 2863], "useEnd": [2340, 2426, 2510, 2598, 2681, 2768, 2856, 2943], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Email/tree/master/tests/src/com/android/email/activity/MailboxFragmentAdapterTest.java", "rawCode": "  public void testBuildCombinedMailboxes() {\n    final Context c = mMockContext;\n\n    // Prepare test data\n    Account a1 = ProviderTestUtils.setupAccount(\"a1\", true, c);\n    Account a2 = ProviderTestUtils.setupAccount(\"a2\", true, c);\n    Account a3 = ProviderTestUtils.setupAccount(\"a3\", true, c);\n\n    Mailbox b1i = ProviderTestUtils.setupMailbox(\"box1i\", a1.mId, true, c, Mailbox.TYPE_INBOX);\n    Mailbox b2i = ProviderTestUtils.setupMailbox(\"box2i\", a2.mId, true, c, Mailbox.TYPE_INBOX);\n    Mailbox b3i = ProviderTestUtils.setupMailbox(\"box3i\", a3.mId, true, c, Mailbox.TYPE_INBOX);\n    Mailbox b1o = ProviderTestUtils.setupMailbox(\"box1i\", a1.mId, true, c, Mailbox.TYPE_OUTBOX);\n    Mailbox b2o = ProviderTestUtils.setupMailbox(\"box2i\", a2.mId, true, c, Mailbox.TYPE_OUTBOX);\n    Mailbox b1d = ProviderTestUtils.setupMailbox(\"box1d\", a1.mId, true, c, Mailbox.TYPE_DRAFTS);\n    Mailbox b2d = ProviderTestUtils.setupMailbox(\"box2d\", a2.mId, true, c, Mailbox.TYPE_DRAFTS);\n    Mailbox b1t = ProviderTestUtils.setupMailbox(\"box1t\", a1.mId, true, c, Mailbox.TYPE_TRASH);\n    Mailbox b2t = ProviderTestUtils.setupMailbox(\"box2t\", a2.mId, true, c, Mailbox.TYPE_TRASH);\n\n    createMessage(c, b1i, false, false, Message.FLAG_LOADED_COMPLETE);\n    createMessage(c, b2i, true, true, Message.FLAG_LOADED_COMPLETE);\n    createMessage(c, b2i, true, false, Message.FLAG_LOADED_COMPLETE);\n    // \"unloaded\" messages will not affect 'favorite' message count\n    createMessage(c, b3i, true, true, Message.FLAG_LOADED_UNLOADED);\n\n    createMessage(c, b1o, true, true, Message.FLAG_LOADED_COMPLETE);\n    createMessage(c, b2o, false, true, Message.FLAG_LOADED_COMPLETE);\n\n    createMessage(c, b1d, false, true, Message.FLAG_LOADED_COMPLETE);\n    createMessage(c, b2d, false, true, Message.FLAG_LOADED_COMPLETE);\n    createMessage(c, b2d, false, true, Message.FLAG_LOADED_COMPLETE);\n    createMessage(c, b2d, false, true, Message.FLAG_LOADED_COMPLETE);\n\n    // Starred message in trash; All Starred excludes it.\n    createMessage(c, b2t, true, true, Message.FLAG_LOADED_UNLOADED);\n\n    // Kick the method\n    Cursor cursor = MailboxFragmentAdapter.CombinedMailboxLoader.buildCombinedMailboxes(c, null);\n\n    // Check the result\n    assertEquals(4, cursor.getCount());\n\n    // Row 1 -- combined inbox (with unread count)\n    assertTrue(cursor.moveToFirst());\n    checkSpecialMailboxRow(cursor, Mailbox.QUERY_ALL_INBOXES, Mailbox.TYPE_INBOX, 2);\n\n    // Row 2 -- all starred (with total count)\n    assertTrue(cursor.moveToNext());\n    checkSpecialMailboxRow(cursor, Mailbox.QUERY_ALL_FAVORITES, Mailbox.TYPE_MAIL, 3);\n\n    // Row 3 -- all drafts (with total count)\n    assertTrue(cursor.moveToNext());\n    checkSpecialMailboxRow(cursor, Mailbox.QUERY_ALL_DRAFTS, Mailbox.TYPE_DRAFTS, 4);\n\n    // Row 4 -- combined outbox (with total count)\n    assertTrue(cursor.moveToNext());\n    checkSpecialMailboxRow(cursor, Mailbox.QUERY_ALL_OUTBOX, Mailbox.TYPE_OUTBOX, 2);\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1455, "initialization": ["Cursor cursor = query(Uri,String[],*,*,*)"], "initializationStart": [674], "initializationEnd": [717], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 725, "focalAPIEnd": 742, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.close()"], "useStart": [761, 782], "useEnd": [774, 793], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dileepbapat/music/tree/master/src/com/android/music/MusicUtils.java", "rawCode": "  public static void addToPlaylist(Context context, long[] ids, long playlistid) {\n    if (ids == null) {\n      // this shouldn't happen (the menuitems shouldn't be visible\n      // unless the selected item represents something playable\n      Log.e(\"MusicBase\", \"ListSelection null\");\n    } else {\n      int size = ids.length;\n      ContentResolver resolver = context.getContentResolver();\n      // need to determine the number of items currently in the playlist,\n      // so the play_order field can be maintained.\n      String[] cols = new String[] {\"count(*)\"};\n      Uri uri = MediaStore.Audio.Playlists.Members.getContentUri(\"external\", playlistid);\n      Cursor cur = resolver.query(uri, cols, null, null, null);\n      cur.moveToFirst();\n      int base = cur.getInt(0);\n      cur.close();\n      int numinserted = 0;\n      for (int i = 0; i < size; i += 1000) {\n        makeInsertItems(ids, i, 1000, base);\n        numinserted += resolver.bulkInsert(uri, sContentValuesCache);\n      }\n      String message =\n          context\n              .getResources()\n              .getQuantityString(R.plurals.NNNtrackstoplaylist, numinserted, numinserted);\n      Toast.makeText(context, message, Toast.LENGTH_SHORT).show();\n      // mLastPlaylistSelected = playlistid;\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1456, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [149], "initializationEnd": [582], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 590, "focalAPIEnd": 605, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursorToLong(cursor)", "cursor.moveToNext()", "cursor.close()"], "useStart": [659, 698, 728], "useEnd": [687, 712, 737], "hasFinally": 1, "cleanUpCall": ["close()"], "finallyExpressionStart": 766, "finallyExpressionEnd": 774, "finallyBlockStart": 766, "finallyBlockEnd": 796, "cleanUpCallStart": [728], "cleanUpCallEnd": [737], "url": "https://github.com/nkostyukovich/acctrip/tree/master/src/com/dzebsu/acctrip/db/datasources/StatisticsDataSource.java", "rawCode": "  public List<Long> getEventPlaces(long eventId) {\n    open();\n    try {\n      List<Long> result = new ArrayList<Long>();\n      Cursor c =\n          database.rawQuery(\n              \"select \"\n                  + EventAccContract.Operation.PLACE_ID\n                  + \" from \"\n                  + EventAccContract.Operation.TABLE_NAME\n                  + \" where \"\n                  + EventAccContract.Operation.EVENT_ID\n                  + \"=\"\n                  + eventId\n                  + \" group by \"\n                  + EventAccContract.Operation.PLACE_ID,\n              null);\n      c.moveToFirst();\n      while (!c.isAfterLast()) {\n        result.add(ConvertUtils.cursorToLong(c));\n        c.moveToNext();\n      }\n      c.close();\n      return result;\n    } finally {\n      close();\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1457, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [495], "initializationEnd": [515], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["toString()", "e(String,*)"], "tryExpressionStart": 472, "tryExpressionEnd": 476, "tryBlockStart": 472, "tryBlockEnd": 1011, "catchExpressionStart": 830, "catchExpressionEnd": 850, "catchBlockStart": 830, "catchBlockEnd": 927, "exceptionHandlingCallStart": [905, 894], "exceptionHandlingCallEnd": [917, 918], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 569, "focalAPIEnd": 589, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToFirst()", "cursor.getColumnIndexOrThrow(String)", "cursor.getLong(int)", "cursor.close()"], "useStart": [631, 729, 714, 978], "useEnd": [651, 775, 776, 992], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 928, "finallyExpressionEnd": 936, "finallyBlockStart": 928, "finallyBlockEnd": 1011, "cleanUpCallStart": [978], "cleanUpCallEnd": [992], "url": "https://github.com/xunroudabing/DaBing/tree/master/WeiXinEmoj/src/com/dabing/emoj/service/EmojScanService.java", "rawCode": "    /**\n     * 获取文件夹下的第一幅照片的id\n     *\n     * @param path\n     * @return\n     */\n    protected long getThumbId(String path) {\n      Uri uri = Media.getContentUri(\"external\");\n      String order = MediaColumns.DATE_MODIFIED + \" desc\";\n      String[] colums = {MediaColumns._ID, MediaColumns.DATA, MediaColumns.DATE_MODIFIED};\n      String where = MediaColumns.DATA + \" like ?\";\n      String[] whereArgs = {path + \"%\"};\n      Cursor cursor = null;\n      long ret = -1;\n      try {\n        cursor = getContentResolver().query(uri, colums, where, whereArgs, order);\n        cursor.moveToFirst();\n        if (cursor != null) {\n          cursor.moveToFirst();\n          if (cursor.getCount() > 0) {\n            long id = cursor.getLong(cursor.getColumnIndexOrThrow(MediaColumns._ID));\n            ret = id;\n          }\n        }\n      } catch (Exception e) {\n        // TODO: handle exception\n        Log.e(TAG, e.toString());\n      } finally {\n        if (cursor != null) {\n          cursor.close();\n        }\n      }\n      return ret;\n    }\n"}, {"dataset": "moveToFirst", "exampleID": 1458, "initialization": ["Cursor cursor = query(boolean,String,String[],*,*,*,*,*,*)"], "initializationStart": [308], "initializationEnd": [419], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndexOrThrow(String)"], "configurationStart": [482], "configurationEnd": [535], "guardCondition": "cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 426, "guardExpressionEnd": 458, "guardBlockStart": 426, "guardBlockEnd": 625, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 543, "focalAPIEnd": 569, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.close()"], "useStart": [586, 630], "useEnd": [618, 650], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/e_ui/common/src/main/java-se-android/com/funambol/storage/StringKeyValueSQLiteStore.java", "rawCode": "  /** @see StringKeyValueStore#get(java.lang.String) */\n  public String get(String key) {\n\n    String result = null;\n    if (dbStore == null) {\n      open();\n    }\n    StringBuffer where = new StringBuffer(KEY_COLUMN_NAME);\n    where.append(\"=\\\"\").append(key).append(\"\\\"\");\n    Cursor resultCursor =\n        dbStore.query(\n            true, tableName, QUERY_VALUE_COLUMN, where.toString(), null, null, null, null, null);\n\n    if (resultCursor.getCount() > 0) {\n      int colIndex = resultCursor.getColumnIndexOrThrow(VALUE_COLUMN_NAME);\n      resultCursor.moveToFirst();\n      result = resultCursor.getString(colIndex);\n    }\n    resultCursor.close();\n    return result;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1459, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 98, "focalAPIEnd": 119, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emolinablas/CoretelProject/tree/master/Coretel/src/com/android/dataframework/EntityCursor.java", "rawCode": "  @Override\n  public boolean moveToFirst() {\n    int oldPos = getPosition();\n    boolean result = mCursor.moveToFirst();\n    int newPos = getPosition();\n    onMove(oldPos, newPos);\n    return result;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1460, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [563], "initializationEnd": [610], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 617, "focalAPIEnd": 632, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndexOrThrow(String)", "cursor.getString(int)", "cursor.getColumnIndexOrThrow(String)", "cursor.getColumnIndexOrThrow(String)", "cursor.getColumnIndexOrThrow(String)", "cursor.copyStringToBuffer(int,CharArrayBuffer)", "cursor.copyStringToBuffer(int,CharArrayBuffer)", "cursor.moveToNext()", "cursor.getString(int)", "cursor.copyStringToBuffer(int,CharArrayBuffer)", "cursor.copyStringToBuffer(int,CharArrayBuffer)", "cursor.moveToNext()", "cursor.copyStringToBuffer(int,CharArrayBuffer)", "cursor.copyStringToBuffer(int,CharArrayBuffer)", "cursor.getString(int)", "cursor.close()"], "useStart": [722, 710, 774, 825, 875, 912, 1060, 1179, 1211, 1238, 1348, 1425, 1445, 1581, 1632, 1764], "useEnd": [753, 754, 805, 856, 905, 946, 1093, 1193, 1231, 1272, 1381, 1439, 1479, 1614, 1651, 1773], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/tests/AndroidTests/src/com/android/unit_tests/DatabaseGeneralTest.java", "rawCode": "  @MediumTest\n  public void testCopyString() throws Exception {\n    mDatabase.execSQL(\"CREATE TABLE guess (numi INTEGER, numf FLOAT, str TEXT);\");\n    mDatabase.execSQL(\"INSERT INTO guess (numi,numf,str) VALUES (0,0.0,'ZoomZoomZoomZoom');\");\n    mDatabase.execSQL(\"INSERT INTO guess (numi,numf,str) VALUES (2000000000,3.1415926535,'');\");\n    String chinese = \"\\u4eac\\u4ec5 \\u5c3d\\u5f84\\u60ca\";\n    String[] arr = new String[1];\n    arr[0] = chinese;\n    mDatabase.execSQL(\"INSERT INTO guess (numi,numf,str) VALUES (-32768,-1.0,?)\", arr);\n\n    Cursor c;\n\n    c = mDatabase.rawQuery(\"SELECT * FROM guess\", null);\n\n    c.moveToFirst();\n\n    CharArrayBuffer buf = new CharArrayBuffer(14);\n\n    String compareTo = c.getString(c.getColumnIndexOrThrow(\"numi\"));\n    int numiIdx = c.getColumnIndexOrThrow(\"numi\");\n    int numfIdx = c.getColumnIndexOrThrow(\"numf\");\n    int strIdx = c.getColumnIndexOrThrow(\"str\");\n\n    c.copyStringToBuffer(numiIdx, buf);\n    assertEquals(1, buf.sizeCopied);\n    assertEquals(compareTo, new String(buf.data, 0, buf.sizeCopied));\n\n    c.copyStringToBuffer(strIdx, buf);\n    assertEquals(\"ZoomZoomZoomZoom\", new String(buf.data, 0, buf.sizeCopied));\n\n    c.moveToNext();\n    compareTo = c.getString(numfIdx);\n\n    c.copyStringToBuffer(numfIdx, buf);\n    assertEquals(compareTo, new String(buf.data, 0, buf.sizeCopied));\n    c.copyStringToBuffer(strIdx, buf);\n    assertEquals(0, buf.sizeCopied);\n\n    c.moveToNext();\n    c.copyStringToBuffer(numfIdx, buf);\n    assertEquals(-1.0, Double.valueOf(new String(buf.data, 0, buf.sizeCopied)).doubleValue());\n\n    c.copyStringToBuffer(strIdx, buf);\n    compareTo = c.getString(strIdx);\n    assertEquals(chinese, compareTo);\n\n    assertEquals(chinese, new String(buf.data, 0, buf.sizeCopied));\n    c.close();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1461, "initialization": ["Cursor cursor = SQLiteDatabase.rawQuery(String,String[])"], "initializationStart": [326], "initializationEnd": [358], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 376, "guardExpressionEnd": 397, "guardBlockStart": 376, "guardBlockEnd": 582, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 408, "focalAPIEnd": 423, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.moveToNext()", "cursor.close()"], "useStart": [493, 549, 659], "useEnd": [507, 563, 668], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 589, "finallyExpressionEnd": 597, "finallyBlockStart": 589, "finallyBlockEnd": 675, "cleanUpCallStart": [659], "cleanUpCallEnd": [668], "url": "https://github.com/heskew-riotapps/WordSmash/tree/master/src/com/riotapps/word/data/WordData.java", "rawCode": "  public List<String> getMatchingWordsFromIndexArray(String[] index) {\n    List<String> matches = new ArrayList<String>();\n\n    String queryf =\n        \"select word from Word where idx IN (\" + this.makePlaceholders(index.length) + \")\";\n\n    // Logger.d(TAG, \"getMatchingWordsFromIndexArray queryf=\" + queryf);\n\n    Cursor c = database.rawQuery(queryf, index);\n    try {\n      if (c.getCount() > 0) {\n        c.moveToFirst();\n        while (c.isAfterLast() == false) {\n          String match = c.getString(0);\n          matches.add(match);\n          c.moveToNext();\n        }\n      }\n    } finally {\n      // just in case, we don't want cursor left open\n      c.close();\n    }\n\n    return matches;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1462, "initialization": ["Cursor cursor = query(*,String[],*,*,*,*,*)"], "initializationStart": [213], "initializationEnd": [286], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 294, "focalAPIEnd": 314, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "close(cursor,SQLiteDatabase)"], "useStart": [329, 373], "useEnd": [345, 390], "hasFinally": 1, "cleanUpCall": ["close(Cursor,SQLiteDatabase)"], "finallyExpressionStart": 357, "finallyExpressionEnd": 365, "finallyBlockStart": 357, "finallyBlockEnd": 397, "cleanUpCallStart": [373], "cleanUpCallEnd": [390], "url": "https://github.com/oturpe/barcode-agent-client/tree/master/plugins/com.phonegap.plugins.barcodescanner/src/android/LibraryProject/src/com/google/zxing/client/android/history/HistoryManager.java", "rawCode": "  public boolean hasHistoryItems() {\n    SQLiteOpenHelper helper = new DBHelper(activity);\n    SQLiteDatabase db = null;\n    Cursor cursor = null;\n    try {\n      db = helper.getReadableDatabase();\n      cursor = db.query(DBHelper.TABLE_NAME, COUNT_COLUMN, null, null, null, null, null);\n      cursor.moveToFirst();\n      return cursor.getInt(0) > 0;\n    } finally {\n      close(cursor, db);\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1463, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getPosition()", "cursor.getString(int)"], "configurationStart": [115, 271], "configurationEnd": [140, 300], "guardCondition": "!(cursor.moveToNext())", "guardType": "LOOP {", "guardExpressionStart": 146, "guardExpressionEnd": 178, "guardBlockStart": 146, "guardBlockEnd": 345, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 350, "focalAPIEnd": 375, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.moveToNext()", "cursor.getString(int)"], "useStart": [446, 600, 652], "useEnd": [475, 624, 681], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RudolfWeeber/eyes-free/tree/master/trunk/documentation/RockLockTutorial/RockLock_00/src/com/marvin/rocklock/TagStructuredSongPicker.java", "rawCode": "  public String goNextArtist() {\n    if (!taggedMusicAvailable) {\n      return \"\";\n    }\n    int initialPosition = musicCursor.getPosition();\n    while (musicCursor.moveToNext()) {\n      if (!musicCursor.getString(ARTIST).equals(currentArtist)) {\n        currentArtist = musicCursor.getString(ARTIST);\n        return currentArtist;\n      }\n    }\n    musicCursor.moveToFirst();\n    while (musicCursor.getPosition() < initialPosition) {\n      if (!musicCursor.getString(ARTIST).equals(currentArtist)) {\n        currentArtist = musicCursor.getString(ARTIST);\n        return currentArtist;\n      }\n      musicCursor.moveToNext();\n    }\n    currentArtist = musicCursor.getString(ARTIST);\n    return currentArtist;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1464, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getPosition()", "cursor.getString(int)", "cursor.moveToPosition(int)", "cursor.getPosition()"], "configurationStart": [116, 397, 435, 508], "configurationEnd": [141, 425, 478, 533], "guardCondition": "!(cursor.moveToNext())", "guardType": "LOOP {", "guardExpressionStart": 147, "guardExpressionEnd": 179, "guardBlockStart": 147, "guardBlockEnd": 600, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 605, "focalAPIEnd": 630, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.moveToPosition(int)", "cursor.getPosition()", "cursor.moveToNext()", "cursor.getPosition()", "cursor.getString(int)"], "useStart": [829, 943, 1016, 1109, 1165, 1233], "useEnd": [857, 986, 1041, 1133, 1190, 1261], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RudolfWeeber/eyes-free/tree/master/trunk/documentation/RockLockTutorial/RockLock_00/src/com/marvin/rocklock/TagStructuredSongPicker.java", "rawCode": "  public String peekNextTrack() {\n    if (!taggedMusicAvailable) {\n      return \"\";\n    }\n    int initialPosition = musicCursor.getPosition();\n    while (musicCursor.moveToNext()) {\n      if (musicCursor.getString(ARTIST).equals(currentArtist)\n          && musicCursor.getString(ALBUM).equals(currentAlbum)\n          && !musicCursor.getString(TRACK).equals(currentTrack)) {\n        String track = musicCursor.getString(TRACK);\n        musicCursor.moveToPosition(initialPosition);\n        Log.e(\"peek end 0\", musicCursor.getPosition() + \" \" + getCurrentSongInfo());\n        return track;\n      }\n    }\n    musicCursor.moveToFirst();\n    while (musicCursor.getPosition() < initialPosition) {\n      if (musicCursor.getString(ARTIST).equals(currentArtist)\n          && musicCursor.getString(ALBUM).equals(currentAlbum)\n          && !musicCursor.getString(TRACK).equals(currentTrack)) {\n        String track = musicCursor.getString(TRACK);\n        musicCursor.moveToPosition(initialPosition);\n        Log.e(\"peek end 1\", musicCursor.getPosition() + \" \" + getCurrentSongInfo());\n        return track;\n      }\n      musicCursor.moveToNext();\n    }\n    Log.e(\"peek end 2\", musicCursor.getPosition() + \" \" + getCurrentSongInfo());\n    return musicCursor.getString(TRACK);\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1465, "initialization": ["Cursor cursor = new QueryBuilder(*)"], "initializationStart": [75], "initializationEnd": [107], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null&&cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 139, "guardExpressionEnd": 185, "guardBlockStart": 139, "guardBlockEnd": 244, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 194, "focalAPIEnd": 215, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nurunecohack/activemtl/tree/master/ActiveMtl/src/com/nurun/activemtl/data/DbAdapter.java", "rawCode": "  public Cursor get(long rowId) throws SQLException {\n    Cursor mCursor = new QueryBuilder(getTableName()).where(rowId).request(mDb);\n    if (mCursor != null && mCursor.getCount() > 0) {\n      mCursor.moveToFirst();\n      return mCursor;\n    }\n\n    String message = \"No \" + getTableName() + \" was found in database for id \" + rowId;\n    Log.e(getClass().getSimpleName(), message);\n    throw new SQLException(message);\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1466, "initialization": ["Cursor cursor = query(*,*,*,*,*)"], "initializationStart": [1002], "initializationEnd": [1117], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [1139], "configurationEnd": [1151], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 1171, "focalAPIEnd": 1186, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getContent(cursor,*)", "cursor.moveToNext()", "getContent(cursor,*)", "cursor.close()"], "useStart": [1213, 1343, 1384, 1530], "useEnd": [1257, 1357, 1428, 1539], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 1514, "finallyExpressionEnd": 1522, "finallyBlockStart": 1514, "finallyBlockEnd": 1546, "cleanUpCallStart": [1530], "cleanUpCallEnd": [1539], "url": "https://github.com/sisbell/email/tree/master/tests/src/com/android/email/provider/ProviderTests.java", "rawCode": "  /** Test deleting attachments by message ID (using EmailContent.Attachment.MESSAGE_ID_URI) */\n  public void testDeleteAttachmentByMessageIdUri() {\n    ContentResolver mockResolver = mMockContext.getContentResolver();\n\n    // Note, we don't strictly need accounts, mailboxes or messages to run this test.\n    ProviderTestUtils.setupAttachment(1, \"a1\", 100, true, mMockContext);\n    ProviderTestUtils.setupAttachment(1, \"a2\", 200, true, mMockContext);\n    Attachment a3 = ProviderTestUtils.setupAttachment(2, \"a3\", 300, true, mMockContext);\n    Attachment a4 = ProviderTestUtils.setupAttachment(2, \"a4\", 400, true, mMockContext);\n\n    // Delete all attachments for message id=1\n    Uri uri = ContentUris.withAppendedId(Attachment.MESSAGE_ID_URI, 1);\n    mockResolver.delete(uri, null, null);\n\n    // Read back all attachments and confirm that we have the expected remaining attachments\n    // (the attachments that are set for message id=2). Note order-by size to simplify test.\n    Cursor c =\n        mockResolver.query(\n            Attachment.CONTENT_URI, Attachment.CONTENT_PROJECTION, null, null, Attachment.SIZE);\n    assertEquals(2, c.getCount());\n\n    try {\n      c.moveToFirst();\n      Attachment a3Get = EmailContent.getContent(c, Attachment.class);\n      ProviderTestUtils.assertAttachmentEqual(\"getAttachByUri-3\", a3, a3Get);\n      c.moveToNext();\n      Attachment a4Get = EmailContent.getContent(c, Attachment.class);\n      ProviderTestUtils.assertAttachmentEqual(\"getAttachByUri-4\", a4, a4Get);\n    } finally {\n      c.close();\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1467, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [101], "initializationEnd": [144], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 377, "focalAPIEnd": 396, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [449], "useEnd": [462], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 404, "finallyExpressionEnd": 412, "finallyBlockStart": 404, "finallyBlockEnd": 477, "cleanUpCallStart": [449], "cleanUpCallEnd": [462], "url": "https://github.com/BobEvans/omgpaco/tree/master/Paco/src/com/google/android/apps/paco/ExperimentProviderUtil.java", "rawCode": "  public boolean hasJoinedExperiments() {\n    Cursor query = null;\n    try {\n      query =\n          context\n              .getContentResolver()\n              .query(\n                  ExperimentColumns.JOINED_EXPERIMENTS_CONTENT_URI,\n                  new String[] {ExperimentColumns._ID},\n                  null,\n                  null,\n                  null);\n      return query.moveToFirst();\n    } finally {\n      if (query != null) {\n        query.close();\n      }\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1468, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [435], "initializationEnd": [463], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndexOrThrow(String)"], "configurationStart": [555], "configurationEnd": [613], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 507, "guardExpressionEnd": 526, "guardBlockStart": 507, "guardBlockEnd": 730, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 623, "focalAPIEnd": 643, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.close()"], "useStart": [667, 707], "useEnd": [696, 721], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TianziHou/tzPalette/tree/master/src/com/tzapps/common/utils/UriUtils.java", "rawCode": "  /**\n   * Get a uri's user-friendly display name\n   *\n   * @param context the application context\n   * @param uri the uri to query\n   * @return a user-friendly display name\n   */\n  public static String getUriDisplayName(Context context, Uri uri) {\n    String displayName = null;\n\n    String scheme = uri.getScheme();\n\n    if (scheme.startsWith(\"content\")) {\n      String[] proj = {OpenableColumns.DISPLAY_NAME};\n      Cursor cursor = context.getContentResolver().query(uri, proj, null, null, null);\n\n      if (cursor != null) {\n        int columnIndex = cursor.getColumnIndexOrThrow(OpenableColumns.DISPLAY_NAME);\n        cursor.moveToFirst();\n        displayName = cursor.getString(columnIndex);\n\n        cursor.close();\n      }\n    } else if (scheme.startsWith(\"file\")) {\n      displayName = uri.getLastPathSegment();\n    }\n\n    return displayName;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1469, "initialization": ["Cursor cursor = getAllData(SQLiteDatabase,String,*)"], "initializationStart": [899], "initializationEnd": [969], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 1058, "focalAPIEnd": 1073, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.moveToNext()", "cursor.moveToFirst()", "cursor.getString(int)", "cursor.moveToNext()"], "useStart": [1150, 1183, 1558, 1650, 1683], "useEnd": [1164, 1197, 1573, 1664, 1697], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iwabuchiken/ShoppingList/tree/master/src/sl/utils/Methods.java", "rawCode": "  public static void dlg_filterList(Activity actv) {\n    /*----------------------------\n    * Steps\n    * 1. Set up\n    * 2. Prepare data for spinners\n    * 2.1. Stores\n    * 2.2. Genres\n    * 2.3. Close db\n    * 3. Set data to adapter\n    * 4. Adapter to spinner\n    * 5. Set listeners\n    * 5.1. Touch\n    * 5.2. Click\n    * 9. Show dialog\n    ----------------------------*/\n\n    //\n    Dialog dlg = new Dialog(actv);\n\n    //\n    dlg.setContentView(R.layout.dlg_filter_list);\n\n    // Title\n    dlg.setTitle(R.string.dlg_filter_list_tv_title);\n\n    /*----------------------------\n    * 2. Prepare data for spinners\n    ----------------------------*/\n    /*----------------------------\n    * 2.1. Stores\n    ----------------------------*/\n    List<String> storeList = new ArrayList<String>();\n\n    DBUtils dbm = new DBUtils(actv);\n\n    SQLiteDatabase db = dbm.getReadableDatabase();\n\n    Cursor c = dbm.getAllData(db, \"stores\", CONS.columns_for_table_stores_with_index);\n\n    // All\n    storeList.add(actv.getString(R.string.generic_label_all));\n\n    //\n    c.moveToFirst();\n\n    for (int i = 0; i < c.getCount(); i++) {\n      //\n      storeList.add(c.getString(1));\n\n      //\n      c.moveToNext();\n    } // for (int i = 0; i < c.getCount(); i++)\n\n    /*----------------------------\n    * 2.2. Genres\n    ----------------------------*/\n    List<String> genreList = new ArrayList<String>();\n\n    c = dbm.getAllData(db, \"genres\", CONS.columns_for_table_genres_with_index);\n\n    // All\n    genreList.add(actv.getString(R.string.generic_label_all));\n\n    //\n    c.moveToFirst();\n\n    for (int i = 0; i < c.getCount(); i++) {\n      //\n      genreList.add(c.getString(1));\n\n      //\n      c.moveToNext();\n    } // for (int i = 0; i < c.getCount(); i++)\n\n    /*----------------------------\n    * 2.3. Close db\n    ----------------------------*/\n    db.close();\n\n    /*----------------------------\n    * 3. Set data to adapter\n    ----------------------------*/\n    // Stores\n    ArrayAdapter<String> adapterStore =\n        new ArrayAdapter<String>(actv, android.R.layout.simple_spinner_item, storeList);\n\n    // Stores\n    ArrayAdapter<String> adapterGenre =\n        new ArrayAdapter<String>(actv, android.R.layout.simple_spinner_item, genreList);\n\n    // Drop down view\n    adapterStore.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\n    adapterGenre.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\n    /*----------------------------\n    * 4. Adapter to spinner\n    ----------------------------*/\n    //\n    Spinner spStore = (Spinner) dlg.findViewById(R.id.dlg_filter_list_sp_store);\n    Spinner spGenre = (Spinner) dlg.findViewById(R.id.dlg_filter_list_sp_genre);\n\n    spStore.setAdapter(adapterStore);\n    spGenre.setAdapter(adapterGenre);\n\n    /*----------------------------\n    * 5. Set listeners\n    ----------------------------*/\n    /*----------------------------\n    * 5.1. Touch\n    ----------------------------*/\n    // View\n    Button btn_ok = (Button) dlg.findViewById(R.id.dlg_filter_list_bt_ok);\n    Button btn_cancel = (Button) dlg.findViewById(R.id.dlg_filter_list_bt_cancel);\n\n    // Tags\n    btn_ok.setTag(Tags.DialogTags.dlg_filter_list_ok);\n    btn_cancel.setTag(Tags.DialogTags.dlg_filter_list_cancel);\n\n    // Set\n    btn_ok.setOnTouchListener(new DialogButtonOnTouchListener(actv));\n    btn_cancel.setOnTouchListener(new DialogButtonOnTouchListener(actv));\n\n    /*----------------------------\n    * 5.2. Click\n    ----------------------------*/\n    //\n    btn_ok.setOnClickListener(new DialogButtonOnClickListener(actv, dlg));\n    btn_cancel.setOnClickListener(new DialogButtonOnClickListener(actv, dlg));\n\n    /*----------------------------\n    * 9. Show dialog\n    ----------------------------*/\n    dlg.show();\n  } // public static void dlg_filterList(Activity actv)\n"}, {"dataset": "moveToFirst", "exampleID": 1470, "initialization": ["Cursor cursor = query(Uri,*,*,*,*)"], "initializationStart": [354], "initializationEnd": [408], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [427], "configurationEnd": [444], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 455, "focalAPIEnd": 475, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.close()"], "useStart": [513, 496, 590, 573, 720], "useEnd": [552, 553, 632, 633, 734], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/francho/unutopia-android/tree/master/sergiowebo/MyContentProviderTest/src/org/francho/unutopia/mycontenterprovider/test/MyContentProviderTest.java", "rawCode": "  public void testSelectOne() {\n    ContentValues values = new ContentValues();\n    values.put(MembersContract.UsersTable.USERNAME, \"Clark Ken\");\n    values.put(MembersContract.UsersTable.EMAIL, \"super@man.com\");\n\n    Uri uri = UsersTable.getUri();\n\n    Uri newUri = mContentResolver.insert(uri, values);\n\n    assertNotNull(newUri);\n\n    Cursor cursor = mContentResolver.query(newUri, null, null, null, null);\n    assertEquals(cursor.getCount(), 1);\n\n    cursor.moveToFirst();\n    String email = cursor.getString(cursor.getColumnIndex(UsersTable.EMAIL));\n    String name = cursor.getString(cursor.getColumnIndex(UsersTable.USERNAME));\n\n    assertEquals(\"Clark Ken\", name);\n    assertEquals(\"super@man.com\", email);\n\n    cursor.close();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1471, "initialization": ["Cursor cursor = new MergeCursorWithUniqueId(Cursor[],*)"], "initializationStart": [384], "initializationEnd": [438], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndex(String)"], "configurationStart": [464], "configurationEnd": [492], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 604, "focalAPIEnd": 624, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cleanupSelected(cursor)", "MessageListAdapter.swapCursor(cursor)"], "useStart": [641, 865, 895], "useEnd": [673, 888, 922], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rsavoye/k9-mail/tree/master/src/com/fsck/k9/fragment/MessageListFragment.java", "rawCode": "  @Override\n  public void onLoadFinished(Loader<Cursor> loader, Cursor data) {\n    // Remove the \"Loading...\" view\n    mPullToRefreshView.setEmptyView(null);\n\n    // Enable pull-to-refresh if allowed\n    if (isPullToRefreshAllowed()) {\n      setPullToRefreshEnabled(true);\n    }\n\n    Cursor cursor;\n    if (mCursors.length > 1) {\n      mCursors[loader.getId()] = data;\n      cursor = new MergeCursorWithUniqueId(mCursors, getComparator());\n      mUniqueIdColumn = cursor.getColumnIndex(\"_id\");\n    } else {\n      cursor = data;\n      mUniqueIdColumn = ID_COLUMN;\n    }\n\n    if (mIsThreadDisplay) {\n      cursor.moveToFirst();\n      mTitle = cursor.getString(SUBJECT_COLUMN);\n      mTitle = Utility.stripSubject(mTitle);\n      if (StringUtils.isNullOrEmpty(mTitle)) {\n        mTitle = getString(R.string.general_no_subject);\n      }\n      refreshTitle();\n    }\n\n    cleanupSelected(cursor);\n\n    mAdapter.swapCursor(cursor);\n\n    resetActionMode();\n    computeBatchDirection();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1472, "initialization": ["Cursor cursor = new SuggestionsCursor(*)"], "initializationStart": [89], "initializationEnd": [295], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [317], "configurationEnd": [334], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 352, "focalAPIEnd": 372, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertTrue(result)", "cursor.getLong(int)", "cursor.getString(int)", "cursor.moveToNext()", "cursor.getLong(int)", "cursor.getString(int)", "cursor.moveToNext()"], "useStart": [341, 395, 471, 543, 585, 661, 734], "useEnd": [373, 444, 524, 562, 634, 714, 753], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/casidiablo/persistence/tree/master/src/test/java/com/codeslap/persistence/suggestions/SuggestionsCursorTest.java", "rawCode": "  @Test\n  public void suggestionsCursorNoDescriptionTest() {\n    Cursor cursor =\n        new SuggestionsCursor(\n            Arrays.asList(\n                new SuggestionInfo.Builder().setId(1).setText(\"Foo\").build(),\n                new SuggestionInfo.Builder().setId(2).setText(\"Bar\").build()));\n    assertEquals(2, cursor.getCount());\n    assertTrue(cursor.moveToFirst());\n    assertEquals(1, cursor.getLong(SuggestionsCursor.COLUMN_INDEX_ID));\n    assertEquals(\"Foo\", cursor.getString(SuggestionsCursor.COLUMN_INDEX_TEXT));\n\n    assertTrue(cursor.moveToNext());\n    assertEquals(2, cursor.getLong(SuggestionsCursor.COLUMN_INDEX_ID));\n    assertEquals(\"Bar\", cursor.getString(SuggestionsCursor.COLUMN_INDEX_TEXT));\n\n    assertFalse(cursor.moveToNext());\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1473, "initialization": ["Cursor cursor = MessageRecord.queryItems(int,int,Boolean)"], "initializationStart": [318], "initializationEnd": [376], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 386, "focalAPIEnd": 401, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getCount()", "cursor.getString(int)", "cursor.moveToNext()"], "useStart": [420, 750, 1058], "useEnd": [432, 778, 1072], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AndrewChanChina/ppc1/tree/master/src/com/openims/view/chat/ChatHistoryFragment.java", "rawCode": "      @Override\n      protected void onPostExecute(Exception e) {\n        if (e != null) {\n          return;\n        }\n\n        int startId;\n        if (mIsUp) {\n          startId = getFirstId();\n          startId--;\n        } else {\n          startId = getLastId();\n          startId++;\n        }\n\n        Cursor c = mMessageRecord.queryItems(startId, mItemNumPerTime, mIsUp);\n        c.moveToFirst();\n        nCount = c.getCount();\n        if (nCount == 0 || mItemNumPerTime != nCount) {\n          if (mIsUp) {\n            isEnd = true;\n          } else {\n            getKeepOnAppending().set(false);\n          }\n        }\n        for (int i = 0; i < nCount; i++) {\n          ChatMessage msg = new ChatMessage();\n          long date = Long.valueOf(c.getString(columnIndexDate));\n          msg.id = c.getInt(columnIndexId);\n          msg.jid = c.getString(columnIndexFromId);\n          msg.nickName = msg.jid + SEPARATOR + mDateFormat.format(new Date(date));\n          msg.content = c.getString(columnIndexContent);\n          addData(msg, mIsUp);\n          c.moveToNext();\n        }\n\n        if (mIsUp) {\n          pendingViewUp = null;\n        } else {\n          pendingView = null;\n        }\n        notifyDataSetChanged();\n\n        if (mIsUp) {\n          mListview.setSelection(nCount);\n        } else {\n          int n = mListview.getLastVisiblePosition() - mListview.getFirstVisiblePosition();\n          mListview.setSelection(getCount() - nCount - n);\n        }\n      }\n"}, {"dataset": "moveToFirst", "exampleID": 1474, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [173], "initializationEnd": [199], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [263], "configurationEnd": [275], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 206, "guardExpressionEnd": 220, "guardBlockStart": 206, "guardBlockEnd": 617, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 284, "focalAPIEnd": 299, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getInt(int)", "cursor.getString(int)", "cursor.moveToNext()", "cursor.close()"], "useStart": [392, 428, 463, 501, 541, 588, 622], "useEnd": [403, 442, 477, 512, 555, 602, 631], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kimcoop/SociaList/tree/master/src/zebrafish/util/DBHelper.java", "rawCode": "  public ArrayList<CustomList> getAllLists() {\n\n    ArrayList<CustomList> lists = null;\n    String myQuery = \"SELECT * FROM list\"; // WHERE user_id = \" + ID;\n    Cursor c = db.rawQuery(myQuery, null);\n\n    if (c != null) {\n      lists = new ArrayList<CustomList>(c.getCount());\n      c.moveToFirst();\n\n      while (!c.isAfterLast()) {\n        CustomList l = new CustomList();\n        l.setID(c.getInt(0));\n        l.setCustomID(c.getString(1));\n        l.setName(c.getString(2));\n        l.setCreator(c.getInt(3));\n        l.setCreationDate(c.getString(4));\n        lists.add(l);\n        c.moveToNext();\n      }\n    }\n    c.close();\n    return lists;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1475, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [530], "initializationEnd": [848], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 854, "focalAPIEnd": 869, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Rofflarn/Gym-app/tree/master/src/com/Grupp01/gymapp/Controller/Workout/WorkoutDbHandler.java", "rawCode": "  /**\n   * This method updates the relation table between WorkoutTemplates and Exercises.\n   *\n   * @param exerciseListItemData Contains an exercise. The data in this object will be synchronized\n   *     with the corresponding tables in the database.\n   * @param workoutTemplateId The WorkoutTemplateId that the exercise in exerciseListItemData will\n   *     be connected to.\n   */\n  public void editWorkoutTemplate(\n      ExerciseListElementData exerciseListItemData, int workoutTemplateId) {\n    open();\n\n    Cursor c =\n        ourDatabase.rawQuery(\n            \"SELECT COUNT (*) FROM WorkoutTemplateExercises WHERE \"\n                + \"WorkoutTemplateId = '\"\n                + workoutTemplateId\n                + \"' \"\n                + \"AND ExerciseId = '\"\n                + exerciseListItemData.getId()\n                + \"';\",\n            null);\n    c.moveToFirst();\n\n    /*\n     * If the the ListItem is checked, add the data to the database.\n     * Otherwise remove the data from database.\n     */\n    if (exerciseListItemData.isChecked()) {\n      // Only add the data if it does not already exist.\n      if (c.getInt(0) == 0) {\n        // Add data to db\n        String tmp =\n            \"INSERT INTO WorkoutTemplateExercises \"\n                + \"(WorkoutTemplateId, ExerciseId) VALUES \"\n                + \"('\"\n                + workoutTemplateId\n                + \"', '\"\n                + exerciseListItemData.getId()\n                + \"');\";\n        ourDatabase.execSQL(tmp);\n      }\n    } else {\n      // Remove data from db\n      String tmp =\n          \"DELETE FROM WorkoutTemplateExercises WHERE WorkoutTemplateId = '\"\n              + workoutTemplateId\n              + \"' AND \"\n              + \"ExerciseId = '\"\n              + exerciseListItemData.getId()\n              + \"';\";\n      ourDatabase.execSQL(tmp);\n    }\n    close();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1476, "initialization": ["Cursor cursor = query(String,String[],*,*,*,*,*)"], "initializationStart": [104], "initializationEnd": [178], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 198, "focalAPIEnd": 218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [232], "useEnd": [246], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/core/java/android/webkit/WebViewDatabase.java", "rawCode": "  boolean hasCache() {\n    if (mCacheDatabase == null) {\n      return false;\n    }\n\n    Cursor cursor = mCacheDatabase.query(\"cache\", ID_PROJECTION, null, null, null, null, null);\n    boolean ret = cursor.moveToFirst() == true;\n    cursor.close();\n    return ret;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1477, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [173], "initializationEnd": [242], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 248, "focalAPIEnd": 268, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.moveToNext()", "cursor.close()"], "useStart": [338, 427, 458], "useEnd": [357, 446, 472], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rprieto/ThoughtFerret/tree/master/source/thoughtferret/src/com/thoughtworks/thoughtferret/integration/database/MoodTagsDao.java", "rawCode": "  public MoodTags findAll() {\n    List<MoodTag> moodTags = new ArrayList<MoodTag>();\n    SQLiteDatabase database = databaseHelper.getReadableDatabase();\n    Cursor cursor = database.rawQuery(\"select text, count, ratingSum from MoodTag\", null);\n    cursor.moveToFirst();\n    while (!cursor.isAfterLast()) {\n      MoodTag tag = new MoodTag(cursor.getString(0), cursor.getInt(1), cursor.getInt(2));\n      moodTags.add(tag);\n      cursor.moveToNext();\n    }\n    cursor.close();\n    database.close();\n    return new MoodTags(moodTags);\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1478, "initialization": ["Cursor cursor = query(*,String[],String,*,*)"], "initializationStart": [873], "initializationEnd": [1065], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null&&cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 1204, "guardExpressionEnd": 1242, "guardBlockStart": 1204, "guardBlockEnd": 1763, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 1288, "focalAPIEnd": 1305, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getLong(int)", "cursor.getString(int)", "cursor.moveToNext()", "cursor.close()"], "useStart": [1422, 1666, 1728, 1797], "useEnd": [1436, 1682, 1744, 1808], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dileepbapat/music/tree/master/src/com/android/music/MusicUtils.java", "rawCode": "  /**\n   * Fills out the given submenu with items for \"new playlist\" and any existing playlists. When the\n   * user selects an item, the application will receive PLAYLIST_SELECTED with the Uri of the\n   * selected playlist, NEW_PLAYLIST if a new playlist should be created, and QUEUE if the \"current\n   * playlist\" was selected.\n   *\n   * @param context The context to use for creating the menu items\n   * @param sub The submenu to add the items to.\n   */\n  public static void makePlaylistMenu(Context context, SubMenu sub) {\n    String[] cols = new String[] {MediaStore.Audio.Playlists._ID, MediaStore.Audio.Playlists.NAME};\n    ContentResolver resolver = context.getContentResolver();\n    if (resolver == null) {\n      System.out.println(\"resolver = null\");\n    } else {\n      String whereclause = MediaStore.Audio.Playlists.NAME + \" != ''\";\n      Cursor cur =\n          resolver.query(\n              MediaStore.Audio.Playlists.EXTERNAL_CONTENT_URI,\n              cols,\n              whereclause,\n              null,\n              MediaStore.Audio.Playlists.NAME);\n      sub.clear();\n      sub.add(1, Defs.QUEUE, 0, R.string.queue);\n      sub.add(1, Defs.NEW_PLAYLIST, 0, R.string.new_playlist);\n      if (cur != null && cur.getCount() > 0) {\n        // sub.addSeparator(1, 0);\n        cur.moveToFirst();\n        while (!cur.isAfterLast()) {\n          Intent intent = new Intent();\n          intent.putExtra(\"playlist\", cur.getLong(0));\n          // if (cur.getInt(0) == mLastPlaylistSelected) {\n          // sub.add(0, MusicBaseActivity.PLAYLIST_SELECTED, cur.getString(1)).setIntent(intent);\n          // } else {\n          sub.add(1, Defs.PLAYLIST_SELECTED, 0, cur.getString(1)).setIntent(intent);\n          // }\n          cur.moveToNext();\n        }\n      }\n      if (cur != null) {\n        cur.close();\n      }\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1479, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [134], "initializationEnd": [391], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 108, "tryExpressionEnd": 112, "tryBlockStart": 108, "tryBlockEnd": 574, "catchExpressionStart": 485, "catchExpressionEnd": 506, "catchBlockStart": 485, "catchBlockEnd": 541, "exceptionHandlingCallStart": [514], "exceptionHandlingCallEnd": [534], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 400, "focalAPIEnd": 415, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [558], "useEnd": [567], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 542, "finallyExpressionEnd": 550, "finallyBlockStart": 542, "finallyBlockEnd": 574, "cleanUpCallStart": [558], "cleanUpCallEnd": [567], "url": "https://github.com/ppalicaway/SingtelDining-Android/tree/master/src/com/singtel/ilovedeals/db/DBManager.java", "rawCode": "  public boolean isMerchantExist(MerchantInfo mInfo) {\n    boolean result = false;\n    Cursor c = null;\n    try {\n      c =\n          myDB.rawQuery(\n              \"SELECT * FROM \"\n                  + Constants.TABLE_MERCHANT\n                  + \" WHERE \"\n                  + TB_MERCHANTID\n                  + \"=\"\n                  + mInfo.getId()\n                  + \";\",\n              null);\n\n      c.moveToFirst();\n\n      if (c.getCount() > 0) {\n        result = true;\n      }\n    } catch (Exception ex) {\n      ex.printStackTrace();\n    } finally {\n      c.close();\n    }\n    return result;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1480, "initialization": ["Cursor cursor = ConexionBD.getDatabase()"], "initializationStart": [243], "initializationEnd": [280], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 538, "guardExpressionEnd": 565, "guardBlockStart": 538, "guardBlockEnd": 1090, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 576, "focalAPIEnd": 597, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)"], "useStart": [672, 654, 743, 725, 817, 799, 894, 876, 967, 949, 1042, 1024], "useEnd": [706, 707, 780, 781, 857, 858, 930, 931, 1005, 1006, 1079, 1080], "hasFinally": 1, "cleanUpCall": ["ConexionBD.close()"], "finallyExpressionStart": 1098, "finallyExpressionEnd": 1106, "finallyBlockStart": 1098, "finallyBlockEnd": 1137, "cleanUpCallStart": [1114], "cleanUpCallEnd": [1130], "url": "https://github.com/dayana7789/apprhc/tree/master/src/com/nahmens/rhcimax/database/sqliteDAO/UsuarioSqliteDao.java", "rawCode": "  @Override\n  public Usuario buscarUsuario(Context context, String idUsuario) {\n    ConexionBD conexion = new ConexionBD(context);\n    Cursor mCursor = null;\n    Usuario usu = null;\n\n    try {\n      conexion.open();\n\n      mCursor =\n          conexion\n              .getDatabase()\n              .query(\n                  DataBaseHelper.TABLA_USUARIO,\n                  null,\n                  Usuario.ID + \"= ? \",\n                  new String[] {idUsuario},\n                  null,\n                  null,\n                  null);\n\n      if (mCursor.getCount() > 0) {\n        mCursor.moveToFirst();\n        usu =\n            new Usuario(\n                mCursor.getString(mCursor.getColumnIndex(Usuario.ID)),\n                mCursor.getString(mCursor.getColumnIndex(Usuario.LOGIN)),\n                mCursor.getString(mCursor.getColumnIndex(Usuario.PASSWORD)),\n                mCursor.getString(mCursor.getColumnIndex(Usuario.SALT)),\n                mCursor.getString(mCursor.getColumnIndex(Usuario.CORREO)),\n                mCursor.getString(mCursor.getColumnIndex(Usuario.TOKEN)));\n      }\n\n    } finally {\n      conexion.close();\n    }\n\n    return usu;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1481, "initialization": ["Cursor cursor = query(String,String[],String,String[],*,*,*)"], "initializationStart": [427], "initializationEnd": [501], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 519, "focalAPIEnd": 539, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.close()"], "useStart": [574, 653], "useEnd": [590, 667], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 637, "finallyExpressionEnd": 645, "finallyBlockStart": 637, "finallyBlockEnd": 674, "cleanUpCallStart": [653], "cleanUpCallEnd": [667], "url": "https://github.com/thomasychen/andoku/tree/master/Andoku/src/com/googlecode/andoku/db/AndokuDatabase.java", "rawCode": "  public GameStatistics getStatistics(String puzzleSourceId) {\n    if (Constants.LOG_V) Log.v(TAG, \"getStatistics(\" + puzzleSourceId + \")\");\n\n    SQLiteDatabase db = openHelper.getReadableDatabase();\n\n    String[] columns = {\"COUNT(*)\", \"SUM(timer)\", \"MIN(timer)\", \"MAX(timer)\"};\n    String selection = COL_SOURCE + \"=? AND \" + COL_SOLVED + \"=1\";\n    String[] selectionArgs = new String[] {puzzleSourceId};\n    Cursor cursor = db.query(TABLE_GAMES, columns, selection, selectionArgs, null, null, null);\n    try {\n      cursor.moveToFirst();\n\n      return new GameStatistics(cursor.getInt(0), cursor.getLong(1), cursor.getLong(2));\n    } finally {\n      cursor.close();\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1482, "initialization": ["Cursor cursor = query(boolean,String,String[],*,*,*,*,*,*)"], "initializationStart": [308], "initializationEnd": [419], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndexOrThrow(String)"], "configurationStart": [482], "configurationEnd": [535], "guardCondition": "cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 426, "guardExpressionEnd": 458, "guardBlockStart": 426, "guardBlockEnd": 625, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 543, "focalAPIEnd": 569, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.close()"], "useStart": [586, 630], "useEnd": [618, 650], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/us8885/common/src/main/java-se-android/com/funambol/storage/StringKeyValueSQLiteStore.java", "rawCode": "  /** @see StringKeyValueStore#get(java.lang.String) */\n  public String get(String key) {\n\n    String result = null;\n    if (dbStore == null) {\n      open();\n    }\n    StringBuffer where = new StringBuffer(KEY_COLUMN_NAME);\n    where.append(\"=\\\"\").append(key).append(\"\\\"\");\n    Cursor resultCursor =\n        dbStore.query(\n            true, tableName, QUERY_VALUE_COLUMN, where.toString(), null, null, null, null, null);\n\n    if (resultCursor.getCount() > 0) {\n      int colIndex = resultCursor.getColumnIndexOrThrow(VALUE_COLUMN_NAME);\n      resultCursor.moveToFirst();\n      result = resultCursor.getString(colIndex);\n    }\n    resultCursor.close();\n    return result;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1483, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [200], "initializationEnd": [289], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 325, "focalAPIEnd": 344, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.close()", "cursor.moveToFirst()", "cursor.getInt(int)", "cursor.close()"], "useStart": [402, 445, 714, 793, 871], "useEnd": [417, 458, 733, 808, 884], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sniderzero/UTPRO/tree/master/UltitrackPro/src/com/appsmarttech/ut90/DBHelper_activity.java", "rawCode": "  public int[] getDaysCount(int iProgramID) {\n    int[] aryCount;\n    aryCount = new int[2];\n    SQLiteDatabase db = this.getReadableDatabase();\n    // grabbing total count\n    Cursor count =\n        db.rawQuery(\"SELECT COUNT(*) FROM DayOrderDetails WHERE ProgramID = \" + iProgramID, null);\n    // moving to first record\n    count.moveToFirst();\n    // assigning total count to an int\n    int iTotal = count.getInt(0);\n    // closing cursor\n    count.close();\n    // grabbing completed count\n    count =\n        db.rawQuery(\n            \"SELECT COUNT(*) FROM DayOrderDetails WHERE ProgramID = \"\n                + iProgramID\n                + \" AND DayCompleted != 0\",\n            null);\n    // moving to first\n    count.moveToFirst();\n    // assigning completed to an int\n    int iCompleted = count.getInt(0);\n\n    aryCount[0] = iCompleted;\n    aryCount[1] = iTotal;\n    count.close();\n    db.close();\n    return aryCount;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1484, "initialization": ["Cursor cursor = queryContact(long)"], "initializationStart": [729], "initializationEnd": [753], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 773, "focalAPIEnd": 793, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertFalse(result)", "cursor.close()", "cursor.moveToFirst()", "assertFalse(result)", "cursor.close()"], "useStart": [761, 802, 897, 885, 926], "useEnd": [794, 816, 917, 918, 940], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/classicnerd/android_packages_providers_ContactsProvider/tree/master/tests/src/com/android/providers/contacts/ContactAggregatorTest.java", "rawCode": "  public void testAggregationExceptionKeepIn() {\n    long rawContactId1 = createRawContact(ACCOUNT_1);\n    insertStructuredName(rawContactId1, \"Johnk\", \"Smithk\");\n\n    long rawContactId2 = createRawContact(ACCOUNT_2);\n    insertStructuredName(rawContactId2, \"Johnkx\", \"Smithkx\");\n\n    long contactId1 = queryContactId(rawContactId1);\n    long contactId2 = queryContactId(rawContactId2);\n\n    setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER, rawContactId1, rawContactId2);\n\n    assertAggregated(rawContactId1, rawContactId2, \"Johnkx Smithkx\");\n\n    // Assert that the empty aggregate got removed\n    long newContactId1 = queryContactId(rawContactId1);\n    if (contactId1 != newContactId1) {\n      Cursor cursor = queryContact(contactId1);\n      assertFalse(cursor.moveToFirst());\n      cursor.close();\n    } else {\n      Cursor cursor = queryContact(contactId2);\n      assertFalse(cursor.moveToFirst());\n      cursor.close();\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1485, "initialization": ["Cursor cursor = query(Uri,*,*,*,*)"], "initializationStart": [186], "initializationEnd": [242], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 250, "guardExpressionEnd": 269, "guardBlockStart": 250, "guardBlockEnd": 425, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 296, "focalAPIEnd": 316, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.close()"], "useStart": [334, 392], "useEnd": [360, 406], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 372, "finallyExpressionEnd": 380, "finallyBlockStart": 372, "finallyBlockEnd": 417, "cleanUpCallStart": [392], "cleanUpCallEnd": [406], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/provider/src/android/provider/cts/ContactsContract_TestDataBuilder.java", "rawCode": "    public long getId() throws Exception {\n      if (mId != -1) {\n        return mId;\n      }\n\n      assertNotNull(\"Row has not be inserted or loaded yet\", mUri);\n\n      Cursor cursor = mProvider.query(mUri, IdQuery.COLUMNS, null, null, null);\n      if (cursor != null) {\n        try {\n          cursor.moveToFirst();\n          mId = cursor.getInt(IdQuery._ID);\n        } finally {\n          cursor.close();\n        }\n      }\n      assertTrue(\"Could not obtain _ID for URI: \" + mUri, mId != -1);\n      return mId;\n    }\n"}, {"dataset": "moveToFirst", "exampleID": 1486, "initialization": ["Cursor cursor = getAllData(SQLiteDatabase,String,*)"], "initializationStart": [723], "initializationEnd": [793], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 1015, "focalAPIEnd": 1030, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.moveToNext()"], "useStart": [1108, 1132], "useEnd": [1122, 1146], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iwabuchiken/ShoppingList/tree/master/src/sl/utils/Methods_dlg.java", "rawCode": "  private static void case_tab_itemList__setStoreName(ShoppingItem si, Dialog dlg, Activity actv) {\n    // TODO Auto-generated method stub\n    // Resource =>\n    // http://www.java2s.com/Open-Source/Android/Samples/techbooster/org/jpn/techbooster/sample/spinner/SpinnerActivity.java.htm\n    Spinner sp_store_name = (Spinner) dlg.findViewById(R.id.dlg_edit_items_sp_store);\n\n    ArrayAdapter<String> adapter =\n        new ArrayAdapter<String>(actv, android.R.layout.simple_spinner_item);\n\n    /**\n     * ************************************* Get store names from db\n     * *************************************\n     */\n    DBUtils dbm = new DBUtils(actv);\n\n    SQLiteDatabase db = dbm.getReadableDatabase();\n\n    Cursor c = dbm.getAllData(db, \"stores\", CONS.columns_for_table_stores_with_index);\n\n    // Log\n    Log.d(\n        \"ListOnItemLongClickListener.java\"\n            + \"[\"\n            + Thread.currentThread().getStackTrace()[2].getLineNumber()\n            + \"]\",\n        \"c.getCount()\" + c.getCount());\n\n    c.moveToFirst();\n\n    // Log\n    for (int i = 0; i < c.getCount(); i++) {\n\n      adapter.add(c.getString(1));\n\n      c.moveToNext();\n    } // for (int i = 0; i < c.getCount(); i++)\n\n    /*----------------------------\n    * 3-1. setDropDownViewResource\n    ----------------------------*/\n    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\n    /*----------------------------\n    * 3-2. Close db\n    ----------------------------*/\n    db.close();\n\n    /*----------------------------\n    * 4. Set adapter to spinner\n    ----------------------------*/\n    sp_store_name.setAdapter(adapter);\n\n    /**\n     * ************************************* Set the initial store name 1. Get the position number\n     * 2. Set the selection *************************************\n     */\n    /**\n     * ************************************* 1. Get the position number\n     * *************************************\n     */\n    int num = 0;\n\n    for (int i = 0; i < adapter.getCount(); i++) {\n\n      String storeName = adapter.getItem(i);\n\n      // Log\n      Log.d(\n          \"ListOnItemLongClickListener.java\"\n              + \"[\"\n              + Thread.currentThread().getStackTrace()[2].getLineNumber()\n              + \":\"\n              + Thread.currentThread().getStackTrace()[2].getMethodName()\n              + \"]\",\n          // \"si.getName()=\" + si.getName()\n          \"si.getStore()=\" + si.getStore() + \"/\" + \"storeName=\" + storeName);\n\n      // if (si.getName().equals(storeName)) {\n      if (si.getStore().equals(storeName)) {\n\n        // Log\n        Log.d(\n            \"ListOnItemLongClickListener.java\"\n                + \"[\"\n                + Thread.currentThread().getStackTrace()[2].getLineNumber()\n                + \":\"\n                + Thread.currentThread().getStackTrace()[2].getMethodName()\n                + \"]\",\n            \"si.getName().equals(storeName)\");\n\n        num = i;\n\n        break;\n      } // if (si.getName() == condition)\n    } // for (int i = 0; i < adapter.getCount(); i++)\n\n    sp_store_name.setSelection(num);\n  } // case_tab_itemList__setStoreName(ShoppingItem si, Dialog dlg)\n"}, {"dataset": "moveToFirst", "exampleID": 1487, "initialization": ["Cursor cursor = query(*,*,*,*,*)"], "initializationStart": [153], "initializationEnd": [267], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 273, "focalAPIEnd": 293, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursorToTweet(cursor)", "cursor.moveToNext()", "cursor.close()"], "useStart": [360, 414, 445], "useEnd": [381, 433, 459], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DVDPT/PDM/tree/master/code/src/pt/isel/adeetc/meic/pdm/controllers/TimelineContentProviderClient.java", "rawCode": "  @Override\n  public Iterable<Twitter.ITweet> getAll() {\n    List<Twitter.ITweet> tweets = new LinkedList<Twitter.ITweet>();\n    Cursor cursor =\n        _contentResolver.query(\n            TimelineContentProvider.CONTENT_URI, StatusTable.COLUMN_ALL, null, null, null);\n    cursor.moveToFirst();\n    while (!cursor.isAfterLast()) {\n      Twitter.ITweet tweet = cursorToTweet(cursor);\n      tweets.add(tweet);\n      cursor.moveToNext();\n    }\n    cursor.close();\n    return tweets;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1488, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.requery()"], "configurationStart": [480], "configurationEnd": [491], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 499, "focalAPIEnd": 514, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.getColumnIndexOrThrow(String)", "cursor.getString(int)"], "useStart": [593, 940, 928], "useEnd": [604, 984, 985], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/remi/andrake/tree/master/examples/android/WikiNotes/src/com/google/android/wikinotes/WikiNotes.java", "rawCode": "  /**\n   * If the note was edited and not canceled, commit the update to the database and then refresh the\n   * current view of the linkified note.\n   */\n  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent result) {\n    super.onActivityResult(requestCode, resultCode, result);\n    if ((requestCode == WikiActivityHelper.ACTIVITY_EDIT) && (resultCode == RESULT_OK)) {\n      // edit was confirmed - store the update\n      Cursor c = mCursor;\n      c.requery();\n      c.moveToFirst();\n      Uri noteUri = ContentUris.withAppendedId(WikiNote.Notes.ALL_NOTES_URI, c.getInt(0));\n      ContentValues values = new ContentValues();\n      values.put(WikiNote.Notes.BODY, result.getStringExtra(WikiNoteEditor.ACTIVITY_RESULT));\n      values.put(WikiNote.Notes.MODIFIED_DATE, System.currentTimeMillis());\n      getContentResolver().update(noteUri, values, \"_id = \" + c.getInt(0), null);\n      showWikiNote(c.getString(c.getColumnIndexOrThrow(WikiNote.Notes.BODY)));\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1489, "initialization": ["Cursor cursor = query(String,*,String,*,*,*,*)"], "initializationStart": [68], "initializationEnd": [174], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.close()"], "configurationStart": [214], "configurationEnd": [225], "guardCondition": "!(cursor.getCount()==0)", "guardType": "IF {", "guardExpressionStart": 181, "guardExpressionEnd": 205, "guardBlockStart": 181, "guardBlockEnd": 275, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 257, "focalAPIEnd": 274, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toSociety(cursor)", "cursor.close()"], "useStart": [299, 320], "useEnd": [313, 331], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/matthew117/DurhamLife-Android/tree/master/DuchessAndroid/src/uk/ac/dur/duchess/io/provider/DatabaseHandler.java", "rawCode": "  public Society getSociety(String name) {\n    Cursor row =\n        db.query(\n            SOCIETY_TABLE, null, KEY_SOCIETY_NAME + \"=\\\"\" + name + \"\\\"\", null, null, null, null);\n\n    if (row.getCount() == 0) {\n      row.close();\n      return null;\n    } else row.moveToFirst();\n\n    Society society = toSociety(row);\n\n    row.close();\n\n    return society;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1490, "initialization": ["Cursor cursor = query(String,*,String,*,*,*,*)"], "initializationStart": [291], "initializationEnd": [405], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 415, "focalAPIEnd": 436, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Pw4rr1er/DemoBirthday/tree/master/src/com/appndroid/crick20/ui/HomeScreen.java", "rawCode": "    @Override\n    protected void onPostExecute(String result) {\n      // TODO Auto-generated method stub\n      super.onPostExecute(result);\n      if ((rowsUpdated > 0 || Utils.rowUpdatedAfterLiveURLFetch)\n          && Utils.currentContext == HomeScreen.this) {\n        mCursor =\n            Utils.db.query(\n                \"schedule\", null, \"MatchUrl <> '' AND MatchResult == '' \", null, null, null, null);\n        mCursor.moveToFirst();\n        mAdapter = null;\n        mAdapter = new MyAdapter(HomeScreen.this);\n        populateGallery();\n        Utils.rowUpdatedAfterLiveURLFetch = false;\n      }\n    }\n"}, {"dataset": "moveToFirst", "exampleID": 1491, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 44, "focalAPIEnd": 65, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jasta/five-android/tree/master/src/org/devtcg/five/provider/util/AbstractDAOItem.java", "rawCode": "  public boolean moveToFirst() {\n    return mCursor.moveToFirst();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1492, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [51], "initializationEnd": [127], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 133, "focalAPIEnd": 153, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.close()"], "useStart": [171, 193], "useEnd": [187, 207], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sng/gb/tree/master/branches/sng/GeoBeagle/src/com/google/code/geobeagle/database/CacheReader.java", "rawCode": "  public int getTotalCount() {\n    Cursor cursor = mSqliteWrapper.rawQuery(\"SELECT COUNT(*) FROM \" + Database.TBL_CACHES, null);\n    cursor.moveToFirst();\n    int count = cursor.getInt(0);\n    cursor.close();\n    return count;\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1493, "initialization": ["Cursor cursor = query(*)"], "initializationStart": [51], "initializationEnd": [117], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(cursor==null)", "guardType": "IF {", "guardExpressionStart": 124, "guardExpressionEnd": 138, "guardBlockStart": 124, "guardBlockEnd": 1243, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 237, "focalAPIEnd": 252, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "statusMessage(cursor)"], "useStart": [336, 499, 683, 841, 979, 1114, 1193], "useEnd": [379, 563, 747, 891, 1026, 1161, 1209], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/commonsguy/cw-android/tree/master/Internet/DownloadStrict/src/com/commonsware/android/dlstrict/DownloadDemo.java", "rawCode": "  public void queryStatus(View v) {\n    Cursor c = mgr.query(new DownloadManager.Query().setFilterById(lastDownload));\n\n    if (c == null) {\n      Toast.makeText(this, \"Download not found!\", Toast.LENGTH_LONG).show();\n    } else {\n      c.moveToFirst();\n\n      Log.d(\n          getClass().getName(),\n          \"COLUMN_ID: \" + c.getLong(c.getColumnIndex(DownloadManager.COLUMN_ID)));\n      Log.d(\n          getClass().getName(),\n          \"COLUMN_BYTES_DOWNLOADED_SO_FAR: \"\n              + c.getLong(c.getColumnIndex(DownloadManager.COLUMN_BYTES_DOWNLOADED_SO_FAR)));\n      Log.d(\n          getClass().getName(),\n          \"COLUMN_LAST_MODIFIED_TIMESTAMP: \"\n              + c.getLong(c.getColumnIndex(DownloadManager.COLUMN_LAST_MODIFIED_TIMESTAMP)));\n      Log.d(\n          getClass().getName(),\n          \"COLUMN_LOCAL_URI: \" + c.getString(c.getColumnIndex(DownloadManager.COLUMN_LOCAL_URI)));\n      Log.d(\n          getClass().getName(),\n          \"COLUMN_STATUS: \" + c.getInt(c.getColumnIndex(DownloadManager.COLUMN_STATUS)));\n      Log.d(\n          getClass().getName(),\n          \"COLUMN_REASON: \" + c.getInt(c.getColumnIndex(DownloadManager.COLUMN_REASON)));\n\n      Toast.makeText(this, statusMessage(c), Toast.LENGTH_LONG).show();\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1494, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [118], "initializationEnd": [160], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 382, "focalAPIEnd": 397, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.close()"], "useStart": [412, 447], "useEnd": [423, 456], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 431, "finallyExpressionEnd": 439, "finallyBlockStart": 431, "finallyBlockEnd": 463, "cleanUpCallStart": [447], "cleanUpCallEnd": [456], "url": "https://github.com/DroidJunk/droidjunk_packages_apps_Contacts/tree/master/src/com/android/contacts/detail/PhotoSelectionHandler.java", "rawCode": "  private int getPhotoPickSize() {\n    // Note that this URI is safe to call on the UI thread.\n    Cursor c =\n        mContext\n            .getContentResolver()\n            .query(\n                DisplayPhoto.CONTENT_MAX_DIMENSIONS_URI,\n                new String[] {DisplayPhoto.DISPLAY_MAX_DIM},\n                null,\n                null,\n                null);\n    try {\n      c.moveToFirst();\n      return c.getInt(0);\n    } finally {\n      c.close();\n    }\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1495, "initialization": ["Cursor cursor = getQueryCursor(String)"], "initializationStart": [669], "initializationEnd": [696], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()", "cursor.getColumnIndexOrThrow(String)", "cursor.getColumnIndexOrThrow(String)", "cursor.getColumnIndex(String)"], "configurationStart": [775, 889, 972, 1056], "configurationEnd": [787, 948, 1032, 1109], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 1194, "focalAPIEnd": 1209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToNext()", "cursor.close()"], "useStart": [1368, 1501], "useEnd": [1382, 1510], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/tests/coretests/src/android/provider/SearchRecentSuggestionsProviderTest.java", "rawCode": "  /**\n   * Set up a filter cursor and then scan it for specific results.\n   *\n   * @param queryString The query string to apply.\n   * @param minRows The minimum number of matching rows that must be found.\n   * @param maxRows The maximum number of matching rows that must be found.\n   * @param matchDisplay1 If non-null, must match DISPLAY1 column if row counts as match\n   * @param matchDisplay2 If non-null, must match DISPLAY2 column if row counts as match\n   */\n  private void checkResultCounts(\n      String queryString, int minRows, int maxRows, String matchDisplay1, String matchDisplay2) {\n\n    // get the cursor and apply sanity checks to result\n    Cursor c = getQueryCursor(queryString);\n    assertNotNull(c);\n    assertTrue(\"Insufficient rows in filtered cursor\", c.getCount() >= minRows);\n\n    // look for minimum set of columns (note, display2 is optional)\n    int colQuery = c.getColumnIndexOrThrow(SearchManager.SUGGEST_COLUMN_QUERY);\n    int colDisplay1 = c.getColumnIndexOrThrow(SearchManager.SUGGEST_COLUMN_TEXT_1);\n    int colDisplay2 = c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2);\n\n    // now loop through rows and look for desired rows\n    int foundRows = 0;\n    c.moveToFirst();\n    while (!c.isAfterLast()) {\n      if (checkRow(c, colQuery, colDisplay1, colDisplay2, matchDisplay1, matchDisplay2)) {\n        foundRows++;\n      }\n      c.moveToNext();\n    }\n\n    // now check the results\n    assertTrue(minRows <= foundRows);\n    assertTrue(foundRows <= maxRows);\n\n    c.close();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1496, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [1187], "initializationEnd": [1207], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.getCount()==1", "guardType": "IF {", "guardExpressionStart": 1284, "guardExpressionEnd": 1306, "guardBlockStart": 1284, "guardBlockEnd": 1423, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 1319, "focalAPIEnd": 1334, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.close()"], "useStart": [1372, 1360, 1477], "useEnd": [1411, 1412, 1486], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 1432, "finallyExpressionEnd": 1440, "finallyBlockStart": 1432, "finallyBlockEnd": 1505, "cleanUpCallStart": [1477], "cleanUpCallEnd": [1486], "url": "https://github.com/sages-health/sagesmobile-mCollect/tree/master/src/org/odk/collect/android/activities/FormEntryActivity.java", "rawCode": "  /** loadingComplete() is called by FormLoaderTask once it has finished loading a form. */\n  @Override\n  public void loadingComplete(FormLoaderTask task) {\n    dismissDialog(PROGRESS_DIALOG);\n\n    FormController formController = task.getFormController();\n    boolean pendingActivityResult = task.hasPendingActivityResult();\n    boolean hasUsedSavepoint = task.hasUsedSavepoint();\n    int requestCode = task.getRequestCode(); // these are bogus if\n    // pendingActivityResult is\n    // false\n    int resultCode = task.getResultCode();\n    Intent intent = task.getIntent();\n\n    mFormLoaderTask.setFormLoaderListener(null);\n    FormLoaderTask t = mFormLoaderTask;\n    mFormLoaderTask = null;\n    t.cancel(true);\n    t.destroy();\n    Collect.getInstance().setFormController(formController);\n\n    // Set the language if one has already been set in the past\n    String[] languageTest = formController.getLanguages();\n    if (languageTest != null) {\n      String defaultLanguage = formController.getLanguage();\n      String newLanguage = \"\";\n      String selection = FormsColumns.FORM_FILE_PATH + \"=?\";\n      String selectArgs[] = {mFormPath};\n      Cursor c = null;\n      try {\n        c = getContentResolver().query(FormsColumns.CONTENT_URI, null, selection, selectArgs, null);\n        if (c.getCount() == 1) {\n          c.moveToFirst();\n          newLanguage = c.getString(c.getColumnIndex(FormsColumns.LANGUAGE));\n        }\n      } finally {\n        if (c != null) {\n          c.close();\n        }\n      }\n\n      // if somehow we end up with a bad language, set it to the default\n      try {\n        formController.setLanguage(newLanguage);\n      } catch (Exception e) {\n        formController.setLanguage(defaultLanguage);\n      }\n    }\n\n    if (pendingActivityResult) {\n      // set the current view to whatever group we were at...\n      refreshCurrentView();\n      // process the pending activity request...\n      onActivityResult(requestCode, resultCode, intent);\n      return;\n    }\n\n    // it can be a normal flow for a pending activity result to restore from a savepoint\n    // (the call flow handled by the above if statement). For all other use cases, the\n    // user should be notified, as it means they wandered off doing other things then\n    // returned to ODK Collect and chose Edit Saved Form, but that the savepoint for that\n    // form is newer than the last saved version of their form data.\n    if (hasUsedSavepoint) {\n      runOnUiThread(\n          new Runnable() {\n            @Override\n            public void run() {\n              Toast.makeText(\n                      FormEntryActivity.this, getString(R.string.savepoint_used), Toast.LENGTH_LONG)\n                  .show();\n            }\n          });\n    }\n\n    // Set saved answer path\n    if (formController.getInstancePath() == null) {\n\n      // Create new answer folder.\n      String time =\n          new SimpleDateFormat(\"yyyy-MM-dd_HH-mm-ss\", Locale.ENGLISH)\n              .format(Calendar.getInstance().getTime());\n      String file = mFormPath.substring(mFormPath.lastIndexOf('/') + 1, mFormPath.lastIndexOf('.'));\n      String path = Collect.INSTANCES_PATH + File.separator + file + \"_\" + time;\n      if (FileUtils.createFolder(path)) {\n        formController.setInstancePath(\n            new File(path + File.separator + file + \"_\" + time + \".xml\"));\n      }\n    } else {\n      Intent reqIntent = getIntent();\n      boolean showFirst = reqIntent.getBooleanExtra(\"start\", false);\n\n      if (!showFirst) {\n        // we've just loaded a saved form, so start in the hierarchy\n        // view\n        Intent i = new Intent(this, FormHierarchyActivity.class);\n        startActivity(i);\n        return; // so we don't show the intro screen before jumping to\n        // the hierarchy\n      }\n    }\n\n    refreshCurrentView();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1497, "initialization": ["Cursor cursor = TriggerDB.getAllTriggers(String)"], "initializationStart": [2059], "initializationEnd": [2091], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 2098, "focalAPIEnd": 2119, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startManagingCursor(cursor)", "new SimpleCursorAdapter(*,*,cursor,String[],int[])"], "useStart": [2125, 2417], "useEnd": [2153, 2497], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cens/ohmagePhone/tree/master/src/org/ohmage/triggers/ui/TriggerListActivity.java", "rawCode": "  private void populateTriggerList() {\n\n    // The viewbinder class to define each list item\n    class CategListViewBinder implements SimpleCursorAdapter.ViewBinder {\n\n      @Override\n      public boolean setViewValue(View view, Cursor c, int colIndex) {\n\n        String trigType = c.getString(c.getColumnIndexOrThrow(TriggerDB.KEY_TRIG_TYPE));\n\n        String trigDesc = c.getString(c.getColumnIndexOrThrow(TriggerDB.KEY_TRIG_DESCRIPT));\n\n        switch (view.getId()) {\n          case R.id.text1:\n            String title = getDisplayTitle(trigType, trigDesc);\n            ((TextView) view).setText(title == null ? \"\" : title);\n            return true;\n\n          case R.id.text2:\n            String summary = getDisplaySummary(trigType, trigDesc);\n            ((TextView) view).setText(summary == null ? \"\" : summary);\n            return true;\n\n          case R.id.button_actions_edit: // edit surveys button\n            int trigId = c.getInt(c.getColumnIndexOrThrow(TriggerDB.KEY_ID));\n\n            String actDesc =\n                c.getString(c.getColumnIndexOrThrow(TriggerDB.KEY_TRIG_ACTION_DESCRIPT));\n\n            Button bAct = (Button) view;\n            bAct.setFocusable(false);\n\n            TriggerActionDesc desc = new TriggerActionDesc();\n            desc.loadString(actDesc);\n            bAct.setText(\"(\" + desc.getCount() + \")\");\n\n            bAct.setTag(new Integer(trigId));\n\n            view.setOnClickListener(\n                new View.OnClickListener() {\n                  @Override\n                  public void onClick(View v) {\n                    mDialogTrigId = (Integer) v.getTag();\n                    mActSelected = null;\n\n                    removeDialog(DIALOG_ID_ACTION_SEL);\n                    showDialog(DIALOG_ID_ACTION_SEL);\n                  }\n                });\n            return true;\n\n          case R.id.icon_trigger_type:\n            ImageView iv = (ImageView) view;\n            iv.setImageResource(getTrigTypeIcon(trigType));\n            return true;\n        }\n\n        return false;\n      }\n    }\n\n    mCursor = mDb.getAllTriggers(mCampaignUrn);\n\n    mCursor.moveToFirst();\n    startManagingCursor(mCursor);\n\n    String[] from =\n        new String[] {TriggerDB.KEY_ID, TriggerDB.KEY_ID, TriggerDB.KEY_ID, TriggerDB.KEY_ID};\n\n    int[] to = new int[] {R.id.text1, R.id.text2, R.id.button_actions_edit, R.id.icon_trigger_type};\n\n    SimpleCursorAdapter triggers =\n        new SimpleCursorAdapter(this, R.layout.trigger_main_list_row, mCursor, from, to);\n\n    triggers.setViewBinder(new CategListViewBinder());\n    setListAdapter(triggers);\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1498, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 34, "focalAPIEnd": 54, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)"], "useStart": [96, 394, 440, 585, 755, 1984, 2526], "useEnd": [118, 417, 466, 609, 784, 2006, 2548], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dividedmind/hunkypunk/tree/master/src/org/andglk/hunkypunk/GameDetails.java", "rawCode": "  protected void showData() {\n    mQuery.moveToFirst();\n\n    if (mGameIfid == null) mGameIfid = mQuery.getString(IFID);\n    if (mQuery.isNull(LOOKED_UP)) {\n      Toast.makeText(this, R.string.looking_up, Toast.LENGTH_SHORT).show();\n      setProgressBarIndeterminateVisibility(true);\n      IFDb.getInstance(getContentResolver()).startLookup(mGameIfid, mLookupHandler);\n    }\n\n    mTitle.setText(mQuery.getString(TITLE));\n    String string = mQuery.getString(HEADLINE);\n    mHeadline.setText(string);\n    mHeadline.setVisibility(string == null ? View.GONE : View.VISIBLE);\n\n    string = mQuery.getString(AUTHOR);\n    mAuthor.setText(getString(R.string.by_author, string));\n    mAuthor.setVisibility(string == null ? View.GONE : View.VISIBLE);\n\n    string = mQuery.getString(DESCRIPTION);\n    mDescription.setText(string);\n    mDescriptionLayout.setVisibility(string == null ? View.GONE : View.VISIBLE);\n\n    StringBuilder sb = new StringBuilder();\n    if ((string = mQuery.getString(FIRSTPUBLISHED)) != null) {\n      sb.append(getString(R.string.first_published_s, string));\n      sb.append('\\n');\n    }\n    if ((string = mQuery.getString(GENRE)) != null) {\n      sb.append(getString(R.string.genre_s, string));\n      sb.append('\\n');\n    }\n    if ((string = mQuery.getString(GROUP)) != null) {\n      sb.append(getString(R.string.group_s, string));\n      sb.append('\\n');\n    }\n    if ((string = mQuery.getString(SERIES)) != null) {\n      sb.append(getString(R.string.series_s, string));\n      sb.append('\\n');\n    }\n    if ((string = mQuery.getString(SERIESNUMBER)) != null) {\n      sb.append(getString(R.string.seriesnumber_s, string));\n      sb.append('\\n');\n    }\n    if ((string = mQuery.getString(FORGIVENESS)) != null) {\n      sb.append(getString(R.string.forgiveness_s, string));\n      sb.append('\\n');\n    }\n    if ((string = mQuery.getString(LANGUAGE)) != null) {\n      sb.append(getString(R.string.language_s, string));\n      sb.append('\\n');\n    }\n\n    mGameFile = new File(mQuery.getString(PATH));\n\n    String terp = getTerp();\n    sb.append(\"Interpreter: \");\n    sb.append(terp);\n    sb.append('\\n');\n\n    if (terp.compareTo(\"frotz\") == 0 || terp.compareTo(\"nitfol\") == 0) {\n      sb.append(\"ZCode Version: \");\n      sb.append(getZcodeVersion());\n      sb.append('\\n');\n    }\n\n    final int len = sb.length();\n    if (len != 0) sb.replace(len - 1, len, \"\"); // remove trailing newline\n\n    mDetails.setText(sb);\n\n    // Uri.fromFile doesn't work for some reason\n    mCover.setImageURI(Uri.parse(HunkyPunk.getCover(mQuery.getString(IFID)).getAbsolutePath()));\n\n    mRestartButton.setVisibility(getBookmark().exists() ? View.VISIBLE : View.GONE);\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1499, "initialization": ["Cursor cursor = query(Uri,*,*,*,*)"], "initializationStart": [819], "initializationEnd": [873], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()"], "configurationStart": [971], "configurationEnd": [988], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 999, "focalAPIEnd": 1019, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.getColumnIndex(String)", "cursor.getString(int)", "cursor.close()"], "useStart": [1240, 1223, 1317, 1300, 1447], "useEnd": [1279, 1280, 1359, 1360, 1461], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Guillermoo/unutopia-android/tree/master/merybere/08-MyContentProviderTest/src/com/merybere/app/mycontentprovider/test/MyContentProviderTest.java", "rawCode": "  public void testSelectOne() {\n    // Necesitamos un objeto ContentValues, cargar en él los datos que queremos insertar\n    ContentValues values = new ContentValues();\n    values.put(MembersContract.UsersTable.USERNAME, \"Clark Kent\");\n    values.put(MembersContract.UsersTable.EMAIL, \"super@man.com\");\n\n    // Necesitamos una uri, a la que pasarle los valores y tiene que hacer el insert\n    Uri uri = UsersTable.getUri();\n\n    // Llamada al insert, que devolverá una uri de registro único\n    Uri newUri = mContentResolver.insert(uri, values);\n\n    // Comprobación de que newUri es correcta\n    assertNotNull(newUri);\n\n    // Lanzar una query con esa uri, que devuelva todos los campos, sin límites de selección\n    // ni argumentos ni ordenación, que devuelva un cursor para acceder a esos datos\n    Cursor cursor = mContentResolver.query(newUri, null, null, null, null);\n\n    // Comprobación para asegurarse de que el número de filas del cursor es 1\n    assertEquals(cursor.getCount(), 1);\n\n    cursor.moveToFirst();\n    // Como en la consulta para obtener el cursor no hemos forzado ningún orden en las columnas,\n    // obtener los campos nombre y email por búsqueda de los índices de esas columnas\n    String email = cursor.getString(cursor.getColumnIndex(UsersTable.EMAIL));\n    String name = cursor.getString(cursor.getColumnIndex(UsersTable.USERNAME));\n    assertEquals(\"Clark Kent\", name);\n    assertEquals(\"super@man.com\", email);\n\n    cursor.close();\n  }\n"}, {"dataset": "moveToFirst", "exampleID": 1500, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "result = cursor.moveToFirst()", "focalAPIStart": 144, "focalAPIEnd": 165, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["v(String,result)"], "useStart": [120], "useEnd": [166], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openintents/openintents/tree/master/deprecated/Alerts/src/org/openintents/alerts/AddGenericAlertActivity.java", "rawCode": "  private void saveDataSet() {\n    Log.d(_TAG, \"save dataset now\");\n\n    // Log.v(_TAG, \"next: \" + mCursor.next());\n    Log.v(_TAG, \"first: \" + mCursor.moveToFirst());\n\n    ContentValues values = new ContentValues();\n\n    CharSequence c = null;\n    String s = new String();\n    // ugly hack following\n    c = mCond1.getText();\n    if (TextUtils.isEmpty(c)) {\n      s = \"\";\n    } else {\n      s = c.toString();\n    }\n    values.put(Generic.CONDITION1, s);\n\n    c = mCond2.getText();\n    if (TextUtils.isEmpty(c)) {\n      s = \"\";\n    } else {\n      s = c.toString();\n    }\n\n    Log.d(_TAG, \"cond2row set 2 >>\" + s + \"<<\");\n    values.put(Generic.CONDITION2, s);\n\n    c = mIntent.getText();\n    if (TextUtils.isEmpty(c)) {\n      s = \"\";\n    } else {\n      s = c.toString();\n    }\n\n    values.put(Generic.INTENT, s);\n\n    c = mIntentCat.getText();\n    if (TextUtils.isEmpty(c)) {\n      s = \"\";\n    } else {\n      s = c.toString();\n    }\n\n    values.put(Generic.INTENT_CATEGORY, s);\n\n    c = mIntentUri.getText();\n    if (TextUtils.isEmpty(c)) {\n      s = \"\";\n    } else {\n      s = c.toString();\n    }\n    values.put(Generic.INTENT_URI, s);\n\n    values.put(Generic.TYPE, ((String) mType.getSelectedItem()));\n\n    values.put(Generic.ACTIVE, (mActive.isChecked() ? 1 : 0));\n\n    values.put(Generic.ACTIVATE_ON_BOOT, (mOnBoot.isChecked() ? 1 : 0));\n\n    Uri typedUri;\n    if (Alert.TYPE_LOCATION.equals(mType.getSelectedItem())) {\n      typedUri = Alert.Location.CONTENT_URI;\n    } else if (Alert.TYPE_DATE_TIME.equals(mType.getSelectedItem())) {\n      typedUri = Alert.DateTime.CONTENT_URI;\n    } else {\n      typedUri = Alert.Generic.CONTENT_URI;\n    }\n    Alert.update(typedUri, values, null, null);\n\n    if (Alert.TYPE_LOCATION.equals(mType.getSelectedItem())) {\n      ContentValues cv = new ContentValues();\n      cv.put(Location.POSITION, mCond1.getText().toString());\n      cv.put(Location.DISTANCE, mCond2.getText().toString());\n      Alert.registerLocationAlert(cv);\n    }\n  }\n"}]