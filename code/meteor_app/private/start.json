[{"dataset": "start", "exampleID": 6401, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String)"], "initializationStart": [181], "initializationEnd": [210], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.directory(File)", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [216, 245], "configurationEnd": [239, 278], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 294, "focalAPIEnd": 309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.getOutputStream()"], "useStart": [320, 381], "useEnd": [344, 406], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Top-Q/jsystem/tree/master/jsystem-core-system-objects/cli-so/src/main/java/systemobject/terminal/Cmd.java", "rawCode": "  public void connect() throws IOException {\n    File root = null;\n    if (!StringUtils.isEmpty(processDir)) {\n      root = new File(processDir);\n    }\n    ProcessBuilder builder = new ProcessBuilder(\"cmd.exe\");\n    builder.directory(root);\n    builder.redirectErrorStream(true);\n    process = builder.start();\n    in = process.getInputStream();\n    out = new BufferedOutputStream(process.getOutputStream());\n  }\n"}, {"dataset": "start", "exampleID": 6402, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [461], "initializationEnd": [484], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [490], "configurationEnd": [518], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 536, "focalAPIEnd": 546, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [613, 863], "useEnd": [631, 874], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xymus/staticjni/tree/master/test/tools/javah/compareTest/CompareTest.java", "rawCode": "  int old_javah(List<String> options, File outDir, File bootclasspath, String className)\n      throws IOException, InterruptedException {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(old_javah_cmd.getPath());\n    cmd.addAll(options);\n    cmd.add(\"-d\");\n    cmd.add(outDir.getPath());\n    cmd.add(\"-bootclasspath\");\n    cmd.add(bootclasspath.getPath());\n    cmd.add(className);\n    System.err.println(\"old_javah: \" + cmd);\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n    String line;\n    StringBuilder sb = new StringBuilder();\n    while ((line = in.readLine()) != null) {\n      sb.append(line);\n      sb.append(\"\\n\");\n    }\n    System.err.println(\"old javah out: \" + sb.toString());\n    return p.waitFor();\n  }\n"}, {"dataset": "start", "exampleID": 6403, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String)"], "initializationStart": [230], "initializationEnd": [267], "hasTryCatch": 1, "exceptionType": "InterruptedException", "exceptionHandlingCall": ["println(String)"], "tryExpressionStart": 45, "tryExpressionEnd": 49, "tryBlockStart": 45, "tryBlockEnd": 1508, "catchExpressionStart": 1105, "catchExpressionEnd": 1136, "catchBlockStart": 1105, "catchBlockEnd": 1202, "exceptionHandlingCallStart": [1150], "exceptionHandlingCallEnd": [1189], "configuration": ["processBuilder.directory(File)", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [427, 487], "configurationEnd": [477, 515], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 588, "focalAPIEnd": 598, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()", "process.destroy()"], "useStart": [646, 765, 1399], "useEnd": [668, 780, 1414], "hasFinally": 1, "cleanUpCall": ["Process.destroy()"], "finallyExpressionStart": 1379, "finallyExpressionEnd": 1387, "finallyBlockStart": 1379, "finallyBlockEnd": 1425, "cleanUpCallStart": [1399], "cleanUpCallEnd": [1414], "url": "https://github.com/ucam-cl-dtg/nigori/tree/master/client/src/test/java/com/google/nigori/client/accept/AcceptanceTests.java", "rawCode": "    @Override\n    public void run() {\n\n      try {\n        String cmd = \"mvn gae:\" + gaeCommand; // this is the command to execute in the\n        // Unix shell\n        // create a process for the shell\n        ProcessBuilder pb = new ProcessBuilder(\"bash\", \"-c\", cmd);\n        System.out.println(\"Running: \" + cmd);\n\n        File current = new File(\"\").getAbsoluteFile();\n        File parent = current.getParentFile();\n        pb.directory(new File(parent, \"server/appengine\"));\n        pb.redirectErrorStream(true); // use this to capture messages sent to stderr\n        Process shell = pb.start();\n        try {\n          InputStream shellIn = shell.getInputStream(); // this captures the output from the command\n          try {\n            int shellExitStatus = shell.waitFor(); // wait for the shell to finish and get the\n            // return\n            // code\n\n            // at this point you can process the output issued by the command\n            // for instance, this reads the output and writes it to System.out:\n            System.out.println(\"Exit status:\" + shellExitStatus);\n          } catch (InterruptedException e) {\n            System.out.println(\"Did not terminate\");\n          }\n          int c;\n          while ((c = shellIn.read()) != -1) {\n            System.out.write(c);\n          }\n          // close the stream\n          shellIn.close();\n        } finally {\n          shell.destroy();\n        }\n      } catch (IOException ignoreMe) {\n        ignoreMe.printStackTrace();\n      }\n    }\n"}, {"dataset": "start", "exampleID": 6404, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String,String,String,*,*)"], "initializationStart": [126], "initializationEnd": [356], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 84, "tryExpressionEnd": 88, "tryBlockStart": 84, "tryBlockEnd": 1884, "catchExpressionStart": 1798, "catchExpressionEnd": 1818, "catchBlockStart": 1798, "catchBlockEnd": 1884, "exceptionHandlingCallStart": [1826], "exceptionHandlingCallEnd": [1845], "configuration": ["processBuilder.environment()", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [391, 505], "configurationEnd": [407, 533], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 602, "focalAPIEnd": 612, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [1773], "useEnd": [1790], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JessedeDoes/ImpactIR/tree/master/src/impact/ee/classifier/svmlight/SVMLightExec.java", "rawCode": "  public static void trainClassifiers(File trainingFile, File modelDirectory) {\n    try {\n      ProcessBuilder pb =\n          new ProcessBuilder(\n              learner,\n              \"-z\",\n              \"m\",\n              \"-c\",\n              (parameterC + \"\"),\n              trainingFile.getCanonicalPath(),\n              modelDirectory.getCanonicalPath());\n\n      Map<String, String> env = pb.environment();\n      // env.put(\"PATH\", programDir + \"/\");\n\n      // pb.directory(new File(programDir));\n      pb.redirectErrorStream(true);\n      final File tf = trainingFile;\n\n      final Process process = pb.start();\n      new Thread(\n              new Runnable() {\n                @Override\n                public void run() {\n                  try {\n                    String line;\n                    final InputStream stdout = process.getInputStream();\n                    BufferedReader brCleanUp = new BufferedReader(new InputStreamReader(stdout));\n                    while ((line = brCleanUp.readLine()) != null) {\n                      if (verbose)\n                        nl.openconvert.log.ConverterLog.defaultLog.println(\"[Stdout] \" + line);\n                      // als regel \"examples read \" bevat, kan\n                      // je de trainingFile weggooien...\n                      if (line.contains(\"examples read\")) {\n                        nl.openconvert.log.ConverterLog.defaultLog.println(\n                            \"deleting combined training file...\");\n                        tf.delete();\n                      }\n                    }\n                    brCleanUp.close();\n                  } catch (IOException e) {\n                    e.printStackTrace(System.err);\n                  }\n                }\n              })\n          .start();\n      process.waitFor();\n    } catch (Exception e) {\n      e.printStackTrace();\n      // TODO: handle exception\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6405, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [87], "initializationEnd": [114], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [120], "configurationEnd": [148], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 216, "focalAPIEnd": 226, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getOutputStream()", "process.getInputStream()"], "useStart": [281, 359], "useEnd": [303, 380], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JUrban/flyspeck-git-svn/tree/master/branches/pleso-branch/jHOLLight/src/edu/pitt/math/jhol/test/HOLLightWrapper.java", "rawCode": "  private void init(List<String> command) throws IOException {\n    ProcessBuilder pb = new ProcessBuilder(command);\n    pb.redirectErrorStream(true);\n    evalStr = new StringBuilder();\n\n    Process proc;\n\n    proc = pb.start();\n\n    bin = new BufferedWriter(new OutputStreamWriter(proc.getOutputStream()));\n    bout = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n  }\n"}, {"dataset": "start", "exampleID": 6406, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 464, "focalAPIEnd": 479, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getErrorStream()", "process.getInputStream()"], "useStart": [651, 768], "useEnd": [675, 792], "hasFinally": 1, "cleanUpCall": ["ExecutorService.shutdown()"], "finallyExpressionStart": 1472, "finallyExpressionEnd": 1480, "finallyBlockStart": 1472, "finallyBlockEnd": 1521, "cleanUpCallStart": [1488], "cleanUpCallEnd": [1514], "url": "https://github.com/robovm/robovm/tree/master/tests/libcore/support/src/test/java/tests/support/Support_Exec.java", "rawCode": "  /**\n   * Starts the specified process, collects its output from standard out and standard err, and\n   * returns. If the stream emits anything to standard err, an AssertionFailedError will be thrown.\n   *\n   * <p>This method assumes the target process will complete within thirty seconds. If it does not,\n   * an AssertionFailedError will be thrown.\n   */\n  public static String execAndGetOutput(ProcessBuilder builder) throws IOException {\n    Process process = builder.start();\n    ExecutorService executorService = Executors.newFixedThreadPool(2);\n    try {\n      Future<String> errFuture =\n          executorService.submit(streamToStringCallable(process.getErrorStream()));\n      Future<String> outFuture =\n          executorService.submit(streamToStringCallable(process.getInputStream()));\n\n      Throwable failure;\n      String out = \"\";\n      try {\n        out = outFuture.get(30, TimeUnit.SECONDS);\n        String err = errFuture.get(30, TimeUnit.SECONDS);\n        failure =\n            err.length() > 0\n                ? new AssertionFailedError(\"Unexpected err stream data:\\n\" + err)\n                : null;\n      } catch (Exception e) {\n        failure = e;\n      }\n\n      if (failure != null) {\n        AssertionFailedError error =\n            new AssertionFailedError(\n                \"Failed to execute \" + builder.command() + \"; output was:\\n\" + out);\n        error.initCause(failure);\n        throw error;\n      } else {\n        return out;\n      }\n    } finally {\n      executorService.shutdown();\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6407, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 96, "focalAPIEnd": 111, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/epall/selenium/tree/master/firefox/src/java/org/openqa/selenium/firefox/FirefoxBinary.java", "rawCode": "  protected void startFirefoxProcess(ProcessBuilder builder) throws IOException {\n    process = builder.start();\n  }\n"}, {"dataset": "start", "exampleID": 6408, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "InterruptedException", "exceptionHandlingCall": ["warn(String,*)"], "tryExpressionStart": 98, "tryExpressionEnd": 102, "tryBlockStart": 98, "tryBlockEnd": 517, "catchExpressionStart": 346, "catchExpressionEnd": 382, "catchBlockStart": 346, "catchBlockEnd": 443, "exceptionHandlingCallStart": [390], "exceptionHandlingCallEnd": [436], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 125, "focalAPIEnd": 187, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.getErrorStream()", "process.waitFor()"], "useStart": [211, 269, 324], "useEnd": [232, 290, 338], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guoliqiang/coding/tree/master/third_part/hadoop/hadoop-1.1.2/src/test/system/java/org/apache/hadoop/hdfs/TestBalancer.java", "rawCode": "  private int runAndWatch(String remoteHost, String remoteCommand) {\n    int exitStatus = -1;\n    try {\n      Process proc = new ProcessBuilder(CMD_SSH, remoteHost, remoteCommand).start();\n      watchProcStream(proc.getInputStream(), System.out);\n      watchProcStream(proc.getErrorStream(), System.err);\n      exitStatus = proc.waitFor();\n    } catch (InterruptedException intExc) {\n      LOG.warn(\"got thread interrupt error\", intExc);\n    } catch (IOException ioExc) {\n      LOG.warn(\"got i/o error\", ioExc);\n    }\n    return exitStatus;\n  }\n"}, {"dataset": "start", "exampleID": 6409, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(ArrayList<String>)"], "initializationStart": [53], "initializationEnd": [78], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["errRTExcept(*)"], "tryExpressionStart": 84, "tryExpressionEnd": 88, "tryBlockStart": 84, "tryBlockEnd": 337, "catchExpressionStart": 276, "catchExpressionEnd": 298, "catchBlockStart": 276, "catchBlockEnd": 337, "exceptionHandlingCallStart": [312], "exceptionHandlingCallEnd": [330], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 149, "focalAPIEnd": 164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/0xdata/h2o/tree/master/src/main/java/water/deploy/VM.java", "rawCode": "  public void start() {\n    ProcessBuilder builder = new ProcessBuilder(_args);\n    try {\n      assert !_inherit || (_out == null);\n      _process = builder.start();\n      if (_inherit) inheritIO(_process, null);\n      if (_out != null) persistIO(_process, _out, _err);\n    } catch (IOException e) {\n      throw Log.errRTExcept(e);\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6410, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(ArrayList<String>)"], "initializationStart": [763], "initializationEnd": [787], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.directory(File)"], "configurationStart": [793], "configurationEnd": [827], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 945, "focalAPIEnd": 955, "followUpCheck": "process != null", "checkType": "IF", "followUpCheckExpressionStart": 1378, "followUpCheckExpressionEnd": 1398, "followUpCheckBlockStart": 1378, "followUpCheckBlockEnd": 1602, "use": ["process.getInputStream()", "process.exitValue()", "process.destroy()"], "useStart": [992, 1425, 1566], "useEnd": [1016, 1444, 1583], "hasFinally": 1, "cleanUpCall": ["close(BufferedInputStream)", "Process.exitValue()"], "finallyExpressionStart": 1337, "finallyExpressionEnd": 1345, "finallyBlockStart": 1337, "finallyBlockEnd": 1608, "cleanUpCallStart": [1353, 1425], "cleanUpCallEnd": [1370, 1444], "url": "https://github.com/yasuaki/opengrok/tree/master/src/org/opensolaris/opengrok/history/SubversionRepository.java", "rawCode": "  @Override\n  public Annotation annotate(File file, String revision) throws IOException {\n    SAXParserFactory factory = SAXParserFactory.newInstance();\n    SAXParser saxParser = null;\n    try {\n      saxParser = factory.newSAXParser();\n    } catch (Exception ex) {\n      IOException err = new IOException(\"Failed to create SAX parser\", ex);\n      throw err;\n    }\n\n    ArrayList<String> argv = new ArrayList<String>();\n    ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK);\n    argv.add(cmd);\n    argv.add(\"annotate\");\n    argv.add(\"--trust-server-cert\");\n    argv.add(\"--non-interactive\");\n    argv.add(\"--xml\");\n    if (revision != null) {\n      argv.add(\"-r\");\n      argv.add(revision);\n    }\n    argv.add(escapeFileName(file.getName()));\n    ProcessBuilder pb = new ProcessBuilder(argv);\n    pb.directory(file.getParentFile());\n    Process process = null;\n    BufferedInputStream in = null;\n    Annotation ret = null;\n    try {\n      process = pb.start();\n      in = new BufferedInputStream(process.getInputStream());\n\n      AnnotateHandler handler = new AnnotateHandler(file.getName());\n      try {\n        saxParser.parse(in, handler);\n        ret = handler.annotation;\n      } catch (Exception e) {\n        OpenGrokLogger.getLogger()\n            .log(Level.SEVERE, \"An error occurred while parsing the xml output\", e);\n      }\n    } finally {\n      IOUtils.close(in);\n      if (process != null) {\n        try {\n          process.exitValue();\n        } catch (IllegalThreadStateException e) {\n          // the process is still running??? just kill it..\n          process.destroy();\n        }\n      }\n    }\n    return ret;\n  }\n"}, {"dataset": "start", "exampleID": 6411, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [97], "initializationEnd": [120], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 66, "tryExpressionEnd": 70, "tryBlockStart": 66, "tryBlockEnd": 528, "catchExpressionStart": 406, "catchExpressionEnd": 428, "catchBlockStart": 406, "catchBlockEnd": 462, "exceptionHandlingCallStart": [436], "exceptionHandlingCallEnd": [455], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 140, "focalAPIEnd": 149, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [222, 387], "useEnd": [240, 398], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sosilent/euca/tree/master/clc/modules/www/test-gwt/src/com/eucalyptus/webui/server/AwsServiceImpl.java", "rawCode": "  private String run(List<String> cmd) {\n    String ret = \"\";\n    try {\n      ProcessBuilder b = new ProcessBuilder(cmd);\n      Process p = b.start();\n      BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\n      String s = reader.readLine();\n      while (s != null) {\n        ret = ret.concat(s + \"\\n\");\n        s = reader.readLine();\n      }\n      p.waitFor();\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n    return ret;\n  }\n"}, {"dataset": "start", "exampleID": 6412, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(*)"], "initializationStart": [144], "initializationEnd": [173], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 197, "focalAPIEnd": 212, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.getErrorStream()", "process.waitFor()", "process.exitValue()"], "useStart": [329, 507, 631, 662], "useEnd": [353, 531, 648, 681], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ymasory/scala-corpus/tree/master/kafka/src/main/java/kafka/deploy/utils/command/UnixCommand.java", "rawCode": "  public int execute(CommandOutputListener commandOutputListener)\n      throws InterruptedException, IOException {\n    ProcessBuilder builder = new ProcessBuilder(this.args);\n    Process process = builder.start();\n\n    Thread stdoutWatcher =\n        new ProcessOutputWatcher(\n            new BufferedReader(new InputStreamReader(process.getInputStream())),\n            commandOutputListener);\n    Thread stderrWatcher =\n        new ProcessOutputWatcher(\n            new BufferedReader(new InputStreamReader(process.getErrorStream())),\n            commandOutputListener);\n\n    stdoutWatcher.start();\n    stderrWatcher.start();\n\n    process.waitFor();\n\n    return process.exitValue();\n  }\n"}, {"dataset": "start", "exampleID": 6413, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String)"], "initializationStart": [2344], "initializationEnd": [2397], "hasTryCatch": 1, "exceptionType": "InterruptedException", "exceptionHandlingCall": ["printStackTrace()", "println(String)"], "tryExpressionStart": 1736, "tryExpressionEnd": 1740, "tryBlockStart": 1736, "tryBlockEnd": 2307, "catchExpressionStart": 3354, "catchExpressionEnd": 3385, "catchBlockStart": 3354, "catchBlockEnd": 3465, "exceptionHandlingCallStart": [3393, 3420], "exceptionHandlingCallEnd": [3412, 3458], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [2403], "configurationEnd": [2436], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 2568, "focalAPIEnd": 2583, "followUpCheck": "process.waitFor() != 0", "checkType": "IF", "followUpCheckExpressionStart": 2934, "followUpCheckExpressionEnd": 2955, "followUpCheckBlockStart": 2934, "followUpCheckBlockEnd": 3260, "use": ["process.getInputStream()"], "useStart": [2740], "useEnd": [2758], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IAAS/oryx-editor/tree/master/editor/server/src/org/oryxeditor/server/AutoLayouterServlet.java", "rawCode": "  protected void doPost(HttpServletRequest req, HttpServletResponse res)\n      throws ServletException, IOException {\n\n    // if (false && DEBUG) {\n    //\n    // // execute 'which ruby' in the context of the servlet container.\n    // try {\n    //\n    // // start a process for 'which ruby' and wait for it.\n    // Process which = Runtime.getRuntime().exec(\"which ruby\");\n    // which.waitFor();\n    //\n    // // get the output in a buffered reader.\n    // BufferedReader whichIn = new BufferedReader(\n    // new InputStreamReader(which.getInputStream()));\n    //\n    // // output the debug information.\n    // System.out.print(\"ruby location: \");\n    // System.out.println(whichIn.readLine());\n    //\n    // } catch (InterruptedException e1) {\n    //\n    // // if something goes wrong, tell us.\n    // e1.printStackTrace();\n    // }\n    // }\n\n    // get rdf and timestamp for the temporary file.\n    String rdf = req.getParameter(\"rdf\");\n    String basefilename = String.valueOf(System.currentTimeMillis());\n\n    // create a new temporary file and store the rdf.\n    String tmpRdfFile =\n        this.getServletContext().getRealPath(\"/\") + \"tmp\" + File.separator + basefilename + \".rdf\";\n    BufferedWriter out = new BufferedWriter(new FileWriter(tmpRdfFile));\n    out.write(rdf);\n    out.close();\n\n    // get the path to the layouter.\n    String layouter_path =\n        this.getServletContext().getRealPath(\"/\")\n            + \"Plugins\"\n            + File.separator\n            + \"AutoLayouter\"\n            + File.separator\n            + \"src\"\n            + File.separator\n            + \"startlayout.rb\";\n\n    if (DEBUG) {\n\n      System.out.println(\"Auto-Layouter: Saved RDF to \" + tmpRdfFile);\n\n      // try to find the layouter.\n      try {\n\n        // start a process for 'ls %layouter_path%' and wait for it.\n        Process ls = Runtime.getRuntime().exec(\"ls \" + layouter_path);\n        ls.waitFor();\n\n        // get the output in a buffered reader.\n        BufferedReader lsIn = new BufferedReader(new InputStreamReader(ls.getInputStream()));\n\n        // output the debug information.\n        System.out.print(\"ls on layouter: \");\n        System.out.println(lsIn.readLine());\n\n      } catch (InterruptedException e1) {\n\n        // if something goes wrong, tell us.\n        e1.printStackTrace();\n      }\n    }\n\n    ProcessBuilder builder = new ProcessBuilder(\"ruby\", layouter_path, tmpRdfFile);\n    builder.redirectErrorStream(true);\n    ;\n\n    if (DEBUG) {\n      System.out.println(\"Auto-Layouter: Calling ruby with: \" + builder.command());\n    }\n    Process p = builder.start();\n\n    if (DEBUG) {\n      System.out.println(\"Auto-Layouter: Called Ruby, Starting ReaderThread\");\n    }\n\n    StreamReadThread reader = new StreamReadThread(p.getInputStream());\n    reader.start();\n    res.setContentType(\"text/html\");\n    try {\n      if (DEBUG) {\n        System.out.println(\"Auto-Layouter: Waiting for Ruby to return\");\n      }\n      if (p.waitFor() != 0) {\n        if (DEBUG) {\n          System.out.println(\"Auto-Layouter: Ruby returned an error\");\n        }\n        res.getWriter().println(\"{'error':'Layouter returned an error:\\n\" + reader.content + \"'}\");\n        wait_for_thread(reader);\n        System.err.println(reader.content);\n        return;\n      }\n      if (DEBUG) {\n        System.out.println(\"Auto-Layouter: Ruby returned\");\n      }\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n      System.out.println(\"Wait interrupted\");\n    }\n    wait_for_thread(reader);\n    if (DEBUG) {\n      System.out.println(\"Auto-Layouter: Sending response\");\n    }\n    res.getWriter().println(reader.content);\n  }\n"}, {"dataset": "start", "exampleID": 6414, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [428], "initializationEnd": [455], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.environment()"], "configurationStart": [486], "configurationEnd": [507], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 548, "focalAPIEnd": 563, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bryanjimenez/empanada/tree/master/hadoop/hadoop-1.2.1/src/mapred/org/apache/hadoop/mapred/pipes/Application.java", "rawCode": "  /**\n   * Run a given command in a subprocess, including threads to copy its stdout and stderr to our\n   * stdout and stderr.\n   *\n   * @param command the command and its arguments\n   * @param env the environment to run the process in\n   * @return a handle on the process\n   * @throws IOException\n   */\n  static Process runClient(List<String> command, Map<String, String> env) throws IOException {\n    ProcessBuilder builder = new ProcessBuilder(command);\n    if (env != null) {\n      builder.environment().putAll(env);\n    }\n    Process result = builder.start();\n    return result;\n  }\n"}, {"dataset": "start", "exampleID": 6415, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String)", "ProcessBuilder processBuilder = new ProcessBuilder(String,String)"], "initializationStart": [568, 650], "initializationEnd": [612, 682], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["println(*)"], "tryExpressionStart": 741, "tryExpressionEnd": 745, "tryBlockStart": 741, "tryBlockEnd": 877, "catchExpressionStart": 793, "catchExpressionEnd": 817, "catchBlockStart": 793, "catchBlockEnd": 877, "exceptionHandlingCallStart": [825], "exceptionHandlingCallEnd": [848], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [695], "configurationEnd": [735], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 763, "focalAPIEnd": 785, "followUpCheck": "process != null", "checkType": "IF", "followUpCheckExpressionStart": 883, "followUpCheckExpressionEnd": 903, "followUpCheckBlockStart": 883, "followUpCheckBlockEnd": 1240, "use": ["process.getInputStream()"], "useStart": [976], "useEnd": [1000], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pommier/scisoft-ui/tree/master/uk.ac.diamond.scisoft.qstatMonitor/src/uk/ac/diamond/scisoft/qstatmonitor/api/Utils.java", "rawCode": "  /**\n   * Runs given command with arguments and returns the output as a String\n   *\n   * @param cmd command to run, this will usually be the script that is ran\n   * @param argment the first argument, this will be the main qstat query\n   * @param userString the user name pattern to filter the users by in the query\n   * @return\n   */\n  public static String runScriptAndGetOutput(String cmd, String argment, String userString) {\n    String result = \"\";\n\n    ProcessBuilder processBuilder;\n    if (userString != null && !userString.equals(\"\")) {\n      processBuilder = new ProcessBuilder(cmd, argment, userString);\n    } else {\n      processBuilder = new ProcessBuilder(cmd, argment);\n    }\n\n    processBuilder.redirectErrorStream(true);\n    try {\n      process = processBuilder.start();\n    } catch (IOException ioe) {\n      System.out.println(ioe);\n      process = null;\n    }\n\n    if (process != null) {\n      BufferedReader brOut = new BufferedReader(new InputStreamReader(process.getInputStream()));\n      String line = null;\n      try {\n        while ((line = brOut.readLine()) != null) {\n          result += \"\\n\" + line;\n        }\n        brOut.close();\n      } catch (IOException ioe) {\n        System.out.println(ioe);\n      }\n    }\n\n    int startOfXmlIndex = result.indexOf(\"<?xml version='1.0'?\");\n    if (startOfXmlIndex == -1) {\n      System.out.println(\"Can not find XML header.\");\n    } else {\n      result = result.substring(startOfXmlIndex);\n    }\n\n    return result;\n  }\n"}, {"dataset": "start", "exampleID": 6416, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [341], "initializationEnd": [365], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["warn(String,*)"], "tryExpressionStart": 448, "tryExpressionEnd": 452, "tryBlockStart": 448, "tryBlockEnd": 979, "catchExpressionStart": 904, "catchExpressionEnd": 926, "catchBlockStart": 904, "catchBlockEnd": 979, "exceptionHandlingCallStart": [934], "exceptionHandlingCallEnd": [972], "configuration": ["processBuilder.command()", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [384, 408], "configurationEnd": [401, 441], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 596, "focalAPIEnd": 611, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [680], "useEnd": [704], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sammacbeth/LPG--Game/tree/master/src/main/java/uk/ac/imperial/lpgdash/db/HPCExecutor.java", "rawCode": "  @Override\n  public void run(long simId) throws InsufficientResourcesException {\n    // build program args\n    List<String> args = new LinkedList<String>();\n    args.add(\"ssh\");\n    args.add(hpcLoginUser + \"@\" + hpcLoginHost);\n    args.add(\"bash\");\n    args.add(runScript);\n    args.add(Long.toString(simId));\n\n    ProcessBuilder builder = new ProcessBuilder(args);\n    logger.debug(builder.command());\n    builder.redirectErrorStream(true);\n\n    try {\n      logger.info(\"Starting simulation ID: \" + simId + \"\");\n      logger.debug(\"Process args: \" + builder.command());\n      Process process = builder.start();\n      BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));\n      String out = br.readLine();\n      Job job = new Job(simId, out);\n      if (job.status == Status.INVALID) throw new RuntimeException(\"Failed to submit job.\");\n      submitted.add(job);\n    } catch (IOException e) {\n      logger.warn(\"Error submitting job\", e);\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6417, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [378], "initializationEnd": [402], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["join(String,List<String>)", "new ServerException(File,*,*)"], "tryExpressionStart": 139, "tryExpressionEnd": 143, "tryBlockStart": 139, "tryBlockEnd": 690, "catchExpressionStart": 515, "catchExpressionEnd": 543, "catchBlockStart": 515, "catchBlockEnd": 617, "exceptionHandlingCallStart": [583, 557], "exceptionHandlingCallEnd": [606, 610], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 434, "focalAPIEnd": 449, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["read(process)", "process.waitFor()"], "useStart": [457, 490], "useEnd": [475, 507], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/tomee/tree/master/itests/failover/src/main/java/org/apache/openejb/server/control/StandaloneServer.java", "rawCode": "  private int command(final List<String> strings) {\n    if (process == null) {\n      throw new ServerNotRunningException(home);\n    }\n\n    try {\n      final List<String> args = new ArrayList<String>();\n      args.add(java.getAbsolutePath());\n      args.add(\"-jar\");\n      args.add(openejbJar.getAbsolutePath());\n      args.addAll(strings);\n\n      final ProcessBuilder builder = new ProcessBuilder(args);\n      final Process command = builder.start();\n      Pipe.read(command);\n      return command.waitFor();\n    } catch (final IOException e) {\n      throw new ServerException(home, Join.join(\" \", strings), e);\n    } catch (final InterruptedException e) {\n      Thread.interrupted();\n    }\n    return -1;\n  }\n"}, {"dataset": "start", "exampleID": 6418, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 288, "focalAPIEnd": 298, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getOutputStream()", "process.getErrorStream()", "process.destroy()"], "useStart": [350, 539, 565], "useEnd": [369, 557, 576], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dstepanov/coffeescript-netbeans/tree/master/src/coffeescript/nb/CoffeeScriptNodeJSCompiler.java", "rawCode": "  private ExecResult execNix(final String output, ProcessBuilder pb) throws Exception {\n    Map<String, String> environment = pb.environment();\n    // Prevent \"env: node: No such file or directory\"\n    environment.put(\"PATH\", environment.get(\"PATH\") + \":/usr/local/bin\");\n    Process p = pb.start();\n    if (output != null) {\n      OutputStream os = p.getOutputStream();\n      os.write(output.getBytes(\"UTF-8\"));\n      os.close();\n    }\n\n    String out = getInputStreamAsString(p.getInputStream());\n    String err = getInputStreamAsString(p.getErrorStream());\n\n    p.destroy();\n\n    ExecResult result = new ExecResult();\n    result.err = err;\n    result.out = out;\n    return result;\n  }\n"}, {"dataset": "start", "exampleID": 6419, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,*)"], "initializationStart": [213], "initializationEnd": [326], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["toString()", "println(*)"], "tryExpressionStart": 389, "tryExpressionEnd": 393, "tryBlockStart": 389, "tryBlockEnd": 522, "catchExpressionStart": 431, "catchExpressionEnd": 454, "catchBlockStart": 431, "catchBlockEnd": 522, "exceptionHandlingCallStart": [481, 462], "exceptionHandlingCallEnd": [494, 495], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [332], "configurationEnd": [368], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 405, "focalAPIEnd": 423, "followUpCheck": "process.exitValue() == 0", "checkType": "IF", "followUpCheckExpressionStart": 1081, "followUpCheckExpressionEnd": 1104, "followUpCheckBlockStart": 1081, "followUpCheckBlockEnd": 1224, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [636, 977], "useEnd": [654, 988], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benschi11/Alt_F4/tree/master/expleo/app/models/Helper.java", "rawCode": "  public static Boolean texToPdf(File tex, File dest) {\n    System.out.println(\"pdf destination: \" + dest.getAbsolutePath());\n    System.out.println(tex.getAbsolutePath());\n    ProcessBuilder texBuilder =\n        new ProcessBuilder(\n            \"pdflatex\", \"-output-directory=\" + dest.getAbsolutePath(), tex.getAbsolutePath());\n    texBuilder.redirectErrorStream(true);\n    Process p;\n    try {\n      p = texBuilder.start();\n    } catch (IOException ex) {\n      System.out.println(ex.toString());\n      return false;\n    }\n    String tmp = null;\n    String error = null;\n    BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));\n    System.out.println(\"latex wird kompiliert\");\n\n    try {\n      while ((tmp = br.readLine()) != null) {\n        System.out.println(\"In while\");\n        error = error + tmp + \"\\n\";\n      }\n\n    } catch (IOException ioe) {\n      System.out.println(ioe.toString());\n    }\n    System.out.println(error);\n\n    try {\n      p.waitFor();\n    } catch (InterruptedException ex) {\n      System.out.println(ex.toString());\n    }\n    if (p.exitValue() == 0) {\n      System.out.println(\"Latex compilition successfull.\");\n      return true;\n    } else {\n      return false;\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6420, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [87], "initializationEnd": [114], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.environment()", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [146, 219], "configurationEnd": [162, 247], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 314, "focalAPIEnd": 324, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getOutputStream()", "process.getInputStream()"], "useStart": [575, 653], "useEnd": [597, 674], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JUrban/flyspeck-git-svn/tree/master/trunk/jHOLLight/src/edu/pitt/math/jhol/test/HOLLightWrapper.java", "rawCode": "  private void init(List<String> command) throws IOException {\n    ProcessBuilder pb = new ProcessBuilder(command);\n    Map<String, String> env = pb.environment();\n    env.put(\"LD_LIBRARY_PATH\", \"/usr/local/lib\");\n\n    pb.redirectErrorStream(true);\n    evalStr = new StringBuilder();\n\n    Process proc;\n    proc = pb.start();\n\n    // String[] env = {\"LD_LIBRARY_PATH=/usr/local/lib\"};\n    // Process proc = Runtime.getRuntime().exec(\"cr_restart --no-restore-pid -f\n    // /home/monad/hol_light_ckpts/cr_current.cr\", env);\n\n    bin = new BufferedWriter(new OutputStreamWriter(proc.getOutputStream()));\n    bout = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n\n    // System.err.println(bout.readLine());\n  }\n"}, {"dataset": "start", "exampleID": 6421, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [387], "initializationEnd": [413], "hasTryCatch": 1, "exceptionType": "InterruptedException", "exceptionHandlingCall": ["Process.destroy()", "toString()", "emitError(String,*)"], "tryExpressionStart": 715, "tryExpressionEnd": 719, "tryBlockStart": 715, "tryBlockEnd": 2005, "catchExpressionStart": 1718, "catchExpressionEnd": 1750, "catchBlockStart": 1718, "catchBlockEnd": 1880, "exceptionHandlingCallStart": [1762, 1831, 1785], "exceptionHandlingCallEnd": [1773, 1844, 1845], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 742, "focalAPIEnd": 752, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.getErrorStream()", "process.waitFor()", "process.destroy()"], "useStart": [821, 915, 1226, 1762], "useEnd": [839, 933, 1237, 1773], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.2.0/src/lib/com/izforge/izpack/installer/ProcessPanelWorker.java", "rawCode": "    public boolean run(AbstractUIProcessHandler handler, VariableSubstitutor vs) {\n      this.handler = handler;\n\n      List<String> params = new ArrayList<String>(this.arguments.size() + 1);\n\n      params.add(vs.substitute(this.filename, \"plain\"));\n\n      for (String argument : this.arguments) {\n        params.add(vs.substitute(argument, \"plain\"));\n      }\n\n      ProcessBuilder pb = new ProcessBuilder(params);\n      Map<String, String> environment = pb.environment();\n      for (String envvar : envvariables) {\n        String ev = vs.substitute(envvar, \"plain\");\n        int i = ev.indexOf(\"=\");\n        if (i > 0) {\n          environment.put(ev.substring(0, i), ev.substring(i + 1));\n        }\n      }\n\n      try {\n\n        Process p = pb.start();\n\n        OutputMonitor stdoutMon = new OutputMonitor(this.handler, p.getInputStream(), false);\n        OutputMonitor stderrMon = new OutputMonitor(this.handler, p.getErrorStream(), true);\n        Thread stdoutThread = new Thread(stdoutMon);\n        Thread stderrThread = new Thread(stderrMon);\n        stdoutThread.setDaemon(true);\n        stderrThread.setDaemon(true);\n        stdoutThread.start();\n        stderrThread.start();\n\n        try {\n          int exitStatus = p.waitFor();\n\n          stopMonitor(stdoutMon, stdoutThread);\n          stopMonitor(stderrMon, stderrThread);\n\n          if (exitStatus != 0) {\n            if (this.handler.askQuestion(\n                    \"Process execution failed\",\n                    \"Continue anyway?\",\n                    AbstractUIHandler.CHOICES_YES_NO,\n                    AbstractUIHandler.ANSWER_YES)\n                == AbstractUIHandler.ANSWER_NO) {\n              return false;\n            }\n          }\n        } catch (InterruptedException ie) {\n          p.destroy();\n          this.handler.emitError(\"process interrupted\", ie.toString());\n          return false;\n        }\n      } catch (IOException ioe) {\n        this.handler.emitError(\"I/O error\", ioe.toString());\n        return false;\n      }\n\n      return true;\n    }\n"}, {"dataset": "start", "exampleID": 6422, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String,String,String,String)"], "initializationStart": [213], "initializationEnd": [323], "hasTryCatch": 1, "exceptionType": "InterruptedException", "exceptionHandlingCall": ["getMessage()", "error(*,*)", "getMessage()", "new TomcatSetupException(*,*)"], "tryExpressionStart": 443, "tryExpressionEnd": 447, "tryBlockStart": 443, "tryBlockEnd": 782, "catchExpressionStart": 528, "catchExpressionEnd": 559, "catchBlockStart": 528, "catchBlockEnd": 659, "exceptionHandlingCallStart": [577, 567, 634, 609], "exceptionHandlingCallEnd": [591, 595, 648, 652], "configuration": ["processBuilder.directory(File)", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [329, 373], "configurationEnd": [367, 413], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 467, "focalAPIEnd": 489, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [509], "useEnd": [520], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/t7mp/maven-t7-plugin/tree/master/src/main/java/com/googlecode/t7mp/ForkedInstance.java", "rawCode": "  private void setStartScriptPermissions(File binDirectory) {\n    if (SystemUtil.isWindowsSystem()) {\n      // do we have filepermissions on windows\n      return;\n    }\n    ProcessBuilder processBuilder =\n        new ProcessBuilder(\n            \"chmod\", \"755\", \"catalina.sh\", \"setclasspath.sh\", \"startup.sh\", \"shutdown.sh\");\n    processBuilder.directory(binDirectory);\n    processBuilder.redirectErrorStream(true);\n    int exitValue = -1;\n    try {\n      Process p = processBuilder.start();\n      exitValue = p.waitFor();\n    } catch (InterruptedException e) {\n      log.error(e.getMessage(), e);\n      throw new TomcatSetupException(e.getMessage(), e);\n    } catch (IOException e) {\n      log.error(e.getMessage(), e);\n      throw new TomcatSetupException(e.getMessage(), e);\n    }\n    log.debug(\"SetStartScriptPermission return value \" + exitValue);\n  }\n"}, {"dataset": "start", "exampleID": 6423, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String[])"], "initializationStart": [272], "initializationEnd": [299], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.environment()"], "configurationStart": [367], "configurationEnd": [395], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 559, "focalAPIEnd": 581, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["grabProcessOutput(process,*,OutputGrabber)"], "useStart": [718], "useEnd": [920], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Cyberspice/platform_tools_base/tree/master/sdk-common/src/main/java/com/android/ide/common/internal/CommandLineRunner.java", "rawCode": "  public void runCmdLine(@NonNull String[] command, @Nullable Map<String, String> envVariableMap)\n      throws IOException, InterruptedException, LoggedErrorException {\n    printCommand(command);\n\n    // launch the command line process\n    ProcessBuilder processBuilder = new ProcessBuilder(command);\n    if (envVariableMap != null) {\n      Map<String, String> env = processBuilder.environment();\n      for (Map.Entry<String, String> entry : envVariableMap.entrySet()) {\n        env.put(entry.getKey(), entry.getValue());\n      }\n    }\n\n    Process process = processBuilder.start();\n\n    // get the output and return code from the process\n    OutputGrabber grabber = new OutputGrabber();\n\n    int returnCode =\n        GrabProcessOutput.grabProcessOutput(\n            process,\n            GrabProcessOutput.Wait\n                .WAIT_FOR_READERS, // we really want to make sure we get all the output!\n            grabber);\n\n    if (returnCode != 0) {\n      throw new LoggedErrorException(returnCode, grabber.mErrors, Joiner.on(' ').join(command));\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6424, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [462], "initializationEnd": [495], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new ComplexMappingException(*,String,*)"], "tryExpressionStart": 584, "tryExpressionEnd": 588, "tryBlockStart": 584, "tryBlockEnd": 1417, "catchExpressionStart": 1262, "catchExpressionEnd": 1282, "catchBlockStart": 1262, "catchBlockEnd": 1417, "exceptionHandlingCallStart": [1296], "exceptionHandlingCallEnd": [1410], "configuration": ["processBuilder.redirectErrorStream(boolean)", "processBuilder.directory(File)"], "configurationStart": [501, 534], "configurationEnd": [528, 578], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 614, "focalAPIEnd": 623, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [1209], "useEnd": [1220], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Camille31/Swip/tree/master/ComplexXML/src/ontology/Ontology.java", "rawCode": "  public void executeTagger(String ontologyPath) throws ComplexMappingException {\n    taggerLoaded = true;\n    List<String> resultingTerm = new ArrayList<String>();\n    resultingTerm.add(\"java\");\n    resultingTerm.add(\"-jar\");\n    resultingTerm.add(\"-Xms1500m\");\n    resultingTerm.add(\"-Xmx1500m\");\n    resultingTerm.add(\"Tagger.jar\");\n    resultingTerm.add(\"\\\"\" + ontologyPath + \"\\\"\");\n    File directory = new File(\"tagger/Tagger.jar\");\n    ProcessBuilder p = new ProcessBuilder(resultingTerm);\n    p.redirectErrorStream(true);\n    p.directory(new File(directory.getParent()));\n    try {\n      final Process x = p.start();\n\n      // scan whatever the matcher outputs on the command line\n      // if any error occurs, this can be discovered by the output\n      ExecutorService executorService = Executors.newSingleThreadExecutor();\n      executorService.execute(\n          new Runnable() {\n            public void run() {\n              Scanner scanner = new Scanner(x.getInputStream());\n              while (scanner.hasNextLine()) {\n                System.out.println(scanner.nextLine());\n              }\n              scanner.close();\n            }\n          });\n\n      // process has been terminated\n      x.waitFor();\n      executorService.shutdown();\n    } catch (Exception e) {\n      throw new ComplexMappingException(\n          ExceptionType.TAGGER_EXCEPTION, \"Cannot create semantic relation file.\", e);\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6425, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(*)"], "initializationStart": [425], "initializationEnd": [480], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.environment()"], "configurationStart": [486], "configurationEnd": [507], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 553, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [553], "useEnd": [578], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.3.1/src/lib/com/izforge/izpack/installer/PrivilegedRunner.java", "rawCode": "  /**\n   * Relaunches the installer with elevated rights.\n   *\n   * @return the status code returned by the launched process (by convention, 0 means a success).\n   * @throws IOException\n   * @throws InterruptedException\n   */\n  public int relaunchWithElevatedRights() throws IOException, InterruptedException {\n    String javaCommand = getJavaCommand();\n    String installer = getInstallerJar();\n    ProcessBuilder builder = new ProcessBuilder(getElevator(javaCommand, installer));\n    builder.environment().put(\"izpack.mode\", \"privileged\");\n    return builder.start().waitFor();\n  }\n"}, {"dataset": "start", "exampleID": 6426, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [538], "initializationEnd": [565], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["CompilationSession.getOutputStream()", "getMessage()", "print(String)"], "tryExpressionStart": 52, "tryExpressionEnd": 56, "tryBlockStart": 52, "tryBlockEnd": 1322, "catchExpressionStart": 1202, "catchExpressionEnd": 1222, "catchBlockStart": 1202, "catchBlockEnd": 1322, "exceptionHandlingCallStart": [1083, 1294, 1230], "exceptionHandlingCallEnd": [1108, 1308, 1315], "configuration": ["processBuilder.redirectErrorStream(boolean)", "processBuilder.directory(File)"], "configurationStart": [573, 614], "configurationEnd": [606, 668], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 834, "focalAPIEnd": 849, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [875], "useEnd": [899], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Caltoopia/caltoopia/tree/master/org.caltoopia.analysis/src/org/caltoopia/analysis/test/Analysis.java", "rawCode": "  public void sdf3Analysis(AnalysisType type) {\n    try {\n      List<String> command = new ArrayList<String>();\n      String graphName =\n          session.getOutputFolder()\n              + File.separator\n              + session.getElaboratedNetwork().getType().getName()\n              + \"_\"\n              + type.getName().toLowerCase()\n              + \".xml\";\n      command.add(\"/bin/bash\");\n      command.add(sdf3Path + \"/sdf3analysis.sh\");\n      command.add(graphName);\n      command.add(type.getName());\n      ProcessBuilder builder = new ProcessBuilder(command);\n      builder.redirectErrorStream(true);\n      builder.directory(new File(session.getOutputFolder()));\n\n      if (!session.getRunOptions().isEmpty()) {\n        for (String s : session.getRunOptions().split(\" \")) command.add(s);\n      }\n\n      final Process process = builder.start();\n\n      InputStream is = process.getInputStream();\n      InputStreamReader isr = new InputStreamReader(is);\n      BufferedReader br = new BufferedReader(isr);\n      String line;\n      while ((line = br.readLine()) != null) {\n        session.getOutputStream().println(line);\n      }\n      session.getOutputStream().println(\"Program terminated!\");\n    } catch (Exception x) {\n      session.getOutputStream().print(\"Failed to execute binary! (\" + x.getMessage() + \")\");\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6427, "initialization": ["ProcessBuilder processBuilder = getFS()"], "initializationStart": [139], "initializationEnd": [152], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getMessage()", "new TransportException(*,*,*)"], "tryExpressionStart": 76, "tryExpressionEnd": 80, "tryBlockStart": 76, "tryBlockEnd": 749, "catchExpressionStart": 654, "catchExpressionEnd": 678, "catchBlockStart": 654, "catchBlockEnd": 749, "exceptionHandlingCallStart": [720, 692], "exceptionHandlingCallEnd": [736, 742], "configuration": ["processBuilder.directory(File)", "processBuilder.environment()"], "configurationStart": [182, 291], "configurationEnd": [210, 309], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 634, "focalAPIEnd": 646, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pdinc-oss/jgit/tree/master/org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportLocal.java", "rawCode": "  protected Process spawn(final String cmd) throws TransportException {\n    try {\n      String[] args = {\".\"};\n      ProcessBuilder proc = local.getFS().runInShell(cmd, args);\n      proc.directory(remoteGitDir);\n\n      // Remove the same variables CGit does.\n      Map<String, String> env = proc.environment();\n      env.remove(\"GIT_ALTERNATE_OBJECT_DIRECTORIES\");\n      env.remove(\"GIT_CONFIG\");\n      env.remove(\"GIT_CONFIG_PARAMETERS\");\n      env.remove(\"GIT_DIR\");\n      env.remove(\"GIT_WORK_TREE\");\n      env.remove(\"GIT_GRAFT_FILE\");\n      env.remove(\"GIT_INDEX_FILE\");\n      env.remove(\"GIT_NO_REPLACE_OBJECTS\");\n\n      return proc.start();\n    } catch (IOException err) {\n      throw new TransportException(uri, err.getMessage(), err);\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6428, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String,String)"], "initializationStart": [89], "initializationEnd": [173], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 179, "focalAPIEnd": 194, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kompiro/quick-junit/tree/master/experimental/learning/junit.extensions.eclipse.quick.learning/src/Learning.java", "rawCode": "  @Test\n  public void testname() throws Exception {\n    ProcessBuilder builder =\n        new ProcessBuilder(\"/usr/local/bin/growlnotify\", \"-n\", \"Quick JUnit\", \"Quick JUnit\");\n    builder.start();\n  }\n"}, {"dataset": "start", "exampleID": 6429, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["println(String)", "printStackTrace()"], "tryExpressionStart": 485, "tryExpressionEnd": 489, "tryBlockStart": 485, "tryBlockEnd": 777, "catchExpressionStart": 683, "catchExpressionEnd": 703, "catchBlockStart": 683, "catchBlockEnd": 777, "exceptionHandlingCallStart": [711, 751], "exceptionHandlingCallEnd": [743, 770], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 517, "focalAPIEnd": 560, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sMau/Beamer/tree/master/BeamerDesktop/Tests/de/netprojectev/tests/gui/TestVLCPlaying.java", "rawCode": "  public static void main(String[] args) throws IOException {\n\n    final ArrayList<String> vlcStartCommand = new ArrayList<String>();\n    vlcStartCommand.add(\"vlc\");\n    vlcStartCommand.add(\"-f\");\n    vlcStartCommand.add(\"--no-video-title-show\");\n    vlcStartCommand.add(\"--play-and-exit\");\n    vlcStartCommand.add(\n        \"/media/truecrypt1/JDown/tvs-poi-dd51-ded-dl-7p-ithd-avc/Person.of.Interest.S02E09.Liebesgruesse.aus.Estland.German.DD51.Dubbed.DL.720p.iTunesHD.AVC-TVS\");\n\n    try {\n      final Process vlc = new ProcessBuilder(vlcStartCommand).start();\n\n      /*\n       * startLogReader(vlc.getInputStream());\n       * startLogReader(vlc.getErrorStream());\n       */\n\n    } catch (Exception e) {\n      System.out.println(\"catched!!!\");\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6430, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(*)"], "initializationStart": [425], "initializationEnd": [480], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.environment()"], "configurationStart": [486], "configurationEnd": [507], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 553, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [553], "useEnd": [578], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/trunk/src/lib/com/izforge/izpack/installer/PrivilegedRunner.java", "rawCode": "  /**\n   * Relaunches the installer with elevated rights.\n   *\n   * @return the status code returned by the launched process (by convention, 0 means a success).\n   * @throws IOException\n   * @throws InterruptedException\n   */\n  public int relaunchWithElevatedRights() throws IOException, InterruptedException {\n    String javaCommand = getJavaCommand();\n    String installer = getInstallerJar();\n    ProcessBuilder builder = new ProcessBuilder(getElevator(javaCommand, installer));\n    builder.environment().put(\"izpack.mode\", \"privileged\");\n    return builder.start().waitFor();\n  }\n"}, {"dataset": "start", "exampleID": 6431, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder()"], "initializationStart": [314], "initializationEnd": [334], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.command(ArrayList<String>)", "processBuilder.redirectErrorStream(boolean)", "processBuilder.directory(File)"], "configurationStart": [475, 509, 552], "configurationEnd": [503, 546, 594], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 619, "focalAPIEnd": 638, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [751, 802], "useEnd": [775, 819], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jacob-carlborg/descent/tree/master/descent.compiler/src-util/melnorme/utilbox/misc/MiscUtil.java", "rawCode": "  /**\n   * Runs a shell command as a Process and waits for it to terminate. Assumes the process does not\n   * read input.\n   *\n   * @return exit value of the process\n   */\n  public static int runShellCommand(String directory, String cmd, String... args)\n      throws IOException {\n    ProcessBuilder procBuilder = new ProcessBuilder();\n    ArrayList<String> cmdList = new ArrayList<String>(args.length + 1);\n    cmdList.add(cmd);\n    cmdList.addAll(Arrays.asList(args));\n    procBuilder.command(cmdList);\n    procBuilder.redirectErrorStream(true);\n    procBuilder.directory(new File(directory));\n\n    Process process = procBuilder.start();\n    // read proccess's stdout and stderr, so it doesn't get stuck in I/O\n    StreamUtil.readAllBytesFromStream(process.getInputStream());\n\n    try {\n      return process.waitFor();\n    } catch (InterruptedException e) {\n      throw melnorme.utilbox.core.ExceptionAdapter.unchecked(e);\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6432, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [278], "initializationEnd": [305], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 332, "focalAPIEnd": 347, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [473], "useEnd": [493], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mdiponio/sahara-labs-rig-client-commons/tree/master/src/au/edu/labshare/rigclient/action/access/RemoteDesktopAccessAction.java", "rawCode": "  /**\n   * Executes the access action specified using the command and working directory\n   *\n   * @param command\n   * @return Process\n   * @throws Exception\n   */\n  private Process executeCommand(final List<String> command) throws Exception {\n    final ProcessBuilder builder = new ProcessBuilder(command);\n    Process accessProc = builder.start();\n    this.logger.info(\n        \"The Remote Desktop Access Action has invoked the command: \" + command.toString() + '.');\n    accessProc.waitFor();\n\n    return accessProc;\n  }\n"}, {"dataset": "start", "exampleID": 6433, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(*,String,String,String,String)"], "initializationStart": [456], "initializationEnd": [705], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)", "processBuilder.directory(File)"], "configurationStart": [3538, 3640], "configurationEnd": [3566, 3668], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 4046, "focalAPIEnd": 4056, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ProcessLogConsumer(*,process)"], "useStart": [4158], "useEnd": [4203], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CSEMike/OneSwarm/tree/master/javatests/edu/washington/cs/oneswarm/test/integration/oop/LocalOneSwarm.java", "rawCode": "  /** Asynchronously starts the process associated with this instance. */\n  public void start() throws IOException {\n\n    state = State.STARTING;\n\n    StringBuilder propertiesString = new StringBuilder();\n    for (String property : config.systemProperties.keySet()) {\n      propertiesString.append(\" -D\" + property + \"=\" + config.systemProperties.get(property));\n    }\n\n    // Construct a ProcessBuilder with common options\n    ProcessBuilder pb =\n        new ProcessBuilder(\n            config.javaPath,\n            \"-Xmx256m\",\n            \"-Ddebug.war=\" + new File(rootPath, config.warRootPath),\n            \"-Dazureus.security.manager.install=0\",\n            \"-DMULTI_INSTANCE=true\" + propertiesString);\n\n    List<String> command = pb.command();\n\n    // Add platform-specific options\n    if (Constants.isOSX) {\n      command.add(\"-XstartOnFirstThread\");\n    }\n\n    // Add classpath\n    StringBuilder cpString = new StringBuilder();\n    for (String path : config.classPathElements) {\n      File entry = new File(rootPath, path);\n      if (entry.exists() == false) {\n        logger.warning(\"Classpath entry not found: \" + entry.getAbsolutePath());\n      }\n      cpString.append(entry.getAbsolutePath());\n      cpString.append(File.pathSeparator);\n    }\n    command.add(\"-cp\");\n    // -1 because of the spurious ':' at the end\n    command.add(cpString.substring(0, cpString.length() - 1));\n\n    // Configure system properties for test instances\n    Map<String, String> scratchPaths = TestUtils.createScratchLocationsForTest(config.label);\n    logger.info(config.getLabel() + \" paths: \" + scratchPaths);\n\n    /*\n     * Create the experimental config file that will register this client\n     * with our locally running coordination server.\n     */\n    PrintStream experimentalConfig =\n        new PrintStream(new FileOutputStream(scratchPaths.get(\"experimentalConfig\")));\n    experimentalConfig.println(\n        \"inject edu.washington.cs.oneswarm.test.integration.oop.LocalOneSwarmExperiment\");\n    experimentalConfig.println(\"name \" + config.getLabel());\n    experimentalConfig.println(\"register http://127.0.0.1:\" + coordinator.getServerPort() + \"/s\");\n    // Disable lan-, cht-, dht-friend connect\n    // experimentalConfig.println(\"booleanSetting OSF2F.Use@DHT@Proxy false\");\n    // experimentalConfig.println(\"booleanSetting OSF2F.LanFriendFinder false\");\n    // experimentalConfig.println(\"booleanSetting dht.enabled false\");\n    // Make it communicate regularly for shorter test timeouts.\n    experimentalConfig.println(\"setprop oneswarm.test.coordinator.poll 1\");\n    experimentalConfig.close();\n\n    // Add the appropriate config properties\n    command.add(\"-Doneswarm.integration.test=1\");\n    command.add(\"-Doneswarm.integration.user.data=\" + scratchPaths.get(\"userData\"));\n    command.add(\"-Dazureus.config.path=\" + scratchPaths.get(\"userData\"));\n    command.add(\"-Doneswarm.integration.web.ui.port=\" + config.getWebUiPort());\n    command.add(\"-Doneswarm.integration.start.server.port=\" + config.getStartServerPort());\n    command.add(\"-Doneswarm.experimental.config.file=\" + scratchPaths.get(\"experimentalConfig\"));\n    command.add(\"-Dnolaunch_startup=1\");\n    command.add(\"-Doneswarm.test.coordinator.poll=2\");\n\n    if (Constants.isWindows) {\n      command.add(\n          \"-Djava.library.path=\" + (new File(rootPath, \"build/core-libs/dll\").getAbsolutePath()));\n    }\n\n    // Main class\n    command.add(\"com.aelitis.azureus.ui.Main\");\n\n    // Kick-off: merge stderr and stdout, set the working directory, and\n    // start.\n    pb.redirectErrorStream(true);\n    File workingDirFile = new File(scratchPaths.get(\"workingDir\"));\n    pb.directory(workingDirFile);\n\n    // If there's a local logging.properties here, copy it to the\n    // workingDir.\n    File localLoggingProperties = new File(\"logging.properties\");\n    if (localLoggingProperties.exists()) {\n      Files.copy(localLoggingProperties, new File(workingDirFile, \"logging.properties\"));\n      logger.info(\"Copied local logging.properties to OOP instace.\");\n    }\n\n    process = pb.start();\n\n    logger.info(\"Forked OneSwarm instance: \" + config.label);\n\n    // Consume the unified log.\n    new ProcessLogConsumer(config.label, process).start();\n\n    // Make sure this process gets torn down when if the test is killed\n    Runtime.getRuntime().addShutdownHook(cancelThread);\n  }\n"}, {"dataset": "start", "exampleID": 6434, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(ArrayList<String>)"], "initializationStart": [735], "initializationEnd": [762], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 768, "focalAPIEnd": 783, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sMau/Beamer/tree/master/BeamerDesktop/src/de/netprojectev/client/gui/main/Misc.java", "rawCode": "  /**\n   * Restarts the currently running jar file using the process builder.\n   *\n   * @throws URISyntaxException\n   * @throws IOException\n   */\n  public static void restartApplication(Class<?> clazz) throws URISyntaxException, IOException {\n    final String javaBin =\n        System.getProperty(\"java.home\") + File.separator + \"bin\" + File.separator + \"java\";\n    final File currentJar =\n        new File(clazz.getProtectionDomain().getCodeSource().getLocation().toURI());\n\n    if (!currentJar.getName().endsWith(\".jar\")) {\n      return;\n    }\n\n    final ArrayList<String> command = new ArrayList<String>();\n    command.add(javaBin);\n    command.add(\"-jar\");\n    command.add(currentJar.getPath());\n    final ProcessBuilder builder = new ProcessBuilder(command);\n    builder.start();\n    System.exit(0);\n  }\n"}, {"dataset": "start", "exampleID": 6435, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [724], "initializationEnd": [751], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 771, "focalAPIEnd": 781, "followUpCheck": "process.exitValue() == 0", "checkType": "IF", "followUpCheckExpressionStart": 891, "followUpCheckExpressionEnd": 914, "followUpCheckBlockStart": 891, "followUpCheckBlockEnd": 1326, "use": ["commandOutput(process)", "process.exitValue()"], "useStart": [805, 895], "useEnd": [821, 908], "hasFinally": 1, "cleanUpCall": ["BufferedReader.close()"], "finallyExpressionStart": 1357, "finallyExpressionEnd": 1365, "finallyBlockStart": 1357, "finallyBlockEnd": 1424, "cleanUpCallStart": [1399], "cleanUpCallEnd": [1409], "url": "https://github.com/visage-lang/netbeans-plugin/tree/master/installer/servicetag-src/org/netbeans/modules/servicetag/Registry.java", "rawCode": "  /**\n   * Returns the service tags of the specified <tt>product_urn</tt> in this registry.\n   *\n   * @param productURN the <tt>product_urn</tt> to look up\n   * @return a {@code Set} of {@code ServiceTag} objects of the specified <tt>product_urn</tt> in\n   *     this registry.\n   * @throws java.io.IOException if an I/O error occurs in this operation.\n   */\n  public Set<ServiceTag> findServiceTags(String productURN) throws IOException {\n    if (productURN == null) {\n      throw new NullPointerException(\"productURN is null\");\n    }\n\n    List<String> command = getCommandList();\n    command.add(\"-f\");\n    command.add(\"-t\");\n    command.add(productURN);\n\n    BufferedReader in = null;\n    try {\n      ProcessBuilder pb = new ProcessBuilder(command);\n      Process p = pb.start();\n      String output = commandOutput(p);\n\n      Set<ServiceTag> instances = new HashSet<ServiceTag>();\n      if (p.exitValue() == 0) {\n        // parse the service tag output from stclient\n        in = new BufferedReader(new StringReader(output));\n        String line = null;\n        while ((line = in.readLine()) != null) {\n          String s = line.trim();\n          if (s.startsWith(\"urn:st:\")) {\n            instances.add(getServiceTag(s));\n          }\n        }\n      } else {\n        checkReturnError(p.exitValue(), output, null);\n      }\n      return instances;\n    } finally {\n      if (in != null) {\n        in.close();\n      }\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6436, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [322], "initializationEnd": [346], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.directory(File)", "processBuilder.environment()", "processBuilder.environment()"], "configurationStart": [352, 394, 446], "configurationEnd": [388, 410, 462], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 657, "focalAPIEnd": 667, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ruby-debug/debug-commons-java/tree/master/test/org/rubyforge/debugcommons/DebuggerTestBase.java", "rawCode": "  /** Start debuggee process without attaching to it. */\n  protected Process startDebuggerProcess(final File toTest, final int port) throws IOException {\n    List<String> args =\n        Arrays.asList(\n            PATH_TO_RDEBUG_IDE, \"-p\", \"\" + port, \"--xml-debug\", \"--\", toTest.getAbsolutePath());\n    ProcessBuilder pb = new ProcessBuilder(args);\n    pb.directory(toTest.getParentFile());\n    pb.environment().putAll(tweakTestProcessEnvironment(pb.environment()));\n    LOGGER.fine(\n        \"Running [basedir: \"\n            + toTest.getParentFile().getPath()\n            + \"]: \\\"\"\n            + Util.getProcessAsString(args)\n            + \"\\\"\");\n    return pb.start();\n  }\n"}, {"dataset": "start", "exampleID": 6437, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String)"], "initializationStart": [76], "initializationEnd": [122], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": [], "tryExpressionStart": 185, "tryExpressionEnd": 189, "tryBlockStart": 185, "tryBlockEnd": 491, "catchExpressionStart": 422, "catchExpressionEnd": 442, "catchBlockStart": 422, "catchBlockEnd": 491, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.directory(File)"], "configurationStart": [128], "configurationEnd": [152], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 209, "focalAPIEnd": 219, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [292], "useEnd": [310], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/papyri/navigator/tree/master/pn-sync/src/main/java/info/papyri/sync/GitWrapper.java", "rawCode": "  public static String getHead() throws Exception {\n    ProcessBuilder pb = new ProcessBuilder(\"git\", \"rev-parse\", \"HEAD\");\n    pb.directory(git.gitDir);\n    String newhead = null;\n    try {\n      Process p = pb.start();\n      BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\n      String line;\n      while ((line = reader.readLine()) != null) {\n        newhead = line;\n      }\n    } catch (Exception e) {\n      git.success = false;\n      throw e;\n    }\n    return newhead;\n  }\n"}, {"dataset": "start", "exampleID": 6438, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new SystemUtilsException(*)"], "tryExpressionStart": 188, "tryExpressionEnd": 192, "tryBlockStart": 188, "tryBlockEnd": 731, "catchExpressionStart": 610, "catchExpressionEnd": 638, "catchBlockStart": 610, "catchBlockEnd": 686, "exceptionHandlingCallStart": [652], "exceptionHandlingCallEnd": [679], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 234, "focalAPIEnd": 307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [321], "useEnd": [345], "hasFinally": 1, "cleanUpCall": ["close(InputStream)"], "finallyExpressionStart": 687, "finallyExpressionEnd": 695, "finallyBlockStart": 687, "finallyBlockEnd": 731, "cleanUpCallStart": [703], "cleanUpCallEnd": [724], "url": "https://github.com/Wigglez/Senior-Project/tree/master/Archive/Dragons' Reign/zones/examples/AndEngine_Example/src/org/andengine/util/system/SystemUtils.java", "rawCode": "  private static MatchResult matchSystemFile(\n      final String pSystemFile, final String pPattern, final int pHorizon)\n      throws SystemUtilsException {\n    InputStream in = null;\n    try {\n      final Process process =\n          new ProcessBuilder(new String[] {\"/system/bin/cat\", pSystemFile}).start();\n\n      in = process.getInputStream();\n      final Scanner scanner = new Scanner(in);\n\n      final boolean matchFound = scanner.findWithinHorizon(pPattern, pHorizon) != null;\n      if (matchFound) {\n        return scanner.match();\n      } else {\n        throw new SystemUtilsException();\n      }\n    } catch (final IOException e) {\n      throw new SystemUtilsException(e);\n    } finally {\n      StreamUtils.close(in);\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6439, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(*)"], "initializationStart": [166], "initializationEnd": [205], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [287], "configurationEnd": [320], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 344, "focalAPIEnd": 359, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [365], "useEnd": [382], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tdgunes/graydeer/tree/master/GrayDeer/src/server/Executer.java", "rawCode": "  public void executeWithoutInputs() throws IOException, InterruptedException {\n    // ProcessBuilder is defiend with the argsForProcess\n    ProcessBuilder builder = new ProcessBuilder(this.argsForProcess);\n    // it is run and waited until the executed program finishes its runtime\n    builder.redirectErrorStream(true);\n    Process process = builder.start();\n    process.waitFor();\n  }\n"}, {"dataset": "start", "exampleID": 6440, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(*)"], "initializationStart": [171], "initializationEnd": [208], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [214], "configurationEnd": [247], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 275, "focalAPIEnd": 290, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [306], "useEnd": [330], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MMS-Projects/2stream/tree/master/src/net/mms_projects/tostream/FfmpegWrapper.java", "rawCode": "  public void startEncoder() throws IOException, Exception {\n    if (running) {\n      throw new Exception(\"FFmpeg is already running\");\n    }\n    ProcessBuilder builder = new ProcessBuilder(compileSettings());\n    builder.redirectErrorStream(true);\n    try {\n      process = builder.start();\n      input = process.getInputStream();\n      reader = new BufferedReader(new InputStreamReader(input));\n      running = true;\n      for (EncoderOutputListener listener : listeners) {\n        listener.onStart();\n      }\n    } catch (IOException e) {\n      throw e;\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6441, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String)"], "initializationStart": [608], "initializationEnd": [653], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getLocalizedMessage()", "new ParserException(String,*)"], "tryExpressionStart": 1010, "tryExpressionEnd": 1014, "tryBlockStart": 1010, "tryBlockEnd": 1343, "catchExpressionStart": 1234, "catchExpressionEnd": 1256, "catchBlockStart": 1234, "catchBlockEnd": 1343, "exceptionHandlingCallStart": [1309, 1270], "exceptionHandlingCallEnd": [1332, 1336], "configuration": ["processBuilder.environment()"], "configurationStart": [685], "configurationEnd": [706], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 1026, "focalAPIEnd": 1041, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()", "process.getErrorStream()", "process.destroy()"], "useStart": [1115, 1374, 1525, 1916], "useEnd": [1133, 1385, 1543, 1927], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/avakar/stanse/tree/master/src/cz/muni/stanse/cparser/CUnit.java", "rawCode": "  private void preprocess() throws ParserException {\n    typedefs = new LinkedList<String>();\n    Process p;\n    String line;\n\n    // this is necessary\n    // the environment is modified only AFTER the command is\n    // executed!\n    String command =\n        Stanse.getInstance().getRootDirectory()\n            + File.separator\n            + \"bin\"\n            + File.separator\n            + \"stpreproc\";\n    String jobEntry = \"{\" + args.get(0) + \"}\";\n    for (int i = 1; i < args.size(); ++i) {\n      jobEntry += \",{\";\n      jobEntry += args.get(i);\n      jobEntry += \"}\";\n    }\n    ProcessBuilder builder = new ProcessBuilder(\"perl\", command, jobEntry);\n    Map<String, String> env = builder.environment();\n    if (env.containsKey(\"Path\")) {\n      env.put(\"PATH\", env.get(\"Path\"));\n      env.remove(\"Path\");\n    }\n    env.put(\n        \"PATH\",\n        env.get(\"PATH\")\n            + File.pathSeparator\n            + Stanse.getInstance().getRootDirectory()\n            + File.separator\n            + \"bin\");\n    try {\n      p = builder.start();\n\n      BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\n      while ((line = reader.readLine()) != null) typedefs.add(line);\n      reader.close();\n    } catch (IOException e) {\n      throw new ParserException(\"preprocessor: \" + e.getLocalizedMessage(), e);\n    }\n\n    try {\n      int retval = p.waitFor();\n      if (retval != 0) {\n        ClassLogger.error(this, \"preprocessor failed. stderr follows:\");\n        try {\n          StreamAlgo.copy(p.getErrorStream(), System.err);\n        } catch (IOException e) {\n          ClassLogger.error(this, \"Failed to dump stderr\");\n        }\n        ClassLogger.error(this, \"========== stderr end\");\n        throw new ParserException(\"preprocessor failed: \" + Integer.toString(retval));\n      }\n    } catch (InterruptedException e) {\n      throw new ParserException(\"preprocessor\", e);\n    }\n    p.destroy();\n  }\n"}, {"dataset": "start", "exampleID": 6442, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String,String,*,String,*,*)"], "initializationStart": [193], "initializationEnd": [421], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getMessage()"], "tryExpressionStart": 428, "tryExpressionEnd": 432, "tryBlockStart": 428, "tryBlockEnd": 707, "catchExpressionStart": 526, "catchExpressionEnd": 550, "catchBlockStart": 526, "catchBlockEnd": 630, "exceptionHandlingCallStart": [607], "exceptionHandlingCallEnd": [623], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 458, "focalAPIEnd": 468, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [500], "useEnd": [517], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/quattor/pan/tree/master/panc/src/test/java/org/quattor/pan/ScriptCompilerTest.java", "rawCode": "  protected Object runCompilerViaScript(File tplfile, File dir, String format) {\n\n    Object value = null;\n    String panc = getPancScript().getAbsolutePath();\n\n    ProcessBuilder pb =\n        new ProcessBuilder(\n            panc,\n            \"-x\",\n            format,\n            \"-O\",\n            getTmpdir().getAbsolutePath(),\n            \"-I\",\n            dir.getAbsolutePath(),\n            tplfile.getAbsolutePath());\n\n    try {\n      Process process = pb.start();\n      value = Integer.valueOf(process.waitFor());\n    } catch (IOException ioe) {\n      value = \"IO exception while running process: \" + ioe.getMessage();\n    } catch (InterruptedException ie) {\n      value = \"process interrupted\";\n    }\n\n    return value;\n  }\n"}, {"dataset": "start", "exampleID": 6443, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String[])"], "initializationStart": [507], "initializationEnd": [530], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 574, "focalAPIEnd": 584, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [650, 908], "useEnd": [668, 919], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmyroadctfig/unexceptional-javac/tree/master/test/tools/javac/api/ToolProvider/HelloWorldTest.java", "rawCode": "  void run() throws Exception {\n    File javaHome = new File(System.getProperty(\"java.home\"));\n    if (javaHome.getName().equals(\"jre\")) javaHome = javaHome.getParentFile();\n    File javaExe = new File(new File(javaHome, \"bin\"), \"java\");\n    String classpath = System.getProperty(\"java.class.path\");\n\n    String[] cmd = {\n      javaExe.getPath(),\n      \"-verbose:class\",\n      \"-classpath\",\n      classpath,\n      HelloWorldTest.class.getName(),\n      \"Hello\",\n      \"World\"\n    };\n\n    ProcessBuilder pb = new ProcessBuilder(cmd).redirectErrorStream(true);\n    Process p = pb.start();\n    BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));\n    String line;\n    while ((line = r.readLine()) != null) {\n      System.err.println(line);\n      if (line.contains(\"javax.tools.ToolProvider\") || line.contains(\"com.sun.tools.javac.\"))\n        error(\">>> \" + line);\n    }\n    int rc = p.waitFor();\n    if (rc != 0) error(\"Unexpected exit code: \" + rc);\n\n    if (errors > 0) throw new Exception(errors + \" errors occurred\");\n  }\n"}, {"dataset": "start", "exampleID": 6444, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String)"], "initializationStart": [115], "initializationEnd": [159], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 180, "focalAPIEnd": 190, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [216], "useEnd": [230], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_dalvik/tree/master/tests/063-process-manager/src/Main.java", "rawCode": "  private static void child() throws Exception {\n    System.out.println(\"spawning child\");\n    ProcessBuilder pb = new ProcessBuilder(\"/system/bin/sleep\", \"5\");\n    Process proc = pb.start();\n    checkManager();\n    proc.waitFor();\n    System.out.println(\"child died\");\n  }\n"}, {"dataset": "start", "exampleID": 6445, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder()"], "initializationStart": [97], "initializationEnd": [117], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.directory(File)", "processBuilder.command(String[])", "processBuilder.redirectError(File)", "processBuilder.redirectOutput(File)", "processBuilder.redirectInput(File)"], "configurationStart": [149, 179, 201, 256, 312], "configurationEnd": [166, 194, 250, 306, 362], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 606, "focalAPIEnd": 616, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [640], "useEnd": [657], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TheSmash/revolance-ui/tree/master/materials/commons/src/main/java/com/smash/revolance/ui/materials/CmdlineHelper.java", "rawCode": "  public CmdlineHelper exec() throws InterruptedException, IOException {\n    ProcessBuilder pb = new ProcessBuilder();\n\n    if (dir != null) {\n      pb.directory(dir);\n    }\n\n    pb.command(cmd);\n\n    pb.redirectError(ProcessBuilder.Redirect.to(err));\n    pb.redirectOutput(ProcessBuilder.Redirect.to(out));\n    pb.redirectInput(ProcessBuilder.Redirect.from(in));\n\n    System.out.println(\"Executing cmd: \" + cmd[0] + \" from dir: \" + dir);\n    System.out.println(\"Redirecting out to: \" + out.getAbsolutePath());\n    System.out.println(\"Redirecting err to: \" + err.getAbsolutePath());\n\n    Process process = pb.start();\n    if (sync) {\n      process.waitFor();\n    }\n\n    this.process = process;\n\n    return this;\n  }\n"}, {"dataset": "start", "exampleID": 6446, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "InterruptedException", "exceptionHandlingCall": ["currentThread()", "interrupt()"], "tryExpressionStart": 83, "tryExpressionEnd": 87, "tryBlockStart": 83, "tryBlockEnd": 650, "catchExpressionStart": 286, "catchExpressionEnd": 317, "catchBlockStart": 286, "catchBlockEnd": 374, "exceptionHandlingCallStart": [329, 329], "exceptionHandlingCallEnd": [351, 363], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 107, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [146, 239], "useEnd": [164, 250], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/inspector-cochise/cochise/tree/master/CochiseCore/src/main/java/org/akquinet/audit/bsi/httpd/software/Quest2.java", "rawCode": "  private String getProcessOutput(ProcessBuilder pb) {\n    String output = \"\";\n    try {\n      Process p = pb.start();\n      InputStream stdOut = p.getInputStream();\n      boolean wait = true;\n\n      while (wait) {\n        try {\n          p.waitFor();\n          wait = false;\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n\n      StringBuffer buf = new StringBuffer();\n      int b = stdOut.read();\n      while (b != -1) {\n        buf.append((char) b);\n        b = stdOut.read();\n      }\n      output = buf.toString();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return output;\n  }\n"}, {"dataset": "start", "exampleID": 6447, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String[])"], "initializationStart": [4835], "initializationEnd": [4857], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["int.printStackTrace()"], "tryExpressionStart": 5193, "tryExpressionEnd": 5197, "tryBlockStart": 5193, "tryBlockEnd": 5295, "catchExpressionStart": 5227, "catchExpressionEnd": 5247, "catchBlockStart": 5227, "catchBlockEnd": 5295, "exceptionHandlingCallStart": [5255], "exceptionHandlingCallEnd": [5274], "configuration": ["processBuilder.directory(File)", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [4973, 5007], "configurationEnd": [5001, 5035], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 5209, "focalAPIEnd": 5219, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [5584], "useEnd": [5602], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/grpatter/B490PageRank/tree/master/ClassResources/mpj-v0_38/src/runtime/starter/MulticoreDaemon.java", "rawCode": "  public void startNewProcess(\n      String mcClassName,\n      int numOfProcessors,\n      String workingDirectory,\n      String jarName,\n      int classOrJar)\n      throws Exception {\n\n    String cmdClassPath = \"EMPTY\";\n\n    numOfProcs = Runtime.getRuntime().availableProcessors();\n    InetAddress localaddr = InetAddress.getLocalHost();\n    hostName = localaddr.getHostName();\n\n    Map<String, String> map = System.getenv();\n    mpjHomeDir = map.get(\"MPJ_HOME\");\n\n    if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n      MPJRun.logger.debug(\"mpjHomeDir \" + mpjHomeDir);\n      MPJRun.logger.debug(\"McDaemon is waiting to accept connections ... \");\n      MPJRun.logger.debug(\"wdir \" + wdir);\n      MPJRun.logger.debug(\"A client has connected\");\n    }\n\n    if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n      MPJRun.logger.debug(\"the daemon will start <\" + processes + \"> threads\");\n    }\n\n    String[] jArgs = jvmArgs.toArray(new String[0]);\n\n    boolean now = false;\n    boolean noSwitch = true;\n\n    for (int e = 0; e < jArgs.length; e++) {\n\n      if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n        MPJRun.logger.debug(\"jArgs[\" + e + \"]=\" + jArgs[e]);\n      }\n\n      if (now) {\n        cmdClassPath = jvmArgs.remove(e);\n\n        if (cmdClassPath.matches(\"(?i).*mpj.jar.*\")) {\n          // System.out.println(\"before <\"+cmdClassPath+\">\");\n          // System.out.println(\"mpj.jar is present ...\") ;\n          cmdClassPath = cmdClassPath.replaceAll(\"mpj\\\\.jar\", \"mpi.jar\");\n          // cmdClassPath.replaceAll(Pattern.quote(\"mpj.jar\"),\n          // Matcher.quoteReplacement(\"mpi.jar\")) ;\n          // System.out.println(\"after <\"+cmdClassPath+\">\");\n          // System.exit(0) ;\n        }\n\n        String cp =\n            mpjHomeDir\n                + \"/lib/smpdev.jar\"\n                + File.pathSeparator\n                + \"\"\n                + mpjHomeDir\n                + \"/lib/xdev.jar\"\n                + File.pathSeparator\n                + \"\"\n                + mpjHomeDir\n                + \"/lib/mpjbuf.jar\"\n                + File.pathSeparator\n                + \"\"\n                + mpjHomeDir\n                + \"/lib/loader2.jar\"\n                + File.pathSeparator\n                + \"\"\n                + mpjHomeDir\n                + \"/lib/starter.jar\"\n                + File.pathSeparator\n                + \"\"\n                + mpjHomeDir\n                + \"/lib/mpiExp.jar\";\n\n        if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n          MPJRun.logger.debug(\"cp = \" + cp);\n        }\n\n        jvmArgs.add(e, cp);\n        now = false;\n      }\n\n      if (jArgs[e].equals(\"-cp\")) {\n        now = true;\n        noSwitch = false;\n      }\n    }\n\n    if (noSwitch) {\n      jvmArgs.add(\"-cp\");\n\n      String cp =\n          mpjHomeDir\n              + \"/lib/smpdev.jar\"\n              + File.pathSeparator\n              + \"\"\n              + mpjHomeDir\n              + \"/lib/xdev.jar\"\n              + File.pathSeparator\n              + \"\"\n              + mpjHomeDir\n              + \"/lib/mpjbuf.jar\"\n              + File.pathSeparator\n              + \"\"\n              + mpjHomeDir\n              + \"/lib/loader2.jar\"\n              + File.pathSeparator\n              + \"\"\n              + mpjHomeDir\n              + \"/lib/starter.jar\"\n              + File.pathSeparator\n              + \"\"\n              + mpjHomeDir\n              + \"/lib/mpiExp.jar\";\n\n      jvmArgs.add(cp);\n\n      if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n        MPJRun.logger.debug(\"cp = \" + cp);\n      }\n    }\n\n    jArgs = jvmArgs.toArray(new String[0]);\n\n    for (int e = 0; e < jArgs.length; e++) {\n      if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n        MPJRun.logger.debug(\"modified: jArgs[\" + e + \"]=\" + jArgs[e]);\n      }\n    }\n\n    int CMD_WORDS = 8;\n\n    String[] aArgs = appArgs.toArray(new String[0]);\n    String[] ex = new String[(CMD_WORDS + jArgs.length + aArgs.length)];\n    ex[0] = \"java\";\n\n    for (int i = 0; i < jArgs.length; i++) {\n      ex[i + 1] = jArgs[i];\n    }\n\n    int indx = jArgs.length + 1;\n\n    ex[indx] = \"runtime.starter.MulticoreStarter\";\n    indx++;\n    ex[indx] = wdir;\n    indx++;\n    ex[indx] = Integer.toString(processes);\n    indx++;\n    ex[indx] = deviceName;\n    indx++;\n    ex[indx] = loader;\n    indx++;\n    ex[indx] = cmdClassPath;\n    indx++;\n\n    if (className != null) {\n      ex[indx] = className;\n    } else {\n      ex[indx] = jarName;\n    }\n\n    for (int i = 0; i < aArgs.length; i++) {\n      ex[i + CMD_WORDS + jArgs.length] = aArgs[i];\n    }\n\n    for (int i = 0; i < ex.length; i++) {\n      if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n        MPJRun.logger.debug(i + \": \" + ex[i]);\n      }\n    }\n\n    if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n      MPJRun.logger.debug(\"creating process-builder object \");\n    }\n\n    ProcessBuilder pb = new ProcessBuilder(ex);\n\n    if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n      MPJRun.logger.debug(\"wdir =\" + wdir);\n    }\n\n    pb.directory(new File(wdir));\n    pb.redirectErrorStream(true);\n\n    if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n      MPJRun.logger.debug(\"starting the MultithreadStarter.\");\n    }\n\n    Process p = null;\n\n    try {\n      p = pb.start();\n    } catch (Exception e) {\n      e.printStackTrace();\n      return;\n    }\n\n    if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n      MPJRun.logger.debug(\"started the MultithreadStarter.\");\n    }\n\n    if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n      MPJRun.logger.debug(\"Stopping the output\");\n    }\n\n    String line = \"\";\n    InputStream outp = p.getInputStream();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(outp));\n\n    if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n      MPJRun.logger.debug(\"outputting ...\");\n    }\n\n    try {\n      do {\n        if (!line.equals(\"\")) {\n          line.trim();\n\n          synchronized (this) {\n            System.out.println(line);\n          }\n        }\n      } while ((line = reader.readLine()) != null);\n    } catch (Exception e) {\n      if (MPJRun.DEBUG && MPJRun.logger.isDebugEnabled()) {\n        MPJRun.logger.debug(\"outputHandler =>\" + e.getMessage());\n      }\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6448, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(*,*)"], "initializationStart": [290], "initializationEnd": [362], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [368], "configurationEnd": [396], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 414, "focalAPIEnd": 424, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [464], "useEnd": [482], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/acontes/programming/tree/master/src/Tests/functionalTests/ProcessCleaner.java", "rawCode": "  /**\n   * Get the thread dump of a given Java processs.\n   *\n   * @param pid PID of the Java process\n   * @return Its thread dumps\n   * @throws IOException If the thread dump cannot be fetched\n   */\n  public final String getThreadDump(int pid) throws IOException {\n    ProcessBuilder pb = new ProcessBuilder(getJstack().getAbsolutePath(), Integer.toString(pid));\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n\n    Reader r = new InputStreamReader(p.getInputStream());\n    BufferedReader br = new BufferedReader(r);\n\n    StringBuilder sb = new StringBuilder();\n    for (String line = br.readLine(); line != null; line = br.readLine()) {\n      sb.append(line);\n    }\n\n    return sb.toString();\n  }\n"}, {"dataset": "start", "exampleID": 6449, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(ArrayList<String>)"], "initializationStart": [1731], "initializationEnd": [1757], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["log(String)", "printStackTrace()", "setMemorySelection(int)"], "tryExpressionStart": 1844, "tryExpressionEnd": 1848, "tryBlockStart": 1844, "tryBlockEnd": 2036, "catchExpressionStart": 1878, "catchExpressionEnd": 1900, "catchBlockStart": 1878, "catchBlockEnd": 2036, "exceptionHandlingCallStart": [1910, 1961, 1990], "exceptionHandlingCallEnd": [1951, 1980, 2027], "configuration": ["processBuilder.command()"], "configurationStart": [1812], "configurationEnd": [1824], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 1858, "focalAPIEnd": 1868, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TechnicPack/LegacyLauncher/tree/master/src/main/java/org/spoutcraft/launcher/Main.java", "rawCode": "  public static void reboot(String memory) {\n    try {\n      int memoryAllocation = SettingsUtil.getMemorySelection();\n      // int mem = (512) * memorySelection;\n      String osType = System.getProperty(\"sun.arch.data.model\");\n      if (osType != null && !osType.contains(\"64\") && memoryAllocation > 1536) {\n        Util.log(\"32-bit Vm being used. Max memory is 1.5Gb\");\n        memoryAllocation = 1536;\n      }\n      String pathToJar =\n          Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();\n      ArrayList<String> params = new ArrayList<String>();\n      params.add(\"java\"); // Linux/Mac/whatever\n      // if (memoryAllocation > 512) params.add(\"-Xincgc\");\n      if (memory.contains(\"-Xmx\")) {\n        params.add(memory);\n      } else {\n        params.add(\"-Xmx\" + memoryAllocation + \"m\");\n      }\n\n      if (PlatformUtils.getPlatform() != PlatformUtils.OS.windows) {\n        params.add(\"-classpath\");\n        params.add(pathToJar);\n        params.add(\"org.spoutcraft.launcher.Main\");\n      } else {\n        params.add(\"-jar\");\n        params.add(String.format(\"\\\"%s\\\"\", pathToJar.substring(1)));\n      }\n\n      params.addAll(Arrays.asList(args_temp));\n\n      if (PlatformUtils.getPlatform() == PlatformUtils.OS.macos) {\n        params.add(\"-Xdock:name=\\\"Technic Launcher\\\"\");\n\n        try {\n          File icon = new File(PlatformUtils.getWorkingDirectory(), \"launcher_icon.icns\");\n          GameUpdater.copy(\n              Main.class.getResourceAsStream(\"/org/spoutcraft/launcher/launcher_icon.icns\"),\n              new FileOutputStream(icon));\n          params.add(\"-Xdock:icon=\" + icon.getCanonicalPath());\n        } catch (Exception ignore) {\n        }\n      }\n      ProcessBuilder pb = new ProcessBuilder(params);\n\n      Util.log(\"Rebooting with %s\", Arrays.toString(pb.command().toArray()));\n      try {\n        pb.start();\n      } catch (IOException e) {\n        Util.log(\"Failed to load reboot Process\");\n        e.printStackTrace();\n        SettingsUtil.setMemorySelection(1024);\n      }\n      System.exit(0);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6450, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder()"], "initializationStart": [4334], "initializationEnd": [4354], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getMessage()", "warning(String,*)"], "tryExpressionStart": 3944, "tryExpressionEnd": 3948, "tryBlockStart": 3944, "tryBlockEnd": 5509, "catchExpressionStart": 5151, "catchExpressionEnd": 5173, "catchBlockStart": 5151, "catchBlockEnd": 5324, "exceptionHandlingCallStart": [5298, 5185], "exceptionHandlingCallEnd": [5312, 5313], "configuration": ["processBuilder.directory(File)", "processBuilder.redirectErrorStream(boolean)", "processBuilder.command(String,String,String)"], "configurationStart": [4366, 4399, 4439], "configurationEnd": [4387, 4427, 4490], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 4507, "focalAPIEnd": 4517, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [4529], "useEnd": [4541], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chenatu/ccnx-underlay/tree/master/javasrc/src/org/ccnx/ccn/impl/sync/FileBasedSyncMonitor.java", "rawCode": "  /**\n   * Kick off the worker thread to monitor differences in the backend file\n   *\n   * <p>First check if there are even differences in the timestamps\n   */\n  public void run() {\n    boolean keepRunning = true;\n    synchronized (runningLock) {\n      isRunning = true;\n    }\n\n    File repoDir = new File(filename);\n    Log.fine(Log.FAC_SYNC, \"repoDir: \" + repoDir);\n    File repoFile = new File(filename + \"/repoFile1\");\n\n    String commandCreateDiff =\n        \"ccnnamelist repoFile1 > names ; sort names > newnames ; rm names ; :>> oldnames ; diff newnames oldnames > diffNames ; mv newnames oldnames\";\n    String commandCreateDiffFinal;\n\n    long lastReadTime = -1;\n    long repoFileTime;\n    long lastModified = -1;\n\n    FileLock fileLock = null;\n\n    while (keepRunning) {\n\n      try {\n        fileChannel = new RandomAccessFile(filename + \"/sync.lock\", \"rw\").getChannel();\n        fileLock = fileChannel.lock();\n      } catch (FileNotFoundException e1) {\n        Log.severe(\"CCNR_DIRECTORY setting = {0}: file not found. Exiting.\", filename);\n        System.exit(1);\n      } catch (IOException e) {\n        try {\n          fileLock.release();\n        } catch (IOException e1) {\n          // already in an error state...\n          Log.warning(\"Error releasing lock for Sync API file processing: {0}\", e1.getMessage());\n        }\n        Log.severe(\n            \"Exception when trying to acquire lock to process new names for Sync API: {0}. Exiting.\",\n            e.getMessage());\n        System.exit(1);\n      }\n\n      repoFileTime = repoFile.lastModified();\n\n      // System.out.println(\"on a new loop! repoFileTime = \"+repoFileTime+\" lastModified =\n      // \"+lastModified+\" lastReadTime = \"+lastReadTime);\n\n      // is the diff file new to me?\n      for (String diffFiles : repoDir.list()) {\n        if (diffFiles.startsWith(\"diffNames.\")) {\n          // this is a diff names to process\n          Log.fine(Log.FAC_SYNC, \"have a diffFile: \" + diffFiles);\n          if (lastModified < Long.parseLong(diffFiles.substring(10)) || lastModified == -1) {\n            // we need to read in this file\n            Log.fine(Log.FAC_SYNC, \"this is a new diffFile! reading it in!\");\n            lastModified = Long.parseLong(diffFiles.substring(10));\n\n            // read in file here\n            try {\n\n              Log.fine(Log.FAC_SYNC, \"going to read in: \" + filename + \"/\" + diffFiles);\n\n              BufferedReader buf = new BufferedReader(new FileReader(filename + \"/\" + diffFiles));\n              String line = buf.readLine();\n              while (line != null) {\n                Log.fine(Log.FAC_SYNC, \"reading in line!: {0}\", line);\n                processNewName(line);\n                line = buf.readLine();\n              }\n              lastReadTime = lastModified;\n            } catch (IOException e) {\n              Log.warning(\n                  \"Error while executing bash commands to find diffs in repo files: {0}\",\n                  e.getMessage());\n            }\n            lastReadTime = lastModified;\n          } else {\n            // System.out.println(\"i already read in this file.\");\n          }\n        }\n      }\n\n      Log.fine(\n          Log.FAC_SYNC,\n          \"checking if the repo backend is new. last modified: {0} repoFileTime: {1} diff: {2} runInterval: {3}\",\n          lastModified,\n          repoFileTime,\n          (System.currentTimeMillis() - lastModified),\n          runInterval);\n      // now check if the file is even new... might have more names to process\n      if (lastModified == -1\n          || (repoFileTime > lastModified\n              && System.currentTimeMillis() - lastModified > runInterval)) {\n        Log.fine(\n            Log.FAC_SYNC,\n            \"the repo has a new backend, and the last time the process was run at least one runInterval before\");\n\n        lastModified = repoFileTime;\n        // there is something new in the backend file... need to process\n        Process pr;\n        try {\n          commandCreateDiffFinal =\n              commandCreateDiff.replace(\"diffNames\", \"diffNames.\" + repoFileTime);\n          if (lastReadTime != -1)\n            commandCreateDiffFinal =\n                commandCreateDiffFinal.concat(\" ; rm diffNames.\" + lastReadTime);\n          Log.fine(Log.FAC_SYNC, \"executing command: \" + commandCreateDiffFinal);\n\n          ProcessBuilder pb = new ProcessBuilder();\n          pb.directory(repoDir);\n          pb.redirectErrorStream(true);\n          pb.command(\"/bin/sh\", \"-c\", commandCreateDiffFinal);\n          pr = pb.start();\n          pr.waitFor();\n\n          Log.fine(\n              Log.FAC_SYNC,\n              \"done processing the backend, now reading in diffs: \"\n                  + filename\n                  + \"/diffNames.\"\n                  + repoFileTime);\n          BufferedReader buf =\n              new BufferedReader(new FileReader(filename + \"/diffNames.\" + repoFileTime));\n          String line = buf.readLine();\n          while (line != null) {\n            Log.fine(Log.FAC_SYNC, \"reading in line!: {0}\", line);\n            processNewName(line);\n\n            line = buf.readLine();\n          }\n          lastReadTime = lastModified;\n        } catch (IOException e) {\n          Log.warning(\n              \"Error while executing bash commands to find diffs in repo files: {0}\",\n              e.getMessage());\n        } catch (InterruptedException e) {\n          Log.warning(\n              \"Error while waiting for bash commands to find diffs in repo files: {0}\",\n              e.getMessage());\n        }\n      } else {\n        // there is nothing new, might as well sleep\n        // System.out.println(\"nothing new at this time... going back to sleep\");\n      }\n\n      try {\n        fileLock.release();\n      } catch (IOException e) {\n        Log.severe(\n            \"Exception when trying to release lock to process new names for Sync API: {0}. Exiting.\",\n            e.getMessage());\n        System.exit(1);\n      }\n\n      try {\n        Thread.sleep(runInterval);\n      } catch (InterruptedException e) {\n        Log.warning(\"FileBasedSyncMonitor: error while sleeping... {0}\", e.getMessage());\n      }\n\n      synchronized (runningLock) {\n        if (checkShutdown()) {\n          keepRunning = false;\n          Log.fine(Log.FAC_SYNC, \"isRunning was false, time to shut down\");\n          isRunning = false;\n          shutDown = false;\n        }\n      }\n    }\n    return;\n  }\n"}, {"dataset": "start", "exampleID": 6451, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String[])"], "initializationStart": [331], "initializationEnd": [358], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.directory(File)", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [364, 409], "configurationEnd": [403, 437], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 455, "focalAPIEnd": 465, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [532, 665], "useEnd": [550, 676], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ceylon/ceylon-compiler/tree/master/langtools/test/tools/javah/6572945/T6572945.java", "rawCode": "  void init(String[] args) throws IOException, InterruptedException {\n    String[] cmdArgs = new String[args.length + 1];\n    cmdArgs[0] = new File(new File(jdk, \"bin\"), \"javah\").getPath();\n    System.arraycopy(args, 0, cmdArgs, 1, args.length);\n\n    System.out.println(\"init: \" + Arrays.asList(cmdArgs));\n\n    ProcessBuilder pb = new ProcessBuilder(cmdArgs);\n    pb.directory(new File(testSrc, \"gold\"));\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n    String line;\n    while ((line = in.readLine()) != null) System.out.println(\"javah: \" + line);\n    int rc = p.waitFor();\n    if (rc != 0) error(\"javah: exit code \" + rc);\n  }\n"}, {"dataset": "start", "exampleID": 6452, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [1142], "initializationEnd": [1165], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [1173], "configurationEnd": [1201], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 1219, "focalAPIEnd": 1229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [1290], "useEnd": [1314], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/liucong/jms4cxf2/tree/master/testutils/src/main/java/org/apache/cxf/testutil/common/ServerLauncher.java", "rawCode": "  public boolean launchServer() throws IOException {\n\n    serverIsReady = false;\n    serverLaunchFailed = false;\n\n    if (inProcess) {\n      Class<?> cls;\n      try {\n        cls = Class.forName(className);\n        Class<? extends AbstractTestServerBase> svcls =\n            cls.asSubclass(AbstractTestServerBase.class);\n        if (null == serverArgs) {\n          inProcessServer = svcls.newInstance();\n        } else {\n          Constructor<? extends AbstractTestServerBase> ctor =\n              svcls.getConstructor(serverArgs.getClass());\n          inProcessServer = ctor.newInstance(new Object[] {serverArgs});\n        }\n        inProcessServer.startInProcess();\n        serverIsReady = true;\n      } catch (Throwable ex) {\n        ex.printStackTrace();\n        serverLaunchFailed = true;\n      }\n    } else {\n      List<String> cmd;\n      try {\n        cmd = getCommand();\n      } catch (URISyntaxException e1) {\n        IOException ex = new IOException();\n        ex.initCause(e1);\n        throw ex;\n      }\n\n      LOG.fine(\"CMD: \" + cmd);\n      if (debug) {\n        System.err.print(\"CMD: \" + cmd);\n      }\n\n      ProcessBuilder pb = new ProcessBuilder(cmd);\n      pb.redirectErrorStream(true);\n      process = pb.start();\n\n      OutputMonitorThread out = launchOutputMonitorThread(process.getInputStream(), System.out);\n\n      synchronized (mutex) {\n        do {\n          TimeoutCounter tc = new TimeoutCounter(DEFAULT_TIMEOUT);\n          try {\n            mutex.wait(1000);\n            if (tc.isTimeoutExpired()) {\n              break;\n            }\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        } while (!serverIsReady && !serverLaunchFailed);\n      }\n      if (serverLaunchFailed || !serverIsReady) {\n        System.err.println(out.getServerOutput());\n      }\n    }\n    return serverIsReady && !serverLaunchFailed;\n  }\n"}, {"dataset": "start", "exampleID": 6453, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String)"], "initializationStart": [1002], "initializationEnd": [1042], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["Logger.error(String)", "getMessage()", "error(*)"], "tryExpressionStart": 1193, "tryExpressionEnd": 1197, "tryBlockStart": 1193, "tryBlockEnd": 1812, "catchExpressionStart": 1696, "catchExpressionEnd": 1718, "catchBlockStart": 1696, "catchBlockEnd": 1812, "exceptionHandlingCallStart": [1726, 1790, 1780], "exceptionHandlingCallEnd": [1772, 1804, 1805], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 1214, "focalAPIEnd": 1224, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.getErrorStream()"], "useStart": [1296, 1397], "useEnd": [1319, 1420], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/service-oriented-science/Globus-Crux-Core/tree/master/ajaxUI/mediator/src/main/java/org/cyberaide/ws/mediator/CogMediator.java", "rawCode": "  /**\n   * list files of the specified directory\n   *\n   * @param user the authenticated user\n   * @param dir the relative dir, from the user's home\n   * @return serialized filelist\n   */\n  @WebMethod(action = \"listDir\")\n  public String listDir(String user, String dir) {\n    log.info(\"listDir called with dir \\\"\" + dir + \"\\\"\");\n    String ret = \"\";\n    File homeDir = null;\n    File myDir = null;\n    OutputStream out = null;\n    String strHomeDir = \"./gridusers/\" + user + \"/home/\";\n    String strMyDir = strHomeDir + \"./\" + dir;\n    log.info(\"home: \" + strHomeDir);\n    log.info(\"my: \" + strMyDir);\n    try {\n      homeDir = new File(strHomeDir);\n      myDir = new File(strMyDir);\n    } catch (Exception e) {\n      log.error(\"exception in listDir\");\n    }\n\n    // create the directory for the new workflow\n    if (!homeDir.exists()) {\n      homeDir.mkdirs();\n    }\n    if (!myDir.exists()) {\n      return ret;\n    }\n    // set the process's environment and working directory\n    ProcessBuilder pb = new ProcessBuilder(\"ls\", \"-l\", strMyDir);\n\n    // run the process and getting the output\n    String line = null;\n    Process Wfproc = null;\n    StringBuffer retbuf = new StringBuffer();\n\n    try {\n      Wfproc = pb.start();\n      BufferedReader input = new BufferedReader(new InputStreamReader(Wfproc.getInputStream()));\n\n      BufferedReader stdError = new BufferedReader(new InputStreamReader(Wfproc.getErrorStream()));\n\n      while ((line = input.readLine()) != null) {\n        retbuf.append(line);\n        retbuf.append(\"\\n\");\n      }\n\n      while ((line = input.readLine()) != null) {\n        retbuf.append(line);\n        retbuf.append(\"\\n\");\n      }\n      ret = new String(retbuf);\n    } catch (IOException e) {\n      log.error(\"exception while reading file list\");\n      log.error(e.getMessage());\n    }\n    return ret;\n  }\n"}, {"dataset": "start", "exampleID": 6454, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String)"], "initializationStart": [337], "initializationEnd": [380], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "getMessage()", "javax.swing.JTextArea.setText(String)"], "tryExpressionStart": 303, "tryExpressionEnd": 307, "tryBlockStart": 303, "tryBlockEnd": 3181, "catchExpressionStart": 3039, "catchExpressionEnd": 3061, "catchBlockStart": 3039, "catchBlockEnd": 3181, "exceptionHandlingCallStart": [3071, 3155, 3102], "exceptionHandlingCallEnd": [3092, 3171, 3172], "configuration": ["processBuilder.directory(File)", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [390, 448], "configurationEnd": [438, 476], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 504, "focalAPIEnd": 514, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/badi/protomol-mirror/tree/master/trunk/GUI/JProtomol/src/JProtomol/MainFrame.java", "rawCode": "  private void jButton1ActionPerformed(\n      java.awt.event.ActionEvent evt) { // GEN-FIRST:event_jButton1ActionPerformed\n    // TODO add your handling code here:\n    if (configJPanel1.createConf(\"\")) {\n      jButton1.setEnabled(false);\n      jButton13.setEnabled(true);\n      pmolCanRun = true;\n      try {\n        ProcessBuilder pb = new ProcessBuilder(\"ProtoMol\", \"auto.conf\");\n        pb.directory(new File(configJPanel1.mainFolder));\n        pb.redirectErrorStream(true);\n        final Process p = pb.start();\n\n        new Thread() {\n          @SuppressWarnings({\"EmptyCatchBlock\"})\n          public void run() {\n\n            jTextArea1.setText(\"\"); // clear\n\n            final InputStream is = p.getInputStream();\n            final InputStreamReader isr = new InputStreamReader(is);\n            final BufferedReader br = new BufferedReader(isr, 100 /* buffsize in chars */);\n            String line;\n\n            boolean pmolStillRunning = true;\n\n            while (pmolStillRunning) {\n              try {\n                p.exitValue();\n                pmolStillRunning = false;\n              } catch (Exception err) {\n                try {\n                  while ((line = br.readLine()) != null) {\n                    if (!pmolCanRun) {\n                      p.destroy();\n                      break;\n                    }\n                    int step = 0;\n                    int index = line.indexOf(\"Step : \");\n                    if (index != -1) {\n                      index += 7;\n                      int index2 = line.indexOf(\",\");\n                      if (index2 != -1)\n                        while (line.substring(index, index + 1).equals(\" \") && index < index2)\n                          index++;\n                      try {\n                        step = Integer.parseInt(line.substring(index, index2));\n                      } catch (NumberFormatException e) {\n                        System.out.println(e.getMessage());\n                        step = -1;\n                      }\n                    }\n                    configJPanel1.currentStepNumber = step;\n                    int pcent =\n                        (configJPanel1.currentStepNumber * 100) / configJPanel1.totalStepNumber;\n                    jProgressBar1.setValue(pcent);\n                    jLabel2.setText(String.valueOf(pcent) + \"%\");\n                    // System.out.println( String.valueOf(currentStepNumber) );\n                    jTextArea1.append(line + \"\\n\");\n                  }\n                  // p.waitFor();\n                } catch (Exception e) {\n                  System.err.println(\"Problem reading output\" + e.getMessage());\n                }\n                // br.close();\n\n              }\n            }\n            // returning from run kills the thread.\n            System.out.println(\"Finished run!\");\n            JOptionPane.showMessageDialog(null, \"Simulation finished!\");\n            jButton13.setEnabled(false);\n            jButton1.setEnabled(true);\n          }\n        }.start();\n        // end of thread\n\n      } catch (Exception err) {\n        err.printStackTrace();\n        jTextArea1.setText(\"Error: Protomol failed to run\" + err.getMessage());\n      }\n    }\n  } // GEN-LAST:event_jButton1ActionPerformed\n"}, {"dataset": "start", "exampleID": 6455, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder()"], "initializationStart": [350], "initializationEnd": [370], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)", "processBuilder.directory(File)", "processBuilder.command(String[])"], "configurationStart": [376, 415, 461], "configurationEnd": [409, 455, 485], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 519, "focalAPIEnd": 534, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["executeACommand(process)"], "useStart": [503], "useEnd": [535], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openengsb/openengsb/tree/master/tooling/wsdl2dll/src/main/java/org/openengsb/loom/csharp/comon/wsdltodll/WsdlToDll.java", "rawCode": "  /** Execute nuget command to pack the .nuspec */\n  private void nugetPackCommand() throws MojoExecutionException {\n    List<String> commandList = new LinkedList<String>();\n    commandList.add(0, NUGET_COMMAND);\n    commandList.add(1, \"pack\");\n    String[] command = commandList.toArray(new String[commandList.size()]);\n    ProcessBuilder builder = new ProcessBuilder();\n    builder.redirectErrorStream(true);\n    builder.directory(new File(nugetFolder));\n    builder.command(command);\n    try {\n      executeACommand(builder.start());\n    } catch (InterruptedException | IOException e) {\n      throw new MojoExecutionException(\n          \"Error, while executing command: \" + Arrays.toString(command) + \"\\n\", e);\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6456, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String,String)"], "initializationStart": [3607], "initializationEnd": [3674], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [3682], "configurationEnd": [3715], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 3735, "focalAPIEnd": 3750, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [3818], "useEnd": [3836], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Pardot/Rhombus/tree/master/src/test/java/com/pardot/rhombus/functional/SSTableWriterITCase.java", "rawCode": "  @Test\n  public void testInsertingSomeNullValuesInSchema_simple() throws Exception {\n    logger.debug(\"Starting testInsertingAllNonNullValuesInSchema\");\n    System.setProperty(\"cassandra.config\", \"cassandra-config/cassandra.yaml\");\n    String defaultTableName = \"simple\";\n    String testUniqueTableName = \"simpleB\";\n\n    // Build the connection manager\n    ConnectionManager cm = getConnectionManager();\n\n    // Build our keyspace definition object\n    CKeyspaceDefinition keyspaceDefinition =\n        JsonUtil.objectFromJsonResource(\n            CKeyspaceDefinition.class,\n            this.getClass().getClassLoader(),\n            \"TableWriterSimpleKeyspace.js\");\n    assertNotNull(keyspaceDefinition);\n    String keyspaceName = keyspaceDefinition.getName();\n    // Hardcode this for simplicity\n    ShardingStrategyMonthly shardStrategy = new ShardingStrategyMonthly();\n\n    // SSTableWriter craps out if we try to close a writer on a table and then create a new one on\n    // the same table, so each test should write to different tables\n    Map<String, CDefinition> tableDefs = keyspaceDefinition.getDefinitions();\n    CDefinition def = tableDefs.get(defaultTableName);\n    def.setName(testUniqueTableName);\n    tableDefs.remove(defaultTableName);\n    tableDefs.put(testUniqueTableName, def);\n\n    // Make sure the SSTableOutput directory exists and is clear\n    File keyspaceDir = new File(keyspaceName);\n    if (keyspaceDir.exists()) {\n      FileUtils.deleteRecursive(new File(keyspaceName));\n    }\n    assertTrue(new File(keyspaceName).mkdir());\n\n    // Rebuild the keyspace and get the object mapper\n    cm.buildKeyspace(keyspaceDefinition, true);\n    logger.debug(\"Built keyspace: {}\", keyspaceDefinition.getName());\n    cm.setDefaultKeyspace(keyspaceDefinition);\n    ObjectMapper om = cm.getObjectMapper();\n    om.setLogCql(true);\n    om.truncateTables();\n\n    // This is the only static table definition this test keyspace has\n    List<String> staticTableNames = Arrays.asList(testUniqueTableName);\n\n    // Insert our test data into the SSTable\n    // For this test, all this data goes into the one table we have defined\n    List<Map<String, Object>> values =\n        JsonUtil.rhombusMapFromResource(\n            this.getClass().getClassLoader(), \"SSTableWriterSimpleTestData.js\");\n    // Tack on time based UUIDs because we don't really care what the UUID values are\n    for (Map<String, Object> map : values) {\n      map.put(\"id\", UUIDs.startOf(Long.parseLong(map.get(\"created_at\").toString(), 10)));\n      // For this test, remove the actual values so we see what happens if we try to insert nulls\n      map.remove(\"value\");\n    }\n    // Build the map to insert that we'll actually pass in\n    Map<String, List<Map<String, Object>>> insert =\n        new HashMap<String, List<Map<String, Object>>>();\n    for (String staticTableName : staticTableNames) {\n      insert.put(staticTableName, values);\n    }\n\n    // Actually insert the data into the SSTableWriters\n    om.initializeSSTableWriters(false);\n    om.insertIntoSSTable(insert);\n    om.completeSSTableWrites();\n\n    // Figure out all the table names (including index tables) so we can load them into Cassandra\n    File[] tableDirs = keyspaceDir.listFiles();\n    assertNotNull(tableDirs);\n    List<String> allTableNames = Lists.newArrayList();\n    for (File file : tableDirs) {\n      if (file != null) {\n        allTableNames.add(file.getName());\n      }\n    }\n    for (String tableName : allTableNames) {\n      String SSTablePath = keyspaceName + \"/\" + tableName;\n\n      // Load the SSTables into Cassandra\n      ProcessBuilder builder = new ProcessBuilder(\"sstableloader\", \"-d\", \"localhost\", SSTablePath);\n      builder.redirectErrorStream(true);\n      Process p = builder.start();\n      BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));\n      long startTime = System.currentTimeMillis();\n      // TODO: sleep is the devil\n      while (!r.readLine().contains(\"100%\") && ((System.currentTimeMillis() - startTime) < 10000)) {\n        Thread.sleep(100);\n      }\n    }\n\n    String staticTableName = staticTableNames.get(0);\n    for (Map<String, Object> expected : values) {\n      // Expect to get the null \"value\" back\n      expected.put(\"value\", null);\n      Map<String, Object> actual = om.getByKey(staticTableName, expected.get(\"id\"));\n      assertEquals(expected, actual);\n    }\n\n    Map<String, Map<String, Object>> indexedExpected =\n        Maps.uniqueIndex(\n            values,\n            new Function<Map<String, Object>, String>() {\n              public String apply(Map<String, Object> input) {\n                return input.get(\"id\").toString();\n              }\n            });\n    // Confirm get by index_1 query\n    SortedMap<String, Object> indexValues = Maps.newTreeMap();\n    indexValues.put(\"index_1\", \"index1\");\n    Criteria criteria = new Criteria();\n    criteria.setIndexKeys(indexValues);\n    criteria.setLimit(50L);\n    List<Map<String, Object>> results = om.list(testUniqueTableName, criteria);\n    Map<String, Map<String, Object>> indexedResults;\n    indexedResults =\n        Maps.uniqueIndex(\n            results,\n            new Function<Map<String, Object>, String>() {\n              public String apply(Map<String, Object> input) {\n                return input.get(\"id\").toString();\n              }\n            });\n    Map<String, Map<String, Object>> indexedExpected1 = Maps.newHashMap(indexedExpected);\n    // Index_1 test data doesn't include value 4\n    indexedExpected1.remove(\"864f1400-2a7e-11b2-8080-808080808080\");\n    assertEquals(indexedExpected1, indexedResults);\n\n    // Confirm get by index_2 query\n    indexValues = Maps.newTreeMap();\n    indexValues.put(\"index_2\", \"index2\");\n    criteria = new Criteria();\n    criteria.setIndexKeys(indexValues);\n    criteria.setLimit(50L);\n    results = om.list(testUniqueTableName, criteria);\n\n    indexedResults =\n        Maps.uniqueIndex(\n            results,\n            new Function<Map<String, Object>, String>() {\n              public String apply(Map<String, Object> input) {\n                return input.get(\"id\").toString();\n              }\n            });\n\n    Map<String, Map<String, Object>> indexedExpected2 = Maps.newHashMap(indexedExpected);\n    // Index_2 test data doesn't include value 3\n    indexedExpected2.remove(\"80593300-2a7e-11b2-8080-808080808080\");\n    assertEquals(indexedExpected2, indexedResults);\n\n    // Clean up the SSTable directories after ourselves\n    FileUtils.deleteRecursive(new File(keyspaceName));\n\n    cm.teardown();\n  }\n"}, {"dataset": "start", "exampleID": 6457, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String[])"], "initializationStart": [293], "initializationEnd": [320], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.directory(File)", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [326, 354], "configurationEnd": [348, 382], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 438, "focalAPIEnd": 448, "followUpCheck": "process.waitFor() == 0", "checkType": "IF", "followUpCheckExpressionStart": 754, "followUpCheckExpressionEnd": 781, "followUpCheckBlockStart": 754, "followUpCheckBlockEnd": 815, "use": ["process.getInputStream()"], "useStart": [593], "useEnd": [617], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/peodratash/mina-ftpserver/tree/master/core/src/test/java/org/apache/ftpserver/clienttests/SymbolicLinkTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    assertTrue(TEST_REAL_DIR1.mkdir());\n\n    // try creating the symbolic link\n    String[] command =\n        new String[] {\"ln\", \"-s\", TEST_REAL_DIR1.getName(), TEST_SYMBOLIC_DIR1.getName()};\n    ProcessBuilder pb = new ProcessBuilder(command);\n    pb.directory(ROOT_DIR);\n    pb.redirectErrorStream(true);\n    Process process = null;\n    try {\n      process = pb.start();\n    } catch (IOException e) {\n      testEnabled = false;\n      return;\n    }\n    BufferedReader out = new BufferedReader(new InputStreamReader(process.getInputStream()));\n    String line = out.readLine();\n    while (line != null) {\n      System.out.println(line);\n      line = out.readLine();\n    }\n\n    if (process.waitFor() == 0) {\n      testEnabled = true;\n    }\n\n    client.login(ADMIN_USERNAME, ADMIN_PASSWORD);\n  }\n"}, {"dataset": "start", "exampleID": 6458, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [936], "initializationEnd": [960], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.directory(File)", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [966, 1023], "configurationEnd": [1017, 1056], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 1081, "focalAPIEnd": 1096, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [1175, 1233], "useEnd": [1199, 1250], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LukeCarrier/flyway/tree/master/flyway-maven-plugin-largetest/src/test/java/com/googlecode/flyway/maven/largetest/MavenLargeTest.java", "rawCode": "  /**\n   * Runs Maven in this directory with these extra arguments.\n   *\n   * @param expectedReturnCode The expected return code for this invocation.\n   * @param dir The directory below src/test/resources to run maven in.\n   * @param extraArgs The extra arguments (if any) for Maven.\n   * @return The standard output.\n   * @throws Exception When the execution failed.\n   */\n  private String runMaven(int expectedReturnCode, String dir, String... extraArgs)\n      throws Exception {\n    String m2Home = System.getenv(\"M2_HOME\");\n    String flywayVersion = System.getProperty(\"flywayVersion\");\n\n    String extension = \"\";\n    if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n      extension = \".bat\";\n    }\n\n    List<String> args = new ArrayList<String>();\n    args.add(m2Home + \"/bin/mvn\" + extension);\n    args.add(\"-Dflyway.version=\" + flywayVersion);\n    args.addAll(Arrays.asList(extraArgs));\n\n    ProcessBuilder builder = new ProcessBuilder(args);\n    builder.directory(new File(installDir + \"/\" + dir));\n    builder.redirectErrorStream(true);\n\n    Process process = builder.start();\n    String stdOut =\n        FileCopyUtils.copyToString(new InputStreamReader(process.getInputStream(), \"UTF-8\"));\n    int returnCode = process.waitFor();\n\n    System.out.print(stdOut);\n\n    assertEquals(\"Unexpected return code\", expectedReturnCode, returnCode);\n\n    return stdOut;\n  }\n"}, {"dataset": "start", "exampleID": 6459, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [754], "initializationEnd": [782], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 873, "tryExpressionEnd": 877, "tryBlockStart": 873, "tryBlockEnd": 1436, "catchExpressionStart": 1314, "catchExpressionEnd": 1336, "catchBlockStart": 1314, "catchBlockEnd": 1370, "exceptionHandlingCallStart": [1344], "exceptionHandlingCallEnd": [1363], "configuration": ["processBuilder.environment()", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [788, 838], "configurationEnd": [804, 866], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 889, "focalAPIEnd": 899, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [1016, 1295], "useEnd": [1034, 1306], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/projeto-coruja/Profetas-Coruja/tree/master/Profetas/src/main/java/business/export/DataBaseExport.java", "rawCode": "  public static String export() {\n\n    ProcessBuilder pb;\n    Process p;\n    DateFormat dateFormat;\n    Date date;\n    String filePath;\n    List<String> commands = new ArrayList<String>();\n    dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH-mm-ss\");\n    date = new Date();\n\n    filePath = tmp + \"/bkp_\" + dateFormat.format(date) + \".tar\";\n\n    commands.add(\"pg_dump\");\n    commands.add(\"-i\");\n    commands.add(\"-h\");\n    commands.add(\"localhost\");\n    commands.add(\"-p\");\n    commands.add(\"5432\");\n    commands.add(\"-U\");\n    commands.add(\"coruja_graopara\");\n    commands.add(\"-b\");\n    commands.add(\"-F\");\n    commands.add(\"c\");\n    commands.add(\"-v\");\n    commands.add(\"-f\");\n    commands.add(filePath);\n    commands.add(\"coruja_graopara\");\n\n    pb = new ProcessBuilder(commands);\n    pb.environment().put(\"PGPASSWORD\", \"coruja\");\n    pb.redirectErrorStream(true);\n\n    try {\n      p = pb.start();\n\n      StringBuilder out = new StringBuilder();\n      BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));\n      String line = null, previous = null;\n      while ((line = br.readLine()) != null) {\n        if (!line.equals(previous)) {\n          previous = line;\n          out.append(line).append('\\n');\n          System.out.println(line);\n        }\n      }\n\n      p.waitFor();\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n\n    return filePath;\n  }\n"}, {"dataset": "start", "exampleID": 6460, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [461], "initializationEnd": [484], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [490], "configurationEnd": [518], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 536, "focalAPIEnd": 546, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [613, 863], "useEnd": [631, 874], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thiago-silva/epic-java/tree/master/test/tools/javah/compareTest/CompareTest.java", "rawCode": "  int old_javah(List<String> options, File outDir, File bootclasspath, String className)\n      throws IOException, InterruptedException {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(old_javah_cmd.getPath());\n    cmd.addAll(options);\n    cmd.add(\"-d\");\n    cmd.add(outDir.getPath());\n    cmd.add(\"-bootclasspath\");\n    cmd.add(bootclasspath.getPath());\n    cmd.add(className);\n    System.err.println(\"old_javah: \" + cmd);\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n    String line;\n    StringBuilder sb = new StringBuilder();\n    while ((line = in.readLine()) != null) {\n      sb.append(line);\n      sb.append(\"\\n\");\n    }\n    System.err.println(\"old javah out: \" + sb.toString());\n    return p.waitFor();\n  }\n"}, {"dataset": "start", "exampleID": 6461, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "Logger.error(String)"], "tryExpressionStart": 142, "tryExpressionEnd": 146, "tryBlockStart": 142, "tryBlockEnd": 366, "catchExpressionStart": 242, "catchExpressionEnd": 262, "catchBlockStart": 242, "catchBlockEnd": 366, "exceptionHandlingCallStart": [344, 286], "exceptionHandlingCallEnd": [358, 359], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 158, "focalAPIEnd": 215, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [223], "useEnd": [234], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vmware-serengeti/serengeti-ws/tree/master/common/src/main/java/com/vmware/bdd/utils/CommonUtil.java", "rawCode": "  public static Process execCommand(String cmd) {\n    if (cmd == null || cmd.isEmpty()) {\n      return null;\n    }\n\n    Process p = null;\n    try {\n      p = new ProcessBuilder(Arrays.asList(cmd.split(\" \"))).start();\n      p.waitFor();\n    } catch (Exception e) {\n      p = null;\n      logger.error(\"Failed to execute command \" + cmd + \" : \" + e.getMessage());\n    }\n\n    return p;\n  }\n"}, {"dataset": "start", "exampleID": 6462, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [306], "initializationEnd": [330], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 598, "tryExpressionEnd": 602, "tryBlockStart": 598, "tryBlockEnd": 1305, "catchExpressionStart": 1183, "catchExpressionEnd": 1205, "catchBlockStart": 1183, "catchBlockEnd": 1239, "exceptionHandlingCallStart": [1213], "exceptionHandlingCallEnd": [1232], "configuration": ["processBuilder.redirectError(File)", "processBuilder.redirectInput(File)", "processBuilder.redirectOutput(File)"], "configurationStart": [403, 455, 539], "configurationEnd": [449, 501, 586], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 628, "focalAPIEnd": 650, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [710, 1019], "useEnd": [734, 1036], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ceylon/ceylon-common/tree/master/src/com/redhat/ceylon/common/tools/CeylonTool.java", "rawCode": "  private void runScript(ScriptToolModel<?> model) {\n    List<String> args = new ArrayList<String>(3 + toolArgs.size());\n    if (OSUtil.isWindows()) {\n      args.add(\"cmd.exe\");\n      args.add(\"/C\");\n    }\n    args.add(model.getScriptName());\n    args.addAll(toolArgs);\n    ProcessBuilder processBuilder = new ProcessBuilder(args);\n    setupScriptEnvironment(processBuilder, model.getScriptName());\n    processBuilder.redirectError(Redirect.INHERIT);\n    processBuilder.redirectInput(Redirect.INHERIT);\n    if (OSUtil.isWindows()) {\n      processBuilder.redirectOutput(Redirect.INHERIT);\n    }\n    try {\n      Process process = processBuilder.start();\n      if (!OSUtil.isWindows()) {\n        InputStream in = process.getInputStream();\n        InputStreamReader inread = new InputStreamReader(in);\n        BufferedReader bufferedreader = new BufferedReader(inread);\n        String line;\n        while ((line = bufferedreader.readLine()) != null) {\n          System.out.println(line);\n        }\n      }\n      int exit = process.waitFor();\n      if (exit != 0)\n        throw new ToolError(\n            \"Script \" + model.getScriptName() + \" returned error exit code \" + exit) {};\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6463, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [341], "initializationEnd": [369], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 394, "focalAPIEnd": 404, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [456], "useEnd": [474], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Sushant/wse/tree/master/hw2/src/edu/nyu/cs/cs2580/IndexerInvertedDoconly.java", "rawCode": "  private Map<Integer, Integer> grepFile(String search, String fileName) throws IOException {\n    String cmd = \"grep '\\\\<\" + search + \"\\\\>' \" + fileName;\n    // System.out.println(cmd);\n    List<String> commands = new ArrayList<String>();\n    commands.add(\"/bin/bash\");\n    commands.add(\"-c\");\n    commands.add(cmd);\n    ProcessBuilder pb = new ProcessBuilder(commands);\n    Process p;\n    p = pb.start();\n    InputStreamReader isr = new InputStreamReader(p.getInputStream());\n    BufferedReader br = new BufferedReader(isr);\n    String s[];\n    String line = br.readLine();\n    // System.out.println(line);\n    s = line.split(\";;\");\n    Map<Integer, Integer> tempList = new TreeMap<Integer, Integer>();\n    for (int i = 1; i < s.length; i++) {\n      String[] tempSt = s[i].split(\",\");\n      tempList.put(Integer.parseInt(tempSt[0]), Integer.parseInt(tempSt[1]));\n    }\n    System.out.println(tempList);\n    return tempList;\n  }\n"}, {"dataset": "start", "exampleID": 6464, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 323, "focalAPIEnd": 401, "followUpCheck": "process.exitValue() != 0", "checkType": "IF", "followUpCheckExpressionStart": 576, "followUpCheckExpressionEnd": 605, "followUpCheckBlockStart": 576, "followUpCheckBlockEnd": 954, "use": ["process.waitFor()"], "useStart": [407], "useEnd": [424], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Chrriis/DJ-Native-Integration/tree/master/Installer/src_DJShellExtension_win32/chrriis/dj/installer/shellextension/DJShellExtensionUninstallerListener.java", "rawCode": "  public void beforeDelete_(File file, AbstractUIProgressHandler abstractUIProgressHandler)\n      throws Exception {\n    // super.beforeDelete(file, abstractUIProgressHandler);\n    if (!file.getName().equals(\"DJShellExtension.dll\")) {\n      return;\n    }\n    isShellExtensionInstalled = true;\n    Process process =\n        new ProcessBuilder(\"regsvr32.exe\", \"/u\", \"/s\", file.getAbsolutePath()).start();\n    process.waitFor();\n    if (!file.delete()) {\n      File tempFile = File.createTempFile(\"~DJ\", \".DL_\");\n      tempFile.delete();\n      file.renameTo(tempFile);\n    }\n    if (process.exitValue() != 0) {\n      Frame[] frames = Frame.getFrames();\n      if (frames.length > 0) {\n        JOptionPane.showMessageDialog(\n            frames[0],\n            \"The DJ ShellExtension failed to unregister.\\nA possible reason is because of too restrictive access rights.\",\n            \"Registration failed\",\n            JOptionPane.ERROR_MESSAGE);\n      }\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6465, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 93, "focalAPIEnd": 108, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new BuildWatcher(process)", "process.waitFor()"], "useStart": [142, 215], "useEnd": [167, 232], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/akiellor/selenium/tree/master/java/client/test/org/openqa/selenium/Build.java", "rawCode": "  private void executeBuild(ProcessBuilder builder) throws Exception {\n    Process process = builder.start();\n    BuildWatcher buildWatcher = new BuildWatcher(process);\n    buildWatcher.start();\n    int exitValue = process.waitFor();\n    if (exitValue != 0) {\n      fail(\"Unable to build artifacts\");\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6466, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 499, "tryExpressionEnd": 503, "tryBlockStart": 499, "tryBlockEnd": 1044, "catchExpressionStart": 982, "catchExpressionEnd": 1010, "catchBlockStart": 982, "catchBlockEnd": 1044, "exceptionHandlingCallStart": [1018], "exceptionHandlingCallEnd": [1037], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 539, "focalAPIEnd": 599, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.getErrorStream()"], "useStart": [735, 911], "useEnd": [753, 929], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/ptp/tree/master/tools/etfw/org.eclipse.ptp.etfw/src/org/eclipse/ptp/internal/etfw/BuildLaunchUtils.java", "rawCode": "  /**\n   * This locates name of the parent of the directory containing the given tool.\n   *\n   * @param The name of the tool whose directory is being located\n   * @return The location of the tool's arch directory, or null if it is not found or if the\n   *     architecture is windows\n   */\n  public static String checkLocalToolEnvPath(String toolname) {\n    if (org.eclipse.cdt.utils.Platform.getOS().toLowerCase().trim().indexOf(\"win\") >= 0) {\n      return null;\n    }\n    String pPath = null;\n    try {\n      final Process p =\n          new ProcessBuilder(\"which\", toolname)\n              .start(); // Runtime.getRuntime().exec(\"which \"+toolname); //$NON-NLS-1$\n      BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\n      pPath = reader.readLine();\n      while (reader.readLine() != null) {}\n      reader.close();\n      reader = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n      while (reader.readLine() != null) {}\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n    if (pPath == null) {\n      return null;\n    }\n    final File test = new File(pPath);\n    final File toolin = new File(toolname);\n\n    if (test.getPath().equals(toolin.getPath())) {\n      return null; // TODO: Make sure this is the right behavior when the\n    }\n    // full path is provided\n    if (test.exists()) {\n      return test.getParentFile().getPath();\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6467, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [335], "initializationEnd": [362], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new ExportException(String,*)"], "tryExpressionStart": 398, "tryExpressionEnd": 402, "tryBlockStart": 398, "tryBlockEnd": 539, "catchExpressionStart": 440, "catchExpressionEnd": 468, "catchBlockStart": 440, "catchBlockEnd": 539, "exceptionHandlingCallStart": [482], "exceptionHandlingCallEnd": [532], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 422, "focalAPIEnd": 432, "followUpCheck": "process != null", "checkType": "IF", "followUpCheckExpressionStart": 2252, "followUpCheckExpressionEnd": 2274, "followUpCheckBlockStart": 2252, "followUpCheckBlockEnd": 2295, "use": ["process.destroy()"], "useStart": [2275], "useEnd": [2294], "hasFinally": 1, "cleanUpCall": ["Process.destroy()"], "finallyExpressionStart": 2236, "finallyExpressionEnd": 2244, "finallyBlockStart": 2236, "finallyBlockEnd": 2301, "cleanUpCallStart": [2275], "cleanUpCallEnd": [2294], "url": "https://github.com/hammacher/ccs/tree/master/plugin/src/de/unisb/cs/depend/ccs_sem/plugin/dotExporters/AbstractDotExporter.java", "rawCode": "  public void export(File outputFile, final Graph graph) throws ExportException {\n    // start dot\n    final List<String> command = new ArrayList<String>();\n    command.add(MyPreferenceStore.getDot());\n    command.add(\"-T\" + format);\n    command.add(\"-o\");\n    command.add(outputFile.getAbsolutePath());\n\n    final ProcessBuilder pb = new ProcessBuilder(command);\n    Process dotFilter = null;\n    try {\n      dotFilter = pb.start();\n    } catch (final IOException e) {\n      throw new ExportException(\"Error starting dot: \" + e, e);\n    }\n\n    try {\n      final Process finalDotFilter = dotFilter;\n\n      // graph filtering in another thread, for that we can control it and\n      // terminate it\n      final Callable<Boolean> filterGraphCall =\n          new Callable<Boolean>() {\n            public Boolean call() {\n              try {\n                OutputStream toFilterRaw = finalDotFilter.getOutputStream();\n                final BufferedWriter toFilter =\n                    new BufferedWriter(new OutputStreamWriter(toFilterRaw));\n                graph.printGraph(toFilterRaw, false);\n                toFilter.close();\n                try {\n                  finalDotFilter.waitFor();\n                } catch (InterruptedException e) {\n                  finalDotFilter.destroy();\n                  return false;\n                }\n                return finalDotFilter.exitValue() == 0;\n              } catch (IOException e) {\n                return false;\n              }\n            }\n          };\n      final FutureTask<Boolean> filterGraphTask = new FutureTask<Boolean>(filterGraphCall);\n      new Thread(filterGraphTask, \"layout graph\").start();\n\n      boolean success = false;\n      try {\n        success = filterGraphTask.get();\n      } catch (final ExecutionException e) {\n        if (!(e.getCause() instanceof IOException)) {\n          // should not occure (GrappaSupport.filterGraph does only\n          // throw IOException)\n          throw new RuntimeException(e);\n        }\n      } catch (final InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ExportException(\"Interrupted\");\n      }\n      if (!success) throw new ExportException(\"Error laying out the graph using dot.\");\n    } finally {\n      if (dotFilter != null) dotFilter.destroy();\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6468, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String)"], "initializationStart": [2344], "initializationEnd": [2397], "hasTryCatch": 1, "exceptionType": "InterruptedException", "exceptionHandlingCall": ["printStackTrace()", "println(String)"], "tryExpressionStart": 1736, "tryExpressionEnd": 1740, "tryBlockStart": 1736, "tryBlockEnd": 2307, "catchExpressionStart": 3354, "catchExpressionEnd": 3385, "catchBlockStart": 3354, "catchBlockEnd": 3465, "exceptionHandlingCallStart": [3393, 3420], "exceptionHandlingCallEnd": [3412, 3458], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [2403], "configurationEnd": [2436], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 2568, "focalAPIEnd": 2583, "followUpCheck": "process.waitFor() != 0", "checkType": "IF", "followUpCheckExpressionStart": 2934, "followUpCheckExpressionEnd": 2955, "followUpCheckBlockStart": 2934, "followUpCheckBlockEnd": 3260, "use": ["process.getInputStream()"], "useStart": [2740], "useEnd": [2758], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jak786/VASE/tree/master/editor/server/src/org/oryxeditor/server/AutoLayouterServlet.java", "rawCode": "  protected void doPost(HttpServletRequest req, HttpServletResponse res)\n      throws ServletException, IOException {\n\n    // if (false && DEBUG) {\n    //\n    // // execute 'which ruby' in the context of the servlet container.\n    // try {\n    //\n    // // start a process for 'which ruby' and wait for it.\n    // Process which = Runtime.getRuntime().exec(\"which ruby\");\n    // which.waitFor();\n    //\n    // // get the output in a buffered reader.\n    // BufferedReader whichIn = new BufferedReader(\n    // new InputStreamReader(which.getInputStream()));\n    //\n    // // output the debug information.\n    // System.out.print(\"ruby location: \");\n    // System.out.println(whichIn.readLine());\n    //\n    // } catch (InterruptedException e1) {\n    //\n    // // if something goes wrong, tell us.\n    // e1.printStackTrace();\n    // }\n    // }\n\n    // get rdf and timestamp for the temporary file.\n    String rdf = req.getParameter(\"rdf\");\n    String basefilename = String.valueOf(System.currentTimeMillis());\n\n    // create a new temporary file and store the rdf.\n    String tmpRdfFile =\n        this.getServletContext().getRealPath(\"/\") + \"tmp\" + File.separator + basefilename + \".rdf\";\n    BufferedWriter out = new BufferedWriter(new FileWriter(tmpRdfFile));\n    out.write(rdf);\n    out.close();\n\n    // get the path to the layouter.\n    String layouter_path =\n        this.getServletContext().getRealPath(\"/\")\n            + \"Plugins\"\n            + File.separator\n            + \"AutoLayouter\"\n            + File.separator\n            + \"src\"\n            + File.separator\n            + \"startlayout.rb\";\n\n    if (DEBUG) {\n\n      System.out.println(\"Auto-Layouter: Saved RDF to \" + tmpRdfFile);\n\n      // try to find the layouter.\n      try {\n\n        // start a process for 'ls %layouter_path%' and wait for it.\n        Process ls = Runtime.getRuntime().exec(\"ls \" + layouter_path);\n        ls.waitFor();\n\n        // get the output in a buffered reader.\n        BufferedReader lsIn = new BufferedReader(new InputStreamReader(ls.getInputStream()));\n\n        // output the debug information.\n        System.out.print(\"ls on layouter: \");\n        System.out.println(lsIn.readLine());\n\n      } catch (InterruptedException e1) {\n\n        // if something goes wrong, tell us.\n        e1.printStackTrace();\n      }\n    }\n\n    ProcessBuilder builder = new ProcessBuilder(\"ruby\", layouter_path, tmpRdfFile);\n    builder.redirectErrorStream(true);\n    ;\n\n    if (DEBUG) {\n      System.out.println(\"Auto-Layouter: Calling ruby with: \" + builder.command());\n    }\n    Process p = builder.start();\n\n    if (DEBUG) {\n      System.out.println(\"Auto-Layouter: Called Ruby, Starting ReaderThread\");\n    }\n\n    StreamReadThread reader = new StreamReadThread(p.getInputStream());\n    reader.start();\n    res.setContentType(\"text/html\");\n    try {\n      if (DEBUG) {\n        System.out.println(\"Auto-Layouter: Waiting for Ruby to return\");\n      }\n      if (p.waitFor() != 0) {\n        if (DEBUG) {\n          System.out.println(\"Auto-Layouter: Ruby returned an error\");\n        }\n        res.getWriter().println(\"{'error':'Layouter returned an error:\\n\" + reader.content + \"'}\");\n        wait_for_thread(reader);\n        System.err.println(reader.content);\n        return;\n      }\n      if (DEBUG) {\n        System.out.println(\"Auto-Layouter: Ruby returned\");\n      }\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n      System.out.println(\"Wait interrupted\");\n    }\n    wait_for_thread(reader);\n    if (DEBUG) {\n      System.out.println(\"Auto-Layouter: Sending response\");\n    }\n    res.getWriter().println(reader.content);\n  }\n"}, {"dataset": "start", "exampleID": 6469, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [436], "initializationEnd": [463], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new ActivitiException(String,*)"], "tryExpressionStart": 470, "tryExpressionEnd": 474, "tryBlockStart": 470, "tryBlockEnd": 1330, "catchExpressionStart": 1229, "catchExpressionEnd": 1249, "catchBlockStart": 1229, "catchBlockEnd": 1330, "exceptionHandlingCallStart": [1263], "exceptionHandlingCallEnd": [1323], "configuration": ["processBuilder.redirectErrorStream(Boolean)", "processBuilder.environment()", "processBuilder.directory(File)"], "configurationStart": [482, 599, 727], "configurationEnd": [535, 627, 775], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 802, "focalAPIEnd": 824, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()", "process.getInputStream()"], "useStart": [873, 979], "useEnd": [890, 1003], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/erny/activiti/tree/master/modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ShellActivityBehavior.java", "rawCode": "  public void execute(ActivityExecution execution) {\n\n    readFields(execution);\n\n    List<String> argList = new ArrayList<String>();\n    argList.add(commandStr);\n\n    if (arg1Str != null) argList.add(arg1Str);\n    if (arg2Str != null) argList.add(arg2Str);\n    if (arg3Str != null) argList.add(arg3Str);\n    if (arg4Str != null) argList.add(arg4Str);\n    if (arg5Str != null) argList.add(arg5Str);\n\n    ProcessBuilder processBuilder = new ProcessBuilder(argList);\n\n    try {\n      processBuilder.redirectErrorStream(redirectErrorFlag);\n      if (cleanEnvBoolan) {\n        Map<String, String> env = processBuilder.environment();\n        env.clear();\n      }\n      if (directoryStr != null && directoryStr.length() > 0)\n        processBuilder.directory(new File(directoryStr));\n\n      Process process = processBuilder.start();\n\n      if (waitFlag) {\n        int errorCode = process.waitFor();\n\n        if (resultVariableStr != null) {\n          String result = convertStreamToStr(process.getInputStream());\n          execution.setVariable(resultVariableStr, result);\n        }\n\n        if (errorCodeVariableStr != null) {\n          execution.setVariable(errorCodeVariableStr, Integer.toString(errorCode));\n        }\n      }\n    } catch (Exception e) {\n      throw new ActivitiException(\"Could not execute shell command \", e);\n    }\n\n    leave(execution);\n  }\n"}, {"dataset": "start", "exampleID": 6470, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String,String,String,String)"], "initializationStart": [253], "initializationEnd": [363], "hasTryCatch": 1, "exceptionType": "InterruptedException", "exceptionHandlingCall": ["getLog()", "getMessage()", "error(*,*)", "getMessage()", "new TomcatSetupException(*,*)"], "tryExpressionStart": 483, "tryExpressionEnd": 487, "tryBlockStart": 483, "tryBlockEnd": 832, "catchExpressionStart": 568, "catchExpressionEnd": 599, "catchBlockStart": 568, "catchBlockEnd": 704, "exceptionHandlingCallStart": [607, 622, 607, 679, 654], "exceptionHandlingCallEnd": [615, 636, 640, 693, 697], "configuration": ["processBuilder.directory(File)", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [369, 413], "configurationEnd": [407, 453], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 507, "focalAPIEnd": 529, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [549], "useEnd": [560], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/t7mp/maven-t7-plugin/tree/master/src/main/java/com/googlecode/t7mp/StopForkedMojo.java", "rawCode": "  protected void setStartScriptPermissions(File binDirectory) {\n    log.debug(\"set permissions ...\");\n    if (SystemUtil.isWindowsSystem()) {\n      // do we have filepermissions on windows\n      return;\n    }\n    ProcessBuilder processBuilder =\n        new ProcessBuilder(\n            \"chmod\", \"755\", \"catalina.sh\", \"setclasspath.sh\", \"startup.sh\", \"shutdown.sh\");\n    processBuilder.directory(binDirectory);\n    processBuilder.redirectErrorStream(true);\n    int exitValue = -1;\n    try {\n      Process p = processBuilder.start();\n      exitValue = p.waitFor();\n    } catch (InterruptedException e) {\n      getLog().error(e.getMessage(), e);\n      throw new TomcatSetupException(e.getMessage(), e);\n    } catch (IOException e) {\n      getLog().error(e.getMessage(), e);\n      throw new TomcatSetupException(e.getMessage(), e);\n    }\n    log.debug(\"SetStartScriptPermission return value \" + exitValue);\n  }\n"}, {"dataset": "start", "exampleID": 6471, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [428], "initializationEnd": [455], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.environment()"], "configurationStart": [486], "configurationEnd": [507], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 548, "focalAPIEnd": 563, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guoliqiang/coding/tree/master/third_part/hadoop_src/hadoop-2.0.5-alpha-src/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/Application.java", "rawCode": "  /**\n   * Run a given command in a subprocess, including threads to copy its stdout and stderr to our\n   * stdout and stderr.\n   *\n   * @param command the command and its arguments\n   * @param env the environment to run the process in\n   * @return a handle on the process\n   * @throws IOException\n   */\n  static Process runClient(List<String> command, Map<String, String> env) throws IOException {\n    ProcessBuilder builder = new ProcessBuilder(command);\n    if (env != null) {\n      builder.environment().putAll(env);\n    }\n    Process result = builder.start();\n    return result;\n  }\n"}, {"dataset": "start", "exampleID": 6472, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String)"], "initializationStart": [184], "initializationEnd": [220], "hasTryCatch": 1, "exceptionType": "java.io.IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 152, "tryExpressionEnd": 156, "tryBlockStart": 152, "tryBlockEnd": 742, "catchExpressionStart": 678, "catchExpressionEnd": 708, "catchBlockStart": 678, "catchBlockEnd": 742, "exceptionHandlingCallStart": [716], "exceptionHandlingCallEnd": [735], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 240, "focalAPIEnd": 250, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [285], "useEnd": [303], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sleuthkit/sleuthkit/tree/master/tools/fiwalk/plugins/jpeg_extract.java", "rawCode": "  /** process FN with exif and return a string of name: value\\r */\n  static String process(String fn) {\n    StringBuilder sb = new StringBuilder();\n    try {\n      ProcessBuilder pb = new ProcessBuilder(\"exif\", \"-m\", fn);\n      Process p = pb.start();\n      InputStream is =\n          p.getInputStream(); // \"data piped from the standard output stream of the process\"\n      InputStreamReader isr = new InputStreamReader(is);\n      BufferedReader br = new BufferedReader(isr);\n      while (true) {\n        String s = br.readLine();\n        if (s == null) break;\n        sb.append(processExifOutput(s));\n        sb.append(\"\\n\");\n      }\n      br.close();\n      is.close();\n\n    } catch (java.io.IOException e) {\n      e.printStackTrace();\n    }\n    return sb.toString();\n  }\n"}, {"dataset": "start", "exampleID": 6473, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,String,*,String)"], "initializationStart": [353], "initializationEnd": [666], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["showMessageDialog(*,String)"], "tryExpressionStart": 214, "tryExpressionEnd": 218, "tryBlockStart": 214, "tryBlockEnd": 1123, "catchExpressionStart": 1000, "catchExpressionEnd": 1022, "catchBlockStart": 1000, "catchBlockEnd": 1123, "exceptionHandlingCallStart": [898], "exceptionHandlingCallEnd": [984], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 674, "focalAPIEnd": 684, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ehrickwilliam/Andare/tree/master/Sistema/src/br/com/okaynet/andare/gui/JFramePrincipal.java", "rawCode": "  private void backupDoSistema() {\n    Date data = new Date();\n    SimpleDateFormat formatadorTotal = new SimpleDateFormat(\"dd-MM-yyyy-HH-mm-ss\");\n    String dataFormatadaNormal = formatadorTotal.format(data);\n    try {\n      String comando = \"C:\\\\Arquivos de programas\\\\MySQL\\\\MySQL Server 5.0\\\\bin\\\\mysqldump.exe\";\n      ProcessBuilder pb =\n          new ProcessBuilder(\n              comando,\n              \"--user=\" + HibernateConfiguration.getUser(),\n              \"--password=\" + HibernateConfiguration.getPass(),\n              HibernateConfiguration.getBase(),\n              \"--result-file=C:\\\\Okaynet\\\\Andare\\\\Backup\\\\Backup_\" + dataFormatadaNormal + \".sql\");\n      pb.start();\n      JOptionPane.showMessageDialog(null, \"Backup criado com sucesso !\");\n      try {\n        Runtime.getRuntime().exec(\"explorer C:\\\\Okaynet\\\\Andare\\\\Backup\\\\\");\n      } catch (java.io.IOException ex) {\n        JOptionPane.showMessageDialog(null, \"Aconteceu algo inesperado ao executar o Backup!\");\n      }\n    } catch (Exception exc) {\n      JOptionPane.showMessageDialog(null, \"Aconteceu algo inesperado ao executar o Backup!\");\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6474, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder()"], "initializationStart": [508], "initializationEnd": [528], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 235, "tryExpressionEnd": 239, "tryBlockStart": 235, "tryBlockEnd": 807, "catchExpressionStart": 743, "catchExpressionEnd": 763, "catchBlockStart": 743, "catchBlockEnd": 807, "exceptionHandlingCallStart": [777], "exceptionHandlingCallEnd": [800], "configuration": ["processBuilder.command(List<String>)", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [536, 567], "configurationEnd": [559, 595], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 615, "focalAPIEnd": 625, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()", "process.exitValue()"], "useStart": [646, 696, 722], "useEnd": [664, 707, 735], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ferquies/2dam/tree/master/AD/Tema 2/h2/src/tools/org/h2/build/BuildBase.java", "rawCode": "  /**\n   * Execute a program in a separate process.\n   *\n   * @param command the program to run\n   * @param args the command line parameters\n   * @return the exit value\n   */\n  protected int exec(String command, StringList args) {\n    try {\n      print(command);\n      StringList cmd = new StringList();\n      cmd = cmd.plus(command);\n      if (args != null) {\n        for (String a : args) {\n          print(\" \" + a);\n        }\n        cmd.addAll(args);\n      }\n      println(\"\");\n      ProcessBuilder pb = new ProcessBuilder();\n      pb.command(cmd.array());\n      pb.redirectErrorStream(true);\n      Process p = pb.start();\n      copyInThread(p.getInputStream(), quiet ? null : sysOut);\n      p.waitFor();\n      return p.exitValue();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6475, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [911], "initializationEnd": [938], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectOutput(File)", "processBuilder.redirectError(File)"], "configurationStart": [950, 1034], "configurationEnd": [1022, 1104], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 1128, "focalAPIEnd": 1145, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [1205], "useEnd": [1216], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/indykish/megam_chef/tree/master/src/main/java/org/megam/chef/shell/SingleShell.java", "rawCode": "  /**\n   * Processed the command using ProcessBuilder class Print the output's are wrote in the some file\n   */\n  public void compute() {\n    try {\n      boolean stop_flag = false;\n      Command prevCom = null;\n      for (Iterator<Command> iter = cmd.getOrderedCommands().iterator();\n          iter.hasNext() && !stop_flag; ) {\n        Command com = iter.next();\n        List<String> cmdList = new ArrayList<String>();\n        cmdList = com.getCommandList();\n        logger.debug(\"#-------------------------------------------------------#\");\n        logger.debug(cmdList.toString());\n        logger.debug(\"#-------------------------------------------------------#\");\n        if (prevCom != null && prevCom.composable()) {\n          prevCom.pipeto(null); // feed the previous pipe here.\n          cmdList = com.pipeto(prevCom.appliedPlaceHolder());\n        }\n        if (cmdList != null) {\n          shellProc = new ProcessBuilder(cmdList);\n          shellProc.redirectOutput(Redirect.appendTo(com.getRedirectOutputFile()));\n          shellProc.redirectError(Redirect.appendTo(com.getRedirectErrorFile()));\n          Process p = shellProc.start();\n          if (com.composable()) {\n            int subrc = p.waitFor();\n            if (subrc != 0) {\n              stop_flag = true;\n            }\n            prevCom = com;\n          }\n        } else stop_flag = true;\n      }\n    } catch (IOException | InterruptedException | ShellException npe) {\n      try {\n        throw new ShellException(npe);\n      } catch (ShellException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      }\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6476, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [261], "initializationEnd": [282], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.directory(File)", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [322, 370], "configurationEnd": [357, 398], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 417, "focalAPIEnd": 427, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [495], "useEnd": [513], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nourlcn/yarn-comment/tree/master/hadoop-mapreduce-project/src/contrib/block_forensics/client/BlockForensics.java", "rawCode": "  public static void runHadoopCmd(String... args) throws IOException {\n    String hadoop_home = System.getenv(\"HADOOP_PREFIX\");\n\n    List<String> l = new LinkedList<String>();\n    l.add(\"bin/hadoop\");\n    l.addAll(Arrays.asList(args));\n\n    ProcessBuilder pb = new ProcessBuilder(l);\n\n    if (hadoop_home != null) {\n      pb.directory(new File(hadoop_home));\n    }\n\n    pb.redirectErrorStream(true);\n\n    Process p = pb.start();\n\n    BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));\n    String line;\n\n    while ((line = br.readLine()) != null) {\n      System.out.println(line);\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6477, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(*)", "ProcessBuilder processBuilder = new ProcessBuilder(String,String,String)"], "initializationStart": [410, 497], "initializationEnd": [443, 578], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 881, "tryExpressionEnd": 885, "tryBlockStart": 881, "tryBlockEnd": 1048, "catchExpressionStart": 941, "catchExpressionEnd": 963, "catchBlockStart": 941, "catchBlockEnd": 1048, "exceptionHandlingCallStart": [1002], "exceptionHandlingCallEnd": [1021], "configuration": ["processBuilder.directory(File)"], "configurationStart": [837], "configurationEnd": [873], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 909, "focalAPIEnd": 931, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.getInputStream()", "process.getOutputStream()"], "useStart": [1209, 1322, 1425], "useEnd": [1237, 1350, 1454], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/calebegg/proof-pad/tree/master/src/org/proofpad/Acl2.java", "rawCode": "  public void initialize() throws IOException {\n    ProcessBuilder processBuilder;\n    acl2IsSlowShown = false;\n    for (String maybeAcl2Path : acl2Paths) {\n      System.out.println(acl2Paths);\n      if (Main.WIN) {\n        // String ctrlcPath = new File(Main.getJarPath()).getParent() + \"\\\\ctrlc-windows.exe\";\n        // processBuilder = new ProcessBuilder(ctrlcPath, maybeAcl2Path);\n        processBuilder = new ProcessBuilder(maybeAcl2Path);\n      } else {\n        processBuilder =\n            new ProcessBuilder(\"sh\", \"-c\", \"echo \\\"$$\\\"; exec \\\"$0\\\" \\\"$@\\\"\" + maybeAcl2Path);\n      }\n      File maybeWorkingDir;\n      if (workingDir == null) {\n        maybeWorkingDir = (new File(maybeAcl2Path).getParentFile());\n      } else {\n        maybeWorkingDir = workingDir;\n      }\n      // Startup callback\n      callbacks.add(null);\n      processBuilder.directory(workingDir);\n      try {\n        acl2Process = processBuilder.start();\n      } catch (IOException e) {\n        // Try the next path\n        e.printStackTrace();\n        continue;\n      }\n      acl2Path = maybeAcl2Path;\n      workingDir = maybeWorkingDir;\n      if (!Main.WIN) {\n        BufferedReader in = new BufferedReader(new InputStreamReader(acl2Process.getInputStream()));\n        procId = Integer.parseInt(in.readLine());\n      }\n      sp = new Spooler(acl2Process.getInputStream());\n      sp.start();\n      out = new BufferedWriter(new OutputStreamWriter(acl2Process.getOutputStream()));\n      writeAndFlush(\"(cw \\\"\" + marker + \"\\\")\\n\");\n      String draculaPath = \"\";\n      try {\n        if (Main.WIN) {\n          draculaPath = new File(maybeAcl2Path).getParent().replaceAll(\"\\\\\\\\\", \"/\") + \"/dracula\";\n        } else {\n          draculaPath = new File(maybeAcl2Path).getParent().replaceAll(\"\\\\\\\\\", \"\") + \"/dracula\";\n        }\n      } catch (Exception ignored) {\n      }\n      initializing = true;\n      numInitExps = 0;\n      admit(\"(add-include-book-dir :teachpacks \\\"\" + draculaPath + \"\\\")\", doNothingCallback);\n      admit(\"(set-compile-fns nil)\", doNothingCallback);\n      break;\n    }\n    errorOccured = false;\n    // Start a thread to check ACL2 occasionally\n    Thread acl2Monitor =\n        new Thread(\n            new Runnable() {\n              @Override\n              public void run() {\n                while (true) {\n                  try {\n                    Thread.sleep(isBuilder ? 500 : 4000);\n                  } catch (InterruptedException ignored) {\n                  }\n                  if (acl2Process == null) return;\n                  try {\n                    int exitVal = acl2Process.exitValue();\n                    // If we get here, the process has terminated.\n                    System.out.println(\"Exit code: \" + exitVal);\n                    failAllCallbacks();\n                    fireRestartEvent();\n                    showAcl2TerminatedError();\n                    return;\n                  } catch (IllegalThreadStateException ignored) {\n                  }\n                }\n              }\n            },\n            \"ACL2 monitor\");\n    acl2Monitor.start();\n    initializing = false;\n  }\n"}, {"dataset": "start", "exampleID": 6478, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 1998, "tryExpressionEnd": 2002, "tryBlockStart": 1998, "tryBlockEnd": 2643, "catchExpressionStart": 2546, "catchExpressionEnd": 2568, "catchBlockStart": 2546, "catchBlockEnd": 2643, "exceptionHandlingCallStart": [2617], "exceptionHandlingCallEnd": [2636], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 2031, "focalAPIEnd": 2215, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [2240], "useEnd": [2264], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi-2/tree/master/LVAEntlassmitteilung/src/lvaEntlassmitteilung/PDFDummy.java", "rawCode": "  private void doPdfGenerate() {\n    int zeilen = 0;\n    if (this.vec2.size() <= 5) {\n      zeilen = 1;\n    } else {\n      zeilen = (int) this.vec2.size() / 5;\n      if ((this.vec2.size() % 5) > 0) {\n        zeilen++;\n      }\n    }\n    System.out.println(\"Benötigte Zeilen = \" + zeilen);\n\n    int pos = 0;\n    Float xpos;\n    Float ypos;\n\n    Document entlassmitteilung = new Document(PageSize.A4);\n    PdfWriter writer;\n    PdfContentByte cb = null;\n    Font font = new Font(Font.HELVETICA, 12);\n    BaseFont bf = font.getCalculatedBaseFont(false);\n    try {\n      writer =\n          PdfWriter.getInstance(\n              entlassmitteilung, new FileOutputStream(\"C:/Entlassunsmitteilung.pdf\"));\n      writer.setPdfVersion(PdfWriter.VERSION_1_6);\n      entlassmitteilung.open();\n      cb = writer.getDirectContent();\n\n    } catch (FileNotFoundException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (DocumentException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    for (int i1 = 0; i1 < zeilen; i1++) {\n      for (int i2 = 0; i2 < 5; i2++) {\n        ypos = abstandoben + (Float.parseFloat(Integer.toString(i1)) * abstandYzwischen);\n        xpos =\n            abstandlinks\n                + ((Float.parseFloat(Integer.toString(i2)) * (abstandXzwischen + laengedatum)));\n        System.out.println(\n            \"Wert \" + (pos) + \" - Pdf-Position X = \" + PDFTools.getPdfPositionX(xpos));\n        System.out.println(\n            \"Wert \" + (pos) + \" - Pdf-Position Y = \" + PDFTools.getPdfPositionY(ypos));\n        if (pos < this.vec2.size()) {\n          // in pdf schreiben this.vec2.get(pos);\n          PDFTools.setzeText(\n              cb,\n              PDFTools.getPdfPositionX(xpos),\n              842.0f - PDFTools.getPdfPositionY(ypos),\n              1.f,\n              bf,\n              12,\n              this.vec2.get(pos));\n        }\n        pos++;\n      }\n    }\n    entlassmitteilung.close();\n    Process process;\n    try {\n\n      process =\n          new ProcessBuilder(\n                  \"C:/Programme/Adobe/Reader 9.0/Reader/AcroRd32.exe\",\n                  \"\",\n                  \"C:/Entlassunsmitteilung.pdf\")\n              .start();\n      InputStream is = process.getInputStream();\n      InputStreamReader isr = new InputStreamReader(is);\n      BufferedReader br = new BufferedReader(isr);\n      String line;\n      while ((line = br.readLine()) != null) {\n        // System.out.println(line);\n      }\n      is.close();\n      isr.close();\n      br.close();\n    } catch (IOException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6479, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [369], "initializationEnd": [400], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [406], "configurationEnd": [439], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 463, "focalAPIEnd": 478, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [506, 678], "useEnd": [530, 695], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/UrbanCode/terraform/tree/master/src/main/java/com/urbancode/terraform/tasks/microsoft/util/AzureCmdRunner.java", "rawCode": "  public void runCommand(List<String> args) throws IOException, InterruptedException {\n    List<String> commandLine = new ArrayList<String>();\n    commandLine.add(\"azure\");\n    commandLine.addAll(args);\n\n    String cmd = \"\";\n    for (String s : commandLine) {\n      cmd = cmd + s + \" \";\n    }\n    log.info(\"running Azure command: \" + cmd);\n    ProcessBuilder builder = new ProcessBuilder(commandLine);\n    builder.redirectErrorStream(true);\n    Process process = builder.start();\n\n    InputStream procIn = process.getInputStream();\n    String logAsString = IOUtils.toString(procIn);\n    log.info(logAsString);\n    IOUtil.getInstance().discardStream(procIn);\n\n    int exitCode = process.waitFor();\n    if (exitCode != 0) {\n      throw new IOException(\"Command failed with code \" + exitCode);\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6480, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String[])"], "initializationStart": [88], "initializationEnd": [112], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 56, "tryExpressionEnd": 60, "tryBlockStart": 56, "tryBlockEnd": 603, "catchExpressionStart": 549, "catchExpressionEnd": 569, "catchBlockStart": 549, "catchBlockEnd": 603, "exceptionHandlingCallStart": [577], "exceptionHandlingCallEnd": [596], "configuration": ["processBuilder.directory(File)"], "configurationStart": [154], "configurationEnd": [178], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 212, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getErrorStream()", "process.getInputStream()", "process.waitFor()"], "useStart": [309, 376, 446], "useEnd": [333, 400, 463], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CSCSI/Triana/tree/master/triana-shiwaall/src/main/java/org/trianacode/shiwaall/iwir/execute/Executable.java", "rawCode": "  /** Run process. */\n  private void runProcess() {\n    try {\n      ProcessBuilder pb = new ProcessBuilder(args);\n      if (workingDir != null) {\n        pb.directory(workingDir);\n      }\n      Process process = pb.start();\n\n      System.out.println(\"Running \" + process.toString());\n      new StreamToOutput(process.getErrorStream(), \"err\").start();\n      new StreamToOutput(process.getInputStream(), \"std.out\").start();\n\n      int returnCode = process.waitFor();\n      System.out.println(\"Runtime process finished with code \" + returnCode);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6481, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 623, "focalAPIEnd": 662, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [670], "useEnd": [681], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/java/lang/ProcessBuilder/BigFork.java", "rawCode": "  public static void main(String[] args) throws Throwable {\n    showCommittedMemory();\n\n    final int chunkSize = 1024 * 1024 * 100;\n    List<byte[]> chunks = new ArrayList<byte[]>(100);\n    try {\n      for (; ; ) {\n        byte[] chunk = new byte[chunkSize];\n        touchPages(chunk);\n        chunks.add(chunk);\n      }\n    } catch (OutOfMemoryError e) {\n      chunks.set(0, null); // Free up one chunk\n      System.gc();\n      int size = chunks.size();\n      System.out.printf(\"size=%.2gGB%n\", (double) size / 10);\n\n      showCommittedMemory();\n\n      // Can we fork/exec in our current bloated state?\n      Process p = new ProcessBuilder(\"/bin/true\").start();\n      p.waitFor();\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6482, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,*,String,String)"], "initializationStart": [193], "initializationEnd": [273], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [279], "configurationEnd": [312], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 334, "focalAPIEnd": 349, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/epall/selenium/tree/master/selenium/test/java/org/openqa/selenium/SeleniumServerStarter.java", "rawCode": "  private String startSeleniumServer(File seleniumJar) throws IOException {\n    String port = System.getProperty(\"webdriver.selenium.server.port\", \"5555\");\n    ProcessBuilder builder =\n        new ProcessBuilder(\"java\", \"-jar\", seleniumJar.getAbsolutePath(), \"-port\", port);\n    builder.redirectErrorStream(true);\n    serverProcess = builder.start();\n    return port;\n  }\n"}, {"dataset": "start", "exampleID": 6483, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(java.util.List<String>)"], "initializationStart": [641], "initializationEnd": [669], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.directory(File)", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [679, 744], "configurationEnd": [734, 772], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 800, "focalAPIEnd": 810, "followUpCheck": "process.waitFor() == 0", "checkType": "IF", "followUpCheckExpressionStart": 1277, "followUpCheckExpressionEnd": 1304, "followUpCheckBlockStart": 1277, "followUpCheckBlockEnd": 1658, "use": ["process.getInputStream()"], "useStart": [956], "useEnd": [980], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hanynowsky/honeybee/tree/master/src/main/java/org/otika/honeybee/util/UtilityBean.java", "rawCode": "  /**\n   * Executes a bash command - Applicable only in Linux\n   *\n   * @param command\n   * @return Bash_STDOUT_STDERR\n   */\n  public String execBash(String command) {\n    try {\n      if (System.getProperty(\"os.name\").contains(\"inux\")) {\n        java.util.List<String> commands = new ArrayList<>();\n        commands.add(\"bash\"); // or /bin/cat\n        commands.add(\"-c\");\n        // commands.add(\"echo Han | grep [^*]\");\n        // commands.add(\"notify-send Bye $USER -i face-laugh -t 600 -u low -a honeybee\");\n        commands.add(command);\n        System.out.println(\"Executing: \" + commands);\n\n        // Run macro on target\n        pb = new ProcessBuilder(commands);\n        pb.directory(new File(System.getProperty(\"user.home\")));\n        pb.redirectErrorStream(true);\n        Process process = pb.start();\n\n        // Read output\n        StringBuilder sbout = new StringBuilder();\n        BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String line, previous = null;\n        while ((line = br.readLine()) != null) {\n          if (!line.equals(previous)) {\n            previous = line;\n            sbout.append(line).append('\\n');\n            System.out.println(line);\n          }\n        }\n        // Check result\n        if (process.waitFor() == 0) { // Normal value is 0\n          System.out.println(\"Success!\");\n          System.out.println(\"Here is the Bash-return: \" + sbout.toString());\n          return sbout.toString();\n        } else {\n          System.err.println(commands);\n          System.err.println(sbout.toString());\n          System.exit(1);\n          return sbout.toString();\n        }\n        // System.exit(0);\n      }\n    } catch (IOException | InterruptedException ex) {\n      System.out.println(\"Bash command exception!: \" + ex);\n      Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);\n    }\n    return null;\n  } // END OF METHOD\n"}, {"dataset": "start", "exampleID": 6484, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder()"], "initializationStart": [772], "initializationEnd": [792], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 824, "tryExpressionEnd": 828, "tryBlockStart": 824, "tryBlockEnd": 934, "catchExpressionStart": 868, "catchExpressionEnd": 890, "catchBlockStart": 868, "catchBlockEnd": 934, "exceptionHandlingCallStart": [904], "exceptionHandlingCallEnd": [927], "configuration": ["processBuilder.command(List<String>)"], "configurationStart": [798], "configurationEnd": [817], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 850, "focalAPIEnd": 860, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/st-js/st-js/tree/master/test-helper/src/main/java/org/stjs/testing/driver/Xvfb.java", "rawCode": "  @Override\n  public void start() {\n    if (config.isDebugEnabled()) {\n      System.out.println(\"Starting Xvfb...\");\n    }\n\n    // Figure out what the display number is, and generate the properties file\n    if (display == null) {\n      display = detectUsableDisplay();\n    } else {\n      if (isDisplayInUse(display)) {\n        throw new RuntimeException(\n            \"It appears that the configured display is already in use: \" + display);\n      }\n    }\n\n    if (config.isDebugEnabled()) {\n      System.out.println(\"Using display: \" + display);\n    }\n\n    List<String> command = new ArrayList<String>();\n    command.add(this.xvfbExecutable);\n    command.add(this.display);\n    for (String option : this.options) {\n      command.add(option);\n    }\n\n    ProcessBuilder pb = new ProcessBuilder();\n    pb.command(command);\n\n    try {\n      xvfbProcess = pb.start();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    if (this.logFile != null) {\n      // TODO: figure out how to redirect output\n      // log.info(\"Redirecting output to: $logFile\")\n      // redirector(output: logFile)\n    }\n\n    // TODO: wait until the process is really started before returning\n\n    //\n    // launcher.verifier = {\n    // def success = isDisplayInUse(display)\n    // if (success && reuse) {\n    // System.setProperty(DISPLAY_FILE_PROP, displayPropertiesFile.getAbsolutePath())\n    // }\n    // return success\n    // }\n  }\n"}, {"dataset": "start", "exampleID": 6485, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String[])"], "initializationStart": [507], "initializationEnd": [530], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 574, "focalAPIEnd": 584, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [650, 908], "useEnd": [668, 919], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-langtools/tree/master/test/tools/javac/api/ToolProvider/HelloWorldTest.java", "rawCode": "  void run() throws Exception {\n    File javaHome = new File(System.getProperty(\"java.home\"));\n    if (javaHome.getName().equals(\"jre\")) javaHome = javaHome.getParentFile();\n    File javaExe = new File(new File(javaHome, \"bin\"), \"java\");\n    String classpath = System.getProperty(\"java.class.path\");\n\n    String[] cmd = {\n      javaExe.getPath(),\n      \"-verbose:class\",\n      \"-classpath\",\n      classpath,\n      HelloWorldTest.class.getName(),\n      \"Hello\",\n      \"World\"\n    };\n\n    ProcessBuilder pb = new ProcessBuilder(cmd).redirectErrorStream(true);\n    Process p = pb.start();\n    BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));\n    String line;\n    while ((line = r.readLine()) != null) {\n      System.err.println(line);\n      if (line.contains(\"javax.tools.ToolProvider\") || line.contains(\"com.sun.tools.javac.\"))\n        error(\">>> \" + line);\n    }\n    int rc = p.waitFor();\n    if (rc != 0) error(\"Unexpected exit code: \" + rc);\n\n    if (errors > 0) throw new Exception(errors + \" errors occurred\");\n  }\n"}, {"dataset": "start", "exampleID": 6486, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(*)"], "initializationStart": [425], "initializationEnd": [480], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.environment()"], "configurationStart": [486], "configurationEnd": [507], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 553, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [553], "useEnd": [578], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenNMS/installer/tree/master/izpack/src/lib/com/izforge/izpack/installer/PrivilegedRunner.java", "rawCode": "  /**\n   * Relaunches the installer with elevated rights.\n   *\n   * @return the status code returned by the launched process (by convention, 0 means a success).\n   * @throws IOException\n   * @throws InterruptedException\n   */\n  public int relaunchWithElevatedRights() throws IOException, InterruptedException {\n    String javaCommand = getJavaCommand();\n    String installer = getInstallerJar();\n    ProcessBuilder builder = new ProcessBuilder(getElevator(javaCommand, installer));\n    builder.environment().put(\"izpack.mode\", \"privileged\");\n    return builder.start().waitFor();\n  }\n"}, {"dataset": "start", "exampleID": 6487, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String[])"], "initializationStart": [238], "initializationEnd": [265], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [271], "configurationEnd": [311], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 349, "focalAPIEnd": 371, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ExecHelper(IExecEvents,process)"], "useStart": [325], "useEnd": [372], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nbros/OcaIDE/tree/master/Ocaml/src/ocaml/exec/ExecHelper.java", "rawCode": "  /**\n   * Start a process and merge its error and output streams\n   *\n   * @see ExecHelper#exec()\n   */\n  public static ExecHelper execMerge(IExecEvents handler, String command[]) throws IOException {\n    ProcessBuilder processBuilder = new ProcessBuilder(command);\n    processBuilder.redirectErrorStream(true);\n\n    return new ExecHelper(handler, processBuilder.start());\n  }\n"}, {"dataset": "start", "exampleID": 6488, "initialization": ["ProcessBuilder processBuilder = buildProcess(*)"], "initializationStart": [109], "initializationEnd": [138], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 159, "focalAPIEnd": 169, "followUpCheck": "process.waitFor() == 0", "checkType": "IF", "followUpCheckExpressionStart": 204, "followUpCheckExpressionEnd": 228, "followUpCheckBlockStart": 204, "followUpCheckBlockEnd": 293, "use": ["printOutputStream(process)", "process.destroy()"], "useStart": [175, 298], "useEnd": [198, 312], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CeON/CoAnSys/tree/master/commons/src/main/java/pl/edu/icm/coansys/commons/shell/JavaShellRunner.java", "rawCode": "  public static void main(String[] args) throws IOException, InterruptedException {\n\n    ProcessBuilder pb = buildProcess(parseArgs(args));\n    Process proc = pb.start();\n    printOutputStream(proc);\n    if (proc.waitFor() == 0) {\n      System.out.println(\"Process terminates normally\");\n    }\n    proc.destroy();\n  }\n"}, {"dataset": "start", "exampleID": 6489, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(String,String,*,String,*)"], "initializationStart": [462], "initializationEnd": [570], "hasTryCatch": 1, "exceptionType": "InterruptedException", "exceptionHandlingCall": ["new UnpackMethodException(String,*)"], "tryExpressionStart": 372, "tryExpressionEnd": 376, "tryBlockStart": 372, "tryBlockEnd": 983, "catchExpressionStart": 860, "catchExpressionEnd": 891, "catchBlockStart": 860, "catchBlockEnd": 983, "exceptionHandlingCallStart": [905], "exceptionHandlingCallEnd": [976], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 597, "focalAPIEnd": 612, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getErrorStream()", "process.getInputStream()", "process.waitFor()"], "useStart": [662, 742, 834], "useEnd": [686, 766, 851], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tenderowls/haxemojos/tree/master/src/main/java/com/yelbota/plugins/nd/utils/TarBZip2UnpackMethod.java", "rawCode": "  @Override\n\n  /** @inheritDoc */\n  public void unpack(File file, File directory, Log log) throws IOException, UnpackMethodException {\n\n    String os = System.getProperty(\"os.name\").toLowerCase();\n\n    if (!(os.indexOf(\"mac\") > -1 || os.indexOf(\"lin\") > -1)) {\n      throw new UnpackMethodException(\"Tar-bz2 archives supported only under Linux and Mac OS X.\");\n    }\n\n    try {\n\n      // Java 6 doesn't support symlinks.\n      ProcessBuilder builder =\n          new ProcessBuilder(\n              \"tar\", \"-jxvf\", file.getAbsolutePath(), \"-C\", directory.getAbsolutePath());\n\n      Process process = builder.start();\n\n      CleanStream cleanError = new CleanStream(process.getErrorStream(), log);\n      CleanStream cleanOutput = new CleanStream(process.getInputStream(), log);\n\n      cleanError.start();\n      cleanOutput.start();\n      process.waitFor();\n\n    } catch (InterruptedException e) {\n      throw new UnpackMethodException(\"Something happened during running `tar`\", e);\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6490, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(*)"], "initializationStart": [425], "initializationEnd": [480], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.environment()"], "configurationStart": [486], "configurationEnd": [507], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 553, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [553], "useEnd": [578], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.2.0/src/lib/com/izforge/izpack/installer/PrivilegedRunner.java", "rawCode": "  /**\n   * Relaunches the installer with elevated rights.\n   *\n   * @return the status code returned by the launched process (by convention, 0 means a success).\n   * @throws IOException\n   * @throws InterruptedException\n   */\n  public int relaunchWithElevatedRights() throws IOException, InterruptedException {\n    String javaCommand = getJavaCommand();\n    String installer = getInstallerJar();\n    ProcessBuilder builder = new ProcessBuilder(getElevator(javaCommand, installer));\n    builder.environment().put(\"izpack.mode\", \"privileged\");\n    return builder.start().waitFor();\n  }\n"}, {"dataset": "start", "exampleID": 6491, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 614, "focalAPIEnd": 686, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()"], "useStart": [724], "useEnd": [748], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tools/cts-api-coverage/src/com/android/cts/apicoverage/CtsApiCoverage.java", "rawCode": "  /**\n   * Adds coverage information gleamed from running dexdeps on the APK to the {@link ApiCoverage}\n   * object.\n   *\n   * @param apiCoverage object to which the coverage statistics will be added to\n   * @param testApk containing the tests that will be scanned by dexdeps\n   */\n  private static void addApiCoverage(ApiCoverage apiCoverage, File testApk)\n      throws SAXException, IOException {\n    XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n    DexDepsXmlHandler dexDepsXmlHandler = new DexDepsXmlHandler(apiCoverage);\n    xmlReader.setContentHandler(dexDepsXmlHandler);\n\n    Process process = new ProcessBuilder(\"dexdeps\", \"--format=xml\", testApk.getPath()).start();\n    xmlReader.parse(new InputSource(process.getInputStream()));\n  }\n"}, {"dataset": "start", "exampleID": 6492, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder()"], "initializationStart": [423], "initializationEnd": [443], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getName()", "getLogger(*)", "log(*,*,*)"], "tryExpressionStart": 713, "tryExpressionEnd": 717, "tryBlockStart": 713, "tryBlockEnd": 2447, "catchExpressionStart": 1994, "catchExpressionEnd": 2017, "catchBlockStart": 1994, "catchBlockEnd": 2117, "exceptionHandlingCallStart": [2046, 2029, 2029], "exceptionHandlingCallEnd": [2077, 2078, 2106], "configuration": ["processBuilder.environment()", "processBuilder.command(List<String>)", "processBuilder.directory(File)", "processBuilder.redirectErrorStream(boolean)"], "configurationStart": [475, 572, 607, 651], "configurationEnd": [496, 601, 645, 684], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 729, "focalAPIEnd": 744, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getOutputStream()", "process.getInputStream()", "process.exitValue()"], "useStart": [853, 1089, 1938], "useEnd": [872, 1107, 1951], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/miho/VRL/tree/master/VRL/src/eu/mihosoft/vrl/io/ProcessTemplate.java", "rawCode": "  /** This method executes the specified command. */\n  public void run() {\n\n    MessageList messages = new MessageList();\n    messages.setMessageListSize(getNumberOfMessageLines());\n\n    for (int i = 0; i < getNumberOfMessageLines(); i++) {\n      messages.addMessage(\"\");\n    }\n\n    String mString = getProcessTitle() + \": <br><br>\" + messages.getMessages();\n\n    getViewer().update(mString);\n\n    ProcessBuilder builder = new ProcessBuilder();\n    Map<String, String> env = builder.environment();\n\n    if (environment != null) {\n      env.putAll(environment);\n    }\n\n    builder.command(getCommand());\n    builder.directory(new File(getPath()));\n    builder.redirectErrorStream(true);\n\n    final Process p;\n\n    try {\n      p = builder.start();\n\n      if (getInput() != null) {\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));\n\n        for (String s : getInput()) {\n          writer.write(s);\n          writer.newLine();\n        }\n\n        writer.flush();\n      }\n\n      final BufferedReader read = new BufferedReader(new InputStreamReader(p.getInputStream()));\n\n      output = new ArrayList<String>();\n\n      long timeStart = 0;\n      long timeStop = 0;\n\n      boolean notFinished = true;\n      while (notFinished) {\n        try {\n          while (read.ready()) {\n            String line = read.readLine();\n            output.add(line);\n            messages.addMessage(line);\n\n            // don't update the message buffer more than\n            // ten times per second\n            if (timeStop - timeStart > 100 || (timeStart == 0 && timeStop == 0)) {\n              timeStart = System.currentTimeMillis();\n              if (getViewer() != null) {\n                String message = getProcessTitle() + \": <br><br>\" + messages.getMessages();\n                getViewer().update(message);\n              }\n            }\n            timeStop = System.currentTimeMillis();\n          }\n          p.exitValue();\n          notFinished = false;\n        } catch (IOException ex) {\n          Logger.getLogger(ProcessTemplate.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (IllegalThreadStateException ex) {\n          notFinished = true;\n        }\n      }\n\n      String message = getProcessTitle() + \": <br><br>\" + messages.getMessages();\n      getViewer().update(message);\n\n    } catch (IOException ex) {\n      Logger.getLogger(ProcessTemplate.class.getName()).log(Level.SEVERE, null, ex);\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6493, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new WebDriverException(String,*)"], "tryExpressionStart": 69, "tryExpressionEnd": 73, "tryBlockStart": 69, "tryBlockEnd": 580, "catchExpressionStart": 466, "catchExpressionEnd": 486, "catchBlockStart": 466, "catchBlockEnd": 580, "exceptionHandlingCallStart": [518], "exceptionHandlingCallEnd": [571], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 155, "focalAPIEnd": 177, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ProcessWrapper(process)"], "useStart": [136], "useEnd": [178], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mfazekas/safaridriver/tree/master/safari/src/java/org/openqa/selenium/safari/SafariBinary.java", "rawCode": "  public void startSafari() {\n    if (safariProcess == null) {\n      try {\n        setupBuilderEnvironments();\n\n        safariProcess = new ProcessWrapper(processBuilder.start());\n        safariProcess.addProcessListener(\n            new ProcessListener() {\n              public void onProcessFinished() {\n                safariProcess = null;\n              }\n            });\n\n        waitForServerToRespond(new URL(getUrl()), MAX_LOAD_WAIT, safariProcess);\n      } catch (Exception e) {\n        quit();\n        throw new WebDriverException(\"Failed to launch Safari.\", e);\n      }\n    } else {\n      throw new WebDriverException(\"Safari is already running.\");\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6494, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [461], "initializationEnd": [484], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [490], "configurationEnd": [518], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 536, "focalAPIEnd": 546, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.waitFor()"], "useStart": [613, 863], "useEnd": [631, 874], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ceylon/ceylon-compiler/tree/master/langtools/test/tools/javah/compareTest/CompareTest.java", "rawCode": "  int old_javah(List<String> options, File outDir, File bootclasspath, String className)\n      throws IOException, InterruptedException {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(old_javah_cmd.getPath());\n    cmd.addAll(options);\n    cmd.add(\"-d\");\n    cmd.add(outDir.getPath());\n    cmd.add(\"-bootclasspath\");\n    cmd.add(bootclasspath.getPath());\n    cmd.add(className);\n    System.err.println(\"old_javah: \" + cmd);\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n    String line;\n    StringBuilder sb = new StringBuilder();\n    while ((line = in.readLine()) != null) {\n      sb.append(line);\n      sb.append(\"\\n\");\n    }\n    System.err.println(\"old javah out: \" + sb.toString());\n    return p.waitFor();\n  }\n"}, {"dataset": "start", "exampleID": 6495, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 63, "tryExpressionEnd": 67, "tryBlockStart": 63, "tryBlockEnd": 524, "catchExpressionStart": 470, "catchExpressionEnd": 490, "catchBlockStart": 470, "catchBlockEnd": 524, "exceptionHandlingCallStart": [498], "exceptionHandlingCallEnd": [517], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 85, "focalAPIEnd": 100, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getInputStream()", "process.destroy()"], "useStart": [126, 406], "useEnd": [150, 423], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rob42/freeboard-server/tree/master/src/main/java/nz/co/fortytwo/freeboard/server/util/ForkWorker.java", "rawCode": "  public String doInBackground() {\n    // Process process;\n    try {\n      process = builder.start();\n      InputStream res = process.getInputStream();\n      byte[] buffer = new byte[1];\n      int len;\n      while ((len = res.read(buffer, 0, buffer.length)) != -1) {\n        // publish(new String(buffer,0,len));\n        System.out.print(new String(buffer, 0, len));\n        if (isCancelled()) {\n          process.destroy();\n          return \"\";\n        }\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return \"\"; // Don't care\n  }\n"}, {"dataset": "start", "exampleID": 6496, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "InterruptedException", "exceptionHandlingCall": ["new WebDriverException(*)"], "tryExpressionStart": 219, "tryExpressionEnd": 223, "tryBlockStart": 219, "tryBlockEnd": 413, "catchExpressionStart": 267, "catchExpressionEnd": 298, "catchBlockStart": 267, "catchBlockEnd": 344, "exceptionHandlingCallStart": [312], "exceptionHandlingCallEnd": [337], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 231, "focalAPIEnd": 249, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()"], "useStart": [231], "useEnd": [259], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/akiellor/selenium/tree/master/java/client/src/org/openqa/selenium/iphone/IPhoneSimulatorBinary.java", "rawCode": "  /**\n   * Kills iWebDriver and the iPhone Simulator.\n   *\n   * @see SubProcess#shutdown()\n   */\n  @Override\n  public void shutdown() {\n    // This will kill iWebDriver, which will in turn terminate our run script.\n    try {\n      killScript.start().waitFor();\n    } catch (InterruptedException e) {\n      throw new WebDriverException(e);\n    } catch (IOException e) {\n      throw new WebDriverException(e);\n    }\n\n    super.shutdown();\n  }\n"}, {"dataset": "start", "exampleID": 6497, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [436], "initializationEnd": [463], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new ActivitiException(String,*)"], "tryExpressionStart": 470, "tryExpressionEnd": 474, "tryBlockStart": 470, "tryBlockEnd": 1330, "catchExpressionStart": 1229, "catchExpressionEnd": 1249, "catchBlockStart": 1229, "catchBlockEnd": 1330, "exceptionHandlingCallStart": [1263], "exceptionHandlingCallEnd": [1323], "configuration": ["processBuilder.redirectErrorStream(Boolean)", "processBuilder.environment()", "processBuilder.directory(File)"], "configurationStart": [482, 599, 727], "configurationEnd": [535, 627, 775], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 802, "focalAPIEnd": 824, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.waitFor()", "process.getInputStream()"], "useStart": [873, 979], "useEnd": [890, 1003], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ThorbenLindhauer/activiti-engine-ppi/tree/master/modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ShellActivityBehavior.java", "rawCode": "  public void execute(ActivityExecution execution) {\n\n    readFields(execution);\n\n    List<String> argList = new ArrayList<String>();\n    argList.add(commandStr);\n\n    if (arg1Str != null) argList.add(arg1Str);\n    if (arg2Str != null) argList.add(arg2Str);\n    if (arg3Str != null) argList.add(arg3Str);\n    if (arg4Str != null) argList.add(arg4Str);\n    if (arg5Str != null) argList.add(arg5Str);\n\n    ProcessBuilder processBuilder = new ProcessBuilder(argList);\n\n    try {\n      processBuilder.redirectErrorStream(redirectErrorFlag);\n      if (cleanEnvBoolan) {\n        Map<String, String> env = processBuilder.environment();\n        env.clear();\n      }\n      if (directoryStr != null && directoryStr.length() > 0)\n        processBuilder.directory(new File(directoryStr));\n\n      Process process = processBuilder.start();\n\n      if (waitFlag) {\n        int errorCode = process.waitFor();\n\n        if (resultVariableStr != null) {\n          String result = convertStreamToStr(process.getInputStream());\n          execution.setVariable(resultVariableStr, result);\n        }\n\n        if (errorCodeVariableStr != null) {\n          execution.setVariable(errorCodeVariableStr, Integer.toString(errorCode));\n        }\n      }\n    } catch (Exception e) {\n      throw new ActivitiException(\"Could not execute shell command \", e);\n    }\n\n    leave(execution);\n  }\n"}, {"dataset": "start", "exampleID": 6498, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder(List<String>)"], "initializationStart": [599], "initializationEnd": [626], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)"], "configurationStart": [632], "configurationEnd": [660], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 678, "focalAPIEnd": 688, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["process.getOutputStream()", "process.getInputStream()", "process.waitFor()"], "useStart": [694, 847, 951], "useEnd": [713, 865, 962], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmyroadctfig/unexceptional-javac/tree/master/test/tools/javah/T6893943.java", "rawCode": "  void testCommand(String[] args, int expect_rc) throws Exception {\n    System.err.println(\"Test command: \" + Arrays.asList(args));\n    File javaHome = new File(System.getProperty(\"java.home\"));\n    if (javaHome.getName().equals(\"jre\")) javaHome = javaHome.getParentFile();\n\n    List<String> command = new ArrayList<String>();\n    command.add(new File(new File(javaHome, \"bin\"), \"javah\").getPath());\n    command.add(\"-J-Xbootclasspath:\" + System.getProperty(\"sun.boot.class.path\"));\n    command.addAll(Arrays.asList(args));\n    // System.err.println(\"command: \" + command);\n\n    ProcessBuilder pb = new ProcessBuilder(command);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    p.getOutputStream().close();\n    StringWriter sw = new StringWriter();\n    String line;\n    BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n    while ((line = in.readLine()) != null) sw.write(line + NEWLINE);\n    int rc = p.waitFor();\n    expect(\"testCommand\", sw.toString(), rc, expect_rc);\n  }\n"}, {"dataset": "start", "exampleID": 6499, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace(*)"], "tryExpressionStart": 193, "tryExpressionEnd": 197, "tryBlockStart": 193, "tryBlockEnd": 358, "catchExpressionStart": 294, "catchExpressionEnd": 314, "catchBlockStart": 294, "catchBlockEnd": 358, "exceptionHandlingCallStart": [322], "exceptionHandlingCallEnd": [351], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 217, "focalAPIEnd": 286, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ph4r05/WSNTestbed/tree/master/src/main/java/fi/wsnusbcollect/utils/ExternalSoundPlayer.java", "rawCode": "  @Override\n  public void run() {\n    File soundFile = new File(filename);\n    if (!soundFile.exists()) {\n      System.err.println(\"Wave file not found: \" + filename);\n      return;\n    }\n\n    try {\n      Process p = new ProcessBuilder(ExternalSoundPlayer.soundPlayer, filename).start();\n    } catch (Exception e) {\n      e.printStackTrace(System.err);\n    }\n  }\n"}, {"dataset": "start", "exampleID": 6500, "initialization": ["ProcessBuilder processBuilder = new ProcessBuilder()"], "initializationStart": [519], "initializationEnd": [539], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["processBuilder.redirectErrorStream(boolean)", "processBuilder.command(String[])"], "configurationStart": [547, 588], "configurationEnd": [580, 612], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "process = processBuilder.start()", "focalAPIStart": 651, "focalAPIEnd": 666, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["executeACommand(process)"], "useStart": [635], "useEnd": [667], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openengsb/openengsb/tree/master/tooling/wsdl2dll/src/main/java/org/openengsb/loom/csharp/comon/wsdltodll/WsdlToDll.java", "rawCode": "  /** Search for the wsdl command and execute it when it is found */\n  private void wsdlCommand() throws MojoExecutionException {\n    String cmd = findWsdlCommand();\n    int i = 0;\n    for (String location : wsdlLocations) {\n      String outputFilename =\n          new File(outputDirectory, namespace + (i++) + \".cs\").getAbsolutePath();\n      String[] command =\n          new String[] {\n            cmd, serverParameter, \"/n:\" + namespace, location, \"/out:\" + outputFilename\n          };\n      ProcessBuilder builder = new ProcessBuilder();\n      builder.redirectErrorStream(true);\n      builder.command(command);\n\n      try {\n        executeACommand(builder.start());\n      } catch (IOException | InterruptedException e) {\n        throw new MojoExecutionException(\n            \"Error, while executing command: \" + Arrays.toString(command) + \"\\n\", e);\n      }\n      cspath.add(outputFilename);\n    }\n    try {\n      FileComparer.removeSimilaritiesAndSaveFiles(cspath, getLog(), windowsModus);\n    } catch (IOException e) {\n      throw new MojoExecutionException(\n          \"It was not possible, to remove similarities form the files\", e);\n    }\n  }\n"}]