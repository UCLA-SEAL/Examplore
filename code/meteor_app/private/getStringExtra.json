[{"dataset": "getStringExtra", "exampleID": 2801, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 100, "focalAPIEnd": 140, "followUpCheck": "str == null || str.isEmpty()", "checkType": "IF", "followUpCheckExpressionStart": 232, "followUpCheckExpressionEnd": 267, "followUpCheckBlockStart": 232, "followUpCheckBlockEnd": 411, "use": ["intent.setClassName(String,String)", "startActivity(intent)", "intent.getExtras()", "new ArgProcessor(*,str)", "intent.getStringExtra(String)"], "useStart": [276, 352, 521, 504, 716], "useEnd": [344, 390, 539, 546, 757], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/webinos/Webinos-Platform/tree/master/webinos/platform/android/app/src/org/webinos/app/anode/AnodeService.java", "rawCode": "  private void handleStart(Intent intent) {\n\n    /* get the launch commandline */\n    String args = intent.getStringExtra(AnodeReceiver.CMD);\n\n    /* if no cmdline was sent, then launch the activity for interactive behaviour */\n    if (args == null || args.isEmpty()) {\n      intent.setClassName(getApplication(), AnodeActivity.class.getName());\n      getApplication().startActivity(intent);\n      return;\n    }\n\n    /* create a new instance based on the supplied args */\n    ArgProcessor argProcessor = new ArgProcessor(intent.getExtras(), args);\n    String[] processedArgs = argProcessor.processArray();\n\n    /* launch directly */\n    try {\n      Isolate isolate = Runtime.createIsolate();\n      String instance = intent.getStringExtra(AnodeReceiver.INST);\n      isolate.addStateListener(new ServiceListener(addInstance(instance, isolate)));\n      isolate.start(processedArgs);\n    } catch (IllegalStateException e) {\n      Log.v(TAG, \"AnodeReceiver.onReceive::start: exception: \" + e + \"; cause: \" + e.getCause());\n    } catch (NodeException e) {\n      Log.v(TAG, \"AnodeReceiver.onReceive::start: exception: \" + e + \"; cause: \" + e.getCause());\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2802, "initialization": ["Intent intent = getIntent()"], "initializationStart": [244], "initializationEnd": [255], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 273, "focalAPIEnd": 310, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getBooleanExtra(String,boolean)"], "useStart": [338], "useEnd": [404], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jmorille/android/tree/master/geoPingProject/geoPing/src/main/java/eu/ttbox/geoping/service/accountsync/LoginActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle icicle) {\n\n    Log.i(TAG, \"onCreate(\" + icicle + \")\");\n    super.onCreate(icicle);\n    mAccountManager = AccountManager.get(this);\n\n    Log.i(TAG, \"loading data from Intent\");\n    final Intent intent = getIntent();\n    mUsername = intent.getStringExtra(PARAM_USERNAME);\n    mConfirmCredentials = intent.getBooleanExtra(Constants.PARAM_CONFIRM_CREDENTIALS, false);\n\n    mRequestNewAccount = mUsername == null;\n\n    mUsername = \"GeoPing\";\n    // Mock\n    handleLogin(null);\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2803, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 203, "focalAPIEnd": 235, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sendNotificationIntent(Context,str,boolean,boolean)"], "useStart": [130], "useEnd": [249], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/parmalazs/schonherz/tree/master/FlottaKezelo/src/com/schonherz/flottadroid/GCMIntentService.java", "rawCode": "  /** Called when a cloud message has been received. */\n  @Override\n  public void onMessage(Context context, Intent intent) {\n    sendNotificationIntent(\n        context, \"Üzenet via FlottaDroid:\\n\\n\" + intent.getStringExtra(\"message\"), true, false);\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2804, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 553, "focalAPIEnd": 589, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "intent.getByteArrayExtra(String)", "intent.getIntExtra(String,int)", "intent.getStringExtra(String)", "new IntentResult(str,String,byte[],Integer,String)"], "useStart": [619, 690, 769, 970, 1046], "useEnd": [662, 735, 833, 1029, 1129], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jedld/droiuby/tree/master/droiuby-core/core_src/com/droiuby/client/core/utils/intents/IntentIntegrator.java", "rawCode": "  /**\n   * Call this from your {@link Activity}'s {@link Activity#onActivityResult(int, int, Intent)}\n   * method.\n   *\n   * @return null if the event handled here was not related to this class, or else an {@link\n   *     IntentResult} containing the result of the scan. If the user cancelled scanning, the fields\n   *     will be null.\n   */\n  public static IntentResult parseActivityResult(int requestCode, int resultCode, Intent intent) {\n    if (requestCode == REQUEST_CODE) {\n      if (resultCode == Activity.RESULT_OK) {\n        String contents = intent.getStringExtra(\"SCAN_RESULT\");\n        String formatName = intent.getStringExtra(\"SCAN_RESULT_FORMAT\");\n        byte[] rawBytes = intent.getByteArrayExtra(\"SCAN_RESULT_BYTES\");\n        int intentOrientation = intent.getIntExtra(\"SCAN_RESULT_ORIENTATION\", Integer.MIN_VALUE);\n        Integer orientation = intentOrientation == Integer.MIN_VALUE ? null : intentOrientation;\n        String errorCorrectionLevel = intent.getStringExtra(\"SCAN_RESULT_ERROR_CORRECTION_LEVEL\");\n        return new IntentResult(contents, formatName, rawBytes, orientation, errorCorrectionLevel);\n      }\n      return new IntentResult();\n    }\n    return null;\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2805, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(NativeProtocol.isServiceDisabledResult20121101(intent,))", "guardType": "IF {", "guardExpressionStart": 97, "guardExpressionEnd": 154, "guardBlockStart": 97, "guardBlockEnd": 805, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 387, "focalAPIEnd": 447, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createCancelResult(str)", "handleResultOk(intent)"], "useStart": [342, 639], "useEnd": [448, 659], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/imkevinxu/totoro/tree/master/facebook-android-sdk-3.0/facebook/src/com/facebook/AuthorizationClient.java", "rawCode": "    @Override\n    boolean onActivityResult(int requestCode, int resultCode, Intent data) {\n      if (NativeProtocol.isServiceDisabledResult20121101(data)) {\n        tryNextHandler();\n      } else {\n        // Handle stuff\n        Result outcome = null;\n\n        if (resultCode == Activity.RESULT_CANCELED) {\n          outcome =\n              Result.createCancelResult(\n                  data.getStringExtra(NativeProtocol.STATUS_ERROR_DESCRIPTION));\n        } else if (resultCode != Activity.RESULT_OK) {\n          outcome = Result.createErrorResult(\"Unexpected resultCode from authorization.\", null);\n        } else {\n          outcome = handleResultOk(data);\n        }\n\n        if (outcome != null) {\n          completeAndValidate(outcome);\n        } else {\n          tryNextHandler();\n        }\n      }\n      return true;\n    }\n"}, {"dataset": "getStringExtra", "exampleID": 2806, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()", "intent.getIntExtra(String,int)"], "configurationStart": [146, 293], "configurationEnd": [164, 364], "guardCondition": "!(intent==null)", "guardType": "IF {", "guardExpressionStart": 92, "guardExpressionEnd": 111, "guardBlockStart": 92, "guardBlockEnd": 119, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 974, "focalAPIEnd": 1023, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzo/packages_apps_settings/tree/master/tests/src/com/android/settings/tests/BluetoothRequestPermissionTest.java", "rawCode": "        @Override\n        public void onReceive(Context context, Intent intent) {\n          if (intent == null) return;\n          String action = intent.getAction();\n          if (BluetoothAdapter.ACTION_STATE_CHANGED.equals(action)) {\n            String stateStr = \"???\";\n            switch (intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothDevice.ERROR)) {\n              case BluetoothAdapter.STATE_OFF:\n                stateStr = \"off\";\n                break;\n              case BluetoothAdapter.STATE_TURNING_ON:\n                stateStr = \"turning on\";\n                break;\n              case BluetoothAdapter.STATE_ON:\n                stateStr = \"on\";\n                break;\n              case BluetoothAdapter.STATE_TURNING_OFF:\n                stateStr = \"turning off\";\n                break;\n            }\n            addMsg(\"Bluetooth status = \" + stateStr);\n          } else if (action.equals(BluetoothDevice.ACTION_FOUND)) {\n            String name = intent.getStringExtra(BluetoothDevice.EXTRA_NAME);\n            addMsg(\"Found: \" + name);\n          } else if (action.equals(BluetoothAdapter.ACTION_DISCOVERY_STARTED)) {\n            addMsg(\"Scan started...\");\n          } else if (action.equals(BluetoothAdapter.ACTION_DISCOVERY_FINISHED)) {\n            addMsg(\"Scan ended\");\n          }\n        }\n"}, {"dataset": "getStringExtra", "exampleID": 2807, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()"], "configurationStart": [277], "configurationEnd": [295], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 729, "focalAPIEnd": 757, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getIntExtra(String,int)", "getAccount(str,int)"], "useStart": [782, 843], "useEnd": [811, 879], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AlloyAndroidTeam/AlloyWeiBo/tree/master/src/com/alloyteam/weibo/MainActivity.java", "rawCode": "        @Override\n        public void onReceive(Context context, Intent intent) {\n          // String uid = intent.getStringExtra(\"uid\");\n          // int type = intent.getIntExtra(\"type\", 0);\n          // Log.v(TAG, \"onReceive: \" + uid + \" added.\");\n          String action = intent.getAction();\n          if (\"com.alloyteam.weibo.DEFAULT_ACCOUNT_CHANGE\".equals(action)) {\n            Account account = AccountManager.getDefaultAccount();\n            if (account != null) {\n              accountSwitchBtn.setText(getAccountDescption(account));\n            } else {\n              accountSwitchBtn.setText(\"绑定帐号\");\n            }\n          } else if (\"com.alloyteam.weibo.ACCOUNT_UPDATE\".equals(action)) {\n            String uid = intent.getStringExtra(\"uid\");\n            int type = intent.getIntExtra(\"type\", 0);\n            Account account = AccountManager.getAccount(uid, type);\n            Account defaultAccount = AccountManager.getDefaultAccount();\n            if (account.equals(defaultAccount)) {\n              accountSwitchBtn.setText(getAccountDescption(account));\n            }\n          }\n          if (\"com.alloyteam.weibo.DEFAULT_ACCOUNT_CHANGE\".equals(action)) {\n            initHomeLine();\n          } else if (\"com.alloyteam.weibo.WEIBO_ADDED\".equals(action)) {\n            // mPullDownView.initHeaderViewAndFooterViewAndListView(context);\n            onRefresh();\n          }\n        }\n"}, {"dataset": "getStringExtra", "exampleID": 2808, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "intent!=null", "guardType": "IF {", "guardExpressionStart": 155, "guardExpressionEnd": 191, "guardBlockStart": 155, "guardBlockEnd": 454, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 241, "focalAPIEnd": 354, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["showKeyboardLayoutDialog(str)"], "useStart": [400], "useEnd": [447], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/g3tsum/rb_apps_Settings/tree/master/src/com/android/settings/inputmethod/InputMethodAndLanguageSettings.java", "rawCode": "  @Override\n  public void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n\n    if (mIntentWaitingForResult != null) {\n      String inputDeviceDescriptor =\n          mIntentWaitingForResult.getStringExtra(\n              KeyboardLayoutPickerFragment.EXTRA_INPUT_DEVICE_DESCRIPTOR);\n      mIntentWaitingForResult = null;\n      showKeyboardLayoutDialog(inputDeviceDescriptor);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2809, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 221, "focalAPIEnd": 261, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["str.split(String)"], "useStart": [284], "useEnd": [300], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hellhand/SabdroidEx/tree/master/src/com/sabdroidex/activity/CouchPotatoActivity.java", "rawCode": "  /**\n   * Handle intent and add to CouchPotato\n   *\n   * @param intent The Intent containing the imdb id to send to Couchpotato\n   */\n  private void handleSendIntent(Intent intent) {\n    String idMDBi;\n    String text = intent.getStringExtra(Intent.EXTRA_TEXT);\n    String[] array = text.split(\"\\n\");\n    String title = array[0];\n    Matcher matcher = pattern.matcher(array[1]);\n    if (matcher.find()) {\n      idMDBi = matcher.group();\n      CouchPotatoController.addMovie(\n          messageHandler, Preferences.get(Preferences.COUCHPOTATO_PROFILE), idMDBi, title);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2810, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Intent.ACTION_SEARCH.equals(intent.getAction(),)", "guardType": "IF {", "guardExpressionStart": 49, "guardExpressionEnd": 101, "guardBlockStart": 49, "guardBlockEnd": 199, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 125, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["doMySearch(str)"], "useStart": [175], "useEnd": [192], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mobmewireless/tvticker/tree/master/src/in/mobme/tvticker/SearchableActivity.java", "rawCode": "  private void handleIntent(Intent intent) {\n    if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\n      String query = intent.getStringExtra(SearchManager.QUERY);\n      doMySearch(query);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2811, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 129, "focalAPIEnd": 171, "followUpCheck": "str != null && str.length() > 0", "checkType": "IF", "followUpCheckExpressionStart": 179, "followUpCheckExpressionEnd": 217, "followUpCheckBlockStart": 179, "followUpCheckBlockEnd": 344, "use": ["intent.getStringExtra(String)", "intent.getStringExtra(String)", "formatNumber(str)", "intent.getStringExtra(String)", "formatNumber(str)", "intent.getBundleExtra(String)", "intent.getBundleExtra(String)"], "useStart": [436, 736, 867, 1062, 1193, 1373, 2982], "useEnd": [478, 778, 902, 1104, 1228, 1415, 3024], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aaujon/Inventirap/tree/master/iOS/zxing/android/src/com/google/zxing/client/android/encode/QRCodeEncoder.java", "rawCode": "  private void encodeQRCodeContents(Intent intent, String type) {\n    if (type.equals(Contents.Type.TEXT)) {\n      String data = intent.getStringExtra(Intents.Encode.DATA);\n      if (data != null && data.length() > 0) {\n        contents = data;\n        displayContents = data;\n        title = activity.getString(R.string.contents_text);\n      }\n    } else if (type.equals(Contents.Type.EMAIL)) {\n      String data = ContactEncoder.trim(intent.getStringExtra(Intents.Encode.DATA));\n      if (data != null) {\n        contents = \"mailto:\" + data;\n        displayContents = data;\n        title = activity.getString(R.string.contents_email);\n      }\n    } else if (type.equals(Contents.Type.PHONE)) {\n      String data = ContactEncoder.trim(intent.getStringExtra(Intents.Encode.DATA));\n      if (data != null) {\n        contents = \"tel:\" + data;\n        displayContents = PhoneNumberUtils.formatNumber(data);\n        title = activity.getString(R.string.contents_phone);\n      }\n    } else if (type.equals(Contents.Type.SMS)) {\n      String data = ContactEncoder.trim(intent.getStringExtra(Intents.Encode.DATA));\n      if (data != null) {\n        contents = \"sms:\" + data;\n        displayContents = PhoneNumberUtils.formatNumber(data);\n        title = activity.getString(R.string.contents_sms);\n      }\n    } else if (type.equals(Contents.Type.CONTACT)) {\n\n      Bundle bundle = intent.getBundleExtra(Intents.Encode.DATA);\n      if (bundle != null) {\n\n        String name = bundle.getString(ContactsContract.Intents.Insert.NAME);\n        String organization = bundle.getString(ContactsContract.Intents.Insert.COMPANY);\n        String address = bundle.getString(ContactsContract.Intents.Insert.POSTAL);\n        Collection<String> phones = new ArrayList<String>(Contents.PHONE_KEYS.length);\n        for (int x = 0; x < Contents.PHONE_KEYS.length; x++) {\n          phones.add(bundle.getString(Contents.PHONE_KEYS[x]));\n        }\n        Collection<String> emails = new ArrayList<String>(Contents.EMAIL_KEYS.length);\n        for (int x = 0; x < Contents.EMAIL_KEYS.length; x++) {\n          emails.add(bundle.getString(Contents.EMAIL_KEYS[x]));\n        }\n        String url = bundle.getString(Contents.URL_KEY);\n        String note = bundle.getString(Contents.NOTE_KEY);\n\n        ContactEncoder mecardEncoder =\n            useVCard ? new VCardContactEncoder() : new MECARDContactEncoder();\n        String[] encoded =\n            mecardEncoder.encode(\n                Collections.singleton(name),\n                organization,\n                Collections.singleton(address),\n                phones,\n                emails,\n                url,\n                note);\n        // Make sure we've encoded at least one field.\n        if (encoded[1].length() > 0) {\n          contents = encoded[0];\n          displayContents = encoded[1];\n          title = activity.getString(R.string.contents_contact);\n        }\n      }\n\n    } else if (type.equals(Contents.Type.LOCATION)) {\n      Bundle bundle = intent.getBundleExtra(Intents.Encode.DATA);\n      if (bundle != null) {\n        // These must use Bundle.getFloat(), not getDouble(), it's part of the API.\n        float latitude = bundle.getFloat(\"LAT\", Float.MAX_VALUE);\n        float longitude = bundle.getFloat(\"LONG\", Float.MAX_VALUE);\n        if (latitude != Float.MAX_VALUE && longitude != Float.MAX_VALUE) {\n          contents = \"geo:\" + latitude + ',' + longitude;\n          displayContents = latitude + \",\" + longitude;\n          title = activity.getString(R.string.contents_location);\n        }\n      }\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2812, "initialization": ["Intent intent = getIntent()"], "initializationStart": [231], "initializationEnd": [242], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "intent!=null", "guardType": "IF {", "guardExpressionStart": 249, "guardExpressionEnd": 263, "guardBlockStart": 249, "guardBlockEnd": 439, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 286, "focalAPIEnd": 324, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getIntExtra(String,int)"], "useStart": [346], "useEnd": [385], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rocapal/cursoAndroidURJC/tree/master/2ndEdition/laura.nunezgonzalez/2-Activities/src/es/android/actividades/ActividadDos.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.actividad_texto);\n\n    TextView tv = (TextView) this.findViewById(R.id.tvTitle);\n    Intent i = getIntent();\n\n    if (i != null) {\n      String name = i.getStringExtra(ActividadUno.VALUE_1);\n      Integer num = i.getIntExtra(ActividadUno.VALUE_2, -1);\n      tv.setText(name + \" \" + num.toString());\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2813, "initialization": ["Intent intent = getIntent()"], "initializationStart": [104], "initializationEnd": [115], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "intent!=null", "guardType": "IF {", "guardExpressionStart": 121, "guardExpressionEnd": 140, "guardBlockStart": 121, "guardBlockEnd": 438, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 176, "focalAPIEnd": 213, "followUpCheck": "!TextUtils.isEmpty(str)", "checkType": "IF", "followUpCheckExpressionStart": 293, "followUpCheckExpressionEnd": 364, "followUpCheckBlockStart": 293, "followUpCheckBlockEnd": 432, "use": ["intent.getStringExtra(String)", "new Account(str,String)"], "useStart": [248, 386], "useEnd": [285, 423], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OMFGB/packages_apps_Phone/tree/master/src/com/android/phone/SimContacts.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    Intent intent = getIntent();\n    if (intent != null) {\n      final String accountName = intent.getStringExtra(\"account_name\");\n      final String accountType = intent.getStringExtra(\"account_type\");\n      if (!TextUtils.isEmpty(accountName) && !TextUtils.isEmpty(accountType)) {\n        mAccount = new Account(accountName, accountType);\n      }\n    }\n\n    registerForContextMenu(getListView());\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2814, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()", "intent.getIntExtra(String,int)"], "configurationStart": [150, 415], "configurationEnd": [168, 450], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 474, "focalAPIEnd": 510, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setTrigger(int,str)", "setTrigger(int,str)", "removeTrigger(int,str)", "removeTrigger(int,str)", "setTrigger(int,str)"], "useStart": [736, 892, 1052, 1215, 1254], "useEnd": [764, 920, 1083, 1246, 1282], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cens/ohmagePhone/tree/master/src/org/ohmage/triggers/types/time/TimeTrigService.java", "rawCode": "  @Override\n  public int onStartCommand(Intent intent, int flags, int startId) {\n\n    Log.v(TAG, \"TimeTriggerService: onStart\");\n\n    String action = intent.getAction();\n    if (action == null || !intent.hasExtra(KEY_TRIG_ID) || !intent.hasExtra(KEY_TRIG_DESC)) {\n\n      Log.e(TAG, \"TimeTriggerService: Started with invalid intent\");\n\n      releaseWakeLock();\n      return START_NOT_STICKY;\n    }\n\n    int trigId = intent.getIntExtra(KEY_TRIG_ID, -1);\n    String trigDesc = intent.getStringExtra(KEY_TRIG_DESC);\n\n    if (action.equals(ACTION_HANDLE_TRIGGER)) {\n      Log.v(TAG, \"TimeTriggerService: Handling trigger \" + trigId);\n\n      // Notify user\n      new TimeTrigger().notifyTrigger(this, trigId);\n      // repeat the alarm\n      setTrigger(trigId, trigDesc);\n    } else if (action.equals(ACTION_SET_TRIGGER)) {\n      Log.v(TAG, \"TimeTriggerService: Setting trigger \" + trigId);\n\n      setTrigger(trigId, trigDesc);\n    } else if (action.equals(ACTION_REMOVE_TRIGGER)) {\n      Log.v(TAG, \"TimeTriggerService: Removing trigger \" + trigId);\n\n      removeTrigger(trigId, trigDesc);\n    } else if (action.equals(ACTION_RESET_TRIGGER)) {\n      Log.v(TAG, \"TimeTriggerService: Resetting trigger \" + trigId);\n\n      removeTrigger(trigId, trigDesc);\n      setTrigger(trigId, trigDesc);\n    }\n\n    releaseWakeLock();\n\n    return START_NOT_STICKY;\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2815, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()", "intent.getParcelableExtra(String)"], "configurationStart": [121, 480], "configurationEnd": [139, 537], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 687, "focalAPIEnd": 733, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getIntExtra(String,int)"], "useStart": [878], "useEnd": [958], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/core/tests/bandwidthtests/src/com/android/bandwidthtest/util/ConnectionUtil.java", "rawCode": "    /** {@inheritDoc} */\n    @Override\n    public void onReceive(Context context, Intent intent) {\n      String action = intent.getAction();\n      Log.v(\"WifiReceiver\", \"onReceive() is calleld with \" + intent);\n      if (action.equals(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION)) {\n        Log.v(LOG_TAG, \"Scan results are available\");\n        notifyScanResult();\n      } else if (action.equals(WifiManager.NETWORK_STATE_CHANGED_ACTION)) {\n        mWifiNetworkInfo = (NetworkInfo) intent.getParcelableExtra(WifiManager.EXTRA_NETWORK_INFO);\n        Log.v(LOG_TAG, \"mWifiNetworkInfo: \" + mWifiNetworkInfo.toString());\n        if (mWifiNetworkInfo.getState() == State.CONNECTED) {\n          intent.getStringExtra(WifiManager.EXTRA_BSSID);\n        }\n        notifyWifiState();\n      } else if (action.equals(WifiManager.WIFI_STATE_CHANGED_ACTION)) {\n        mWifiState =\n            intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE, WifiManager.WIFI_STATE_UNKNOWN);\n        notifyWifiState();\n      } else if (action.equals(WifiManager.WIFI_AP_STATE_CHANGED_ACTION)) {\n        notifyWifiAPState();\n      } else {\n        return;\n      }\n    }\n"}, {"dataset": "getStringExtra", "exampleID": 2816, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "intent.getBooleanExtra(EXTRA_SHOW_SPN,false,)", "guardType": "IF {", "guardExpressionStart": 251, "guardExpressionEnd": 301, "guardBlockStart": 251, "guardBlockEnd": 421, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 329, "focalAPIEnd": 361, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 369, "followUpCheckExpressionEnd": 385, "followUpCheckBlockStart": 369, "followUpCheckBlockEnd": 415, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/policy/src/com/android/internal/policy/impl/KeyguardUpdateMonitor.java", "rawCode": "  /**\n   * @param intent The intent with action {@link Telephony.Intents#SPN_STRINGS_UPDATED_ACTION}\n   * @return The string to use for the plmn, or null if it should not be shown.\n   */\n  private CharSequence getTelephonySpnFrom(Intent intent) {\n    if (intent.getBooleanExtra(EXTRA_SHOW_SPN, false)) {\n      final String spn = intent.getStringExtra(EXTRA_SPN);\n      if (spn != null) {\n        return spn;\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2817, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 512, "focalAPIEnd": 548, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "new BarcodeIntentResultClass(str,String)"], "useStart": [578, 638], "useEnd": [621, 688], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pankajc-optimus/android-lib/tree/master/BarCode/Delivery/BarcodeReaderLibrary/BarcodeReader/src/com/optimus/mobile/BarcodeReaderIntentClass.java", "rawCode": "  /**\n   * Function name : parseActivityResult Responsibility : parse the result after scanning the bar\n   * code\n   *\n   * @param requestCode\n   * @param resultCode\n   * @param intent\n   * @return : BarcodeIntentResultClass object containing content and format of the barcode\n   */\n  public static BarcodeIntentResultClass parseActivityResult(\n      int requestCode, int resultCode, Intent intent) {\n    if (requestCode == REQUEST_CODE) {\n      if (resultCode == Activity.RESULT_OK) {\n        String contents = intent.getStringExtra(\"SCAN_RESULT\");\n        String formatName = intent.getStringExtra(\"SCAN_RESULT_FORMAT\");\n        return new BarcodeIntentResultClass(contents, formatName);\n      } else {\n        return new BarcodeIntentResultClass(null, null);\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2818, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Intent.ACTION_SEARCH.equals(intent.getAction(),)", "guardType": "IF {", "guardExpressionStart": 41, "guardExpressionEnd": 93, "guardBlockStart": 41, "guardBlockEnd": 161, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 111, "focalAPIEnd": 153, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["doSearch(str)"], "useStart": [102], "useEnd": [154], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gaeeyo/garaponMate/tree/master/src/jp/syoboi/android/garaponmate/activity/MainActivity.java", "rawCode": "  void handleIntent(Intent intent) {\n    if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\n      doSearch(intent.getStringExtra(SearchManager.QUERY));\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2819, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(intent==null)", "guardType": "IF {", "guardExpressionStart": 142, "guardExpressionEnd": 159, "guardBlockStart": 142, "guardBlockEnd": 702, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 416, "focalAPIEnd": 444, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createCancelResult(AuthorizationRequest,str)", "handleResultOk(intent)"], "useStart": [374, 673], "useEnd": [445, 693], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/proxy-gen/codegen/tree/master/samples/platform/android/facebook/java/facebook-android-sdk-3.5/facebook/src/com/facebook/AuthorizationClient.java", "rawCode": "    @Override\n    boolean onActivityResult(int requestCode, int resultCode, Intent data) {\n      // Handle stuff\n      Result outcome;\n\n      if (data == null) {\n        // This happens if the user presses 'Back'.\n        outcome = Result.createCancelResult(pendingRequest, \"Operation canceled\");\n      } else if (resultCode == Activity.RESULT_CANCELED) {\n        outcome = Result.createCancelResult(pendingRequest, data.getStringExtra(\"error\"));\n      } else if (resultCode != Activity.RESULT_OK) {\n        outcome =\n            Result.createErrorResult(\n                pendingRequest, \"Unexpected resultCode from authorization.\", null);\n      } else {\n        outcome = handleResultOk(data);\n      }\n\n      if (outcome != null) {\n        completeAndValidate(outcome);\n      } else {\n        tryNextHandler();\n      }\n      return true;\n    }\n"}, {"dataset": "getStringExtra", "exampleID": 2820, "initialization": ["Intent intent = getIntent()"], "initializationStart": [170], "initializationEnd": [181], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 195, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/roccivic/SocialConnections/tree/master/code/android-app/src/com/placella/socialconnections/Activity_StudentMenu.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_menu);\n    Intent incoming = getIntent();\n    token = incoming.getStringExtra(\"token\");\n\n    final List<ListMenuItem> menu = new ArrayList<ListMenuItem>();\n    menu.add(new ListMenuItem(self, R.string.home, \"\", R.drawable.ic_home));\n    menu.add(\n        new ListMenuItem(\n            self, R.string.checkAttendance, \"checkAttendance\", R.drawable.ic_attendance));\n    menu.add(new ListMenuItem(self, R.string.makeExcuse, \"makeExcuse\", R.drawable.ic_excuse));\n    menu.add(new ListMenuItem(self, R.string.notes, \"notes\", R.drawable.ic_dropbox));\n    menu.add(new ListMenuItem(self, R.string.twitter, \"twitter\", R.drawable.ic_twitter));\n    menu.add(\n        new ListMenuItem(self, R.string.viewResults, \"viewResults\", R.drawable.ic_assessments));\n\n    MenuArrayAdapter adapter =\n        new MenuArrayAdapter(this, android.R.layout.simple_list_item_1, menu);\n    ListView list = (ListView) findViewById(R.id.menuList);\n    list.setAdapter(adapter);\n    list.setOnItemClickListener(\n        new OnItemClickListener() {\n          @Override\n          public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n            if (!menu.get(position).getLink().equals(\"\")) {\n              Activity_Web.launch(self, menu.get(position).getLink(), token);\n            } else {\n              finish();\n            }\n          }\n        });\n    setResult(1);\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2821, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "intent.getStringExtra(name,)!=null", "guardType": "IF {", "guardExpressionStart": 74, "guardExpressionEnd": 121, "guardBlockStart": 74, "guardBlockEnd": 205, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 78, "focalAPIEnd": 112, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["println(str)", "intent.getExtras()", "intent.getExtras()"], "useStart": [130, 563, 618], "useEnd": [184, 581, 636], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shangrz/noticeUEFA/tree/master/src/com/shang/noticeuefa/AlamrReceiver.java", "rawCode": "  @Override\n  public void onReceive(Context context, Intent intent) {\n    if (intent.getStringExtra(\"delnotice\") != null) {\n      System.out.println(intent.getStringExtra(\"delnotice\"));\n      return;\n    }\n    aQuery = new AQuery(context);\n    nm = (NotificationManager) context.getSystemService(\"notification\");\n    System.out.println(\"闹钟时间到\");\n    Toast.makeText(context, \"闹钟时间到\", Toast.LENGTH_LONG).show();\n\n    Notification notification;\n\n    notification = new Notification(R.drawable.icon, \"比赛即将开始\", System.currentTimeMillis());\n\n    int theid = 0;\n    if (intent.getExtras() != null) {\n      System.out.println(intent.getExtras());\n      System.out.println(\"xxx:\" + intent.getExtras().getInt(\"match_id\", 0));\n      theid = intent.getExtras().getInt(\"match_id\", 0);\n    } else {\n      System.out.println(\"no bundle\");\n    }\n    notification.contentView = adapterNoticeView(context, theid);\n\n    Bundle bundle = new Bundle();\n    // bundle.putInt(\"theid\", 100);\n    // Bundle bundle = new Bundle();\n\n    Intent notificationIntent =\n        new Intent(context, SinaTrendActivity.class)\n            .setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK)\n            .putExtras(bundle);\n    Match match;\n    try {\n      System.out.println(\"########\" + theid + \"***\");\n      match = getHelper(context).getMatchDao().queryForId(theid);\n      System.out.println(\"########\" + theid + \"***\" + match.getMatchTime().getTime());\n      bundle.putInt(\"MATCH_ID\", theid);\n\n      bundle.putLong(\"MATCH_TIME\", match.getMatchTime().getTime());\n      bundle.putString(\n          \"TITLE\", match.getTeamA().getTeamName() + \" Vs \" + match.getTeamB().getTeamName());\n      bundle.putString(\n          \"THEKEYWORD\",\n          match.getTeamA().getTeamName() + \" \" + match.getTeamB().getTeamName() + \" 足球\");\n      notificationIntent.putExtras(bundle);\n    } catch (SQLException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    PendingIntent contentIntent =\n        PendingIntent.getActivity(context, theid, notificationIntent, 0); // request match_id\n    notification.contentIntent = contentIntent;\n\n    notification.flags |= Notification.FLAG_ONGOING_EVENT;\n    // notification.defaults = Notification.DEFAULT_SOUND;\n\n    notification.sound =\n        Uri.parse(\"android.resource://\" + context.getPackageName() + \"/\" + R.raw.customsound);\n    // notification.vibrate = new long[] { 1000, 1000, 1000, 1000, 1000 };\n    nm.notify(theid, notification);\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2822, "initialization": ["Intent intent = TestBrowserControllerImpl.getIntentForTestAt(int)"], "initializationStart": [220], "initializationEnd": [264], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getComponent()"], "configurationStart": [433], "configurationEnd": [454], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 523, "focalAPIEnd": 597, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,str)"], "useStart": [476], "useEnd": [598], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_base/tree/master/tests/CoreTests/android/test/TestBrowserControllerImplTest.java", "rawCode": "  public void testGetIntentForTestCase() throws Exception {\n    TestSuite testSuite = new TestSuite();\n    testSuite.addTest(new DummyTestCase());\n\n    mTestBrowserController.setTestSuite(testSuite);\n    Intent intent = mTestBrowserController.getIntentForTestAt(1);\n    verifyIntent(intent, DummyTestCase.class, \"com.android.testharness\");\n    assertEquals(\n        TestBrowserControllerImpl.TEST_RUNNER_ACTIVITY_CLASS_NAME,\n        intent.getComponent().getClassName());\n    assertEquals(\n        \"testDummyTest\",\n        intent.getStringExtra(TestBrowserController.BUNDLE_EXTRA_TEST_METHOD_NAME));\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2823, "initialization": ["Intent intent = getIntent()"], "initializationStart": [1437], "initializationEnd": [1448], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()", "intent.getDataString()", "intent.getIntExtra(String,int)", "intent.getIntExtra(String,int)"], "configurationStart": [1856, 1902, 2308, 2374], "configurationEnd": [1874, 1924, 2349, 2416], "guardCondition": "intent!=null", "guardType": "IF {", "guardExpressionStart": 1811, "guardExpressionEnd": 1830, "guardBlockStart": 1811, "guardBlockEnd": 3695, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 2582, "focalAPIEnd": 2632, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 2642, "followUpCheckExpressionEnd": 2674, "followUpCheckBlockStart": 2642, "followUpCheckBlockEnd": 2737, "use": ["TextView.setText(str)", "intent.getStringExtra(String)"], "useStart": [2687, 3639], "useEnd": [2726, 3688], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gdgturkiye/add2013-android/tree/master/Zxing/src/com/google/zxing/client/android/CaptureActivity.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n\n    // CameraManager must be initialized here, not in onCreate(). This is necessary because we don't\n    // want to open the camera driver and measure the screen size if we're going to show the help on\n    // first launch. That led to bugs where the scanning rectangle was the wrong size and partially\n    // off screen.\n    cameraManager = new CameraManager(getApplication());\n\n    viewfinderView = (ViewfinderView) findViewById(R.id.viewfinder_view);\n    viewfinderView.setCameraManager(cameraManager);\n\n    resultView = findViewById(R.id.result_view);\n    statusView = (TextView) findViewById(R.id.status_view);\n\n    handler = null;\n    lastResult = null;\n\n    resetStatusView();\n\n    SurfaceView surfaceView = (SurfaceView) findViewById(R.id.preview_view);\n    SurfaceHolder surfaceHolder = surfaceView.getHolder();\n    if (hasSurface) {\n      // The activity was paused but not stopped, so the surface still exists. Therefore\n      // surfaceCreated() won't be called, so init the camera here.\n      initCamera(surfaceHolder);\n    } else {\n      // Install the callback and wait for surfaceCreated() to init the camera.\n      surfaceHolder.addCallback(this);\n      surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n    }\n\n    beepManager.updatePrefs();\n    ambientLightManager.start(cameraManager);\n\n    inactivityTimer.onResume();\n\n    Intent intent = getIntent();\n\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n    copyToClipboard =\n        prefs.getBoolean(PreferencesActivity.KEY_COPY_TO_CLIPBOARD, true)\n            && (intent == null || intent.getBooleanExtra(Intents.Scan.SAVE_HISTORY, true));\n\n    source = IntentSource.NONE;\n    decodeFormats = null;\n    characterSet = null;\n\n    if (intent != null) {\n\n      String action = intent.getAction();\n      String dataString = intent.getDataString();\n\n      if (Intents.Scan.ACTION.equals(action)) {\n\n        // Scan the formats the intent requested, and return the result to the calling activity.\n        source = IntentSource.NATIVE_APP_INTENT;\n        decodeFormats = DecodeFormatManager.parseDecodeFormats(intent);\n\n        if (intent.hasExtra(Intents.Scan.WIDTH) && intent.hasExtra(Intents.Scan.HEIGHT)) {\n          int width = intent.getIntExtra(Intents.Scan.WIDTH, 0);\n          int height = intent.getIntExtra(Intents.Scan.HEIGHT, 0);\n          if (width > 0 && height > 0) {\n            cameraManager.setManualFramingRect(width, height);\n          }\n        }\n\n        String customPromptMessage = intent.getStringExtra(Intents.Scan.PROMPT_MESSAGE);\n        if (customPromptMessage != null) {\n          statusView.setText(customPromptMessage);\n        }\n\n      } else if (dataString != null\n          && dataString.contains(PRODUCT_SEARCH_URL_PREFIX)\n          && dataString.contains(PRODUCT_SEARCH_URL_SUFFIX)) {\n\n        // Scan only products and send the result to mobile Product Search.\n        source = IntentSource.PRODUCT_SEARCH_LINK;\n        sourceUrl = dataString;\n        decodeFormats = DecodeFormatManager.PRODUCT_FORMATS;\n\n      } else if (isZXingURL(dataString)) {\n\n        // Scan formats requested in query string (all formats if none specified).\n        // If a return URL is specified, send the results there. Otherwise, handle it ourselves.\n        source = IntentSource.ZXING_LINK;\n        sourceUrl = dataString;\n        Uri inputUri = Uri.parse(dataString);\n        scanFromWebPageManager = new ScanFromWebPageManager(inputUri);\n        decodeFormats = DecodeFormatManager.parseDecodeFormats(inputUri);\n      }\n\n      characterSet = intent.getStringExtra(Intents.Scan.CHARACTER_SET);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2824, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 530, "focalAPIEnd": 559, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["finishBad(str)"], "useStart": [799], "useEnd": [877], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/tests/AndroidTests/src/com/android/unit_tests/activity/LaunchpadActivity.java", "rawCode": "  private final void gotReceive(String name, Intent intent) {\n    synchronized (this) {\n\n      // System.out.println(\"Got receive: \" + name);\n      // System.out.println(mNextReceiver + \" in \" + mExpectedReceivers);\n      // new RuntimeException(\"stack\").printStackTrace();\n\n      sCallingTest.addIntermediate(mNextReceiver + \"-\" + name);\n\n      if (mExpectedData != null) {\n        int n = mExpectedData.length;\n        int i;\n        boolean prev = false;\n        for (i = 0; i < n; i++) {\n          if (mExpectedData[i].equals(intent.getStringExtra(\"test\"))) {\n            if (mReceivedData[i]) {\n              prev = true;\n              continue;\n            }\n            mReceivedData[i] = true;\n            break;\n          }\n        }\n        if (i >= n) {\n          if (prev) {\n            finishBad(\"Receive got data too many times: \" + intent.getStringExtra(\"test\"));\n          } else {\n            finishBad(\"Receive got unexpected data: \" + intent.getStringExtra(\"test\"));\n          }\n          return;\n        }\n      }\n\n      if (mNextReceiver >= mExpectedReceivers.length) {\n        finishBad(\"Got too many onReceiveIntent() calls!\");\n        // System.out.println(\"Too many intents received: now at \"\n        // + mNextReceiver + \", expect list: \"\n        // + Arrays.toString(mExpectedReceivers));\n      } else if (!mExpectedReceivers[mNextReceiver].equals(name)) {\n        finishBad(\n            \"Receive out of order: got \"\n                + name\n                + \" but expected \"\n                + mExpectedReceivers[mNextReceiver]\n                + \" at \"\n                + mNextReceiver);\n      } else {\n        mNextReceiver++;\n        if (mNextReceiver == mExpectedReceivers.length) {\n          mHandler.post(mUnregister);\n        }\n      }\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2825, "initialization": ["Intent intent = getIntent()"], "initializationStart": [435], "initializationEnd": [446], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getData()"], "configurationStart": [466], "configurationEnd": [482], "guardCondition": "intent.getStringExtra(name,)!=null", "guardType": "IF {", "guardExpressionStart": 1052, "guardExpressionEnd": 1105, "guardBlockStart": 1052, "guardBlockEnd": 1493, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 1056, "focalAPIEnd": 1096, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "intent.getBooleanExtra(String,boolean)", "new ExtrasImportTask(str,String,boolean)"], "useStart": [1198, 1265, 1339], "useEnd": [1232, 1318, 1394], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nigeljonez/freedoku/tree/master/Freedoku/src/com/nigelj/freedoku/gui/SudokuImportActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    requestWindowFeature(Window.FEATURE_LEFT_ICON);\n    setContentView(R.layout.import_sudoku);\n    getWindow().setFeatureDrawableResource(Window.FEATURE_LEFT_ICON, R.drawable.opensudoku_logo_72);\n\n    ProgressBar progressBar = (ProgressBar) findViewById(R.id.progress);\n\n    AbstractImportTask importTask;\n    Intent intent = getIntent();\n    Uri dataUri = intent.getData();\n    if (dataUri != null) {\n      if (Const.MIME_TYPE_OPENSUDOKU.equals(intent.getType())\n          || dataUri.toString().endsWith(\".opensudoku\")) {\n\n        importTask = new OpenSudokuImportTask(dataUri);\n\n      } else if (dataUri.toString().endsWith(\".sdm\")) {\n\n        importTask = new SdmImportTask(dataUri);\n\n      } else {\n\n        Log.e(\n            TAG,\n            String.format(\n                \"Unknown type of data provided (mime-type=%s; uri=%s), exiting.\",\n                intent.getType(), dataUri));\n        finish();\n        return;\n      }\n    } else if (intent.getStringExtra(EXTRA_FOLDER_NAME) != null) {\n\n      String folderName = intent.getStringExtra(EXTRA_FOLDER_NAME);\n      String games = intent.getStringExtra(EXTRA_GAMES);\n      boolean appendToFolder = intent.getBooleanExtra(EXTRA_APPEND_TO_FOLDER, false);\n      importTask = new ExtrasImportTask(folderName, games, appendToFolder);\n\n    } else {\n      Log.e(TAG, \"No data provided, exiting.\");\n      finish();\n      return;\n    }\n\n    importTask.initialize(this, progressBar);\n    importTask.setOnImportFinishedListener(mOnImportFinishedListener);\n\n    importTask.execute();\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2826, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 139, "focalAPIEnd": 182, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 188, "followUpCheckExpressionEnd": 218, "followUpCheckBlockStart": 188, "followUpCheckBlockEnd": 301, "use": ["Pattern.split(str)", "intent.getStringExtra(String)"], "useStart": [255, 345], "useEnd": [293, 385], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/telgniw/BukuDroid/tree/master/Mobile/ZXing/src/com/google/zxing/client/android/DecodeFormatManager.java", "rawCode": "  static Collection<BarcodeFormat> parseDecodeFormats(Intent intent) {\n    List<String> scanFormats = null;\n    String scanFormatsString = intent.getStringExtra(Intents.Scan.FORMATS);\n    if (scanFormatsString != null) {\n      scanFormats = Arrays.asList(COMMA_PATTERN.split(scanFormatsString));\n    }\n    return parseDecodeFormats(scanFormats, intent.getStringExtra(Intents.Scan.MODE));\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2827, "initialization": ["Intent intent = parseUri(String,int)"], "initializationStart": [1534], "initializationEnd": [1557], "hasTryCatch": 1, "exceptionType": "NameNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 1504, "tryExpressionEnd": 1508, "tryBlockStart": 1504, "tryBlockEnd": 4173, "catchExpressionStart": 3057, "catchExpressionEnd": 3089, "catchBlockStart": 3057, "catchBlockEnd": 3151, "exceptionHandlingCallStart": [3111], "exceptionHandlingCallEnd": [3130], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "intent.hasExtra(name,)", "guardType": "IF {", "guardExpressionStart": 1571, "guardExpressionEnd": 1610, "guardBlockStart": 1571, "guardBlockEnd": 3764, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 1644, "focalAPIEnd": 1684, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 2311, "followUpCheckExpressionEnd": 2331, "followUpCheckBlockStart": 2311, "followUpCheckBlockEnd": 3750, "use": ["new File(str)", "decodeFile(str)", "intent.getStringExtra(String)", "intent.getStringExtra(String)", "getIdentifier(str,String,String)", "str.replaceAll(String,String)", "Resources.getIdentifier(str,String,String)", "str.replaceAll(String,String)", "intent.resolveActivityInfo(PackageManager,*)"], "useStart": [1713, 1964, 2174, 2252, 2511, 2828, 3366, 3578, 3833], "useEnd": [1730, 1997, 2218, 2295, 2579, 2871, 3422, 3621, 3895], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_packages_apps_Settings/tree/master/src/com/android/settings/cyanogenmod/LockscreenTargets.java", "rawCode": "  private void initializeView(String input) {\n    if (input == null) {\n      input = GlowPadView.EMPTY_TARGET;\n    }\n    mTargetStore.clear();\n    final int maxTargets =\n        mIsScreenLarge ? GlowPadView.MAX_TABLET_TARGETS : GlowPadView.MAX_PHONE_TARGETS;\n    final PackageManager packMan = mActivity.getPackageManager();\n    final Drawable activeBack =\n        mResources.getDrawable(com.android.internal.R.drawable.ic_lockscreen_target_activated);\n    final String[] targetStore = input.split(\"\\\\|\");\n    // Shift by 2 targets for phones in landscape\n    if (mIsLandscape && !mIsScreenLarge) {\n      mTargetStore.add(new TargetInfo(null));\n      mTargetStore.add(new TargetInfo(null));\n    }\n    // Add the unlock icon\n    Drawable unlockFront =\n        mResources.getDrawable(com.android.internal.R.drawable.ic_lockscreen_unlock_normal);\n    Drawable unlockBack =\n        mResources.getDrawable(com.android.internal.R.drawable.ic_lockscreen_unlock_activated);\n    mTargetStore.add(new TargetInfo(getLayeredDrawable(unlockBack, unlockFront, 0, true)));\n    for (int cc = 0; cc < 8 - mTargetOffset - 1; cc++) {\n      String uri = GlowPadView.EMPTY_TARGET;\n      Drawable front = null;\n      Drawable back = activeBack;\n      boolean frontBlank = false;\n      String iconType = null;\n      String iconSource = null;\n      int tmpInset = mTargetInset;\n      if (cc < targetStore.length && cc < maxTargets) {\n        uri = targetStore[cc];\n        if (!uri.equals(GlowPadView.EMPTY_TARGET)) {\n          try {\n            Intent in = Intent.parseUri(uri, 0);\n            if (in.hasExtra(GlowPadView.ICON_FILE)) {\n              String rSource = in.getStringExtra(GlowPadView.ICON_FILE);\n              File fPath = new File(rSource);\n              if (fPath != null) {\n                if (fPath.exists()) {\n                  front =\n                      new BitmapDrawable(\n                          getResources(),\n                          getRoundedCornerBitmap(BitmapFactory.decodeFile(rSource)));\n                  tmpInset = tmpInset + 5;\n                }\n              }\n            } else if (in.hasExtra(GlowPadView.ICON_RESOURCE)) {\n              String rSource = in.getStringExtra(GlowPadView.ICON_RESOURCE);\n              String rPackage = in.getStringExtra(GlowPadView.ICON_PACKAGE);\n              if (rSource != null) {\n                if (rPackage != null) {\n                  try {\n                    Context rContext = mActivity.createPackageContext(rPackage, 0);\n                    int id = rContext.getResources().getIdentifier(rSource, \"drawable\", rPackage);\n                    front = rContext.getResources().getDrawable(id);\n                    id =\n                        rContext\n                            .getResources()\n                            .getIdentifier(\n                                rSource.replaceAll(\"_normal\", \"_activated\"), \"drawable\", rPackage);\n                    back = rContext.getResources().getDrawable(id);\n                    tmpInset = 0;\n                    frontBlank = true;\n                  } catch (NameNotFoundException e) {\n                    e.printStackTrace();\n                  } catch (NotFoundException e) {\n                    e.printStackTrace();\n                  }\n                } else {\n                  front =\n                      mResources.getDrawable(\n                          mResources.getIdentifier(rSource, \"drawable\", \"android\"));\n                  back =\n                      mResources.getDrawable(\n                          mResources.getIdentifier(\n                              rSource.replaceAll(\"_normal\", \"_activated\"), \"drawable\", \"android\"));\n                  tmpInset = 0;\n                  frontBlank = true;\n                }\n              }\n            }\n            if (front == null) {\n              ActivityInfo aInfo = in.resolveActivityInfo(packMan, PackageManager.GET_ACTIVITIES);\n              if (aInfo != null) {\n                front = aInfo.loadIcon(packMan);\n              } else {\n                front = mResources.getDrawable(android.R.drawable.sym_def_app_icon).mutate();\n              }\n            }\n          } catch (Exception e) {\n          }\n        }\n      } else if (cc >= maxTargets) {\n        mTargetStore.add(new TargetInfo(null));\n        continue;\n      }\n      if (back == null || front == null) {\n        Drawable emptyIcon = mResources.getDrawable(R.drawable.ic_empty).mutate();\n        front = emptyIcon;\n      }\n      mTargetStore.add(\n          new TargetInfo(\n              uri,\n              getLayeredDrawable(back, front, tmpInset, frontBlank),\n              iconType,\n              iconSource,\n              front.getConstantState().newDrawable().mutate()));\n    }\n    ArrayList<TargetDrawable> tDraw = new ArrayList<TargetDrawable>();\n    for (TargetInfo i : mTargetStore) {\n      if (i != null) {\n        tDraw.add(new TargetDrawable(mResources, i.icon));\n      } else {\n        tDraw.add(new TargetDrawable(mResources, null));\n      }\n    }\n    mWaveView.setTargetResources(tDraw);\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2828, "initialization": ["Intent intent = getIntent()"], "initializationStart": [56], "initializationEnd": [67], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 80, "focalAPIEnd": 108, "followUpCheck": "str.length() != 0", "checkType": "IF", "followUpCheckExpressionStart": 202, "followUpCheckExpressionEnd": 225, "followUpCheckBlockStart": 202, "followUpCheckBlockEnd": 433, "use": ["WebView.loadUrl(str)"], "useStart": [400], "useEnd": [426], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/qhkyzf/FeiAndroid/tree/master/MonkeyBrowser/src/com/monkeybrowser/MonkeyBrowserActivity.java", "rawCode": "  private void processExtraData() {\n    Intent intent = getIntent();\n    mURL = intent.getStringExtra(\"url\");\n\n    mScreen2.setVisibility(View.INVISIBLE);\n    mScreen1.setVisibility(View.VISIBLE);\n\n    if (mURL.length() != 0) {\n      // mWebViewMain .setBackgroundResource(R.drawable.google);\n      // mWebViewMain.setBackgroundColor(Color.argb(0, 0, 0, 0));\n      mWebViewMain.requestFocus();\n      mWebViewMain.loadUrl(mURL);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2829, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 553, "focalAPIEnd": 589, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "intent.getByteArrayExtra(String)", "intent.getIntExtra(String,int)", "intent.getStringExtra(String)", "new IntentResult(str,String,byte[],Integer,String)"], "useStart": [619, 690, 769, 970, 1046], "useEnd": [662, 735, 833, 1029, 1129], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kwatson7/Tools3/tree/master/src/com/google/zxing/integration/android/IntentIntegrator.java", "rawCode": "  /**\n   * Call this from your {@link Activity}'s {@link Activity#onActivityResult(int, int, Intent)}\n   * method.\n   *\n   * @return null if the event handled here was not related to this class, or else an {@link\n   *     IntentResult} containing the result of the scan. If the user cancelled scanning, the fields\n   *     will be null.\n   */\n  public static IntentResult parseActivityResult(int requestCode, int resultCode, Intent intent) {\n    if (requestCode == REQUEST_CODE) {\n      if (resultCode == Activity.RESULT_OK) {\n        String contents = intent.getStringExtra(\"SCAN_RESULT\");\n        String formatName = intent.getStringExtra(\"SCAN_RESULT_FORMAT\");\n        byte[] rawBytes = intent.getByteArrayExtra(\"SCAN_RESULT_BYTES\");\n        int intentOrientation = intent.getIntExtra(\"SCAN_RESULT_ORIENTATION\", Integer.MIN_VALUE);\n        Integer orientation = intentOrientation == Integer.MIN_VALUE ? null : intentOrientation;\n        String errorCorrectionLevel = intent.getStringExtra(\"SCAN_RESULT_ERROR_CORRECTION_LEVEL\");\n        return new IntentResult(contents, formatName, rawBytes, orientation, errorCorrectionLevel);\n      }\n      return new IntentResult();\n    }\n    return null;\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2830, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 192, "focalAPIEnd": 228, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new PluginResult(*,str)"], "useStart": [251], "useEnd": [301], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pankajkainthla/phonegap-plugins-all/tree/master/Android/WikitudeCamera/WikitudeCamera.java", "rawCode": "  public void onActivityResult(int requestCode, int resultCode, Intent intent) {\n    if (requestCode == REQUEST_CODE) {\n      if (resultCode == Activity.RESULT_OK) {\n        String contents = intent.getStringExtra(\"SCAN_RESULT\");\n        this.success(new PluginResult(PluginResult.Status.OK, contents), this.callback);\n      } else {\n        this.error(new PluginResult(PluginResult.Status.ERROR), this.callback);\n      }\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2831, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 88, "focalAPIEnd": 149, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Intent.putExtra(String,str)"], "useStart": [370], "useEnd": [429], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/phonelab/phonelabservices/tree/master/PhonelabServices/src/edu/buffalo/cse/phonelab/ota/OTANotifier.java", "rawCode": "  @Override\n  public void onReceive(Context context, Intent intent1) {\n    String uri = intent1.getStringExtra(Util.DOWNLOADED_OTA_FILE_FILEPATH_URI);\n    String ns = Context.NOTIFICATION_SERVICE;\n    NotificationManager notificationManager = (NotificationManager) context.getSystemService(ns);\n\n    Intent intent = new Intent(context, PHLabOTAUpdateManager.class);\n    intent.putExtra(Util.DOWNLOADED_OTA_FILE_FILEPATH_URI, uri);\n    // intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    PendingIntent activity = PendingIntent.getActivity(context, 0, intent, 0);\n\n    // Notification notification = new Notification(R.drawable.ic_launcher,\n    // \"PhoneLab update available\", System.currentTimeMillis());\n\n    Notification notification =\n        new Notification.Builder(context)\n            .setTicker(\"PhoneLab update available\")\n            .setContentTitle(\"Click here to install.\")\n            .setContentInfo(\"New PhoneLab system update is available.\")\n            .setSmallIcon(R.drawable.phonelab_logo_black)\n            .setContentIntent(activity)\n            .getNotification();\n\n    // notification.flags |= Notification.FLAG_INSISTENT;\n    notification.flags |= Notification.FLAG_AUTO_CANCEL;\n    notification.flags |= Notification.FLAG_NO_CLEAR;\n\n    notification.defaults = Notification.DEFAULT_ALL;\n\n    // notification.setLatestEventInfo(context, \"New PhoneLab system update is available\",\n    // \"Click to Install\", activity);\n\n    notification.number += 1;\n    notificationManager.notify(1729, notification); // make a constant for the id\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2832, "initialization": ["Intent intent = getIntent()"], "initializationStart": [184], "initializationEnd": [195], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 213, "focalAPIEnd": 255, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 261, "followUpCheckExpressionEnd": 283, "followUpCheckBlockStart": 261, "followUpCheckBlockEnd": 351, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dbstar/dbstar/tree/master/DbstarLauncher/src/com/dbstar/app/settings/GDGeneralInfoActivity.java", "rawCode": "  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    setContentView(R.layout.generalinfo_view);\n\n    initializeView();\n\n    Intent intent = getIntent();\n    mMenuPath = intent.getStringExtra(INTENT_KEY_MENUPATH);\n    if (mMenuPath != null) {\n      showMenuPath(mMenuPath.split(MENU_STRING_DELIMITER));\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2833, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(true||intent==null)", "guardType": "IF {", "guardExpressionStart": 98, "guardExpressionEnd": 148, "guardBlockStart": 98, "guardBlockEnd": 170, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 190, "focalAPIEnd": 234, "followUpCheck": "str == null", "checkType": "IF", "followUpCheckExpressionStart": 240, "followUpCheckExpressionEnd": 257, "followUpCheckBlockStart": 240, "followUpCheckBlockEnd": 279, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lllllT/MultiPictureLiveWallpaper/tree/master/src/org/tamanegi/wallpaper/multipicture/picsource/FolderSource.java", "rawCode": "  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    if (resultCode == RESULT_CANCELED || data == null) {\n      return;\n    }\n\n    String path = data.getStringExtra(FolderPicker.EXTRA_PATH);\n    if (path == null) {\n      return;\n    }\n\n    path_val = path;\n    need_clear = false;\n\n    updatePathSummary();\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2834, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 143, "focalAPIEnd": 182, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 188, "followUpCheckExpressionEnd": 205, "followUpCheckBlockStart": 188, "followUpCheckBlockEnd": 883, "use": ["Intent.putExtra(String,str)"], "useStart": [320], "useEnd": [352], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kogeva/Reactr/tree/master/Reactr/src/main/java/com/google/android/c2dm/C2DMBaseReceiver.java", "rawCode": "  /** Called when a cloud message has been received. */\n  protected void onMessage(Context context, Intent receiveIntent) {\n\n    String data = receiveIntent.getStringExtra(\"message\");\n    if (data != null) {\n      Log.w(\"C2DMReceiver\", data + \" BASE\");\n\n      Intent intent = new Intent(this, MainActivity.class);\n      intent.putExtra(\"message\", data);\n\n      NotificationManager mManager =\n          (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n      Notification notification =\n          new Notification(R.drawable.ic_launcher, \"My C2DM message\", System.currentTimeMillis());\n      notification.setLatestEventInfo(\n          context,\n          \"App Name\",\n          \"C2DM notification\",\n          PendingIntent.getActivity(\n              this.getBaseContext(), 0, intent, PendingIntent.FLAG_CANCEL_CURRENT));\n      mManager.notify(0, notification);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2835, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()", "intent.getSerializableExtra(String)"], "configurationStart": [96, 826], "configurationEnd": [114, 873], "guardCondition": "!(intent.getBooleanExtra(context.getString(R.string.app_name,),false,)) &&  !(intent.hasExtra(\"connection_state\",))", "guardType": "IF {", "guardExpressionStart": 706, "guardExpressionEnd": 802, "guardBlockStart": 706, "guardBlockEnd": 5912, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 1470, "focalAPIEnd": 1500, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getIntExtra(String,int)", "intent.getIntExtra(String,int)", "intent.getIntExtra(String,int)"], "useStart": [1953, 2175, 2360], "useEnd": [1993, 2220, 2391], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mconf/sipdroid/tree/master/src/org/sipdroid/sipua/ui/Receiver.java", "rawCode": "  @Override\n  public void onReceive(Context context, Intent intent) {\n    String intentAction = intent.getAction();\n    if (!Sipdroid.on(context)) return;\n    if (!Sipdroid.release) Log.i(\"SipUA:\", intentAction);\n    if (mContext == null) mContext = context;\n    if (intentAction.equals(Intent.ACTION_BOOT_COMPLETED)) {\n      on_vpn(false);\n      engine(context).register();\n    } else if (intentAction.equals(ConnectivityManager.CONNECTIVITY_ACTION)\n        || intentAction.equals(ACTION_EXTERNAL_APPLICATIONS_AVAILABLE)\n        || intentAction.equals(ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE)\n        || intentAction.equals(Intent.ACTION_PACKAGE_REPLACED)) {\n      engine(context).register();\n    } else if (intentAction.equals(ACTION_VPN_CONNECTIVITY)\n        && intent.hasExtra(\"connection_state\")) {\n      String state = intent.getSerializableExtra(\"connection_state\").toString();\n      if (state != null && on_vpn() != state.equals(\"CONNECTED\")) {\n        on_vpn(state.equals(\"CONNECTED\"));\n        for (SipProvider sip_provider : engine(context).sip_providers)\n          if (sip_provider != null) sip_provider.haltConnections();\n        engine(context).register();\n      }\n    } else if (intentAction.equals(ACTION_DATA_STATE_CHANGED)) {\n      engine(context).registerMore();\n    } else if (intentAction.equals(ACTION_PHONE_STATE_CHANGED)\n        && !intent.getBooleanExtra(context.getString(R.string.app_name), false)) {\n      stopRingtone();\n      pstn_state = intent.getStringExtra(\"state\");\n      pstn_time = SystemClock.elapsedRealtime();\n      if (pstn_state.equals(\"IDLE\") && call_state != UserAgent.UA_STATE_IDLE)\n        broadcastCallStateChanged(null, null);\n      if ((pstn_state.equals(\"OFFHOOK\") && call_state == UserAgent.UA_STATE_INCALL)\n          || (pstn_state.equals(\"IDLE\") && call_state == UserAgent.UA_STATE_HOLD))\n        engine(context).togglehold();\n    } else if (intentAction.equals(ACTION_DOCK_EVENT)) {\n      docked = intent.getIntExtra(EXTRA_DOCK_STATE, -1);\n      if (call_state == UserAgent.UA_STATE_INCALL) engine(mContext).speaker(speakermode());\n    } else if (intentAction.equals(ACTION_SCO_AUDIO_STATE_CHANGED)) {\n      bluetooth = intent.getIntExtra(EXTRA_SCO_AUDIO_STATE, -1);\n      progress();\n      RtpStreamSender.changed = true;\n    } else if (intentAction.equals(Intent.ACTION_HEADSET_PLUG)) {\n      headset = intent.getIntExtra(\"state\", -1);\n      if (call_state == UserAgent.UA_STATE_INCALL) engine(mContext).speaker(speakermode());\n    } else if (intentAction.equals(Intent.ACTION_SCREEN_ON)) {\n      alarm(0, OwnWifi.class);\n    } else if (intentAction.equals(Intent.ACTION_USER_PRESENT)) {\n      mHandler.sendEmptyMessageDelayed(MSG_ENABLE, 3000);\n    } else if (intentAction.equals(Intent.ACTION_SCREEN_OFF)) {\n      WifiManager wm = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);\n      WifiInfo wi = wm.getConnectionInfo();\n      if (wm.getWifiState() != WifiManager.WIFI_STATE_ENABLED\n          || wi == null\n          || wi.getSupplicantState() != SupplicantState.COMPLETED\n          || wi.getIpAddress() == 0) alarm(2 * 60, OwnWifi.class);\n      else alarm(15 * 60, OwnWifi.class);\n      if (SipdroidEngine.pwl != null)\n        for (PowerManager.WakeLock pwl : SipdroidEngine.pwl)\n          if (pwl != null && pwl.isHeld()) {\n            pwl.release();\n            pwl.acquire();\n          }\n    } else if (intentAction.equals(WifiManager.WIFI_STATE_CHANGED_ACTION)) {\n      mHandler.sendEmptyMessageDelayed(MSG_SCAN, 3000);\n    } else if (intentAction.equals(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION)) {\n      if (PreferenceManager.getDefaultSharedPreferences(mContext)\n          .getBoolean(\n              org.sipdroid.sipua.ui.Settings.PREF_SELECTWIFI,\n              org.sipdroid.sipua.ui.Settings.DEFAULT_SELECTWIFI)) {\n        WifiManager wm = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);\n        WifiInfo wi = wm.getConnectionInfo();\n        String activeSSID = null;\n        boolean activeFound = false;\n        if (wi != null) activeSSID = wi.getSSID();\n        List<ScanResult> mScanResults = wm.getScanResults();\n        List<WifiConfiguration> configurations = wm.getConfiguredNetworks();\n        if (configurations != null) {\n          WifiConfiguration bestconfig = null, maxconfig = null;\n          for (final WifiConfiguration config : configurations) {\n            if (maxconfig == null || config.priority > maxconfig.priority) {\n              maxconfig = config;\n            }\n          }\n          ScanResult bestscan = null, maxscan = null;\n          if (mScanResults != null)\n            for (final ScanResult scan : mScanResults) {\n              if (activeSSID != null && activeSSID.equals(scan.SSID)) activeFound = true;\n              for (final WifiConfiguration config : configurations) {\n                if (config.SSID != null && config.SSID.equals(\"\\\"\" + scan.SSID + \"\\\"\")) {\n                  if (bestscan == null || scan.level > bestscan.level) {\n                    bestscan = scan;\n                    bestconfig = config;\n                  }\n                  if (config == maxconfig) {\n                    maxscan = scan;\n                  }\n                }\n              }\n            }\n          if (bestconfig != null\n              && bestconfig.priority != maxconfig.priority\n              && asu(bestscan) > asu(maxscan) * 1.5\n              && (activeSSID == null || activeFound)) {\n            if (!Sipdroid.release) Log.i(\"SipUA:\", \"changing to \" + bestconfig.SSID);\n            if (activeSSID == null || !activeSSID.equals(bestscan.SSID)) wm.disconnect();\n            bestconfig.priority = maxconfig.priority + 1;\n            wm.updateNetwork(bestconfig);\n            wm.enableNetwork(bestconfig.networkId, true);\n            wm.saveConfiguration();\n            if (activeSSID == null || !activeSSID.equals(bestscan.SSID)) wm.reconnect();\n          }\n        }\n      }\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2836, "initialization": ["Intent intent = getIntent()"], "initializationStart": [48], "initializationEnd": [64], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getIntExtra(String,int)"], "configurationStart": [85], "configurationEnd": [140], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 167, "focalAPIEnd": 203, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Intent.putExtra(String,str)"], "useStart": [353], "useEnd": [394], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guanlun/BallCraft/tree/master/BallCraft/src/hkust/comp3111h/ballcraft/client/MultiPlayerGameInitializer.java", "rawCode": "  private void initGame() {\n    Intent intent = this.getIntent();\n    ballSelected = intent.getIntExtra(\"ballSelected\", BallDef.WoodBall.id);\n    String mapSelected = intent.getStringExtra(\"mapSelected\");\n\n    if (BallCraft.isServer) {\n      Intent serverIntent = new Intent(this, Server.class);\n      serverIntent.putExtra(\"ball\", ballSelected);\n      serverIntent.putExtra(\"map\", mapSelected);\n      this.startService(serverIntent);\n    }\n\n    this.startService(new Intent(this, Client.class)); // start running client\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2837, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "intent!=null", "guardType": "IF {", "guardExpressionStart": 128, "guardExpressionEnd": 145, "guardBlockStart": 128, "guardBlockEnd": 224, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 170, "focalAPIEnd": 217, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["IconPicker.onActivityResult(int,int,intent)", "ShortcutPickHelper.onActivityResult(int,int,intent)"], "useStart": [622, 789], "useEnd": [681, 844], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidTh3ory/packages_apps_Settings/tree/master/src/com/android/settings/carbon/notificationshortcuts/NotificationShortcuts.java", "rawCode": "  @Override\n  public void onActivityResult(int requestCode, int resultCode, Intent data) {\n    String shortcut_name = null;\n    if (data != null) {\n      shortcut_name = data.getStringExtra(Intent.EXTRA_SHORTCUT_NAME);\n    }\n    if (shortcut_name != null && shortcut_name.equals(EMPTY_LABEL)) {\n      mDialogLabel.setText(EMPTY_LABEL);\n      mDialogLabel.setTag(EMPTY_TARGET);\n      mDialogIcon.setImageResource(R.drawable.ic_empty);\n    } else if (requestCode == IconPicker.REQUEST_PICK_SYSTEM\n        || requestCode == IconPicker.REQUEST_PICK_GALLERY\n        || requestCode == IconPicker.REQUEST_PICK_ICON_PACK) {\n      mIconPicker.onActivityResult(requestCode, resultCode, data);\n    } else if (requestCode != Activity.RESULT_CANCELED && resultCode != Activity.RESULT_CANCELED) {\n      mPicker.onActivityResult(requestCode, resultCode, data);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2838, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 86, "focalAPIEnd": 124, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 130, "followUpCheckExpressionEnd": 146, "followUpCheckBlockStart": 130, "followUpCheckBlockEnd": 265, "use": ["valueOf(*,str)"], "useStart": [162], "useEnd": [202], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Hectorxda/MySettings/tree/master/src/com/android/settings/ApnSettings.java", "rawCode": "  private static Phone.DataState getMobileDataState(Intent intent) {\n    String str = intent.getStringExtra(Phone.STATE_KEY);\n    if (str != null) {\n      return Enum.valueOf(Phone.DataState.class, str);\n    } else {\n      return Phone.DataState.DISCONNECTED;\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2839, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 139, "focalAPIEnd": 182, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 188, "followUpCheckExpressionEnd": 218, "followUpCheckBlockStart": 188, "followUpCheckBlockEnd": 301, "use": ["Pattern.split(str)", "intent.getStringExtra(String)"], "useStart": [255, 345], "useEnd": [293, 385], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gdgturkiye/add2013-android/tree/master/Zxing/src/com/google/zxing/client/android/DecodeFormatManager.java", "rawCode": "  static Collection<BarcodeFormat> parseDecodeFormats(Intent intent) {\n    List<String> scanFormats = null;\n    String scanFormatsString = intent.getStringExtra(Intents.Scan.FORMATS);\n    if (scanFormatsString != null) {\n      scanFormats = Arrays.asList(COMMA_PATTERN.split(scanFormatsString));\n    }\n    return parseDecodeFormats(scanFormats, intent.getStringExtra(Intents.Scan.MODE));\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2840, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 452, "focalAPIEnd": 569, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getLongExtra(String,int)", "intent.getLongExtra(String,int)"], "useStart": [613, 929], "useEnd": [728, 967], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openintents/openintents/tree/master/calendarpicker/CalendarPickerDemo/src/org/openintents/calendarpicker/demo/Demo.java", "rawCode": "  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\n    if (resultCode != RESULT_OK) {\n      Log.i(TAG, \"==> result \" + resultCode + \" from subactivity! Ignoring...\");\n      // Toast t = Toast.makeText(this, \"Action cancelled!\", Toast.LENGTH_SHORT);\n      // t.show();\n      return;\n    }\n\n    switch (requestCode) {\n      case REQUEST_CODE_DATE_SELECTION:\n        {\n          String iso_date =\n              data.getStringExtra(\n                  CalendarPickerConstants.CalendarDatePicker.IntentExtras.INTENT_EXTRA_DATETIME);\n          long epoch_date =\n              data.getLongExtra(\n                  CalendarPickerConstants.CalendarDatePicker.IntentExtras.INTENT_EXTRA_EPOCH, 0);\n\n          ((TextView) findViewById(R.id.date_picker_result)).setText(iso_date + \"; \" + epoch_date);\n          break;\n        }\n      case REQUEST_CODE_EVENT_SELECTION:\n        {\n          long id = data.getLongExtra(BaseColumns._ID, -1);\n          Toast.makeText(this, \"Result: \" + id, Toast.LENGTH_SHORT).show();\n          ((TextView) findViewById(R.id.event_picker_result)).setText(\"\" + id);\n          break;\n        }\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2841, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 210, "focalAPIEnd": 252, "followUpCheck": "MiscUtil.matchesIgnoreCase(b.getText(),str)", "checkType": "IF", "followUpCheckExpressionStart": 477, "followUpCheckExpressionEnd": 530, "followUpCheckBlockStart": 477, "followUpCheckBlockEnd": 566, "use": ["ZLStringOption.setValue(str)", "str.toLowerCase()"], "useStart": [258, 393], "useEnd": [305, 414], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cse218/fbreader/tree/master/src/org/geometerplus/android/fbreader/BookmarksActivity.java", "rawCode": "  @Override\n  protected void onNewIntent(Intent intent) {\n    OrientationUtil.setOrientation(this, intent);\n\n    if (!Intent.ACTION_SEARCH.equals(intent.getAction())) {\n      return;\n    }\n    String pattern = intent.getStringExtra(SearchManager.QUERY);\n    myBookmarkSearchPatternOption.setValue(pattern);\n\n    final LinkedList<Bookmark> bookmarks = new LinkedList<Bookmark>();\n    pattern = pattern.toLowerCase();\n    for (Bookmark b : myAllBooksAdapter.bookmarks()) {\n      if (MiscUtil.matchesIgnoreCase(b.getText(), pattern)) {\n        bookmarks.add(b);\n      }\n    }\n    if (!bookmarks.isEmpty()) {\n      showSearchResultsTab(bookmarks);\n    } else {\n      UIUtil.showErrorMessage(this, \"bookmarkNotFound\");\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2842, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 225, "focalAPIEnd": 268, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "onScanResult(Intent,str,*)", "onResultCode(int,int,intent)"], "useStart": [282, 179, 625], "useEnd": [318, 319, 670], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Genshin/SpreeWarehouseAndroid/tree/master/src/org/genshin/gsa/RepetitiveScanner.java", "rawCode": "  public void onActivityResult(int requestCode, int resultCode, Intent intent) {\n    if (requestCode == ResultCodes.SCAN.ordinal()) {\n      if (resultCode == RESULT_OK) {\n        onScanResult(\n            intent,\n            intent.getStringExtra(\"SCAN_RESULT_FORMAT\"),\n            intent.getStringExtra(\"SCAN_RESULT\"));\n        if (status == RepetitiveScanCodes.CONTINUE.ordinal()) {\n          continueScanning();\n        } else if (status == RepetitiveScanCodes.FINISH.ordinal()) {\n          finishScanning();\n        }\n      } else if (resultCode == RESULT_CANCELED) {\n        finishScanning();\n      }\n    } else {\n      onResultCode(requestCode, resultCode, intent);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2843, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 152, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(str)"], "useStart": [143], "useEnd": [203], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/damonkohler/sl4a/tree/master/android/ScriptingLayerForAndroid/src/com/googlecode/android_scripting/activity/ScriptingLayerService.java", "rawCode": "  private ScriptProcess launchScript(Intent intent, AndroidProxy proxy) {\n    final int port = proxy.getAddress().getPort();\n    File script = new File(intent.getStringExtra(Constants.EXTRA_SCRIPT_PATH));\n    return ScriptLauncher.launchScript(\n        script,\n        mInterpreterConfiguration,\n        proxy,\n        new Runnable() {\n          @Override\n          public void run() {\n            // TODO(damonkohler): This action actually kills the script rather than notifying the\n            // service that script exited on its own. We should distinguish between these two cases.\n            Intent intent = new Intent(ScriptingLayerService.this, ScriptingLayerService.class);\n            intent.setAction(Constants.ACTION_KILL_PROCESS);\n            intent.putExtra(Constants.EXTRA_PROXY_PORT, port);\n            startService(intent);\n          }\n        });\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2844, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 438, "focalAPIEnd": 504, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["PackageManager.getApplicationInfo(str,int)"], "useStart": [599], "useEnd": [636], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamSourcery/packages_apps_Phone/tree/master/src/com/android/phone/PhoneUtils.java", "rawCode": "  /**\n   * Get the provider's label from the intent.\n   *\n   * @param context to lookup the provider's package name.\n   * @param intent with an extra set to the provider's package name.\n   * @return The provider's application label. null if an error occurred during the lookup of the\n   *     package name or the label.\n   */\n  /* package */ static CharSequence getProviderLabel(Context context, Intent intent) {\n    String packageName = intent.getStringExtra(InCallScreen.EXTRA_GATEWAY_PROVIDER_PACKAGE);\n    PackageManager pm = context.getPackageManager();\n\n    try {\n      ApplicationInfo info = pm.getApplicationInfo(packageName, 0);\n\n      return pm.getApplicationLabel(info);\n    } catch (PackageManager.NameNotFoundException e) {\n      return null;\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2845, "initialization": ["Intent intent = getIntent()"], "initializationStart": [174], "initializationEnd": [185], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 206, "focalAPIEnd": 248, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["doSearch(str)"], "useStart": [254], "useEnd": [269], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/marcoperasso/metrobikers/tree/master/ECOmmutersMobile/src/com/ecommuters/SearchActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_search);\n\n    Intent intent = getIntent();\n    String query = intent.getStringExtra(SearchManager.QUERY);\n    doSearch(query);\n    findViewById(R.id.ButtonCancel).setOnClickListener(this);\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2846, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "data.getStringExtra(name,)!=null", "guardType": "IF {", "guardExpressionStart": 160, "guardExpressionEnd": 200, "guardBlockStart": 160, "guardBlockEnd": 928, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 164, "focalAPIEnd": 191, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DukedDroid/RetroidNetplay/tree/master/android/phoenix/src/org/retroidnetplay/browser/MainMenuActivity.java", "rawCode": "  @Override\n  protected void onActivityResult(int reqCode, int resCode, Intent data) {\n    switch (reqCode) {\n      case ACTIVITY_LOAD_ROM:\n        {\n          if (data.getStringExtra(\"PATH\") != null) {\n            updateConfigFile();\n            Intent myIntent;\n            String current_ime =\n                Settings.Secure.getString(\n                    getContentResolver(), Settings.Secure.DEFAULT_INPUT_METHOD);\n            Toast.makeText(\n                    this, \"Loading: [\" + data.getStringExtra(\"PATH\") + \"]...\", Toast.LENGTH_SHORT)\n                .show();\n            myIntent = new Intent(this, RetroActivity.class);\n            myIntent.putExtra(\"ROM\", data.getStringExtra(\"PATH\"));\n            myIntent.putExtra(\"LIBRETRO\", libretro_path);\n            myIntent.putExtra(\"CONFIGFILE\", getDefaultConfigPath());\n            myIntent.putExtra(\"IME\", current_ime);\n            startActivity(myIntent);\n          }\n        }\n        break;\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2847, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 87, "focalAPIEnd": 128, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "dump(str,*)"], "useStart": [157, 746], "useEnd": [198, 761], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Contacts/tree/master/tests/src/com/android/contacts/tests/PhoneNumberTestService.java", "rawCode": "  @Override\n  protected void onHandleIntent(Intent intent) {\n    final String number = intent.getStringExtra(EXTRA_PHONE_NUMBER);\n    final String country = intent.getStringExtra(EXTRA_COUNTRY_CODE);\n    final String defaultCountry = getCurrentCountryCode();\n\n    Log.i(TAG, \"Input phone number: \" + number);\n    Log.i(TAG, \"Input country code: \" + country);\n    Log.i(TAG, \"Current country code: \" + defaultCountry);\n\n    // Dump for the given country, the current country, US, GB and JP.\n    Set<String> countries = new LinkedHashSet<String>();\n    if (country != null) countries.add(country);\n    countries.add(defaultCountry);\n    countries.add(\"US\");\n    countries.add(\"GB\");\n    countries.add(\"JP\");\n\n    for (String c : countries) {\n      dump(number, c);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2848, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 145, "focalAPIEnd": 176, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["makeText(Context,str,*)"], "useStart": [198], "useEnd": [256], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ppowers10/MDV-Projects/tree/master/Java1/1303/Week3/src/com/example/congressLeaders/MainActivity.java", "rawCode": "  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    if (resultCode == RESULT_OK) {\n      String passedString = data.getStringExtra(\"response\");\n      Toast toast = Toast.makeText(_context, passedString, Toast.LENGTH_SHORT);\n      toast.show();\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2849, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "intent.hasExtra(name,)", "guardType": "IF {", "guardExpressionStart": 722, "guardExpressionEnd": 762, "guardBlockStart": 722, "guardBlockEnd": 882, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 787, "focalAPIEnd": 828, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidTh3ory/packages_apps_Settings/tree/master/src/com/android/settings/ActivityPicker.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    final Intent intent = getIntent();\n\n    // Read base intent from extras, otherwise assume default\n    Parcelable parcel = intent.getParcelableExtra(Intent.EXTRA_INTENT);\n    if (parcel instanceof Intent) {\n      mBaseIntent = (Intent) parcel;\n    } else {\n      mBaseIntent = new Intent(Intent.ACTION_MAIN, null);\n      mBaseIntent.addCategory(Intent.CATEGORY_DEFAULT);\n    }\n\n    // Create dialog parameters\n    AlertController.AlertParams params = mAlertParams;\n    params.mOnClickListener = this;\n    params.mOnCancelListener = this;\n\n    // Use custom title if provided, otherwise default window title\n    if (intent.hasExtra(Intent.EXTRA_TITLE)) {\n      params.mTitle = intent.getStringExtra(Intent.EXTRA_TITLE);\n    } else {\n      params.mTitle = getTitle();\n    }\n\n    // Build list adapter of pickable items\n    List<PickAdapter.Item> items = getItems();\n    mAdapter = new PickAdapter(this, items);\n    params.mAdapter = mAdapter;\n\n    setupAlert();\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2850, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 66, "focalAPIEnd": 97, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rtyley/agit/tree/master/agit/src/main/java/com/madgag/agit/GitIntents.java", "rawCode": "  public static String branchNameFrom(Intent intent) {\n    return intent.getStringExtra(\"branch\");\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2851, "initialization": ["Intent intent = getIntent()"], "initializationStart": [338], "initializationEnd": [349], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "intent.hasExtra(name,)&&intent.hasExtra(\"source\",)", "guardType": "IF {", "guardExpressionStart": 355, "guardExpressionEnd": 416, "guardBlockStart": 355, "guardBlockEnd": 727, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 442, "focalAPIEnd": 475, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getSerializableExtra(String)", "new EventSearchData(str,SourceType)"], "useStart": [516, 683], "useEnd": [553, 719], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/seniorprojectandroid/seniorproject/tree/master/seniorproject/src/edu/fiu/cs/seniorproject/EventDetailsActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    overridePendingTransition(R.anim.pull_in_from_bottom, R.anim.hold);\n    setContentView(R.layout.activity_event_details);\n    getActionBar().setDisplayHomeAsUpEnabled(true);\n\n    AppLocationManager.init(this);\n\n    Intent intent = getIntent();\n    if (intent.hasExtra(\"event_id\") && intent.hasExtra(\"source\")) {\n      String eventId = intent.getStringExtra(\"event_id\");\n      SourceType source = (SourceType) intent.getSerializableExtra(\"source\");\n      this.mLoader = new EventDownloader(this);\n      this.mLoader.executeOnExecutor(\n          AsyncTask.THREAD_POOL_EXECUTOR, new EventSearchData(eventId, source));\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2852, "initialization": ["Intent intent = getIntent()"], "initializationStart": [154], "initializationEnd": [165], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "intent.hasExtra(name,)", "guardType": "IF {", "guardExpressionStart": 171, "guardExpressionEnd": 229, "guardBlockStart": 171, "guardBlockEnd": 316, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 250, "focalAPIEnd": 309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ApplyCloseScreenAnimation(*,str)"], "useStart": [678], "useEnd": [734], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ajhalbleib/aicg/tree/master/appinventor/components/src/com/google/appinventor/components/runtime/ListPickerActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    String items[] = null;\n    Intent myIntent = getIntent();\n    if (myIntent.hasExtra(ListPicker.LIST_ACTIVITY_ANIM_TYPE)) {\n      closeAnim = myIntent.getStringExtra(ListPicker.LIST_ACTIVITY_ANIM_TYPE);\n    }\n    if (myIntent.hasExtra(ListPicker.LIST_ACTIVITY_ARG_NAME)) {\n      items = getIntent().getStringArrayExtra(ListPicker.LIST_ACTIVITY_ARG_NAME);\n      setListAdapter(new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, items));\n      getListView().setTextFilterEnabled(true);\n    } else {\n      setResult(RESULT_CANCELED);\n      finish();\n      AnimationUtil.ApplyCloseScreenAnimation(this, closeAnim);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2853, "initialization": ["Intent intent = getIntent()"], "initializationStart": [276], "initializationEnd": [287], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 311, "focalAPIEnd": 340, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/erichkleung/trydish/tree/master/src/com/trydish/review/MapActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.map_activity);\n\n    latitude = com.trydish.find.ViewDish.getLat();\n    longitude = com.trydish.find.ViewDish.getLong();\n\n    Intent intent = getIntent();\n    restaurant_name = intent.getStringExtra(\"name\");\n\n    // following code based off of\n    // http://wptrafficanalyzer.in/blog/showing-current-location-in-google-maps-using-api-v2-with-supportmapfragment/\n    // and\n    // http://stackoverflow.com/questions/14074129/google-maps-v2-set-both-my-location-and-zoom-in\n    // Getting Google Play availability status\n    int status = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getBaseContext());\n\n    // Showing status\n    if (status != ConnectionResult.SUCCESS) { // Google Play Services are not available\n\n      int requestCode = 10;\n      Dialog dialog = GooglePlayServicesUtil.getErrorDialog(status, this, requestCode);\n      dialog.show();\n\n    } else { // Google Play Services are available\n\n      // Getting reference to the SupportMapFragment of activity_main.xml\n      MapFragment fm = (MapFragment) getFragmentManager().findFragmentById(R.id.map);\n\n      // Getting GoogleMap object from the fragment\n      googleMap = fm.getMap();\n\n      CameraUpdate center = CameraUpdateFactory.newLatLng(new LatLng(latitude, longitude));\n      CameraUpdate zoom = CameraUpdateFactory.zoomTo(18);\n\n      googleMap.moveCamera(center);\n      googleMap.animateCamera(zoom);\n      // googleMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();\n\n      googleMap.addMarker(\n          new MarkerOptions().position(new LatLng(latitude, longitude)).title(restaurant_name));\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2854, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Intent.ACTION_SEARCH.equals(intent.getAction(),)", "guardType": "IF {", "guardExpressionStart": 51, "guardExpressionEnd": 109, "guardBlockStart": 51, "guardBlockEnd": 994, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 138, "focalAPIEnd": 186, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["str.toLowerCase()", "searchHandler(str)", "initiateSearch(str,*)"], "useStart": [480, 961, 934], "useEnd": [504, 986, 987], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIT-Mobile/MIT-Mobile-for-Android/tree/master/src/edu/mit/mitmobile2/SearchActivity.java", "rawCode": "  private void doSearch(Intent searchIntent) {\n    if (Intent.ACTION_SEARCH.equals(searchIntent.getAction())) {\n      String searchTerm = searchIntent.getStringExtra(SearchManager.QUERY);\n\n      // save the search to the suggestions list\n      Log.d(this.getClass().toString(), getSuggestionsAuthority());\n      MITSearchRecentSuggestions suggestions =\n          new MITSearchRecentSuggestions(this, getSuggestionsAuthority(), SUGGESTIONS_MODE);\n      suggestions.saveRecentQuery(searchTerm.toLowerCase(), null);\n\n      // hide the list view and header view\n      mSearchListView.setVisibility(View.GONE);\n      mSearchResultsHeader.setVisibility(View.GONE);\n\n      // show the search indicator\n      // do the search\n      mLoadingView.setVisibility(View.VISIBLE);\n      mLoadingView.showLoading();\n\n      mResultsDisplayed = false;\n      mSearching = true;\n      mResetSearchScheduled = false;\n      mSearchTerm = searchTerm;\n      initiateSearch(searchTerm, searchHandler(searchTerm));\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2855, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getIntExtra(String,int)"], "configurationStart": [90], "configurationEnd": [133], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 158, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["equals(str)"], "useStart": [269], "useEnd": [309], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/imkevinxu/totoro/tree/master/facebook-android-sdk-master/facebook/src/com/facebook/NativeProtocol.java", "rawCode": "  static boolean isServiceDisabledResult20121101(Intent data) {\n    int protocolVersion = data.getIntExtra(EXTRA_PROTOCOL_VERSION, 0);\n    String errorType = data.getStringExtra(STATUS_ERROR_TYPE);\n\n    return ((PROTOCOL_VERSION_20121101 == protocolVersion)\n        && ERROR_SERVICE_DISABLED.equals(errorType));\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2856, "initialization": ["Intent intent = getIntent()"], "initializationStart": [68], "initializationEnd": [79], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 106, "focalAPIEnd": 141, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "new IndicativoAdapter(String,str,Context)"], "useStart": [163, 229], "useEnd": [194, 279], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/educacaoEmFoco/educacaoemfoco/tree/master/EEF/src/com/mdsgpp/eef/visao/TelaResultadoConsultaPorIndicativo.java", "rawCode": "  private void carregaIndicativosDosEstados() {\n    Intent intent = getIntent();\n\n    String indicativo = intent.getStringExtra(\"INDICATIVO\");\n    String titulo = intent.getStringExtra(\"TITULO\");\n\n    IndicativoAdapter adapter = new IndicativoAdapter(titulo, indicativo, context);\n\n    listaDeEstados.setAdapter(adapter);\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2857, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()"], "configurationStart": [137], "configurationEnd": [155], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 312, "focalAPIEnd": 344, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/liwenhaosuper/SysOfIMPS/tree/master/IMPS/src/com/imps/activities/Login.java", "rawCode": "    @Override\n    public void onReceive(Context context, Intent intent) {\n      // TODO Auto-generated method stub\n      String action = intent.getAction();\n      System.out.println(\"!!!login: get broadcast!!! action is \" + action);\n      pd.dismiss();\n      if (\"error_msg\".equals(action)) {\n        errorMsg = intent.getStringExtra(\"message\");\n        showDialog(ERROR);\n        stopConfig();\n        try {\n          initialConfig();\n        } catch (Exception e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n      } else if (\"login_success\".equals(action)) {\n        Toast.makeText(\n                Login.this, getResources().getString(R.string.login_success), Toast.LENGTH_SHORT)\n            .show();\n        System.out.println(\"!!!login_success has been received!!!\");\n        UserManager.getInstance().SendFriListReq();\n        ComponentName cn = new ComponentName(Login.this, My_Map.class);\n        Intent ti = new Intent();\n        ti.setComponent(cn);\n        Bundle bundle = new Bundle();\n        bundle.putString(\"mUsername\", account.getText().toString());\n        ti.putExtra(\"username\", bundle);\n        startActivity(ti);\n\n      } else if (\"exit\".equals(action)) {\n        Client.session.close();\n        stopService(new Intent(Login.this, IMService.class));\n        finish();\n      }\n    }\n"}, {"dataset": "getStringExtra", "exampleID": 2858, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 163, "focalAPIEnd": 194, "followUpCheck": "str == null", "checkType": "IF", "followUpCheckExpressionStart": 200, "followUpCheckExpressionEnd": 221, "followUpCheckBlockStart": 200, "followUpCheckBlockEnd": 376, "use": ["intent.getStringExtra(String)", "intent.getStringExtra(String)", "intent.getIntExtra(String,int)", "WebView.loadUrl(str)"], "useStart": [248, 396, 455, 545], "useEnd": [283, 430, 495, 571], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/tests/DumpRenderTree/src/com/android/dumprendertree/TestShellActivity.java", "rawCode": "  private void executeIntent(Intent intent) {\n    resetTestStatus();\n    if (!Intent.ACTION_VIEW.equals(intent.getAction())) {\n      return;\n    }\n\n    mTestUrl = intent.getStringExtra(TEST_URL);\n    if (mTestUrl == null) {\n      mUiAutoTestPath = intent.getStringExtra(UI_AUTO_TEST);\n      if (mUiAutoTestPath != null) {\n        beginUiAutoTest();\n      }\n      return;\n    }\n\n    mResultFile = intent.getStringExtra(RESULT_FILE);\n    mTimeoutInMillis = intent.getIntExtra(TIMEOUT_IN_MILLIS, 0);\n\n    Log.v(LOGTAG, \" Loading \" + mTestUrl);\n    mWebView.loadUrl(mTestUrl);\n\n    if (mTimeoutInMillis > 0) {\n      // Create a timeout timer\n      Message m = mHandler.obtainMessage(MSG_TIMEOUT);\n      mHandler.sendMessageDelayed(m, mTimeoutInMillis);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2859, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 109, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/tests/DumpRenderTree2/src/com/android/dumprendertree2/ManagerService.java", "rawCode": "  @Override\n  public int onStartCommand(Intent intent, int flags, int startId) {\n    mAllTestsRelativePath = intent.getStringExtra(\"path\");\n    assert mAllTestsRelativePath != null;\n    return START_STICKY;\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2860, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(intent.getBooleanExtra(EXTRA_ERROR,false,)) && !(true||intent==null) && !(!(onCreateServiceIntent().getAction().equals(intent.getAction(),)))", "guardType": "IF {", "guardExpressionStart": 80, "guardExpressionEnd": 118, "guardBlockStart": 80, "guardBlockEnd": 144, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 559, "focalAPIEnd": 599, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 646, "followUpCheckExpressionEnd": 669, "followUpCheckBlockStart": 646, "followUpCheckBlockEnd": 764, "use": ["fromJson(str,*)", "handleReceive(Context,intent,List<T>)", "intent.getBooleanExtra(String,boolean)", "intent.getIntExtra(String,int)"], "useStart": [697, 789, 1123, 1190], "useEnd": [753, 833, 1168, 1229], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eddieringle/hubroid/tree/master/src/net/idlesoft/android/apps/github/ui/fragments/PagedListFragment.java", "rawCode": "    @Override\n    public void onReceive(Context context, Intent intent) {\n      if (context == null || intent == null) {\n        return;\n      }\n\n      /*\n       * Return if we didn't receive the broadcast we asked for.\n       */\n      if (!onCreateServiceIntent().getAction().equals(intent.getAction())) {\n        return;\n      }\n\n      if (intent.getBooleanExtra(EXTRA_ERROR, false)) {\n        getBaseActivity().popShortToast(\"An error occurred.\");\n      } else {\n        final ArrayList<T> listItems = new ArrayList<T>();\n        final String resultJson = intent.getStringExtra(EXTRA_RESULT_JSON);\n        List<T> fetchedItems = null;\n        if (resultJson != null) {\n          fetchedItems = GsonUtils.fromJson(resultJson, mListTypeToken.getType());\n        }\n\n        fetchedItems = handleReceive(context, intent, fetchedItems);\n\n        if (fetchedItems != null) {\n          listItems.addAll(fetchedItems);\n        }\n\n        if (!mLoadingMore) {\n          getWrappedListAdapter().fillWithItems(listItems);\n        } else {\n          getWrappedListAdapter().appendWithItems(listItems);\n        }\n\n        mHasNext = intent.getBooleanExtra(EXTRA_HAS_NEXT, false);\n        mNextPage = intent.getIntExtra(EXTRA_NEXT_PAGE, -1);\n\n        setLoadingIndicatorVisible(mHasNext);\n        getListView().setOnScrollListener((mHasNext) ? PagedListFragment.this : null);\n\n        getWrappedListAdapter().notifyDataSetChanged();\n      }\n\n      setListShown(true);\n\n      mLoadingMore = false;\n    }\n"}, {"dataset": "getStringExtra", "exampleID": 2861, "initialization": ["Intent intent = getIntent()"], "initializationStart": [240], "initializationEnd": [251], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 274, "focalAPIEnd": 307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(str)"], "useStart": [257], "useEnd": [308], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chr15m/PdDroidParty/tree/master/src/cx/mccormick/pddroidparty/SaveDialog.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.save_dialog);\n\n    final EditText filename = (EditText) findViewById(R.id.filename);\n    Intent intent = getIntent();\n    filename.setText(intent.getStringExtra(\"filename\"));\n\n    Button ok = (Button) findViewById(R.id.ok);\n    ok.setOnClickListener(\n        new OnClickListener() {\n          @Override\n          public void onClick(View v) {\n            String newname = filename.getText().toString();\n            Intent result = new Intent();\n            if (newname.equals(\"\")) {\n              setResult(RESULT_CANCELED, result);\n            } else {\n              // TODO: check if the file exists and prompt to confirm overwrite first\n              result.putExtra(\"filename\", newname);\n              setResult(RESULT_OK, result);\n            }\n            finish();\n          }\n        });\n\n    Button cancel = (Button) findViewById(R.id.cancel);\n    cancel.setOnClickListener(\n        new OnClickListener() {\n          @Override\n          public void onClick(View v) {\n            Intent result = new Intent();\n            setResult(RESULT_CANCELED, result);\n            finish();\n          }\n        });\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2862, "initialization": ["Intent intent = getIntent()"], "initializationStart": [304], "initializationEnd": [315], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 337, "focalAPIEnd": 389, "followUpCheck": "str == null", "checkType": "IF", "followUpCheckExpressionStart": 634, "followUpCheckExpressionEnd": 659, "followUpCheckBlockStart": 634, "followUpCheckBlockEnd": 706, "use": ["intent.getStringExtra(String)"], "useStart": [406], "useEnd": [453], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/softanalle/Scma/tree/master/src/com/softanalle/scma/ImageActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    setTheme(android.R.style.Theme_Black_NoTitleBar_Fullscreen);\n    super.onCreate(savedInstanceState);\n\n    // setTheme(android.R.style.Theme_Black_NoTitleBar_Fullscreen);\n    setContentView(R.layout.activity_image);\n\n    Intent intent = getIntent();\n\n    mImagePrefix = intent.getStringExtra(MainActivity.ARG_IMAGE_PREFIX);\n    mWorkdir = intent.getStringExtra(MainActivity.ARG_WORKDIR);\n\n    // String image_prefix = savedInstanceState.getString(MainActivity.ARG_IMAGE_PREFIX);\n    // String workingDir = savedInstanceState.getString(MainActivity.ARG_WORKDIR);\n\n    if (mImagePrefix == null) {\n      mImagePrefix = \"[name missing]\";\n    }\n    if (mWorkdir == null) {\n      mWorkdir = \"[path missing]\";\n    }\n    nameLabel_ = (TextView) findViewById(R.id.textImageTitle);\n    // pictureButton_ = (Button) findViewById(R.id.pictureButton);\n    nameLabel_.setText(mWorkdir + \"/\" + mImagePrefix);\n\n    closeButton_ = (Button) findViewById(R.id.buttonClose);\n    closeButton_.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            Intent intent = getIntent();\n            setResult(MainActivity.RESULT_IMAGE_ACTIVITY, intent);\n            // close this Activity...\n            finish();\n          }\n        });\n\n    approveButton_ = (Button) findViewById(R.id.buttonAcceptImage);\n    imageView_ = (ImageView) findViewById(R.id.imageView1);\n    resetButton_ = (Button) findViewById(R.id.buttonResetCtrl);\n    areaSelector_ = (AreaSelector) findViewById(R.id.areaSelector1);\n\n    // controller Z-order\n    areaSelector_.bringToFront();\n    approveButton_.bringToFront();\n    closeButton_.bringToFront();\n    resetButton_.bringToFront();\n\n    areaSelector_.setFocusable(true);\n\n    approveButton_.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            nameLabel_.setText(\n                \"(\"\n                    + mSampleSize * areaSelector_.getCenterX()\n                    + \", \"\n                    + mSampleSize * areaSelector_.getCenterY()\n                    + \") [\"\n                    + mSampleSize * areaSelector_.getWidth()\n                    + \" x \"\n                    + mSampleSize * areaSelector_.getHeight()\n                    + \"]\");\n          }\n        });\n\n    resetButton_.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            areaSelector_.reset();\n          }\n        });\n    // loading of large image might take some time... so start it in new thread\n    Thread t =\n        new Thread(\n            new Runnable() {\n              final String wd = mWorkdir;\n              final String pr = mImagePrefix;\n\n              @Override\n              public void run() {\n                showImage(wd, pr);\n              }\n            });\n    t.run();\n\n    MainActivity.logger.debug(\"ImageActivity.onCreate(): Started image loader thread\");\n\n    // Toast.makeText(getApplicationContext(), \"Implement here image loading\",\n    // Toast.LENGTH_LONG).show();\n    // Toast.makeText(getApplicationContext(), \"Implement here image manipulation\",\n    // Toast.LENGTH_LONG).show();\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2863, "initialization": ["Intent intent = getIntent()"], "initializationStart": [158], "initializationEnd": [169], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 186, "focalAPIEnd": 223, "followUpCheck": "str.equals(\"preferences\")", "checkType": "IF", "followUpCheckExpressionStart": 1122, "followUpCheckExpressionEnd": 1157, "followUpCheckBlockStart": 1122, "followUpCheckBlockEnd": 1600, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bartoszprzybylski/owncloud-android/tree/master/src/com/owncloud/android/ui/activity/PinCodeActivity.java", "rawCode": "  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.pincodelock);\n\n    Intent intent = getIntent();\n    activity = intent.getStringExtra(EXTRA_ACTIVITY);\n\n    bCancel = (Button) findViewById(R.id.cancel);\n    mPinHdr = (TextView) findViewById(R.id.pinHdr);\n    mText1 = (EditText) findViewById(R.id.txt1);\n    mText1.requestFocus();\n    getWindow().setSoftInputMode(android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);\n    mText2 = (EditText) findViewById(R.id.txt2);\n    mText3 = (EditText) findViewById(R.id.txt3);\n    mText4 = (EditText) findViewById(R.id.txt4);\n\n    SharedPreferences appPrefs =\n        PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\n\n    // Not PIN Code defined yet.\n    // In a previous version settings is allow from start\n    if ((appPrefs.getString(\"PrefPinCode1\", null) == null)) {\n      setChangePincodeView(true);\n      pinCodeChecked = true;\n      newPasswordEntered = true;\n\n    } else {\n\n      if (appPrefs.getBoolean(\"set_pincode\", false)) {\n        // pincode activated\n        if (activity.equals(\"preferences\")) {\n          // PIN has been activated yet\n          mPinHdr.setText(R.string.pincode_configure_your_pin);\n          pinCodeChecked = true; // No need to check it\n          setChangePincodeView(true);\n        } else {\n          // PIN active\n          bCancel.setVisibility(View.INVISIBLE);\n          bCancel.setVisibility(View.GONE);\n          mPinHdr.setText(R.string.pincode_enter_pin_code);\n          setChangePincodeView(false);\n        }\n\n      } else {\n        // pincode removal\n        mPinHdr.setText(R.string.pincode_remove_your_pincode);\n        pinCodeChecked = false;\n        setChangePincodeView(true);\n      }\n    }\n    setTextListeners();\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2864, "initialization": ["Intent intent = getContext()"], "initializationStart": [556], "initializationEnd": [568], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 691, "focalAPIEnd": 720, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(*,str)"], "useStart": [652], "useEnd": [721], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/tests/coretests/src/android/app/activity/BroadcastTest.java", "rawCode": "  public void testReplaceSticky() throws Exception {\n    Intent intent = new Intent(LaunchpadActivity.BROADCAST_STICKY1, null);\n    intent.putExtra(\"test\", LaunchpadActivity.DATA_1);\n    ActivityManagerNative.broadcastStickyIntent(intent, null, UserHandle.myUserId());\n    intent.putExtra(\"test\", LaunchpadActivity.DATA_2);\n\n    ActivityManagerNative.broadcastStickyIntent(intent, null, UserHandle.myUserId());\n    addIntermediate(\"finished-broadcast\");\n\n    IntentFilter filter = new IntentFilter(LaunchpadActivity.BROADCAST_STICKY1);\n    Intent sticky = getContext().registerReceiver(null, filter);\n    assertNotNull(\"Sticky not found\", sticky);\n    assertEquals(LaunchpadActivity.DATA_2, sticky.getStringExtra(\"test\"));\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2865, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 172, "focalAPIEnd": 199, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseInt(str)", "intent.getStringExtra(String)", "intent.getStringExtra(String)", "intent.getStringExtra(String)", "intent.getStringExtra(String)", "intent.getStringExtra(String)", "parseInt(str)", "intent.getStringExtra(String)", "intent.getStringExtra(String)", "intent.getStringExtra(String)", "intent.getStringExtra(String)"], "useStart": [155, 236, 299, 357, 413, 959, 942, 1023, 1086, 1144, 1200], "useEnd": [200, 264, 325, 381, 437, 986, 987, 1051, 1112, 1168, 1224], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/china-ece/Gaia/tree/master/src/com/chinaece/gaia/gui/newLogItemActivity.java", "rawCode": "  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    switch (requestCode) {\n      case STEP1:\n        mYear = Integer.parseInt(data.getStringExtra(\"year\"));\n        mMonth = Integer.parseInt(data.getStringExtra(\"month\"));\n        mDay = Integer.parseInt(data.getStringExtra(\"day\"));\n        h = Integer.parseInt(data.getStringExtra(\"h\"));\n        m = Integer.parseInt(data.getStringExtra(\"m\"));\n        // 设置文本的内容：\n        editText3.setText(\n            new StringBuilder()\n                .append(mYear)\n                .append(\"-\")\n                .append(mMonth + 1)\n                .append(\"-\") // 得到的月份+1，因为从0开始\n                .append(mDay)\n                .append(\" \")\n                .append(h)\n                .append(\":\")\n                .append(m)\n                .append(\":\")\n                .append(\"00\")\n                .append(\"\"));\n        break;\n      case STEP2:\n        mYear = Integer.parseInt(data.getStringExtra(\"year\"));\n        mMonth = Integer.parseInt(data.getStringExtra(\"month\"));\n        mDay = Integer.parseInt(data.getStringExtra(\"day\"));\n        h = Integer.parseInt(data.getStringExtra(\"h\"));\n        m = Integer.parseInt(data.getStringExtra(\"m\"));\n        // 设置文本的内容：\n        endeditText.setText(\n            new StringBuilder()\n                .append(mYear)\n                .append(\"-\")\n                .append(mMonth + 1)\n                .append(\"-\") // 得到的月份+1，因为从0开始\n                .append(mDay)\n                .append(\" \")\n                .append(h)\n                .append(\":\")\n                .append(m)\n                .append(\":\")\n                .append(\"00\")\n                .append(\"\"));\n        break;\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2866, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 193, "focalAPIEnd": 229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["loadUrl(str)"], "useStart": [171], "useEnd": [230], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/michaelcadilhac/pdfannot/tree/master/platform/android/src/com/artifex/mupdfdemo/PrintDialogActivity.java", "rawCode": "  @Override\n  public void onActivityResult(int requestCode, int resultCode, Intent intent) {\n    if (requestCode == ZXING_SCAN_REQUEST && resultCode == RESULT_OK) {\n      dialogWebView.loadUrl(intent.getStringExtra(\"SCAN_RESULT\"));\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2867, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()"], "configurationStart": [108], "configurationEnd": [126], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 215, "focalAPIEnd": 249, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getTimeZone(str)"], "useStart": [296], "useEnd": [320], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/packages/SystemUI/src/com/android/systemui/statusbar/policy/ClockStock.java", "rawCode": "        @Override\n        public void onReceive(Context context, Intent intent) {\n          String action = intent.getAction();\n          if (action.equals(Intent.ACTION_TIMEZONE_CHANGED)) {\n            String tz = intent.getStringExtra(\"time-zone\");\n            mCalendar = Calendar.getInstance(TimeZone.getTimeZone(tz));\n            if (mClockFormat != null) {\n              mClockFormat.setTimeZone(mCalendar.getTimeZone());\n            }\n          } else if (action.equals(Intent.ACTION_CONFIGURATION_CHANGED)) {\n            final Locale newLocale = getResources().getConfiguration().locale;\n            if (!newLocale.equals(mLocale)) {\n              mLocale = newLocale;\n              mClockFormatString = \"\"; // force refresh\n            }\n          }\n          updateClock();\n        }\n"}, {"dataset": "getStringExtra", "exampleID": 2868, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 173, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "callTablonActivity(str)"], "useStart": [235, 485], "useEnd": [278, 513], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rcg0/arc/tree/master/android application/arc/src/com/example/asdf/RegistroActivity.java", "rawCode": "  public void onActivityResult(int requestCode, int resultCode, Intent intent) {\n\n    if (requestCode == 0) {\n      if (resultCode == RESULT_OK) {\n        String contents = intent.getStringExtra(\"SCAN_RESULT\");\n        String format = intent.getStringExtra(\"SCAN_RESULT_FORMAT\");\n        Context context = getApplicationContext();\n\n        /*int duration = Toast.LENGTH_SHORT;\n        Toast toast = Toast.makeText(context, contents, duration);\n        toast.show();\n        */\n        callTablonActivity(contents);\n\n      } else if (resultCode == RESULT_CANCELED) {\n        // Handle cancel\n      }\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2869, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getIntExtra(String,int)"], "configurationStart": [533], "configurationEnd": [570], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 620, "focalAPIEnd": 657, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Intent.putExtra(String,str)", "intent.getStringExtra(String)"], "useStart": [577, 706], "useEnd": [658, 742], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hugojosefson/robotium-samples-srplayer-app/tree/master/SRPlayer/src/sr/player/SRPlayerAlarm.java", "rawCode": "  @Override\n  public void onReceive(Context con, Intent in) {\n    Log.d(SRPlayer.TAG, \"Alarm received\");\n\n    // Aquire the wakelock\n    AlarmAlertWakeLock.acquireCpuWakeLock(con);\n\n    Intent ServiceIntent = new Intent(con, PlayerService.class);\n    ServiceIntent.addFlags(PlayerService.ALARM_START);\n\n    // Log.d(SRPlayer.TAG,\"Alarm receivde. \" + in.getIntExtra(\"AlarmStationID\",132) + \" \" +\n    // in.getStringExtra(\"AlarmStationName\") + \" \" + in.getStringExtra(\"AlarmStationURL\"));\n\n    ServiceIntent.putExtra(\"AlarmStationID\", in.getIntExtra(\"AlarmStationID\", 132));\n    ServiceIntent.putExtra(\"AlarmStationName\", in.getStringExtra(\"AlarmStationName\"));\n    ServiceIntent.putExtra(\"AlarmStationURL\", in.getStringExtra(\"AlarmStationURL\"));\n    con.startService(ServiceIntent);\n\n    HandleAlarmStateChange(con);\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2870, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "intent.getBooleanExtra(FileUploader.EXTRA_UPLOAD_RESULT,false,)", "guardType": "IF {", "guardExpressionStart": 149, "guardExpressionEnd": 217, "guardBlockStart": 149, "guardBlockEnd": 511, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 290, "focalAPIEnd": 345, "followUpCheck": "!db.removeIUPendingFile(str)", "checkType": "IF", "followUpCheckExpressionStart": 353, "followUpCheckExpressionEnd": 392, "followUpCheckBlockStart": 353, "followUpCheckBlockEnd": 487, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SmruthiManjunath/owncloud_friends/tree/master/src/com/owncloud/android/files/InstantUploadBroadcastReceiver.java", "rawCode": "  private void handleUploadFinished(Context context, Intent intent) {\n    // remove successfull uploading, ignore rest for reupload on reconnect\n    if (intent.getBooleanExtra(FileUploader.EXTRA_UPLOAD_RESULT, false)) {\n      DbHandler db = new DbHandler(context);\n      String localPath = intent.getStringExtra(FileUploader.EXTRA_OLD_FILE_PATH);\n      if (!db.removeIUPendingFile(localPath)) {\n        Log.w(TAG, \"Tried to remove non existing instant upload file \" + localPath);\n      }\n      db.close();\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2871, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 89, "focalAPIEnd": 120, "followUpCheck": "str.equals(\"update_vplan\")", "checkType": "IF", "followUpCheckExpressionStart": 161, "followUpCheckExpressionEnd": 195, "followUpCheckBlockStart": 161, "followUpCheckBlockEnd": 214, "use": ["d(String,str)"], "useStart": [126], "useEnd": [155], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LSGAdmins/lsgapp/tree/master/src/com/lsg/app/UpdateBroadcastReceiver.java", "rawCode": "  private void handleMessage(Context context, Intent intent) {\n    final String action = intent.getStringExtra(\"action\");\n    Log.d(\"c2dm message\", action);\n    if (action.equals(\"update_vplan\")) updateVP(context);\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2872, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 688, "focalAPIEnd": 740, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getExtras()", "intent.get(String)", "intent.getLongExtra(String,int)", "new PollerThread(PowerManager.WakeLock,LocationManager,str,Intent)"], "useStart": [776, 776, 849, 969], "useEnd": [794, 827, 915, 1022], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aewalker/Survey-Droid/tree/master/phone-app/libs/src/com/commonsware/cwac/locpoll/LocationPollerService.java", "rawCode": "  /**\n   * Validates the required extras (EXTRA_PROVIDER and EXTRA_INTENT). If valid, updates the Intent\n   * to be broadcast with the application's own package (required to keep the broadcast within this\n   * application, so we do not leak security information). Then, forks a PollerThread to do the\n   * actual location lookup.\n   *\n   * @return START_REDELIVER_INTENT to ensure we get the last request again\n   */\n  @Override\n  public int onStartCommand(Intent intent, int flags, int startId) {\n    PowerManager.WakeLock lock = getLock(this.getApplicationContext());\n\n    if (!lock.isHeld() || (flags & START_FLAG_REDELIVERY) != 0) {\n      lock.acquire();\n    }\n\n    String provider = intent.getStringExtra(LocationPoller.EXTRA_PROVIDER);\n    Intent toBroadcast = (Intent) intent.getExtras().get(LocationPoller.EXTRA_INTENT);\n    TIMEOUT = (int) intent.getLongExtra(LocationPoller.EXTRA_TIMEOUT, DEFAULT_TIMEOUT);\n\n    toBroadcast.setPackage(getPackageName());\n\n    new PollerThread(lock, locMgr, provider, toBroadcast).start();\n\n    return (START_REDELIVER_INTENT);\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2873, "initialization": ["Intent intent = getIntent()"], "initializationStart": [348], "initializationEnd": [359], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getData()", "intent.getExtras()"], "configurationStart": [382, 733], "configurationEnd": [398, 751], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 906, "focalAPIEnd": 961, "followUpCheck": "str == null", "checkType": "IF", "followUpCheckExpressionStart": 967, "followUpCheckExpressionEnd": 994, "followUpCheckBlockStart": 967, "followUpCheckBlockEnd": 1030, "use": ["intent.getBooleanExtra(String,boolean)"], "useStart": [1095], "useEnd": [1152], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ninjanetworks/contacts/tree/master/src/com/android/contacts/activities/ShowOrCreateActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    // Create handler if doesn't exist, otherwise cancel any running\n    if (mQueryHandler == null) {\n      mQueryHandler = new NotifyingAsyncQueryHandler(this, this);\n    } else {\n      mQueryHandler.cancelOperation(QUERY_TOKEN);\n    }\n\n    final Intent intent = getIntent();\n    final Uri data = intent.getData();\n\n    // Unpack scheme and target data from intent\n    String scheme = null;\n    String ssp = null;\n    if (data != null) {\n      scheme = data.getScheme();\n      ssp = data.getSchemeSpecificPart();\n    }\n\n    // Build set of extras for possible use when creating contact\n    mCreateExtras = new Bundle();\n    Bundle originalExtras = intent.getExtras();\n    if (originalExtras != null) {\n      mCreateExtras.putAll(originalExtras);\n    }\n\n    // Read possible extra with specific title\n    mCreateDescrip = intent.getStringExtra(Intents.EXTRA_CREATE_DESCRIPTION);\n    if (mCreateDescrip == null) {\n      mCreateDescrip = ssp;\n    }\n\n    // Allow caller to bypass dialog prompt\n    mCreateForce = intent.getBooleanExtra(Intents.EXTRA_FORCE_CREATE, false);\n\n    // Handle specific query request\n    if (Constants.SCHEME_MAILTO.equals(scheme)) {\n      mCreateExtras.putString(Intents.Insert.EMAIL, ssp);\n      mCreateExtras.putString(SearchManager.QUERY, ssp);\n\n      Uri uri = Uri.withAppendedPath(Email.CONTENT_FILTER_URI, Uri.encode(ssp));\n      mQueryHandler.startQuery(QUERY_TOKEN, null, uri, CONTACTS_PROJECTION, null, null, null);\n\n    } else if (Constants.SCHEME_TEL.equals(scheme)) {\n      mCreateExtras.putString(Intents.Insert.PHONE, ssp);\n      mCreateExtras.putString(SearchManager.QUERY, ssp);\n\n      Uri uri = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, ssp);\n      mQueryHandler.startQuery(QUERY_TOKEN, null, uri, PHONES_PROJECTION, null, null, null);\n\n    } else {\n      Log.w(TAG, \"Invalid intent:\" + getIntent());\n      finish();\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2874, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getIntExtra(String,int)", "intent.getIntExtra(String,int)", "intent.getIntExtra(String,int)"], "configurationStart": [284, 349, 453], "configurationEnd": [314, 379, 485], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 828, "focalAPIEnd": 863, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TextView.setText(str)"], "useStart": [803], "useEnd": [864], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_settings/tree/master/src/com/android/settings/BatteryInfo.java", "rawCode": "        @Override\n        public void onReceive(Context context, Intent intent) {\n          String action = intent.getAction();\n          if (action.equals(Intent.ACTION_BATTERY_CHANGED)) {\n            int plugType = intent.getIntExtra(\"plugged\", 0);\n\n            mLevel.setText(\"\" + intent.getIntExtra(\"level\", 0));\n            mScale.setText(\"\" + intent.getIntExtra(\"scale\", 0));\n            mVoltage.setText(\n                \"\"\n                    + intent.getIntExtra(\"voltage\", 0)\n                    + \" \"\n                    + getString(R.string.battery_info_voltage_units));\n            mTemperature.setText(\n                \"\"\n                    + tenthsToFixedString(intent.getIntExtra(\"temperature\", 0))\n                    + getString(R.string.battery_info_temperature_units));\n            mTechnology.setText(\"\" + intent.getStringExtra(\"technology\"));\n\n            mStatus.setText(Utils.getBatteryStatus(getResources(), intent));\n\n            switch (plugType) {\n              case 0:\n                mPower.setText(getString(R.string.battery_info_power_unplugged));\n                break;\n              case BatteryManager.BATTERY_PLUGGED_AC:\n                mPower.setText(getString(R.string.battery_info_power_ac));\n                break;\n              case BatteryManager.BATTERY_PLUGGED_USB:\n                mPower.setText(getString(R.string.battery_info_power_usb));\n                break;\n              case BatteryManager.BATTERY_PLUGGED_WIRELESS:\n                mPower.setText(getString(R.string.battery_info_power_wireless));\n                break;\n              case (BatteryManager.BATTERY_PLUGGED_AC | BatteryManager.BATTERY_PLUGGED_USB):\n                mPower.setText(getString(R.string.battery_info_power_ac_usb));\n                break;\n              default:\n                mPower.setText(getString(R.string.battery_info_power_unknown));\n                break;\n            }\n\n            int health = intent.getIntExtra(\"health\", BatteryManager.BATTERY_HEALTH_UNKNOWN);\n            String healthString;\n            if (health == BatteryManager.BATTERY_HEALTH_GOOD) {\n              healthString = getString(R.string.battery_info_health_good);\n            } else if (health == BatteryManager.BATTERY_HEALTH_OVERHEAT) {\n              healthString = getString(R.string.battery_info_health_overheat);\n            } else if (health == BatteryManager.BATTERY_HEALTH_DEAD) {\n              healthString = getString(R.string.battery_info_health_dead);\n            } else if (health == BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE) {\n              healthString = getString(R.string.battery_info_health_over_voltage);\n            } else if (health == BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE) {\n              healthString = getString(R.string.battery_info_health_unspecified_failure);\n            } else if (health == BatteryManager.BATTERY_HEALTH_COLD) {\n              healthString = getString(R.string.battery_info_health_cold);\n            } else {\n              healthString = getString(R.string.battery_info_health_unknown);\n            }\n            mHealth.setText(healthString);\n          }\n        }\n"}, {"dataset": "getStringExtra", "exampleID": 2875, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getShortExtra(String,short)", "intent.getParcelableExtra(String)"], "configurationStart": [103, 201], "configurationEnd": [168, 255], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 277, "focalAPIEnd": 326, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["CachedBluetoothDevice.setName(str)"], "useStart": [975], "useEnd": [1001], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_settings/tree/master/src/com/android/settings/bluetooth/BluetoothEventManager.java", "rawCode": "    public void onReceive(Context context, Intent intent, BluetoothDevice device) {\n      short rssi = intent.getShortExtra(BluetoothDevice.EXTRA_RSSI, Short.MIN_VALUE);\n      BluetoothClass btClass = intent.getParcelableExtra(BluetoothDevice.EXTRA_CLASS);\n      String name = intent.getStringExtra(BluetoothDevice.EXTRA_NAME);\n      // TODO Pick up UUID. They should be available for 2.1 devices.\n      // Skip for now, there's a bluez problem and we are not getting uuids even for 2.1.\n      CachedBluetoothDevice cachedDevice = mDeviceManager.findDevice(device);\n      if (cachedDevice == null) {\n        cachedDevice = mDeviceManager.addDevice(mLocalAdapter, mProfileManager, device);\n        Log.d(TAG, \"DeviceFoundHandler created new CachedBluetoothDevice: \" + cachedDevice);\n        // callback to UI to create Preference for new device\n        dispatchDeviceAdded(cachedDevice);\n      }\n      cachedDevice.setRssi(rssi);\n      cachedDevice.setBtClass(btClass);\n      cachedDevice.setName(name);\n      cachedDevice.setVisible(true);\n    }\n"}, {"dataset": "getStringExtra", "exampleID": 2876, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()"], "configurationStart": [460], "configurationEnd": [478], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 569, "focalAPIEnd": 616, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "purchaseStateChanged(Context,str,String)", "intent.getStringExtra(String)", "intent.getLongExtra(String,int)", "intent.getIntExtra(String,int)"], "useStart": [643, 696, 828, 1071, 1161], "useEnd": [688, 748, 873, 1119, 1244], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/beshkenadze/cloudreader/tree/master/android/src/org/coolreader/donations/BillingReceiver.java", "rawCode": "  /**\n   * This is the entry point for all asynchronous messages sent from Android Market to the\n   * application. This method forwards the messages on to the {@link BillingService}, which handles\n   * the communication back to Android Market. The {@link BillingService} also reports state changes\n   * back to the application through the {@link ResponseHandler}.\n   */\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    String action = intent.getAction();\n    if (Consts.ACTION_PURCHASE_STATE_CHANGED.equals(action)) {\n      String signedData = intent.getStringExtra(Consts.INAPP_SIGNED_DATA);\n      String signature = intent.getStringExtra(Consts.INAPP_SIGNATURE);\n      purchaseStateChanged(context, signedData, signature);\n    } else if (Consts.ACTION_NOTIFY.equals(action)) {\n      String notifyId = intent.getStringExtra(Consts.NOTIFICATION_ID);\n      if (Consts.DEBUG) {\n        Log.i(TAG, \"notifyId: \" + notifyId);\n      }\n      notify(context, notifyId);\n    } else if (Consts.ACTION_RESPONSE_CODE.equals(action)) {\n      long requestId = intent.getLongExtra(Consts.INAPP_REQUEST_ID, -1);\n      int responseCodeIndex =\n          intent.getIntExtra(Consts.INAPP_RESPONSE_CODE, ResponseCode.RESULT_ERROR.ordinal());\n      checkResponseCode(context, requestId, responseCodeIndex);\n    } else {\n      Log.w(TAG, \"unexpected action: \" + action);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2877, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 420, "focalAPIEnd": 451, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createFromPdu(*,str)"], "useStart": [856], "useEnd": [897], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/core/java/android/provider/Telephony.java", "rawCode": "      /**\n       * Read the PDUs out of an {@link #SMS_RECEIVED_ACTION} or a {@link #DATA_SMS_RECEIVED_ACTION}\n       * intent.\n       *\n       * @param intent the intent to read from\n       * @return an array of SmsMessages for the PDUs\n       */\n      public static SmsMessage[] getMessagesFromIntent(Intent intent) {\n        Object[] messages = (Object[]) intent.getSerializableExtra(\"pdus\");\n        String format = intent.getStringExtra(\"format\");\n        byte[][] pduObjs = new byte[messages.length][];\n\n        for (int i = 0; i < messages.length; i++) {\n          pduObjs[i] = (byte[]) messages[i];\n        }\n        byte[][] pdus = new byte[pduObjs.length][];\n        int pduCount = pdus.length;\n        SmsMessage[] msgs = new SmsMessage[pduCount];\n        for (int i = 0; i < pduCount; i++) {\n          pdus[i] = pduObjs[i];\n          msgs[i] = SmsMessage.createFromPdu(pdus[i], format);\n        }\n        return msgs;\n      }\n"}, {"dataset": "getStringExtra", "exampleID": 2878, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Api.CUSTOM_SCRIPT_MSG.equals(intent.getAction(),)", "guardType": "IF {", "guardExpressionStart": 145, "guardExpressionEnd": 223, "guardBlockStart": 145, "guardBlockEnd": 407, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 254, "focalAPIEnd": 291, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "setCustomScript(str,String)", "intent.getStringExtra(String)"], "useStart": [322, 368, 1031], "useEnd": [360, 400, 1068], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/skullone/android_firewall/tree/master/src/com/jtschohl/androidfirewall/MainActivity.java", "rawCode": "  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (resultCode == RESULT_OK && Api.CUSTOM_SCRIPT_MSG.equals(data.getAction())) {\n      final String script = data.getStringExtra(Api.SCRIPT_EXTRA);\n      final String script2 = data.getStringExtra(Api.SCRIPT2_EXTRA);\n      setCustomScript(script, script2);\n    }\n    if (requestCode == IMPORT_RULES_REQUEST && resultCode == RESULT_OK) {\n      Toast.makeText(this, R.string.rules_import_successfully, Toast.LENGTH_SHORT).show();\n      Api.applications = null;\n      showOrLoadApplications();\n      toggleVPNbutton(getApplicationContext());\n      toggleRoambutton(getApplicationContext());\n      toggleLANbutton(getApplicationContext());\n      toggleUserSettings(getApplicationContext());\n    }\n    if (requestCode == EXPORT_RULES_REQUEST && resultCode == RESULT_OK) {\n      Toast.makeText(this, R.string.rules_export_successfully, Toast.LENGTH_SHORT).show();\n      String exportedName = data.getStringExtra(Api.EXPORT_EXTRA);\n      Api.exportRulesToFile(MainActivity.this, exportedName);\n    }\n    if (requestCode == MANAGE_RULES_REQUEST && resultCode == RESULT_OK) {\n      Toast.makeText(this, R.string.rules_file_deleted, Toast.LENGTH_SHORT).show();\n      manageRuleFiles();\n    }\n    if (requestCode == LOAD_PROFILE_REQUEST && resultCode == RESULT_OK) {\n      Toast.makeText(this, R.string.profileapplied, Toast.LENGTH_SHORT).show();\n      Api.applications = null;\n      showOrLoadApplications();\n      refreshHeader();\n      refreshSpinner();\n      toggleVPNbutton(getApplicationContext());\n      toggleRoambutton(getApplicationContext());\n      toggleLANbutton(getApplicationContext());\n      toggleUserSettings(getApplicationContext());\n      if (Api.isEnabled(getApplicationContext())) {\n        Api.applyIptablesRules(getApplicationContext(), true);\n      } else {\n        Api.saveRules(getApplicationContext());\n      }\n    }\n    if (requestCode == EDIT_PROFILE_REQUEST && resultCode == RESULT_OK) {\n      updateSpinner();\n    }\n    if (requestCode == USER_SETTINGS_REQUEST && resultCode == RESULT_OK) {\n      SharedPreferences prefs =\n          PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\n      Intent intent = getIntent();\n      finish();\n      toggleVPNbutton(getApplicationContext());\n      toggleRoambutton(getApplicationContext());\n      toggleLANbutton(getApplicationContext());\n      String language = prefs.getString(\"locale\", Locale.getDefault().getDisplayLanguage());\n      Api.changeLanguage(getApplicationContext(), language);\n      startActivity(intent);\n    }\n    // for debugging purposes\n    // if (resultCode == RESULT_CANCELED)\n    // Toast.makeText(this, \"Operation Canceled\",\n    // Toast.LENGTH_SHORT).show();\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2879, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(intent.getBooleanExtra(SIGNOUT_EXTRA,false,)) && !(intent==null)", "guardType": "IF {", "guardExpressionStart": 798, "guardExpressionEnd": 815, "guardBlockStart": 798, "guardBlockEnd": 1893, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 1669, "focalAPIEnd": 1705, "followUpCheck": "str == null || str.length() == 0", "checkType": "IF", "followUpCheckExpressionStart": 1717, "followUpCheckExpressionEnd": 1758, "followUpCheckBlockStart": 1717, "followUpCheckBlockEnd": 1883, "use": ["intent.getStringExtra(String)", "intent.getIntExtra(String,int)", "new VoiceMailProviderSettings(str,String,int)", "intent.getData()"], "useStart": [2321, 2569, 2896, 3150], "useEnd": [2358, 2612, 2952, 3164], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_Phone/tree/master/src/com/android/phone/CallFeaturesSetting.java", "rawCode": "  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    // there are cases where the contact picker may end up sending us more than one\n    // request. We want to ignore the request if we're not in the correct state.\n    if (requestCode == VOICEMAIL_PROVIDER_CFG_ID) {\n      boolean failure = false;\n\n      // No matter how the processing of result goes lets clear the flag\n      if (DBG) log(\"mVMProviderSettingsForced: \" + mVMProviderSettingsForced);\n      final boolean isVMProviderSettingsForced = mVMProviderSettingsForced;\n      mVMProviderSettingsForced = false;\n\n      String vmNum = null;\n      if (resultCode != RESULT_OK) {\n        if (DBG) log(\"onActivityResult: vm provider cfg result not OK.\");\n        failure = true;\n      } else {\n        if (data == null) {\n          if (DBG) log(\"onActivityResult: vm provider cfg result has no data\");\n          failure = true;\n        } else {\n          if (data.getBooleanExtra(SIGNOUT_EXTRA, false)) {\n            if (DBG) log(\"Provider requested signout\");\n            if (isVMProviderSettingsForced) {\n              if (DBG) log(\"Going back to previous provider on signout\");\n              switchToPreviousVoicemailProvider();\n            } else {\n              final String victim = getCurrentVoicemailProviderKey();\n              if (DBG) log(\"Relaunching activity and ignoring \" + victim);\n              Intent i = new Intent(ACTION_ADD_VOICEMAIL);\n              i.putExtra(IGNORE_PROVIDER_EXTRA, victim);\n              i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n              this.startActivity(i);\n            }\n            return;\n          }\n          vmNum = data.getStringExtra(VM_NUMBER_EXTRA);\n          if (vmNum == null || vmNum.length() == 0) {\n            if (DBG) log(\"onActivityResult: vm provider cfg result has no vmnum\");\n            failure = true;\n          }\n        }\n      }\n      if (failure) {\n        if (DBG) log(\"Failure in return from voicemail provider\");\n        if (isVMProviderSettingsForced) {\n          switchToPreviousVoicemailProvider();\n        } else {\n          if (DBG) log(\"Not switching back the provider since this is not forced config\");\n        }\n        return;\n      }\n      mChangingVMorFwdDueToProviderChange = isVMProviderSettingsForced;\n      final String fwdNum = data.getStringExtra(FWD_NUMBER_EXTRA);\n\n      // TODO(iliat): It would be nice to load the current network setting for this and\n      // send it to the provider when it's config is invoked so it can use this as default\n      final int fwdNumTime = data.getIntExtra(FWD_NUMBER_TIME_EXTRA, 20);\n\n      if (DBG)\n        log(\n            \"onActivityResult: vm provider cfg result \"\n                + (fwdNum != null ? \"has\" : \" does not have\")\n                + \" forwarding number\");\n      saveVoiceMailAndForwardingNumber(\n          getCurrentVoicemailProviderKey(),\n          new VoiceMailProviderSettings(vmNum, fwdNum, fwdNumTime));\n      return;\n    }\n\n    if (resultCode != RESULT_OK) {\n      if (DBG) log(\"onActivityResult: contact picker result not OK.\");\n      return;\n    }\n\n    Cursor cursor = getContentResolver().query(data.getData(), NUM_PROJECTION, null, null, null);\n    if ((cursor == null) || (!cursor.moveToFirst())) {\n      if (DBG) log(\"onActivityResult: bad contact data, no results found.\");\n      return;\n    }\n\n    switch (requestCode) {\n      case VOICEMAIL_PREF_ID:\n        mSubMenuVoicemailSettings.onPickActivityResult(cursor.getString(0));\n        break;\n      default:\n        // TODO: may need exception here.\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2880, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getData()", "intent.getExtras()"], "configurationStart": [685, 778], "configurationEnd": [701, 796], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 980, "focalAPIEnd": 1017, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["execute(*,int,str,boolean)"], "useStart": [1250], "useEnd": [1380], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anthonydahanne/ReGalAndroid/tree/master/regalandroid/src/main/java/net/dahanne/android/regalandroid/activity/ShowGallery.java", "rawCode": "  /** we work on the return from the photo picker */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent intent) {\n    super.onActivityResult(requestCode, resultCode, intent);\n    DBUtils.getInstance().recoverContextFromDatabase(this);\n    if (application == null) {\n      application = (RegalAndroidApplication) getApplication();\n    }\n    int albumName = application.getCurrentAlbum().getName();\n    if (resultCode == RESULT_OK) {\n      switch (requestCode) {\n        case REQUEST_CODE_ADD_PHOTO:\n          // add a new photo\n          Intent intent2 = new Intent(this, UploadPhoto.class);\n          intent2.setData(intent.getData());\n          if (intent.getExtras() != null) {\n            intent2.putExtras(intent.getExtras());\n          }\n          intent2.setAction(Intent.ACTION_SEND);\n          startActivity(intent2);\n          break;\n        case REQUEST_CODE_ADD_ALBUM:\n          String subalbumName = intent.getStringExtra(\"subalbumName\");\n          progressDialog =\n              ProgressDialog.show(\n                  this,\n                  getString(R.string.please_wait),\n                  getString(R.string.creating_new_album),\n                  true);\n\n          new CreateAlbumTask(this, progressDialog)\n              .execute(Settings.getGalleryUrl(this), albumName, subalbumName, mustLogIn);\n          break;\n      }\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2881, "initialization": ["Intent intent = getIntent()"], "initializationStart": [123], "initializationEnd": [134], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()", "intent.getParcelableExtra(String)"], "configurationStart": [156, 445], "configurationEnd": [169, 495], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 518, "focalAPIEnd": 570, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "intent.getIntExtra(String,int)"], "useStart": [591, 673], "useEnd": [641, 801], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TrasUI/old_Settings/tree/master/src/com/android/settings/bluetooth/BluetoothPermissionActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    Intent i = getIntent();\n    String action = i.getAction();\n    if (!action.equals(BluetoothDevice.ACTION_CONNECTION_ACCESS_REQUEST)) {\n      Log.e(\n          TAG,\n          \"Error: this activity may be started only with intent \"\n              + \"ACTION_CONNECTION_ACCESS_REQUEST\");\n      finish();\n      return;\n    }\n\n    mDevice = i.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);\n    mReturnPackage = i.getStringExtra(BluetoothDevice.EXTRA_PACKAGE_NAME);\n    mReturnClass = i.getStringExtra(BluetoothDevice.EXTRA_CLASS_NAME);\n    int requestType =\n        i.getIntExtra(\n            BluetoothDevice.EXTRA_ACCESS_REQUEST_TYPE,\n            BluetoothDevice.REQUEST_TYPE_PHONEBOOK_ACCESS);\n\n    if (requestType == BluetoothDevice.REQUEST_TYPE_PROFILE_CONNECTION) {\n      showConnectionDialog();\n    } else if (requestType == BluetoothDevice.REQUEST_TYPE_PHONEBOOK_ACCESS) {\n      showPhonebookDialog();\n    } else {\n      Log.e(TAG, \"Error: bad request type: \" + requestType);\n      finish();\n      return;\n    }\n    registerReceiver(mReceiver, new IntentFilter(BluetoothDevice.ACTION_CONNECTION_ACCESS_CANCEL));\n    mReceiverRegistered = true;\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2882, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(intent.getBooleanExtra(SIGNOUT_EXTRA,false,)) && !(intent==null)", "guardType": "IF {", "guardExpressionStart": 798, "guardExpressionEnd": 815, "guardBlockStart": 798, "guardBlockEnd": 1893, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 1669, "focalAPIEnd": 1705, "followUpCheck": "str == null || str.length() == 0", "checkType": "IF", "followUpCheckExpressionStart": 1717, "followUpCheckExpressionEnd": 1758, "followUpCheckBlockStart": 1717, "followUpCheckBlockEnd": 1883, "use": ["intent.getStringExtra(String)", "intent.getIntExtra(String,int)", "new VoiceMailProviderSettings(str,String,int)", "intent.getData()"], "useStart": [2321, 2569, 2896, 3150], "useEnd": [2358, 2612, 2952, 3164], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytown/Phone_froyo/tree/master/src/com/android/phone/CallFeaturesSetting.java", "rawCode": "  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    // there are cases where the contact picker may end up sending us more than one\n    // request. We want to ignore the request if we're not in the correct state.\n    if (requestCode == VOICEMAIL_PROVIDER_CFG_ID) {\n      boolean failure = false;\n\n      // No matter how the processing of result goes lets clear the flag\n      if (DBG) log(\"mVMProviderSettingsForced: \" + mVMProviderSettingsForced);\n      final boolean isVMProviderSettingsForced = mVMProviderSettingsForced;\n      mVMProviderSettingsForced = false;\n\n      String vmNum = null;\n      if (resultCode != RESULT_OK) {\n        if (DBG) log(\"onActivityResult: vm provider cfg result not OK.\");\n        failure = true;\n      } else {\n        if (data == null) {\n          if (DBG) log(\"onActivityResult: vm provider cfg result has no data\");\n          failure = true;\n        } else {\n          if (data.getBooleanExtra(SIGNOUT_EXTRA, false)) {\n            if (DBG) log(\"Provider requested signout\");\n            if (isVMProviderSettingsForced) {\n              if (DBG) log(\"Going back to previous provider on signout\");\n              switchToPreviousVoicemailProvider();\n            } else {\n              final String victim = getCurrentVoicemailProviderKey();\n              if (DBG) log(\"Relaunching activity and ignoring \" + victim);\n              Intent i = new Intent(ACTION_ADD_VOICEMAIL);\n              i.putExtra(IGNORE_PROVIDER_EXTRA, victim);\n              i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n              this.startActivity(i);\n            }\n            return;\n          }\n          vmNum = data.getStringExtra(VM_NUMBER_EXTRA);\n          if (vmNum == null || vmNum.length() == 0) {\n            if (DBG) log(\"onActivityResult: vm provider cfg result has no vmnum\");\n            failure = true;\n          }\n        }\n      }\n      if (failure) {\n        if (DBG) log(\"Failure in return from voicemail provider\");\n        if (isVMProviderSettingsForced) {\n          switchToPreviousVoicemailProvider();\n        } else {\n          if (DBG) log(\"Not switching back the provider since this is not forced config\");\n        }\n        return;\n      }\n      mChangingVMorFwdDueToProviderChange = isVMProviderSettingsForced;\n      final String fwdNum = data.getStringExtra(FWD_NUMBER_EXTRA);\n\n      // TODO(iliat): It would be nice to load the current network setting for this and\n      // send it to the provider when it's config is invoked so it can use this as default\n      final int fwdNumTime = data.getIntExtra(FWD_NUMBER_TIME_EXTRA, 20);\n\n      if (DBG)\n        log(\n            \"onActivityResult: vm provider cfg result \"\n                + (fwdNum != null ? \"has\" : \" does not have\")\n                + \" forwarding number\");\n      saveVoiceMailAndForwardingNumber(\n          getCurrentVoicemailProviderKey(),\n          new VoiceMailProviderSettings(vmNum, fwdNum, fwdNumTime));\n      return;\n    }\n\n    if (resultCode != RESULT_OK) {\n      if (DBG) log(\"onActivityResult: contact picker result not OK.\");\n      return;\n    }\n\n    Cursor cursor = getContentResolver().query(data.getData(), NUM_PROJECTION, null, null, null);\n    if ((cursor == null) || (!cursor.moveToFirst())) {\n      if (DBG) log(\"onActivityResult: bad contact data, no results found.\");\n      return;\n    }\n\n    switch (requestCode) {\n      case VOICEMAIL_PREF_ID:\n        mSubMenuVoicemailSettings.onPickActivityResult(cursor.getString(0));\n        break;\n        // add by cytown\n      case ADD_BLACK_LIST_ID:\n        mButtonAddBlack.onPickActivityResult(cursor.getString(0));\n        break;\n      default:\n        // TODO: may need exception here.\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2883, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(FileManagerIntents.ACTION_MULTI_SELECT.equals(intent.getAction(),)) && FileManagerIntents.ACTION_PICK_DIRECTORY.equals(intent.getAction(),)||FileManagerIntents.ACTION_PICK_FILE.equals(intent.getAction(),)||Intent.ACTION_GET_CONTENT.equals(intent.getAction(),) && intent.hasExtra(name,)", "guardType": "IF {", "guardExpressionStart": 85, "guardExpressionEnd": 155, "guardBlockStart": 85, "guardBlockEnd": 2131, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 1098, "focalAPIEnd": 1151, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setTitle(str)", "intent.getAction()", "intent.getAction()"], "useStart": [1089, 1679, 1828], "useEnd": [1152, 1697, 1846], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openintents/filemanager/tree/master/FileManager/src/org/openintents/filemanager/IntentFilterActivity.java", "rawCode": "  private void chooseListType(Intent intent, Bundle extras) {\n    // Multiselect\n    if (FileManagerIntents.ACTION_MULTI_SELECT.equals(intent.getAction())) {\n      String tag = \"MultiSelectListFragment\";\n      mFragment = (MultiselectListFragment) getSupportFragmentManager().findFragmentByTag(tag);\n\n      // Only add if it doesn't exist\n      if (mFragment == null) {\n        mFragment = new MultiselectListFragment();\n        // Pass extras through to the list fragment. This helps\n        // centralize the path resolving, etc.\n        mFragment.setArguments(extras);\n\n        setTitle(R.string.multiselect_title);\n\n        getSupportFragmentManager()\n            .beginTransaction()\n            .add(android.R.id.content, mFragment, tag)\n            .commit();\n      }\n    }\n    // Item pickers\n    else if (FileManagerIntents.ACTION_PICK_DIRECTORY.equals(intent.getAction())\n        || FileManagerIntents.ACTION_PICK_FILE.equals(intent.getAction())\n        || Intent.ACTION_GET_CONTENT.equals(intent.getAction())) {\n      if (intent.hasExtra(FileManagerIntents.EXTRA_TITLE))\n        setTitle(intent.getStringExtra(FileManagerIntents.EXTRA_TITLE));\n      else setTitle(R.string.pick_title);\n\n      mFragment =\n          (PickFileListFragment)\n              getSupportFragmentManager().findFragmentByTag(PickFileListFragment.class.getName());\n\n      // Only add if it doesn't exist\n      if (mFragment == null) {\n        mFragment = new PickFileListFragment();\n\n        // Pass extras through to the list fragment. This helps\n        // centralize the path resolving, etc.\n        extras.putBoolean(\n            FileManagerIntents.EXTRA_IS_GET_CONTENT_INITIATED,\n            intent.getAction().equals(Intent.ACTION_GET_CONTENT));\n        extras.putBoolean(\n            FileManagerIntents.EXTRA_DIRECTORIES_ONLY,\n            intent.getAction().equals(FileManagerIntents.ACTION_PICK_DIRECTORY));\n\n        mFragment.setArguments(extras);\n        getSupportFragmentManager()\n            .beginTransaction()\n            .add(android.R.id.content, mFragment, PickFileListFragment.class.getName())\n            .commit();\n      }\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2884, "initialization": ["Intent intent = getIntent()"], "initializationStart": [68], "initializationEnd": [106], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 127, "focalAPIEnd": 156, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PROMAND/Code_Fighters/tree/master/src/pl/byd/promand/Team2/otherActivities/VisitAdditingActivity.java", "rawCode": "  public void btn_save_visit_info_click(View v) {\n    Intent temp = VisitAdditingActivity.this.getIntent();\n    String extra = temp.getStringExtra(\"result\");\n\n    String received = SaveInformationToDict();\n    if (received != null) {\n      Toast.makeText(this, received, 1).show();\n    } else {\n      onBackPressed();\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2885, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Intent.ACTION_SEARCH.equals(intent.getAction(),)", "guardType": "IF {", "guardExpressionStart": 132, "guardExpressionEnd": 184, "guardBlockStart": 132, "guardBlockEnd": 250, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 201, "focalAPIEnd": 243, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eyal-lezmy/Android-DataLib/tree/master/Android-DataLib-Sample-Netflix/src/fr/eyal/datalib/sample/netflix/SearchableActivity.java", "rawCode": "  public String handleIntent(Intent intent) {\n    // Get the intent, verify the action and get the query\n    String query = \"\";\n    if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\n      query = intent.getStringExtra(SearchManager.QUERY);\n    }\n    return query;\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2886, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new PluginResult(*,String)", "PluginResult.setKeepCallback(boolean)", "error(PluginResult,String)"], "tryExpressionStart": 140, "tryExpressionEnd": 144, "tryBlockStart": 140, "tryBlockEnd": 3032, "catchExpressionStart": 2808, "catchExpressionEnd": 2828, "catchBlockStart": 2808, "catchBlockEnd": 3032, "exceptionHandlingCallStart": [2872, 2959, 2998], "exceptionHandlingCallEnd": [2949, 2988, 3023], "configuration": ["intent.hasExtra(String)", "intent.hasExtra(String)"], "configurationStart": [403, 610], "configurationEnd": [459, 633], "guardCondition": "intent.getAction().equals(IServiceManager.INTENT_SERVICE_STARTED_STATUS,)", "guardType": "IF {", "guardExpressionStart": 204, "guardExpressionEnd": 281, "guardBlockStart": 204, "guardBlockEnd": 996, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 685, "focalAPIEnd": 714, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["equals(str)", "intent.hasExtra(String)", "intent.getSerializableExtra(String)"], "useStart": [655, 1049, 1722], "useEnd": [715, 1112, 1821], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/societies/SOCIETIES-Platform/tree/master/android/client-frwk/SocietiesAndroidApp/src/org/societies/android/platform/phongegap/PrivacyPolicyManagerPlugin.java", "rawCode": "    @Override\n    public void onReceive(Context context, Intent intent) {\n      Log.i(TAG, \"Intent received: \" + intent.getAction());\n      try {\n        // -- PrivacyPolicyManagerService started\n        if (intent.getAction().equals(IServiceManager.INTENT_SERVICE_STARTED_STATUS)) {\n          Log.d(TAG, \"Service started message received: \" + intent.getAction());\n          boolean ack =\n              intent.hasExtra(IServiceManager.INTENT_RETURN_VALUE_KEY)\n                  && intent.getBooleanExtra(IServiceManager.INTENT_RETURN_VALUE_KEY, false);\n          boolean isPrivacyPolicyManager =\n              intent.hasExtra(\"type\")\n                  && \"PrivacyPolicyManager\".equals(intent.getStringExtra(\"type\"));\n          // Execute the plugin\n          if (ack && isPrivacyPolicyManager) {\n            serviceIsInit = true;\n            if (pluginIsInit && serviceIsInit) {\n              executePlugin(methodName, arguments, callbackId);\n            }\n          }\n          return;\n        }\n        // -- Ack\n        boolean ack =\n            intent.hasExtra(IPrivacyPolicyManager.INTENT_RETURN_STATUS_KEY)\n                && intent.getBooleanExtra(IPrivacyPolicyManager.INTENT_RETURN_STATUS_KEY, false);\n        Log.d(\n            TAG,\n            \"Privacy Response received: \"\n                + intent.getAction()\n                + (ack ? \" with success\" : \" with an error\"));\n        // -- Get Privacy Policy\n        if (intent.getAction().equals(MethodType.GET_PRIVACY_POLICY.name())) {\n          JSONArray data = new JSONArray();\n          if (ack && intent.hasExtra(IPrivacyPolicyManager.INTENT_RETURN_VALUE_KEY)) {\n            RequestPolicy privacyPolicy =\n                (RequestPolicy)\n                    intent.getSerializableExtra(\n                        IPrivacyPolicyManager.INTENT_RETURN_VALUE_KEY); // TODO Parcelable\n            String jsonPrivacyPolicy = jsonHelper.toJson(privacyPolicy, RequestPolicy.class);\n            Log.d(TAG, \"Privacy policy retrieved: \" + jsonPrivacyPolicy);\n            // data.put(PrivacyPolicyIntentHelper.RESULT_PRIVACY_POLICY, jsonPrivacyPolicy);\n            data.put(jsonPrivacyPolicy);\n          }\n          // -- Send data\n          PluginResult result = new PluginResult(Status.OK, data);\n          result.setKeepCallback(false);\n          success(result, callbackId);\n        } else {\n          Log.e(TAG, \"But this action is unknown, or data are missing\");\n          // -- Send data\n          PluginResult result =\n              new PluginResult(\n                  Status.INVALID_ACTION,\n                  \"Response received: \"\n                      + intent.getAction()\n                      + \", but this action is unknown, or data are missing.\");\n          result.setKeepCallback(false);\n          error(result, callbackId);\n        }\n      } catch (Exception e) {\n        PluginResult result =\n            new PluginResult(Status.ERROR, \"Error during the JSON parsing of the result\");\n        result.setKeepCallback(false);\n        error(result, callbackId);\n      }\n    }\n"}, {"dataset": "getStringExtra", "exampleID": 2887, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()", "intent.getParcelableExtra(String)"], "configurationStart": [121, 480], "configurationEnd": [139, 537], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 687, "focalAPIEnd": 733, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getIntExtra(String,int)"], "useStart": [878], "useEnd": [958], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/core/tests/bandwidthtests/src/com/android/bandwidthtest/util/ConnectionUtil.java", "rawCode": "    /** {@inheritDoc} */\n    @Override\n    public void onReceive(Context context, Intent intent) {\n      String action = intent.getAction();\n      Log.v(\"WifiReceiver\", \"onReceive() is calleld with \" + intent);\n      if (action.equals(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION)) {\n        Log.v(LOG_TAG, \"Scan results are available\");\n        notifyScanResult();\n      } else if (action.equals(WifiManager.NETWORK_STATE_CHANGED_ACTION)) {\n        mWifiNetworkInfo = (NetworkInfo) intent.getParcelableExtra(WifiManager.EXTRA_NETWORK_INFO);\n        Log.v(LOG_TAG, \"mWifiNetworkInfo: \" + mWifiNetworkInfo.toString());\n        if (mWifiNetworkInfo.getState() == State.CONNECTED) {\n          intent.getStringExtra(WifiManager.EXTRA_BSSID);\n        }\n        notifyWifiState();\n      } else if (action.equals(WifiManager.WIFI_STATE_CHANGED_ACTION)) {\n        mWifiState =\n            intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE, WifiManager.WIFI_STATE_UNKNOWN);\n        notifyWifiState();\n      } else if (action.equals(WifiManager.WIFI_AP_STATE_CHANGED_ACTION)) {\n        notifyWifiAPState();\n      } else {\n        return;\n      }\n    }\n"}, {"dataset": "getStringExtra", "exampleID": 2888, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Actions.BROADCAST_REQUEST_REGISTER_SOURCE.equals(intent.getAction(),)", "guardType": "IF {", "guardExpressionStart": 87, "guardExpressionEnd": 160, "guardBlockStart": 87, "guardBlockEnd": 482, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 246, "focalAPIEnd": 295, "followUpCheck": "context.getPackageName().equals(str) || !intent.getBooleanExtra(Actions.EXTRA_ADDRESSED,true)", "checkType": "IF", "followUpCheckExpressionStart": 305, "followUpCheckExpressionEnd": 424, "followUpCheckBlockStart": 305, "followUpCheckBlockEnd": 474, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openintents/openintents/tree/master/historify/HistorifyBridgeLibrary/src/org/openintents/historify/services/bridge/HistorifyBridge.java", "rawCode": "    @Override\n    public final void onReceive(Context context, Intent intent) {\n\n      if (Actions.BROADCAST_REQUEST_REGISTER_SOURCE.equals(intent.getAction())) {\n        // check if the broadcast is addressed to us.\n        String packageName = intent.getStringExtra(Actions.EXTRA_PACKAGE_NAME);\n        if (context.getPackageName().equals(packageName)\n            || !intent.getBooleanExtra(Actions.EXTRA_ADDRESSED, true)) {\n          onRequestRegister(context);\n        }\n      }\n    }\n"}, {"dataset": "getStringExtra", "exampleID": 2889, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 61, "focalAPIEnd": 88, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["str.equals(String)"], "useStart": [61], "useEnd": [113], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kanata3249/Android-FFXIEQ/tree/master/ffxieq/src/com/github/kanata3249/ffxieq/android/SkillEditActivity.java", "rawCode": "  public static boolean isComeFrom(Intent data) {\n    return data.getStringExtra(\"From\").equals(\"MeritPointEdit\");\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2890, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(intent.getBooleanExtra(SIGNOUT_EXTRA,false,)) && !(intent==null)", "guardType": "IF {", "guardExpressionStart": 798, "guardExpressionEnd": 815, "guardBlockStart": 798, "guardBlockEnd": 1893, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 1669, "focalAPIEnd": 1705, "followUpCheck": "str == null || str.length() == 0", "checkType": "IF", "followUpCheckExpressionStart": 1717, "followUpCheckExpressionEnd": 1758, "followUpCheckBlockStart": 1717, "followUpCheckBlockEnd": 1883, "use": ["intent.getStringExtra(String)", "intent.getIntExtra(String,int)", "new VoiceMailProviderSettings(str,String,int)", "intent.getData()"], "useStart": [2321, 2569, 2896, 3150], "useEnd": [2358, 2612, 2952, 3164], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzo/packages_apps_phone/tree/master/src/com/android/phone/CallFeaturesSetting.java", "rawCode": "  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    // there are cases where the contact picker may end up sending us more than one\n    // request. We want to ignore the request if we're not in the correct state.\n    if (requestCode == VOICEMAIL_PROVIDER_CFG_ID) {\n      boolean failure = false;\n\n      // No matter how the processing of result goes lets clear the flag\n      if (DBG) log(\"mVMProviderSettingsForced: \" + mVMProviderSettingsForced);\n      final boolean isVMProviderSettingsForced = mVMProviderSettingsForced;\n      mVMProviderSettingsForced = false;\n\n      String vmNum = null;\n      if (resultCode != RESULT_OK) {\n        if (DBG) log(\"onActivityResult: vm provider cfg result not OK.\");\n        failure = true;\n      } else {\n        if (data == null) {\n          if (DBG) log(\"onActivityResult: vm provider cfg result has no data\");\n          failure = true;\n        } else {\n          if (data.getBooleanExtra(SIGNOUT_EXTRA, false)) {\n            if (DBG) log(\"Provider requested signout\");\n            if (isVMProviderSettingsForced) {\n              if (DBG) log(\"Going back to previous provider on signout\");\n              switchToPreviousVoicemailProvider();\n            } else {\n              final String victim = getCurrentVoicemailProviderKey();\n              if (DBG) log(\"Relaunching activity and ignoring \" + victim);\n              Intent i = new Intent(ACTION_ADD_VOICEMAIL);\n              i.putExtra(IGNORE_PROVIDER_EXTRA, victim);\n              i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n              this.startActivity(i);\n            }\n            return;\n          }\n          vmNum = data.getStringExtra(VM_NUMBER_EXTRA);\n          if (vmNum == null || vmNum.length() == 0) {\n            if (DBG) log(\"onActivityResult: vm provider cfg result has no vmnum\");\n            failure = true;\n          }\n        }\n      }\n      if (failure) {\n        if (DBG) log(\"Failure in return from voicemail provider\");\n        if (isVMProviderSettingsForced) {\n          switchToPreviousVoicemailProvider();\n        } else {\n          if (DBG) log(\"Not switching back the provider since this is not forced config\");\n        }\n        return;\n      }\n      mChangingVMorFwdDueToProviderChange = isVMProviderSettingsForced;\n      final String fwdNum = data.getStringExtra(FWD_NUMBER_EXTRA);\n\n      // TODO(iliat): It would be nice to load the current network setting for this and\n      // send it to the provider when it's config is invoked so it can use this as default\n      final int fwdNumTime = data.getIntExtra(FWD_NUMBER_TIME_EXTRA, 20);\n\n      if (DBG)\n        log(\n            \"onActivityResult: vm provider cfg result \"\n                + (fwdNum != null ? \"has\" : \" does not have\")\n                + \" forwarding number\");\n      saveVoiceMailAndForwardingNumber(\n          getCurrentVoicemailProviderKey(),\n          new VoiceMailProviderSettings(vmNum, fwdNum, fwdNumTime));\n      return;\n    }\n\n    if (resultCode != RESULT_OK) {\n      if (DBG) log(\"onActivityResult: contact picker result not OK.\");\n      return;\n    }\n\n    Cursor cursor = getContentResolver().query(data.getData(), NUM_PROJECTION, null, null, null);\n    if ((cursor == null) || (!cursor.moveToFirst())) {\n      if (DBG) log(\"onActivityResult: bad contact data, no results found.\");\n      return;\n    }\n\n    switch (requestCode) {\n      case VOICEMAIL_PREF_ID:\n        mSubMenuVoicemailSettings.onPickActivityResult(cursor.getString(0));\n        break;\n      default:\n        // TODO: may need exception here.\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2891, "initialization": ["Intent intent = getIntent()"], "initializationStart": [151], "initializationEnd": [162], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()"], "configurationStart": [212], "configurationEnd": [230], "guardCondition": "null!=intent", "guardType": "IF {", "guardExpressionStart": 168, "guardExpressionEnd": 187, "guardBlockStart": 168, "guardBlockEnd": 1672, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 309, "focalAPIEnd": 356, "followUpCheck": "str == null", "checkType": "IF", "followUpCheckExpressionStart": 366, "followUpCheckExpressionEnd": 394, "followUpCheckBlockStart": 366, "followUpCheckBlockEnd": 545, "use": ["new Intent(str)", "intent.getParcelableExtra(String)", "intent.getStringArrayExtra(String)", "intent.getStringArrayExtra(String)", "intent.getStringArrayExtra(String)", "intent.getStringExtra(String)", "intent.getBooleanExtra(String,boolean)", "intent.getStringArrayExtra(String)", "intent.getStringExtra(String)", "intent.getStringExtra(String)", "intent.getStringArrayExtra(String)"], "useStart": [569, 624, 765, 937, 1098, 1264, 1432, 1501, 1567, 1622, 1836], "useEnd": [596, 661, 811, 980, 1142, 1307, 1476, 1547, 1602, 1657, 1882], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/metova/metova-android-sdk/tree/master/metova-android-core/src/com/metova/android/activity/SendLogActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n\n    super.onCreate(savedInstanceState);\n\n    mSendIntent = null;\n\n    Intent intent = getIntent();\n    if (null != intent) {\n      String action = intent.getAction();\n      if (ACTION_SEND_LOG.equals(action)) {\n        String extraSendAction = intent.getStringExtra(EXTRA_SEND_INTENT_ACTION);\n        if (extraSendAction == null) {\n          Log.e(COLLECTOR_TAG, \"Quitting, EXTRA_SEND_INTENT_ACTION is not supplied\"); // $NON-NLS-1$\n          finish();\n          return;\n        }\n\n        mSendIntent = new Intent(extraSendAction);\n\n        Uri data = (Uri) intent.getParcelableExtra(EXTRA_DATA);\n        if (data != null) {\n          mSendIntent.setData(data);\n        }\n\n        String[] emails = intent.getStringArrayExtra(Intent.EXTRA_EMAIL);\n        if (emails != null) {\n          mSendIntent.putExtra(Intent.EXTRA_EMAIL, emails);\n        }\n\n        String[] ccs = intent.getStringArrayExtra(Intent.EXTRA_CC);\n        if (ccs != null) {\n          mSendIntent.putExtra(Intent.EXTRA_CC, ccs);\n        }\n\n        String[] bccs = intent.getStringArrayExtra(Intent.EXTRA_BCC);\n        if (bccs != null) {\n          mSendIntent.putExtra(Intent.EXTRA_BCC, bccs);\n        }\n\n        String subject = intent.getStringExtra(Intent.EXTRA_SUBJECT);\n        if (subject != null) {\n          mSendIntent.putExtra(Intent.EXTRA_SUBJECT, subject);\n        }\n\n        mShowUi = intent.getBooleanExtra(EXTRA_SHOW_UI, false);\n        mFilterSpecs = intent.getStringArrayExtra(EXTRA_FILTER_SPECS);\n        mFormat = intent.getStringExtra(EXTRA_FORMAT);\n        mBuffer = intent.getStringExtra(EXTRA_BUFFER);\n      }\n    }\n\n    if (null == mSendIntent) {\n      // standalone application\n      mShowUi = true;\n      mSendIntent = new Intent(Intent.ACTION_SEND);\n\n      String[] emails = intent.getStringArrayExtra(Intent.EXTRA_EMAIL);\n      if (emails != null) {\n        mSendIntent.putExtra(Intent.EXTRA_EMAIL, emails);\n      }\n\n      mSendIntent.putExtra(Intent.EXTRA_SUBJECT, \"Android device log\");\n      mSendIntent.setType(\"text/plain\"); // $NON-NLS-1$\n\n      mAdditonalInfo =\n          \"Log Collector version: 1.1.0\\n Device model: sdk\\n Firmware version: 1.5\\n Kernel version: 2.6.27-00110-g132305e\\nmikechan@cheetara #6\\nMon Feb 2 12:47:38 PST 2009\\n Build number: sdk-eng 1.5 CUPCAKE 148875 test-keys\\n\";\n      mFormat = \"time\";\n    }\n\n    if (mShowUi) {\n      mMainDialog =\n          new AlertDialog.Builder(this)\n              .setTitle(\"Log Collector\")\n              .setMessage(APP_MESSAGE)\n              .setPositiveButton(\n                  android.R.string.ok,\n                  new DialogInterface.OnClickListener() {\n\n                    public void onClick(DialogInterface dialog, int whichButton) {\n\n                      collectAndSendLog();\n                    }\n                  })\n              .setNegativeButton(\n                  android.R.string.cancel,\n                  new DialogInterface.OnClickListener() {\n\n                    public void onClick(DialogInterface dialog, int whichButton) {\n\n                      finish();\n                    }\n                  })\n              .show();\n    } else {\n      collectAndSendLog();\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2892, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 129, "focalAPIEnd": 171, "followUpCheck": "str != null && str.length() > 0", "checkType": "IF", "followUpCheckExpressionStart": 179, "followUpCheckExpressionEnd": 217, "followUpCheckBlockStart": 179, "followUpCheckBlockEnd": 360, "use": ["intent.getStringExtra(String)", "intent.getStringExtra(String)", "formatNumber(str)", "intent.getStringExtra(String)", "formatNumber(str)", "intent.getBundleExtra(String)", "intent.getBundleExtra(String)"], "useStart": [452, 768, 899, 1110, 1241, 1437, 3062], "useEnd": [494, 810, 934, 1152, 1276, 1479, 3104], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/magmapus/PGApp/tree/master/plugins/com.phonegap.plugins.barcodescanner/src/android/LibraryProject/src/com/google/zxing/client/android/encode/QRCodeEncoder.java", "rawCode": "  private void encodeQRCodeContents(Intent intent, String type) {\n    if (type.equals(Contents.Type.TEXT)) {\n      String data = intent.getStringExtra(Intents.Encode.DATA);\n      if (data != null && data.length() > 0) {\n        contents = data;\n        displayContents = data;\n        title = activity.getString(fakeR.getId(\"string\", \"contents_text\"));\n      }\n    } else if (type.equals(Contents.Type.EMAIL)) {\n      String data = ContactEncoder.trim(intent.getStringExtra(Intents.Encode.DATA));\n      if (data != null) {\n        contents = \"mailto:\" + data;\n        displayContents = data;\n        title = activity.getString(fakeR.getId(\"string\", \"contents_email\"));\n      }\n    } else if (type.equals(Contents.Type.PHONE)) {\n      String data = ContactEncoder.trim(intent.getStringExtra(Intents.Encode.DATA));\n      if (data != null) {\n        contents = \"tel:\" + data;\n        displayContents = PhoneNumberUtils.formatNumber(data);\n        title = activity.getString(fakeR.getId(\"string\", \"contents_phone\"));\n      }\n    } else if (type.equals(Contents.Type.SMS)) {\n      String data = ContactEncoder.trim(intent.getStringExtra(Intents.Encode.DATA));\n      if (data != null) {\n        contents = \"sms:\" + data;\n        displayContents = PhoneNumberUtils.formatNumber(data);\n        title = activity.getString(fakeR.getId(\"string\", \"contents_sms\"));\n      }\n    } else if (type.equals(Contents.Type.CONTACT)) {\n\n      Bundle bundle = intent.getBundleExtra(Intents.Encode.DATA);\n      if (bundle != null) {\n\n        String name = bundle.getString(ContactsContract.Intents.Insert.NAME);\n        String organization = bundle.getString(ContactsContract.Intents.Insert.COMPANY);\n        String address = bundle.getString(ContactsContract.Intents.Insert.POSTAL);\n        Collection<String> phones = new ArrayList<String>(Contents.PHONE_KEYS.length);\n        for (int x = 0; x < Contents.PHONE_KEYS.length; x++) {\n          phones.add(bundle.getString(Contents.PHONE_KEYS[x]));\n        }\n        Collection<String> emails = new ArrayList<String>(Contents.EMAIL_KEYS.length);\n        for (int x = 0; x < Contents.EMAIL_KEYS.length; x++) {\n          emails.add(bundle.getString(Contents.EMAIL_KEYS[x]));\n        }\n        String url = bundle.getString(Contents.URL_KEY);\n        String note = bundle.getString(Contents.NOTE_KEY);\n\n        ContactEncoder mecardEncoder =\n            useVCard ? new VCardContactEncoder() : new MECARDContactEncoder();\n        String[] encoded =\n            mecardEncoder.encode(\n                Collections.singleton(name),\n                organization,\n                Collections.singleton(address),\n                phones,\n                emails,\n                url,\n                note);\n        // Make sure we've encoded at least one field.\n        if (encoded[1].length() > 0) {\n          contents = encoded[0];\n          displayContents = encoded[1];\n          title = activity.getString(fakeR.getId(\"string\", \"contents_contact\"));\n        }\n      }\n\n    } else if (type.equals(Contents.Type.LOCATION)) {\n      Bundle bundle = intent.getBundleExtra(Intents.Encode.DATA);\n      if (bundle != null) {\n        // These must use Bundle.getFloat(), not getDouble(), it's part of the API.\n        float latitude = bundle.getFloat(\"LAT\", Float.MAX_VALUE);\n        float longitude = bundle.getFloat(\"LONG\", Float.MAX_VALUE);\n        if (latitude != Float.MAX_VALUE && longitude != Float.MAX_VALUE) {\n          contents = \"geo:\" + latitude + ',' + longitude;\n          displayContents = latitude + \",\" + longitude;\n          title = activity.getString(fakeR.getId(\"string\", \"contents_location\"));\n        }\n      }\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2893, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()"], "configurationStart": [460], "configurationEnd": [478], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 569, "focalAPIEnd": 616, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "purchaseStateChanged(Context,str,String)", "intent.getStringExtra(String)", "intent.getLongExtra(String,int)", "intent.getIntExtra(String,int)"], "useStart": [643, 696, 828, 1071, 1161], "useEnd": [688, 748, 873, 1119, 1244], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/qingyue/coolreader3/tree/master/android/src/org/coolreader/donations/BillingReceiver.java", "rawCode": "  /**\n   * This is the entry point for all asynchronous messages sent from Android Market to the\n   * application. This method forwards the messages on to the {@link BillingService}, which handles\n   * the communication back to Android Market. The {@link BillingService} also reports state changes\n   * back to the application through the {@link ResponseHandler}.\n   */\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    String action = intent.getAction();\n    if (Consts.ACTION_PURCHASE_STATE_CHANGED.equals(action)) {\n      String signedData = intent.getStringExtra(Consts.INAPP_SIGNED_DATA);\n      String signature = intent.getStringExtra(Consts.INAPP_SIGNATURE);\n      purchaseStateChanged(context, signedData, signature);\n    } else if (Consts.ACTION_NOTIFY.equals(action)) {\n      String notifyId = intent.getStringExtra(Consts.NOTIFICATION_ID);\n      if (Consts.DEBUG) {\n        Log.i(TAG, \"notifyId: \" + notifyId);\n      }\n      notify(context, notifyId);\n    } else if (Consts.ACTION_RESPONSE_CODE.equals(action)) {\n      long requestId = intent.getLongExtra(Consts.INAPP_REQUEST_ID, -1);\n      int responseCodeIndex =\n          intent.getIntExtra(Consts.INAPP_RESPONSE_CODE, ResponseCode.RESULT_ERROR.ordinal());\n      checkResponseCode(context, requestId, responseCodeIndex);\n    } else {\n      Log.w(TAG, \"unexpected action: \" + action);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2894, "initialization": ["Intent intent = getIntent()"], "initializationStart": [64], "initializationEnd": [75], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()"], "configurationStart": [131], "configurationEnd": [149], "guardCondition": "intent!=null", "guardType": "IF {", "guardExpressionStart": 81, "guardExpressionEnd": 100, "guardBlockStart": 81, "guardBlockEnd": 479, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 321, "focalAPIEnd": 354, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 364, "followUpCheckExpressionEnd": 383, "followUpCheckBlockStart": 364, "followUpCheckBlockEnd": 465, "use": ["findBook(*,str)"], "useStart": [403], "useEnd": [454], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/Shelves/src/org/curiouscreature/android/shelves/activity/BookDetailsActivity.java", "rawCode": "  private BooksStore.Book getBook() {\n    final Intent intent = getIntent();\n    if (intent != null) {\n      final String action = intent.getAction();\n      if (Intent.ACTION_VIEW.equals(action)) {\n        return BooksManager.findBook(getContentResolver(), intent.getData());\n      } else {\n        final String bookId = intent.getStringExtra(EXTRA_BOOK);\n        if (bookId != null) {\n          return BooksManager.findBook(getContentResolver(), bookId);\n        }\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2895, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()", "intent.getParcelableExtra(String)"], "configurationStart": [204, 311], "configurationEnd": [222, 366], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 525, "focalAPIEnd": 563, "followUpCheck": "str.equals(\"CONNECTED\")", "checkType": "IF", "followUpCheckExpressionStart": 705, "followUpCheckExpressionEnd": 735, "followUpCheckBlockStart": 705, "followUpCheckBlockEnd": 777, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zsol/Mms/tree/master/src/com/android/mms/transaction/MmsSystemEventReceiver.java", "rawCode": "  @Override\n  public void onReceive(Context context, Intent intent) {\n    if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {\n      Log.v(TAG, \"Intent received: \" + intent);\n    }\n\n    String action = intent.getAction();\n    if (action.equals(Mms.Intents.CONTENT_CHANGED_ACTION)) {\n      Uri changed = (Uri) intent.getParcelableExtra(Mms.Intents.DELETED_CONTENTS);\n      PduCache.getInstance().purge(changed);\n    } else if (action.equals(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED)) {\n      String state = intent.getStringExtra(Phone.STATE_KEY);\n\n      if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {\n        Log.v(TAG, \"ANY_DATA_STATE event received: \" + state);\n      }\n\n      if (state.equals(\"CONNECTED\")) {\n        wakeUpService(context);\n      }\n    } else if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {\n      // We should check whether there are unread incoming\n      // messages in the Inbox and then update the notification icon.\n      // Called on the UI thread so don't block.\n      MessagingNotification.nonBlockingUpdateNewMessageIndicator(context, false, false);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2896, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 129, "focalAPIEnd": 171, "followUpCheck": "str != null && str.length() > 0", "checkType": "IF", "followUpCheckExpressionStart": 179, "followUpCheckExpressionEnd": 217, "followUpCheckBlockStart": 179, "followUpCheckBlockEnd": 344, "use": ["intent.getBundleExtra(String)", "intent.getBundleExtra(String)"], "useStart": [421, 2027], "useEnd": [463, 2069], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kerpie/truTest/tree/master/src/com/google/zxing/client/android/encode/QRCodeEncoder.java", "rawCode": "  private void encodeQRCodeContents(Intent intent, String type) {\n    if (type.equals(Contents.Type.TEXT)) {\n      String data = intent.getStringExtra(Intents.Encode.DATA);\n      if (data != null && data.length() > 0) {\n        contents = data;\n        displayContents = data;\n        title = activity.getString(R.string.contents_text);\n      }\n    } else if (type.equals(Contents.Type.CONTACT)) {\n\n      Bundle bundle = intent.getBundleExtra(Intents.Encode.DATA);\n      if (bundle != null) {\n\n        String name = bundle.getString(ContactsContract.Intents.Insert.NAME);\n        String organization = bundle.getString(ContactsContract.Intents.Insert.COMPANY);\n        String address = bundle.getString(ContactsContract.Intents.Insert.POSTAL);\n        Collection<String> phones = new ArrayList<String>(Contents.PHONE_KEYS.length);\n        for (int x = 0; x < Contents.PHONE_KEYS.length; x++) {\n          phones.add(bundle.getString(Contents.PHONE_KEYS[x]));\n        }\n        Collection<String> emails = new ArrayList<String>(Contents.EMAIL_KEYS.length);\n        for (int x = 0; x < Contents.EMAIL_KEYS.length; x++) {\n          emails.add(bundle.getString(Contents.EMAIL_KEYS[x]));\n        }\n        String url = bundle.getString(Contents.URL_KEY);\n        String note = bundle.getString(Contents.NOTE_KEY);\n\n        ContactEncoder mecardEncoder =\n            useVCard ? new VCardContactEncoder() : new MECARDContactEncoder();\n        String[] encoded =\n            mecardEncoder.encode(\n                Collections.singleton(name),\n                organization,\n                Collections.singleton(address),\n                phones,\n                emails,\n                url,\n                note);\n        // Make sure we've encoded at least one field.\n        if (encoded[1].length() > 0) {\n          contents = encoded[0];\n          displayContents = encoded[1];\n          title = activity.getString(R.string.contents_text);\n        }\n      }\n\n    } else if (type.equals(Contents.Type.LOCATION)) {\n      Bundle bundle = intent.getBundleExtra(Intents.Encode.DATA);\n      if (bundle != null) {\n        // These must use Bundle.getFloat(), not getDouble(), it's part of the API.\n        float latitude = bundle.getFloat(\"LAT\", Float.MAX_VALUE);\n        float longitude = bundle.getFloat(\"LONG\", Float.MAX_VALUE);\n        if (latitude != Float.MAX_VALUE && longitude != Float.MAX_VALUE) {\n          contents = \"geo:\" + latitude + ',' + longitude;\n          displayContents = latitude + \",\" + longitude;\n          title = activity.getString(R.string.contents_text);\n        }\n      }\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2897, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()"], "configurationStart": [108], "configurationEnd": [126], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 216, "focalAPIEnd": 263, "followUpCheck": "str.equals(\"Off\")", "checkType": "IF", "followUpCheckExpressionStart": 407, "followUpCheckExpressionEnd": 433, "followUpCheckBlockStart": 407, "followUpCheckBlockEnd": 694, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aiQon/crowdshare/tree/master/src/org/servalproject/Control.java", "rawCode": "        @Override\n        public void onReceive(Context context, Intent intent) {\n          String action = intent.getAction();\n          if (action.equals(WiFiRadio.WIFI_MODE_ACTION)) {\n            String newMode = intent.getStringExtra(WiFiRadio.EXTRA_NEW_MODE);\n            radioOn = !(newMode == null || newMode.equals(\"Off\"));\n\n            Log.d(\"BatPhone\", \"Changing mode to \" + newMode);\n            if (newMode.equals(\"Off\"))\n              try {\n                Log.d(\"BatPhone\", \"Trying to stop servald\");\n                stopServalD();\n              } catch (ServalDFailureException e) {\n                Log.e(\"BatPhone\", \"Failed to stop servald: \" + e.toString(), e);\n              }\n\n            if (serviceRunning) {\n              new AsyncTask<Object, Object, Object>() {\n                @Override\n                protected Object doInBackground(Object... params) {\n                  modeChanged();\n                  return null;\n                }\n              }.execute();\n            }\n          }\n        }\n"}, {"dataset": "getStringExtra", "exampleID": 2898, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 573, "focalAPIEnd": 609, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "new IntentResult(str,String)"], "useStart": [645, 705], "useEnd": [688, 743], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mitmel/memory-traces/tree/master/src/com/google/zxing/integration/android/IntentIntegrator.java", "rawCode": "  /**\n   * Call this from your {@link Activity}'s {@link Activity#onActivityResult(int, int, Intent)}\n   * method.\n   *\n   * @return null if the event handled here was not related to {@link IntentIntegrator}, or else an\n   *     {@link IntentResult} containing the result of the scan. If the user cancelled scanning, the\n   *     fields will be null.\n   */\n  public static IntentResult parseActivityResult(int requestCode, int resultCode, Intent intent) {\n    if (requestCode == REQUEST_CODE) {\n      if (resultCode == Activity.RESULT_OK) {\n        final String contents = intent.getStringExtra(\"SCAN_RESULT\");\n        final String formatName = intent.getStringExtra(\"SCAN_RESULT_FORMAT\");\n        return new IntentResult(contents, formatName);\n      } else {\n        return new IntentResult(null, null);\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2899, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getIntExtra(String,int)"], "configurationStart": [207], "configurationEnd": [235], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 260, "focalAPIEnd": 294, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.getStringExtra(String)", "manageSuccessfullySentSMS(int,str,String)"], "useStart": [314, 652], "useEnd": [343, 698], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PaulEcoffet/Nex-yu-android/tree/master/Nexyu/src/org/nexyu/nexyuAndroid/SMSManagement/SMSSentChecker.java", "rawCode": "  /**\n   * @see android.content.BroadcastReceiver#onReceive(android.content.Context,\n   *     android.content.Intent)\n   */\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    int id = intent.getIntExtra(\"id\", -1);\n    String recipient = intent.getStringExtra(\"recipient\");\n    String body = intent.getStringExtra(\"body\");\n    if (id != -1 && getResultCode() == Activity.RESULT_OK) {\n      SMSList.append(id, SMSList.get(id, 0) + 1);\n      Log.i(\n          \"SMSSentChecker\",\n          id + \": \" + SMSList.get(id) + \" out of \" + intent.getIntExtra(\"size\", 0));\n      if (SMSList.get(id) >= intent.getIntExtra(\"size\", 1)) {\n        manageSuccessfullySentSMS(id, recipient, body);\n      }\n    } else if (id != -1) {\n      manageFailedSMSSending(id);\n    }\n  }\n"}, {"dataset": "getStringExtra", "exampleID": 2900, "initialization": ["Intent intent = getIntent()"], "initializationStart": [1455], "initializationEnd": [1466], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.getAction()", "intent.getDataString()", "intent.getIntExtra(String,int)", "intent.getIntExtra(String,int)"], "configurationStart": [1922, 1968, 2374, 2440], "configurationEnd": [1940, 1990, 2415, 2482], "guardCondition": "intent!=null", "guardType": "IF {", "guardExpressionStart": 1877, "guardExpressionEnd": 1896, "guardBlockStart": 1877, "guardBlockEnd": 3830, "focalAPI": "str = intent.getStringExtra(name)", "focalAPIStart": 2648, "focalAPIEnd": 2698, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 2708, "followUpCheckExpressionEnd": 2740, "followUpCheckBlockStart": 2708, "followUpCheckBlockEnd": 2803, "use": ["TextView.setText(str)", "intent.getStringExtra(String)"], "useStart": [2753, 3774], "useEnd": [2792, 3823], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/magmapus/PGApp/tree/master/plugins/com.phonegap.plugins.barcodescanner/src/android/LibraryProject/src/com/google/zxing/client/android/CaptureActivity.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n\n    // CameraManager must be initialized here, not in onCreate(). This is necessary because we don't\n    // want to open the camera driver and measure the screen size if we're going to show the help on\n    // first launch. That led to bugs where the scanning rectangle was the wrong size and partially\n    // off screen.\n    cameraManager = new CameraManager(getApplication());\n\n    viewfinderView = (ViewfinderView) findViewById(fakeR.getId(\"id\", \"viewfinder_view\"));\n    viewfinderView.setCameraManager(cameraManager);\n\n    resultView = findViewById(fakeR.getId(\"id\", \"result_view\"));\n    statusView = (TextView) findViewById(fakeR.getId(\"id\", \"status_view\"));\n\n    handler = null;\n    lastResult = null;\n\n    resetStatusView();\n\n    SurfaceView surfaceView = (SurfaceView) findViewById(fakeR.getId(\"id\", \"preview_view\"));\n    SurfaceHolder surfaceHolder = surfaceView.getHolder();\n    if (hasSurface) {\n      // The activity was paused but not stopped, so the surface still exists. Therefore\n      // surfaceCreated() won't be called, so init the camera here.\n      initCamera(surfaceHolder);\n    } else {\n      // Install the callback and wait for surfaceCreated() to init the camera.\n      surfaceHolder.addCallback(this);\n      surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n    }\n\n    beepManager.updatePrefs();\n\n    inactivityTimer.onResume();\n\n    Intent intent = getIntent();\n\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n    copyToClipboard =\n        prefs.getBoolean(PreferencesActivity.KEY_COPY_TO_CLIPBOARD, true)\n            && (intent == null || intent.getBooleanExtra(Intents.Scan.SAVE_HISTORY, true));\n\n    // source = IntentSource.NONE;\n    source = IntentSource.NATIVE_APP_INTENT;\n    decodeFormats = null;\n    characterSet = null;\n\n    if (intent != null) {\n\n      String action = intent.getAction();\n      String dataString = intent.getDataString();\n\n      if (Intents.Scan.ACTION.equals(action)) {\n\n        // Scan the formats the intent requested, and return the result to the calling activity.\n        source = IntentSource.NATIVE_APP_INTENT;\n        decodeFormats = DecodeFormatManager.parseDecodeFormats(intent);\n\n        if (intent.hasExtra(Intents.Scan.WIDTH) && intent.hasExtra(Intents.Scan.HEIGHT)) {\n          int width = intent.getIntExtra(Intents.Scan.WIDTH, 0);\n          int height = intent.getIntExtra(Intents.Scan.HEIGHT, 0);\n          if (width > 0 && height > 0) {\n            cameraManager.setManualFramingRect(width, height);\n          }\n        }\n\n        String customPromptMessage = intent.getStringExtra(Intents.Scan.PROMPT_MESSAGE);\n        if (customPromptMessage != null) {\n          statusView.setText(customPromptMessage);\n        }\n\n      } else if (dataString != null\n          && dataString.contains(PRODUCT_SEARCH_URL_PREFIX)\n          && dataString.contains(PRODUCT_SEARCH_URL_SUFFIX)) {\n\n        // Scan only products and send the result to mobile Product Search.\n        source = IntentSource.PRODUCT_SEARCH_LINK;\n        sourceUrl = dataString;\n        decodeFormats = DecodeFormatManager.PRODUCT_FORMATS;\n\n      } else if (isZXingURL(dataString)) {\n\n        // Scan formats requested in query string (all formats if none specified).\n        // If a return URL is specified, send the results there. Otherwise, handle it ourselves.\n        source = IntentSource.ZXING_LINK;\n        sourceUrl = dataString;\n        Uri inputUri = Uri.parse(sourceUrl);\n        returnUrlTemplate = inputUri.getQueryParameter(RETURN_URL_PARAM);\n        returnRaw = inputUri.getQueryParameter(RAW_PARAM) != null;\n        decodeFormats = DecodeFormatManager.parseDecodeFormats(inputUri);\n      }\n\n      characterSet = intent.getStringExtra(Intents.Scan.CHARACTER_SET);\n    }\n  }\n"}]