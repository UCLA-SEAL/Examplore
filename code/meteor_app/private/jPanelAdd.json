[{"dataset": "jPanelAdd", "exampleID": 3901, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel()"], "initializationStart": [449, 481], "initializationEnd": [461, 493], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "comp.setText(String)", "comp.setFont(Font)"], "configurationStart": [1600, 1697, 1733], "configurationEnd": [1657, 1725, 1787], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1795, "focalAPIEnd": 1818, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JDateChooser)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [1920, 1955], "useEnd": [1943, 2000], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tloehr/Offene-Pflege.de/tree/master/src/op/care/nursingprocess/PnlEval.java", "rawCode": "  /**\n   * This method is called from within the constructor to initialize the form. WARNING: Do NOT\n   * modify this code. The content of this method is always regenerated by the PrinterForm Editor.\n   */\n  // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n  private void initComponents() {\n    pnlReason = new JPanel();\n    jScrollPane1 = new JScrollPane();\n    txtBemerkung = new JTextArea();\n    panel2 = new JPanel();\n    lblNextEval = new JLabel();\n    jdcNextEval = new JDateChooser();\n    panel1 = new JPanel();\n    btnOK = new JButton();\n\n    // ======== this ========\n    setLayout(\n        new FormLayout(\n            \"default, default:grow, $lcgap, default\",\n            \"default, $lgap, fill:default:grow, 3*($lgap, default)\"));\n\n    // ======== pnlReason ========\n    {\n      pnlReason.setBorder(\n          new TitledBorder(\n              null,\n              \"text\",\n              TitledBorder.LEADING,\n              TitledBorder.DEFAULT_POSITION,\n              new Font(\"Arial\", Font.PLAIN, 14)));\n      pnlReason.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n      pnlReason.setLayout(new BoxLayout(pnlReason, BoxLayout.X_AXIS));\n\n      // ======== jScrollPane1 ========\n      {\n\n        // ---- txtBemerkung ----\n        txtBemerkung.setColumns(20);\n        txtBemerkung.setRows(5);\n        txtBemerkung.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n        jScrollPane1.setViewportView(txtBemerkung);\n      }\n      pnlReason.add(jScrollPane1);\n    }\n    add(pnlReason, CC.xy(2, 3, CC.FILL, CC.FILL));\n\n    // ======== panel2 ========\n    {\n      panel2.setLayout(new BoxLayout(panel2, BoxLayout.X_AXIS));\n\n      // ---- lblNextEval ----\n      lblNextEval.setText(\"text \");\n      lblNextEval.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n      panel2.add(lblNextEval);\n\n      // ---- jdcNextEval ----\n      jdcNextEval.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n      panel2.add(jdcNextEval);\n    }\n    add(panel2, CC.xy(2, 5, CC.FILL, CC.DEFAULT));\n\n    // ======== panel1 ========\n    {\n      panel1.setLayout(new BoxLayout(panel1, BoxLayout.X_AXIS));\n\n      // ---- btnOK ----\n      btnOK.setIcon(new ImageIcon(getClass().getResource(\"/artwork/22x22/apply.png\")));\n      btnOK.setText(null);\n      btnOK.addActionListener(e -> btnOKActionPerformed(e));\n      panel1.add(btnOK);\n    }\n    add(panel1, CC.xy(2, 7, CC.RIGHT, CC.DEFAULT));\n  } // </editor-fold>//GEN-END:initComponents\n"}, {"dataset": "jPanelAdd", "exampleID": 3902, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(String)"], "initializationStart": [262, 558], "initializationEnd": [294, 578], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 656, "focalAPIEnd": 672, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JLabel)", "jPanel.add(JTextField)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [680, 709, 733, 910], "useEnd": [701, 725, 754, 953], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/last-gpl-version-before-asl-switch/src/lib/com/izforge/izpack/installer/WebAccessor.java", "rawCode": "  /** Only to be called after an initial error has indicated a connection problem */\n  private JPanel getProxyPanel() {\n    if (proxyPanel == null) {\n      proxyPanel = new JPanel(new BorderLayout(5, 5));\n\n      errorLabel = new JLabel();\n\n      JPanel fields = new JPanel(new GridLayout(2, 2));\n      String h = (String) System.getProperties().get(\"proxyHost\");\n      String p = (String) System.getProperties().get(\"proxyPort\");\n      hostField = new JTextField(h != null ? h : \"\");\n      portField = new JTextField(p != null ? p : \"\");\n      JLabel host = new JLabel(\"Host: \"); // TODO: i18n\n      JLabel port = new JLabel(\"Port: \"); // TODO: i18n\n      fields.add(host);\n      fields.add(hostField);\n      fields.add(port);\n      fields.add(portField);\n\n      JLabel exampleLabel = new JLabel(\"e.g. host=\\\"gatekeeper.example.com\\\" port=\\\"80\\\"\");\n\n      proxyPanel.add(errorLabel, BorderLayout.NORTH);\n      proxyPanel.add(fields, BorderLayout.CENTER);\n      proxyPanel.add(exampleLabel, BorderLayout.SOUTH);\n    }\n    proxyPanel.validate();\n\n    return proxyPanel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3903, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [260, 334], "initializationEnd": [272, 367], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setBackground(Color)", "comp.setFont(Font)"], "configurationStart": [278, 373], "configurationEnd": [315, 417], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 423, "focalAPIEnd": 449, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jPanel,GridBagConstraints)"], "useStart": [781], "useEnd": [833], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OATVAF/GestionProdBEPN/tree/master/GestionProdPN-dev/src/ui/FenetreParametreAffichage.java", "rawCode": "  /** procedure qui construit le contentPane */\n  private void constructionContentPane() {\n\n    // initialisation du contentPane\n    contentPane = new JPanel();\n    contentPane.setLayout(new BorderLayout());\n\n    // construction du headerPane\n    headerPane = new JPanel();\n    headerPane.setBackground(Color.WHITE);\n    titreLabel = new JLabel(\"Parametre Affichage\");\n    titreLabel.setFont(new Font(\"arial\", 1, 20));\n    headerPane.add(titreLabel);\n\n    // construction du centerPane\n    constructionCenterPane();\n\n    // construction du footerPane\n    footerPane = new JPanel();\n    footerPane.setBackground(Color.WHITE);\n    applyBtn = new JButton(\"Appliquer\");\n    applyBtn.addActionListener(this);\n    footerPane.add(applyBtn);\n\n    // ajout des composant au contentPane\n    contentPane.add(headerPane, BorderLayout.PAGE_START);\n    contentPane.add(centerPane, BorderLayout.CENTER);\n    contentPane.add(footerPane, BorderLayout.PAGE_END);\n  } // fin constructionContentPane()\n"}, {"dataset": "jPanelAdd", "exampleID": 3904, "initialization": ["JPanel jPanel = new Box(*)"], "initializationStart": [2521], "initializationEnd": [2546], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)"], "configurationStart": [2552, 2583, 2629], "configurationEnd": [2577, 2623, 2684], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 2690, "focalAPIEnd": 2715, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(Box)", "jPanel.add(JLabel)", "jPanel.add(JTextField)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [2721, 2751, 2797, 2858, 2886, 2912, 2937], "useEnd": [2745, 2791, 2852, 2880, 2906, 2931, 2975], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mortenthansen/tinyos/tree/master/apps/MultihopOscilloscope/java/Window.java", "rawCode": "  void setup() {\n    JPanel main = new JPanel(new BorderLayout());\n\n    main.setMinimumSize(new Dimension(500, 250));\n    main.setPreferredSize(new Dimension(800, 400));\n\n    // Three panels: mote list, graph, controls\n    moteListModel = new MoteTableModel();\n    JTable moteList = new JTable(moteListModel);\n    moteList.setDefaultRenderer(Color.class, new MoteColor());\n    moteList.setDefaultEditor(Color.class, new ColorCellEditor(\"Pick Mote Color\"));\n    moteList.setPreferredScrollableViewportSize(new Dimension(100, 400));\n    JScrollPane motePanel = new JScrollPane();\n    motePanel.getViewport().add(moteList, null);\n    main.add(motePanel, BorderLayout.WEST);\n\n    graph = new Graph(this);\n    main.add(graph, BorderLayout.CENTER);\n\n    // Controls. Organised using box layouts.\n\n    // Sample period.\n    JLabel sampleLabel = makeLabel(\"Sample period (ms):\", JLabel.RIGHT);\n    sampleText =\n        makeTextField(\n            6,\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                setSamplePeriod();\n              }\n            });\n    updateSamplePeriod();\n\n    // Clear data.\n    JButton clearButton =\n        makeButton(\n            \"Clear data\",\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                clearData();\n              }\n            });\n\n    // Adjust X-axis zoom.\n    Box xControl = new Box(BoxLayout.Y_AXIS);\n    xLabel = makeLabel(\"\", JLabel.CENTER);\n    final JSlider xSlider = new JSlider(JSlider.HORIZONTAL, 0, 8, graph.scale);\n    Hashtable xTable = new Hashtable();\n    for (int i = 0; i <= 8; i += 2)\n      xTable.put(new Integer(i), makeSmallLabel(\"\" + (Graph.MIN_WIDTH << i), JLabel.CENTER));\n    xSlider.setLabelTable(xTable);\n    xSlider.setPaintLabels(true);\n    graph.updateXLabel();\n    graph.setScale(graph.scale);\n    xSlider.addChangeListener(\n        new ChangeListener() {\n          public void stateChanged(ChangeEvent e) {\n            // if (!xSlider.getValueIsAdjusting())\n            graph.setScale((int) xSlider.getValue());\n          }\n        });\n    xControl.add(xLabel);\n    xControl.add(xSlider);\n\n    // Adjust Y-axis range.\n    JLabel yLabel = makeLabel(\"Y:\", JLabel.RIGHT);\n    yText =\n        makeTextField(\n            12,\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                setYAxis();\n              }\n            });\n    yText.setText(graph.gy0 + \" - \" + graph.gy1);\n\n    Box controls = new Box(BoxLayout.X_AXIS);\n    controls.add(clearButton);\n    controls.add(Box.createHorizontalGlue());\n    controls.add(Box.createRigidArea(new Dimension(20, 0)));\n    controls.add(sampleLabel);\n    controls.add(sampleText);\n    controls.add(Box.createHorizontalGlue());\n    controls.add(Box.createRigidArea(new Dimension(20, 0)));\n    controls.add(xControl);\n    controls.add(yLabel);\n    controls.add(yText);\n    main.add(controls, BorderLayout.SOUTH);\n\n    // The frame part\n    frame = new JFrame(\"Oscilloscope\");\n    frame.setSize(main.getPreferredSize());\n    frame.getContentPane().add(main);\n    frame.setVisible(true);\n    frame.addWindowListener(\n        new WindowAdapter() {\n          public void windowClosing(WindowEvent e) {\n            System.exit(0);\n          }\n        });\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3905, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(String,*)"], "initializationStart": [87, 263], "initializationEnd": [119, 305], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1132, "focalAPIEnd": 1160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JFormattedTextField)", "jPanel.add(JLabel)", "jPanel.add(JFormattedTextField)", "jPanel.add(JLabel)", "jPanel.add(JRadioButton)", "jPanel.add(JRadioButton)"], "useStart": [1166, 1204, 1241, 1282, 1316, 1361], "useEnd": [1198, 1235, 1276, 1310, 1355, 1399], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/propra12-orga/gruppe04/tree/master/DynamiteBoy/src/de/propra12/gruppe04/dynamiteboy/Menu/EditorMenu.java", "rawCode": "  public void initGUI() {\n    // The panels (same order as displayed)\n    panelInput = new JPanel(new GridLayout(0, 2));\n    panelButton = new JPanel(new GridLayout(1, 1));\n    // Now the GUI Elements for the different Settings:\n    // mapname\n    labelMapname = new JLabel(\"Name der Karte:\", JLabel.LEFT);\n    textFieldMapname = new JFormattedTextField();\n    mapname = \"default\";\n    // author name\n    labelAuthorname = new JLabel(\"Name des Autors:\", JLabel.LEFT);\n    textFieldAuthorname = new JFormattedTextField();\n    authorname = \"default\";\n    // map type\n    labelMaptype = new JLabel(\"Maptyp:\", JLabel.LEFT);\n    buttonGroupMapType = new ButtonGroup();\n    radioButtonSingleplayer = new JRadioButton(\"Singleplayer\");\n    radioButtonSingleplayer.setSelected(true);\n    radioButtonMultiplayer = new JRadioButton(\"Multiplayer\");\n    buttonGroupMapType.add(radioButtonSingleplayer);\n    buttonGroupMapType.add(radioButtonMultiplayer);\n    // Buttons and Dialogs\n    buttonBackToMain = new JButton(\"Zurück zum Hauptmenü\");\n    buttonStartEditor = new JButton(\"Starte Editor\");\n    // Add the GUI-Elements to their JPanels\n    panelInput.add(labelMapname);\n    panelInput.add(textFieldMapname);\n    panelInput.add(labelAuthorname);\n    panelInput.add(textFieldAuthorname);\n    panelInput.add(labelMaptype);\n    panelInput.add(radioButtonSingleplayer);\n    panelInput.add(radioButtonMultiplayer);\n    panelButton.add(buttonBackToMain);\n    buttonBackToMain.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            panelButton.setVisible(false);\n            panelInput.setVisible(false);\n            MainMenu m = new MainMenu(frame);\n          }\n        });\n    panelButton.add(buttonStartEditor);\n    buttonStartEditor.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            // process user input\n            if (inputIsValid()) {\n              // get user input\n              mapname = textFieldMapname.getText();\n              authorname = textFieldAuthorname.getText();\n              mapType = getMapTypeDecision();\n              // open Editor\n              panelButton.setVisible(false);\n              panelInput.setVisible(false);\n              Editor editor = new Editor(frame, mapname, authorname, mapType);\n              frame.add(editor);\n              editor.setVisible(true);\n            }\n          }\n        });\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3906, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(String)"], "initializationStart": [101, 152], "initializationEnd": [131, 168], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setPreferredSize(Dimension)"], "configurationStart": [174], "configurationEnd": [238], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(name,comp)", "focalAPIStart": 244, "focalAPIEnd": 283, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(String,JLabel)", "JComponent.add(jPanel)"], "useStart": [390, 437], "useEnd": [431, 456], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chianhla/contiki-stm32w/tree/master/tools/cooja/apps/serial_socket/java/SerialSocketServer.java", "rawCode": "  private JLabel configureLabel(JComponent pane, String desc, String value) {\n    JPanel smallPane = new JPanel(new BorderLayout());\n    JLabel label = new JLabel(desc);\n    label.setPreferredSize(new Dimension(LABEL_WIDTH, LABEL_HEIGHT));\n    smallPane.add(BorderLayout.WEST, label);\n    label = new JLabel(value);\n    label.setPreferredSize(new Dimension(LABEL_WIDTH, LABEL_HEIGHT));\n    smallPane.add(BorderLayout.CENTER, label);\n    pane.add(smallPane);\n    return label;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3907, "initialization": ["JPanel jPanel = new Box(*)"], "initializationStart": [2521], "initializationEnd": [2546], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)"], "configurationStart": [2552, 2583, 2629], "configurationEnd": [2577, 2623, 2684], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 2690, "focalAPIEnd": 2715, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(Box)", "jPanel.add(JLabel)", "jPanel.add(JTextField)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [2721, 2751, 2797, 2858, 2886, 2912, 2937], "useEnd": [2745, 2791, 2852, 2880, 2906, 2931, 2975], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rriley/tinyos-2.x.svn/tree/master/apps/MultihopOscilloscopeLqi/java/Window.java", "rawCode": "  void setup() {\n    JPanel main = new JPanel(new BorderLayout());\n\n    main.setMinimumSize(new Dimension(500, 250));\n    main.setPreferredSize(new Dimension(800, 400));\n\n    // Three panels: mote list, graph, controls\n    moteListModel = new MoteTableModel();\n    JTable moteList = new JTable(moteListModel);\n    moteList.setDefaultRenderer(Color.class, new MoteColor());\n    moteList.setDefaultEditor(Color.class, new ColorCellEditor(\"Pick Mote Color\"));\n    moteList.setPreferredScrollableViewportSize(new Dimension(100, 400));\n    JScrollPane motePanel = new JScrollPane();\n    motePanel.getViewport().add(moteList, null);\n    main.add(motePanel, BorderLayout.WEST);\n\n    graph = new Graph(this);\n    main.add(graph, BorderLayout.CENTER);\n\n    // Controls. Organised using box layouts.\n\n    // Sample period.\n    JLabel sampleLabel = makeLabel(\"Sample period (ms):\", JLabel.RIGHT);\n    sampleText =\n        makeTextField(\n            6,\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                setSamplePeriod();\n              }\n            });\n    updateSamplePeriod();\n\n    // Clear data.\n    JButton clearButton =\n        makeButton(\n            \"Clear data\",\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                clearData();\n              }\n            });\n\n    // Adjust X-axis zoom.\n    Box xControl = new Box(BoxLayout.Y_AXIS);\n    xLabel = makeLabel(\"\", JLabel.CENTER);\n    final JSlider xSlider = new JSlider(JSlider.HORIZONTAL, 0, 8, graph.scale);\n    Hashtable xTable = new Hashtable();\n    for (int i = 0; i <= 8; i += 2)\n      xTable.put(new Integer(i), makeSmallLabel(\"\" + (Graph.MIN_WIDTH << i), JLabel.CENTER));\n    xSlider.setLabelTable(xTable);\n    xSlider.setPaintLabels(true);\n    graph.updateXLabel();\n    graph.setScale(graph.scale);\n    xSlider.addChangeListener(\n        new ChangeListener() {\n          public void stateChanged(ChangeEvent e) {\n            // if (!xSlider.getValueIsAdjusting())\n            graph.setScale((int) xSlider.getValue());\n          }\n        });\n    xControl.add(xLabel);\n    xControl.add(xSlider);\n\n    // Adjust Y-axis range.\n    JLabel yLabel = makeLabel(\"Y:\", JLabel.RIGHT);\n    yText =\n        makeTextField(\n            12,\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                setYAxis();\n              }\n            });\n    yText.setText(graph.gy0 + \" - \" + graph.gy1);\n\n    Box controls = new Box(BoxLayout.X_AXIS);\n    controls.add(clearButton);\n    controls.add(Box.createHorizontalGlue());\n    controls.add(Box.createRigidArea(new Dimension(20, 0)));\n    controls.add(sampleLabel);\n    controls.add(sampleText);\n    controls.add(Box.createHorizontalGlue());\n    controls.add(Box.createRigidArea(new Dimension(20, 0)));\n    controls.add(xControl);\n    controls.add(yLabel);\n    controls.add(yText);\n    main.add(controls, BorderLayout.SOUTH);\n\n    // The frame part\n    frame = new JFrame(\"Oscilloscope\");\n    frame.setSize(main.getPreferredSize());\n    frame.getContentPane().add(main);\n    frame.setVisible(true);\n    frame.addWindowListener(\n        new WindowAdapter() {\n          public void windowClosing(WindowEvent e) {\n            System.exit(0);\n          }\n        });\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3908, "initialization": ["JPanel jPanel = new JPanel()"], "initializationStart": [4552], "initializationEnd": [4564], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setBorder(Border)"], "configurationStart": [4570], "configurationEnd": [4803], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 4819, "focalAPIEnd": 4849, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jPanel,GridBagConstraints)"], "useStart": [5033], "useEnd": [5093], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cismet/cids-server/tree/master/src/main/java/Sirius/server/registry/monitor/RegistryMonitor.java", "rawCode": "  /** Funktion zum initialisieren des Layouts.* */\n  private void initMainPanel() {\n    // es wird versucht die Tabellen zu initialisiern. Ist kein CentralServer vorhanden,\n    // k\\u00F6nnen die Variablen call-, local- und protocolServer nicht initialisiert werden,\n    // Exception wird ausgeworfen. Dann wird ein TableModel ohne Parameter zugewiesen\n    try {\n      callServerTable =\n          new JTable(\n              new MonitorTableModel(\n                  MonitorTableModel.convertToMatrix(callServer), columnnamesForServer));\n      localServerTable =\n          new JTable(\n              new MonitorTableModel(\n                  MonitorTableModel.convertToMatrix(localServer), columnnamesForServer));\n      protocolServerTable =\n          new JTable(\n              new MonitorTableModel(\n                  MonitorTableModel.convertToMatrix(protocolServer), columnnamesForServer));\n      // translServerTable = new JTable(new\n      // MonitorTableModel(MonitorTableModel.convertToMatrix(translServer),columnnamesForServer));\n      userTable =\n          new JTable(\n              new MonitorTableModel(MonitorTableModel.convertToMatrix(users), columnnamesForUser));\n    } catch (IllegalArgumentException e) {\n      callServerTable = new JTable(new MonitorTableModel());\n      localServerTable = new JTable(new MonitorTableModel());\n      protocolServerTable = new JTable(new MonitorTableModel());\n      // translServerTable = new JTable (new MonitorTableModel());\n      userTable = new JTable(new MonitorTableModel());\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.err.println(\"initmainPanel\"); // NOI18N\n    }\n\n    // JTabbedPane erzeugen und Tabellen hinzufuegen\n    final JTabbedPane allServerPane = new JTabbedPane();\n    allServerPane.add(\n        org.openide.util.NbBundle.getMessage(\n            RegistryMonitor.class,\n            \"RegistryMonitor.initMainPanel().allServerPane.tab1.title\"), // NOI18N\n        new JScrollPane(localServerTable));\n    allServerPane.add(\n        org.openide.util.NbBundle.getMessage(\n            RegistryMonitor.class,\n            \"RegistryMonitor.initMainPanel().allServerPane.tab2.title\"), // NOI18N\n        new JScrollPane(callServerTable));\n    // allServerPane.add(\"TranslationServers\", new JScrollPane(translServerTable));\n    allServerPane.add(\n        org.openide.util.NbBundle.getMessage(\n            RegistryMonitor.class,\n            \"RegistryMonitor.initMainPanel().allServerPane.tab3.title\"), // NOI18N\n        new JScrollPane(protocolServerTable));\n    allServerPane.add(\n        org.openide.util.NbBundle.getMessage(\n            RegistryMonitor.class,\n            \"RegistryMonitor.initMainPanel().allServerPane.tab4.title\"), // NOI18N\n        new JScrollPane(userTable));\n\n    // UpdateButton fuer manuelles Update\n    final JButton updateButton =\n        new JButton(\n            org.openide.util.NbBundle.getMessage(\n                RegistryMonitor.class,\n                \"RegistryMonitor.initMainPanel().updateButton.text\")); // NOI18N\n    updateButton.addActionListener(new MonitorUpdateListener(this));\n\n    // Panel fuer updateIntervall Einstellungen\n    final JPanel timePanel = new JPanel();\n    final ButtonGroup buttonGroup = new ButtonGroup();\n    final JRadioButton oneMin =\n        (new JRadioButton(\n            org.openide.util.NbBundle.getMessage(\n                RegistryMonitor.class, \"RegistryMonitor.initMainPanel().oneMin.text\"))); // NOI18N\n    final JRadioButton fiveMin =\n        new JRadioButton(\n            org.openide.util.NbBundle.getMessage(\n                RegistryMonitor.class, \"RegistryMonitor.initMainPanel().fiveMin.text\")); // NOI18N\n    final JRadioButton tenMin =\n        new JRadioButton(\n            org.openide.util.NbBundle.getMessage(\n                RegistryMonitor.class, \"RegistryMonitor.initMainPanel().tenMin.text\")); // NOI18N\n    final MonitorIntervallListener il = new MonitorIntervallListener(this);\n    oneMin.addActionListener(il);\n    fiveMin.addActionListener(il);\n    tenMin.addActionListener(il);\n    oneMin.setSelected(true);\n\n    buttonGroup.add(oneMin);\n    buttonGroup.add(fiveMin);\n    buttonGroup.add(tenMin);\n\n    timePanel.add(oneMin);\n    timePanel.add(fiveMin);\n    timePanel.add(tenMin);\n    timePanel.setBorder(\n        BorderFactory.createTitledBorder(\n            org.openide.util.NbBundle.getMessage(\n                RegistryMonitor.class,\n                \"RegistryMonitor.initMainPanel().timePanel.border.title\"))); // NOI18N\n\n    // MessageLabel und MessagePanel\n    final JPanel messagePanel = new JPanel();\n    messagePanel.setBorder(\n        BorderFactory.createTitledBorder(\n            org.openide.util.NbBundle.getMessage(\n                RegistryMonitor.class,\n                \"RegistryMonitor.initMainPanel().messagePanel.border.title\"))); // NOI18N\n    messagePanel.add(messageLabel);\n\n    final JPanel buttonAndMessagePanel = new JPanel();\n    buttonAndMessagePanel.setLayout(new BorderLayout());\n    buttonAndMessagePanel.add(updateButton, BorderLayout.NORTH);\n    buttonAndMessagePanel.add(messagePanel, BorderLayout.CENTER);\n\n    // HauptPaneleistellungen\n    setLayout(new BorderLayout());\n    setBorder(BorderFactory.createTitledBorder(panelHeader));\n    add(timePanel, BorderLayout.NORTH);\n    add(allServerPane, BorderLayout.CENTER);\n    add(buttonAndMessagePanel, BorderLayout.SOUTH);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3909, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel()"], "initializationStart": [62, 168], "initializationEnd": [74, 180], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "comp.setText(String)"], "configurationStart": [80, 186], "configurationEnd": [135, 256], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 262, "focalAPIEnd": 283, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.putClientProperty(String,Observer)"], "useStart": [631], "useEnd": [676], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anhquang/contiki/tree/master/tools/cooja/java/se/sics/cooja/interfaces/Mote2MoteRelations.java", "rawCode": "  public JPanel getInterfaceVisualizer() {\n    JPanel panel = new JPanel();\n    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));\n\n    final JLabel countLabel = new JLabel();\n    countLabel.setText(\"Mote has \" + relations.size() + \" mote relations\");\n    panel.add(countLabel);\n\n    Observer observer;\n    this.addObserver(\n        observer =\n            new Observer() {\n              public void update(Observable obs, Object obj) {\n                countLabel.setText(\"Mote has \" + relations.size() + \" mote relations\");\n              }\n            });\n\n    // Saving observer reference for releaseInterfaceVisualizer\n    panel.putClientProperty(\"intf_obs\", observer);\n\n    return panel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3910, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [47, 510], "initializationEnd": [59, 534], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "jPanel.setPreferredSize(Dimension)", "comp.setBounds(int,int,int,int)"], "configurationStart": [65, 97, 540], "configurationEnd": [91, 181, 573], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 579, "focalAPIEnd": 601, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JTextField)", "jPanel.add(JComboBox<String>)", "jPanel.updateUI()"], "useStart": [698, 810, 1031, 1202, 1445, 1493], "useEnd": [720, 832, 1052, 1225, 1466, 1514], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Andi17/FallClient/tree/master/FallstudieClient/src/gui/Hauptseite.java", "rawCode": "  private void rowmachen() {\n\n    panelTable = new JPanel();\n    panelTable.setLayout(null);\n    panelTable.setPreferredSize(new Dimension(460, 50 + strichelartenListe.size() * 25));\n    scrollTable = new JScrollPane(panelTable);\n\n    scrollTable.setBounds(10, 65, 490, 219);\n    panelStricheln.add(scrollTable);\n\n    int zaehler = 0;\n    listeStrichanzahl = new ArrayList<JTextField>();\n    listeStricharten = new ArrayList<JLabel>();\n    listeWoche = new ArrayList<JComboBox<String>>();\n\n    JLabel header = new JLabel(\"Strichart:\");\n    header.setBounds(10, 10, 100, 20);\n    panelTable.add(header);\n\n    header = new JLabel(\"Anzahl neuer Striche:\");\n    header.setBounds(140, 10, 200, 20);\n    panelTable.add(header);\n\n    header = new JLabel(\"Kalenderwoche:\");\n    header.setBounds(300, 10, 100, 20);\n    panelTable.add(header);\n\n    for (ComStrichart s : strichelartenListe) {\n\n      JLabel label = new JLabel(s.getStrichBez());\n      label.setBounds(10, 50 + 25 * zaehler, 100, 20);\n      listeStricharten.add(label);\n      panelTable.add(label);\n\n      JTextField eingabe = new JTextField();\n      eingabe.setBounds(150, 50 + 25 * zaehler, 100, 20);\n      listeStrichanzahl.add(eingabe);\n      panelTable.add(eingabe);\n\n      String[] wocheAuswahl = {\"aktuelle\", \"vorherige\"};\n      JComboBox<String> woche = new JComboBox<String>(wocheAuswahl);\n      woche.setBounds(300, 50 + 25 * zaehler, 100, 20);\n      listeWoche.add(woche);\n      panelTable.add(woche);\n\n      zaehler++;\n\n      panelTable.updateUI();\n    }\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3911, "initialization": ["JLabel comp = new JLabel(*,*,*)"], "initializationStart": [433], "initializationEnd": [487], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setToolTipText(String)", "comp.setBorder(Border)", "comp.setOpaque(boolean)", "comp.setBackground(Color)", "comp.setForeground(Color)"], "configurationStart": [497, 619, 685, 712, 792], "configurationEnd": [609, 675, 702, 749, 821], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 831, "focalAPIEnd": 847, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.getHeight()", "jPanel.scrollRectToVisible(Rectangle)"], "useStart": [1111, 1064], "useEnd": [1132, 1145], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LSTS/neptus/tree/master/plugins-dev/logs/pt/lsts/neptus/plugins/logs/HistoryPanel.java", "rawCode": "  public void setMessages(Vector<HistoryMessage> messages) {\n    for (HistoryMessage m : messages) {\n      if (!myMessages.contains(m)) {\n        myMessages.add(m);\n\n        if (m.type == msg_type.info && !showInfo) continue;\n        if (m.type == msg_type.warning && !showWarn) continue;\n        if (m.type == msg_type.error && !showError) continue;\n        if (m.type == msg_type.debug && !showDebug) continue;\n\n        JLabel l = new JLabel(m.toString(), getIcon(m.type), JLabel.LEFT);\n        l.setToolTipText(\n            I18n.textf(\"Received on %timeStamp (%context)\", new Date(m.timestamp), m.context));\n        l.setBorder(BorderFactory.createEmptyBorder(5, 5, 0, 3));\n        l.setOpaque(true);\n        l.setBackground(bgColors.get(m.type));\n        if (m.type == msg_type.critical) l.setForeground(Color.yellow);\n        mainPanel.add(l);\n      }\n    }\n\n    invalidate();\n    validate();\n\n    if (sw.getState() == true) {\n      autoActive = true;\n      scroll.setAutoscrolls(true);\n      scroll.setVerticalScrollBar(scroll.getVerticalScrollBar());\n      mainPanel.scrollRectToVisible(new Rectangle(0, mainPanel.getHeight() + 22, 1, 1));\n      scroll\n          .getViewport()\n          .setViewPosition(new Point(0, scroll.getVerticalScrollBar().getMaximum()));\n    } else {\n      autoActive = false;\n      scroll.setAutoscrolls(false);\n    }\n\n    repaint();\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3912, "initialization": ["JPanel jPanel = new JPanel(*)"], "initializationStart": [66], "initializationEnd": [944], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 953, "focalAPIEnd": 968, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JLabel)"], "useStart": [976, 1000, 1027, 1055, 1080], "useEnd": [992, 1019, 1047, 1072, 1098], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/humphrej/flexdock/tree/master/src/java/test/org/flexdock/test/view/ViewTest.java", "rawCode": "    public JPanel createPanel() {\n\n      JPanel panel =\n          new JPanel(null) {\n            public void doLayout() {\n              int x = 10;\n              int row = 1;\n              int rowInc = 22;\n              int labelWeight = 60 + 10;\n              int valueWidth = 120;\n              int height = (int) view.getPreferredSize().getHeight();\n\n              view.setBounds(x, row * rowInc, labelWeight, height);\n              vView.setBounds(labelWeight + 10, row * rowInc, valueWidth, height);\n              row++;\n              titlebar.setBounds(x, row * rowInc, labelWeight, height);\n              vTitlebar.setBounds(labelWeight + 10, row * rowInc, valueWidth, height);\n              row++;\n              button.setBounds(x, row * rowInc, labelWeight, height);\n              vButton.setBounds(labelWeight + 10, row * rowInc, valueWidth, height);\n\n              setPreferredSize(new Dimension(400, 100));\n            }\n          };\n\n      panel.add(view);\n      panel.add(vView);\n      panel.add(titlebar);\n      panel.add(vTitlebar);\n      panel.add(button);\n      panel.add(vButton);\n\n      return panel;\n    }\n"}, {"dataset": "jPanelAdd", "exampleID": 3913, "initialization": ["JPanel jPanel = getContentPane()", "JLabel comp = new JLabel(*,*,*)"], "initializationStart": [371, 1147], "initializationEnd": [387, 1285], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [441], "configurationEnd": [470], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1512, "focalAPIEnd": 1541, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JCheckBox)", "jPanel.add(JProgressBar)", "jPanel.add(JButton)", "jPanel.add(JButton)"], "useStart": [1853, 2225, 2711, 3107], "useEnd": [1891, 2253, 2741, 3134], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.3.2/src/lib/com/izforge/izpack/uninstaller/UninstallerFrame.java", "rawCode": "  /**\n   * Builds the GUI.\n   *\n   * @param displayForceOption If true, display to the user the option permitting to force all files\n   *     deletion.\n   * @param forceOptionState If true, force deletion is activated.\n   */\n  private void buildGUI(boolean displayForceOption, boolean forceOptionState) {\n    // We initialize our layout\n    JPanel contentPane = (JPanel) getContentPane();\n    GridBagLayout layout = new GridBagLayout();\n    contentPane.setLayout(layout);\n    GridBagConstraints gbConstraints = new GridBagConstraints();\n    gbConstraints.insets = new Insets(5, 5, 5, 5);\n\n    // We prepare our action handler\n    ActionsHandler handler = new ActionsHandler();\n\n    // Prepares the glass pane to block gui interaction when needed\n    JPanel glassPane = (JPanel) getGlassPane();\n    glassPane.addMouseListener(new MouseAdapter() {});\n    glassPane.addMouseMotionListener(new MouseMotionAdapter() {});\n    glassPane.addKeyListener(new KeyAdapter() {});\n\n    // We set-up the buttons factory\n    ButtonFactory.useButtonIcons();\n    ButtonFactory.useHighlightButtons();\n\n    // We put our components\n\n    JLabel warningLabel =\n        new JLabel(\n            langpack.getString(\"uninstaller.warning\"),\n            icons.getImageIcon(\"warning\"),\n            JLabel.TRAILING);\n    buildConstraints(gbConstraints, 0, 0, 2, 1, 1.0, 0.0);\n    gbConstraints.anchor = GridBagConstraints.WEST;\n    gbConstraints.fill = GridBagConstraints.NONE;\n    layout.addLayoutComponent(warningLabel, gbConstraints);\n    contentPane.add(warningLabel);\n\n    targetDestroyCheckbox =\n        new JCheckBox(\n            langpack.getString(\"uninstaller.destroytarget\") + installPath, forceOptionState);\n    buildConstraints(gbConstraints, 0, 1, 2, 1, 1.0, 0.0);\n    layout.addLayoutComponent(targetDestroyCheckbox, gbConstraints);\n    if (displayForceOption) {\n      contentPane.add(targetDestroyCheckbox);\n    }\n    gbConstraints.fill = GridBagConstraints.HORIZONTAL;\n\n    progressBar = new JProgressBar();\n    progressBar.setStringPainted(true);\n    progressBar.setString(langpack.getString(\"InstallPanel.begin\"));\n    buildConstraints(gbConstraints, 0, 2, 2, 1, 1.0, 0.0);\n    layout.addLayoutComponent(progressBar, gbConstraints);\n    contentPane.add(progressBar);\n\n    destroyButton =\n        ButtonFactory.createButton(\n            langpack.getString(\"uninstaller.uninstall\"),\n            icons.getImageIcon(\"delete\"),\n            buttonsHColor);\n    destroyButton.addActionListener(handler);\n    buildConstraints(gbConstraints, 0, 3, 1, 1, 0.5, 0.0);\n    gbConstraints.fill = GridBagConstraints.NONE;\n    gbConstraints.anchor = GridBagConstraints.WEST;\n    layout.addLayoutComponent(destroyButton, gbConstraints);\n    contentPane.add(destroyButton);\n\n    quitButton =\n        ButtonFactory.createButton(\n            langpack.getString(\"installer.quit\"), icons.getImageIcon(\"stop\"), buttonsHColor);\n    quitButton.addActionListener(handler);\n    buildConstraints(gbConstraints, 1, 3, 1, 1, 0.5, 0.0);\n    gbConstraints.anchor = GridBagConstraints.EAST;\n    layout.addLayoutComponent(quitButton, gbConstraints);\n    contentPane.add(quitButton);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3914, "initialization": ["JLabel comp = new JLabel(String)"], "initializationStart": [721], "initializationEnd": [773], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setBorder(TitledBorder)", "jPanel.setLayout(GridBagLayout)", "comp.setHorizontalAlignment(*)"], "configurationStart": [631, 662, 779], "configurationEnd": [656, 684, 827], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 868, "focalAPIEnd": 885, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JComboBox)", "jPanel.add(JLabel)", "jPanel.add(JTextField)", "jPanel.add(JButton)"], "useStart": [981, 1299, 1429, 1720], "useEnd": [1003, 1316, 1454, 1752], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stlanger/Docear/tree/master/Jabref_Beta_2_7_Docear/src/java/net/sf/jabref/wizard/auximport/gui/FromAuxDialog.java", "rawCode": "  private void initOptionsPanel(JabRefFrame parent) {\n    // collect the names of all open databases\n    int len = parentTabbedPane.getTabCount();\n    for (int t = 0; t < len; t++) {\n      dbChooser.addItem(parentTabbedPane.getTitleAt(t));\n    }\n\n    // panel view\n    GridBagLayout gbl = new GridBagLayout();\n    GridBagConstraints con = new GridBagConstraints();\n    con.weightx = 0;\n    con.insets = new Insets(5, 10, 0, 10);\n    con.fill = GridBagConstraints.HORIZONTAL;\n\n    TitledBorder border =\n        new TitledBorder(\n            BorderFactory.createLineBorder(new Color(153, 153, 153), 2), Globals.lang(\"Options\"));\n    buttons.setBorder(border);\n    buttons.setLayout(gbl);\n\n    // Database\n    JLabel lab1 = new JLabel(Globals.lang(\"Reference database\") + \":\");\n    lab1.setHorizontalAlignment(SwingConstants.LEFT);\n    gbl.setConstraints(lab1, con);\n    buttons.add(lab1);\n    con.gridwidth = GridBagConstraints.REMAINDER;\n    gbl.setConstraints(dbChooser, con);\n    buttons.add(dbChooser);\n\n    // AUX\n    con.gridwidth = 1;\n    con.weightx = 0;\n    con.insets = new Insets(5, 10, 15, 10);\n    con.fill = GridBagConstraints.BOTH;\n    lab1 = new JLabel(Globals.lang(\"LaTeX AUX file\") + \":\");\n    lab1.setHorizontalAlignment(SwingConstants.LEFT);\n    gbl.setConstraints(lab1, con);\n    buttons.add(lab1);\n    con.weightx = 1;\n    auxFileField = new JTextField(\"\", 25);\n    gbl.setConstraints(auxFileField, con);\n    buttons.add(auxFileField);\n    con.weightx = 0;\n    con.insets = new Insets(5, 10, 15, 2);\n    browseAuxFileButton = new JButton(Globals.lang(\"Browse\"));\n    browseAuxFileButton.addActionListener(new BrowseAction(auxFileField, parent));\n    gbl.setConstraints(browseAuxFileButton, con);\n    buttons.add(browseAuxFileButton);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3915, "initialization": ["JLabel comp = new JLabel()", "JPanel jPanel = new JPanel(*)"], "initializationStart": [181, 272], "initializationEnd": [193, 315], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setText(String)", "jPanel.setBackground(Color)"], "configurationStart": [201, 323], "configurationEnd": [233, 356], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 364, "focalAPIEnd": 388, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jPanel,GridBagConstraints)"], "useStart": [1496], "useEnd": [1526], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mxro/osgi-maven/tree/master/thrdShef/src/main/java/net/atlanticbb/tantlinger/ui/text/dialogs/HTMLFontDialog.java", "rawCode": "  /**\n   * This method initializes previewPanel\n   *\n   * @return javax.swing.JPanel\n   */\n  private JPanel getPreviewPanel() {\n    if (previewPanel == null) {\n      previewLabel = new JLabel();\n      previewLabel.setText(\"AaBbYyZz\"); // $NON-NLS-1$\n      JPanel spacer = new JPanel(new FlowLayout(FlowLayout.LEFT));\n      spacer.setBackground(Color.WHITE);\n      spacer.add(previewLabel);\n      previewPanel = new JPanel();\n      previewPanel.setLayout(new BorderLayout());\n      previewPanel.setBorder(\n          javax.swing.BorderFactory.createCompoundBorder(\n              null,\n              javax.swing.BorderFactory.createCompoundBorder(\n                  javax.swing.BorderFactory.createTitledBorder(\n                      null,\n                      i18n.str(\"preview\"),\n                      javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,\n                      javax.swing.border.TitledBorder.DEFAULT_POSITION,\n                      null,\n                      null),\n                  javax.swing.BorderFactory.createCompoundBorder(\n                      javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5),\n                      javax.swing.BorderFactory.createBevelBorder(\n                          javax.swing.border.BevelBorder.LOWERED))))); // $NON-NLS-1$\n      previewPanel.setPreferredSize(new java.awt.Dimension(90, 100));\n      previewPanel.setMaximumSize(previewPanel.getPreferredSize());\n      previewPanel.setMinimumSize(previewPanel.getPreferredSize());\n      previewPanel.add(spacer, null);\n    }\n    return previewPanel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3916, "initialization": ["JPanel jPanel = new Box(*)"], "initializationStart": [2521], "initializationEnd": [2546], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)"], "configurationStart": [2552, 2583, 2629], "configurationEnd": [2577, 2623, 2684], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 2690, "focalAPIEnd": 2715, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(Box)", "jPanel.add(JLabel)", "jPanel.add(JTextField)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [2721, 2751, 2797, 2858, 2886, 2912, 2937], "useEnd": [2745, 2791, 2852, 2880, 2906, 2931, 2975], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tinyos/tinyos-main/tree/master/apps/tests/TestOscilloscopeLQI/java/Window.java", "rawCode": "  void setup() {\n    JPanel main = new JPanel(new BorderLayout());\n\n    main.setMinimumSize(new Dimension(500, 250));\n    main.setPreferredSize(new Dimension(800, 400));\n\n    // Three panels: mote list, graph, controls\n    moteListModel = new MoteTableModel();\n    JTable moteList = new JTable(moteListModel);\n    moteList.setDefaultRenderer(Color.class, new MoteColor());\n    moteList.setDefaultEditor(Color.class, new ColorCellEditor(\"Pick Mote Color\"));\n    moteList.setPreferredScrollableViewportSize(new Dimension(100, 400));\n    JScrollPane motePanel = new JScrollPane();\n    motePanel.getViewport().add(moteList, null);\n    main.add(motePanel, BorderLayout.WEST);\n\n    graph = new Graph(this);\n    main.add(graph, BorderLayout.CENTER);\n\n    // Controls. Organised using box layouts.\n\n    // Sample period.\n    JLabel sampleLabel = makeLabel(\"Sample period (ms):\", JLabel.RIGHT);\n    sampleText =\n        makeTextField(\n            6,\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                setSamplePeriod();\n              }\n            });\n    updateSamplePeriod();\n\n    // Clear data.\n    JButton clearButton =\n        makeButton(\n            \"Clear data\",\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                clearData();\n              }\n            });\n\n    // Adjust X-axis zoom.\n    Box xControl = new Box(BoxLayout.Y_AXIS);\n    xLabel = makeLabel(\"\", JLabel.CENTER);\n    final JSlider xSlider = new JSlider(JSlider.HORIZONTAL, 0, 8, graph.scale);\n    Hashtable xTable = new Hashtable();\n    for (int i = 0; i <= 8; i += 2)\n      xTable.put(new Integer(i), makeSmallLabel(\"\" + (Graph.MIN_WIDTH << i), JLabel.CENTER));\n    xSlider.setLabelTable(xTable);\n    xSlider.setPaintLabels(true);\n    graph.updateXLabel();\n    graph.setScale(graph.scale);\n    xSlider.addChangeListener(\n        new ChangeListener() {\n          public void stateChanged(ChangeEvent e) {\n            // if (!xSlider.getValueIsAdjusting())\n            graph.setScale((int) xSlider.getValue());\n          }\n        });\n    xControl.add(xLabel);\n    xControl.add(xSlider);\n\n    // Adjust Y-axis range.\n    JLabel yLabel = makeLabel(\"Y:\", JLabel.RIGHT);\n    yText =\n        makeTextField(\n            12,\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                setYAxis();\n              }\n            });\n    yText.setText(graph.gy0 + \" - \" + graph.gy1);\n\n    Box controls = new Box(BoxLayout.X_AXIS);\n    controls.add(clearButton);\n    controls.add(Box.createHorizontalGlue());\n    controls.add(Box.createRigidArea(new Dimension(20, 0)));\n    controls.add(sampleLabel);\n    controls.add(sampleText);\n    controls.add(Box.createHorizontalGlue());\n    controls.add(Box.createRigidArea(new Dimension(20, 0)));\n    controls.add(xControl);\n    controls.add(yLabel);\n    controls.add(yText);\n    main.add(controls, BorderLayout.SOUTH);\n\n    // The frame part\n    frame = new JFrame(\"Oscilloscope\");\n    frame.setSize(main.getPreferredSize());\n    frame.getContentPane().add(main);\n    frame.setVisible(true);\n    frame.addWindowListener(\n        new WindowAdapter() {\n          public void windowClosing(WindowEvent e) {\n            System.exit(0);\n          }\n        });\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3917, "initialization": ["JPanel jPanel = new JPanel(GridBagLayout)", "JLabel comp = new JLabel(String)"], "initializationStart": [758, 820], "initializationEnd": [774, 855], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 900, "focalAPIEnd": 923, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JComboBox)", "jPanel.add(JCheckBox)"], "useStart": [1122, 1202], "useEnd": [1152, 1229], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/briantwhite/JavaCodeFromSVN/tree/master/PedigreeExplorer/src/Pelican/Pelican.java", "rawCode": "  private void saveImage() {\n\n    // this only works under java1.4+\n    String javaVersion = System.getProperty(\"java.vm.version\");\n    if (javaVersion.startsWith(\"1.\") && javaVersion.charAt(2) < '4') return;\n\n    BufferedImage image =\n        new BufferedImage(getWidth() * SCALE, getHeight() * SCALE, BufferedImage.TYPE_BYTE_GRAY);\n    Graphics2D graphics = (Graphics2D) image.getGraphics();\n    graphics.scale(SCALE, SCALE);\n    if (graphics != null) {\n      paintAll(graphics);\n    }\n\n    if (askFormat == null || !askFormat.isSelected()) {\n      if (askFormat == null) askFormat = new JCheckBox(\"Do not ask again\", true);\n      GridBagLayout grid = new GridBagLayout();\n      GridBagConstraints c = new GridBagConstraints();\n      JPanel chooseFormat = new JPanel(grid);\n      c.weightx = 1.0;\n      JLabel label = new JLabel(\"Choose image format: \");\n      grid.setConstraints(label, c);\n      chooseFormat.add(label);\n      String[] formats = {\"PNG\", \"JPEG\"};\n      JComboBox formatChoice = new JComboBox(formats);\n      c.gridwidth = GridBagConstraints.REMAINDER;\n      grid.setConstraints(formatChoice, c);\n      chooseFormat.add(formatChoice);\n\n      grid.setConstraints(askFormat, c);\n      chooseFormat.add(askFormat);\n\n      if (JOptionPane.showConfirmDialog(\n              this, chooseFormat, \"Pelican: image format\", JOptionPane.OK_CANCEL_OPTION)\n          == JOptionPane.CANCEL_OPTION) {\n        askFormat = null;\n        return;\n      }\n      imageFormat = (String) (formatChoice.getSelectedItem());\n    }\n\n    JFileChooser dialog = new JFileChooser(currentDirectory);\n    dialog.setDialogTitle(\"Print image file\");\n    if (imageFormat.equals(\"PNG\")) dialog.addChoosableFileFilter(new GeneralFilter(\"png\"));\n    if (imageFormat.equals(\"JPEG\")) {\n      dialog.addChoosableFileFilter(new GeneralFilter(\"jpeg\"));\n      dialog.addChoosableFileFilter(new GeneralFilter(\"jpg\"));\n    }\n    if (dialog.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {\n      try {\n        File file = dialog.getSelectedFile();\n        String filename = file.getAbsolutePath();\n        if (file.exists() && !file.canWrite()) throw (new Error(\"Cannot write file \" + filename));\n        ImageIO.write(image, imageFormat, file);\n        currentDirectory = file.getParent();\n      } catch (Throwable t) {\n        JOptionPane.showMessageDialog(\n            this, t.getMessage(), \"PELICAN error\", JOptionPane.ERROR_MESSAGE);\n      }\n    }\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3918, "initialization": ["JLabel comp = new JLabel(String)"], "initializationStart": [441], "initializationEnd": [503], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setLocation(int,int)", "comp.setSize(int,int)"], "configurationStart": [509, 581], "configurationEnd": [575, 603], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 609, "focalAPIEnd": 625, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Arolition/iteration5/tree/master/Objectron - Iteration 5/src/view/UseItemDialog.java", "rawCode": "  private void renderItemOption(final int itemIndex, ItemInfo item, Position position) {\n    createButton(\n            position.xCoordinate,\n            position.yCoordinate,\n            40,\n            40,\n            new Runnable() {\n              public void run() {\n                setChosenItemIndex(itemIndex);\n                repaint();\n              }\n            })\n        .setImage(findGameElementImage(item));\n    JLabel label = new JLabel(itemIndex + \": \" + item.getClass().getSimpleName());\n    label.setLocation(position.xCoordinate + 50, position.yCoordinate);\n    label.setSize(120, 20);\n    panel.add(label);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3919, "initialization": ["JPanel jPanel = new JPanel(*)"], "initializationStart": [606], "initializationEnd": [636], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.add(JButton)"], "configurationStart": [644], "configurationEnd": [663], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 759, "focalAPIEnd": 771, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JRadioButton)", "jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JRadioButton)", "jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JRadioButton)", "jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JLabel)", "makeCompactGrid(jPanel,int,int,int,int,int,int)", "Box.add(jPanel)", "jPanel.add(JLabel)", "jPanel.add(JButton)", "Container.add(jPanel)", "jPanel.setOpaque(boolean)", "jPanel.setBorder(Border)", "jPanel.add(JRadioButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "JPanel.add(jPanel,GridBagConstraints)", "jPanel.setOpaque(boolean)", "jPanel.add(JRadioButton)", "jPanel.add(JButton)", "Box.add(jPanel)", "jPanel.setOpaque(boolean)", "jPanel.add(JButton)", "jPanel.add(JButton)", "Container.add(jPanel)"], "useStart": [867, 979, 1118, 1220, 1321, 1422, 1561, 1663, 1764, 1865, 2014, 2116, 2217, 2318, 2339, 2516, 3146, 3166, 3207, 3421, 3462, 3713, 3767, 3818, 3859, 4052, 4422, 4482, 4558, 4763, 5725, 5752, 5775], "useEnd": [879, 991, 1131, 1232, 1333, 1434, 1574, 1675, 1776, 1877, 2027, 2128, 2229, 2330, 2452, 2524, 3158, 3199, 3216, 3454, 3524, 3726, 3802, 3851, 3894, 4085, 4435, 4513, 4566, 4796, 5744, 5767, 5784], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Zearin/BibTeXML/tree/master/bibtexconverter-j/src/net/sourceforge/bibtexml/SchemaSelection.java", "rawCode": "  private synchronized Container contentPane() {\n    if (cp == null) {\n      cp = Box.createVerticalBox();\n      ((Box) cp).setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n\n      Container c;\n      JPanel section;\n      JLabel label;\n\n      JRadioButton button;\n      final Border cellBorder =\n          BorderFactory.createCompoundBorder(\n              BorderFactory.createMatteBorder(0, 0, 1, 0, Color.gray),\n              BorderFactory.createEmptyBorder(0, 4, 0, 4));\n\n      section = new JPanel(new BorderLayout());\n      section.add(makeTitle(\"BibTeX Fields\"), BorderLayout.NORTH);\n\n      c = new JPanel(new SpringLayout());\n      c.add(new JPanel());\n      label = new JLabel(\"Required\", JLabel.CENTER);\n      label.setBorder(cellBorder);\n      c.add(label);\n      label = new JLabel(\"Optional\", JLabel.CENTER);\n      label.setBorder(cellBorder);\n      c.add(label);\n      label = new JLabel(\"User-Defined\", JLabel.CENTER);\n      label.setBorder(cellBorder);\n      c.add(label);\n\n      button = new JRadioButton(\"Core\");\n      button.setActionCommand(Fields.core.name());\n      fields.add(button);\n      c.add(button);\n      label = new JLabel(\"!\", JLabel.CENTER);\n      label.setFont(SANS_BOLD_12);\n      c.add(label);\n      label = new JLabel(\"?\", JLabel.CENTER);\n      label.setFont(SANS_BOLD_12);\n      c.add(label);\n      label = new JLabel(\"-\", JLabel.CENTER);\n      label.setFont(SANS_BOLD_12);\n      c.add(label);\n\n      button = new JRadioButton(\"User\");\n      button.setActionCommand(Fields.user.name());\n      fields.add(button);\n      c.add(button);\n      label = new JLabel(\"!\", JLabel.CENTER);\n      label.setFont(SANS_BOLD_12);\n      c.add(label);\n      label = new JLabel(\"?\", JLabel.CENTER);\n      label.setFont(SANS_BOLD_12);\n      c.add(label);\n      label = new JLabel(\"?\", JLabel.CENTER);\n      label.setFont(SANS_BOLD_12);\n      c.add(label);\n\n      button = new JRadioButton(\"Arbitrary\");\n      button.setActionCommand(Fields.arbitrary.name());\n      fields.add(button);\n      c.add(button);\n      label = new JLabel(\"?\", JLabel.CENTER);\n      label.setFont(SANS_BOLD_12);\n      c.add(label);\n      label = new JLabel(\"?\", JLabel.CENTER);\n      label.setFont(SANS_BOLD_12);\n      c.add(label);\n      label = new JLabel(\"?\", JLabel.CENTER);\n      label.setFont(SANS_BOLD_12);\n      c.add(label);\n\n      SpringUtilities.makeCompactGrid(\n          c, 4, 4, // rows, cols\n          0, 0, // initX, initY\n          0, 0); // xPad, yPad\n\n      Box b = Box.createHorizontalBox();\n      b.add(c);\n      b.add(Box.createHorizontalGlue());\n      b.setBorder(BorderFactory.createEtchedBorder());\n      b.setOpaque(true);\n      section.add(b, BorderLayout.CENTER);\n      cp.add(section);\n\n      c = Box.createHorizontalBox();\n      label =\n          new JLabel(\n              \"<html>\"\n                  + \"<b>!</b> : must be present<br>\"\n                  + \"<b>?</b> : can be present<br>\"\n                  + \"<b>-</b> : must not be present\"\n                  + \"</html>\",\n              JLabel.LEFT);\n      Font f = label.getFont();\n      f = f.deriveFont(Font.PLAIN, f.getSize() * 0.75f);\n      label.setFont(f);\n      c.add(label);\n      c.add(Box.createHorizontalGlue());\n      cp.add(c);\n\n      cp.add(Box.createVerticalStrut(5));\n\n      section = new JPanel(new BorderLayout());\n      section.add(makeTitle(\"Type checking\"), BorderLayout.NORTH);\n\n      c = Box.createHorizontalBox();\n      ((JComponent) c).setOpaque(false);\n      ((JComponent) c).setBorder(BorderFactory.createEtchedBorder());\n      for (DataTypes dt : DataTypes.values()) {\n        final String name = dt.name();\n        button = new JRadioButton(upperFirst(name));\n        button.setActionCommand(name);\n        c.add(button);\n        datatypes.add(button);\n        c.add(Box.createHorizontalStrut(5));\n      }\n      c.add(Box.createHorizontalGlue());\n      section.add(c, BorderLayout.CENTER);\n      cp.add(section);\n\n      cp.add(Box.createVerticalStrut(5));\n\n      section = new JPanel(new BorderLayout());\n      c = Box.createVerticalBox();\n      ((JComponent) c).setOpaque(false);\n      section.add(makeTitle(\"Author and editor lists\"), BorderLayout.NORTH);\n\n      for (Structure struct : Structure.values()) {\n        final String name = struct.name();\n        button = new JRadioButton(upperFirst(struct.toString()));\n        button.setToolTipText(struct.example());\n        button.setActionCommand(name);\n        c.add(button);\n        structure.add(button);\n      }\n      c.add(Box.createVerticalGlue());\n      b = Box.createHorizontalBox();\n      b.add(c);\n      b.setBorder(BorderFactory.createEtchedBorder());\n      section.add(b, BorderLayout.CENTER);\n      cp.add(section);\n\n      cp.add(Box.createVerticalStrut(5));\n\n      c = new JPanel();\n      ((JComponent) c).setOpaque(false);\n      final JButton buttonOK = new JButton();\n      final JButton buttonCancel = new JButton();\n      buttonOK.setText(UIManager.getString(\"OptionPane.okButtonText\"));\n      buttonCancel.setText(UIManager.getString(\"OptionPane.cancelButtonText\"));\n      buttonOK.addActionListener(\n          new ActionListener() {\n            public void actionPerformed(final ActionEvent e) {\n              ok = true;\n              final Window w = SwingUtilities.getWindowAncestor((Component) e.getSource());\n              w.setVisible(false);\n              w.dispose();\n            }\n          });\n      buttonCancel.addActionListener(\n          new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n              ok = false;\n              final Window w = SwingUtilities.getWindowAncestor((Component) e.getSource());\n              w.setVisible(false);\n              w.dispose();\n            }\n          });\n      c.add(buttonCancel);\n      c.add(buttonOK);\n      cp.add(c);\n    }\n    return cp;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3920, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(String)"], "initializationStart": [187, 317], "initializationEnd": [219, 337], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 419, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JLabel)", "jPanel.add(JPasswordField)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [443, 472, 496, 584], "useEnd": [464, 488, 517, 630], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/release-3-6-0/src/lib/com/izforge/izpack/installer/WebAccessor.java", "rawCode": "  private JPanel getPasswordPanel() {\n    if (passwordPanel == null) {\n      passwordPanel = new JPanel(new BorderLayout(5, 5));\n\n      promptLabel = new JLabel();\n\n      JPanel fields = new JPanel(new GridLayout(2, 2));\n      nameField = new JTextField();\n      passField = new JPasswordField();\n      JLabel name = new JLabel(\"Name: \"); // TODO: i18n\n      JLabel pass = new JLabel(\"Password: \"); // TODO: i18n\n      fields.add(name);\n      fields.add(nameField);\n      fields.add(pass);\n      fields.add(passField);\n\n      passwordPanel.add(promptLabel, BorderLayout.NORTH);\n      passwordPanel.add(fields, BorderLayout.CENTER);\n    }\n    passField.setText(\"\");\n\n    return passwordPanel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3921, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [399, 490], "initializationEnd": [411, 506], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "comp.setPreferredSize(Dimension)"], "configurationStart": [417, 512], "configurationEnd": [468, 549], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 555, "focalAPIEnd": 569, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextArea)", "jPanel.add(JCheckBox)"], "useStart": [646, 757], "useEnd": [658, 769], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BlackJoker/MMS_new/tree/master/src/de/team55/mms/gui/mainscreen.java", "rawCode": "  /**\n   * Liefert ein Feld mit Label, TextArea und Checkbox\n   *\n   * @return JPanel ausgefülltes Panel\n   * @param name Beschriftung des Labels\n   * @param string Inhalt der TextArea\n   * @param b Gibt an, ob die Checkbox ausgewählt ist\n   */\n  private JPanel defaultmodulPanel(String name, String string, boolean b) {\n    final Dimension preferredSize = new Dimension(120, 20);\n\n    JPanel pnl = new JPanel();\n    pnl.setLayout(new BoxLayout(pnl, BoxLayout.X_AXIS));\n\n    JLabel label = new JLabel(name);\n    label.setPreferredSize(preferredSize);\n    pnl.add(label);\n\n    JTextArea txt = new JTextArea(string);\n    txt.setLineWrap(true);\n    pnl.add(txt);\n\n    if (!name.equals(\"Jahrgang\")) {\n      JCheckBox dez = new JCheckBox(\"Dezernat 2\", b);\n      pnl.add(dez);\n    }\n    return pnl;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3922, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel()"], "initializationStart": [62, 168], "initializationEnd": [74, 180], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "comp.setText(String)"], "configurationStart": [80, 186], "configurationEnd": [135, 256], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 262, "focalAPIEnd": 283, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.putClientProperty(String,Observer)"], "useStart": [631], "useEnd": [676], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hikob/contiki/tree/master/tools/cooja/java/se/sics/cooja/interfaces/Mote2MoteRelations.java", "rawCode": "  public JPanel getInterfaceVisualizer() {\n    JPanel panel = new JPanel();\n    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));\n\n    final JLabel countLabel = new JLabel();\n    countLabel.setText(\"Mote has \" + relations.size() + \" mote relations\");\n    panel.add(countLabel);\n\n    Observer observer;\n    this.addObserver(\n        observer =\n            new Observer() {\n              public void update(Observable obs, Object obj) {\n                countLabel.setText(\"Mote has \" + relations.size() + \" mote relations\");\n              }\n            });\n\n    // Saving observer reference for releaseInterfaceVisualizer\n    panel.putClientProperty(\"intf_obs\", observer);\n\n    return panel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3923, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String,*)"], "initializationStart": [9044, 13076], "initializationEnd": [9056, 13119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [9104], "configurationEnd": [9167], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 13125, "focalAPIEnd": 13146, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jPanel,GridBagConstraints)"], "useStart": [13244], "useEnd": [13282], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wookietreiber/scalomator/tree/master/client-swing/src/main/java/scalax/automata/gui/GUI.java", "rawCode": "  /**\n   * This will initialize all the window's components.\n   *\n   * @param gui The frame to initialize the components on\n   */\n  public void initGUI(JFrame gui) {\n    JMenu menu;\n    JMenuItem menuItem;\n    JMenuBar menuBar = new JMenuBar();\n    JPanel sidePanel,\n        statusBar,\n        topSubPanel,\n        statesPanel,\n        transitionsPanel,\n        alphabetPanel,\n        testwordPanel,\n        buttonPanel,\n        bottomSubPanel;\n    JButton runButton, quitButton;\n\n    // Create the pop-up menu.\n    popup = new JPopupMenu();\n    menuItem = new JMenuItem(\"Add state\");\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            // generate a new name for the cell\n            StringBuilder value = new StringBuilder(\"S_\").append(nextInt);\n            addState(value.toString(), popupPosition.x, popupPosition.y, CELL_RADIUS, NORMAL_STATE);\n          }\n        });\n    popup.add(menuItem);\n\n    menuItem = new JMenuItem(\"Remove\");\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            Object cell[] = {graphComponent.getCellAt(popupPosition.x, popupPosition.y)};\n            graph.removeCells(cell, true);\n          }\n        });\n    popup.add(menuItem);\n    popup.addSeparator();\n\n    menuItem = new JMenuItem(\"Change to Initial state\");\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            Object cell = graphComponent.getCellAt(popupPosition.x, popupPosition.y);\n            Object shape = graph.getCellStyle(cell).get(SHAPE);\n\n            // check for situations where a change to initial shape is not allowed\n            if (hasInitialState && !shape.toString().equals(MULTI_STATE)) {\n              JOptionPane.showMessageDialog(\n                  top,\n                  \"There can only be one initial state!\\n\"\n                      + \"Remove or change the existing initial state first.\",\n                  \"Warning\",\n                  JOptionPane.WARNING_MESSAGE);\n            } else {\n              hasInitialState = true;\n              graph.getModel().setStyle(cell, \"shape=initialShape;perimeter=ellipsePerimeter\");\n              graphComponent.refresh();\n              stateDataModel.fireTableDataChanged();\n            }\n          }\n        });\n    popup.add(menuItem);\n\n    menuItem = new JMenuItem(\"Change to Normal state\");\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            Object cell = graphComponent.getCellAt(popupPosition.x, popupPosition.y);\n            Object shape = graph.getCellStyle(cell).get(SHAPE);\n\n            if (shape.toString().equals(MULTI_STATE) || shape.toString().equals(INITIAL_STATE))\n              hasInitialState = false;\n\n            graph.getModel().setStyle(cell, \"shape=ellipse;perimeter=ellipsePerimeter\");\n            graphComponent.refresh();\n            stateDataModel.fireTableDataChanged();\n          }\n        });\n    popup.add(menuItem);\n\n    menuItem = new JMenuItem(\"Change to End state\");\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            Object cell = graphComponent.getCellAt(popupPosition.x, popupPosition.y);\n            Object shape = graph.getCellStyle(cell).get(SHAPE);\n\n            if (shape.toString().equals(MULTI_STATE) || shape.toString().equals(INITIAL_STATE))\n              hasInitialState = false;\n\n            graph.getModel().setStyle(cell, \"shape=doubleEllipse;perimeter=ellipsePerimeter\");\n            graphComponent.refresh();\n            stateDataModel.fireTableDataChanged();\n          }\n        });\n    popup.add(menuItem);\n\n    menuItem = new JMenuItem(\"Change to Initial+End state\");\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            Object cell = graphComponent.getCellAt(popupPosition.x, popupPosition.y);\n            Object shape = graph.getCellStyle(cell).get(SHAPE);\n\n            if (hasInitialState && !shape.toString().equals(INITIAL_STATE)) {\n              JOptionPane.showMessageDialog(\n                  top,\n                  \"There can only be one initial state!\\n\"\n                      + \"Remove or change the existing initial state first.\",\n                  \"Warning\",\n                  JOptionPane.WARNING_MESSAGE);\n            } else {\n              hasInitialState = true;\n              graph.getModel().setStyle(cell, \"shape=multiShape;perimeter=ellipsePerimeter\");\n              graphComponent.refresh();\n              stateDataModel.fireTableDataChanged();\n            }\n          }\n        });\n    popup.add(menuItem);\n\n    // create the window menus\n    menu = new JMenu(\"File\");\n    menu.setMnemonic(KeyEvent.VK_F);\n    menuBar.add(menu);\n\n    menuItem = new JMenuItem(\"New\");\n    menuItem.setMnemonic(KeyEvent.VK_N);\n    menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.CTRL_MASK));\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            removeAllCells();\n            clearStatus();\n          }\n        });\n    menu.add(menuItem);\n\n    menuItem = new JMenuItem(\"Open\");\n    menuItem.setMnemonic(KeyEvent.VK_O);\n    menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK));\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            removeAllCells();\n            loadAutomata();\n          }\n        });\n    menu.add(menuItem);\n\n    menuItem = new JMenuItem(\"Save\");\n    menuItem.setMnemonic(KeyEvent.VK_S);\n    menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            saveAutomata();\n          }\n        });\n    menu.add(menuItem);\n    menu.addSeparator();\n\n    menuItem = new JMenuItem(\"Quit\");\n    menuItem.setMnemonic(KeyEvent.VK_Q);\n    menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, ActionEvent.CTRL_MASK));\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            quit();\n          }\n        });\n    menu.add(menuItem);\n\n    menu = new JMenu(\"Simulation\");\n    menu.setMnemonic(KeyEvent.VK_S);\n    menuBar.add(menu);\n\n    menuItem = new JMenuItem(\"Minimize\");\n    menuItem.setMnemonic(KeyEvent.VK_M);\n    menuItem.setAccelerator(\n        KeyStroke.getKeyStroke(KeyEvent.VK_M, ActionEvent.CTRL_MASK | ActionEvent.SHIFT_MASK));\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            minimize();\n          }\n        });\n    menu.add(menuItem);\n\n    menuItem = new JMenuItem(\"Convert NFA to DFA\");\n    menuItem.setMnemonic(KeyEvent.VK_C);\n    menuItem.setAccelerator(\n        KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.CTRL_MASK | ActionEvent.SHIFT_MASK));\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            convertNFA2DFA();\n          }\n        });\n    menu.add(menuItem);\n\n    menuItem = new JMenuItem(\"Run\");\n    menuItem.setMnemonic(KeyEvent.VK_R);\n    menuItem.setAccelerator(\n        KeyStroke.getKeyStroke(KeyEvent.VK_R, ActionEvent.CTRL_MASK | ActionEvent.SHIFT_MASK));\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            runSimulation();\n          }\n        });\n    menu.add(menuItem);\n\n    menu = new JMenu(\"Info\");\n    menu.setMnemonic(KeyEvent.VK_I);\n    menuItem.setAccelerator(\n        KeyStroke.getKeyStroke(KeyEvent.VK_I, ActionEvent.CTRL_MASK | ActionEvent.SHIFT_MASK));\n    menuBar.add(menu);\n\n    menuItem = new JMenuItem(\"About\");\n    menuItem.setMnemonic(KeyEvent.VK_A);\n    menuItem.setAccelerator(\n        KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.CTRL_MASK | ActionEvent.SHIFT_MASK));\n    menuItem.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            displayAbout();\n            clearStatus();\n          }\n        });\n    menu.add(menuItem);\n\n    // create all the panels\n    statusBar = new JPanel();\n    sidePanel = new JPanel();\n    topSubPanel = new JPanel();\n    bottomSubPanel = new JPanel();\n    buttonPanel = new JPanel();\n    statesPanel = new JPanel();\n    transitionsPanel = new JPanel();\n    alphabetPanel = new JPanel();\n    testwordPanel = new JPanel();\n\n    // set all panel layouts and borders\n    statusBar.setLayout(new BoxLayout(statusBar, BoxLayout.Y_AXIS));\n    sidePanel.setLayout(new BorderLayout());\n    sidePanel.setBorder(BorderFactory.createEtchedBorder());\n    topSubPanel.setLayout(new BoxLayout(topSubPanel, BoxLayout.Y_AXIS));\n    bottomSubPanel.setLayout(new BoxLayout(bottomSubPanel, BoxLayout.Y_AXIS));\n    buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.X_AXIS));\n    statesPanel.setLayout(new BorderLayout());\n    statesPanel.setBorder(BorderFactory.createTitledBorder(\"States:\"));\n    transitionsPanel.setLayout(new BorderLayout());\n    transitionsPanel.setBorder(BorderFactory.createTitledBorder(\"Transitions:\"));\n    alphabetPanel.setLayout(new BoxLayout(alphabetPanel, BoxLayout.Y_AXIS));\n    alphabetPanel.setBorder(BorderFactory.createTitledBorder(\"Alphabet:\"));\n    testwordPanel.setLayout(new BoxLayout(testwordPanel, BoxLayout.Y_AXIS));\n    testwordPanel.setBorder(BorderFactory.createTitledBorder(\"Word to test:\"));\n\n    // create the textfields\n    alphabetField = new JTextField();\n    alphabetField.setEditable(false);\n    testField = new JTextField();\n    // listen to changes to the textfield and clear status message\n    testField\n        .getDocument()\n        .addDocumentListener(\n            new DocumentListener() {\n              public void changedUpdate(DocumentEvent e) {\n                clearStatus();\n              }\n\n              public void removeUpdate(DocumentEvent e) {\n                clearStatus();\n              }\n\n              public void insertUpdate(DocumentEvent e) {\n                clearStatus();\n              }\n            });\n\n    alphabetPanel.add(alphabetField);\n    testwordPanel.add(testField);\n\n    // create the buttons\n    runButton = new JButton(\"Run\");\n    runButton.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            runSimulation();\n          }\n        });\n    quitButton = new JButton(\"Quit\");\n    quitButton.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            quit();\n          }\n        });\n\n    buttonPanel.add(runButton);\n    buttonPanel.add(quitButton);\n\n    bottomSubPanel.add(alphabetPanel);\n    bottomSubPanel.add(testwordPanel);\n    bottomSubPanel.add(buttonPanel);\n\n    sidePanel.add(topSubPanel, BorderLayout.CENTER);\n    sidePanel.add(bottomSubPanel, BorderLayout.SOUTH);\n\n    // create the tables for states and transitions\n    JTable stateTable = new JTable(stateDataModel);\n    stateTable.getColumnModel().getColumn(0).setHeaderValue(\"Type\");\n    stateTable.getColumnModel().getColumn(1).setHeaderValue(\"Name\");\n    stateTable\n        .getSelectionModel()\n        .addListSelectionListener(new TableSelectionListener(stateTable, this));\n\n    JScrollPane stateScrollPane = new JScrollPane(stateTable);\n    stateScrollPane.setPreferredSize(new Dimension(200, 150));\n    statesPanel.add(stateScrollPane);\n    topSubPanel.add(statesPanel);\n\n    JTable transitionTable = new JTable(transitionDataModel);\n    transitionTable.getColumnModel().getColumn(0).setHeaderValue(\"Source\");\n    transitionTable.getColumnModel().getColumn(1).setHeaderValue(\"Input\");\n    transitionTable.getColumnModel().getColumn(2).setHeaderValue(\"Target\");\n    transitionTable\n        .getSelectionModel()\n        .addListSelectionListener(new TableSelectionListener(transitionTable, this));\n\n    JScrollPane transitionScrollPane = new JScrollPane(transitionTable);\n    transitionScrollPane.setPreferredSize(new Dimension(200, 150));\n    transitionDataModel.addTableModelListener(\n        new TableModelListener() {\n          @Override\n          public void tableChanged(TableModelEvent e) {\n            setAlphabet(transitionDataModel.getTransitionValues());\n          }\n        });\n\n    transitionsPanel.add(transitionScrollPane);\n    topSubPanel.add(transitionsPanel);\n\n    // set some status bar message\n    status = new JLabel(\"Status: \", SwingConstants.LEFT);\n    statusBar.add(status);\n\n    // lay it all out\n    gui.setJMenuBar(menuBar);\n    gui.setLayout(new BorderLayout());\n    gui.add(statusBar, BorderLayout.SOUTH);\n    gui.add(sidePanel, BorderLayout.EAST);\n    gui.add(initGraph(), BorderLayout.CENTER);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3924, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [79, 645], "initializationEnd": [91, 665], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "jPanel.add(JButton)", "jPanel.add(JComboBox)", "comp.setToolTipText(String)"], "configurationStart": [158, 309, 593, 671], "configurationEnd": [210, 347, 624, 717], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 723, "focalAPIEnd": 747, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JLabel)", "jPanel.add(JTextField)", "jPanel.add(JLabel)", "jPanel.add(JTextField)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [753, 1216, 1247, 1847, 1882, 2431], "useEnd": [787, 1241, 1282, 1876, 1909, 2480], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sbliven/RCSB-Viewers/tree/master/framework/src/main/java/org/rcsb/uiApp/ui/dialogs/ImageFileChooser.java", "rawCode": "  private JPanel createPrintSettingsPanel() {\n    final JPanel printSettings = new JPanel();\n    // printSettings.setLayout(new GridLayout(4, 2, 0, 5) );\n    printSettings.setLayout(new GridLayout(6, 2, 0, 10));\n    JLabel unit = new JLabel(\"Unit:\");\n    unit.setToolTipText(\"Unit for print dimensions\");\n    printSettings.add(new JLabel(\"Unit:\"));\n    unitComboBox.setToolTipText(\"Unit for print dimensions\");\n    unitComboBox.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(final ActionEvent e) {\n            updateUnit();\n          }\n        });\n    printSettings.add(unitComboBox);\n    JLabel width = new JLabel(\"Width:\");\n    width.setToolTipText(\"Width of printed image\");\n    printSettings.add(width);\n    printSettings.add(printWidthField);\n    printWidthField.setToolTipText(\"Width of printed image\");\n    printWidthField.addKeyListener(\n        new KeyListener() {\n          public void keyReleased(KeyEvent e) {\n            updatePrintWidth();\n          }\n\n          public void keyPressed(KeyEvent e) {}\n\n          public void keyTyped(KeyEvent e) {}\n        });\n    JLabel height = new JLabel(\"Height:\");\n    height.setToolTipText(\"Height of printed image\");\n    printSettings.add(height);\n    printSettings.add(printHeightField);\n    printHeightField.setToolTipText(\"Height of printed image\");\n    printHeightField.addKeyListener(\n        new KeyListener() {\n          public void keyReleased(KeyEvent e) {\n            updatePrintHeight();\n          }\n\n          public void keyPressed(KeyEvent e) {}\n\n          public void keyTyped(KeyEvent e) {}\n        });\n    JLabel resolution = new JLabel(\"Resolution (dpi): \");\n    resolution.setToolTipText(\n        \"Resolution in dots per inch in a digital print. \\n\"\n            + \"A typical range for high resolution printing is 300-600 dpi.\");\n    printSettings.add(resolution);\n    printSettings.add(dpiField);\n    dpiField.setToolTipText(\n        \"Resolution in dots per inch in a digital print. \\n\"\n            + \"A typical range for high resolution printing is 300-600 dpi.\");\n    dpiField.addKeyListener(\n        new KeyListener() {\n          public void keyReleased(KeyEvent e) {\n            updateDpi();\n          }\n\n          public void keyPressed(KeyEvent e) {}\n\n          public void keyTyped(KeyEvent e) {}\n        });\n\n    final JPanel printPanel = new JPanel();\n    printPanel.setLayout(new BorderLayout(10, 10));\n    printPanel.add(printSettings, BorderLayout.NORTH);\n    printPanel.setBorder(BorderFactory.createTitledBorder(\"Physical Dimensions\"));\n\n    return printPanel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3925, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(String)"], "initializationStart": [101, 152], "initializationEnd": [131, 168], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setPreferredSize(Dimension)"], "configurationStart": [174], "configurationEnd": [238], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(name,comp)", "focalAPIStart": 244, "focalAPIEnd": 283, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(String,JLabel)", "JComponent.add(jPanel)"], "useStart": [390, 437], "useEnd": [431, 456], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nfi/contiki-works/tree/master/tools/cooja/apps/serial_socket/java/SerialSocketClient.java", "rawCode": "  private JLabel configureLabel(JComponent pane, String desc, String value) {\n    JPanel smallPane = new JPanel(new BorderLayout());\n    JLabel label = new JLabel(desc);\n    label.setPreferredSize(new Dimension(LABEL_WIDTH, LABEL_HEIGHT));\n    smallPane.add(BorderLayout.WEST, label);\n    label = new JLabel(value);\n    label.setPreferredSize(new Dimension(LABEL_WIDTH, LABEL_HEIGHT));\n    smallPane.add(BorderLayout.CENTER, label);\n    pane.add(smallPane);\n    return label;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3926, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setBorder(Border)", "jPanel.setLayout(GridBagLayout)"], "configurationStart": [106, 172], "configurationEnd": [164, 233], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 772, "focalAPIEnd": 797, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JSlider)", "jPanel.add(JCheckBox)", "JPanel.add(jPanel,GridBagConstraints)", "remove(jPanel)"], "useStart": [805, 841, 892, 950], "useEnd": [833, 873, 929, 970], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RamesesDev/osiris2/tree/master/client/rameses-client-ui/src/com/rameses/rcp/control/XImageViewer.java", "rawCode": "  private void attachAdvancedOptions() {\n    if (advanced) {\n      // if ( columnHeader == null ) {\n      columnHeader.setBorder(BorderFactory.createEtchedBorder());\n      columnHeader.setLayout(new FlowLayout(FlowLayout.LEFT, 1, 1));\n\n      zoomSlider = new JSlider(10, 200, 100);\n      zoomSlider.addChangeListener(\n          new ChangeListener() {\n            public void stateChanged(ChangeEvent e) {\n              zoomLevel = (zoomSlider.getValue() / 100.00);\n              // sliderBorder.setTitle(\"Zoom: \" + (int)(zoomLevel * 100) + \"%\");\n              lblZoom.setText(\"Zoom: \" + (int) (zoomLevel * 100) + \"%\");\n\n              canvas.repaint();\n              canvas.revalidate();\n            }\n          });\n      if (fitImage) zoomSlider.setEnabled(false);\n\n      columnHeader.add(lblZoom);\n      columnHeader.add(zoomSlider);\n      columnHeader.add(fitImgCheckBox);\n      // }\n      add(columnHeader, BorderLayout.NORTH);\n    } else {\n      remove(columnHeader);\n    }\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3927, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel()"], "initializationStart": [166, 481], "initializationEnd": [178, 493], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["logException(*,*,*,String)"], "tryExpressionStart": 31, "tryExpressionEnd": 35, "tryBlockStart": 31, "tryBlockEnd": 4245, "catchExpressionStart": 4130, "catchExpressionEnd": 4150, "catchBlockStart": 4130, "catchBlockEnd": 4245, "exceptionHandlingCallStart": [4158], "exceptionHandlingCallEnd": [4238], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 505, "focalAPIEnd": 532, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NLeSC/vbrowser/tree/master/source/nl.esciencecenter.vlet.gui.vbrowser/src/nl/esciencecenter/vlet/gui/dialog/ExceptionForm.java", "rawCode": "  private void initGUI() {\n    try {\n      BorderLayout thisLayout = new BorderLayout();\n      this.getContentPane().setLayout(thisLayout);\n      {\n        topPane = new JPanel();\n        this.getContentPane().add(topPane, BorderLayout.NORTH);\n        // topPane.setMaximumSize(new java.awt.Dimension(8, 8));\n        // topPane.setMinimumSize(new java.awt.Dimension(8, 8));\n        // topPane.setPreferredSize(new java.awt.Dimension(282, 22));\n        {\n          errorTextLabel = new JLabel();\n          topPane.add(errorTextLabel);\n          errorTextLabel.setText(\"VlException\");\n        }\n      }\n      {\n        leftPane = new JPanel();\n        this.getContentPane().add(leftPane, BorderLayout.WEST);\n        // leftPane.setPreferredSize(new java.awt.Dimension(9, 64));\n        // leftPane.setMaximumSize(new java.awt.Dimension(8, 8));\n      }\n      {\n        rightPane = new JPanel();\n        this.getContentPane().add(rightPane, BorderLayout.EAST);\n        // rightPane.setMaximumSize(new java.awt.Dimension(8, 8));\n        // rightPane.setMinimumSize(new java.awt.Dimension(8, 8));\n        // rightPane.setPreferredSize(new java.awt.Dimension(10, 64));\n      }\n      {\n        buttonPanel = new JPanel();\n        this.getContentPane().add(buttonPanel, BorderLayout.SOUTH);\n        // buttonPanel.setPreferredSize(new java.awt.Dimension(282, 26));\n        {\n          okButton = new JButton();\n          buttonPanel.add(okButton);\n          okButton.setText(\"Close\");\n          // okButton.setPreferredSize(new java.awt.Dimension(92, 18));\n          okButton.addActionListener(this);\n        }\n      }\n      {\n        mainTabPanel = new JTabbedPane();\n        this.getContentPane().add(mainTabPanel);\n        // mainTabPanel.setPreferredSize(new java.awt.Dimension(327, 131));\n        {\n          errorPanel = new JPanel();\n          mainTabPanel.addTab(\"Error\", null, errorPanel, null);\n          BorderLayout mainPanelLayout = new BorderLayout();\n          errorPanel.setLayout(mainPanelLayout);\n          // errorPanel.setPreferredSize(new java.awt.Dimension(303, 89));\n          errorPanel.setToolTipText(\"The error which occured\");\n          {\n            mainHeaderTextField = new JTextField();\n            errorPanel.add(mainHeaderTextField, BorderLayout.NORTH);\n            mainHeaderTextField.setText(\"Text\");\n            mainHeaderTextField.setEditable(false);\n            mainHeaderTextField.setFocusable(false);\n            mainHeaderTextField.setAutoscrolls(false);\n            mainHeaderTextField.setToolTipText(\"The Error which occured\");\n            // mainHeaderTextField.setPreferredSize(new java.awt.Dimension(303, 24));\n            mainHeaderTextField.setFont(new java.awt.Font(\"Dialog\", 1, 14));\n          }\n          {\n            errorScrollPane = new JScrollPane();\n            errorPanel.add(errorScrollPane, BorderLayout.CENTER);\n            errorScrollPane.setAutoscrolls(true);\n            errorScrollPane.getVerticalScrollBar().setAutoscrolls(true);\n            errorScrollPane.getHorizontalScrollBar().setAutoscrolls(true);\n            {\n              errorText = new JTextArea();\n              errorScrollPane.setViewportView(errorText);\n              errorText.setText(message);\n              // errorText.setSize(getPreferredSize());\n              errorText.setEditable(false);\n              errorText.setToolTipText(\"Extra information provided by the implementation.\");\n              errorText.setWrapStyleWord(true);\n            }\n            {\n            }\n          }\n        }\n        {\n          debugScrollPane = new JScrollPane();\n          mainTabPanel.addTab(\"debug\", null, debugScrollPane, null);\n          debugScrollPane.setToolTipText(\"Provides debug information\");\n          {\n            debugTextArea = new JTextArea();\n            debugScrollPane.setViewportView(debugTextArea);\n            debugTextArea.setText(\"(No debug info)\");\n            debugTextArea.setToolTipText(\"Debug information provided by the exception.\");\n            // debugTextArea.setPreferredSize(new java.awt.Dimension(296,42));\n          }\n        }\n      }\n      // this.setSize(337, 194);\n    } catch (Exception e) {\n      UILogger.logException(this, ClassLogger.ERROR, e, \"Exception during initGUI!\\n\");\n    }\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3928, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(*)"], "initializationStart": [2020, 2266], "initializationEnd": [2032, 2327], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "jPanel.setBorder(Border)", "jPanel.add(JPanel)", "jPanel.add(JButton)", "comp.setToolTipText(String)"], "configurationStart": [946, 991, 2155, 2188, 2333], "configurationEnd": [985, 1086, 2175, 2244, 2408], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 2415, "focalAPIEnd": 2435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JPanel)", "jPanel.add(JCheckBox)", "buildHeadPanel(jPanel,*)"], "useStart": [3043, 3462, 3494], "useEnd": [3063, 3480, 3569], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/silid/project-x-cvs/tree/master/src/net/sourceforge/dvb/projectx/gui/PreSettings.java", "rawCode": "  /** */\n  protected JPanel buildPostCommandsPanel() {\n    ActionListener _ExecuteListener =\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            try {\n              String actName = e.getActionCommand();\n              String str = \"\";\n\n              if (actName.equals(Keys.KEY_PostCommands_Cmd1[0]))\n                str = Common.getSettings().getProperty(Keys.KEY_PostCommands_Cmd1);\n              else if (actName.equals(Keys.KEY_PostCommands_Cmd2[0]))\n                str = Common.getSettings().getProperty(Keys.KEY_PostCommands_Cmd2);\n              else if (actName.equals(Keys.KEY_PostCommands_Cmd3[0]))\n                str = Common.getSettings().getProperty(Keys.KEY_PostCommands_Cmd3);\n\n              Common.performCommand(str);\n\n            } catch (Exception ex) {\n\n              Common.setExceptionMessage(ex);\n            }\n          }\n        };\n\n    JPanel container = new JPanel();\n    container.setLayout(new ColumnLayout());\n    container.setBorder(BorderFactory.createTitledBorder(Resource.getString(\"PostCommands.Title\")));\n\n    String[][] objects = {\n      Keys.KEY_PostCommands_Cmd1,\n      Keys.KEY_PostCommands_Cmd2,\n      Keys.KEY_PostCommands_Cmd3,\n      Keys.KEY_PostCommands_Cmd4,\n      Keys.KEY_PostCommands_Cmd5,\n      Keys.KEY_PostCommands_Cmd6,\n      Keys.KEY_PostCommands_Cmd7,\n      Keys.KEY_PostCommands_Cmd8\n    };\n\n    for (int i = 0; i < 3; i++) {\n      JTextField text_field = new JTextField(Common.getSettings().getProperty(objects[i]));\n      text_field.setPreferredSize(new Dimension(400, 25));\n      text_field.setEditable(true);\n      text_field.setActionCommand(objects[i][0]);\n      text_field.addActionListener(_TextFieldListener);\n      text_field.addKeyListener(_TextFieldKeyListener);\n\n      JButton exe = new JButton(Resource.getString(\"PostCommands.Execute\"));\n      exe.setActionCommand(objects[i][0]);\n      exe.setPreferredSize(new Dimension(100, 20));\n      exe.addActionListener(_ExecuteListener);\n\n      JPanel panel = new JPanel();\n      panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));\n      panel.add(text_field);\n      panel.add(exe);\n\n      container.add(panel);\n    }\n\n    container.add(Box.createRigidArea(new Dimension(1, 10)));\n\n    JLabel label = new JLabel(Resource.getString(\"PostCommands.PostProcessing\"));\n    label.setToolTipText(Resource.getString(\"PostCommands.PostProcessing.Tip\"));\n\n    container.add(label);\n\n    for (int i = 3; i < objects.length; i++) {\n      JTextField text_field = new JTextField(Common.getSettings().getProperty(objects[i]));\n      text_field.setPreferredSize(new Dimension(400, 25));\n      text_field.setEditable(true);\n      text_field.setActionCommand(objects[i][0]);\n      text_field.addActionListener(_TextFieldListener);\n      text_field.addKeyListener(_TextFieldKeyListener);\n\n      JPanel panel = new JPanel();\n      panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));\n      panel.add(text_field);\n      panel.add(new JLabel(Keys.ITEMS_ConversionMode[i - 3].toString()));\n\n      container.add(panel);\n    }\n\n    JCheckBox box = new JCheckBox(Resource.getString(Keys.KEY_PostProcessCompletion[0]));\n    box.setToolTipText(Resource.getString(Keys.KEY_PostProcessCompletion[0] + Keys.KEY_Tip));\n    box.setActionCommand(Keys.KEY_PostProcessCompletion[0]);\n    box.setSelected(Common.getSettings().getBooleanProperty(Keys.KEY_PostProcessCompletion));\n    box.addActionListener(_CheckBoxListener);\n\n    container.add(box);\n\n    return buildHeadPanel(container, Resource.getString(\"TabPanel.PostCommandsPanel\"));\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3929, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(String)"], "initializationStart": [262, 558], "initializationEnd": [294, 578], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 656, "focalAPIEnd": 672, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JLabel)", "jPanel.add(JTextField)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [680, 709, 733, 910], "useEnd": [701, 725, 754, 953], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/3.10.0/src/lib/com/izforge/izpack/installer/WebAccessor.java", "rawCode": "  /** Only to be called after an initial error has indicated a connection problem */\n  private JPanel getProxyPanel() {\n    if (proxyPanel == null) {\n      proxyPanel = new JPanel(new BorderLayout(5, 5));\n\n      errorLabel = new JLabel();\n\n      JPanel fields = new JPanel(new GridLayout(2, 2));\n      String h = (String) System.getProperties().get(\"proxyHost\");\n      String p = (String) System.getProperties().get(\"proxyPort\");\n      hostField = new JTextField(h != null ? h : \"\");\n      portField = new JTextField(p != null ? p : \"\");\n      JLabel host = new JLabel(\"Host: \"); // TODO: i18n\n      JLabel port = new JLabel(\"Port: \"); // TODO: i18n\n      fields.add(host);\n      fields.add(hostField);\n      fields.add(port);\n      fields.add(portField);\n\n      JLabel exampleLabel = new JLabel(\"e.g. host=\\\"gatekeeper.example.com\\\" port=\\\"80\\\"\");\n\n      proxyPanel.add(errorLabel, BorderLayout.NORTH);\n      proxyPanel.add(fields, BorderLayout.CENTER);\n      proxyPanel.add(exampleLabel, BorderLayout.SOUTH);\n    }\n    proxyPanel.validate();\n\n    return proxyPanel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3930, "initialization": ["JPanel jPanel = getContentPane()", "JLabel comp = new JLabel(*,*,*)"], "initializationStart": [119, 855], "initializationEnd": [135, 993], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [175], "configurationEnd": [204], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1220, "focalAPIEnd": 1249, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JCheckBox)", "jPanel.add(JProgressBar)", "jPanel.add(JButton)", "jPanel.add(JButton)"], "useStart": [1505, 1871, 2357, 2753], "useEnd": [1543, 1899, 2387, 2780], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/branches/branch-3-6/src/lib/com/izforge/izpack/uninstaller/UninstallerFrame.java", "rawCode": "  /** Builds the GUI. */\n  private void buildGUI() {\n    // We initialize our layout\n    JPanel contentPane = (JPanel) getContentPane();\n    layout = new GridBagLayout();\n    contentPane.setLayout(layout);\n    gbConstraints = new GridBagConstraints();\n    gbConstraints.insets = new Insets(5, 5, 5, 5);\n\n    // We prepare our action handler\n    ActionsHandler handler = new ActionsHandler();\n\n    // Prepares the glass pane to block gui interaction when needed\n    JPanel glassPane = (JPanel) getGlassPane();\n    glassPane.addMouseListener(new MouseAdapter() {});\n    glassPane.addMouseMotionListener(new MouseMotionAdapter() {});\n    glassPane.addKeyListener(new KeyAdapter() {});\n\n    // We set-up the buttons factory\n    ButtonFactory.useButtonIcons();\n    ButtonFactory.useHighlightButtons();\n\n    // We put our components\n\n    warningLabel =\n        new JLabel(\n            langpack.getString(\"uninstaller.warning\"),\n            icons.getImageIcon(\"warning\"),\n            JLabel.TRAILING);\n    buildConstraints(gbConstraints, 0, 0, 2, 1, 1.0, 0.0);\n    gbConstraints.anchor = GridBagConstraints.WEST;\n    gbConstraints.fill = GridBagConstraints.NONE;\n    layout.addLayoutComponent(warningLabel, gbConstraints);\n    contentPane.add(warningLabel);\n\n    targetDestroyCheckbox =\n        new JCheckBox(langpack.getString(\"uninstaller.destroytarget\") + installPath, false);\n    buildConstraints(gbConstraints, 0, 1, 2, 1, 1.0, 0.0);\n    layout.addLayoutComponent(targetDestroyCheckbox, gbConstraints);\n    contentPane.add(targetDestroyCheckbox);\n    gbConstraints.fill = GridBagConstraints.HORIZONTAL;\n\n    progressBar = new JProgressBar();\n    progressBar.setStringPainted(true);\n    progressBar.setString(langpack.getString(\"InstallPanel.begin\"));\n    buildConstraints(gbConstraints, 0, 2, 2, 1, 1.0, 0.0);\n    layout.addLayoutComponent(progressBar, gbConstraints);\n    contentPane.add(progressBar);\n\n    destroyButton =\n        ButtonFactory.createButton(\n            langpack.getString(\"uninstaller.uninstall\"),\n            icons.getImageIcon(\"delete\"),\n            buttonsHColor);\n    destroyButton.addActionListener(handler);\n    buildConstraints(gbConstraints, 0, 3, 1, 1, 0.5, 0.0);\n    gbConstraints.fill = GridBagConstraints.NONE;\n    gbConstraints.anchor = GridBagConstraints.WEST;\n    layout.addLayoutComponent(destroyButton, gbConstraints);\n    contentPane.add(destroyButton);\n\n    quitButton =\n        ButtonFactory.createButton(\n            langpack.getString(\"installer.quit\"), icons.getImageIcon(\"stop\"), buttonsHColor);\n    quitButton.addActionListener(handler);\n    buildConstraints(gbConstraints, 1, 3, 1, 1, 0.5, 0.0);\n    gbConstraints.anchor = GridBagConstraints.EAST;\n    layout.addLayoutComponent(quitButton, gbConstraints);\n    contentPane.add(quitButton);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3931, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(name,comp)", "focalAPIStart": 1306, "focalAPIEnd": 1354, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(String,JScrollPane)", "GridBagLayout.setConstraints(jPanel,GridBagConstraints)", "add(jPanel)", "jPanel.setVisible(boolean)"], "useStart": [1422, 1480, 1522, 2569], "useEnd": [1474, 1516, 1538, 2606], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cmadsen/Valkyrie-RCP/tree/master/valkyrie-rcp-core/src/main/java/org/valkyriercp/component/ShuttleList.java", "rawCode": "  /**\n   * Build our component panel.\n   *\n   * @return component\n   */\n  protected JComponent buildComponent() {\n    helperList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n\n    GridBagLayout gbl = new GridBagLayout();\n    GridBagConstraints gbc = new GridBagConstraints();\n\n    setLayout(gbl);\n\n    editButton = new JButton(\"Edit...\");\n    editButton.setIconTextGap(0);\n    editButton.setMargin(new Insets(2, 4, 2, 4));\n\n    editButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent event) {\n            togglePanels();\n          }\n        });\n\n    gbc.fill = GridBagConstraints.NONE;\n    gbc.weightx = 0.0;\n    gbc.weighty = 0.0;\n    gbc.insets = new Insets(0, 0, 0, 3);\n    gbc.anchor = GridBagConstraints.NORTHWEST;\n    gbl.setConstraints(editButton, gbc);\n    add(editButton);\n\n    sourceList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n    sourceList.addKeyListener(\n        new KeyAdapter() {\n          public void keyPressed(final KeyEvent e) {\n            if (e.getKeyCode() == KeyEvent.VK_ENTER || e.getKeyCode() == KeyEvent.VK_RIGHT) {\n              moveLeftToRight();\n            }\n          }\n        });\n\n    gbc.fill = GridBagConstraints.BOTH;\n    gbc.weightx = 1.0;\n    gbc.weighty = 1.0;\n    sourcePanel.add(BorderLayout.NORTH, sourceLabel);\n    JScrollPane sourceScroller = new JScrollPane(sourceList);\n    sourcePanel.add(BorderLayout.CENTER, sourceScroller);\n    gbl.setConstraints(sourcePanel, gbc);\n    add(sourcePanel);\n\n    // JPanel buttonPanel = new ControlButtonPanel();\n    JPanel buttonPanel = buildButtonPanel();\n    gbc.fill = GridBagConstraints.VERTICAL;\n    gbc.weightx = 0;\n    gbc.weighty = 1.0;\n    gbl.setConstraints(buttonPanel, gbc);\n    add(buttonPanel);\n\n    chosenList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n    chosenList.addKeyListener(\n        new KeyAdapter() {\n          public void keyPressed(final KeyEvent e) {\n            if (e.getKeyCode() == KeyEvent.VK_ENTER || e.getKeyCode() == KeyEvent.VK_LEFT) {\n              moveRightToLeft();\n            }\n          }\n        });\n    gbc.fill = GridBagConstraints.BOTH;\n    gbc.weightx = 1.0;\n    gbc.weighty = 1.0;\n    chosenPanel.add(BorderLayout.NORTH, chosenLabel);\n    JScrollPane chosenScroller = new JScrollPane(chosenList);\n    chosenPanel.add(BorderLayout.CENTER, chosenScroller);\n    gbl.setConstraints(chosenPanel, gbc);\n    add(chosenPanel);\n\n    editButton.setVisible(showEditButton);\n    this.buttonPanel.setVisible(panelsShowing);\n    sourcePanel.setVisible(panelsShowing);\n\n    return this;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3932, "initialization": ["JLabel comp = new JLabel(String)", "JPanel jPanel = new JPanel()"], "initializationStart": [786, 1158], "initializationEnd": [824, 1170], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1177, "focalAPIEnd": 1211, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JPanel)", "JPanel.add(jPanel)"], "useStart": [1217, 1264, 1473], "useEnd": [1258, 1297, 1504], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gonr1001/diamant/tree/master/src/dInterface/dAssignementDlgs/DxEventsDlg.java", "rawCode": "  /** Sets the _centerPanel, the panel containing the _centerList and the arrows panels */\n  private JPanel initCenterPanel() {\n    _assignedList = new JList(_assignedVector);\n    class CenterMouseListener extends MouseAdapter {\n      @Override\n      public void mouseClicked(MouseEvent e) {\n        if (e.getClickCount() == 2) {\n          doubleClicMouseProcess(_assignedList);\n        } // end if\n        if (e.getClickCount() == 1) {\n          _fixedList.clearSelection();\n          _noAssignedList.clearSelection();\n        } // end if\n      }\n    }\n    MouseAdapter CenterMouseListener = new CenterMouseListener();\n    _assignedList.addMouseListener(CenterMouseListener);\n    _assignedList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n\n    JLabel titleLabel = new JLabel(DConst.EVENTS_PLACED + \" \");\n    _labelForAssigned = new JLabel(String.valueOf(_assignedVector.size()));\n    _labelForAssigned.setForeground(DConst.COLOR_QUANTITY_DLGS);\n    // The listContainerPanel\n    JPanel listPanel = DxTools.listPanel(_assignedList);\n    listPanel.setPreferredSize(new Dimension(WIDTH_PANE, HEIGHT_PANE));\n    JPanel listContainerPanel = new JPanel();\n\n    listContainerPanel.add(titleLabel);\n    listContainerPanel.add(_labelForAssigned);\n    listContainerPanel.add(listPanel);\n\n    // the _centerPanel\n    JPanel panel = new JPanel();\n    panel.setLayout(new BorderLayout());\n\n    JPanel miPanel = new JPanel();\n    miPanel.add(_leftArrowsPanel);\n    miPanel.add(listContainerPanel);\n    miPanel.add(_rightArrowsPanel);\n\n    JPanel centerPanelTop = new JPanel();\n    centerPanelTop.add(titleLabel);\n    centerPanelTop.add(_labelForAssigned);\n    panel.add(centerPanelTop, BorderLayout.NORTH);\n    panel.add(miPanel, BorderLayout.CENTER);\n    return panel;\n  } // end method\n"}, {"dataset": "jPanelAdd", "exampleID": 3933, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [249], "configurationEnd": [301], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 307, "focalAPIEnd": 336, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JLabel)", "jPanel.add(JPasswordField)", "jPanel.add(JLabel)", "jPanel.add(JPasswordField)", "jPanel.setBorder(Border)", "jPanel.setOpaque(boolean)", "JPanel.add(jPanel)"], "useStart": [342, 372, 412, 447, 496, 540, 617, 916], "useEnd": [366, 406, 441, 490, 534, 611, 646, 946], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JavierCane/jHex/tree/master/src/prop/hex/presentacio/RegistraVista.java", "rawCode": "  @Override\n  protected void inicialitzaPanellCentral() {\n    panell_dades.setBorder(BorderFactory.createRaisedBevelBorder());\n    panell_dades.setLayout(new BoxLayout(panell_dades, BoxLayout.PAGE_AXIS));\n    JPanel panell_camps = new JPanel();\n    panell_camps.setLayout(new GridLayout(3, 2, 10, 10));\n    panell_camps.add(text_usuari);\n    panell_camps.add(usuari);\n    panell_camps.add(text_contrasenya);\n    panell_camps.add(contrasenya);\n    panell_camps.add(text_confirma_contrasenya);\n    panell_camps.add(confirma_contrasenya);\n    panell_camps.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n    panell_camps.setOpaque(false);\n    JPanel panell_botons = new JPanel();\n    panell_botons.setLayout(new FlowLayout());\n    panell_botons.add(accepta);\n    panell_botons.add(torna);\n    panell_botons.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n    panell_botons.setOpaque(false);\n    panell_dades.add(panell_camps);\n    panell_dades.add(panell_botons);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3934, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [183, 671], "initializationEnd": [195, 687], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setBorder(Border)"], "configurationStart": [201], "configurationEnd": [255], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 694, "focalAPIEnd": 707, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ekirkilevics/TestSSQL/tree/master/sql12/app/src/main/java/net/sourceforge/squirrel_sql/client/preferences/WikiTablePreferencesPanel.java", "rawCode": "  /**\n   * Create the panel with a small help text for the user. This panel indicates, which variables are\n   * allowed.\n   */\n  private Component createNotePanel() {\n    JPanel jp = new JPanel();\n    jp.setBorder(BorderFactory.createTitledBorder(\"Note\")); // $NON-NLS-1$\n\n    String text =\n        \"<html><body>\"\n            + // $NON-NLS-1$\n            s_stringMgr.getString(\"WikiTablePreferencesPanel.hintValueVariable\")\n            + // $NON-NLS-1$\n            \"<br />\"\n            + // $NON-NLS-1$\n            s_stringMgr.getString(\"WikiTablePreferencesPanel.hintNewLine\")\n            + // $NON-NLS-1$\n            \"</body></html>\"; // $NON-NLS-1$\n    JLabel label = new JLabel(text);\n\n    jp.add(label);\n\n    return jp;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3935, "initialization": ["JLabel comp = new JLabel(String,*)"], "initializationStart": [1466], "initializationEnd": [1496], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [1318], "configurationEnd": [1363], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1502, "focalAPIEnd": 1535, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JButton)", "jPanel.add(JLabel)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)"], "useStart": [1541, 1579, 1619, 1654, 1689, 1725, 1766, 1801], "useEnd": [1573, 1613, 1648, 1683, 1719, 1760, 1795, 1836], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Raisa/Raisa/tree/master/raisavis/src/main/java/raisa/ui/controls/MovementPanel.java", "rawCode": "  private void createManualControlPanel(final BasicController controller) {\n    JButton forwardButton = new JButton(\"F\");\n    forwardButton.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            controller.sendForward();\n          }\n        });\n    JButton stopButton = new JButton(\"S\");\n    stopButton.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            controller.sendStop();\n          }\n        });\n    JButton backButton = new JButton(\"B\");\n    backButton.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            controller.sendBack();\n          }\n        });\n    JButton leftButton = new JButton(\"L\");\n    leftButton.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            controller.sendLeft();\n          }\n        });\n    JButton rightButton = new JButton(\"R\");\n    rightButton.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            controller.sendRight();\n          }\n        });\n\n    manualControl.setLayout(new GridLayout(3, 3));\n    final JLabel leftSpeedLabel = new JLabel(\"0\", JLabel.CENTER);\n    final JLabel rightSpeedLabel = new JLabel(\"0\", JLabel.CENTER);\n    manualControl.add(leftSpeedLabel);\n    manualControl.add(forwardButton);\n    manualControl.add(rightSpeedLabel);\n    manualControl.add(leftButton);\n    manualControl.add(stopButton);\n    manualControl.add(rightButton);\n    manualControl.add(new JSeparator());\n    manualControl.add(backButton);\n    manualControl.add(new JSeparator());\n\n    controller.addContolListener(\n        new ControllerListener() {\n          @Override\n          public void controlsChanged(Controller controller) {\n            leftSpeedLabel.setText(\"\" + controller.getLeftSpeed());\n            rightSpeedLabel.setText(\"\" + controller.getRightSpeed());\n          }\n        });\n\n    SixaxisInput.getInstance()\n        .registerMovementButtons(forwardButton, backButton, leftButton, rightButton, stopButton);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3936, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(*)"], "initializationStart": [65, 205], "initializationEnd": [77, 295], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [83], "configurationEnd": [175], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 301, "focalAPIEnd": 336, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "JPanel.add(jPanel)"], "useStart": [413, 455], "useEnd": [449, 488], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rnatar609/ASTT-RoboCup-At-Work/tree/master/RefereePkg/src/view/MainGUI.java", "rawCode": "  private void createUpperServerPanel() {\n    upperServerPanel = new JPanel();\n    upperServerPanel.setLayout(new BoxLayout(upperServerPanel, javax.swing.BoxLayout.LINE_AXIS));\n    connectedIcon =\n        new JLabel(new ImageIcon(getClass().getResource(\"/view/resources/icons/status-busy.png\")));\n    upperServerPanel.add(connectedIcon);\n    connectedLabel = new JLabel();\n    connectedLabel.setText(noTeam);\n    upperServerPanel.add(connectedLabel);\n    serverPanel.add(upperServerPanel);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3937, "initialization": ["JPanel jPanel = new JPanel()"], "initializationStart": [1278], "initializationEnd": [1290], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "jPanel.add(JButton)"], "configurationStart": [1296, 1360], "configurationEnd": [1353, 1413], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1496, "focalAPIEnd": 1526, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JButton)", "jPanel.add(JCheckBox)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [1533, 1854, 1881, 2189, 2213, 2488, 2512, 2795, 2819], "useEnd": [1586, 1874, 1934, 2207, 2266, 2506, 2565, 2813, 2867], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/allardhoeve/pcgen-multiline-objects/tree/master/pcgen/code/src/java/plugin/initiative/gui/AttackDialog.java", "rawCode": "  /** Initiaizes the dialog components. */\n  private void initComponents() {\n    setTitle(\"Attack: \" + m_attack.toString());\n\n    // Set Layout\n    getContentPane().setLayout(new BorderLayout());\n\n    // Build the center panel with JTable and scroll pane\n    m_attack.getBonusList();\n    JPanel center = new JPanel(new BorderLayout());\n    getContentPane().add(center, BorderLayout.CENTER);\n\n    // This column model auto-sizes the columns based on contents.\n    AutoSizingColumnModel columns = new AutoSizingColumnModel();\n\n    m_tableModel = new AttackTableModel();\n    m_tableModel.addTableModelListener(\n        new TableModelListener() {\n          @Override\n          public void tableChanged(TableModelEvent e) {\n            handleTableUpdate(e);\n          }\n        });\n    m_table = new JTable(m_tableModel, columns);\n\n    columns.referenceTable(m_table);\n    m_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n    m_table.setAutoCreateColumnsFromModel(true);\n    m_table.setPreferredScrollableViewportSize(\n        new Dimension(\n            columns.getTotalPreferredWidth(), m_table.getRowHeight() * m_table.getRowCount()));\n\n    center.add(new JScrollPane(m_table), BorderLayout.CENTER);\n\n    // Build panel to contain buttons, controls at bottom\n    JPanel bottom = new JPanel();\n    bottom.setLayout(new BoxLayout(bottom, BoxLayout.X_AXIS));\n\n    bottom.add(Box.createRigidArea(new Dimension(10, 0)));\n\n    m_totalDamageLabel = new JLabel(\"<html>Total Damage: <b>0</b></html>\");\n    bottom.add(m_totalDamageLabel);\n\n    bottom.add(Box.createRigidArea(new Dimension(10, 0)));\n\n    JCheckBox checkbox = new JCheckBox(\"Damage is subdual?\");\n    checkbox.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            handleSubdualAction(e);\n          }\n        });\n\n    bottom.add(checkbox);\n\n    bottom.add(Box.createRigidArea(new Dimension(10, 0)));\n\n    JButton button = null;\n    button =\n        new JButton(\n            new AbstractAction(\"Roll\") {\n              @Override\n              public void actionPerformed(ActionEvent e) {\n                performRoll();\n              }\n            });\n    bottom.add(button);\n    bottom.add(Box.createRigidArea(new Dimension(10, 0)));\n    button =\n        new JButton(\n            new AbstractAction(\"Ok\") {\n              @Override\n              public void actionPerformed(ActionEvent e) {\n                handleOk();\n              }\n            });\n    bottom.add(button);\n    bottom.add(Box.createRigidArea(new Dimension(10, 0)));\n    button =\n        new JButton(\n            new AbstractAction(\"Cancel\") {\n              @Override\n              public void actionPerformed(ActionEvent e) {\n                handleCancel();\n              }\n            });\n    bottom.add(button);\n    getContentPane().add(bottom, BorderLayout.SOUTH);\n\n    JPanel top = new JPanel();\n    top.setLayout(new BoxLayout(top, BoxLayout.X_AXIS));\n\n    if ((m_combatants != null) && (m_combatants.size() > 0)) {\n      m_targets = new JComboBox(m_combatants);\n      m_table.setDefaultEditor(PcgCombatant.class, new DefaultCellEditor(m_targets));\n\n      // If we have combatants, initialize the top panel and populate\n      // the JComboBox\n      m_targetsCombo = new JComboBox(m_combatants);\n      m_targetsCombo.addActionListener(\n          new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n              handleTargetAction(e);\n            }\n          });\n      top.add(new JLabel(\"Attack Character: \"));\n      top.add(m_targetsCombo);\n      m_acTypeCombo = new JComboBox();\n      m_acTypeCombo.addItem(\"Total\");\n      m_acTypeCombo.addItem(\"Flatfooted\");\n      m_acTypeCombo.addItem(\"Touch\");\n      m_acTypeCombo.addActionListener(\n          new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n              handleAcTypeAction(e);\n            }\n          });\n      top.add(new JLabel(\"Use AC Type: \"));\n      top.add(m_acTypeCombo);\n    }\n\n    DefaultFormatter formatter = new DefaultFormatter();\n    formatter.setValueClass(Integer.class);\n    formatter.setCommitsOnValidEdit(true);\n    m_field = new JFormattedTextField(formatter);\n    m_field.setFocusLostBehavior(JFormattedTextField.COMMIT_OR_REVERT);\n    m_field.setPreferredSize(new Dimension(40, m_field.getPreferredSize().height));\n    m_field.addPropertyChangeListener(\n        new PropertyChangeListener() {\n          @Override\n          public void propertyChange(PropertyChangeEvent evt) {\n            if ((evt.getPropertyName() != null) && evt.getPropertyName().equals(\"value\")) {\n              m_tableModel.setArmorClass(((Integer) m_field.getValue()).intValue());\n            }\n          }\n        });\n    top.add(new JLabel(\"AC\"));\n    top.add(m_field);\n    m_field.setValue(Integer.valueOf(15));\n    handleTargetAction(null);\n    getContentPane().add(top, BorderLayout.NORTH);\n\n    // Pack and locate the dialog\n    pack();\n    setLocationRelativeTo(GMGenSystem.inst);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3938, "initialization": ["JPanel jPanel = new JButton(String)"], "initializationStart": [364], "initializationEnd": [381], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setBackground(Color)", "jPanel.setFont(Font)", "jPanel.setBorder(Border)", "jPanel.addActionListener(NumberInsert)", "jPanel.setForeground(Color)", "jPanel.setLayout(GridBagLayout)"], "configurationStart": [410, 450, 488, 596, 636, 679], "configurationEnd": [444, 482, 516, 628, 671, 717], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 967, "focalAPIEnd": 980, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chamhayden/COMP2911-ASS1/tree/master/src/SudokuFrame.java", "rawCode": "  /**\n   * Creates a new JButton used in the Sudoku 'play' area\n   *\n   * @param name is the button text\n   * @param panel is the JPanel button will belong to\n   * @param given says whether a button value is initially given or not\n   * @return the new JButton\n   */\n  private JButton makeGridButton(String name, JPanel panel, boolean given) {\n    JButton button = new JButton(name);\n    panel.add(button);\n    button.setBackground(DEFAULT_GRID);\n    button.setFont(givenSquaresFont);\n    button.setBorder(buttonLine);\n    if (!given) {\n      NumberInsert insert = new NumberInsert(button);\n      button.addActionListener(insert);\n      button.setForeground(userTempColor);\n      button.setLayout(new GridLayout(3, 3));\n      for (int i = 0; i < LABELS.length(); i++) {\n        String label = LABELS.substring(i, i + 1);\n        JLabel l = new JLabel(label);\n        l.setVisible(false);\n        l.setFont(draftSmallFont);\n        l.setForeground(draftColor);\n        button.add(l);\n      }\n    }\n    return button;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3939, "initialization": ["JPanel jPanel = new JPanel()"], "initializationStart": [45], "initializationEnd": [57], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "jPanel.setBorder(Border)", "jPanel.setMinimumSize(Dimension)", "jPanel.setPreferredSize(Dimension)", "jPanel.setMaximumSize(Dimension)", "jPanel.setBackground(Color)", "comp.addMouseListener(MouseListener)", "comp.setForeground(Color)", "comp.getFont()", "comp.setFont(Font)", "comp.setMinimumSize(Dimension)", "comp.setPreferredSize(Dimension)", "comp.setMaximumSize(Dimension)", "jPanel.add(JTextField)", "jPanel.add(JButton)"], "configurationStart": [63, 129, 200, 253, 308, 361, 426, 459, 512, 532, 609, 665, 723, 1265, 1293], "configurationEnd": [123, 194, 247, 302, 355, 403, 453, 490, 526, 603, 659, 717, 773, 1287, 1318], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1490, "focalAPIEnd": 1506, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JLabel)", "jPanel.add(JLabel)"], "useStart": [1512, 1540, 1571, 1615, 1644], "useEnd": [1534, 1565, 1609, 1638, 1662], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dsjas297/FaceBreak/tree/master/gui/FBPage.java", "rawCode": "  public void create_topnav() {\n    topnav = new JPanel();\n    topnav.setLayout(new BoxLayout(topnav, BoxLayout.LINE_AXIS));\n    topnav.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n    topnav.setMinimumSize(new Dimension(width, 50));\n    topnav.setPreferredSize(new Dimension(width, 50));\n    topnav.setMaximumSize(new Dimension(width, 50));\n    topnav.setBackground(new Color(130, 0, 0));\n\n    // add logo\n    logo.addMouseListener(this);\n    logo.setForeground(Color.white);\n    Font logoFont = logo.getFont();\n    logo.setFont(new Font(logoFont.getFontName(), logoFont.getStyle(), 36));\n    logo.setMinimumSize(new Dimension(prof_width, 50));\n    logo.setPreferredSize(new Dimension(prof_width, 50));\n    logo.setMaximumSize(new Dimension(prof_width, 50));\n\n    // add search bar\n    search_box = new JTextField(20);\n    search_box.setMinimumSize(new Dimension(200, 40));\n    search_box.setPreferredSize(new Dimension(200, 40));\n    search_box.setMaximumSize(new Dimension(200, 40));\n    search_button = new JButton(\"Search\");\n    search_button.setMinimumSize(new Dimension(75, 40));\n    search_button.setPreferredSize(new Dimension(75, 40));\n    search_button.setMaximumSize(new Dimension(75, 40));\n    search_button.addActionListener(this);\n    topnav.add(search_box);\n    topnav.add(search_button);\n\n    // add edit button\n    edit_button.setForeground(Color.white);\n    edit_button.addMouseListener(this);\n    // add logout\n    logout.setForeground(Color.white);\n\n    topnav.add(logo);\n    topnav.add(search_box);\n    topnav.add(search_button);\n    topnav.add(Box.createHorizontalGlue());\n    topnav.add(edit_button);\n    topnav.add(logout);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3940, "initialization": ["JPanel jPanel = new JPanel()"], "initializationStart": [224], "initializationEnd": [236], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "jPanel.add(JTextField)", "jPanel.add(JButton)"], "configurationStart": [343, 771, 1140], "configurationEnd": [366, 795, 1165], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1251, "focalAPIEnd": 1273, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JButton)"], "useStart": [1519, 1874], "useEnd": [1541, 1897], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/phillipphoenix/GPProjekt/tree/master/src/vehicleShepard/ReservationView.java", "rawCode": "  /**\n   * Creates the panel containing period informations\n   *\n   * @return panel The period panel including textfields and calendar buttons (which does nothing)\n   */\n  private JPanel getPriodPanel() {\n    JPanel panel = new JPanel();\n    GridBagLayout layout = new GridBagLayout();\n    GridBagConstraints c = new GridBagConstraints();\n    panel.setLayout(layout);\n    c.weightx = 1;\n    c.weighty = 0;\n    c.ipadx = X_PAD;\n    layout.setConstraints(panel, c);\n\n    c.gridx = 0;\n    c.gridy = 0;\n    c.weightx = 0.5;\n    c.fill = GridBagConstraints.HORIZONTAL;\n    c.anchor = GridBagConstraints.WEST;\n    dateFromField.setPreferredSize(\n        new Dimension(dateFromField.getPreferredSize().width, COMPONENT_HEIGHT));\n    layout.setConstraints(dateFromField, c);\n    panel.add(dateFromField);\n\n    c.gridx = 1;\n    c.weightx = 0;\n    dateFromButton.setIcon(View.loadImageIcon(\"res/icons/calendar.png\"));\n    dateFromButton.setBorder(null);\n    dateFromButton.setOpaque(true);\n    dateFromButton.setContentAreaFilled(false);\n    dateFromButton.setCursor(new Cursor(Cursor.HAND_CURSOR));\n    layout.setConstraints(dateFromButton, c);\n    panel.add(dateFromButton);\n\n    c.gridx = 2;\n    c.weightx = 0;\n    layout.setConstraints(dateToLabel, c);\n    panel.add(dateToLabel);\n\n    c.gridx = 3;\n    c.weightx = 0.5;\n    c.fill = GridBagConstraints.HORIZONTAL;\n    dateToField.setPreferredSize(\n        new Dimension(dateToField.getPreferredSize().width, COMPONENT_HEIGHT));\n    layout.setConstraints(dateToField, c);\n    panel.add(dateToField);\n\n    c.gridx = 4;\n    c.weightx = 0;\n    dateToButton.setIcon(View.loadImageIcon(\"res/icons/calendar.png\"));\n    dateToButton.setBorder(null);\n    dateToButton.setOpaque(true);\n    dateToButton.setContentAreaFilled(false);\n    dateToButton.setCursor(new Cursor(Cursor.HAND_CURSOR));\n    layout.setConstraints(dateToButton, c);\n    panel.add(dateToButton);\n\n    return panel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3941, "initialization": ["JPanel jPanel = new JPanel()"], "initializationStart": [165], "initializationEnd": [177], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setPreferredSize(Dimension)", "jPanel.setLayout(GridBagLayout)", "comp.setPreferredSize(Dimension)"], "configurationStart": [224, 389, 540], "configurationEnd": [277, 459, 594], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 601, "focalAPIEnd": 631, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JLabel)", "add(jPanel)"], "useStart": [637, 675, 705, 879], "useEnd": [669, 699, 735, 895], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/luukholleman/ASRSJava/tree/master/gui/CustomerPanel.java", "rawCode": "  /**\n   * Bouwt de ui\n   *\n   * @return void\n   */\n  private void buildUI() {\n    // panels aanmaken\n    JPanel columnPanel = new JPanel();\n    JPanel valuePanel = new JPanel();\n\n    // afmetingen bepalen van de panels\n    columnPanel.setPreferredSize(new Dimension(100, 150));\n    valuePanel.setPreferredSize(new Dimension(360, 150));\n\n    // de boxlayout laat de elementen stapelen\n    columnPanel.setLayout(new BoxLayout(columnPanel, BoxLayout.PAGE_AXIS));\n    valuePanel.setLayout(new BoxLayout(valuePanel, BoxLayout.PAGE_AXIS));\n\n    customerIdLbl.setPreferredSize(new Dimension(100, 20));\n\n    columnPanel.add(customerIdLbl);\n    columnPanel.add(customerNameLbl);\n    columnPanel.add(dateLbl);\n    columnPanel.add(totalPriceLbl);\n\n    valuePanel.add(customerIdVal);\n    valuePanel.add(customerNameVal);\n    valuePanel.add(dateVal);\n    valuePanel.add(totalPriceVal);\n\n    add(columnPanel);\n    add(valuePanel);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3942, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [103, 197], "initializationEnd": [115, 220], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [121], "configurationEnd": [176], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 226, "focalAPIEnd": 241, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jPanel)"], "useStart": [247], "useEnd": [267], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/broccolibird/i-prefr-gui/tree/master/src/multiStakeholderGUI/RolePane.java", "rawCode": "  @Override\n  public void update() {\n    // clear panel\n    rolePanel.removeAll();\n\n    JPanel label = new JPanel();\n    label.setLayout(new BoxLayout(label, BoxLayout.X_AXIS));\n\n    JLabel name = new JLabel(\"Role Name\");\n    label.add(name);\n    rolePanel.add(label);\n\n    // for every map entry, add a tuple to the table,then one more\n    Collection<Entry<Integer, Role>> set = map.entrySet();\n    for (Entry<Integer, Role> p : set)\n      rolePanel.add(new RoleTuple(p.getKey(), map, parentFrame, rolePanel, graph));\n    RoleTuple tuple = (RoleTuple) rolePanel.add(new RoleTuple(map, parentFrame, rolePanel, graph));\n\n    parentFrame.pack();\n    tuple.getTextField().requestFocusInWindow();\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3943, "initialization": ["JLabel comp = new JLabel(*)", "JPanel jPanel = new JPanel()"], "initializationStart": [648, 699], "initializationEnd": [677, 711], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [765], "configurationEnd": [788], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1109, "focalAPIEnd": 1131, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JScrollPane)"], "useStart": [1271], "useEnd": [1291], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ntj/ComplexRapidMiner/tree/master/src/com/rapidminer/operator/features/transformation/EigenvectorModelVisualization.java", "rawCode": "  private Component getEigenvalueTable() {\n    double varianceSum = 0.0d;\n    for (ComponentVector ev : this.eigenVectors) {\n      varianceSum += ev.getEigenvalue();\n    }\n\n    JTable eigenvalueTable = new ExtendedJTable();\n    eigenvalueTable.setModel(new EigenvalueModel(eigenVectors, cumulativeVariance, varianceSum));\n\n    StringBuffer result = new StringBuffer(\"<html><h1>\" + name + \" - Eigenvalues\" + \"</h1>\");\n    if (manualNumber) {\n      result.append(\"Number of Components: \" + numberOfComponents + \"<br><br>\");\n    } else {\n      result.append(\"Variance Threshold: \" + varianceThreshold + \"<br></html>\");\n    }\n\n    JLabel headerLabel = new JLabel(result.toString());\n\n    JPanel panel = new JPanel();\n    GridBagLayout layout = new GridBagLayout();\n    panel.setLayout(layout);\n    GridBagConstraints c = new GridBagConstraints();\n    c.fill = GridBagConstraints.BOTH;\n    c.weightx = 1.0d;\n    c.weighty = 0.0d;\n    c.anchor = GridBagConstraints.NORTHWEST;\n    c.insets = new Insets(11, 11, 11, 11);\n    c.gridwidth = GridBagConstraints.REMAINDER;\n\n    layout.setConstraints(headerLabel, c);\n    panel.add(headerLabel);\n\n    JScrollPane tablePane = new ExtendedJScrollPane(eigenvalueTable);\n    c.weighty = 1.0d;\n    layout.setConstraints(tablePane, c);\n    panel.add(tablePane);\n\n    return panel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3944, "initialization": ["JLabel comp = new JLabel(String)"], "initializationStart": [475], "initializationEnd": [502], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [417], "configurationEnd": [442], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1210, "focalAPIEnd": 1243, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JComboBox)", "jPanel.add(JLabel)", "jPanel.add(JComboBox)", "jPanel.add(JLabel)", "jPanel.add(JComboBox)", "jPanel.add(SpacerPanel)", "jPanel.add(JLabel)", "jPanel.add(JComboBox)", "jPanel.add(JPanel)", "jPanel.add(JPanel)"], "useStart": [1345, 1480, 1615, 1774, 1898, 2064, 2186, 2307, 2453, 2864], "useEnd": [1374, 1513, 1644, 1799, 1924, 2087, 2212, 2329, 2482, 2892], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cflewis/argouml/tree/master/src/uci/uml/ui/FindDialog.java", "rawCode": "  public void initNameLocTab() {\n    _elementName.setEditable(true);\n    _elementName.getEditor().getEditorComponent().setBackground(Color.white);\n    _diagramName.setEditable(true);\n    _diagramName.getEditor().getEditorComponent().setBackground(Color.white);\n\n    _elementName.addItem(\"*\");\n    _diagramName.addItem(\"*\");\n\n    // needs-more-work: add recent patterns\n    GridBagLayout gb = new GridBagLayout();\n    _nameLocTab.setLayout(gb);\n\n    JLabel elementNameLabel = new JLabel(\"Element Name:\");\n    JLabel diagramNameLabel = new JLabel(\"In Diagram:\");\n    JLabel typeLabel = new JLabel(\"Element Type:\");\n    JLabel locLabel = new JLabel(\"Search In:\");\n\n    _location.addItem(\"Entire Project\");\n\n    _typeDetails.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n    initTypes();\n\n    _typeDetails.setMinimumSize(new Dimension(200, 100));\n    _typeDetails.setPreferredSize(new Dimension(200, 100));\n    _typeDetails.setSize(new Dimension(200, 100));\n\n    GridBagConstraints c = new GridBagConstraints();\n    c.fill = GridBagConstraints.BOTH;\n    c.ipadx = 3;\n    c.ipady = 3;\n    c.gridwidth = 1;\n\n    c.gridx = 0;\n    c.gridy = 0;\n    c.weightx = 0.0;\n    gb.setConstraints(elementNameLabel, c);\n    _nameLocTab.add(elementNameLabel);\n\n    c.gridx = 1;\n    c.gridy = 0;\n    c.weightx = 1.0;\n    gb.setConstraints(_elementName, c);\n    _nameLocTab.add(_elementName);\n\n    c.gridx = 0;\n    c.gridy = 1;\n    c.weightx = 0.0;\n    gb.setConstraints(diagramNameLabel, c);\n    _nameLocTab.add(diagramNameLabel);\n\n    c.gridx = 1;\n    c.gridy = 1;\n    c.weightx = 1.0;\n    gb.setConstraints(_diagramName, c);\n    _nameLocTab.add(_diagramName);\n\n    // open space at gridy = 2\n\n    c.gridx = 0;\n    c.gridy = 3;\n    c.weightx = 0.0;\n    gb.setConstraints(locLabel, c);\n    _nameLocTab.add(locLabel);\n\n    c.gridx = 1;\n    c.gridy = 3;\n    c.weightx = 1.0;\n    gb.setConstraints(_location, c);\n    _nameLocTab.add(_location);\n\n    SpacerPanel spacer = new SpacerPanel();\n    c.gridx = 2;\n    c.gridy = 0;\n    c.weightx = 0.0;\n    gb.setConstraints(spacer, c);\n    _nameLocTab.add(spacer);\n\n    c.gridx = 3;\n    c.gridy = 0;\n    c.weightx = 0.0;\n    gb.setConstraints(typeLabel, c);\n    _nameLocTab.add(typeLabel);\n\n    c.gridx = 4;\n    c.gridy = 0;\n    c.weightx = 1.0;\n    gb.setConstraints(_type, c);\n    _nameLocTab.add(_type);\n\n    c.gridx = 3;\n    c.gridy = 1;\n    c.gridwidth = 2;\n    c.gridheight = 5;\n    gb.setConstraints(_typeDetails, c);\n    _nameLocTab.add(_typeDetails);\n\n    JPanel searchPanel = new JPanel();\n    searchPanel.setLayout(new GridLayout(1, 2, 5, 5));\n    searchPanel.add(_clearTabs);\n    searchPanel.add(_search);\n    searchPanel.setBorder(new EmptyBorder(10, 10, 10, 10));\n    c.gridx = 0;\n    c.gridy = 4;\n    c.weightx = 0.0;\n    c.weighty = 0.0;\n    c.gridwidth = 2;\n    c.gridheight = 1;\n    gb.setConstraints(searchPanel, c);\n    _nameLocTab.add(searchPanel);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3945, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel()"], "initializationStart": [911, 1107], "initializationEnd": [923, 1119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "jPanel.setBounds(int,int,int,int)", "jPanel.setOpaque(boolean)", "comp.setForeground(Color)", "comp.setFont(Font)", "comp.setHorizontalAlignment(int)"], "configurationStart": [930, 975, 1018, 1125, 1175, 1232], "configurationEnd": [969, 1012, 1044, 1169, 1226, 1267], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1293, "focalAPIEnd": 1317, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Projet-Tech/Projet_info4_2012/tree/master/ProjectGammon/src/main/java/fr/ujm/tse/info4/pgammon/vues/PanelVueListeJoueurDescription.java", "rawCode": "  public void build() {\n\n    imagejoueur = new ImageAvatar(\"\");\n    imagejoueur.setBounds(25, 40, 105, 105);\n    add(imagejoueur);\n\n    JLabel textStat = new JLabel();\n    coupPossible = new MonochromeCheckbox(\"<html> Afficher les <br> coups possibles\");\n    conseilCoup = new MonochromeCheckbox(\"<html> conseiller le <br> prochain coup\");\n\n    // cette ligne permet d'afficher le conseil coup\n    // mais il n'est pas encore implémenté donc on le cache dés le début\n    conseilCoup.setVisible(false);\n\n    JLabel labStat = new JLabel(\"Statistiques\");\n    labStat.setForeground(new Color(0xCCCCCC));\n    labStat.setBounds(15, 140, 200, 50);\n    add(labStat);\n\n    JLabel labConfig = new JLabel(\"Configuration de l'assistant\");\n    labConfig.setForeground(new Color(0xCCCCCC));\n    labConfig.setBounds(15, 290, 200, 50);\n    add(labConfig);\n\n    // creation panel pour positionnement text\n    JPanel posPseudo = new JPanel();\n\n    posPseudo.setLayout(new BorderLayout());\n    posPseudo.setBounds(140, 40, 180, 50);\n    posPseudo.setOpaque(false);\n\n    // label de d'ecriture du nom de joueur\n    nomJoueur = new JLabel();\n    nomJoueur.setForeground(new Color(0xCCCCCC));\n    nomJoueur.setFont(new Font(\"Arial\", Font.BOLD, 20));\n    nomJoueur.setHorizontalAlignment(0);\n    add(posPseudo);\n    posPseudo.add(nomJoueur);\n\n    // creation panel pour positionnement text des stats\n    JPanel posStat = new JPanel();\n\n    posStat.setLayout(new BorderLayout());\n    posStat.setBounds(180, 180, 140, 100);\n    posStat.setOpaque(false);\n\n    // label de d'ecriture du nom de joueur\n    statisitques = new JLabel();\n    statisitques.setText(\"test\");\n    statisitques.setForeground(new Color(0xCCCCCC));\n    statisitques.setFont(new Font(\"Arial\", Font.HANGING_BASELINE, 12));\n    // statisitques.setHorizontalAlignment(0);\n    add(posStat);\n    posStat.add(statisitques);\n\n    // affichage des stats du joueur\n    textStat.setForeground(new Color(0xCCCCCC));\n    textStat.setText(\n        \"<html>Parties jouées :\"\n            + \"<br>Victoires :\"\n            + \"<br>Défaites :\"\n            + \"<br>Pourcentage de victoire :\"\n        /*+\"<br>Ennemi favori :\" */ );\n\n    textStat.setBounds(15, 130, 140, 200);\n    textStat.setFont(new Font(\"Arial\", Font.HANGING_BASELINE, 12));\n\n    // creation composant checbox\n    conseilCoup.setForeground(new Color(0xCCCCCC));\n    conseilCoup.setBounds(180, 320, 150, 50);\n    conseilCoup.setOpaque(false);\n\n    // creation composant checbox\n    coupPossible.setForeground(new Color(0xCCCCCC));\n    coupPossible.setBounds(15, 320, 150, 50);\n    coupPossible.setOpaque(false);\n\n    // conteneurimgpion\n\n    add(coupPossible);\n    add(conseilCoup);\n    add(textStat);\n\n    modifier = new MonochromeButton(\"Modifier\");\n    modifier.setBounds(15, 380, 140, 50);\n    add(modifier);\n\n    supprimer = new MonochromeButton(\"Supprimer\");\n    supprimer.setBounds(175, 380, 140, 50);\n    add(supprimer);\n\n    listenerboutonchangerCoupPossible();\n    listenerboutonchangerConseilcoup();\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3946, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel()"], "initializationStart": [44, 1136], "initializationEnd": [56, 1148], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "comp.setText(String)", "comp.setForeground(Color)", "comp.setVisible(boolean)"], "configurationStart": [230, 1154, 1205, 1253], "configurationEnd": [279, 1199, 1247, 1277], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1516, "focalAPIEnd": 1537, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JDateChooser)", "jPanel.add(JLabel)", "jPanel.add(JSpinner)", "jPanel.add(JButton)", "jPanel.add(JButton)"], "useStart": [1543, 1574, 1604, 1632, 1666, 1694, 1727], "useEnd": [1568, 1598, 1626, 1660, 1688, 1721, 1754], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ricki/iso2010-11/tree/master/src/com/umbrella/worldconq/ui/DateDialog.java", "rawCode": "  private void initGUI() {\n\n    mainPanel = new JPanel();\n    final BorderLayout thisLayout = new BorderLayout();\n    this.getContentPane().setLayout(thisLayout);\n    this.getContentPane().add(mainPanel, BorderLayout.CENTER);\n    mainPanel.setLayout(new GridLayout(4, 2, 10, 10));\n\n    dateLabel = new JLabel();\n    dateLabel.setText(\"Fecha de la partida:\");\n\n    emptyLabel = new JLabel();\n\n    jdFecha = new JDateChooser();\n    jdFecha.setDateFormatString(\"dd/MM/yyyy\");\n    jdFecha.setDate(Calendar.getInstance().getTime());\n\n    gameHourLabel = new JLabel();\n    gameHourLabel.setText(\"Hora de la partida (HH:mm)\");\n\n    final SpinnerDateModel spinnerDateModel =\n        new SpinnerDateModel(new Date(), null, null, Calendar.HOUR_OF_DAY);\n    hourMin = new JSpinner(spinnerDateModel);\n    final JFormattedTextField tf = ((JSpinner.DefaultEditor) hourMin.getEditor()).getTextField();\n    final DefaultFormatterFactory factory = (DefaultFormatterFactory) tf.getFormatterFactory();\n    final DateFormatter formatter = (DateFormatter) factory.getDefaultFormatter();\n    formatter.setFormat(new SimpleDateFormat(\"HH:mm\"));\n\n    errorD = new JLabel();\n    errorD.setText(\"Fecha introducida no válida\");\n    errorD.setForeground(new Color(255, 0, 0));\n    errorD.setVisible(false);\n\n    acceptButton = new JButton(\"Aceptar\");\n    acceptButton.addMouseListener(new AcceptMouseAdapter(this, true));\n\n    cancelButton = new JButton(\"Cancelar\");\n    cancelButton.addMouseListener(new CancelMouseAdapter(this, false));\n\n    mainPanel.add(errorD);\n    mainPanel.add(emptyLabel);\n    mainPanel.add(dateLabel);\n    mainPanel.add(jdFecha);\n    mainPanel.add(gameHourLabel);\n    mainPanel.add(hourMin);\n    mainPanel.add(acceptButton);\n    mainPanel.add(cancelButton);\n\n    hourMin.getModel().setValue(hourMin.getModel().getNextValue());\n    hourMin.getModel().setValue(hourMin.getModel().getPreviousValue());\n    c = new GregorianCalendar();\n\n    this.pack();\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3947, "initialization": ["JLabel comp = new JLabel(String)"], "initializationStart": [644], "initializationEnd": [692], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setBorder(Border)", "jPanel.setLayout(GridBagLayout)"], "configurationStart": [465, 541], "configurationEnd": [511, 603], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 698, "focalAPIEnd": 729, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Icy-imaging/Icy-Kernel/tree/master/icy/gui/system/NewVersionFrame.java", "rawCode": "  private void initialize() {\n    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n\n    contentPane = new JPanel();\n    contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));\n    contentPane.setLayout(new BorderLayout(0, 0));\n    setContentPane(contentPane);\n\n    final JPanel panel = new JPanel();\n    contentPane.add(panel, BorderLayout.NORTH);\n    panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));\n\n    final JPanel panel_1 = new JPanel();\n    panel_1.setBorder(new EmptyBorder(2, 0, 2, 0));\n    panel.add(panel_1);\n    panel_1.setLayout(new BoxLayout(panel_1, BoxLayout.LINE_AXIS));\n\n    final JLabel lblHeresTheChanges = new JLabel(\"A new version has been installed !\");\n    panel_1.add(lblHeresTheChanges);\n    lblHeresTheChanges.setFont(new Font(\"Tahoma\", Font.BOLD, 12));\n    lblHeresTheChanges.setHorizontalAlignment(SwingConstants.CENTER);\n\n    final JPanel panel_2 = new JPanel();\n    panel_2.setBorder(new EmptyBorder(2, 0, 2, 0));\n    panel.add(panel_2);\n    panel_2.setLayout(new BoxLayout(panel_2, BoxLayout.LINE_AXIS));\n\n    final JLabel lblNewLabel = new JLabel(\"Checkout what is new in this version:\");\n    panel_2.add(lblNewLabel);\n    lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);\n    lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 12));\n\n    final JScrollPane scrollPane = new JScrollPane();\n    contentPane.add(scrollPane, BorderLayout.CENTER);\n\n    changesLogTextPane = new JTextPane();\n    changesLogTextPane.setEditable(false);\n    scrollPane.setViewportView(changesLogTextPane);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3948, "initialization": ["JPanel jPanel = createVerticalBox()"], "initializationStart": [108], "initializationEnd": [131], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 386, "focalAPIEnd": 406, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JButton)", "jPanel.add(JLabel)", "JPanel.add(String,jPanel)"], "useStart": [412, 441, 463, 490, 1778], "useEnd": [435, 457, 484, 511, 1812], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jevinskie/contiki/tree/master/tools/cooja/java/se/sics/cooja/interfaces/Radio.java", "rawCode": "  public JPanel getInterfaceVisualizer() {\n    JPanel panel = new JPanel(new BorderLayout());\n    Box box = Box.createVerticalBox();\n\n    final JLabel statusLabel = new JLabel(\"\");\n    final JLabel lastEventLabel = new JLabel(\"\");\n    final JLabel channelLabel = new JLabel(\"\");\n    final JLabel ssLabel = new JLabel(\"\");\n    final JButton updateButton = new JButton(\"Update SS\");\n\n    box.add(statusLabel);\n    box.add(lastEventLabel);\n    box.add(ssLabel);\n    box.add(updateButton);\n    box.add(channelLabel);\n\n    updateButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            ssLabel.setText(\n                \"Signal strength (not auto-updated): \"\n                    + String.format(\"%1.1f\", getCurrentSignalStrength())\n                    + \" dBm\");\n          }\n        });\n\n    final Observer observer =\n        new Observer() {\n          public void update(Observable obs, Object obj) {\n            if (isTransmitting()) {\n              statusLabel.setText(\"Transmitting\");\n            } else if (isReceiving()) {\n              statusLabel.setText(\"Receiving\");\n            } else {\n              statusLabel.setText(\"Listening\");\n            }\n\n            lastEventLabel.setText(\"Last event: \" + getLastEvent());\n            ssLabel.setText(\n                \"Signal strength (not auto-updated): \"\n                    + String.format(\"%1.1f\", getCurrentSignalStrength())\n                    + \" dBm\");\n            if (getChannel() == -1) {\n              channelLabel.setText(\"Current channel: ALL\");\n            } else {\n              channelLabel.setText(\"Current channel: \" + getChannel());\n            }\n          }\n        };\n    this.addObserver(observer);\n\n    observer.update(null, null);\n\n    panel.add(BorderLayout.NORTH, box);\n    panel.putClientProperty(\"intf_obs\", observer);\n    return panel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3949, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(String,*,*)"], "initializationStart": [1661, 1773], "initializationEnd": [1706, 1949], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setBackground(Color)"], "configurationStart": [1712], "configurationEnd": [1744], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1955, "focalAPIEnd": 1971, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jPanel,GridBagConstraints)"], "useStart": [4740], "useEnd": [4794], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/agilebirds/openflexo/tree/master/flexodesktop/GUI/flexo/src/main/java/org/openflexo/module/AutoSaveService.java", "rawCode": "  public void showTimeTravelerDialog() {\n    pause();\n    final FlexoDialog dialog = new FlexoDialog(FlexoFrame.getActiveFrame(), true);\n    final ParameterDefinition[] parameters = new ParameterDefinition[2];\n    parameters[0] =\n        new ReadOnlyTextFieldParameter(\n            \"directory\", \"save_directory\", autoSaveThread.getTempDirectory().getAbsolutePath());\n    parameters[1] =\n        new PropertyListParameter<FlexoAutoSaveFile>(\n            \"backUps\",\n            FlexoLocalization.localizedForKey(\"back-ups\"),\n            autoSaveThread.getProjects(),\n            20,\n            12);\n    ((PropertyListParameter) parameters[1])\n        .addReadOnlyTextFieldColumn(\"creationDateAsAString\", \"creation_date\", 100, true);\n    ((PropertyListParameter) parameters[1])\n        .addReadOnlyTextFieldColumn(\"offset\", \"offset\", 100, true);\n    ((PropertyListParameter) parameters[1]).addReadOnlyTextFieldColumn(\"path\", \"path\", 450, true);\n    /*parameters[1] = new CheckboxParameter(\"autoSaveEnabled\", FlexoLocalization.localizedForKey(\"enable_auto_save\"),GeneralPreferences.getAutoSaveEnabled());\n    parameters[2] = new IntegerParameter(\"autoSaveInterval\", FlexoLocalization.localizedForKey(\"auto_save_interval (minutes)\"),GeneralPreferences.getAutoSaveInterval());\n    parameters[2].setDepends(\"autoSaveEnabled\");\n    parameters[2].setConditional(\"autoSaveEnabled=true\");\n    parameters[3] = new IntegerParameter(\"autoSaveLimit\", FlexoLocalization.localizedForKey(\"limit (0=no_limit)\"),GeneralPreferences.getAutoSaveLimit());\n    parameters[3].setDepends(\"autoSaveEnabled\");\n    parameters[3].setConditional(\"autoSaveEnabled=true\");*/\n    JPanel north = new JPanel(new FlowLayout(FlowLayout.CENTER));\n    north.setBackground(Color.WHITE);\n    JLabel label =\n        new JLabel(\n            \"<html>\" + FlexoLocalization.localizedForKey(\"time_travel_info\") + \"</html>\",\n            IconLibrary.TIME_TRAVEL_ICON,\n            SwingConstants.LEFT);\n    north.add(label);\n    AskParametersPanel panel = new AskParametersPanel(project, parameters);\n    JPanel south = new JPanel(new FlowLayout(FlowLayout.CENTER));\n    JButton cancel = new JButton(FlexoLocalization.localizedForKey(\"cancel\"));\n    cancel.addActionListener(\n        new ActionListener() {\n          /**\n           * Overrides actionPerformed\n           *\n           * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)\n           */\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            dialog.dispose();\n            resume();\n          }\n        });\n    JButton ok = new JButton(FlexoLocalization.localizedForKey(\"restore\"));\n    ok.addActionListener(\n        new ActionListener() {\n          /**\n           * Overrides actionPerformed\n           *\n           * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)\n           */\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            dialog.dispose();\n            FlexoAutoSaveFile autoSaveFile =\n                (FlexoAutoSaveFile) ((PropertyListParameter) parameters[1]).getSelectedObject();\n            if (autoSaveFile != null) {\n              if (FlexoController.confirm(\n                  FlexoLocalization.localizedForKey(\n                      \"are_you_sure_that_you_want_to_revert_to_that_version?\"))) {\n                try {\n                  ProgressWindow.showProgressWindow(\n                      FlexoFrame.getActiveFrame(),\n                      FlexoLocalization.localizedForKey(\"project_restoration\"),\n                      4);\n                  restoreAutoSaveProject(autoSaveFile, ProgressWindow.instance());\n                } catch (IOException e1) {\n                  e1.printStackTrace();\n                  FlexoController.showError(\n                      FlexoLocalization.localizedForKey(\n                              \"an_error_occured_while_trying_to_restore_your_project\")\n                          + \"\\n\"\n                          + project.getProjectDirectory().getAbsolutePath());\n                }\n              } else {\n                resume();\n              }\n            } else {\n              resume();\n            }\n          }\n        });\n    dialog.addWindowListener(\n        new WindowAdapter() {\n          /**\n           * Overrides windowClosing\n           *\n           * @see java.awt.event.WindowAdapter#windowClosing(java.awt.event.WindowEvent)\n           */\n          @Override\n          public void windowClosing(WindowEvent e) {\n            resume();\n            super.windowClosing(e);\n          }\n        });\n    south.add(ok);\n    south.add(cancel);\n    dialog.getContentPane().setLayout(new BorderLayout());\n    dialog.getContentPane().add(panel);\n    dialog.getContentPane().add(north, BorderLayout.NORTH);\n    dialog.getContentPane().add(south, BorderLayout.SOUTH);\n    dialog.setTitle(FlexoLocalization.localizedForKey(\"time_traveler\"));\n    dialog.validate();\n    dialog.pack();\n    dialog.show();\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3950, "initialization": ["JLabel comp = new JLabel(String,*)", "JPanel jPanel = new JPanel(*)"], "initializationStart": [483, 3980], "initializationEnd": [511, 4012], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setText(String)", "jPanel.setOpaque(boolean)", "jPanel.setBorder(Border)", "comp.setPreferredSize(Dimension)"], "configurationStart": [554, 4022, 4102, 4179], "configurationEnd": [596, 4049, 4168, 4251], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 4262, "focalAPIEnd": 4283, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JComponent)", "JPanel.add(jPanel)"], "useStart": [4293, 4325], "useEnd": [4314, 4355], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Echo-tcx/Jitsi/tree/master/src/net/java/sip/communicator/impl/gui/main/chat/conference/ChatRoomConfigurationWindow.java", "rawCode": "  /** Loads the configuration form obtained from the chat room. */\n  private void loadConfigurationForm() {\n    Iterator<ChatRoomConfigurationFormField> configurationSet = configForm.getConfigurationSet();\n\n    while (configurationSet.hasNext()) {\n      ChatRoomConfigurationFormField formField = configurationSet.next();\n\n      Iterator<?> values = formField.getValues();\n      Iterator<String> options = formField.getOptions();\n\n      JComponent field = null;\n      JLabel label = new JLabel(\"\", JLabel.RIGHT);\n\n      if (formField.getLabel() != null) label.setText(formField.getLabel() + \": \");\n\n      String fieldType = formField.getType();\n\n      if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_BOOLEAN)) {\n        // Create a check box when the field is of type boolean.\n        field = new SIPCommCheckBox(formField.getLabel());\n\n        if (values.hasNext()) {\n          ((JCheckBox) field).setSelected(((Boolean) values.next()).booleanValue());\n        }\n      } else if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_TEXT_FIXED)) {\n        field = new JLabel();\n\n        if (values.hasNext()) {\n          String value = values.next().toString();\n\n          ((JLabel) field).setText(value);\n          ((JLabel) field).setFont(new Font(null, Font.ITALIC, 9));\n          ((JLabel) field).setForeground(Color.GRAY);\n        }\n      } else if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_LIST_MULTI)) {\n        field = new JPanel(new GridLayout(0, 1));\n\n        field.setBorder(BorderFactory.createLineBorder(Color.GRAY));\n\n        Hashtable<Object, JCheckBox> optionCheckBoxes = new Hashtable<Object, JCheckBox>();\n\n        while (options.hasNext()) {\n          Object option = options.next();\n          JCheckBox checkBox = new SIPCommCheckBox(option.toString());\n\n          field.add(checkBox);\n          optionCheckBoxes.put(option, checkBox);\n        }\n\n        while (values.hasNext()) {\n          Object value = values.next();\n\n          (optionCheckBoxes.get(value)).setSelected(true);\n        }\n      } else if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_LIST_SINGLE)) {\n        field = new JComboBox();\n\n        while (options.hasNext()) {\n          ((JComboBox) field).addItem(options.next());\n        }\n\n        if (values.hasNext()) {\n          ((JComboBox) field).setSelectedItem(values.next());\n        }\n      } else if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_TEXT_MULTI)) {\n        field = new JEditorPane();\n\n        if (values.hasNext()) {\n          String value = values.next().toString();\n\n          ((JEditorPane) field).setText(value);\n        }\n      } else if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_TEXT_SINGLE)) {\n        field = new JTextField();\n\n        if (values.hasNext()) {\n          String value = values.next().toString();\n\n          ((JTextField) field).setText(value);\n        }\n      } else if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_TEXT_PRIVATE)) {\n        field = new JPasswordField();\n\n        if (values.hasNext()) {\n          String value = values.next().toString();\n\n          ((JPasswordField) field).setText(value);\n        }\n      } else {\n        if (label.getText() == null) continue;\n\n        field = new JTextField();\n\n        if (values.hasNext()) {\n          String value = values.next().toString();\n\n          ((JTextField) field).setText(value);\n        }\n      }\n\n      // If the field is not fixed (i.e. could be changed) we would like\n      // to save it in a list in order to use it later when user saves\n      // the configuration data.\n      if (!fieldType.equals(ChatRoomConfigurationFormField.TYPE_TEXT_FIXED)) {\n        uiFieldsTable.put(formField.getName(), field);\n      }\n\n      // If the field is of type boolean we would like to separate it in\n      // the options panel.\n      if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_BOOLEAN)) {\n        roomOptionsPanel.add(field);\n      } else {\n        JPanel fieldPanel = new JPanel(new GridLayout(1, 2));\n        fieldPanel.setOpaque(false);\n\n        if (!(field instanceof JLabel))\n          fieldPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));\n\n        label.setPreferredSize(new Dimension(computeLabelWidth(configForm), 30));\n\n        fieldPanel.add(label);\n        fieldPanel.add(field);\n\n        this.mainPanel.add(fieldPanel);\n      }\n    }\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3951, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(String,*)"], "initializationStart": [274, 333], "initializationEnd": [306, 381], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 449, "focalAPIEnd": 473, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JPanel)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [1354, 1915], "useEnd": [1376, 1954], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vahokif/jmt/tree/master/src/jmt/gui/jwat/workloadAnalysis/panels/InputPanel.java", "rawCode": "  /**\n   * Creates or returns the interval option panel\n   *\n   * @return interval option panel\n   */\n  private JPanel createIntervalOptionPanel() {\n    if (intervalOptionPanel == null) {\n      intervalOptionPanel = new JPanel(new BorderLayout());\n\n      JPanel fromPanel = new JPanel(new GridLayout(1, 2));\n      JLabel fromLabel = new JLabel(\"From observation #: \", JLabel.RIGHT);\n      // fromLabel.setPreferredSize(new Dimension(70, 25));\n      fromPanel.add(fromLabel);\n      intervalFromObs = new JSpinner(new SpinnerNumberModel(0, 0, 0, 1));\n      intervalFromObs.addChangeListener(\n          new ChangeListener() {\n            public void stateChanged(ChangeEvent e) {\n              if (((SpinnerNumberModel) intervalFromObs.getModel()).getNumber().longValue()\n                  >= ((SpinnerNumberModel) intervalToObs.getModel()).getNumber().longValue()) {\n                ((SpinnerNumberModel) intervalToObs.getModel())\n                    .setValue(\n                        new Integer(\n                            ((SpinnerNumberModel) intervalFromObs.getModel()).getNumber().intValue()\n                                + 1));\n              }\n            }\n          });\n      intervalFromObs.setPreferredSize(new Dimension(70, 25));\n      JPanel fromPan = new JPanel(new FlowLayout(FlowLayout.LEFT));\n      fromPan.add(intervalFromObs);\n      fromPanel.add(fromPan);\n\n      JPanel toPanel = new JPanel(new GridLayout(1, 2));\n      JLabel toLabel = new JLabel(\"To observation #: \", JLabel.RIGHT);\n      toLabel.setPreferredSize(new Dimension(70, 25));\n      toPanel.add(toLabel);\n      intervalToObs = new JSpinner(new SpinnerNumberModel(0, 0, 0, 1));\n      intervalToObs.setPreferredSize(new Dimension(70, 25));\n      JPanel toPan = new JPanel(new FlowLayout(FlowLayout.LEFT));\n      toPan.add(intervalToObs);\n      toPanel.add(toPan);\n\n      JPanel temp = new JPanel(new GridLayout(2, 1, 0, 10));\n      temp.add(fromPanel, BorderLayout.NORTH);\n      temp.add(toPanel, BorderLayout.SOUTH);\n\n      intervalOptionPanel.add(temp, BorderLayout.NORTH);\n    } else {\n      if (obsNumb == -1) {\n        intervalFromObs.setModel(new SpinnerNumberModel(0, 0, 0, 1));\n        intervalToObs.setModel(new SpinnerNumberModel(0, 0, 0, 1));\n      } else {\n        intervalFromObs.setModel(new SpinnerNumberModel(1, 1, obsNumb - 1, 1));\n        intervalToObs.setModel(new SpinnerNumberModel(2, 2, obsNumb, 1));\n      }\n    }\n    return intervalOptionPanel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3952, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [70, 423], "initializationEnd": [82, 461], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "comp.setAlignmentX(int)"], "configurationStart": [88, 467], "configurationEnd": [146, 512], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 518, "focalAPIEnd": 534, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jPanel,GridBagConstraints)"], "useStart": [983], "useEnd": [1016], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ahc234/Graphics/tree/master/splines_student/src/cs4620/demos/TransformsDemo3D.java", "rawCode": "  private void createTopPanel(JPanel rightPanel) {\n    JPanel panel = new JPanel();\n    panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));\n    /*\n    JLabel label = new JLabel(\"Output vertex =\");\n    label.setAlignmentX(Component.LEFT_ALIGNMENT);\n    panel.add(label);\n    label = new JLabel(\"Viewport transform\");\n    label.setAlignmentX(Component.LEFT_ALIGNMENT);\n    panel.add(label);\n    */\n    JLabel label = new JLabel(\"Transformation matrices:\");\n    label.setAlignmentX(Component.LEFT_ALIGNMENT);\n    panel.add(label);\n\n    // set constraints for placement in sidebar and add\n    GridBagConstraints constraint = new GridBagConstraints();\n    constraint.anchor = GridBagConstraints.WEST;\n    constraint.weighty = 0;\n    constraint.weightx = 1;\n    constraint.gridx = 0;\n    constraint.gridy = controlYIndex++;\n    constraint.fill = GridBagConstraints.PAGE_START;\n    constraint.ipadx = 0;\n    constraint.ipady = 8;\n    constraint.insets = new Insets(0, 8, 0, 8);\n    rightPanel.add(panel, constraint);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3953, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(ImageIcon)"], "initializationStart": [111, 239], "initializationEnd": [123, 255], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(SpringLayout)"], "configurationStart": [189], "configurationEnd": [217], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 261, "focalAPIEnd": 283, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["putConstraint(*,JLabel,int,*,jPanel)", "putConstraint(*,JLabel,int,*,jPanel)", "jPanel.add(JLabel)", "jPanel.add(JSlider)", "jPanel.add(JCheckBox)"], "useStart": [289, 379, 623, 652, 682], "useEnd": [373, 461, 644, 674, 702], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jonosterman/cube/tree/master/cube-client-wm/src/main/java/ch/admin/vbs/cube/client/wm/ui/dialog/AudioDialog.java", "rawCode": "  @Override\n  protected JPanel createCenterContentPanel() {\n    ImageIcon icon = null;\n    JPanel contentPnl = new JPanel();\n    // layout\n    SpringLayout layout = new SpringLayout();\n    contentPnl.setLayout(layout);\n    JLabel iconLb = new JLabel(icon);\n    contentPnl.add(iconLb);\n    layout.putConstraint(SpringLayout.NORTH, iconLb, 40, SpringLayout.NORTH, contentPnl);\n    layout.putConstraint(SpringLayout.WEST, iconLb, 20, SpringLayout.WEST, contentPnl);\n    int yoffset = 0;\n    for (TypeUI t : TypeUI.values()) {\n      JLabel label = t.label;\n      JSlider slider = t.slider;\n      JCheckBox cbox = t.cbox;\n      contentPnl.add(label);\n      contentPnl.add(slider);\n      contentPnl.add(cbox);\n      layout.putConstraint(SpringLayout.NORTH, label, 20, SpringLayout.NORTH, slider);\n      layout.putConstraint(SpringLayout.WEST, label, 20, SpringLayout.WEST, slider);\n      layout.putConstraint(SpringLayout.NORTH, cbox, -5, SpringLayout.NORTH, slider);\n      layout.putConstraint(SpringLayout.WEST, cbox, 200, SpringLayout.WEST, slider);\n      layout.putConstraint(SpringLayout.NORTH, slider, 0 + yoffset, SpringLayout.NORTH, iconLb);\n      layout.putConstraint(SpringLayout.WEST, slider, 20, SpringLayout.EAST, iconLb);\n      setMinimumSize(MINIMUM_DIALOG_SIZE);\n      yoffset += 50;\n    }\n    return contentPnl;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3954, "initialization": ["JLabel comp = new JLabel(String)", "JLabel comp = new JLabel(String)", "JLabel comp = new JLabel(String)", "JLabel comp = new JLabel(String)", "JLabel comp = new JLabel(String)", "JLabel comp = new JLabel(String)", "JLabel comp = new JLabel(String)", "JLabel comp = new JLabel(String)", "JLabel comp = new JLabel(String)", "JLabel comp = new JLabel(String)", "JLabel comp = new JLabel(String)", "JLabel comp = new JLabel(String)", "JLabel comp = new JLabel(String)", "JPanel jPanel = JPanel.getComponent(int)"], "initializationStart": [522, 598, 674, 750, 826, 902, 978, 1054, 1130, 1206, 1282, 1358, 1433, 1572], "initializationEnd": [537, 613, 689, 765, 841, 917, 993, 1069, 1145, 1221, 1297, 1373, 1447, 1603], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setFont(Font)"], "configurationStart": [1613], "configurationEnd": [1662], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1672, "focalAPIEnd": 1688, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lew/mitzi/tree/master/src/mitzi/MitziGUI.java", "rawCode": "  public void setToFEN(String fen) {\n\n    redraw();\n\n    JPanel panel;\n\n    String[] fen_parts = fen.split(\" \");\n\n    // populate the squares\n    String[] fen_rows = fen_parts[0].split(\"/\");\n    char[] pieces;\n    for (int row = 0; row < 8; row++) {\n      int offset = 0;\n      for (int column = 0; column + offset < 8; column++) {\n        pieces = fen_rows[row].toCharArray();\n        int square = row * 8 + column + offset;\n        JLabel piece;\n        switch (pieces[column]) {\n          case 'P':\n            piece = new JLabel(\"♙\");\n            break;\n          case 'R':\n            piece = new JLabel(\"♖\");\n            break;\n          case 'N':\n            piece = new JLabel(\"♘\");\n            break;\n          case 'B':\n            piece = new JLabel(\"♗\");\n            break;\n          case 'Q':\n            piece = new JLabel(\"♕\");\n            break;\n          case 'K':\n            piece = new JLabel(\"♔\");\n            break;\n          case 'p':\n            piece = new JLabel(\"♟\");\n            break;\n          case 'r':\n            piece = new JLabel(\"♜\");\n            break;\n          case 'n':\n            piece = new JLabel(\"♞\");\n            break;\n          case 'b':\n            piece = new JLabel(\"♝\");\n            break;\n          case 'q':\n            piece = new JLabel(\"♛\");\n            break;\n          case 'k':\n            piece = new JLabel(\"♚\");\n            break;\n          default:\n            piece = new JLabel(\"\");\n            offset += Character.getNumericValue(pieces[column]) - 1;\n            break;\n        }\n        panel = (JPanel) chessBoard.getComponent(square);\n        piece.setFont(new Font(\"Serif\", Font.PLAIN, 100));\n        panel.add(piece);\n      }\n    }\n    chessBoard.updateUI();\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3955, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [644], "configurationEnd": [713], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 963, "focalAPIEnd": 990, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "JPanel.add(jPanel)"], "useStart": [996, 1933], "useEnd": [1028, 1960], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Echo-tcx/Jitsi/tree/master/src/net/java/sip/communicator/impl/protocol/ssh/SSHContactInfo.java", "rawCode": "  /** initialize the form. */\n  public void initForm() {\n    updateTimer.setValue(30);\n    MaskFormatter maskFormatter = new MaskFormatter();\n    try {\n      maskFormatter.setMask(\"#####\");\n    } catch (ParseException ex) {\n      ex.printStackTrace();\n    }\n    maskFormatter.setAllowsInvalid(false);\n    portField = new JFormattedTextField(maskFormatter);\n    portField.setValue(22);\n\n    userNameField.setEnabled(false);\n    passwordField.setEditable(false);\n    portField.setEnabled(false);\n    terminalTypeField.setEnabled(false);\n    updateTimer.setEnabled(false);\n\n    mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\n    machinePanel.setLayout(new BoxLayout(machinePanel, BoxLayout.X_AXIS));\n    detailNamesPanel.setLayout(new BoxLayout(detailNamesPanel, BoxLayout.Y_AXIS));\n    detailFieldsPanel.setLayout(new BoxLayout(detailFieldsPanel, BoxLayout.Y_AXIS));\n    detailsPanel.setLayout(new BoxLayout(detailsPanel, BoxLayout.X_AXIS));\n\n    machinePanel.add(machineID);\n    machinePanel.add(machineIDField);\n\n    detailNamesPanel.add(userName);\n    detailNamesPanel.add(emptyPanel1);\n    detailNamesPanel.add(password);\n    detailNamesPanel.add(emptyPanel2);\n    detailNamesPanel.add(port);\n    detailNamesPanel.add(emptyPanel3);\n    detailNamesPanel.add(statusUpdate);\n    detailNamesPanel.add(emptyPanel4);\n    detailNamesPanel.add(terminalType);\n\n    detailFieldsPanel.add(userNameField);\n    detailFieldsPanel.add(emptyPanel5);\n    detailFieldsPanel.add(passwordField);\n    detailFieldsPanel.add(emptyPanel6);\n    detailFieldsPanel.add(portField);\n    detailFieldsPanel.add(emptyPanel7);\n    detailFieldsPanel.add(updateTimer);\n    detailFieldsPanel.add(emptyPanel8);\n    detailFieldsPanel.add(terminalTypeField);\n\n    detailsPanel.add(detailNamesPanel);\n    detailsPanel.add(detailFieldsPanel);\n\n    detailsPanel.setBorder(BorderFactory.createTitledBorder(\"Details\"));\n\n    mainPanel.add(emptyPanel9);\n    mainPanel.add(machinePanel);\n    mainPanel.add(addDetailsCheckBox);\n    mainPanel.add(detailsPanel);\n    mainPanel.add(emptyPanel10);\n    mainPanel.add(doneButton);\n    mainPanel.add(emptyPanel11);\n\n    addDetailsCheckBox.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent event) {\n            addDetailsCheckBox.setEnabled(false);\n            userNameField.setEnabled(true);\n            passwordField.setEditable(true);\n            portField.setEnabled(true);\n            terminalTypeField.setEnabled(true);\n            updateTimer.setEnabled(true);\n\n            userNameField.grabFocus();\n          }\n        });\n\n    doneButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent event) {\n            if (machineIDField.getText().equals(\"\")) {\n              machineIDField.setText(\"Field needed\");\n              return;\n            }\n\n            sshContact.savePersistentDetails();\n\n            // add contact to contact list\n            ((OperationSetPersistentPresenceSSHImpl) sshContact.getParentPresenceOperationSet())\n                .addContactToList(sshContact.getParentContactGroup(), sshContact);\n\n            setVisible(false);\n          }\n        });\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3956, "initialization": ["JLabel comp = new JLabel(String)"], "initializationStart": [707], "initializationEnd": [732], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setHorizontalAlignment(*)", "comp.setOpaque(boolean)"], "configurationStart": [738, 784], "configurationEnd": [778, 805], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 811, "focalAPIEnd": 822, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JLabel)"], "useStart": [970, 1138], "useEnd": [983, 1150], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hvatum/Skole/tree/master/TDT4186/ov2/BarbershopGui.java", "rawCode": "  /**\n   * Creates, adds and positions labels above a slider.\n   *\n   * @param p The panel to add the labels to.\n   * @param x The x position of the leftmost label.\n   * @param y The y position of the topmost label.\n   * @param w The width from leftmost label to rightmost pixel of the rightmost label\n   * @param h The height of the labels.\n   * @param minValue The value to be displayed on the left label.\n   * @param maxValue The value to be displayed on the right label.\n   * @param text The text to be displayed in the central label.\n   */\n  private void addSliderLabels(\n      JPanel p, int x, int y, int w, int h, int minValue, int maxValue, String text) {\n    JLabel left, middle, right;\n    left = new JLabel(\"\" + minValue);\n    left.setHorizontalAlignment(JLabel.LEFT);\n    left.setOpaque(false);\n    p.add(left);\n    left.setBounds(x, y, w, h);\n    middle = new JLabel(text);\n    middle.setHorizontalAlignment(JLabel.CENTER);\n    middle.setOpaque(false);\n    p.add(middle);\n    middle.setBounds(x, y, w, h);\n    right = new JLabel(\"\" + maxValue);\n    right.setHorizontalAlignment(JLabel.RIGHT);\n    right.setOpaque(false);\n    p.add(right);\n    right.setBounds(x, y, w, h);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3957, "initialization": ["JLabel comp = new JLabel()", "JPanel jPanel = new JPanel(*)"], "initializationStart": [482, 593], "initializationEnd": [494, 636], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 642, "focalAPIEnd": 670, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jPanel,GridBagConstraints)"], "useStart": [1010], "useEnd": [1054], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/concord-consortium/geogebra/tree/master/geogebra/geogebra/gui/view/spreadsheet/StatDialog.java", "rawCode": "  private JPanel createRegressionPanel() {\n\n    String[] orders = {\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"};\n    cbPolyOrder = new JComboBox(orders);\n    cbPolyOrder.setSelectedIndex(0);\n    regressionOrder = 2;\n    cbPolyOrder.addActionListener(this);\n\n    regressionLabels = new String[regressionTypes];\n    setRegressionLabels();\n    cbRegression = new JComboBox(regressionLabels);\n    cbRegression.addActionListener(this);\n\n    lblRegression = new JLabel();\n    lblRegEquation = new JLabel();\n\n    tfRegression = new JTextField();\n    // tfRegression.setColumns(30);\n\n    JPanel eqnPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n    eqnPanel.add(lblRegEquation);\n\n    JPanel regressionPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n    regressionPanel.add(lblRegression);\n    regressionPanel.add(cbRegression);\n    regressionPanel.add(cbPolyOrder);\n    // regressionPanel.add(tfRegression);\n    // regressionPanel.add(lblRegEquation);\n\n    JPanel mainPanel = new JPanel(new BorderLayout());\n    mainPanel.add(eqnPanel, BorderLayout.CENTER);\n    mainPanel.add(regressionPanel, BorderLayout.SOUTH);\n\n    return mainPanel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3958, "initialization": ["JLabel comp = new JLabel()"], "initializationStart": [178], "initializationEnd": [190], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.removeAll()"], "configurationStart": [196], "configurationEnd": [219], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 691, "focalAPIEnd": 714, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/psal/anonymouth/tree/master/src/edu/drexel/psal/anonymouth/gooie/PreProcessDriver.java", "rawCode": "  /**\n   * Updates the Set-up wizard \"Progress\" bar to the correct status\n   *\n   * @param curBarPanel\n   */\n  protected void updateBar(JPanel curBarPanel) {\n    JLabel curBar = new JLabel();\n    curBarPanel.removeAll();\n    int gauge = 0;\n\n    if (preProcessWindow.mainDocReady()) gauge++;\n    if (preProcessWindow.sampleDocsReady()) gauge++;\n    if (preProcessWindow.trainDocsReady()) gauge++;\n\n    if (gauge == 3) {\n      curBar = preProcessWindow.fullBarLabel;\n    } else if (gauge == 2) {\n      curBar = preProcessWindow.twoThirdBarLabel;\n    } else if (gauge == 1) {\n      curBar = preProcessWindow.thirdBarLabel;\n    } else {\n      curBar = preProcessWindow.emptyBarLabel;\n    }\n\n    curBarPanel.add(curBar);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3959, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(String)"], "initializationStart": [278, 385], "initializationEnd": [347, 406], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 412, "focalAPIEnd": 427, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JButton)"], "useStart": [619, 1512], "useEnd": [635, 1529], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/psal/anonymouth/tree/master/src/edu/drexel/psal/anonymouth/gooie/FeatureWizardDriver.java", "rawCode": "  /** Creates a text-field with file chooser. */\n  public static JPanel getParamFileChooserPanel(\n      final FeatureWizard fw,\n      final int tabIndex,\n      final String fieldName,\n      String defaultValue,\n      final ParamPanelConstraint constraint) {\n\n    JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, cellPadding, cellPadding));\n\n    // Add label\n    JLabel name = new JLabel(fieldName);\n    panel.add(name);\n\n    // Add value text field with constraint\n    final JTextField value = new JTextField(defaultValue);\n    value.setEditable(false);\n    value.setPreferredSize(new Dimension(200, 20));\n    panel.add(value);\n\n    JButton browse = new JButton(\"Browse...\");\n    browse.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            Logger.logln(NAME + \"'Browse' button clicked for parameter value.\");\n\n            int answer = 0;\n            JFileChooser load = new JFileChooser(new File(\".\"));\n            answer = load.showOpenDialog(fw);\n\n            if (answer == JFileChooser.APPROVE_OPTION) {\n              try {\n                value.setText(load.getSelectedFile().getCanonicalPath());\n              } catch (Exception e) {\n                Logger.logln(NAME + \"Error reading filepath for chosen file.\", LogOut.STDERR);\n                e.printStackTrace();\n              }\n\n            } else {\n              Logger.logln(NAME + \"Browse operation canceled.\");\n            }\n          }\n        });\n    panel.add(browse);\n\n    return panel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3960, "initialization": ["JPanel jPanel = getContentPane()", "JLabel comp = new JLabel(*,*,*)"], "initializationStart": [371, 1147], "initializationEnd": [387, 1285], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [441], "configurationEnd": [470], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1512, "focalAPIEnd": 1541, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JCheckBox)", "jPanel.add(JProgressBar)", "jPanel.add(JButton)", "jPanel.add(JButton)"], "useStart": [1853, 2225, 2711, 3107], "useEnd": [1891, 2253, 2741, 3134], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.1.1/src/lib/com/izforge/izpack/uninstaller/UninstallerFrame.java", "rawCode": "  /**\n   * Builds the GUI.\n   *\n   * @param displayForceOption If true, display to the user the option permitting to force all files\n   *     deletion.\n   * @param forceOptionState If true, force deletion is activated.\n   */\n  private void buildGUI(boolean displayForceOption, boolean forceOptionState) {\n    // We initialize our layout\n    JPanel contentPane = (JPanel) getContentPane();\n    GridBagLayout layout = new GridBagLayout();\n    contentPane.setLayout(layout);\n    GridBagConstraints gbConstraints = new GridBagConstraints();\n    gbConstraints.insets = new Insets(5, 5, 5, 5);\n\n    // We prepare our action handler\n    ActionsHandler handler = new ActionsHandler();\n\n    // Prepares the glass pane to block gui interaction when needed\n    JPanel glassPane = (JPanel) getGlassPane();\n    glassPane.addMouseListener(new MouseAdapter() {});\n    glassPane.addMouseMotionListener(new MouseMotionAdapter() {});\n    glassPane.addKeyListener(new KeyAdapter() {});\n\n    // We set-up the buttons factory\n    ButtonFactory.useButtonIcons();\n    ButtonFactory.useHighlightButtons();\n\n    // We put our components\n\n    JLabel warningLabel =\n        new JLabel(\n            langpack.getString(\"uninstaller.warning\"),\n            icons.getImageIcon(\"warning\"),\n            JLabel.TRAILING);\n    buildConstraints(gbConstraints, 0, 0, 2, 1, 1.0, 0.0);\n    gbConstraints.anchor = GridBagConstraints.WEST;\n    gbConstraints.fill = GridBagConstraints.NONE;\n    layout.addLayoutComponent(warningLabel, gbConstraints);\n    contentPane.add(warningLabel);\n\n    targetDestroyCheckbox =\n        new JCheckBox(\n            langpack.getString(\"uninstaller.destroytarget\") + installPath, forceOptionState);\n    buildConstraints(gbConstraints, 0, 1, 2, 1, 1.0, 0.0);\n    layout.addLayoutComponent(targetDestroyCheckbox, gbConstraints);\n    if (displayForceOption) {\n      contentPane.add(targetDestroyCheckbox);\n    }\n    gbConstraints.fill = GridBagConstraints.HORIZONTAL;\n\n    progressBar = new JProgressBar();\n    progressBar.setStringPainted(true);\n    progressBar.setString(langpack.getString(\"InstallPanel.begin\"));\n    buildConstraints(gbConstraints, 0, 2, 2, 1, 1.0, 0.0);\n    layout.addLayoutComponent(progressBar, gbConstraints);\n    contentPane.add(progressBar);\n\n    destroyButton =\n        ButtonFactory.createButton(\n            langpack.getString(\"uninstaller.uninstall\"),\n            icons.getImageIcon(\"delete\"),\n            buttonsHColor);\n    destroyButton.addActionListener(handler);\n    buildConstraints(gbConstraints, 0, 3, 1, 1, 0.5, 0.0);\n    gbConstraints.fill = GridBagConstraints.NONE;\n    gbConstraints.anchor = GridBagConstraints.WEST;\n    layout.addLayoutComponent(destroyButton, gbConstraints);\n    contentPane.add(destroyButton);\n\n    quitButton =\n        ButtonFactory.createButton(\n            langpack.getString(\"installer.quit\"), icons.getImageIcon(\"stop\"), buttonsHColor);\n    quitButton.addActionListener(handler);\n    buildConstraints(gbConstraints, 1, 3, 1, 1, 0.5, 0.0);\n    gbConstraints.anchor = GridBagConstraints.EAST;\n    layout.addLayoutComponent(quitButton, gbConstraints);\n    contentPane.add(quitButton);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3961, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1248, "focalAPIEnd": 1279, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JLabel)"], "useStart": [1380, 1509, 1651], "useEnd": [1402, 1534, 1674], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Kristinahussak/ikt_2011_groupe_1/tree/master/program/presentation/PGeneral.java", "rawCode": "    private void refreshItems() {\n\n      ArrayList<String> currentItems = order;\n      int gridSize = 0;\n      if (currentItems.size() < 9) {\n        gridSize = 9;\n      } else {\n        gridSize = currentItems.size();\n      }\n\n      String[] tempOrder = currentItems.get(0).split(\";\");\n      orderDescription.setText(\n          \"Viewing items for order: \" + tempOrder[0] + \", by \" + tempOrder[1] + \".\");\n\n      ordersPanel.setLayout(new GridLayout(gridSize, 1));\n\n      JPanel[] items = new JPanel[gridSize];\n      boolean isWhite = true;\n\n      for (int i = 0; i < gridSize; i++) {\n        items[i] = new JPanel();\n        items[i].setLayout(null);\n        items[i].setPreferredSize(new Dimension(660, 22));\n        if (i % 2 == 0) {\n          items[i].setBackground(new Color(255, 255, 255));\n          isWhite = true;\n        } else {\n          items[i].setBackground(new Color(243, 243, 243));\n          isWhite = false;\n        }\n\n        ordersPanel.add(items[i]);\n\n        if (i < currentItems.size() && i > 0) {\n          String delimiter = \";\";\n          String[] temp = currentItems.get(i).split(delimiter);\n\n          JLabel stockPosition = new JLabel(temp[1], JLabel.CENTER);\n          stockPosition.setBounds(5, 0, 90, 20);\n          items[i - 1].add(stockPosition);\n\n          JLabel name = new JLabel(temp[0]);\n          name.setBounds(110, 0, 220, 20);\n          items[i - 1].add(name);\n\n          JLabel barcode = new JLabel(temp[2]);\n          barcode.setBounds(338, 0, 100, 20);\n          items[i - 1].add(barcode);\n\n          JLabel price = new JLabel(temp[3], JLabel.CENTER);\n          price.setBounds(445, 0, 80, 20);\n          items[i - 1].add(price);\n        }\n      }\n    }\n"}, {"dataset": "jPanelAdd", "exampleID": 3962, "initialization": ["JLabel comp = new JLabel(String)", "JPanel jPanel = new JPanel()"], "initializationStart": [672, 2456], "initializationEnd": [728, 2468], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "jPanel.add(JButton)"], "configurationStart": [2474, 2547], "configurationEnd": [2541, 2596], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 2602, "focalAPIEnd": 2629, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JButton)", "jPanel.add(JLabel)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)", "JPanel.add(jPanel)"], "useStart": [2635, 2694, 2727, 2776, 2806, 2836, 2867, 2894, 2925, 2974, 3002, 3249], "useEnd": [2688, 2721, 2770, 2800, 2830, 2861, 2888, 2919, 2968, 2996, 3051, 3276], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shevchen/CleverAnt3/tree/master/src/gui/FieldVisualizer.java", "rawCode": "  private void createFieldFrame() {\n    initAuto();\n    initStack();\n    if (m == null) {\n      return;\n    }\n    mainPanel = new JPanel();\n    mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.X_AXIS));\n    final int strut = 10;\n    mainPanel.add(Box.createHorizontalStrut(strut));\n    JPanel fieldPanel = getRandomField();\n    mainPanel.add(fieldPanel);\n    mainPanel.add(Box.createHorizontalStrut(strut));\n    mainPanel.add(Box.createHorizontalGlue());\n    apb = new AutomataPanelBuilder();\n    mainPanel.add(apb.getAutoPanel(m));\n    mainPanel.add(Box.createHorizontalStrut(strut));\n    eatenLabel = new JLabel(\"Съедено: 0/\" + f.getTotalFood());\n    turnsLabel = new JLabel(\"Ходов сделано: 0/\" + Constants.TURNS_NUMBER);\n    forward = new JButton(\"Шаг вперёд\");\n    forward.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            stepForward();\n            updateAll();\n          }\n        });\n    backward = new JButton(\"Шаг назад\");\n    backward.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            stepBackward();\n            updateAll();\n          }\n        });\n    skip = new JButton(\"В конец\");\n    skip.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            while (wasFood.size() < Constants.TURNS_NUMBER) {\n              stepForward();\n            }\n            updateAll();\n          }\n        });\n    restart = new JButton(\"Рестарт\");\n    restart.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            while (!wasFood.isEmpty()) {\n              stepBackward();\n            }\n            updateAll();\n          }\n        });\n    newField = new JButton(\"Новое поле\");\n    newField.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            mainPanel.remove(1);\n            mainPanel.add(getRandomField(), 1);\n            initStack();\n            updateAll();\n          }\n        });\n    close = new JButton(\"Закрыть\");\n    close.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            frame.dispose();\n          }\n        });\n    JPanel buttonPanel = new JPanel();\n    buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.X_AXIS));\n    buttonPanel.add(Box.createHorizontalStrut(strut));\n    buttonPanel.add(turnsLabel);\n    buttonPanel.add(Box.createHorizontalStrut(2 * strut));\n    buttonPanel.add(eatenLabel);\n    buttonPanel.add(Box.createHorizontalGlue());\n    buttonPanel.add(restart);\n    buttonPanel.add(forward);\n    buttonPanel.add(backward);\n    buttonPanel.add(skip);\n    buttonPanel.add(newField);\n    buttonPanel.add(Box.createHorizontalGlue());\n    buttonPanel.add(close);\n    buttonPanel.add(Box.createHorizontalStrut(strut));\n    JPanel wholePanel = new JPanel();\n    wholePanel.setLayout(new BoxLayout(wholePanel, BoxLayout.Y_AXIS));\n    wholePanel.add(mainPanel);\n    wholePanel.add(Box.createVerticalStrut(strut));\n    wholePanel.add(buttonPanel);\n    frame = new JFrame(\"Визуализатор автомата\");\n    frame.setLayout(new BoxLayout(frame.getContentPane(), BoxLayout.Y_AXIS));\n    frame.add(Box.createVerticalStrut(strut));\n    frame.add(wholePanel);\n    frame.add(Box.createVerticalStrut(strut));\n    updateField();\n    updateAuto();\n    updateButtons();\n    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3963, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 2902, "focalAPIEnd": 2942, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextArea)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [2948, 2998], "useEnd": [2991, 3051], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pgleeson/TempRepo3/tree/master/src/ucl/physiol/neuroconstruct/hpc/condor/CondorFrame.java", "rawCode": "  private void jbInit() throws Exception {\n    contentPane = (JPanel) this.getContentPane();\n    border1 =\n        BorderFactory.createCompoundBorder(\n            BorderFactory.createEtchedBorder(Color.white, new Color(148, 145, 140)),\n            BorderFactory.createEmptyBorder(6, 6, 6, 6));\n    contentPane.setLayout(borderLayout1);\n    this.setSize(new Dimension(750, 450));\n    this.setTitle(\"Condor Monitor\");\n    jPanelMain.setLayout(borderLayout2);\n    jPanelConsole.setBorder(border1);\n    jPanelConsole.setLayout(borderLayout3);\n    jPanelButtons.setBorder(BorderFactory.createEtchedBorder());\n    jPanelButtons.setLayout(borderLayout4);\n    borderLayout3.setHgap(10);\n    borderLayout3.setVgap(10);\n    jTextAreaMain.setFont(new java.awt.Font(\"Fixed Miriam Transparent\", 0, 11));\n    jTextAreaMain.setEditable(false);\n    jTextAreaMain.setText(\"\");\n    jButtonCurrentJobs.setText(\"Current Queue\");\n    jButtonCurrentJobs.addActionListener(\n        new java.awt.event.ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            jButtonCurrentJobs_actionPerformed(e);\n          }\n        });\n    jButtonOther.setText(\"Other:\");\n    jButtonOther.addActionListener(\n        new java.awt.event.ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            jButtonOther_actionPerformed(e);\n          }\n        });\n    jTextFieldOther.setText(\"condor_restart\");\n    jTextFieldOther.setColumns(12);\n    jTextFieldOther.setHorizontalAlignment(SwingConstants.TRAILING);\n    jButtonHistory.setText(\"History\");\n    jButtonHistory.addActionListener(\n        new java.awt.event.ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            jButtonHistory_actionPerformed(e);\n          }\n        });\n    jButtonRemoveAll.setText(\"Remove All Jobs\");\n    jButtonRemoveAll.addActionListener(\n        new java.awt.event.ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            jButtonRemoveAll_actionPerformed(e);\n          }\n        });\n    jButtonStatus.setText(\"Status\");\n    jButtonStatus.addActionListener(\n        new java.awt.event.ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            jButtonStatus_actionPerformed(e);\n          }\n        });\n    jPanelButtons.add(jPanelOther, BorderLayout.SOUTH);\n    jPanelOther.add(jButtonOther, null);\n    jPanelOther.add(jTextFieldOther, null);\n    jPanelButtons.add(jPanelMainButtons, BorderLayout.CENTER);\n    jPanelMainButtons.add(jButtonCurrentJobs, null);\n    jPanelMainButtons.add(jButtonStatus, null);\n    jPanelMainButtons.add(jButtonHistory, null);\n    jPanelMainButtons.add(jButtonRemoveAll, null);\n    contentPane.add(jPanelMain, BorderLayout.CENTER);\n\n    jTextAreaLastCommand.setEditable(false);\n    jTextAreaLastCommand.setBorder(BorderFactory.createEtchedBorder());\n\n    jTextAreaLastCommand.setColumns(40);\n\n    jPanelLastCommand.add(jLabelLastCommand);\n    jPanelLastCommand.add(jTextAreaLastCommand);\n\n    jPanelMain.add(jPanelLastCommand, BorderLayout.NORTH);\n\n    jPanelMain.add(jPanelConsole, BorderLayout.CENTER);\n\n    jPanelConsole.add(jScrollPane1, BorderLayout.CENTER);\n    jScrollPane1.getViewport().add(jTextAreaMain, null);\n    jPanelMain.add(jPanelButtons, BorderLayout.SOUTH);\n\n    jTextAreaMain.setBackground(Color.black);\n    jTextAreaMain.setForeground(Color.green);\n\n    Font f = new Font(\"Monospaced\", Font.PLAIN, 14);\n    jTextAreaMain.setFont(f);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3964, "initialization": ["JLabel comp = new JLabel(String)"], "initializationStart": [443], "initializationEnd": [464], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setBorder(Border)", "jPanel.setLayout(GridBagLayout)", "jPanel.setBounds(int,int,int,int)", "comp.setBounds(int,int,int,int)"], "configurationStart": [69, 327, 359, 470], "configurationEnd": [321, 353, 397, 502], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 508, "focalAPIEnd": 530, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JLabel)", "jPanel.add(JTextField)"], "useStart": [724, 836, 1058], "useEnd": [753, 859, 1092], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/UTL/psi/tree/master/wefr/src/webApplication/grafica/AddNew.java", "rawCode": "  private void buildPanelLink() {\n    panel_link = new JPanel();\n    panel_link.setBorder(\n        new TitledBorder(\n            new LineBorder(COLOR_PANEL_DISABLED, 1, true),\n            LINKPANELTITLE,\n            TitledBorder.LEADING,\n            TitledBorder.TOP,\n            null,\n            new Color(51, 51, 51)));\n    panel_link.setLayout(null);\n    panel_link.setBounds(92, 367, 426, 84);\n    basePane.add(panel_link);\n\n    lblUrl = new JLabel(LINK_PATH);\n    lblUrl.setBounds(24, 23, 51, 15);\n    panel_link.add(lblUrl);\n\n    textField_url = new JTextField(DEFAULTLINKPATH);\n    textField_url.setToolTipText(LINK_PATH_TOOLTIP);\n    textField_url.setColumns(10);\n    textField_url.setBounds(111, 21, 303, 19);\n    panel_link.add(textField_url);\n\n    lblLink = new JLabel(LINK_TEXT);\n    lblLink.setBounds(24, 48, 81, 15);\n    panel_link.add(lblLink);\n\n    textField_linkText = new JTextField();\n    textField_linkText.setToolTipText(LINK_TEXT_TOOLTIP);\n    textField_linkText.setColumns(10);\n    textField_linkText.setBounds(111, 46, 303, 19);\n    panel_link.add(textField_linkText);\n    panelLinkEnabled(false);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3965, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [840, 1028], "initializationEnd": [852, 1045], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setBackground(Color)", "jPanel.setLayout(GridBagLayout)", "jPanel.setBorder(Border)", "comp.setForeground(Color)"], "configurationStart": [598, 638, 703, 1051], "configurationEnd": [632, 697, 766, 1081], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1087, "focalAPIEnd": 1105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JButton)"], "useStart": [1389], "useEnd": [1426], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mkovatsc/SmartAppContiki/tree/master/tools/cooja/java/se/sics/cooja/dialogs/ProjectDirectoriesDialog.java", "rawCode": "  private void init(ProjectConfig config) {\n    JPanel configPane = new JPanel(new BorderLayout());\n    JLabel label;\n    JButton button;\n\n    /* Control */\n    JPanel buttonPane = new JPanel();\n    buttonPane.setLayout(new BoxLayout(buttonPane, BoxLayout.X_AXIS));\n    buttonPane.add(Box.createHorizontalGlue());\n\n    button = new JButton(\"Close\");\n    button.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            dispose();\n          }\n        });\n    buttonPane.add(button);\n\n    /* Config */\n    JPanel keyPane = new JPanel();\n    keyPane.setBackground(Color.WHITE);\n    keyPane.setLayout(new BoxLayout(keyPane, BoxLayout.Y_AXIS));\n    keyPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 10));\n    configPane.add(keyPane, BorderLayout.WEST);\n\n    JPanel valuePane = new JPanel();\n    valuePane.setBackground(Color.WHITE);\n    valuePane.setLayout(new BoxLayout(valuePane, BoxLayout.Y_AXIS));\n    configPane.add(valuePane, BorderLayout.EAST);\n\n    label = new JLabel(\"KEY\");\n    label.setForeground(Color.RED);\n    keyPane.add(label);\n    label = new JLabel(\"VALUE\");\n    label.setForeground(Color.RED);\n    valuePane.add(label);\n\n    Enumeration<String> allPropertyNames = config.getPropertyNames();\n    while (allPropertyNames.hasMoreElements()) {\n      String propertyName = allPropertyNames.nextElement();\n\n      keyPane.add(new JLabel(propertyName));\n      if (config.getStringValue(propertyName).equals(\"\")) {\n        valuePane.add(new JLabel(\" \"));\n      } else {\n        valuePane.add(new JLabel(config.getStringValue(propertyName)));\n      }\n    }\n\n    Container contentPane = getContentPane();\n    configPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n    configPane.setBackground(Color.WHITE);\n    contentPane.add(new JScrollPane(configPane), BorderLayout.CENTER);\n    contentPane.add(buttonPane, BorderLayout.SOUTH);\n    pack();\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3966, "initialization": ["JPanel jPanel = getContentPane()"], "initializationStart": [686], "initializationEnd": [702], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [756], "configurationEnd": [781], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1011, "focalAPIEnd": 1038, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JButton)", "jPanel.add(JComboBox)", "jPanel.add(JTextField)", "jPanel.add(JTextField)", "jPanel.add(JTextField)", "jPanel.add(JButton)"], "useStart": [1105, 1195, 1286, 1439, 1594, 1688, 1778, 1869, 1962], "useEnd": [1126, 1218, 1308, 1460, 1621, 1709, 1801, 1891, 1987], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/roskens/jrobin/tree/master/src/main/java/org/jrobin/inspector/EditArchiveDialog.java", "rawCode": "  private void constructUI(ArcDef arcDef) {\n    // fill controls\n    String[] funs = ArcDef.CONSOL_FUNS;\n    for (String fun : funs) {\n      consolFunCombo.addItem(fun);\n    }\n    consolFunCombo.setSelectedIndex(0);\n    if (arcDef == null) {\n      // NEW\n      xffField.setText(\"\" + 0.5);\n    } else {\n      // EDIT\n      consolFunCombo.setSelectedItem(arcDef.getConsolFun());\n      consolFunCombo.setEnabled(false);\n      xffField.setText(\"\" + arcDef.getXff());\n      stepsField.setText(\"\" + arcDef.getSteps());\n      stepsField.setEnabled(false);\n      rowsField.setText(\"\" + arcDef.getRows());\n      // rowsField.setEnabled(false);\n    }\n\n    // layout\n    JPanel content = (JPanel) getContentPane();\n    GridBagLayout layout = new GridBagLayout();\n    content.setLayout(layout);\n    GridBagConstraints gbc = new GridBagConstraints();\n    gbc.insets = new Insets(3, 3, 3, 3);\n    gbc.gridx = 0;\n    gbc.gridy = 0;\n    gbc.anchor = GridBagConstraints.EAST;\n    layout.setConstraints(consolFunLabel, gbc);\n    content.add(consolFunLabel);\n    gbc.gridy = 1;\n    layout.setConstraints(xffLabel, gbc);\n    content.add(xffLabel);\n    gbc.gridy = 2;\n    layout.setConstraints(stepsLabel, gbc);\n    content.add(stepsLabel);\n    gbc.gridy = 3;\n    layout.setConstraints(rowsLabel, gbc);\n    content.add(rowsLabel);\n    gbc.gridy = 4;\n    layout.setConstraints(okButton, gbc);\n    okButton.setPreferredSize(cancelButton.getPreferredSize());\n    content.add(okButton);\n    gbc.gridx = 1;\n    gbc.gridy = 0;\n    gbc.anchor = GridBagConstraints.WEST;\n    layout.setConstraints(consolFunCombo, gbc);\n    content.add(consolFunCombo);\n    gbc.gridy = 1;\n    layout.setConstraints(xffField, gbc);\n    content.add(xffField);\n    gbc.gridy = 2;\n    layout.setConstraints(stepsField, gbc);\n    content.add(stepsField);\n    gbc.gridy = 3;\n    layout.setConstraints(rowsField, gbc);\n    content.add(rowsField);\n    gbc.gridy = 4;\n    layout.setConstraints(cancelButton, gbc);\n    content.add(cancelButton);\n    getRootPane().setDefaultButton(okButton);\n\n    // actions\n    okButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            ok();\n          }\n        });\n    cancelButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            cancel();\n          }\n        });\n\n    setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3967, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [388, 420], "initializationEnd": [400, 458], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 765, "focalAPIEnd": 780, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JButton)", "jPanel.add(JButton)", "addComponent(jPanel)"], "useStart": [786, 807, 830, 854], "useEnd": [801, 824, 848, 900], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/visit/spark-svn-mirror/tree/master/src/plugins/battleships/src/java/battleship/BattleshipPlugin.java", "rawCode": "  private void showInvitationInChat(final GameOfferPacket invitation) {\n    invitation.setType(IQ.Type.RESULT);\n    invitation.setTo(invitation.getFrom());\n\n    final ChatRoom room =\n        SparkManager.getChatManager()\n            .getChatRoom(StringUtils.parseBareAddress(invitation.getFrom()));\n\n    String name = StringUtils.parseName(invitation.getFrom());\n    final JPanel panel = new JPanel();\n    JLabel text = new JLabel(\"Game request from\" + name);\n    JLabel game = new JLabel(\"Battleships\");\n    game.setFont(new Font(\"Dialog\", Font.BOLD, 24));\n    game.setForeground(Color.RED);\n    JButton accept = new JButton(Res.getString(\"button.accept\").replace(\"&\", \"\"));\n    JButton decline = new JButton(Res.getString(\"button.decline\").replace(\"&\", \"\"));\n    panel.add(text);\n    panel.add(game);\n    panel.add(accept);\n    panel.add(decline);\n    room.getTranscriptWindow().addComponent(panel);\n\n    accept.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            SparkManager.getConnection().sendPacket(invitation);\n            invitation.setStartingPlayer(!invitation.isStartingPlayer());\n            ChatRoomOpeningListener.createWindow(invitation, invitation.getFrom());\n            panel.remove(3);\n            panel.remove(2);\n            panel.repaint();\n            panel.revalidate();\n          }\n        });\n\n    decline.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            invitation.setType(IQ.Type.ERROR);\n            SparkManager.getConnection().sendPacket(invitation);\n            panel.remove(3);\n            panel.remove(2);\n            panel.repaint();\n            panel.revalidate();\n          }\n        });\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3968, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [594, 1025], "initializationEnd": [606, 1045], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setBorder(Border)", "jPanel.setLayout(GridBagLayout)", "comp.setToolTipText(String)"], "configurationStart": [614, 873, 1053], "configurationEnd": [757, 907, 1161], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1211, "focalAPIEnd": 1236, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JComboBox)", "jPanel.add(JLabel)", "jPanel.add(JComboBox)", "GridBagLayout.setConstraints(jPanel,GridBagConstraints)", "JPanel.add(jPanel)"], "useStart": [1947, 2184, 3560, 3659, 3708], "useEnd": [1979, 2209, 3594, 3700, 3736], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/halset/openmap/tree/master/src/main/java/com/bbn/openmap/layer/vpf/FeatureDrawingAttributes.java", "rawCode": "  /**\n   * Return the GUI controls for this feature = the basic DrawingAttributes GUI from the superclass,\n   * plus the other attribute display controls.\n   */\n  public Component getGUI() {\n    if (guiPanel == null) {\n      guiPanel = new JPanel();\n      GridBagLayout gridbag = new GridBagLayout();\n      GridBagConstraints c = new GridBagConstraints();\n      guiPanel.setLayout(gridbag);\n\n      c.gridwidth = GridBagConstraints.REMAINDER;\n\n      Component sgui = super.getGUI();\n      gridbag.setConstraints(sgui, c);\n      guiPanel.add(sgui);\n\n      // Attribute GUI\n      attributePanel = new JPanel();\n      attributePanel.setBorder(\n          BorderFactory.createTitledBorder(\n              BorderFactory.createEtchedBorder(), \" Attribute Control \"));\n      GridBagLayout gridbag2 = new GridBagLayout();\n      GridBagConstraints c2 = new GridBagConstraints();\n      attributePanel.setLayout(gridbag2);\n\n      c2.gridwidth = GridBagConstraints.RELATIVE;\n      c2.anchor = GridBagConstraints.WEST;\n\n      JLabel label = new JLabel(\"Name: \");\n      label.setToolTipText(\n          \"Choose which attribute to display for each instance of this feature type.\");\n      gridbag2.setConstraints(label, c2);\n      attributePanel.add(label);\n\n      c2.gridwidth = GridBagConstraints.REMAINDER;\n\n      attributeJCB = new JComboBox();\n      attributeJCB.setToolTipText(\n          \"Choose which attribute to display for each instance of this feature type.\");\n      attributeJCB.addActionListener(\n          new ActionListener() {\n            public void actionPerformed(ActionEvent ae) {\n              JComboBox jcb = (JComboBox) ae.getSource();\n              FCIChoice fcic = (FCIChoice) jcb.getSelectedItem();\n              if (fcic != null) {\n                setAttributeCol(fcic.getColumn());\n                setAttributeColName(fcic.getAttribute());\n              }\n            }\n          });\n      gridbag2.setConstraints(attributeJCB, c2);\n      attributePanel.add(attributeJCB);\n\n      c2.gridwidth = GridBagConstraints.RELATIVE;\n\n      label = new JLabel(\"How: \");\n      label.setToolTipText(\"Choose how to display the attribute.\");\n      gridbag2.setConstraints(label, c2);\n      attributePanel.add(label);\n\n      c2.gridwidth = GridBagConstraints.REMAINDER;\n\n      DisplayTypeChoice[] dtc =\n          new DisplayTypeChoice[] {\n            new DisplayTypeChoice(\"None\", null),\n            new DisplayTypeChoice(OMGraphicConstants.TOOLTIP, OMGraphicConstants.TOOLTIP),\n            new DisplayTypeChoice(OMGraphicConstants.INFOLINE, OMGraphicConstants.INFOLINE),\n            new DisplayTypeChoice(OMGraphicConstants.LABEL, OMGraphicConstants.LABEL)\n          };\n\n      displayTypeJCB = new JComboBox(dtc);\n      displayTypeJCB.setToolTipText(\"Choose how to display the attribute.\");\n      displayTypeJCB.addActionListener(\n          new ActionListener() {\n            public void actionPerformed(ActionEvent ae) {\n              JComboBox jcb = (JComboBox) ae.getSource();\n              DisplayTypeChoice dtc = (DisplayTypeChoice) jcb.getSelectedItem();\n              setDisplayType(dtc.getDisplayCommand());\n            }\n          });\n\n      if (OMGraphicConstants.TOOLTIP.equalsIgnoreCase(displayType)) {\n        displayTypeJCB.setSelectedIndex(1);\n      } else if (OMGraphicConstants.INFOLINE.equalsIgnoreCase(displayType)) {\n        displayTypeJCB.setSelectedIndex(2);\n      } else if (OMGraphicConstants.LABEL.equalsIgnoreCase(displayType)) {\n        displayTypeJCB.setSelectedIndex(3);\n      }\n\n      gridbag2.setConstraints(displayTypeJCB, c2);\n      attributePanel.add(displayTypeJCB);\n\n      updateAttributeGUI();\n      // End attribute GUI\n\n      gridbag.setConstraints(attributePanel, c);\n      guiPanel.add(attributePanel);\n    }\n    return guiPanel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3969, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(String)"], "initializationStart": [187, 317], "initializationEnd": [219, 337], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 419, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JLabel)", "jPanel.add(JPasswordField)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [443, 472, 496, 584], "useEnd": [464, 488, 517, 630], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/release-candidate-3-7-0-RC2/src/lib/com/izforge/izpack/installer/WebAccessor.java", "rawCode": "  private JPanel getPasswordPanel() {\n    if (passwordPanel == null) {\n      passwordPanel = new JPanel(new BorderLayout(5, 5));\n\n      promptLabel = new JLabel();\n\n      JPanel fields = new JPanel(new GridLayout(2, 2));\n      nameField = new JTextField();\n      passField = new JPasswordField();\n      JLabel name = new JLabel(\"Name: \"); // TODO: i18n\n      JLabel pass = new JLabel(\"Password: \"); // TODO: i18n\n      fields.add(name);\n      fields.add(nameField);\n      fields.add(pass);\n      fields.add(passField);\n\n      passwordPanel.add(promptLabel, BorderLayout.NORTH);\n      passwordPanel.add(fields, BorderLayout.CENTER);\n    }\n    passField.setText(\"\");\n\n    return passwordPanel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3970, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(*)"], "initializationStart": [3297, 3361], "initializationEnd": [3340, 3390], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setFont(Font)"], "configurationStart": [3396], "configurationEnd": [3445], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 3451, "focalAPIEnd": 3464, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jPanel,GridBagConstraints)"], "useStart": [3471], "useEnd": [3510], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/concord-consortium/mw/tree/master/src/org/concord/modeler/text/PrintPreview.java", "rawCode": "  private void createFullScreen() {\n\n    if (dialog != null) return;\n\n    dialog =\n        new JDialog(\n            JOptionPane.getFrameForComponent(page), page.getAddress() + \" - Print preview\", true);\n    dialog.setResizable(true);\n    dialog.setUndecorated(true);\n    dialog.setSize(screen.width, screen.height);\n    dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n    dialog.setContentPane(contentPane);\n\n    JToolBar tb = new JToolBar();\n\n    Dimension buttonDimension = new Dimension(24, 24);\n\n    JButton button = new JButton(IconPool.getIcon(\"printer\"));\n    button.setToolTipText(\"Send to printer\");\n    button.setPreferredSize(buttonDimension);\n    button.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            print();\n          }\n        });\n    tb.add(button);\n\n    closeButton = new JButton(IconPool.getIcon(\"exit\"));\n    closeButton.setToolTipText(\"Close\");\n    closeButton.setPreferredSize(buttonDimension);\n    closeButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            dialog.dispose();\n          }\n        });\n    tb.add(closeButton);\n    tb.addSeparator();\n\n    String[] scales = {\"10 %\", \"25 %\", \"33 %\", \"50 %\", \"67 %\", \"75 %\", \"90 %\", \"100 %\"};\n    scaleComboBox = new JComboBox(scales);\n    scaleComboBox.setFont(new Font(\"Arial\", Font.PLAIN, 11));\n    scaleComboBox.setToolTipText(\"Scale\");\n    scaleComboBox.setEditable(false);\n    scaleComboBox.setSelectedIndex(scales.length - 1);\n    FontMetrics fm = scaleComboBox.getFontMetrics(scaleComboBox.getFont());\n    int w = fm.stringWidth(scales[scales.length - 1]);\n    int h = fm.getHeight();\n    scaleComboBox.setPreferredSize(new Dimension(w + 40, h + 4));\n    scaleComboBox.setMaximumSize(scaleComboBox.getPreferredSize());\n    scaleComboBox.addItemListener(\n        new ItemListener() {\n          public void itemStateChanged(ItemEvent e) {\n            if (e.getStateChange() == ItemEvent.SELECTED) {\n              previewContainer.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n              String str = scaleComboBox.getSelectedItem().toString();\n              if (str.endsWith(\"%\")) {\n                str = str.substring(0, str.length() - 1);\n                str = str.trim();\n              }\n              int scale = 0;\n              try {\n                scale = Integer.parseInt(str);\n              } catch (NumberFormatException ex) {\n                JOptionPane.showMessageDialog(\n                    dialog,\n                    \"This is an invalid input.\",\n                    \"Input format error\",\n                    JOptionPane.ERROR_MESSAGE);\n                return;\n              }\n              if (scale < 10 || scale > 100) {\n                JOptionPane.showMessageDialog(\n                    dialog,\n                    \"The number must be between 10 and 100.\",\n                    \"Input range error\",\n                    JOptionPane.ERROR_MESSAGE);\n                return;\n              }\n              generate(scale);\n              previewContainer.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n            }\n          }\n        });\n\n    tb.add(scaleComboBox);\n\n    contentPane.add(tb, BorderLayout.NORTH);\n\n    JPanel sb = new JPanel(new FlowLayout(FlowLayout.LEFT));\n    JLabel label = new JLabel(dialog.getTitle());\n    label.setFont(new Font(\"Arial\", Font.ITALIC, 10));\n    sb.add(label);\n\n    contentPane.add(sb, BorderLayout.SOUTH);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3971, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [202, 235], "initializationEnd": [214, 251], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "jPanel.setOpaque(boolean)", "jPanel.add(JButton)"], "configurationStart": [257, 318, 346], "configurationEnd": [312, 340, 386], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 392, "focalAPIEnd": 408, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dekarrin/yuuki-jrpg/tree/master/src/yuuki/ui/ModPanel.java", "rawCode": "  /**\n   * Creates a title panel for a mod.\n   *\n   * @param name The name of the mod.\n   * @return The created title panel.\n   */\n  private JPanel createModTitlePanel(String name) {\n    JPanel panel = new JPanel();\n    JLabel label = new JLabel(name);\n    panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));\n    panel.setOpaque(false);\n    panel.add(Box.createHorizontalStrut(10));\n    panel.add(label);\n    return panel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3972, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel()"], "initializationStart": [569, 661], "initializationEnd": [581, 673], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setVisible(boolean)", "jPanel.setLayout(GridBagLayout)", "comp.setText(String)"], "configurationStart": [2621, 2658, 2760], "configurationEnd": [2648, 2721, 2787], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 2797, "focalAPIEnd": 2818, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [2828, 2880], "useEnd": [2864, 2925], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gitools/gitools/tree/master/org.gitools.ui.app/src/main/java/org/gitools/ui/app/genomespace/GSFileBrowser.java", "rawCode": "  private void initComponents() {\n    // JFormDesigner - Component initialization - DO NOT MODIFY //GEN-BEGIN:initComponents\n    // Generated using JFormDesigner non-commercial license\n    dialogPane = new JPanel();\n    buttonBar = new JPanel();\n    hSpacer2 = new JPanel(null);\n    newFolderButton = new JButton();\n    hSpacer1 = new JPanel(null);\n    cancelButton = new JButton();\n    openButton = new JButton();\n    logoutButton = new JButton();\n    savePanel = new JPanel();\n    label2 = new JLabel();\n    selectedFileTextField = new JTextField();\n    splitPane1 = new JPanel();\n    scrollPane1 = new JScrollPane();\n    fileList = new JList();\n    label1 = new JLabel();\n\n    // ======== this ========\n    Container contentPane = getContentPane();\n    contentPane.setLayout(new BorderLayout());\n\n    // ======== dialogPane ========\n    {\n      dialogPane.setBorder(new EmptyBorder(12, 12, 12, 12));\n      dialogPane.setLayout(new BorderLayout());\n\n      // ======== buttonBar ========\n      {\n        buttonBar.setBorder(new EmptyBorder(12, 0, 0, 0));\n        buttonBar.setLayout(new BoxLayout(buttonBar, BoxLayout.X_AXIS));\n        buttonBar.add(hSpacer2);\n\n        // ---- newFolderButton ----\n        newFolderButton.setText(\"New Folder\");\n        newFolderButton.addActionListener(\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                newFolderButtonActionPerformed(e);\n              }\n            });\n        buttonBar.add(newFolderButton);\n        buttonBar.add(hSpacer1);\n\n        // ---- cancelButton ----\n        cancelButton.setText(\"Cancel\");\n        cancelButton.addActionListener(\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                cancelButtonActionPerformed(e);\n              }\n            });\n        buttonBar.add(cancelButton);\n\n        // ---- openButton ----\n        openButton.setText(\"Open\");\n        openButton.addActionListener(\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                loadButtonActionPerformed(e);\n              }\n            });\n        buttonBar.add(openButton);\n\n        // ---- logoutButton ----\n        logoutButton.setText(\"Logout\");\n        logoutButton.addActionListener(\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                logoutButtonActionPerformed(e);\n              }\n            });\n        buttonBar.add(logoutButton);\n      }\n      dialogPane.add(buttonBar, BorderLayout.SOUTH);\n\n      // ======== savePanel ========\n      {\n        savePanel.setVisible(false);\n        savePanel.setLayout(new BoxLayout(savePanel, BoxLayout.X_AXIS));\n\n        // ---- label2 ----\n        label2.setText(\"Save As: \");\n        savePanel.add(label2);\n        savePanel.add(selectedFileTextField);\n      }\n      dialogPane.add(savePanel, BorderLayout.NORTH);\n\n      // ======== splitPane1 ========\n      {\n        splitPane1.setLayout(new BoxLayout(splitPane1, BoxLayout.Y_AXIS));\n\n        // ======== scrollPane1 ========\n        {\n          scrollPane1.setViewportView(fileList);\n        }\n        splitPane1.add(scrollPane1);\n\n        // ---- label1 ----\n        label1.setHorizontalAlignment(SwingConstants.CENTER);\n        label1.setIcon(new ImageIcon(getClass().getResource(\"/img/genomespacelogo.png\")));\n        splitPane1.add(label1);\n      }\n      dialogPane.add(splitPane1, BorderLayout.CENTER);\n    }\n    contentPane.add(dialogPane, BorderLayout.CENTER);\n    setSize(490, 530);\n    setLocationRelativeTo(getOwner());\n    // JFormDesigner - End of component initialization //GEN-END:initComponents\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3973, "initialization": ["JPanel jPanel = new JPanel(boolean)", "JLabel comp = new JLabel(String)"], "initializationStart": [472, 554], "initializationEnd": [489, 617], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setHorizontalAlignment(*)", "jPanel.setLayout(GridBagLayout)"], "configurationStart": [623, 673], "configurationEnd": [667, 710], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 716, "focalAPIEnd": 733, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JTabbedPane.addTab(String,jPanel)", "new MonitorPanel(String,jPanel,JPanel)", "HashMap.put(jPanel,MonitorPanel)"], "useStart": [794, 1111, 1160], "useEnd": [828, 1154, 1187], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hamo26/SchdedulingAndFunStuff/tree/master/nanork/nano-RK/avrora/src/avrora/gui/AvroraGui.java", "rawCode": "  /**\n   * This function creates an options panel and a display panel for a non-global visual monitor. It\n   * the displays the default simple look for the panels until the simulator is actually run. It\n   * also registers the monitor panel pair in the <code> monitorTabMap\n   * </code>\n   *\n   * @param name Name of the monitor\n   * @return The pair of panels wrapped together in one class\n   */\n  public MonitorPanel createMonitorPanel(String name) {\n    JPanel panel = new JPanel(false); // This is the panel passed to the monitor\n    JLabel filler = new JLabel(\"This panel will update once the simulator is run.\");\n    filler.setHorizontalAlignment(JLabel.CENTER);\n    panel.setLayout(new GridLayout(1, 1));\n    panel.add(filler);\n\n    // Actually display the panel...add it to the tab\n    monitorResults.addTab(name, panel);\n\n    // Now let's create the options panel\n    JPanel optionsPanel = new JPanel(false);\n    JLabel optionsFiller = new JLabel(\"Options for the monitor can be set here. \");\n    optionsPanel.setLayout(new GridLayout(1, 1));\n    optionsPanel.add(optionsFiller);\n\n    MonitorPanel p = new MonitorPanel(name, panel, optionsPanel);\n    monitorTabMap.put(panel, p);\n    return p;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3974, "initialization": ["JLabel comp = new JLabel(String)", "JPanel jPanel = new JPanel()"], "initializationStart": [434, 479], "initializationEnd": [454, 491], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 497, "focalAPIEnd": 521, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "JPanel.add(jPanel)"], "useStart": [527, 598], "useEnd": [550, 627], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tubs-legolabor-teamprojekt/schach/tree/master/lejos_nxj/projects/pctools/lejos/pc/tools/NXJControl.java", "rawCode": "  /** Lay out NXT Selection panel */\n  private void createNXTSelectionPanel() {\n    JPanel nxtPanel = new JPanel();\n    nxtTablePane = new JScrollPane(nxtTable);\n    nxtTablePane.setPreferredSize(nxtTableSize);\n    nxtPanel.add(new JScrollPane(nxtTablePane), BorderLayout.WEST);\n    frame.getContentPane().add(nxtPanel, BorderLayout.NORTH);\n    nxtTable.setPreferredScrollableViewportSize(nxtButtonsPanelSize);\n    JLabel nameLabel = new JLabel(\"Name: \");\n    JPanel namePanel = new JPanel();\n    namePanel.add(nameLabel);\n    namePanel.add(nameText);\n    JPanel nxtButtonPanel = new JPanel();\n    nxtButtonPanel.add(namePanel);\n    JPanel buttonPanel = new JPanel();\n    buttonPanel.add(searchButton);\n    buttonPanel.add(connectButton);\n    nxtButtonPanel.add(buttonPanel);\n    nxtButtonPanel.add(usbButton);\n    nxtButtonPanel.add(bluetoothButton);\n    nxtButtonPanel.add(bothButton);\n    ButtonGroup protocolButtonGroup = new ButtonGroup();\n    protocolButtonGroup.add(usbButton);\n    protocolButtonGroup.add(bluetoothButton);\n    protocolButtonGroup.add(bothButton);\n    nxtButtonPanel.add(lcpButton);\n    nxtButtonPanel.add(rconsoleButton);\n    nxtButtonPanel.add(datalogButton);\n    ButtonGroup appProtocolButtonGroup = new ButtonGroup();\n    appProtocolButtonGroup.add(lcpButton);\n    appProtocolButtonGroup.add(rconsoleButton);\n    appProtocolButtonGroup.add(datalogButton);\n    nxtButtonPanel.setPreferredSize(nxtButtonsPanelSize);\n    nxtPanel.add(nxtButtonPanel, BorderLayout.EAST);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3975, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [152, 190], "initializationEnd": [164, 215], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 267, "focalAPIEnd": 298, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JComboBox)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [304, 946], "useEnd": [337, 994], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biomart/biomart-rc7/tree/master/src/org/biomart/configurator/view/gui/dialogs/LinkManagementDialog.java", "rawCode": "  public JPanel getContentPane() {\n    JPanel content = new JPanel(new BorderLayout());\n    // data source selection panel\n    JPanel dataSourcePanel = new JPanel();\n    JLabel dataSource = new JLabel(\"Data source\");\n    JComboBox dataSourceCB = new JComboBox();\n    dataSourcePanel.add(dataSource);\n    dataSourcePanel.add(dataSourceCB);\n    dataSourceCB.removeAllItems();\n    for (Mart mt : this.selMart.getMartRegistry().getMartList()) {\n      if (mt.getMasterConfig() != null && !mt.getMasterConfig().getLinkList().isEmpty())\n        dataSourceCB.addItem(mt);\n    }\n    dataSourceCB.setSelectedItem(this.selMart);\n    dataSourceCB.addItemListener(\n        new ItemListener() {\n\n          @Override\n          public void itemStateChanged(ItemEvent e) {\n            // TODO Auto-generated method stub\n            if (e.getStateChange() == ItemEvent.SELECTED) {\n              selectSource(e.getItem());\n            }\n          }\n        });\n    content.add(dataSourcePanel, BorderLayout.NORTH);\n\n    // tree panel for links and database\n    this.configTree = new MartConfigTree(null, true, true, true, false, this);\n    this.configTree.addTreeSelectionListener(\n        new TreeSelectionListener() {\n\n          @Override\n          public void valueChanged(TreeSelectionEvent e) {\n            // TODO Auto-generated method stub\n            Object lpc = e.getPath().getLastPathComponent();\n            if (lpc instanceof McTreeNode) {\n              Object obj = ((McTreeNode) lpc).getUserObject();\n              if (obj instanceof Link) {\n                generateLinkLabel((Link) obj);\n              } else if (obj instanceof Mart) {\n                emptyLinkLabel((Mart) obj);\n              }\n            }\n          }\n        });\n    this.generateLinkTree(this.selMart);\n    ToolTipManager.sharedInstance().registerComponent(configTree);\n    LinkManageTreeCellRenderer treeCellRenderer = new LinkManageTreeCellRenderer();\n    configTree.setCellRenderer(treeCellRenderer);\n    configTree.setRowHeight(treeCellRenderer.getIconHeight());\n    /* Map<McNodeType, Map<String, String>> filters = McGuiUtils.INSTANCE.getFilterMap(McViewType.CONFIGURATION);\n    McViewsFilter filter = new McViewsFilter(filters);\n    configTree.getModel().setFilter(filter);*/\n    JScrollPane ltreeScrollPane = new JScrollPane(configTree);\n    content.add(ltreeScrollPane, BorderLayout.CENTER);\n\n    // attribute panel for links\n    // left label and left table\n    leftLabel = new JLabel();\n    AttributeTable leftAttrTable = new AttributeTable(configTree, this);\n    configTree.setAttributeTable(leftAttrTable);\n    JScrollPane leftTableScroll = new JScrollPane(leftAttrTable);\n    JPanel leftTablePanel = new JPanel();\n    leftTablePanel.setLayout(new BoxLayout(leftTablePanel, BoxLayout.Y_AXIS));\n    leftTablePanel.add(leftLabel);\n    leftTablePanel.add(leftTableScroll);\n    // right label and right table\n    rightLabel = new JLabel();\n    AttributeTable rightAttrTable = new AttributeTable(configTree, this);\n    configTree.setLinkAttributeTable(rightAttrTable);\n    JScrollPane rightTableScroll = new JScrollPane(rightAttrTable);\n    JPanel rightTablePanel = new JPanel();\n    rightTablePanel.setLayout(new BoxLayout(rightTablePanel, BoxLayout.Y_AXIS));\n    rightTablePanel.add(rightLabel);\n    rightTablePanel.add(rightTableScroll);\n    // set label font\n    Font font = new Font(\"Serif\", Font.BOLD, 16);\n    leftLabel.setFont(font);\n    rightLabel.setFont(font);\n\n    JPanel linkAttPanel = new JPanel();\n    linkAttPanel.add(leftTablePanel);\n    linkAttPanel.add(rightTablePanel);\n    content.add(linkAttPanel, BorderLayout.SOUTH);\n\n    return content;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3976, "initialization": ["JLabel comp = new JLabel(String)", "JPanel jPanel = new JPanel()"], "initializationStart": [1304, 1383], "initializationEnd": [1323, 1395], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [1402], "configurationEnd": [1439], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1446, "focalAPIEnd": 1462, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JCheckBox)", "showConfirmDialog(*,jPanel,String,*)"], "useStart": [1469, 1496, 1575], "useEnd": [1489, 1509, 1666], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Top-Q/jsystem/tree/master/jsystem-core-projects/jsystemApp/src/main/java/jsystem/treeui/dialog/DialogWithCheckBox.java", "rawCode": "  /**\n   * this function will display(confirm) a dialog pop up with a checkbox -the value of the check box\n   * will be given from the FrameworkOptions value and will be set to the properties files.\n   *\n   * <p>after the user answer- the value of the checkbox will be set to the Jsystem properties file\n   *\n   * <p>Note: the value of the checkbox will be set to the properties file only if the user confirm\n   * the dialog\n   *\n   * @param title - the title of the popup\n   * @param message - the message of the dialog\n   * @param checkBox - the label of the check box\n   * @param option - the value of the checkbox - if the propertie is ture in the Jsystem propertie\n   *     file , the check box will be checked. else- will be set to false\n   * @return user answer (yes or no)\n   * @author liel_r\n   */\n  public static int showConfirmDialogWithCheckBox(\n      String title, String message, String checkBox, FrameworkOptions option) {\n\n    boolean propertyValue = false;\n    /** read property from jsystem.properties */\n    String editProperty = JSystemProperties.getInstance().getPreference(option);\n\n    if (editProperty != null) {\n      if ((\"true\").equals(editProperty)) {\n        propertyValue = true;\n      }\n    }\n\n    JCheckBox cb = new JCheckBox(checkBox, propertyValue);\n\n    JLabel label = new JLabel(message);\n\n    JLabel separator = new JLabel();\n\n    JPanel panel = new JPanel();\n\n    panel.setLayout(new GridLayout(3, 1));\n\n    panel.add(label);\n\n    panel.add(separator);\n\n    panel.add(cb);\n\n    int answer = JOptionPane.YES_OPTION;\n\n    answer =\n        JOptionPane.showConfirmDialog(TestRunner.treeView, panel, title, JOptionPane.YES_NO_OPTION);\n\n    // set the value only if the user will confirm the dialog\n    if (JOptionPane.YES_OPTION == answer) {\n      JSystemProperties.getInstance().setPreference(option, cb.isSelected() + \"\");\n    }\n\n    return answer;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3977, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [62, 171], "initializationEnd": [74, 202], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [80], "configurationEnd": [135], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 428, "focalAPIEnd": 452, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JButton)", "jPanel.putClientProperty(String,Observer)", "jPanel.setMinimumSize(Dimension)", "jPanel.setPreferredSize(Dimension)"], "useStart": [458, 488, 521, 1585, 1637, 1687], "useEnd": [482, 515, 544, 1630, 1681, 1733], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gabrielmd/contiki/tree/master/tools/cooja/java/se/sics/cooja/contikimote/interfaces/ContikiCFS.java", "rawCode": "  public JPanel getInterfaceVisualizer() {\n    JPanel panel = new JPanel();\n    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));\n\n    final JLabel lastTimeLabel = new JLabel(\"Last change at: ?\");\n    final JLabel lastReadLabel = new JLabel(\"Last change read bytes: 0\");\n    final JLabel lastWrittenLabel = new JLabel(\"Last change wrote bytes: 0\");\n    final JButton uploadButton = new JButton(\"Upload binary file\");\n    panel.add(lastTimeLabel);\n    panel.add(lastReadLabel);\n    panel.add(lastWrittenLabel);\n    panel.add(uploadButton);\n\n    uploadButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            byte[] fileData = readDialogFileBytes(null);\n\n            // Write file data to CFS\n            if (fileData != null) {\n              if (setFilesystemData(fileData)) {\n                logger.info(\"Done! (\" + fileData.length + \" bytes written to CFS)\");\n              }\n            }\n          }\n        });\n\n    Observer observer;\n    this.addObserver(\n        observer =\n            new Observer() {\n              public void update(Observable obs, Object obj) {\n                long currentTime = mote.getSimulation().getSimulationTime();\n                lastTimeLabel.setText(\"Last change at time: \" + currentTime);\n                lastReadLabel.setText(\"Last change read bytes: \" + getLastReadCount());\n                lastWrittenLabel.setText(\"Last change wrote bytes: \" + getLastWrittenCount());\n              }\n            });\n\n    // Saving observer reference for releaseInterfaceVisualizer\n    panel.putClientProperty(\"intf_obs\", observer);\n\n    panel.setMinimumSize(new Dimension(140, 60));\n    panel.setPreferredSize(new Dimension(140, 60));\n\n    return panel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3978, "initialization": ["JLabel comp = new JLabel(String)"], "initializationStart": [62], "initializationEnd": [80], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setBounds(int,int,int,int)"], "configurationStart": [86], "configurationEnd": [130], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 136, "focalAPIEnd": 169, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JLabel)"], "useStart": [285, 431], "useEnd": [321, 461], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/UTL/psi/tree/master/wefr/src/webApplication/grafica/Options.java", "rawCode": "  private void buildLabels() {\n    JLabel lblImageDirectory = new JLabel(IMAGES);\n    lblImageDirectory.setBounds(15, 22, 131, 15);\n    panel_dirs.add(lblImageDirectory);\n\n    JLabel lblTextFileDirectory = new JLabel(TEXT_LBL);\n    lblTextFileDirectory.setBounds(15, 87, 131, 15);\n    panel_dirs.add(lblTextFileDirectory);\n\n    JLabel lblLoadAndSave = new JLabel(LOAD_SAVE_LBL);\n    lblLoadAndSave.setBounds(15, 155, 131, 15);\n    panel_dirs.add(lblLoadAndSave);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3979, "initialization": ["JPanel jPanel = createPreferenceTab(String,*,*,boolean)", "JLabel comp = new JLabel(*)"], "initializationStart": [78, 318], "initializationEnd": [259, 344], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setLabelFor(JTextField)"], "configurationStart": [350], "configurationEnd": [381], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 387, "focalAPIEnd": 402, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField,GridBagConstraints)", "jPanel.add(JScrollPane,GridBagConstraints)", "jPanel.add(JLabel,GridBagConstraints)", "jPanel.add(JButton,GridBagConstraints)", "jPanel.add(JButton,GridBagConstraints)", "jPanel.add(JButton,GridBagConstraints)"], "useStart": [408, 2637, 2981, 3052, 3312, 3585], "useEnd": [456, 2676, 3046, 3092, 3353, 3628], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/h4ck3rm1k3/josm-older/tree/master/src/org/openstreetmap/josm/gui/preferences/AdvancedPreference.java", "rawCode": "  public void addGui(final PreferenceTabbedPane gui) {\n    JPanel p =\n        gui.createPreferenceTab(\n            \"advanced\",\n            tr(\"Advanced Preferences\"),\n            tr(\"Setting Preference entries directly. Use with caution!\"),\n            false);\n\n    txtFilter = new JTextField();\n    JLabel lbFilter = new JLabel(tr(\"Search: \"));\n    lbFilter.setLabelFor(txtFilter);\n    p.add(lbFilter);\n    p.add(txtFilter, GBC.eol().fill(GBC.HORIZONTAL));\n    txtFilter\n        .getDocument()\n        .addDocumentListener(\n            new DocumentListener() {\n              public void changedUpdate(DocumentEvent e) {\n                action();\n              }\n\n              public void insertUpdate(DocumentEvent e) {\n                action();\n              }\n\n              public void removeUpdate(DocumentEvent e) {\n                action();\n              }\n\n              private void action() {\n                dataToModel();\n              }\n            });\n\n    model =\n        new DefaultTableModel(new String[] {tr(\"Key\"), tr(\"Value\")}, 0) {\n          @Override\n          public boolean isCellEditable(int row, int column) {\n            return column != 0;\n          }\n\n          @Override\n          public void fireTableCellUpdated(int row, int column) {\n            super.fireTableCellUpdated(row, column);\n            if (column == 1) {\n              data.put((String) model.getValueAt(row, 0), (String) model.getValueAt(row, 1));\n            }\n          }\n        };\n    DefaultTableCellRenderer renderer =\n        new DefaultTableCellRenderer() {\n          @Override\n          public Component getTableCellRendererComponent(\n              JTable table,\n              Object value,\n              boolean isSelected,\n              boolean hasFocus,\n              int row,\n              int column) {\n            JLabel label = new JLabel();\n            String s = defaults.get(value);\n            if (s != null) {\n              if (s.equals(model.getValueAt(row, 1))) {\n                label.setToolTipText(tr(\"Current value is default.\"));\n              } else {\n                label.setToolTipText(tr(\"Default value is ''{0}''.\", s));\n              }\n            } else {\n              label.setToolTipText(\n                  tr(\"Default value currently unknown (setting has not been used yet).\"));\n            }\n            label.setText((String) value);\n            return label;\n          }\n        };\n    final JTable list = new JTable(model);\n    list.putClientProperty(\"terminateEditOnFocusLost\", true);\n    list.getColumn(tr(\"Key\")).setCellRenderer(renderer);\n    JScrollPane scroll = new JScrollPane(list);\n    p.add(scroll, GBC.eol().fill(GBC.BOTH));\n    scroll.setPreferredSize(new Dimension(400, 200));\n\n    orig = Main.pref.getAllPrefix(\"\");\n    defaults = Main.pref.getDefaults();\n    orig.remove(\"osm-server.password\");\n    defaults.remove(\"osm-server.password\");\n    prepareData();\n    dataToModel();\n\n    JButton add = new JButton(tr(\"Add\"));\n    p.add(Box.createHorizontalGlue(), GBC.std().fill(GBC.HORIZONTAL));\n    p.add(add, GBC.std().insets(0, 5, 0, 0));\n    add.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            addPreference(gui);\n          }\n        });\n\n    JButton edit = new JButton(tr(\"Edit\"));\n    p.add(edit, GBC.std().insets(5, 5, 5, 0));\n    edit.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            editPreference(gui, list);\n          }\n        });\n\n    JButton delete = new JButton(tr(\"Delete\"));\n    p.add(delete, GBC.std().insets(0, 5, 0, 0));\n    delete.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            removePreference(gui, list);\n          }\n        });\n\n    list.addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent e) {\n            if (e.getClickCount() == 2) {\n              editPreference(gui, list);\n            }\n          }\n        });\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3980, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel()"], "initializationStart": [291, 384], "initializationEnd": [303, 396], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "comp.setText(String)"], "configurationStart": [309, 402], "configurationEnd": [357, 448], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 974, "focalAPIEnd": 1000, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "addTab(String,*,jPanel)"], "useStart": [1006, 1042], "useEnd": [1036, 1112], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bakkdoor/v-unit/tree/master/src/GUI/dialogs/SearchDialog.java", "rawCode": "  /**\n   * erstellt Tabs für Sucheingaben\n   *\n   * @param searchMode\n   * @return\n   */\n  private JTabbedPane createTabbedPanne(int searchMode) {\n\n    JTabbedPane tabbedPane = new JTabbedPane();\n\n    // **************************************************************\n    JPanel panelVideo = new JPanel();\n    panelVideo.setLayout(new GridLayout(2, 1, 3, 3));\n\n    JLabel labelVideo = new JLabel();\n    labelVideo.setText(\"Bitte Filmtitel eingeben\");\n    textFieldVideo = new JTextField();\n    textFieldVideo.addFocusListener(\n        new FocusListener() {\n\n          @Override\n          public void focusGained(FocusEvent e) {\n            removeFocusFrom(textFieldCustomer);\n          }\n\n          @Override\n          public void focusLost(FocusEvent e) {}\n        });\n\n    textFieldVideo.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            startSearch();\n          }\n        });\n\n    panelVideo.add(labelVideo);\n    panelVideo.add(textFieldVideo);\n    tabbedPane.addTab(\"Film\", new ImageIcon(\"icons/film.png\"), panelVideo);\n\n    // **************************************************************\n    JPanel panelCustomer = new JPanel();\n    panelCustomer.setLayout(new GridLayout(2, 1, 3, 3));\n\n    JLabel labelCustomer = new JLabel();\n    labelCustomer.setText(\"Bitte Kundennamen eingeben\");\n    textFieldCustomer = new JTextField();\n    textFieldCustomer.addFocusListener(\n        new FocusListener() {\n\n          @Override\n          public void focusGained(FocusEvent e) {\n            removeFocusFrom(textFieldVideo);\n          }\n\n          @Override\n          public void focusLost(FocusEvent e) {}\n        });\n\n    textFieldCustomer.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            startSearch();\n          }\n        });\n\n    panelCustomer.add(labelCustomer);\n    panelCustomer.add(textFieldCustomer);\n    tabbedPane.addTab(\"Kunden\", new ImageIcon(\"icons/user.png\"), panelCustomer);\n\n    if (searchMode == CUSTOMERSEARCHMODEDIALOG) {\n      tabbedPane.setSelectedIndex(1);\n    }\n\n    return tabbedPane;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3981, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel()"], "initializationStart": [62, 103], "initializationEnd": [74, 115], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setText(String)"], "configurationStart": [122], "configurationEnd": [159], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 166, "focalAPIEnd": 184, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.putClientProperty(String,Observer)"], "useStart": [499], "useEnd": [544], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sehgalanuj/contiki-interop/tree/master/tools/cooja/java/se/sics/cooja/contikimote/interfaces/ContikiMoteID.java", "rawCode": "  public JPanel getInterfaceVisualizer() {\n    JPanel panel = new JPanel();\n    final JLabel idLabel = new JLabel();\n\n    idLabel.setText(\"Mote ID: \" + moteID);\n\n    panel.add(idLabel);\n\n    Observer observer;\n    this.addObserver(\n        observer =\n            new Observer() {\n              public void update(Observable obs, Object obj) {\n                idLabel.setText(\"Mote ID: \" + moteID);\n              }\n            });\n\n    // Saving observer reference for releaseInterfaceVisualizer\n    panel.putClientProperty(\"intf_obs\", observer);\n\n    return panel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3982, "initialization": ["JPanel jPanel = new Box(*)"], "initializationStart": [2521], "initializationEnd": [2546], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(JButton)"], "configurationStart": [2552, 2583, 2629], "configurationEnd": [2577, 2623, 2684], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 2690, "focalAPIEnd": 2715, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JButton)", "jPanel.add(JButton)", "jPanel.add(Box)", "jPanel.add(JLabel)", "jPanel.add(JTextField)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [2721, 2751, 2797, 2858, 2886, 2912, 2937], "useEnd": [2745, 2791, 2852, 2880, 2906, 2931, 2975], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tinyprod/prod/tree/master/apps/tosthreads/capps/TestCollection/java/Window.java", "rawCode": "  void setup() {\n    JPanel main = new JPanel(new BorderLayout());\n\n    main.setMinimumSize(new Dimension(500, 250));\n    main.setPreferredSize(new Dimension(800, 400));\n\n    // Three panels: mote list, graph, controls\n    moteListModel = new MoteTableModel();\n    JTable moteList = new JTable(moteListModel);\n    moteList.setDefaultRenderer(Color.class, new MoteColor());\n    moteList.setDefaultEditor(Color.class, new ColorCellEditor(\"Pick Mote Color\"));\n    moteList.setPreferredScrollableViewportSize(new Dimension(100, 400));\n    JScrollPane motePanel = new JScrollPane();\n    motePanel.getViewport().add(moteList, null);\n    main.add(motePanel, BorderLayout.WEST);\n\n    graph = new Graph(this);\n    main.add(graph, BorderLayout.CENTER);\n\n    // Controls. Organised using box layouts.\n\n    // Sample period.\n    JLabel sampleLabel = makeLabel(\"Sample period (ms):\", JLabel.RIGHT);\n    sampleText =\n        makeTextField(\n            6,\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                setSamplePeriod();\n              }\n            });\n    updateSamplePeriod();\n\n    // Clear data.\n    JButton clearButton =\n        makeButton(\n            \"Clear data\",\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                clearData();\n              }\n            });\n\n    // Adjust X-axis zoom.\n    Box xControl = new Box(BoxLayout.Y_AXIS);\n    xLabel = makeLabel(\"\", JLabel.CENTER);\n    final JSlider xSlider = new JSlider(JSlider.HORIZONTAL, 0, 8, graph.scale);\n    Hashtable xTable = new Hashtable();\n    for (int i = 0; i <= 8; i += 2)\n      xTable.put(new Integer(i), makeSmallLabel(\"\" + (Graph.MIN_WIDTH << i), JLabel.CENTER));\n    xSlider.setLabelTable(xTable);\n    xSlider.setPaintLabels(true);\n    graph.updateXLabel();\n    graph.setScale(graph.scale);\n    xSlider.addChangeListener(\n        new ChangeListener() {\n          public void stateChanged(ChangeEvent e) {\n            // if (!xSlider.getValueIsAdjusting())\n            graph.setScale((int) xSlider.getValue());\n          }\n        });\n    xControl.add(xLabel);\n    xControl.add(xSlider);\n\n    // Adjust Y-axis range.\n    JLabel yLabel = makeLabel(\"Y:\", JLabel.RIGHT);\n    yText =\n        makeTextField(\n            12,\n            new ActionListener() {\n              public void actionPerformed(ActionEvent e) {\n                setYAxis();\n              }\n            });\n    yText.setText(graph.gy0 + \" - \" + graph.gy1);\n\n    Box controls = new Box(BoxLayout.X_AXIS);\n    controls.add(clearButton);\n    controls.add(Box.createHorizontalGlue());\n    controls.add(Box.createRigidArea(new Dimension(20, 0)));\n    controls.add(sampleLabel);\n    controls.add(sampleText);\n    controls.add(Box.createHorizontalGlue());\n    controls.add(Box.createRigidArea(new Dimension(20, 0)));\n    controls.add(xControl);\n    controls.add(yLabel);\n    controls.add(yText);\n    main.add(controls, BorderLayout.SOUTH);\n\n    // The frame part\n    frame = new JFrame(\"Oscilloscope\");\n    frame.setSize(main.getPreferredSize());\n    frame.getContentPane().add(main);\n    frame.setVisible(true);\n    frame.addWindowListener(\n        new WindowAdapter() {\n          public void windowClosing(WindowEvent e) {\n            System.exit(0);\n          }\n        });\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3983, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel()", "JLabel comp = new JLabel(ImageIcon)"], "initializationStart": [591, 857, 962], "initializationEnd": [603, 869, 981], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "jPanel.setOpaque(boolean)", "jPanel.setBackground(Color)", "jPanel.setBackground(Color)"], "configurationStart": [609, 670, 723, 792], "configurationEnd": [664, 691, 771, 825], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1047, "focalAPIEnd": 1067, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)"], "useStart": [1073], "useEnd": [1092], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/liquidware/antipasto_arduino/tree/master/app/src/antipasto/GUI/ImageListView/ScriptCellRenderer.java", "rawCode": "  public Component getListCellRendererComponent(\n      JList list,\n      Object value, // value to display\n      int index, // cell index\n      boolean isSelected, // is the cell selected\n      boolean chf) // the list and the cell have the focus\n      {\n    /* The DefaultListCellRenderer class will take care of\n     * the JLabels text property, it's foreground and background\n     * colors, and so on.\n     */\n    JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, chf);\n\n    /* Modify the JLabel to your liking here..\n     * */\n    JPanel panel = new JPanel();\n    panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));\n    panel.setOpaque(true);\n\n    if (!isSelected) {\n      panel.setBackground(new Color(0xFF, 0xFF, 0xFF));\n    } else {\n      panel.setBackground(Color.orange);\n    }\n\n    JLabel iconLabel = new JLabel();\n    ImageIcon iconImg = new ImageIcon(Base.getLibImage(\"ruby.png\", this));\n    iconLabel = new JLabel(iconImg);\n\n    JLabel iconText = new JLabel(\" \" + value.toString());\n\n    panel.add(iconLabel);\n    panel.add(iconText);\n\n    return panel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3984, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(String)"], "initializationStart": [187, 317], "initializationEnd": [219, 337], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 419, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JLabel)", "jPanel.add(JPasswordField)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [443, 472, 496, 584], "useEnd": [464, 488, 517, 630], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/release-candidate-3-6-1-RC2/src/lib/com/izforge/izpack/installer/WebAccessor.java", "rawCode": "  private JPanel getPasswordPanel() {\n    if (passwordPanel == null) {\n      passwordPanel = new JPanel(new BorderLayout(5, 5));\n\n      promptLabel = new JLabel();\n\n      JPanel fields = new JPanel(new GridLayout(2, 2));\n      nameField = new JTextField();\n      passField = new JPasswordField();\n      JLabel name = new JLabel(\"Name: \"); // TODO: i18n\n      JLabel pass = new JLabel(\"Password: \"); // TODO: i18n\n      fields.add(name);\n      fields.add(nameField);\n      fields.add(pass);\n      fields.add(passField);\n\n      passwordPanel.add(promptLabel, BorderLayout.NORTH);\n      passwordPanel.add(fields, BorderLayout.CENTER);\n    }\n    passField.setText(\"\");\n\n    return passwordPanel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3985, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [70, 167], "initializationEnd": [82, 196], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "comp.setAlignmentX(int)"], "configurationStart": [88, 202], "configurationEnd": [146, 247], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 253, "focalAPIEnd": 269, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [372, 837], "useEnd": [388, 870], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ahc234/Graphics/tree/master/manipulators_student/src/cs4620/demos/DemoTransforms.java", "rawCode": "  private void createTopPanel(JPanel rightPanel) {\n    JPanel panel = new JPanel();\n    panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));\n    JLabel label = new JLabel(\"Output vertex =\");\n    label.setAlignmentX(Component.LEFT_ALIGNMENT);\n    panel.add(label);\n    label = new JLabel(\"Viewport transform\");\n    label.setAlignmentX(Component.LEFT_ALIGNMENT);\n    panel.add(label);\n\n    // set constraints for placement in sidebar and add\n    GridBagConstraints constraint = new GridBagConstraints();\n    constraint.anchor = GridBagConstraints.WEST;\n    constraint.weighty = 0;\n    constraint.weightx = 1;\n    constraint.gridx = 0;\n    constraint.gridy = controlYIndex++;\n    constraint.fill = GridBagConstraints.PAGE_START;\n    constraint.ipadx = 0;\n    constraint.ipady = 8;\n    constraint.insets = new Insets(0, 8, 0, 8);\n    rightPanel.add(panel, constraint);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3986, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [62, 169], "initializationEnd": [74, 203], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [80], "configurationEnd": [135], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 209, "focalAPIEnd": 231, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.putClientProperty(String,Observer)", "jPanel.setMinimumSize(Dimension)", "jPanel.setPreferredSize(Dimension)"], "useStart": [815, 867, 917], "useEnd": [860, 911, 963], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/retornaz/contiki-cc253x/tree/master/tools/cooja/java/se/sics/cooja/contikimote/interfaces/ContikiBeeper.java", "rawCode": "  public JPanel getInterfaceVisualizer() {\n    JPanel panel = new JPanel();\n    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));\n\n    final JLabel statusLabel = new JLabel(\"Last beep at time: ?\");\n    panel.add(statusLabel);\n\n    Observer observer;\n    this.addObserver(\n        observer =\n            new Observer() {\n              public void update(Observable obs, Object obj) {\n                if (!isBeeping()) {\n                  return;\n                }\n\n                long currentTime = mote.getSimulation().getSimulationTime();\n                statusLabel.setText(\"Last beep at time: \" + currentTime);\n\n                /* Beep on speakers */\n                Toolkit.getDefaultToolkit().beep();\n              }\n            });\n\n    // Saving observer reference for releaseInterfaceVisualizer\n    panel.putClientProperty(\"intf_obs\", observer);\n\n    panel.setMinimumSize(new Dimension(140, 60));\n    panel.setPreferredSize(new Dimension(140, 60));\n\n    return panel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3987, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [3375, 3408], "initializationEnd": [3387, 3432], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 3438, "focalAPIEnd": 3459, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jPanel,GridBagConstraints)"], "useStart": [3564], "useEnd": [3608], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cadsr-semantic-tools/tree/master/software/SIW/src/java/gov/nih/nci/ncicb/cadsr/loader/ui/DEPanel.java", "rawCode": "  private void initUI() {\n    this.setLayout(new BorderLayout());\n\n    JPanel flowPanel = new JPanel(new FlowLayout());\n\n    JPanel mainPanel = new JPanel(new GridBagLayout());\n\n    JPanel conceptCodeNameSummaryPanel = new JPanel(new GridBagLayout());\n    JPanel topPanel = new JPanel(new BorderLayout());\n\n    if (prefs.getShowConceptCodeNameSummary()) {\n      UIUtil.insertInBag(conceptCodeNameSummaryPanel, conceptCodeSummaryLabel, 0, 1);\n      UIUtil.insertInBag(conceptCodeNameSummaryPanel, conceptCodeSummaryValue, 1, 1);\n\n      UIUtil.insertInBag(conceptCodeNameSummaryPanel, conceptNameSummaryLabel, 0, 2);\n      UIUtil.insertInBag(conceptCodeNameSummaryPanel, conceptNameSummaryValue, 1, 2);\n    }\n    UIUtil.insertInBag(mainPanel, deLongNameTitleLabel, 0, 1);\n    UIUtil.insertInBag(mainPanel, deLongNameValueLabel, 1, 1);\n\n    UIUtil.insertInBag(mainPanel, deIdTitleLabel, 0, 2);\n    UIUtil.insertInBag(mainPanel, deIdValueLabel, 1, 2);\n\n    UIUtil.insertInBag(mainPanel, deContextNameTitleLabel, 0, 3);\n    UIUtil.insertInBag(mainPanel, deContextNameValueLabel, 1, 3);\n\n    UIUtil.insertInBag(mainPanel, vdLongNameTitleLabel, 0, 4);\n    UIUtil.insertInBag(mainPanel, vdLongNameValueLabel, 1, 4);\n\n    // Un-Comment if CDEBrowserLink can be directed to CDEBrowser application.\n    // UIUtil.insertInBag(mainPanel, cdeBrowserLinkLabel, 0, 5);\n    // UIUtil.insertInBag(mainPanel, cdeBrowserLinkValueLabel, 1, 5);\n\n    UIUtil.insertInBag(mainPanel, clearButton, 0, 6, 2, 1);\n    UIUtil.insertInBag(mainPanel, searchDeButton, 1, 6);\n\n    cdeBrowserLinkValueLabel.addMouseListener(\n        new MouseListener() {\n          public void mouseClicked(MouseEvent mouseEvent) {\n            String errMsg = \"Error attempting to launch web browser\";\n            String osName = System.getProperty(\"os.name\");\n            String url = getCDEBrowserURL();\n            try {\n              if (osName.startsWith(\"Mac OS\")) {\n                Class fileMgr = Class.forName(\"com.apple.eio.FileManager\");\n                Method openURL = fileMgr.getDeclaredMethod(\"openURL\", new Class[] {String.class});\n                openURL.invoke(null, new Object[] {url});\n              } else if (osName.startsWith(\"Windows\"))\n                Runtime.getRuntime().exec(\"rundll32 url.dll,FileProtocolHandler \" + url);\n              else { // assume Unix or Linux\n                String[] browsers = {\n                  \"firefox\", \"opera\", \"konqueror\", \"epiphany\", \"mozilla\", \"netscape\"\n                };\n                String browser = null;\n                for (int count = 0; count < browsers.length && browser == null; count++)\n                  if (Runtime.getRuntime().exec(new String[] {\"which\", browsers[count]}).waitFor()\n                      == 0) browser = browsers[count];\n                if (browser == null) throw new Exception(\"Could not find web browser\");\n                else Runtime.getRuntime().exec(new String[] {browser, url});\n              }\n            } catch (Exception e) {\n              JOptionPane.showMessageDialog(null, errMsg + \":\\n\" + e.getLocalizedMessage());\n            }\n          }\n\n          public void mousePressed(MouseEvent e) {}\n\n          public void mouseReleased(MouseEvent e) {}\n\n          public void mouseEntered(MouseEvent e) {}\n\n          public void mouseExited(MouseEvent e) {}\n        });\n    disableCDELinks();\n\n    JPanel titlePanel = new JPanel();\n    JLabel title = new JLabel(\"Map to CDE\");\n    titlePanel.add(title);\n\n    flowPanel.add(mainPanel);\n\n    topPanel.add(conceptCodeNameSummaryPanel, BorderLayout.NORTH);\n    topPanel.add(titlePanel, BorderLayout.SOUTH);\n\n    this.add(flowPanel);\n    this.add(topPanel, BorderLayout.NORTH);\n\n    searchDeButton.setActionCommand(SEARCH);\n    clearButton.setActionCommand(CLEAR);\n\n    searchDeButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent event) {\n            JButton button = (JButton) event.getSource();\n            if (button.getActionCommand().equals(SEARCH)) {\n              CadsrDialog cd = BeansAccessor.getCadsrDEDialog();\n\n              // update dialog with current node\n              cd.init(node);\n              cd.setAlwaysOnTop(true);\n              cd.setVisible(true);\n\n              Object o = cd.getAdminComponent();\n              if (o == null) return;\n\n              tempDE = (DataElement) o;\n\n              if (tempDE != null) {\n                // Check for conflict\n                DataElement confDe = DEMappingUtil.checkConflict(de, tempDE);\n                if (confDe != null) {\n                  JOptionPane.showMessageDialog(\n                      null,\n                      PropertyAccessor.getProperty(\n                          \"de.conflict\",\n                          new String[] {\n                            de.getDataElementConcept().getProperty().getLongName(),\n                            confDe.getDataElementConcept().getProperty().getLongName()\n                          }),\n                      \"Conflict\",\n                      JOptionPane.ERROR_MESSAGE);\n                  return;\n                }\n                if (tempDE != null) {\n                  AdminComponent ac = DEMappingUtil.checkDuplicate(de, tempDE);\n                  if (ac != null) {\n                    if (ac instanceof ObjectClass)\n                      JOptionPane.showMessageDialog(\n                          null,\n                          \"This creates a duplicate mapping with \"\n                              + LookupUtil.lookupFullName((ObjectClass) ac),\n                          \"Conflict\",\n                          JOptionPane.ERROR_MESSAGE);\n                    if (ac instanceof DataElement)\n                      JOptionPane.showMessageDialog(\n                          null,\n                          \"This creates a duplicate mapping with \"\n                              + ((DataElement) ac)\n                                  .getDataElementConcept()\n                                  .getProperty()\n                                  .getLongName(),\n                          \"Conflict\",\n                          JOptionPane.ERROR_MESSAGE);\n                    return;\n                  }\n                }\n                updateFields();\n\n                firePropertyChangeEvent(\n                    new PropertyChangeEvent(this, ApplyButtonPanel.SAVE, null, true));\n\n                // firePropertyChangeEvent(\n                // new PropertyChangeEvent(this, ButtonPanel.SWITCH, null, false));\n\n                modified = true;\n              }\n            }\n          }\n        });\n\n    clearButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent event) {\n            JButton button = (JButton) event.getSource();\n            if (button.getActionCommand().equals(CLEAR)) {\n              clear();\n\n              firePropertyChangeEvent(\n                  new PropertyChangeEvent(this, ApplyButtonPanel.SAVE, null, true));\n\n              modified = true;\n              // fireElementChangeEvent(new ElementChangeEvent(node));\n\n            }\n          }\n        });\n\n    if ((node.getUserObject() instanceof DataElement))\n      firePropertyChangeEvent(\n          new PropertyChangeEvent(\n              this, ButtonPanel.SWITCH, null, StringUtil.isEmpty(de.getPublicId())));\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3988, "initialization": ["JPanel jPanel = getContentPane()", "JLabel comp = new JLabel(*,*,*)"], "initializationStart": [371, 1147], "initializationEnd": [387, 1285], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [441], "configurationEnd": [470], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1512, "focalAPIEnd": 1541, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JCheckBox)", "jPanel.add(JProgressBar)", "jPanel.add(JButton)", "jPanel.add(JButton)"], "useStart": [1853, 2225, 2711, 3107], "useEnd": [1891, 2253, 2741, 3134], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/awilhelm/izpack-with-ips/tree/master/src/lib/com/izforge/izpack/uninstaller/UninstallerFrame.java", "rawCode": "  /**\n   * Builds the GUI.\n   *\n   * @param displayForceOption If true, display to the user the option permitting to force all files\n   *     deletion.\n   * @param forceOptionState If true, force deletion is activated.\n   */\n  private void buildGUI(boolean displayForceOption, boolean forceOptionState) {\n    // We initialize our layout\n    JPanel contentPane = (JPanel) getContentPane();\n    GridBagLayout layout = new GridBagLayout();\n    contentPane.setLayout(layout);\n    GridBagConstraints gbConstraints = new GridBagConstraints();\n    gbConstraints.insets = new Insets(5, 5, 5, 5);\n\n    // We prepare our action handler\n    ActionsHandler handler = new ActionsHandler();\n\n    // Prepares the glass pane to block gui interaction when needed\n    JPanel glassPane = (JPanel) getGlassPane();\n    glassPane.addMouseListener(new MouseAdapter() {});\n    glassPane.addMouseMotionListener(new MouseMotionAdapter() {});\n    glassPane.addKeyListener(new KeyAdapter() {});\n\n    // We set-up the buttons factory\n    ButtonFactory.useButtonIcons();\n    ButtonFactory.useHighlightButtons();\n\n    // We put our components\n\n    JLabel warningLabel =\n        new JLabel(\n            langpack.getString(\"uninstaller.warning\"),\n            icons.getImageIcon(\"warning\"),\n            JLabel.TRAILING);\n    buildConstraints(gbConstraints, 0, 0, 2, 1, 1.0, 0.0);\n    gbConstraints.anchor = GridBagConstraints.WEST;\n    gbConstraints.fill = GridBagConstraints.NONE;\n    layout.addLayoutComponent(warningLabel, gbConstraints);\n    contentPane.add(warningLabel);\n\n    targetDestroyCheckbox =\n        new JCheckBox(\n            langpack.getString(\"uninstaller.destroytarget\") + installPath, forceOptionState);\n    buildConstraints(gbConstraints, 0, 1, 2, 1, 1.0, 0.0);\n    layout.addLayoutComponent(targetDestroyCheckbox, gbConstraints);\n    if (displayForceOption) {\n      contentPane.add(targetDestroyCheckbox);\n    }\n    gbConstraints.fill = GridBagConstraints.HORIZONTAL;\n\n    progressBar = new JProgressBar();\n    progressBar.setStringPainted(true);\n    progressBar.setString(langpack.getString(\"InstallPanel.begin\"));\n    buildConstraints(gbConstraints, 0, 2, 2, 1, 1.0, 0.0);\n    layout.addLayoutComponent(progressBar, gbConstraints);\n    contentPane.add(progressBar);\n\n    destroyButton =\n        ButtonFactory.createButton(\n            langpack.getString(\"uninstaller.uninstall\"),\n            icons.getImageIcon(\"delete\"),\n            buttonsHColor);\n    destroyButton.addActionListener(handler);\n    buildConstraints(gbConstraints, 0, 3, 1, 1, 0.5, 0.0);\n    gbConstraints.fill = GridBagConstraints.NONE;\n    gbConstraints.anchor = GridBagConstraints.WEST;\n    layout.addLayoutComponent(destroyButton, gbConstraints);\n    contentPane.add(destroyButton);\n\n    quitButton =\n        ButtonFactory.createButton(\n            langpack.getString(\"installer.quit\"), icons.getImageIcon(\"stop\"), buttonsHColor);\n    quitButton.addActionListener(handler);\n    buildConstraints(gbConstraints, 1, 3, 1, 1, 0.5, 0.0);\n    gbConstraints.anchor = GridBagConstraints.EAST;\n    layout.addLayoutComponent(quitButton, gbConstraints);\n    contentPane.add(quitButton);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3989, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [742, 940], "initializationEnd": [754, 955], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "jPanel.add(JTextField)"], "configurationStart": [760, 892], "configurationEnd": [836, 919], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 961, "focalAPIEnd": 986, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JButton)", "JPanel.add(jPanel,GridBagConstraints)"], "useStart": [1042, 3409, 3447], "useEnd": [1070, 3441, 3497], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/3.11.0-beta2/src/lib/com/izforge/izpack/installer/Debugger.java", "rawCode": "  public JPanel getDebugPanel() {\n    JPanel debugpanel = new JPanel();\n    debugpanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 0, 10));\n    debugpanel.setLayout(new BorderLayout());\n\n    variablesmodel = new VariableHistoryTableModel(variableshistory);\n    variablesrenderer = new VariableHistoryTableCellRenderer(variableshistory);\n    variablestable = new JTable(variablesmodel);\n    variablestable.setDefaultRenderer(VariableHistory.class, variablesrenderer);\n    variablestable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    variablestable.setRowSelectionAllowed(true);\n\n    JScrollPane scrollpane = new JScrollPane(variablestable);\n\n    debugpanel.add(scrollpane, BorderLayout.CENTER);\n\n    JPanel varchangepanel = new JPanel();\n    varchangepanel.setLayout(new BoxLayout(varchangepanel, BoxLayout.LINE_AXIS));\n\n    final JTextField varname = new JTextField();\n    varchangepanel.add(varname);\n    JLabel label = new JLabel(\"=\");\n    varchangepanel.add(label);\n    final JTextField varvalue = new JTextField();\n    varchangepanel.add(varvalue);\n    JButton changevarbtn =\n        ButtonFactory.createButton(\n            idata.langpack.getString(\"debug.changevariable\"),\n            icons.getImageIcon(\"debug.changevariable\"),\n            idata.buttonsHColor);\n    changevarbtn.addActionListener(\n        new ActionListener() {\n\n          public void actionPerformed(ActionEvent e) {\n            String varnametxt = varname.getText();\n            String varvaluetxt = varvalue.getText();\n            if ((varnametxt != null) && (varnametxt.length() > 0)) {\n              if ((varvaluetxt != null) && (varvaluetxt.length() > 0)) {\n                idata.setVariable(varnametxt, varvaluetxt);\n                modifyVariableManually(varnametxt, varvaluetxt);\n              }\n            }\n          }\n        });\n    variablestable.addMouseListener(\n        new MouseListener() {\n\n          public void mouseClicked(MouseEvent e) {\n            int selectedrow = variablestable.getSelectedRow();\n            String selectedvariable = (String) variablesmodel.getValueAt(selectedrow, 0);\n\n            if (e.getClickCount() == 1) {\n              varname.setText(selectedvariable);\n            } else {\n              VariableHistory vh = (VariableHistory) variableshistory.get(selectedvariable);\n\n              JFrame variabledetails = new JFrame(\"Details\");\n\n              JTextPane detailspane = new JTextPane();\n              detailspane.setContentType(\"text/html\");\n              detailspane.setText(vh.getValueHistoryDetails());\n              detailspane.setEditable(false);\n              JScrollPane scroller = new JScrollPane(detailspane);\n\n              Container con = variabledetails.getContentPane();\n              con.setLayout(new BorderLayout());\n              con.add(scroller, BorderLayout.CENTER);\n\n              variabledetails.pack();\n              variabledetails.setVisible(true);\n            }\n          }\n\n          public void mouseEntered(MouseEvent e) {\n            // TODO Auto-generated method stub\n\n          }\n\n          public void mouseExited(MouseEvent e) {\n            // TODO Auto-generated method stub\n\n          }\n\n          public void mousePressed(MouseEvent e) {\n            // TODO Auto-generated method stub\n\n          }\n\n          public void mouseReleased(MouseEvent e) {\n            // TODO Auto-generated method stub\n\n          }\n        });\n    varchangepanel.add(changevarbtn);\n    debugpanel.add(varchangepanel, BorderLayout.SOUTH);\n\n    JPanel conditionpanel = new JPanel();\n    conditionpanel.setLayout(new BorderLayout());\n\n    conditionhistorymodel = new ConditionHistoryTableModel(conditionhistory);\n    final JTable conditiontable = new JTable(conditionhistorymodel);\n    conditionhistoryrenderer = new ConditionHistoryTableCellRenderer(conditionhistory);\n    conditiontable.setDefaultRenderer(ConditionHistory.class, conditionhistoryrenderer);\n    conditiontable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    conditiontable.setRowSelectionAllowed(true);\n    conditiontable.addMouseListener(\n        new MouseListener() {\n\n          public void mouseClicked(MouseEvent e) {\n            int selectedrow = conditiontable.getSelectedRow();\n\n            String selectedcondition =\n                (String) conditiontable.getModel().getValueAt(selectedrow, 0);\n\n            if (e.getClickCount() == 2) {\n\n              ConditionHistory ch = (ConditionHistory) conditionhistory.get(selectedcondition);\n\n              JFrame variabledetails = new JFrame(\"Details\");\n\n              JTextPane detailspane = new JTextPane();\n              detailspane.setContentType(\"text/html\");\n              detailspane.setText(ch.getConditionHistoryDetails());\n              detailspane.setEditable(false);\n              JScrollPane scroller = new JScrollPane(detailspane);\n\n              Container con = variabledetails.getContentPane();\n              con.setLayout(new BorderLayout());\n              con.add(scroller, BorderLayout.CENTER);\n\n              variabledetails.pack();\n              variabledetails.setVisible(true);\n            }\n          }\n\n          public void mouseEntered(MouseEvent e) {\n            // TODO Auto-generated method stub\n\n          }\n\n          public void mouseExited(MouseEvent e) {\n            // TODO Auto-generated method stub\n\n          }\n\n          public void mousePressed(MouseEvent e) {\n            // TODO Auto-generated method stub\n\n          }\n\n          public void mouseReleased(MouseEvent e) {\n            // TODO Auto-generated method stub\n\n          }\n        });\n\n    JScrollPane conditionscroller = new JScrollPane(conditiontable);\n    conditionpanel.add(conditionscroller, BorderLayout.CENTER);\n\n    JTabbedPane tabpane = new JTabbedPane(JTabbedPane.TOP);\n    tabpane.insertTab(\"Variable settings\", null, debugpanel, \"\", 0);\n    tabpane.insertTab(\"Condition settings\", null, conditionpanel, \"\", 1);\n    JPanel mainpanel = new JPanel();\n    mainpanel.setLayout(new BorderLayout());\n    mainpanel.add(tabpane, BorderLayout.CENTER);\n    return mainpanel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3990, "initialization": ["JLabel comp = new JLabel(String)", "JPanel jPanel = new JPanel(*)"], "initializationStart": [2682, 3113], "initializationEnd": [2696, 3140], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 3146, "focalAPIEnd": 3161, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel,String)", "jPanel.add(JLabel)", "jPanel.add(JLabel,String)", "jPanel.add(JLabel,String)", "jPanel.setBorder(Border)", "JPanel.add(jPanel,String)"], "useStart": [3167, 3193, 3216, 3244, 3277, 3333], "useEnd": [3187, 3210, 3238, 3271, 3327, 3355], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JimiHFord/PokeManz/tree/master/src/view/pokemetrics/PokeGenerationsPanel.java", "rawCode": "  /** Initializes components */\n  private void initComponents() {\n    jta = new JTextArea(DEFAULT);\n    jta.setPreferredSize(new Dimension(90, 30));\n    table = new JTable();\n    jsp = new JScrollPane(table);\n    table.getTableHeader().setReorderingAllowed(false);\n    jsp.setPreferredSize(new Dimension(160, 200));\n    metricsBtn = new JButton(\"Base Stats\");\n    genBtn = new JButton(\"Through the Generations\");\n    redblue = new JRadioButton(\"Red/Blue\");\n    yellow = new JRadioButton(\"Yellow\");\n    gold = new JRadioButton(\"Gold\");\n    silver = new JRadioButton(\"Silver\");\n    crystal = new JRadioButton(\"Crystal\");\n    ruby = new JRadioButton(\"Ruby\");\n    sapphire = new JRadioButton(\"Sapphire\");\n    emerald = new JRadioButton(\"Emerald\");\n    firered = new JRadioButton(\"Fire Red\");\n    leafgreen = new JRadioButton(\"Leaf Green\");\n    diamond = new JRadioButton(\"Diamond\");\n    pearl = new JRadioButton(\"Pearl\");\n\n    // Anonymous class for radio buttons\n    ActionListener listener =\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            String option = e.getActionCommand().replaceAll(\"/\", \"_\").replaceAll(\" \", \"_\");\n            String query =\n                \"select \"\n                    + option\n                    + \" from pokedex_description where national_id = '\"\n                    + national_id\n                    + \"';\";\n            String result = \"<html>\" + df.getDexEntry(query) + \"</html>\";\n            if (!result.equalsIgnoreCase(\"<html>null</html>\")) {\n              pokedexEntry.setText(result);\n            } else {\n              pokedexEntry.setText(\"No Pokedex Entry for this Version.\");\n            }\n          }\n        };\n    redblue.addActionListener(listener);\n    yellow.addActionListener(listener);\n    gold.addActionListener(listener);\n    silver.addActionListener(listener);\n    crystal.addActionListener(listener);\n    ruby.addActionListener(listener);\n    sapphire.addActionListener(listener);\n    emerald.addActionListener(listener);\n    firered.addActionListener(listener);\n    leafgreen.addActionListener(listener);\n    diamond.addActionListener(listener);\n    pearl.addActionListener(listener);\n    group = new ButtonGroup(); // add buttons to a group\n    group.add(redblue);\n    group.add(yellow);\n    group.add(gold);\n    group.add(silver);\n    group.add(crystal);\n    group.add(ruby);\n    group.add(sapphire);\n    group.add(emerald);\n    group.add(firered);\n    group.add(leafgreen);\n    group.add(diamond);\n    group.add(pearl);\n    idLbl = new JLabel(\"\");\n    id = new JLabel(\"\");\n    nameLbl = new JLabel(\"\");\n    name = new JLabel(\"\");\n    imageLbl = new JLabel(\"\");\n    pokedexEntry = new JLabel(\"\");\n    pokedexEntry.setPreferredSize(new Dimension(400, 200));\n    pokedexEntry.setFont(new Font(\"Serif\", Font.PLAIN, 24));\n\n    JPanel western = new JPanel(new MigLayout());\n    western.add(jta, \"wrap\");\n    western.add(jsp);\n    this.add(western, \"west\");\n\n    JPanel northern = new JPanel(new MigLayout());\n    northern.add(metricsBtn);\n    northern.add(genBtn);\n    this.add(northern, \"north\");\n\n    JPanel west = new JPanel(new MigLayout());\n    west.add(idLbl);\n    west.add(id, \"wrap\");\n    west.add(nameLbl);\n    west.add(name, \"wrap\");\n    west.add(imageLbl, \"south\");\n    west.setBorder(BorderFactory.createEtchedBorder());\n    this.add(west, \"west\");\n\n    JPanel east = new JPanel(new MigLayout());\n    east.add(pokedexEntry, \"east, wrap\");\n    this.add(east, \"center\");\n\n    JPanel south = new JPanel(new MigLayout());\n    south.add(redblue);\n    south.add(yellow);\n    south.add(gold);\n    south.add(silver);\n    south.add(crystal);\n    south.add(ruby, \"wrap\");\n    south.add(sapphire);\n    south.add(emerald);\n    south.add(firered);\n    south.add(leafgreen);\n    south.add(diamond);\n    south.add(pearl);\n    south.setBorder(BorderFactory.createEtchedBorder());\n    this.add(south, \"south\");\n    initializeActions();\n    updateTable();\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3991, "initialization": ["JPanel jPanel = createVerticalBox()"], "initializationStart": [127], "initializationEnd": [150], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 848, "focalAPIEnd": 868, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JButton)", "jPanel.add(JLabel)", "jPanel.add(Box)", "jPanel.add(JTextField)", "jPanel.add(JButton)", "JPanel.add(jPanel)"], "useStart": [874, 902, 930, 984, 2089, 2410, 2444, 2508], "useEnd": [896, 924, 978, 1001, 2110, 2438, 2464, 2535], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nhandyal/Factory/tree/master/src/factory/client/factoryManager/FactoryManagerGUI.java", "rawCode": "  private void buildKitData(Kits selectedKit) {\n    final int ST_SPACE = 25;\n    kitDataPanel.removeAll();\n    Box container = Box.createVerticalBox();\n    setComponentSize(container, 400, PAGE_HEIGHT);\n    JLabel kitID = new JLabel(Integer.toString(selectedKit.getKitID()));\n    JLabel kitName = new JLabel(selectedKit.getName());\n    JLabel kitDesc = new JLabel(selectedKit.getDescription());\n    JLabel lp = new JLabel(\"----- Listed Parts -----\");\n\n    // align elements to the left collum\n    // all the arguments can be left as KitID.LEFT because we only need any instance of a JComponent\n    // to use the LEFT keyword\n    kitID.setHorizontalAlignment(kitID.LEFT);\n    kitName.setHorizontalAlignment(kitID.LEFT);\n    kitDesc.setHorizontalAlignment(kitID.LEFT);\n    lp.setHorizontalAlignment(kitID.LEFT);\n\n    // add elements to container\n    container.add(kitID);\n    container.add(kitName);\n    container.add(kitDesc);\n    container.add(Box.createVerticalStrut(ST_SPACE));\n    container.add(lp);\n\n    // add part data\n    TreeMap<Integer, Parts> kitParts = selectedKit.getListOfParts();\n    for (Integer i : kitParts.keySet()) {\n      Parts selectedPart = kitParts.get(i);\n      Box holder = Box.createHorizontalBox();\n      Box section1 = Box.createVerticalBox();\n      Box section2 = Box.createVerticalBox();\n      int imageIndex = selectedPart.getImageIndex();\n      String PID = Integer.toString(selectedPart.getPartNumber());\n      String PName = selectedPart.getName();\n      String PDesc = selectedPart.getDesc();\n\n      setComponentSize(holder, 400, 60);\n\n      // add elements to section1\n      section1.add(new JLabel(\"Part \" + i));\n      section1.add(new JLabel(images.getIcon(imageIndex)));\n\n      // add elements to section2\n      section2.add(new JLabel(\"Part #: \" + PID));\n      section2.add(new JLabel(\"Part name: \" + PName));\n      section2.add(new JLabel(\"Part desc: \" + PDesc));\n\n      // add sections to holder\n      holder.add(section1);\n      holder.add(Box.createHorizontalStrut(ST_SPACE));\n      holder.add(section2);\n\n      // add holder to container\n      container.add(holder);\n    }\n\n    // add the build items to the container\n    buildQuantity = new JTextField(\"Enter number of kits to build\");\n    build = new JButton(\"Add to build queue\");\n    setComponentSize(buildQuantity, 400, 20);\n    setComponentSize(buildQuantity, 400, 20);\n    build.addActionListener(this);\n    container.add(buildQuantity);\n    container.add(build);\n\n    // add container to kitDataPanel\n    kitDataPanel.add(container);\n    kitDataPanel.revalidate();\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3992, "initialization": ["JLabel comp = OptionUI.getLabel()"], "initializationStart": [340], "initializationEnd": [353], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.add(JLabel,String)"], "configurationStart": [386], "configurationEnd": [437], "guardCondition": "!(comp==null)", "guardType": "IF {", "guardExpressionStart": 359, "guardExpressionEnd": 377, "guardBlockStart": 359, "guardBlockEnd": 529, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 458, "focalAPIEnd": 480, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JButton)"], "useStart": [488], "useEnd": [522], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/amrecio/mymom/tree/master/src/net/sf/freecol/client/gui/option/OptionGroupUI.java", "rawCode": "  private void addOptionUI(Option option, boolean editable) {\n    OptionUI ui = OptionUI.getOptionUI(gui, option, editable);\n    if (ui == null) {\n      logger.warning(\"Unknown option type: \" + option.toString());\n    } else if (ui instanceof FreeColActionUI) {\n      ((FreeColActionUI) ui).setOptionGroupUI(this);\n    }\n    JLabel label = ui.getLabel();\n    if (label == null) {\n      detailPanel.add(ui.getComponent(), \"newline, span\");\n    } else {\n      detailPanel.add(label);\n      detailPanel.add(ui.getComponent());\n    }\n    if (group.isEditable()) {\n      optionUpdaters.add((OptionUpdater) ui);\n    }\n    if (!option.getId().equals(FreeColObject.NO_ID)) {\n      optionUIs.put(option.getId(), ui);\n    }\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3993, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setText(String)"], "configurationStart": [1585], "configurationEnd": [1629], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 2729, "focalAPIEnd": 2759, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(JComboBox)"], "useStart": [2765, 2806, 2970, 3048], "useEnd": [2799, 2832, 3001, 3083], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pgleeson/TempRepo2/tree/master/src/ucl/physiol/neuroconstruct/gui/SimConfigManager.java", "rawCode": "  private void jbInit() throws Exception {\n    getContentPane().setLayout(borderLayout1);\n\n    jButtonOK.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            jButtonOK_actionPerformed(e);\n          }\n        });\n\n    jPanelList.setLayout(borderLayout2);\n    jPanelDescription.setLayout(borderLayout3);\n\n    this.setTitle(\"Simulation Configuration Manager\");\n\n    jTextAreaDescription.setColumns(10);\n    jTextAreaDescription.setRows(7);\n    jTextAreaDescription.setWrapStyleWord(true);\n    jTextAreaDescription.setLineWrap(true);\n    jTextAreaDescription.setEditable(false);\n\n    jPanelDescription.setBorder(border1);\n    jPanelList.setBorder(border2);\n    jButtonDelete.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            jButtonDelete_actionPerformed(e);\n          }\n        });\n    jButtonEditDesc.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            jButtonEditDesc_actionPerformed(e);\n          }\n        });\n    jButtonAdd.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            jButtonAdd_actionPerformed(e);\n          }\n        });\n    jButtonHelp.setText(\"?\");\n    jButtonHelp.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            jButtonHelp_actionPerformed(e);\n          }\n        });\n    jPanelCheckBoxes.setBorder(BorderFactory.createEtchedBorder());\n    jLabelSimDur.setText(\"Simulation Duration:\");\n    jTextFieldSimDur.setText(\"...\");\n    jTextFieldSimDur.setColumns(6);\n    jLabelMs.setText(\"ms\");\n\n    jTextFieldSimDur.getDocument().addDocumentListener(this);\n\n    this.getContentPane().add(jPanelDescription, java.awt.BorderLayout.CENTER);\n    jPanelButtons.add(jButtonAdd);\n    jPanelButtons.add(jButtonEditDesc);\n\n    // jPanelCheckBoxes.setMinimumSize(new Dimension(400, 100));\n    // jPanelCheckBoxes.setPreferredSize(new Dimension(400, 100));\n\n    jPanelButtons.add(jButtonDelete);\n    jPanelButtons.add(jButtonOK);\n    jPanelButtons.add(jButtonHelp);\n    this.getContentPane().add(jPanelButtons, java.awt.BorderLayout.SOUTH);\n    this.getContentPane().add(jPanelList, java.awt.BorderLayout.NORTH);\n    jPanelList.add(jScrollPane1, java.awt.BorderLayout.CENTER);\n    jScrollPane2.getViewport().add(jTextAreaDescription);\n    jScrollPane1.getViewport().add(jListNames);\n    jPanelDescription.add(jScrollPane2, java.awt.BorderLayout.SOUTH);\n    jPanelDescription.add(jPanelCheckBoxes, java.awt.BorderLayout.CENTER);\n    jPanelDescription.add(jPanelSimDur, java.awt.BorderLayout.NORTH);\n    jPanelSimDur.add(jLabelSimDur);\n    jPanelSimDur.add(jTextFieldSimDur);\n\n    jPanelSimDur.add(jLabelMs);\n\n    if (GeneralUtils.includeParallelFunc()) jLabelMs.setText(\"Parallel configuration: \");\n\n    if (GeneralUtils.includeParallelFunc()) jPanelSimDur.add(jLabelMpiConf);\n\n    if (GeneralUtils.includeParallelFunc()) jPanelSimDur.add(jComboBoxMpiConfs);\n\n    jListNames.addListSelectionListener(this);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3994, "initialization": ["JLabel comp = new JLabel(String,*)", "JPanel jPanel = new JPanel()"], "initializationStart": [1421, 4290], "initializationEnd": [1504, 4302], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setText(String)", "jPanel.setBorder(Border)", "jPanel.setLayout(GridBagLayout)"], "configurationStart": [3228, 4308, 5075], "configurationEnd": [3304, 4472, 5100], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 5107, "focalAPIEnd": 5126, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JPanel)", "jPanel.add(JPanel)", "jPanel.add(JScrollPane)"], "useStart": [5132, 5160, 5188], "useEnd": [5154, 5182, 5208], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/startask/src/main/uk/ac/starlink/startask/WSGUI.java", "rawCode": "  /**\n   * Creates a swing Component to be displayed in the GUI. Sub-Compnents are constructed using\n   * information from the given {@link ParameterList}.\n   *\n   * <p>The Component contains:\n   *\n   * <ul>\n   *   <li>A Label giving the name of the webservice (e.g. Kappa) and the task (e.g. stats).\n   *   <li>A series of TextBoxes, one for each possible input parameter. (the initial entries in the\n   *       TextBoxes will be the suggested value for the {@link Parameter} but note that 'global'\n   *       and 'dynamic' on the <code>ppath</code> are ignored.\n   *   <li>A RUN button which will cause the task to be run with a command line constructed from the\n   *       parameter values currently in the TextBoxes.\n   *   <li>A TextArea in which the output from the task will be displayed.\n   * </ul>\n   *\n   * @param the {@link ParameterList}\n   * @return the Component\n   */\n  public Component createComponents() throws Exception {\n    int nparams;\n\n    // Set up the text area\n    textArea = new JTextArea(20, 80);\n    textArea.setEditable(false);\n    JScrollPane scrollPane =\n        new JScrollPane(\n            textArea,\n            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\n            JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n\n    // GUIMsg for output of diagnostic information\n    info = new GUIMsg(textArea);\n    info.setBuffered(false);\n\n    /* Create the task name label */\n    JLabel taskLabel =\n        new JLabel(\"Parameters for \" + serviceName + \":\" + taskName, SwingConstants.CENTER);\n\n    /* Create the Parameter name/prompt Pane */\n    JPanel namePane = new JPanel();\n    namePane.setLayout(new GridLayout(0, 1));\n\n    /* Create the Text fields pane */\n    JPanel valuePane = new JPanel();\n    valuePane.setLayout(new GridLayout(0, 1));\n\n    /* Add each Parameter to each pane */\n    /* First create arrays to hold the panes for each parameter */\n    /* We create arrays the maximum possible required size */\n    /* but only Read parameters are entered */\n    nparams = plist.size() - 1;\n    // System.out.println(\"nparams \" + nparams );\n    parNames = new String[nparams];\n    JLabel[] nameLabels = new JLabel[nparams];\n    valueFields = new JTextField[nparams];\n\n    Iterator it = plist.iterator();\n    int id = 0;\n    // discard the first (dummy) Parameter\n    Parameter p = (Parameter) it.next();\n\n    while (it.hasNext()) {\n      // System.out.println( \"id \" + id );\n      p = (Parameter) it.next();\n      if (p.isRead()) {\n        parNames[id] = p.getKeyword();\n        nameLabels[id] = new JLabel(parNames[id] + \": \" + p.getPromptString() + \" \");\n        Object suggested = p.getSuggestedValue();\n        String sugStr;\n        if (suggested != null) {\n          sugStr = suggested.toString();\n        } else {\n          sugStr = \"\";\n        }\n        valueFields[id] = new JTextField(sugStr, 20);\n        // Tell accessibility tools about label/textfield pairs\n        nameLabels[id].setLabelFor(valueFields[id]);\n        // System.out.println( valueFields[id].getText() );\n        namePane.add(nameLabels[id]);\n        valuePane.add(valueFields[id]);\n        id++;\n      }\n    }\n\n    // Set the number of Read parameters to be displayed */\n    nReadParams = id;\n    if (nReadParams == 0) {\n      taskLabel.setText(\"No Input Parameters for \" + serviceName + \":\" + taskName);\n    }\n\n    // Set up the RUN button\n    JButton runButton = new JButton(\"RUN\");\n    runButton.setMnemonic(KeyEvent.VK_I);\n    RunListener runListener = new RunListener();\n    runButton.addActionListener(runListener);\n\n    // Put the button in a container\n    JPanel runContainer = new JPanel();\n    runContainer.add(runButton);\n\n    // Put the panels in another panel, labels on left,\n    // text fields on right.\n    JPanel contentPane = new JPanel();\n    contentPane.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));\n    contentPane.setLayout(new BorderLayout());\n    contentPane.add(namePane, BorderLayout.CENTER);\n    contentPane.add(valuePane, BorderLayout.EAST);\n    // and put in yet another container\n    JPanel contentPane2 = new JPanel();\n    contentPane2.add(contentPane);\n\n    /*\n     * An easy way to put space between a top-level container\n     * and its contents is to put the contents in a JPanel\n     * that has an \"empty\" border.\n     */\n    JPanel pane = new JPanel();\n    pane.setBorder(\n        BorderFactory.createEmptyBorder(\n            30, // top\n            30, // left\n            10, // bottom\n            30) // right\n        );\n    // pane.setLayout( new BoxLayout(pane, BoxLayout.Y_AXIS) );\n    // pane.setLayout( new GridLayout(0,1) );\n    GridBagConstraints guiConstraints = new GridBagConstraints();\n    guiConstraints.fill = GridBagConstraints.HORIZONTAL;\n    guiConstraints.gridwidth = GridBagConstraints.REMAINDER;\n\n    GridBagLayout guiLayout = new GridBagLayout();\n    guiLayout.addLayoutComponent(taskLabel, guiConstraints);\n    guiLayout.addLayoutComponent(contentPane2, guiConstraints);\n    guiLayout.addLayoutComponent(runContainer, guiConstraints);\n    guiLayout.addLayoutComponent(scrollPane, guiConstraints);\n    pane.setLayout(guiLayout);\n\n    pane.add(taskLabel);\n    pane.add(contentPane2);\n    pane.add(runContainer);\n    pane.add(scrollPane);\n\n    return pane;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3995, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [303, 391], "initializationEnd": [315, 411], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)"], "configurationStart": [321], "configurationEnd": [367], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 796, "focalAPIEnd": 817, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JLabel)", "jPanel.add(JLabel)", "jPanel.add(ScrollPane)", "jPanel.add(ScrollPane)", "jPanel.add(ScrollPane)"], "useStart": [823, 851, 876, 901, 926], "useEnd": [845, 869, 895, 920, 945], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BlackJoker/MMS_new/tree/master/src/de/team55/mms/gui/mainscreen.java", "rawCode": "  private void modverwaltung() {\n    JPanel mv = new JPanel();\n    cards.add(mv, \"modverwaltung\");\n    JTable mods = new JTable();\n    JTable aktverwalter = new JTable();\n    JTable user = new JTable();\n\n    mv.setLayout(new GridLayout(2, 1));\n\n    JPanel buttons = new JPanel();\n\n    JPanel tabellen = new JPanel();\n    tabellen.setLayout(new GridLayout(2, 3, 0, 0));\n\n    JLabel modules = new JLabel(\"Module\");\n    JLabel aktuelle = new JLabel(\"Aktuelle Verwalter\");\n    JLabel rest = new JLabel(\"Userlist\");\n\n    mv.setLayout(new GridLayout(2, 1));\n    mv.add(tabellen);\n    mv.add(buttons);\n\n    ScrollPane scp_1 = new ScrollPane();\n    ScrollPane scp_2 = new ScrollPane();\n    ScrollPane scp_3 = new ScrollPane();\n\n    scp_1.add(mods);\n    scp_2.add(aktverwalter);\n    scp_3.add(user);\n\n    tabellen.add(modules);\n    tabellen.add(aktuelle);\n    tabellen.add(rest);\n\n    tabellen.add(scp_1);\n    tabellen.add(scp_2);\n    tabellen.add(scp_3);\n\n    JButton back = new JButton(\"Zur\\u00FCck\");\n    JButton save = new JButton(\"Speichern\");\n\n    buttons.add(back);\n    buttons.add(save);\n\n    aktverwalter.setDragEnabled(true);\n    user.setDragEnabled(true);\n\n    mods.setModel(modstuff);\n    aktverwalter.setModel(userstuff);\n    user.setModel(userstuff2);\n\n    userstuff.setRowCount(0);\n    userstuff2.setRowCount(0);\n    modstuff.setRowCount(0);\n\n    // on construction\n    ArrayList<String> modstufflist = new ArrayList<String>();\n    ArrayList<User> alluser = new ArrayList<User>();\n    ArrayList<User> verwalter = new ArrayList<User>();\n\n    modstufflist = serverConnection.getallModulnames();\n\n    for (int i = 0; i < modstufflist.size(); i++) {\n      modstuff.addRow(new Object[] {modstufflist.get(i)});\n    }\n    ArrayList<ArrayList<User>> userlisting = serverConnection.getModulverwalter(null);\n    alluser = userlisting.get(0);\n    verwalter = userlisting.get(1);\n    for (int i = 0; i < alluser.size(); i++) {\n      userstuff.addRow(\n          new Object[] {\n            verwalter.get(i).geteMail(),\n            verwalter.get(i).getVorname(),\n            verwalter.get(i).getNachname()\n          });\n    }\n    for (int i = 0; i < verwalter.size(); i++) {\n      userstuff2.addRow(\n          new Object[] {\n            alluser.get(i).geteMail(), alluser.get(i).getVorname(), alluser.get(i).getNachname()\n          });\n    }\n    userstuff.addRow(new Object[] {\"\", \"bla1-1\", \"bla1-2\"});\n    userstuff2.addRow(new Object[] {\"BLA2\", \"bla2-1\", \"bla2-2\"});\n\n    back.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            // TODO Auto-generated method stub\n            showCard(\"manage\");\n          }\n        });\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3996, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(String)"], "initializationStart": [117, 364], "initializationEnd": [162, 378], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 385, "focalAPIEnd": 402, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.setPreferredSize(Dimension)", "JPanel.add(jPanel)"], "useStart": [408, 542], "useEnd": [467, 567], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Alcidauk/SmallWorldUtbm/tree/master/src/com/utbm/smallWorld/gui/Prompt.java", "rawCode": "  /** Construction */\n  private void build() {\n    top = new JPanel(new FlowLayout(FlowLayout.CENTER));\n    bottom = new JPanel(new FlowLayout(FlowLayout.CENTER));\n\n    input = new JTextField(30);\n\n    JButton quit = new JButton(\"OK\");\n\n    input.addKeyListener(this);\n    quit.addMouseListener(this);\n\n    bottom.add(input);\n    bottom.add(quit);\n\n    question = new JLabel(\"\");\n\n    top.add(question);\n    top.setPreferredSize(new Dimension(DEFAULT_WIDTH - 10, 30));\n    bottom.setPreferredSize(new Dimension(DEFAULT_WIDTH - 10, 80));\n\n    getContentPane().add(top);\n    getContentPane().add(bottom);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3997, "initialization": ["JPanel jPanel = new JPanel(*)", "JLabel comp = new JLabel(String)"], "initializationStart": [85, 168], "initializationEnd": [149, 185], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setHorizontalAlignment(*)", "comp.setPreferredSize(Dimension)"], "configurationStart": [191, 245], "configurationEnd": [239, 289], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 295, "focalAPIEnd": 309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)"], "useStart": [419], "useEnd": [432], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BullShark/IRCBlit/tree/master/src/main/java/com/gitblit/authority/X509CertificateViewer.java", "rawCode": "  private JPanel newField(String label, String value, int cols) {\n    JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 2 * Utils.MARGIN, 0));\n    JLabel lbl = new JLabel(label);\n    lbl.setHorizontalAlignment(SwingConstants.RIGHT);\n    lbl.setPreferredSize(new Dimension(125, 20));\n    panel.add(lbl);\n    JTextField tf = new JTextField(value, cols);\n    tf.setCaretPosition(0);\n    tf.setEditable(false);\n    panel.add(tf);\n    return panel;\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 3998, "initialization": ["JLabel comp = new JLabel()", "JPanel jPanel = createOwnCellRenderer(boolean,boolean)"], "initializationStart": [969, 1066], "initializationEnd": [981, 1103], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setFont(Font)"], "configurationStart": [993], "configurationEnd": [1033], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 1115, "focalAPIEnd": 1140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gnuheidix/dicomux/tree/master/src/dicomux/RawPlugin.java", "rawCode": "    @Override\n    public Component getTreeCellRendererComponent(\n        JTree tree,\n        Object value,\n        boolean selected,\n        boolean expanded,\n        boolean leaf,\n        int row,\n        boolean hasFocus) {\n      m_defaultRenderer.setBorderSelectionColor(Color.WHITE); // deactivate selection border\n      Component stdRenderer =\n          m_defaultRenderer.getTreeCellRendererComponent(\n              tree, value, selected, expanded, leaf, row, hasFocus);\n\n      if (value != null && value instanceof DefaultMutableTreeNode) { // type check\n        Object userObject = ((DefaultMutableTreeNode) value).getUserObject(); // extraction\n\n        if (userObject != null && userObject instanceof TDO) { // type check again\n          TDO tdo = (TDO) userObject; // extraction again - now we build our renderer\n\n          if (selected) {\n            m_dicomContent = tdo.getBytes();\n            setDetailsAction();\n          }\n\n          JLabel descLabel = new JLabel();\n          descLabel.setFont(stdRenderer.getFont());\n\n          JPanel myRenderer = createOwnCellRenderer(leaf, selected);\n          myRenderer.add(descLabel);\n\n          String description = tdo.getDescription(); // extract TDO\n          String data = tdo.getData();\n\n          if (data != null) { // build the complete description depending on the data length\n            int dataLength = tdo.getBytes().length;\n            if (dataLength > 0) {\n              description += \" [Length: \" + dataLength + \"] [Data: \" + data + \"]\";\n            }\n          }\n          descLabel.setText(description);\n          return myRenderer;\n        }\n      }\n\n      return stdRenderer; // use the stdRenderer if something unexpected happened\n    }\n"}, {"dataset": "jPanelAdd", "exampleID": 3999, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel()"], "initializationStart": [375, 575], "initializationEnd": [387, 587], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jPanel.setLayout(GridBagLayout)", "jPanel.setBounds(Rectangle)", "jPanel.setOpaque(boolean)"], "configurationStart": [393, 426, 486], "configurationEnd": [420, 480, 514], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 593, "focalAPIEnd": 614, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.setVisible(boolean)", "jPanel.add(JLabel)", "jPanel.setVisible(boolean)", "JPanel.add(jPanel)"], "useStart": [620, 654, 690, 724], "useEnd": [648, 684, 718, 746], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jpbarbosa/AirlineManager/tree/master/AirlineManager/src/frontOffice/FrontOffice.java", "rawCode": "  public void executeGraphics() {\n\n    f = new JFrame();\n    f.setSize(Constants.DIM_H, Constants.DIM_V);\n    f.setTitle(\"AirlineManager\");\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    panel.setLayout(null);\n    panel.setBackground(Color.lightGray);\n    panel.setVisible(true);\n\n    /* Sets the panel that will hold the time display. */\n    JPanel timeDisplay = new JPanel();\n    timeDisplay.setLayout(null);\n    timeDisplay.setBounds(new Rectangle(765, 11, 250, 50));\n    timeDisplay.setOpaque(false);\n    JLabel time = new JLabel();\n    JLabel userNameField = new JLabel();\n    timeDisplay.add(time);\n    timeDisplay.setVisible(true);\n    timeDisplay.add(userNameField);\n    timeDisplay.setVisible(true);\n    panel.add(timeDisplay);\n    showTime = new ShowTime(time, userNameField);\n\n    panel.add(menu);\n    panel.add(bookingsMenu);\n    panel.add(sendFeedBackMenu);\n    panel.add(searchMenu);\n\n    System.out.println(\"LOADING THE IMAGES...\");\n    menu.CreateImage(\"./src/images/takeoff.jpg\", \"\", 0, 0, 990, 570);\n    bookingsMenu.CreateImage(\"./src/images/takeoff.jpg\", \"\", 0, 0, 990, 570);\n    sendFeedBackMenu.CreateImage(\"./src/images/takeoff.jpg\", \"\", 0, 0, 990, 570);\n    searchMenu.CreateImage(\"./src/images/takeoff.jpg\", \"\", 0, 0, 990, 570);\n\n    /* Sets all the windows invisible, except, naturally, the main menu. */\n    menu.setVisible(true);\n    bookingsMenu.setVisible(false);\n    sendFeedBackMenu.setVisible(false);\n    searchMenu.setVisible(false);\n\n    f.setContentPane(panel);\n    f.setVisible(true);\n  }\n"}, {"dataset": "jPanelAdd", "exampleID": 4000, "initialization": ["JPanel jPanel = new JPanel()", "JLabel comp = new JLabel(String)"], "initializationStart": [143, 234], "initializationEnd": [155, 261], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["comp.setHorizontalAlignment(*)", "comp.setPreferredSize(Dimension)", "jPanel.setPreferredSize(Dimension)"], "configurationStart": [267, 355, 567], "configurationEnd": [315, 402, 733], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jPanel.add(comp)", "focalAPIStart": 739, "focalAPIEnd": 765, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jPanel.add(JTextField)", "JPanel.add(jPanel)"], "useStart": [771, 1720], "useEnd": [796, 1745], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JeffreyTerry/javaprojects/tree/master/Project2/src/PublicationSystemGUI.java", "rawCode": "  private void createDefaultUserPanel() {\n    JPanel userPanel = new JPanel();\n    JPanel inputPanel = new JPanel();\n    JPanel controlPanel = new JPanel();\n    Dimension componentDimension = new Dimension(160, 32);\n\n    userPrompt = new JLabel(\"Enter command\");\n    userPrompt.setHorizontalAlignment(JLabel.CENTER);\n    userInput = new JTextField();\n    userPrompt.setPreferredSize(componentDimension);\n    userInput.setPreferredSize(componentDimension);\n    userInput.addKeyListener(defaultInputListener);\n    userInput.addActionListener(defaultInputListener);\n    inputPanel.setPreferredSize(\n        new Dimension(\n            componentDimension.width,\n            componentDimension.height * 2 + new FlowLayout().getVgap() * 3));\n    inputPanel.add(userPrompt);\n    inputPanel.add(userInput);\n\n    defaultImportButton = new JButton(\"Import Publication\");\n    defaultImportButton.setPreferredSize(componentDimension);\n    defaultImportButton.addActionListener(controlListener);\n    defaultSwitchViewButton = new JButton(\"Switch View\");\n    defaultSwitchViewButton.setPreferredSize(componentDimension);\n    defaultSwitchViewButton.addActionListener(controlListener);\n    controlPanel.setPreferredSize(\n        new Dimension(\n            componentDimension.width,\n            componentDimension.height * 2 + new FlowLayout().getVgap() * 3));\n    controlPanel.add(defaultImportButton);\n    controlPanel.add(defaultSwitchViewButton);\n\n    FlowLayout flowy = new FlowLayout();\n    flowy.setHgap(40);\n    userPanel.setLayout(flowy);\n    userPanel.setPreferredSize(\n        new Dimension(\n            width - new FlowLayout().getHgap() * 2,\n            componentDimension.height * 2 + new FlowLayout().getVgap() * 6));\n    userPanel.add(inputPanel);\n    userPanel.add(controlPanel);\n\n    defaultUserPanel = userPanel;\n  }\n"}]