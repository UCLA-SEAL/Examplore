[{"dataset": "getAsString", "exampleID": 4001, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ConversionException", "exceptionHandlingCall": ["new JsonParseException(String,*)"], "tryExpressionStart": 175, "tryExpressionEnd": 179, "tryBlockStart": 175, "tryBlockEnd": 360, "catchExpressionStart": 236, "catchExpressionEnd": 266, "catchBlockStart": 236, "catchBlockEnd": 360, "exceptionHandlingCallStart": [280], "exceptionHandlingCallEnd": [353], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 209, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["decode(value)"], "useStart": [196], "useEnd": [228], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Aldeon/Aldeon/tree/master/src/main/java/org/aldeon/utils/json/adapters/IdentifierDeserializer.java", "rawCode": "  @Override\n  public Identifier deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n\n    ByteBuffer result;\n\n    try {\n      result = codec.decode(json.getAsString());\n    } catch (ConversionException e) {\n      throw new JsonParseException(\"JSON representation of Identifier is invalid\", e);\n    }\n\n    try {\n      return Identifier.fromByteBuffer(result, false);\n    } catch (IllegalArgumentException e) {\n      throw new JsonParseException(\n          \"String representation of Identifier has invalid size (detected \"\n              + result.capacity()\n              + \" bytes, should be \"\n              + Identifier.LENGTH_BYTES\n              + \")\");\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4002, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jsonElement.isJsonArray())", "guardType": "IF {", "guardExpressionStart": 207, "guardExpressionEnd": 229, "guardBlockStart": 207, "guardBlockEnd": 570, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 582, "focalAPIEnd": 599, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/collex/rdf-indexer/tree/master/src/main/java/org/nines/RDFCompare.java", "rawCode": "  /**\n   * Convert an Entry contaning solr data to a string\n   *\n   * @param obj\n   * @return The string data represented by the object\n   */\n  private final String toSolrString(final JsonElement obj) {\n    if (obj.isJsonArray()) {\n\n      JsonArray jsonArray = (JsonArray) obj;\n      Iterator<JsonElement> itr = jsonArray.iterator();\n      StringBuilder out = new StringBuilder();\n      while (itr.hasNext()) {\n        if (out.length() > 0) {\n          out.append(\" | \");\n        }\n        out.append(itr.next().getAsString());\n      }\n      return out.toString();\n    }\n    return obj.getAsString();\n  }\n"}, {"dataset": "getAsString", "exampleID": 4003, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 69, "focalAPIEnd": 94, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JsonElement.get(value)"], "useStart": [65], "useEnd": [95], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/feroult/churndb/tree/master/src/main/java/churndb/couch/CouchClient.java", "rawCode": "  public CouchResponse get(JsonElement jsonElement) {\n    return get(jsonElement.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4004, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [130], "initializationEnd": [152], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement!=null", "guardType": "IF {", "guardExpressionStart": 158, "guardExpressionEnd": 190, "guardBlockStart": 158, "guardBlockEnd": 271, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 230, "focalAPIEnd": 263, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["valueOf(value)"], "useStart": [214], "useEnd": [264], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thucydides-webtests/thucydides/tree/master/thucydides-core/src/main/java/net/thucydides/core/reports/json/TestOutcomeSerializer.java", "rawCode": "  private boolean readManualTest(JsonObject jsonObject) {\n    boolean isManualTest = false;\n    JsonElement manualTestAttribute = jsonObject.get(MANUAL);\n    if (manualTestAttribute != null) {\n      isManualTest = Boolean.valueOf(manualTestAttribute.getAsString());\n    }\n    return isManualTest;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4005, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 182, "focalAPIEnd": 200, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fromKey(value)"], "useStart": [164], "useEnd": [201], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/atlasapi/atlas-persistence/tree/master/src/main/java/org/atlasapi/equiv/CassandraEquivalenceSummaryStore.java", "rawCode": "    @Override\n    public Publisher deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      return Publisher.fromKey(json.getAsString()).requireValue();\n    }\n"}, {"dataset": "getAsString", "exampleID": 4006, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jsonElement.isJsonPrimitive()"], "configurationStart": [158], "configurationEnd": [180], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 198, "focalAPIEnd": 216, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getAchievement(value)"], "useStart": [183], "useEnd": [217], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CodingBadgers/bFundamentals/tree/master/bFundamentals/src/uk/codingbadgers/bFundamentals/serialization/AchievementSerializer.java", "rawCode": "  @Override\n  public Achievement deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n    return json.isJsonPrimitive() ? getAchievement(json.getAsString()) : null;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4007, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 172, "focalAPIEnd": 190, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["stringToDate(value)"], "useStart": [159], "useEnd": [191], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/puppetlabs/geppetto/tree/master/com.puppetlabs.geppetto.forge.api/src/main/java/com/puppetlabs/geppetto/forge/client/GsonModule.java", "rawCode": "    @Override\n    public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      return stringToDate(json.getAsString());\n    }\n"}, {"dataset": "getAsString", "exampleID": 4008, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [86], "initializationEnd": [99], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jsonElement==null)", "guardType": "IF {", "guardExpressionStart": 107, "guardExpressionEnd": 123, "guardBlockStart": 107, "guardBlockEnd": 154, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 168, "focalAPIEnd": 185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/netceler/workspacemechanic/tree/master/plugins/com.google.eclipse.mechanic/src/com/google/eclipse/mechanic/internal/UriTaskProviderModelParser.java", "rawCode": "    private String deserialize(JsonObject jo, String field) {\n      JsonElement val = jo.get(field);\n      if (val == null) {\n        return null;\n      }\n      return val.getAsString();\n    }\n"}, {"dataset": "getAsString", "exampleID": 4009, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [95], "initializationEnd": [111], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jsonElement==null)", "guardType": "IF {", "guardExpressionStart": 119, "guardExpressionEnd": 136, "guardBlockStart": 119, "guardBlockEnd": 149, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 171, "focalAPIEnd": 189, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.length()"], "useStart": [255], "useEnd": [269], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cloudsmith/geppetto/tree/master/org.cloudsmith.geppetto.catalog/src/org/cloudsmith/geppetto/catalog/impl/CatalogImpl.java", "rawCode": "    private static String getString(JsonObject jsonObj, String key) {\n      JsonElement json = jsonObj.get(key);\n      if (json == null) return null;\n      String value = json.getAsString();\n\n      // unset values are null, not empty strings\n      return value.length() == 0 ? null : value;\n    }\n"}, {"dataset": "getAsString", "exampleID": 4010, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [1216], "initializationEnd": [1239], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["getName()", "println(String)"], "tryExpressionStart": 424, "tryExpressionEnd": 428, "tryBlockStart": 424, "tryBlockEnd": 3153, "catchExpressionStart": 2966, "catchExpressionEnd": 2998, "catchBlockStart": 2966, "catchBlockEnd": 3077, "exceptionHandlingCallStart": [3041, 3008], "exceptionHandlingCallEnd": [3052, 3053], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement!=null", "guardType": "IF {", "guardExpressionStart": 1313, "guardExpressionEnd": 1328, "guardBlockStart": 1313, "guardBlockEnd": 1869, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 1407, "focalAPIEnd": 1423, "followUpCheck": "value.startsWith(\"10.\")", "checkType": "IF", "followUpCheckExpressionStart": 1437, "followUpCheckExpressionEnd": 1463, "followUpCheckBlockStart": 1437, "followUpCheckBlockEnd": 1621, "use": ["value.substring(int)", "value.replaceAll(String,String)", "println(value)", "value.replace(String,String)", "value.lastIndexOf(char)", "jsonElement.getAsString()"], "useStart": [1562, 1699, 1778, 1835, 1920, 2275], "useEnd": [1578, 1724, 1801, 1856, 1940, 2291], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/idiginfo/citagora/tree/master/applications/src/org/idiginfo/docsvc/apps/harvest/SciVerseSplit.java", "rawCode": "  public int splitFiles(String inFilePrefix, String splitFilePrefix) {\n    int numFiles = 0;\n    File baseDirectory = new File(ParameterConstants.Springer.IN_FILE_PREFIX);\n    File[] files = baseDirectory.listFiles();\n    System.out.println(\"number of files: \" + files.length);\n    for (File f : files) {\n      if (f.isDirectory()) {\n        continue;\n      }\n      System.out.println(\"getting file \" + f.getName());\n\n      try {\n        FileReader in = new FileReader(f);\n        JsonObject tree = (JsonObject) parser.parse(in);\n        // get list of records\n        JsonObject results = (JsonObject) tree.get(\"search-results\");\n        JsonElement entry = results.get(\"entry\");\n        JsonArray entries = entry.getAsJsonArray();\n        for (int i = 0; i < entries.size(); i++) {\n          String splitFileName = splitFilePrefix;\n          JsonObject record = (JsonObject) entries.get(i);\n          if (record == null) break;\n          // find an id to use as the file name\n          // try doi first\n          // in some cases, SciVerse returns invalid doi strings\n          // Examples include \"org/{valid doi}\", \"http://...\", \"{valid\n          // doi}\\\"\n          // \"jkns.2011...\"\n          JsonElement id = record.get(\"prism:doi\");\n          boolean isDoi = false;\n          String doi = null;\n          if (id != null) {\n            // look at doi string and fix it if necessary\n            doi = id.getAsString();\n            if (doi.startsWith(\"10.\")) {\n              isDoi = true;\n            } else if (doi.startsWith(\"org\")) {\n              doi = doi.substring(4);\n              isDoi = true;\n            }\n            // fix double slashes and trailing backslashes\n            doi = doi.replaceAll(\"//\", \"/\");\n            if (doi.contains(\"\\\\\")) {\n              System.out.println(doi);\n            }\n            doi = doi.replace(\"\\\\\", \"\");\n          }\n          if (isDoi) {\n            int endIndex = doi.lastIndexOf('/');\n            if (endIndex > -1) {\n              String fileDirName = splitFilePrefix + doi.substring(0, endIndex);\n              (new File(fileDirName)).mkdirs();\n            }\n\n            splitFileName += doi + \".json\";\n          } else { // use SCOPUS id\n            id = record.get(\"dc:identifier\");\n            String idString = id.getAsString();\n            int beginIndex = idString.indexOf(':') + 1;\n            String fileDirName = splitFilePrefix + \"scopus/\";\n            (new File(fileDirName)).mkdirs();\n            splitFileName = fileDirName + \"scopus_\" + idString.substring(beginIndex) + \".json\";\n          }\n          File outFile = new File(splitFileName);\n          if (outFile.exists()) {\n            // already stored this item\n            System.out.println(\"File exists: \" + splitFileName);\n          } else {\n            FileWriter out = new FileWriter(splitFileName);\n            gson.toJson(record, out);\n            out.close();\n          }\n        }\n        in.close();\n        numFiles++;\n      } catch (FileNotFoundException e) {\n        System.out.println(\"no file: \" + f.getName());\n        break;\n      } catch (IOException e) {\n        e.printStackTrace();\n        break;\n      }\n    }\n\n    return numFiles;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4011, "initialization": ["JsonElement jsonElement = serialize(*)"], "initializationStart": [89], "initializationEnd": [136], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jsonElement.isJsonPrimitive()", "jsonElement.getAsJsonPrimitive()"], "configurationStart": [153, 216], "configurationEnd": [178, 244], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 356, "focalAPIEnd": 377, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)"], "useStart": [335], "useEnd": [378], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BMintern/gson/tree/master/src/test/java/com/google/gson/LongSerializationPolicyTest.java", "rawCode": "  public void testStringLongSerialization() throws Exception {\n    JsonElement element = LongSerializationPolicy.STRING.serialize(1556L);\n    assertTrue(element.isJsonPrimitive());\n\n    JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive();\n    assertFalse(jsonPrimitive.isNumber());\n    assertTrue(jsonPrimitive.isString());\n    assertEquals(\"1556\", element.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4012, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 181, "focalAPIEnd": 199, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["findByKey(value)"], "useStart": [156], "useEnd": [200], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/helpscout/helpscout-api-java/tree/master/src/main/java/net/helpscout/api/adapters/WorkflowStatusAdapter.java", "rawCode": "  public WorkflowStatus deserialize(\n      JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n    return WorkflowStatus.findByKey(json.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4013, "initialization": ["JsonElement jsonElement = JsonElement.getAsJsonObject()"], "initializationStart": [160], "initializationEnd": [182], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jsonElement==null)", "guardType": "IF {", "guardExpressionStart": 210, "guardExpressionEnd": 239, "guardBlockStart": 210, "guardBlockEnd": 432, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 452, "focalAPIEnd": 482, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Map<String, Class<?>>.get(value)"], "useStart": [507], "useEnd": [532], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ybonnel/gson/tree/master/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java", "rawCode": "  public T deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n    JsonElement labelJsonElement = json.getAsJsonObject().remove(typeFieldName);\n    if (labelJsonElement == null) {\n      throw new JsonParseException(\n          \"cannot deserialize \"\n              + typeOfT\n              + \" because it does not define a field named \"\n              + typeFieldName);\n    }\n    String label = labelJsonElement.getAsString();\n    Class<?> subtype = labelToSubtype.get(label);\n    if (subtype == null) {\n      throw new JsonParseException(\n          \"cannot deserialize \"\n              + baseType\n              + \" subtype named \"\n              + label\n              + \"; did you forget to register a subtype?\");\n    }\n    @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T\n    T result = (T) context.deserialize(json, subtype);\n    return result;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4014, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [441], "initializationEnd": [461], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 486, "focalAPIEnd": 512, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["forName(value)"], "useStart": [605], "useEnd": [629], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/andfRa/Saga/tree/master/src/org/saga/config/ProfessionDeserializer.java", "rawCode": "  public ProficiencyDefinition deserialize(\n      JsonElement je, Type type, JsonDeserializationContext jdc) throws JsonParseException {\n\n    System.out.println(type);\n\n    // If this JsonElement is not an object we cannot create a profession\n    if (!je.isJsonObject()) {\n      throw new JsonParseException(\"ProfessionDeserializer JsonElement is not JsonObject!\");\n    }\n\n    JsonObject jo = (JsonObject) je;\n    JsonElement classElement = jo.get(\"_className\");\n    String className = classElement.getAsString();\n\n    ProficiencyDefinition ability = null;\n\n    // Try to get class\n    try {\n      type = Class.forName(className);\n    } catch (ClassNotFoundException e) {\n      throw new JsonParseException(\"Class \" + className + \" not found!\");\n    }\n\n    ability = jdc.deserialize(je, type);\n\n    return ability;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4015, "initialization": ["JsonElement jsonElement = getAsJsonObject()"], "initializationStart": [586], "initializationEnd": [611], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 677, "focalAPIEnd": 704, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(*,value)"], "useStart": [644], "useEnd": [705], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ybonnel/gson/tree/master/gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java", "rawCode": "  public void testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances() {\n    Gson gson =\n        new GsonBuilder()\n            .registerTypeAdapter(Base.class, new BaseSerializer())\n            .registerTypeAdapter(Sub.class, new SubSerializer())\n            .create();\n    ClassWithBaseArrayField target = new ClassWithBaseArrayField(new Base[] {new Sub(), new Sub()});\n    JsonObject json = (JsonObject) gson.toJsonTree(target);\n    JsonArray array = json.get(\"base\").getAsJsonArray();\n    for (JsonElement element : array) {\n      JsonElement serializerKey = element.getAsJsonObject().get(Base.SERIALIZER_KEY);\n      assertEquals(SubSerializer.NAME, serializerKey.getAsString());\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4016, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [638], "initializationEnd": [658], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 683, "focalAPIEnd": 707, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set_wid(value)"], "useStart": [664], "useEnd": [708], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CMPUT301F12T07/classproject/tree/master/CrowdSource/src/com/CMPUT301F12T07/crowdsource/taskmodeldb/JsonParseTool.java", "rawCode": "  /**\n   * Parse Json string to get a single task\n   *\n   * @param jsonStringVersion\n   * @return Task\n   */\n  public static Task parseTask(String jsonStringVersion) {\n    Task remoteTask = new Task();\n    // TODO: Convert to a Regular Expression to remove \"{ }\" and \\\" \\\":\n    jsonStringVersion = jsonStringVersion.replace(\"\\\"{\", \"{\");\n    jsonStringVersion = jsonStringVersion.replace(\"}\\\"\", \"}\");\n    jsonStringVersion = jsonStringVersion.replace(\"\\\\\", \"\");\n    JsonElement jsonElement = new JsonParser().parse(jsonStringVersion);\n    JsonObject jsonObject = jsonElement.getAsJsonObject();\n\n    // get wid\n    JsonElement widElement = jsonObject.get(\"id\");\n    remoteTask.set_wid(widElement.getAsString());\n\n    // get summary\n    JsonObject contentObject = jsonObject.getAsJsonObject(\"content\");\n    JsonElement titleElement = contentObject.get(\"_title\");\n    remoteTask.set_title(titleElement.getAsString());\n    JsonElement descElement = contentObject.get(\"_description\");\n    remoteTask.set_description(descElement.getAsString());\n    JsonElement dateCreElement = contentObject.get(\"_dateCreate\");\n    remoteTask.set_dateCreate(dateCreElement.getAsString(), Task.TASK_REMOTE);\n    JsonElement dateDueElement = contentObject.get(\"_dateDue\");\n    remoteTask.set_dateDue(dateDueElement.getAsString(), Task.TASK_REMOTE);\n    remoteTask.set_followed(0);\n    JsonElement num_follElement = contentObject.get(\"_num_followed\");\n    remoteTask.set_num_followed(num_follElement.getAsInt());\n    JsonElement qty_fillElement = contentObject.get(\"_qty_filled\");\n    remoteTask.set_qty_filled(qty_fillElement.getAsInt());\n    JsonElement quantElement = contentObject.get(\"_quantity\");\n    remoteTask.set_quantity(quantElement.getAsInt());\n    JsonElement typeElement = contentObject.get(\"_type\");\n    remoteTask.set_type(typeElement.getAsString());\n    JsonElement uidElement = contentObject.get(\"_uid\");\n    remoteTask.set_uid(uidElement.getAsString());\n    JsonElement emailElement = contentObject.get(\"_user_email\");\n    remoteTask.set_user_email(emailElement.getAsString());\n    JsonElement visiElement = contentObject.get(\"_visibility\");\n    remoteTask.set_visibility(visiElement.getAsInt());\n\n    return remoteTask;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4017, "initialization": ["JsonElement jsonElement = JsonArray.get(int)"], "initializationStart": [245], "initializationEnd": [265], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 284, "focalAPIEnd": 300, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(value)"], "useStart": [273], "useEnd": [301], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ieb/sparsemapcontent/tree/master/extensions/integration/src/main/java/uk/co/tfd/sm/integration/JsonTestUtils.java", "rawCode": "  public static Set<String> toResponseSet(JsonElement jsonElement) {\n    Set<String> result = Sets.newHashSet();\n    JsonArray responseArray = toJsonArray(jsonElement);\n    for (int i = 0; i < responseArray.size(); i++) {\n      JsonElement je = responseArray.get(i);\n      result.add(je.getAsString());\n    }\n    return result;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4018, "initialization": ["JsonElement jsonElement = JsonElement.get(String)"], "initializationStart": [425], "initializationEnd": [450], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement!=null && !(jsonElement.isJsonNull())", "guardType": "IF {", "guardExpressionStart": 456, "guardExpressionEnd": 477, "guardBlockStart": 456, "guardBlockEnd": 622, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 593, "focalAPIEnd": 615, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JackDanger/google-wave-samples/tree/master/extensions/robots/java/buggy/src/com/google/wave/api/impl/OperationRequestGsonAdaptor.java", "rawCode": "  /**\n   * Returns a property of {@code JsonObject} as a {@link String}, then remove that property.\n   *\n   * @param jsonObject the {@code JsonObject} to get the property from.\n   * @param key the key of the property.\n   * @return the property as {@link String}, or {@code null} if not found.\n   */\n  private static String getPropertyAsStringThenRemove(JsonObject jsonObject, ParamsProperty key) {\n    JsonElement property = jsonObject.get(key.key());\n    if (property != null) {\n      jsonObject.remove(key.key());\n      if (property.isJsonNull()) {\n        return null;\n      }\n      return property.getAsString();\n    }\n    return null;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4019, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 177, "focalAPIEnd": 195, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["findByKey(value)"], "useStart": [154], "useEnd": [196], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/helpscout/helpscout-api-java/tree/master/src/main/java/net/helpscout/api/adapters/WorkflowTypeAdapter.java", "rawCode": "  public WorkflowType deserialize(\n      JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n    return WorkflowType.findByKey(json.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4020, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [292], "initializationEnd": [317], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 375, "focalAPIEnd": 400, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)"], "useStart": [355], "useEnd": [401], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ybonnel/gson/tree/master/gson/src/test/java/com/google/gson/JsonObjectTest.java", "rawCode": "  public void testAddingStringProperties() throws Exception {\n    String propertyName = \"property\";\n    String value = \"blah\";\n\n    JsonObject jsonObj = new JsonObject();\n    jsonObj.addProperty(propertyName, value);\n\n    assertTrue(jsonObj.has(propertyName));\n\n    JsonElement jsonElement = jsonObj.get(propertyName);\n    assertNotNull(jsonElement);\n    assertEquals(value, jsonElement.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4021, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 199, "focalAPIEnd": 217, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.indexOf(char)", "value.indexOf(char)", "value.substring(int,int)", "value.substring(*)", "safeName(value,boolean)", "new ModuleName(String,value,boolean)"], "useStart": [265, 315, 397, 460, 526, 581], "useEnd": [282, 332, 422, 486, 558, 615], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cloudsmith/geppetto/tree/master/org.cloudsmith.geppetto.forge.api/src/main/java/org/cloudsmith/geppetto/forge/v2/model/ModuleName.java", "rawCode": "    @Override\n    public ModuleName deserialize(\n        JsonElement json, java.lang.reflect.Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      String name = json.getAsString();\n      String owner = null;\n      int sepIdx = name.indexOf('/');\n      if (sepIdx < 0) sepIdx = name.indexOf('-');\n\n      if (sepIdx >= 0) {\n        owner = ModuleName.safeOwner(name.substring(0, sepIdx));\n        name = ModuleName.safeName(name.substring(sepIdx + 1), false);\n      } else {\n        name = ModuleName.safeName(name, false);\n      }\n      return new ModuleName(owner, name, false);\n    }\n"}, {"dataset": "getAsString", "exampleID": 4022, "initialization": ["JsonElement jsonElement = JsonElement.get(String)"], "initializationStart": [127], "initializationEnd": [158], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 187, "focalAPIEnd": 212, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set(T,value)"], "useStart": [259], "useEnd": [298], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Su-per-b/LearnHPB-middleware/tree/master/eclipseWorkspace/FMUwrapper/src/main/java/com/sri/straylight/fmuWrapper/serialization/AdapterBase.java", "rawCode": "    @Override\n    public void run() throws IllegalArgumentException, IllegalAccessException {\n\n      JsonElement jsonElement = jsonObject_.get(jsonFieldName_);\n\n      String fieldValue = jsonElement.getAsString();\n\n      javaField_.setAccessible(true);\n      javaField_.set(destObject_, fieldValue);\n    }\n"}, {"dataset": "getAsString", "exampleID": 4023, "initialization": ["JsonElement jsonElement = getAsJsonObject()"], "initializationStart": [586], "initializationEnd": [611], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 677, "focalAPIEnd": 704, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(*,value)"], "useStart": [644], "useEnd": [705], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhouxiaoxiaoxujian/gson/tree/master/gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java", "rawCode": "  public void testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances() {\n    Gson gson =\n        new GsonBuilder()\n            .registerTypeAdapter(Base.class, new BaseSerializer())\n            .registerTypeAdapter(Sub.class, new SubSerializer())\n            .create();\n    ClassWithBaseArrayField target = new ClassWithBaseArrayField(new Base[] {new Sub(), new Sub()});\n    JsonObject json = (JsonObject) gson.toJsonTree(target);\n    JsonArray array = json.get(\"base\").getAsJsonArray();\n    for (JsonElement element : array) {\n      JsonElement serializerKey = element.getAsJsonObject().get(Base.SERIALIZER_KEY);\n      assertEquals(SubSerializer.NAME, serializerKey.getAsString());\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4024, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 251, "tryExpressionEnd": 255, "tryBlockStart": 251, "tryBlockEnd": 430, "catchExpressionStart": 324, "catchExpressionEnd": 349, "catchBlockStart": 324, "catchBlockEnd": 430, "exceptionHandlingCallStart": [402], "exceptionHandlingCallEnd": [421], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 294, "focalAPIEnd": 312, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parse(value)"], "useStart": [277], "useEnd": [313], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/helpscout/helpscout-api-java/tree/master/src/main/java/net/helpscout/api/adapters/DateAdapter.java", "rawCode": "  public synchronized Date deserialize(\n      JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n    synchronized (dateFormat) {\n      Calendar cal = Calendar.getInstance();\n      cal.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n      try {\n        cal.setTime(dateFormat.parse(json.getAsString()));\n      } catch (ParseException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      }\n      return cal.getTime();\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4025, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IllegalArgumentException", "exceptionHandlingCall": ["deserialize(JsonElement,*)", "new DateTime(Date)"], "tryExpressionStart": 148, "tryExpressionEnd": 152, "tryBlockStart": 148, "tryBlockEnd": 409, "catchExpressionStart": 207, "catchExpressionEnd": 242, "catchBlockStart": 207, "catchBlockEnd": 409, "exceptionHandlingCallStart": [332, 384], "exceptionHandlingCallEnd": [369, 402], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 180, "focalAPIEnd": 198, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new DateTime(value)", "deserialize(jsonElement,*)"], "useStart": [167, 332], "useEnd": [199, 369], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TheMineCart/BetterProtected/tree/master/src/main/java/tmc/BetterProtected/adaptors/DateTimeAdaptor.java", "rawCode": "  @Override\n  public DateTime deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n    try {\n      return new DateTime(json.getAsString());\n    } catch (IllegalArgumentException e) {\n      // May be it came in formatted as a java.util.Date, so try that\n      Date date = context.deserialize(json, Date.class);\n      return new DateTime(date);\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4026, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 197, "focalAPIEnd": 222, "followUpCheck": "value.endsWith(\"Z\")", "checkType": "IF", "followUpCheckExpressionStart": 269, "followUpCheckExpressionEnd": 289, "followUpCheckBlockStart": 269, "followUpCheckBlockEnd": 554, "use": ["value.contains(String)", "Logger.warn(String,value)", "DateFormat.parse(value)", "new JsonSyntaxException(value,*)"], "useStart": [248, 412, 617, 694], "useEnd": [263, 454, 639, 723], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fathomdb/cloud/tree/master/fathomcloud-client/src/main/java/io/fathom/cloud/openstack/client/DateTypeAdapter.java", "rawCode": "  @Override\n  public synchronized Date deserialize(\n      JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) {\n    DateFormat useDateFormat;\n\n    String s = jsonElement.getAsString();\n    boolean hasMillis = s.contains(\".\");\n    if (s.endsWith(\"Z\")) {\n      useDateFormat = hasMillis ? dateFormatZulu : dateFormatZuluNoMillis;\n    } else {\n      if (!hasMillis) {\n        log.warn(\"Cannot deserialize date: {}\", s);\n        throw new UnsupportedOperationException();\n      }\n      useDateFormat = dateFormat;\n    }\n    try {\n      synchronized (useDateFormat) {\n        return useDateFormat.parse(s);\n      }\n    } catch (ParseException e) {\n      throw new JsonSyntaxException(s, e);\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4027, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 172, "focalAPIEnd": 193, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Worker(value)"], "useStart": [161], "useEnd": [194], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ipeirotis/Troia-Server/tree/master/core/src/main/java/com/datascience/serialization/json/DataJSON.java", "rawCode": "    @Override\n    public Worker deserialize(JsonElement element, Type type, JsonDeserializationContext context)\n        throws JsonParseException {\n      return new Worker(element.getAsString());\n    }\n"}, {"dataset": "getAsString", "exampleID": 4028, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 257, "focalAPIEnd": 275, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new URL(value)", "log(*,String,value)"], "useStart": [304, 374], "useEnd": [322, 448], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/damiancarrillo/agave-framework/tree/master/agave-integration/agave-gson-integration/src/main/java/co/cdev/gson/URLTypeAdapter.java", "rawCode": "  @Override\n  public URL deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n    URL url = null;\n\n    if (typeOfT.equals(URL.class) && !json.equals(JsonNull.INSTANCE)) {\n      String urlString = json.getAsString();\n\n      try {\n        url = new URL(urlString);\n      } catch (MalformedURLException e) {\n        LOGGER.log(Level.WARNING, \"Unable to deserialize URI from: %s\", urlString);\n      }\n    }\n\n    return url;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4029, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 168, "focalAPIEnd": 186, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["findByKey(value)"], "useStart": [146], "useEnd": [187], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/helpscout/helpscout-api-java/tree/master/src/main/java/net/helpscout/api/adapters/ThreadStateAdapter.java", "rawCode": "  public ThreadState deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n    return ThreadState.findByKey(json.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4030, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [292], "initializationEnd": [317], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 375, "focalAPIEnd": 400, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)"], "useStart": [355], "useEnd": [401], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BMintern/gson/tree/master/src/test/java/com/google/gson/JsonObjectTest.java", "rawCode": "  public void testAddingStringProperties() throws Exception {\n    String propertyName = \"property\";\n    String value = \"blah\";\n\n    JsonObject jsonObj = new JsonObject();\n    jsonObj.addProperty(propertyName, value);\n\n    assertTrue(jsonObj.has(propertyName));\n\n    JsonElement jsonElement = jsonObj.get(propertyName);\n    assertNotNull(jsonElement);\n    assertEquals(value, jsonElement.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4031, "initialization": ["JsonElement jsonElement = new JsonPrimitive(String)"], "initializationStart": [82], "initializationEnd": [108], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jsonElement.toString()"], "configurationStart": [140], "configurationEnd": [166], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 195, "focalAPIEnd": 224, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)"], "useStart": [173], "useEnd": [225], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schmittjoh/plovr/tree/master/test/org/plovr/GsonTest.java", "rawCode": "  @Test\n  public void gettingStringAsString() {\n    JsonElement stringPrimitive = new JsonPrimitive(\"hello\");\n    assertEquals(\"\\\"hello\\\"\", stringPrimitive.toString());\n    assertEquals(\"hello\", stringPrimitive.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4032, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 167, "focalAPIEnd": 185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.substring(int)"], "useStart": [167], "useEnd": [198], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eatnumber1/google-gson/tree/master/src/test/java/com/google/gson/functional/EnumTest.java", "rawCode": "    public Roshambo deserialize(JsonElement json, Type classOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      return Roshambo.valueOf(json.getAsString().substring(3));\n    }\n"}, {"dataset": "getAsString", "exampleID": 4033, "initialization": ["JsonElement jsonElement = Iterator<JsonElement>.next()"], "initializationStart": [755], "initializationEnd": [770], "hasTryCatch": 1, "exceptionType": "JsonParseException", "exceptionHandlingCall": ["debug(String,*)"], "tryExpressionStart": 784, "tryExpressionEnd": 788, "tryBlockStart": 784, "tryBlockEnd": 1411, "catchExpressionStart": 1303, "catchExpressionEnd": 1333, "catchBlockStart": 1303, "catchBlockEnd": 1411, "exceptionHandlingCallStart": [1349], "exceptionHandlingCallEnd": [1396], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement.isJsonPrimitive()", "guardType": "IF {", "guardExpressionStart": 844, "guardExpressionEnd": 876, "guardBlockStart": 844, "guardBlockEnd": 1242, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 957, "focalAPIEnd": 980, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setId(value)", "deserialize(jsonElement,*)"], "useStart": [938, 1074], "useEnd": [981, 1116], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/USGS-CIDA/coastal-hazards/tree/master/coastal-hazards-portal/src/main/java/gov/usgs/cida/coastalhazards/gson/adapter/ItemAdapter.java", "rawCode": "  @Override\n  public Item deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n    Item result = null;\n    Object defaultObj = GsonUtil.getDefault().fromJson(json, typeOfT);\n    if (defaultObj instanceof Item) {\n      result = (Item) defaultObj;\n      if (json instanceof JsonObject) {\n        JsonObject itemJson = (JsonObject) json;\n        JsonElement children = itemJson.get(\"children\");\n        if (children instanceof JsonArray) {\n          JsonArray childrenArray = (JsonArray) children;\n          List<Item> childrenList = new ArrayList<>();\n          Iterator<JsonElement> iterator = childrenArray.iterator();\n          while (iterator.hasNext()) {\n            JsonElement childItem = iterator.next();\n            try {\n              Item childItemObj = null;\n              if (childItem.isJsonPrimitive()) {\n                childItemObj = new Item();\n                childItemObj.setId(childItem.getAsString());\n              } else if (childItem.isJsonObject()) {\n                childItemObj = (Item) context.deserialize(childItem, Item.class);\n              } else {\n                throw new JsonParseException(\"Need a list of primatives or objects\");\n              }\n              childrenList.add(childItemObj);\n            } catch (JsonParseException ex) {\n              log.debug(\"Problem deserializing children\", ex);\n            }\n          }\n          result.setChildren(childrenList);\n        }\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4034, "initialization": ["JsonElement jsonElement = JsonElement.get(String)"], "initializationStart": [241], "initializationEnd": [258], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jsonElement.getAsJsonObject()", "jsonElement.getAsJsonObject()"], "configurationStart": [163, 392], "configurationEnd": [185, 414], "guardCondition": "!(null==jsonElement) && jsonElement.isJsonPrimitive() && !(jsonElement.isJsonObject())", "guardType": "IF {", "guardExpressionStart": 269, "guardExpressionEnd": 286, "guardBlockStart": 269, "guardBlockEnd": 961, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 496, "focalAPIEnd": 514, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jsonElement.getAsJsonArray()", "jsonElement.getAsJsonObject()"], "useStart": [803, 916], "useEnd": [824, 938], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IKANOW/Infinit.e/tree/master/core/infinit.e.harvest.library/src/com/ikanow/infinit/e/harvest/extraction/document/file/JsonToMetadataParser.java", "rawCode": "  private String getKey(JsonElement meta, String key, boolean bPrimitiveOnly) {\n    try {\n      String[] components = key.split(\"\\\\.\");\n      JsonObject metaObj = meta.getAsJsonObject();\n      for (String comp : components) {\n        meta = metaObj.get(comp);\n\n        if (null == meta) {\n          return null;\n        } // TESTED\n        else if (meta.isJsonObject()) {\n          metaObj = meta.getAsJsonObject();\n        } // TESTED\n        else if (meta.isJsonPrimitive()) {\n          return meta.getAsString();\n        } // TESTED\n        else if (bPrimitiveOnly) { // (meta isn't allowed to be an array, then you'd have too many\n                                   // primary keys!)\n          return null;\n        } // TOTEST\n        else { // Check with first instance\n          JsonArray array = meta.getAsJsonArray();\n          meta = array.get(0);\n          if (meta.isJsonObject()) {\n            metaObj = meta.getAsJsonObject();\n          }\n        } // TESTED\n      }\n      if (!bPrimitiveOnly) { // allow objects, we just care if the field exists...\n        if (null != metaObj) {\n          return \"[Object]\";\n        }\n      } // TESTED\n    } catch (Exception e) {\n    } // no primary key\n\n    return null;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4035, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["JsonElement.getAsString()", "new JsonSyntaxException(*,*)"], "tryExpressionStart": 98, "tryExpressionEnd": 102, "tryBlockStart": 98, "tryBlockEnd": 212, "catchExpressionStart": 170, "catchExpressionEnd": 201, "catchBlockStart": 170, "catchBlockEnd": 212, "exceptionHandlingCallStart": [261, 460], "exceptionHandlingCallEnd": [279, 506], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 139, "focalAPIEnd": 157, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parse(value)", "jsonElement.getAsString()", "parse(value)", "jsonElement.getAsString()", "parse(value)", "jsonElement.getAsString()", "new JsonSyntaxException(value,*)"], "useStart": [121, 261, 244, 386, 366, 484, 460], "useEnd": [158, 279, 280, 404, 405, 502, 506], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eatnumber1/google-gson/tree/master/src/main/java/com/google/gson/DefaultTypeAdapters.java", "rawCode": "    private Date deserializeToDate(JsonElement json) {\n      synchronized (localFormat) {\n        try {\n          return localFormat.parse(json.getAsString());\n        } catch (ParseException ignored) {\n        }\n        try {\n          return enUsFormat.parse(json.getAsString());\n        } catch (ParseException ignored) {\n        }\n        try {\n          return iso8601Format.parse(json.getAsString());\n        } catch (ParseException e) {\n          throw new JsonSyntaxException(json.getAsString(), e);\n        }\n      }\n    }\n"}, {"dataset": "getAsString", "exampleID": 4036, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["toString()", "error(String,*)"], "tryExpressionStart": 279, "tryExpressionEnd": 283, "tryBlockStart": 279, "tryBlockEnd": 873, "catchExpressionStart": 755, "catchExpressionEnd": 780, "catchBlockStart": 755, "catchBlockEnd": 873, "exceptionHandlingCallStart": [845, 790], "exceptionHandlingCallEnd": [860, 864], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement.isJsonPrimitive()", "guardType": "IF {", "guardExpressionStart": 293, "guardExpressionEnd": 320, "guardBlockStart": 293, "guardBlockEnd": 746, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 403, "focalAPIEnd": 421, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parse(value)", "jsonElement.getAsJsonObject()"], "useStart": [387, 536], "useEnd": [422, 558], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/krampstudio/YajMember/tree/master/src/main/java/org/yajug/users/json/DateSerializer.java", "rawCode": "  /** we need to synchronize because the date formatter is not thread safe */\n  @Override\n  public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n    synchronized (formatter) {\n      Date date = null;\n      try {\n        if (json.isJsonPrimitive()) { // {date : \"2012-06-01\"} we use common parsing\n          date = formatter.parse(json.getAsString());\n        } else if (json.isJsonObject() // {date : {$date : \"2012-06-01\"}} we retrieve the string\n            && json.getAsJsonObject().getAsJsonPrimitive(\"$date\") != null) {\n\n          String jsonDate = json.getAsJsonObject().getAsJsonPrimitive(\"$date\").getAsString();\n          date = formatter.parse(jsonDate);\n        }\n      } catch (ParseException e) {\n        logger.error(\"Error while deserializing json date :\" + json.toString(), e);\n      }\n      return date;\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4037, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jsonElement.getAsJsonObject()", "jsonElement.getAsJsonPrimitive()"], "configurationStart": [537, 654], "configurationEnd": [563, 683], "guardCondition": "jsonElement.isJsonPrimitive() &&  !(jsonElement.isJsonObject())", "guardType": "IF {", "guardExpressionStart": 484, "guardExpressionEnd": 512, "guardBlockStart": 484, "guardBlockEnd": 1214, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 993, "focalAPIEnd": 1015, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getString(value)"], "useStart": [979], "useEnd": [1016], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vega113/WaveInCloud/tree/master/src/org/waveprotocol/wave/communication/gson/GsonUtil.java", "rawCode": "  /**\n   * Unpack a JsonElement into the object type\n   *\n   * @param <T> The type to deserialize\n   * @param object The object used to accept the pare result\n   * @param valueObj The root of a tree of JsonElements or an indirection index\n   * @param gson A Gson context\n   * @param raw\n   * @throws GsonException\n   */\n  public static <T extends GsonSerializable> void extractJsonObject(\n      T object, JsonElement valueObj, Gson gson, RawStringData raw) throws GsonException {\n    if (valueObj.isJsonObject()) {\n      object.fromGson(valueObj.getAsJsonObject(), gson, raw);\n    } else if (valueObj.isJsonPrimitive()) {\n      JsonPrimitive primitive = valueObj.getAsJsonPrimitive();\n      String s = null;\n      if (raw == null || !primitive.isString()) {\n        throw new GsonException(\n            \"Decoding \"\n                + valueObj\n                + \" as object \"\n                + object.getClass()\n                + \" with no RawStringData given\");\n      }\n      s = raw.getString(valueObj.getAsString());\n      GsonUtil.parseJson(object, gson, s, raw);\n    } else {\n      throw new GsonException(\n          \"Cannot decode valueObject \" + valueObj.getClass() + \" as object \" + object.getClass());\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4038, "initialization": ["JsonElement jsonElement = getAsJsonObject()"], "initializationStart": [586], "initializationEnd": [611], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 677, "focalAPIEnd": 704, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(*,value)"], "useStart": [644], "useEnd": [705], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BMintern/gson/tree/master/src/test/java/com/google/gson/functional/CustomSerializerTest.java", "rawCode": "  public void testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances() {\n    Gson gson =\n        new GsonBuilder()\n            .registerTypeAdapter(Base.class, new BaseSerializer())\n            .registerTypeAdapter(Sub.class, new SubSerializer())\n            .create();\n    ClassWithBaseArrayField target = new ClassWithBaseArrayField(new Base[] {new Sub(), new Sub()});\n    JsonObject json = (JsonObject) gson.toJsonTree(target);\n    JsonArray array = json.get(\"base\").getAsJsonArray();\n    for (JsonElement element : array) {\n      JsonElement serializerKey = element.getAsJsonObject().get(Base.SERIALIZER_KEY);\n      assertEquals(SubSerializer.NAME, serializerKey.getAsString());\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4039, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 161, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BMintern/gson/tree/master/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java", "rawCode": "    public Manager deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n      Manager result = new Manager();\n      result.userid = json.getAsString();\n      return result;\n    }\n"}, {"dataset": "getAsString", "exampleID": 4040, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jsonElement.getAsJsonObject()", "jsonElement.getAsJsonArray()"], "configurationStart": [237, 512], "configurationEnd": [262, 536], "guardCondition": "!(jsonElement.getAsString().equals(\"\",)) && !(jsonElement.isJsonArray()) && jsonElement.isJsonPrimitive() && !(jsonElement.isJsonObject())", "guardType": "IF {", "guardExpressionStart": 184, "guardExpressionEnd": 211, "guardBlockStart": 184, "guardBlockEnd": 1546, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 1474, "focalAPIEnd": 1495, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(value)"], "useStart": [1508], "useEnd": [1539], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cgueret/LinkedIDS/tree/master/server/IDSWrapper/src/uk/ac/ids/util/DataHarvester.java", "rawCode": "  /**\n   * @param root\n   * @param element\n   * @param results\n   */\n  private void parseElement(\n      String root, JsonElement element, Map<String, ArrayList<String>> results) {\n    if (element.isJsonObject()) {\n      JsonObject obj = element.getAsJsonObject();\n      for (Entry<String, JsonElement> entry : obj.entrySet()) {\n        String newRoot = root + entry.getKey() + \".\";\n        parseElement(newRoot, entry.getValue(), results);\n      }\n    } else if (element.isJsonArray()) {\n      JsonArray array = element.getAsJsonArray();\n\n      // Look if there is any complex element in the array\n      boolean complex = false;\n      for (int i = 0; i < array.size(); i++) if (!array.get(i).isJsonPrimitive()) complex = true;\n\n      for (int i = 0; i < array.size(); i++) {\n        JsonElement v = array.get(i);\n        String newRoot = root + i + \".\";\n        if (!complex) {\n          newRoot = root;\n          parseElement(newRoot, v, results);\n        }\n        // FIXME Disabled generating predicates with numbers in them\n        // parseElement(newRoot, v, results);\n      }\n    } else if (element.isJsonPrimitive()) {\n      String key = \"#\" + root.substring(0, root.length() - 1);\n      if (resultRoot != null) key = key.replace(resultRoot + \".\", \"\");\n      ArrayList<String> list = null;\n      if (results.containsKey(key)) {\n        list = results.get(key);\n      } else {\n        list = new ArrayList<String>();\n        results.put(key, list);\n      }\n      if (!element.getAsString().equals(\"\")) list.add(element.getAsString());\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4041, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 155, "focalAPIEnd": 171, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.isEmpty()", "jsonElement.getAsString()", "parseLocalDate(value)"], "useStart": [155, 246, 211], "useEnd": [181, 262, 263], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/noselusbe/noselus-backend/tree/master/src/main/java/be/noselus/service/JsonTransformer.java", "rawCode": "    @Override\n    public LocalDate deserialize(JsonElement je, Type type, JsonDeserializationContext jdc)\n        throws JsonParseException {\n      return je.getAsString().isEmpty()\n          ? null\n          : DATE_TIME_FORMATTER.parseLocalDate(je.getAsString());\n    }\n"}, {"dataset": "getAsString", "exampleID": 4042, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [95], "initializationEnd": [111], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jsonElement==null)", "guardType": "IF {", "guardExpressionStart": 119, "guardExpressionEnd": 136, "guardBlockStart": 119, "guardBlockEnd": 149, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 171, "focalAPIEnd": 189, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.length()"], "useStart": [255], "useEnd": [269], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/puppetlabs/geppetto/tree/master/com.puppetlabs.geppetto.catalog/src/com/puppetlabs/geppetto/catalog/impl/CatalogEdgeImpl.java", "rawCode": "    private static String getString(JsonObject jsonObj, String key) {\n      JsonElement json = jsonObj.get(key);\n      if (json == null) return null;\n      String value = json.getAsString();\n\n      // unset values are null, not empty strings\n      return value.length() == 0 ? null : value;\n    }\n"}, {"dataset": "getAsString", "exampleID": 4043, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 168, "focalAPIEnd": 186, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["findByLabel(value)"], "useStart": [145], "useEnd": [187], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/helpscout/helpscout-api-java/tree/master/src/main/java/net/helpscout/api/adapters/ActionTypeAdapter.java", "rawCode": "  public ActionType deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n    return ActionType.findByLabel(json.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4044, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ConversionException", "exceptionHandlingCall": ["new JsonParseException(String,*)"], "tryExpressionStart": 168, "tryExpressionEnd": 172, "tryBlockStart": 168, "tryBlockEnd": 353, "catchExpressionStart": 229, "catchExpressionEnd": 259, "catchBlockStart": 229, "catchBlockEnd": 353, "exceptionHandlingCallStart": [273], "exceptionHandlingCallEnd": [346], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 202, "focalAPIEnd": 220, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["decode(value)"], "useStart": [189], "useEnd": [221], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Aldeon/Aldeon/tree/master/src/main/java/org/aldeon/utils/json/adapters/KeyDeserializer.java", "rawCode": "  @Override\n  public Key deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n\n    ByteBuffer result;\n\n    try {\n      result = codec.decode(json.getAsString());\n    } catch (ConversionException e) {\n      throw new JsonParseException(\"Invalid base64 representation of binary data\", e);\n    }\n\n    try {\n      return keygen.parsePublicKey(result);\n    } catch (KeyParseException e) {\n      throw new JsonParseException(\"Failed to parse the public key\", e);\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4045, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [984], "initializationEnd": [1001], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": [], "tryExpressionStart": 307, "tryExpressionEnd": 311, "tryBlockStart": 307, "tryBlockEnd": 3464, "catchExpressionStart": 2990, "catchExpressionEnd": 3022, "catchBlockStart": 2990, "catchBlockEnd": 3178, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement!=null", "guardType": "IF {", "guardExpressionStart": 1075, "guardExpressionEnd": 1090, "guardBlockStart": 1075, "guardBlockEnd": 1833, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 1169, "focalAPIEnd": 1185, "followUpCheck": "value.startsWith(\"10.\")", "checkType": "IF", "followUpCheckExpressionStart": 1199, "followUpCheckExpressionEnd": 1225, "followUpCheckBlockStart": 1199, "followUpCheckBlockEnd": 1462, "use": ["value.substring(int)", "value.replaceAll(String,String)", "println(value)", "value.replace(String,String)", "value.replace(String,String)", "value.replace(String,String)", "value.replace(String,String)", "value.lastIndexOf(char)", "jsonElement.getAsString()"], "useStart": [1324, 1540, 1619, 1676, 1717, 1758, 1799, 1884, 2330], "useEnd": [1340, 1565, 1642, 1697, 1738, 1779, 1820, 1904, 2346], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/idiginfo/citagora/tree/master/controllers/src/main/java/org/idiginfo/docsvc/controller/harvest/SpringerSplit.java", "rawCode": "  public int splitFiles(String inFilePrefix, String splitFilePrefix) {\n    int numFiles = 0;\n    for (int fileNum = FIRST_FILE; fileNum < MAX_FILES; fileNum++) {\n      String inFileName = inFilePrefix + String.format(\"%05d\", fileNum) + \".json\";\n      System.out.println(\"getting file \" + inFileName);\n      try {\n        FileReader in = new FileReader(inFileName);\n        JsonObject tree = (JsonObject) parser.parse(in);\n        // get list of records\n\n        JsonArray results = (JsonArray) tree.get(\"records\");\n        for (JsonElement result : results) {\n          JsonObject record = (JsonObject) result;\n          String splitFileName = splitFilePrefix;\n          if (record == null) break;\n          // find an id to use as the file name\n          // try doi first\n          // in some cases, SciVerse returns invalid doi strings\n          // Examples include \"org/{valid doi}\", \"http://...\", \"{valid\n          // doi}\\\"\n          // \"jkns.2011...\"\n          JsonElement id = record.get(\"doi\");\n          boolean isDoi = false;\n          String doi = null;\n          if (id != null) {\n            // look at doi string and fix it if necessary\n            doi = id.getAsString();\n            if (doi.startsWith(\"10.\")) {\n              isDoi = true;\n            } else if (doi.startsWith(\"org\")) {\n              doi = doi.substring(4);\n              isDoi = true;\n            } else if (doi.startsWith(\"DOItmp\")) {\n              isDoi = true;\n            }\n            // fix double slashes and trailing backslashes\n            doi = doi.replaceAll(\"//\", \"/\");\n            if (doi.contains(\"\\\\\")) {\n              System.out.println(doi);\n            }\n            doi = doi.replace(\"\\\\\", \"\");\n            doi = doi.replace(\":\", \"-\");\n            doi = doi.replace(\"<\", \"-\");\n            doi = doi.replace(\">\", \"-\");\n          }\n          if (isDoi) {\n            int endIndex = doi.lastIndexOf('/');\n            if (endIndex > -1) {\n              String fileDirName = splitFilePrefix + doi.substring(0, endIndex);\n              (new File(fileDirName)).mkdirs();\n            }\n\n            splitFileName += doi + \".json\";\n          } else { // use SCOPUS id\n            // TODO revise for Springer\n            System.out.println(\"no doi for item\");\n            id = record.get(\"dc:identifier\");\n            String idString = id.getAsString();\n            int beginIndex = idString.indexOf(':') + 1;\n            String fileDirName = splitFilePrefix + \"scopus/\";\n            (new File(fileDirName)).mkdirs();\n            splitFileName = fileDirName + \"scopus_\" + idString.substring(beginIndex) + \".json\";\n          }\n\n          File outFile = new File(splitFileName);\n          if (outFile.exists()) {\n            // already stored this item\n            System.out.println(\"File exists: \" + splitFileName);\n          } else {\n            try {\n              FileWriter out = new FileWriter(splitFileName);\n              gson.toJson(record, out);\n              out.close();\n            } catch (FileNotFoundException e) {\n              System.out.println(\"problem creating file \" + splitFileName);\n              e.printStackTrace();\n              return fileNum;\n            }\n          }\n        }\n        in.close();\n        numFiles++;\n      } catch (FileNotFoundException e) {\n        System.out.println(\"no file: \" + inFileName);\n        e.printStackTrace();\n        break;\n      } catch (IOException e) {\n        e.printStackTrace();\n        break;\n      }\n    }\n\n    return numFiles;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4046, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 196, "focalAPIEnd": 214, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getLocalDateTimeFromString(value)"], "useStart": [169], "useEnd": [215], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/norrs/busbuddy/tree/master/public-api/src/main/java/no/norrs/busbuddy/pub/api/LocalDateTimeTypeConverter.java", "rawCode": "  @Override\n  public LocalDateTime deserialize(JsonElement json, Type type, JsonDeserializationContext context)\n      throws JsonParseException {\n    try {\n      return getLocalDateTimeFromString(json.getAsString());\n\n    } catch (IllegalArgumentException e) {\n      return null;\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4047, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["JsonElement.getAsString()", "new JsonSyntaxException(*,*)"], "tryExpressionStart": 92, "tryExpressionEnd": 96, "tryBlockStart": 92, "tryBlockEnd": 200, "catchExpressionStart": 160, "catchExpressionEnd": 191, "catchBlockStart": 160, "catchBlockEnd": 200, "exceptionHandlingCallStart": [245, 432], "exceptionHandlingCallEnd": [263, 478], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 131, "focalAPIEnd": 149, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parse(value)", "jsonElement.getAsString()", "parse(value)", "jsonElement.getAsString()", "parse(value)", "jsonElement.getAsString()", "new JsonSyntaxException(value,*)"], "useStart": [113, 245, 228, 362, 342, 456, 432], "useEnd": [150, 263, 264, 380, 381, 474, 478], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/allankin/gproject/tree/master/TXL/source/client/txl-android/src/com/google/gson/DefaultDateTypeAdapter.java", "rawCode": "  private Date deserializeToDate(JsonElement json) {\n    synchronized (localFormat) {\n      try {\n        return localFormat.parse(json.getAsString());\n      } catch (ParseException ignored) {\n      }\n      try {\n        return enUsFormat.parse(json.getAsString());\n      } catch (ParseException ignored) {\n      }\n      try {\n        return iso8601Format.parse(json.getAsString());\n      } catch (ParseException e) {\n        throw new JsonSyntaxException(json.getAsString(), e);\n      }\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4048, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [134], "initializationEnd": [172], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement!=null", "guardType": "IF {", "guardExpressionStart": 178, "guardExpressionEnd": 205, "guardBlockStart": 178, "guardBlockEnd": 300, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 263, "focalAPIEnd": 291, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["unescape(value)"], "useStart": [254], "useEnd": [292], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thucydides-webtests/thucydides/tree/master/thucydides-core/src/main/java/net/thucydides/core/reports/json/TestOutcomeSerializer.java", "rawCode": "  private TestOutcome addQualifierIfPresent(JsonObject outcomeJsonObject, TestOutcome testOutcome) {\n    JsonElement qualifierField = outcomeJsonObject.get(QUALIFIER_FIELD);\n    if (qualifierField != null) {\n      testOutcome = testOutcome.withQualifier(unescape(qualifierField.getAsString()));\n    }\n    return testOutcome;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4049, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 165, "focalAPIEnd": 183, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new DateTime(value)"], "useStart": [152], "useEnd": [184], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/3wks/thundr/tree/master/src/main/java/com/threewks/thundr/json/DateTimeTypeConvertor.java", "rawCode": "  @Override\n  public DateTime deserialize(JsonElement json, Type type, JsonDeserializationContext context)\n      throws JsonParseException {\n    return new DateTime(json.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4050, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 389, "focalAPIEnd": 414, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhouxiaoxiaoxujian/gson/tree/master/gson/src/test/java/com/google/gson/JsonObjectTest.java", "rawCode": "  public void testAddingCharacterProperties() throws Exception {\n    String propertyName = \"property\";\n    char value = 'a';\n\n    JsonObject jsonObj = new JsonObject();\n    jsonObj.addProperty(propertyName, value);\n\n    assertTrue(jsonObj.has(propertyName));\n\n    JsonElement jsonElement = jsonObj.get(propertyName);\n    assertNotNull(jsonElement);\n    assertEquals(String.valueOf(value), jsonElement.getAsString());\n    assertEquals(value, jsonElement.getAsCharacter());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4051, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["JsonElement.getAsString()", "new JsonSyntaxException(*,*)"], "tryExpressionStart": 92, "tryExpressionEnd": 96, "tryBlockStart": 92, "tryBlockEnd": 200, "catchExpressionStart": 160, "catchExpressionEnd": 191, "catchBlockStart": 160, "catchBlockEnd": 200, "exceptionHandlingCallStart": [245, 432], "exceptionHandlingCallEnd": [263, 478], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 131, "focalAPIEnd": 149, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parse(value)", "jsonElement.getAsString()", "parse(value)", "jsonElement.getAsString()", "parse(value)", "jsonElement.getAsString()", "new JsonSyntaxException(value,*)"], "useStart": [113, 245, 228, 362, 342, 456, 432], "useEnd": [150, 263, 264, 380, 381, 474, 478], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BMintern/gson/tree/master/src/main/java/com/google/gson/DefaultDateTypeAdapter.java", "rawCode": "  private Date deserializeToDate(JsonElement json) {\n    synchronized (localFormat) {\n      try {\n        return localFormat.parse(json.getAsString());\n      } catch (ParseException ignored) {\n      }\n      try {\n        return enUsFormat.parse(json.getAsString());\n      } catch (ParseException ignored) {\n      }\n      try {\n        return iso8601Format.parse(json.getAsString());\n      } catch (ParseException e) {\n        throw new JsonSyntaxException(json.getAsString(), e);\n      }\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4052, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 142, "focalAPIEnd": 163, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bi2one/Matji_Sandwich/tree/master/android/src/com/matji/sandwich/http/parser/MatjiDataParser.java", "rawCode": "  protected String getString(JsonObject object, String key) {\n    JsonElement element = object.get(key);\n\n    return (isPrimitive(element)) ? element.getAsString() : null;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4053, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 96, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/atlasapi/atlas-persistence/tree/master/src/main/java/org/atlasapi/equiv/CassandraEquivalenceSummaryStore.java", "rawCode": "    private String deserializeParent(JsonElement parent) {\n      return parent == null ? null : parent.getAsString();\n    }\n"}, {"dataset": "getAsString", "exampleID": 4054, "initialization": ["JsonElement jsonElement = JsonArray.get(int)"], "initializationStart": [545], "initializationEnd": [561], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 619, "focalAPIEnd": 642, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jsonElement.getAsBoolean()", "jsonElement.getAsNumber()", "jsonElement.getAsString()", "Message.addParameter(Class<?>,value)"], "useStart": [736, 984, 1052, 1093], "useEnd": [760, 1007, 1075, 1126], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OurGrid/commune/tree/master/src/main/java/br/edu/ufcg/lsd/commune/message/JsonMessageUtil.java", "rawCode": "  private static void extractParameters(JsonObject msgJson, Message message)\n      throws IOException, ClassNotFoundException {\n\n    JsonArray paramJson = msgJson.getAsJsonArray(\"parameters\");\n    for (int i = 0; i < paramJson.size(); i++) {\n      JsonArray paramPair = paramJson.get(i).getAsJsonArray();\n      String className = paramPair.get(0).getAsString();\n\n      Class<?> type = PRIMITIVES.get(className);\n      if (type == null) {\n        type = Class.forName(className);\n      }\n\n      Object value = null;\n      JsonElement valueJson = paramPair.get(1);\n\n      if (type.equals(String.class)) {\n        value = valueJson.getAsString();\n      } else if (type.equals(Boolean.class) || type.equals(Boolean.TYPE)) {\n        value = valueJson.getAsBoolean();\n      } else if (Number.class.isAssignableFrom(type)\n          || type.equals(Integer.TYPE)\n          || type.equals(Long.TYPE)\n          || type.equals(Double.TYPE)\n          || type.equals(Short.TYPE)) {\n        value = valueJson.getAsNumber();\n      } else {\n        value = deserialize(valueJson.getAsString());\n      }\n\n      message.addParameter(type, value);\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4055, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["new JsonParseException(*)"], "tryExpressionStart": 250, "tryExpressionEnd": 254, "tryBlockStart": 250, "tryBlockEnd": 433, "catchExpressionStart": 362, "catchExpressionEnd": 387, "catchBlockStart": 362, "catchBlockEnd": 433, "exceptionHandlingCallStart": [401], "exceptionHandlingCallEnd": [426], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 291, "focalAPIEnd": 309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parse(value)"], "useStart": [274], "useEnd": [310], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/peixere/gotom/tree/master/core/cn.gotom.sso/src/main/java/cn/gotom/sso/util/GsonTimestampTypeAdapter.java", "rawCode": "  public Timestamp deserialize(JsonElement json, Type t, JsonDeserializationContext jsc)\n      throws JsonParseException {\n    if (!(json instanceof JsonPrimitive)) {\n      throw new JsonParseException(\"The date should be a string value\");\n    }\n    try {\n      Date date = dateFormat.parse(json.getAsString());\n      return new Timestamp(date.getTime());\n    } catch (ParseException e) {\n      throw new JsonParseException(e);\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4056, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [201], "initializationEnd": [233], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jsonElement==null)", "guardType": "IF {", "guardExpressionStart": 239, "guardExpressionEnd": 266, "guardBlockStart": 239, "guardBlockEnd": 387, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 415, "focalAPIEnd": 443, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(String,value)"], "useStart": [392], "useEnd": [444], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/motech/care-reporting/tree/master/commcare-migration/src/main/java/org/motechproject/care/reporting/migration/util/CommcareDataUtil.java", "rawCode": "  public Map<String, String> extractAsMap(\n      JsonObject jsonResponse, String fieldToExtract, String requestHeader) {\n    Map<String, String> map = new HashMap<>();\n    JsonElement extractedValue = jsonResponse.get(fieldToExtract);\n    if (extractedValue == null)\n      throw new RuntimeException(\n          String.format(\"%s field not present in commcare response\", fieldToExtract));\n    map.put(requestHeader, extractedValue.getAsString());\n    return map;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4057, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["JsonElement.getAsString()", "new JsonSyntaxException(*,*)"], "tryExpressionStart": 98, "tryExpressionEnd": 102, "tryBlockStart": 98, "tryBlockEnd": 212, "catchExpressionStart": 170, "catchExpressionEnd": 201, "catchBlockStart": 170, "catchBlockEnd": 212, "exceptionHandlingCallStart": [261, 460], "exceptionHandlingCallEnd": [279, 506], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 139, "focalAPIEnd": 157, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parse(value)", "jsonElement.getAsString()", "parse(value)", "jsonElement.getAsString()", "parse(value)", "jsonElement.getAsString()", "new JsonSyntaxException(value,*)"], "useStart": [121, 261, 244, 386, 366, 484, 460], "useEnd": [158, 279, 280, 404, 405, 502, 506], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ybonnel/gson/tree/master/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java", "rawCode": "    private Date deserializeToDate(JsonElement json) {\n      synchronized (localFormat) {\n        try {\n          return localFormat.parse(json.getAsString());\n        } catch (ParseException ignored) {\n        }\n        try {\n          return enUsFormat.parse(json.getAsString());\n        } catch (ParseException ignored) {\n        }\n        try {\n          return iso8601Format.parse(json.getAsString());\n        } catch (ParseException e) {\n          throw new JsonSyntaxException(json.getAsString(), e);\n        }\n      }\n    }\n"}, {"dataset": "getAsString", "exampleID": 4058, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 161, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eatnumber1/google-gson/tree/master/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java", "rawCode": "    public Manager deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n      Manager result = new Manager();\n      result.userid = json.getAsString();\n      return result;\n    }\n"}, {"dataset": "getAsString", "exampleID": 4059, "initialization": ["JsonElement jsonElement = new JsonPrimitive(boolean)"], "initializationStart": [84], "initializationEnd": [107], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jsonElement.toString()"], "configurationStart": [134], "configurationEnd": [161], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 189, "focalAPIEnd": 219, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)"], "useStart": [168], "useEnd": [220], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schmittjoh/plovr/tree/master/test/org/plovr/GsonTest.java", "rawCode": "  @Test\n  public void gettingBooleanAsString() {\n    JsonElement booleanPrimitive = new JsonPrimitive(true);\n    assertEquals(\"true\", booleanPrimitive.toString());\n    assertEquals(\"true\", booleanPrimitive.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4060, "initialization": ["JsonElement jsonElement = getValue()"], "initializationStart": [297], "initializationEnd": [317], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jsonElement.getAsJsonArray()", "jsonElement.getAsJsonObject()"], "configurationStart": [406, 564], "configurationEnd": [429, 588], "guardCondition": "!(jsonElement.isJsonArray()) && jsonElement.isJsonPrimitive() && !(jsonElement.isJsonObject())", "guardType": "IF {", "guardExpressionStart": 325, "guardExpressionEnd": 350, "guardBlockStart": 325, "guardBlockEnd": 871, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 751, "focalAPIEnd": 771, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["unescapeHtml(value)", "put(*,value)"], "useStart": [720, 802], "useEnd": [772, 852], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IKANOW/Infinit.e/tree/master/core/infinit.e.data_model/src/com/ikanow/infinit/e/data_model/custom/InfiniteFileInputJsonParser.java", "rawCode": "  public static BasicDBObject convertJsonObjectToBson(JsonObject json, boolean bHtmlUnescape) {\n    int length = json.entrySet().size();\n    BasicDBObject list = new BasicDBObject(capacity(length));\n    for (Map.Entry<String, JsonElement> jsonKeyEl : json.entrySet()) {\n      JsonElement jsonEl = jsonKeyEl.getValue();\n      if (jsonEl.isJsonArray()) {\n        list.put(jsonKeyEl.getKey(), handleJsonArray(jsonEl.getAsJsonArray(), bHtmlUnescape));\n      } else if (jsonEl.isJsonObject()) {\n        list.put(\n            jsonKeyEl.getKey(), convertJsonObjectToBson(jsonEl.getAsJsonObject(), bHtmlUnescape));\n      } else if (jsonEl.isJsonPrimitive()) {\n        if (bHtmlUnescape) {\n          list.put(jsonKeyEl.getKey(), StringEscapeUtils.unescapeHtml(jsonEl.getAsString()));\n        } else {\n          list.put(jsonKeyEl.getKey(), jsonEl.getAsString());\n        }\n      }\n    }\n    if (list.size() > 0) {\n      return list;\n    }\n    return null;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4061, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [262], "initializationEnd": [287], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "null!=jsonElement", "guardType": "IF {", "guardExpressionStart": 336, "guardExpressionEnd": 356, "guardBlockStart": 336, "guardBlockEnd": 537, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 392, "focalAPIEnd": 413, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parse(value,*)"], "useStart": [447], "useEnd": [528], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Collabinate/Collabinate/tree/master/collabinate-server/src/main/java/com/collabinate/server/activitystreams/ActivityStreamsObject.java", "rawCode": "  /**\n   * Gets the date and time at which the object was published. An object MAY contain a published\n   * property.\n   *\n   * @return The [RFC3339] date-time at which the object was published.\n   */\n  public DateTime getPublished() {\n    JsonElement element = jsonObject.get(PUBLISHED);\n    DateTime published = null;\n    try {\n      if (null != element) {\n        String publishedString = element.getAsString();\n        published =\n            DateTime.parse(publishedString, ISODateTimeFormat.dateTimeParser().withZoneUTC());\n      }\n    } catch (ClassCastException | IllegalStateException e) {\n    }\n\n    return published;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4062, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 602, "focalAPIEnd": 620, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new AttachmentInfo(String,value,int)"], "useStart": [762], "useEnd": [814], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdcasey/couch-java/tree/master/couch-app-support/src/main/java/org/commonjava/couch/io/json/AttachmentInfoListAdapter.java", "rawCode": "  @Override\n  public List<AttachmentInfo> deserialize(\n      final JsonElement json, final Type typeOfT, final JsonDeserializationContext context)\n      throws JsonParseException {\n    final JsonObject obj = json.getAsJsonObject();\n\n    final List<AttachmentInfo> attachments = new ArrayList<AttachmentInfo>();\n    for (final Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n      final String name = entry.getKey();\n      final JsonObject attObj = entry.getValue().getAsJsonObject();\n      JsonElement prop = attObj.get(\"content_type\");\n\n      final String contentType = prop == null ? null : prop.getAsString();\n\n      prop = attObj.get(\"length\");\n      final int contentLength = prop == null ? -1 : prop.getAsInt();\n\n      final AttachmentInfo info = new AttachmentInfo(name, contentType, contentLength);\n      attachments.add(info);\n    }\n\n    return attachments;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4063, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 353, "focalAPIEnd": 373, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JetBrains/intellij-plugins/tree/master/phoneGap/src/com/github/masahirosuzuka/PhoneGapIntelliJPlugin/commandLine/PhoneGapPluginsList.java", "rawCode": "    private static String getVersionLatest(JsonObject jsonObject) {\n      JsonElement element = jsonObject.get(\"dist-tags\");\n      if (element == null || !element.isJsonObject()) {\n        return null;\n      }\n      JsonObject asObject = element.getAsJsonObject();\n      JsonElement latest = asObject.get(\"latest\");\n      return latest == null ? null : latest.getAsString();\n    }\n"}, {"dataset": "getAsString", "exampleID": 4064, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [881], "initializationEnd": [903], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["stringifyException(*)", "error(*)", "incrCounter(*,int)"], "tryExpressionStart": 272, "tryExpressionEnd": 276, "tryBlockStart": 272, "tryBlockEnd": 2406, "catchExpressionStart": 2254, "catchExpressionEnd": 2274, "catchBlockStart": 2254, "catchBlockEnd": 2406, "exceptionHandlingCallStart": [2292, 2282, 2336], "exceptionHandlingCallEnd": [2327, 2328, 2399], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement!=null", "guardType": "IF {", "guardExpressionStart": 917, "guardExpressionEnd": 934, "guardBlockStart": 917, "guardBlockEnd": 2217, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 991, "focalAPIEnd": 1009, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getURLFPV2FromURL(value)"], "useStart": [964], "useEnd": [1010], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/commoncrawl/commoncrawl-crawler/tree/master/src/org/commoncrawl/mapred/ec2/postprocess/crawldb/LinkGraphDataEmitter.java", "rawCode": "  void emitLinksFromHTMLContent(\n      Text sourceURL,\n      String sourceType,\n      JsonObject dateHeaders,\n      JsonObject object,\n      HashSet<Long> hashSet,\n      OutputCollector<TextBytes, TextBytes> output,\n      Reporter reporter)\n      throws IOException {\n    try {\n      JsonObject contentObject = object.getAsJsonObject(\"content\");\n      if (contentObject == null) {\n        reporter.incrCounter(Counters.NULL_CONTENT_OBJECT, 1);\n        return;\n      } else {\n        JsonArray linksArray = contentObject.getAsJsonArray(\"links\");\n        if (linksArray == null) {\n          reporter.incrCounter(Counters.NULL_LINKS_ARRAY, 1);\n        } else {\n          for (int i = 0; i < linksArray.size(); ++i) {\n            reporter.incrCounter(Counters.GOT_LINK_OBJECT, 1);\n            JsonObject linkObject = linksArray.get(i).getAsJsonObject();\n            JsonElement href = linkObject.get(\"href\");\n            if (href != null) {\n              URLFPV2 fp = URLUtils.getURLFPV2FromURL(href.getAsString());\n              if (fp == null) {\n                reporter.incrCounter(Counters.FP_NULL_IN_EMBEDDED_LINK, 1);\n              } else {\n                if (!hashSet.contains(fp.getUrlHash())) {\n                  // calculate md5 hash of link ...\n                  String md5Hash = MD5Hash.digest(linkObject.toString()).toString();\n                  // write src into json object\n                  linkObject.addProperty(\"source_url\", sourceURL.toString());\n                  linkObject.addProperty(\"source_type\", sourceType);\n                  linkObject.add(\"source_headers\", dateHeaders);\n\n                  reporter.incrCounter(Counters.EMITTED_HTML_LINK, 1);\n                  // generate new key ...\n                  TextBytes key =\n                      CrawlDBKey.generateLinkKey(fp, CrawlDBKey.Type.KEY_TYPE_HTML_LINK, md5Hash);\n                  output.collect(key, new TextBytes(linkObject.toString()));\n\n                  hashSet.add(fp.getUrlHash());\n                } else {\n                  reporter.incrCounter(Counters.SKIPPED_ALREADY_EMITTED_LINK, 1);\n                }\n              }\n            } else {\n              reporter.incrCounter(Counters.NO_HREF_FOR_HTML_LINK, 1);\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(CCStringUtils.stringifyException(e));\n      reporter.incrCounter(Counters.FAILED_TO_GET_LINKS_FROM_HTML, 1);\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4065, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 173, "focalAPIEnd": 191, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new DateTime(value)"], "useStart": [160], "useEnd": [192], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GlobalsDB/Challenges/tree/master/2/yonatang/war/src/main/java/me/yonatan/globals/c2/action/GsonProducer.java", "rawCode": "    @Override\n    public DateTime deserialize(JsonElement json, Type type, JsonDeserializationContext context)\n        throws JsonParseException {\n      return new DateTime(json.getAsString());\n    }\n"}, {"dataset": "getAsString", "exampleID": 4066, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 202, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["convertFromISO88591(value)"], "useStart": [182], "useEnd": [228], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/norrs/busbuddy/tree/master/public-api/src/main/java/no/norrs/busbuddy/pub/api/CharSetAdapter.java", "rawCode": "  public String deserialize(\n      JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext)\n      throws JsonParseException {\n    return new String(convertFromISO88591(jsonElement.getAsString()));\n  }\n"}, {"dataset": "getAsString", "exampleID": 4067, "initialization": ["JsonElement jsonElement = serialize(*)"], "initializationStart": [89], "initializationEnd": [136], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jsonElement.isJsonPrimitive()", "jsonElement.getAsJsonPrimitive()"], "configurationStart": [153, 216], "configurationEnd": [178, 244], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 356, "focalAPIEnd": 377, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)"], "useStart": [335], "useEnd": [378], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eatnumber1/google-gson/tree/master/src/test/java/com/google/gson/LongSerializationPolicyTest.java", "rawCode": "  public void testStringLongSerialization() throws Exception {\n    JsonElement element = LongSerializationPolicy.STRING.serialize(1556L);\n    assertTrue(element.isJsonPrimitive());\n\n    JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive();\n    assertFalse(jsonPrimitive.isNumber());\n    assertTrue(jsonPrimitive.isString());\n    assertEquals(\"1556\", element.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4068, "initialization": ["JsonElement jsonElement = JsonElement.get(String)", "JsonElement jsonElement = JsonElement.get(String)"], "initializationStart": [906, 1134], "initializationEnd": [934, 1165], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "null!=jsonElement", "guardType": "IF {", "guardExpressionStart": 942, "guardExpressionEnd": 960, "guardBlockStart": 942, "guardBlockEnd": 1075, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 1314, "focalAPIEnd": 1333, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getSourceKey(value)", "JsonArray.add(jsonElement)", "JsonArray.add(jsonElement)", "JsonArray.add(jsonElement)"], "useStart": [1288, 1430, 1664, 1906], "useEnd": [1334, 1443, 1677, 1919], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IKANOW/Infinit.e/tree/master/core/infinit.e.data_model/src/com/ikanow/infinit/e/data_model/api/knowledge/DocumentPojoApiMap.java", "rawCode": "    @Override\n    public JsonElement serialize(DocumentPojo doc, Type typeOfT, JsonSerializationContext context) {\n      // 1. On the document side: remove the internal index reference, other internal fields\n      doc.setIndex(null);\n      // (locs, months, timeRanges not stored in DB so no need to remove)\n\n      // 1b. Also on the doc side: switch the update id and _id\n      ObjectId updateId = doc.getUpdateId();\n      if (null != updateId) {\n        doc.setUpdateId(doc.getId()); // (store the old _id mostly for diagnosis)\n        doc.setId(updateId); // this makes the _id field immutable across updates\n      }\n\n      // Everything else needs to be done on the JSON side:\n      JsonElement je = BaseApiPojo.getDefaultBuilder().create().toJsonTree(doc, typeOfT);\n      JsonObject jo = je.getAsJsonObject();\n      JsonElement jetmp = null;\n      // 2. Source title should be an array:\n      jetmp = jo.get(DocumentPojo.source_);\n      if (null != jetmp) {\n        JsonArray ja = new JsonArray();\n        ja.add(jetmp);\n        jo.add(DocumentPojo.source_, ja);\n      }\n      // 3. Source keys should be an array:\n      jetmp = jo.get(DocumentPojo.sourceKey_);\n      // (also the <key>#<format> should be reduced back to <key>)\n      if (null != jetmp) {\n        String sourceKey = DocumentPojo.getSourceKey(jetmp.getAsString());\n        jetmp = new JsonPrimitive(sourceKey);\n        JsonArray ja = new JsonArray();\n        ja.add(jetmp);\n        jo.add(DocumentPojo.sourceKey_, ja);\n      }\n      // 4. Media types should be an array:\n      jetmp = jo.get(DocumentPojo.mediaType_);\n      if (null != jetmp) {\n        JsonArray ja = new JsonArray();\n        ja.add(jetmp);\n        jo.add(DocumentPojo.mediaType_, ja);\n      }\n      // 5. Finally, CommunityId becomes an array\n      jetmp = jo.get(DocumentPojo.communityId_);\n      if (null != jetmp) {\n        JsonArray ja = new JsonArray();\n        ja.add(jetmp);\n        jo.add(DocumentPojo.communityId_, ja);\n      }\n      return jo;\n    } // TESTED (see DOC_API2 in TestCode)\n"}, {"dataset": "getAsString", "exampleID": 4069, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IllegalArgumentException", "exceptionHandlingCall": ["method(*,String,*)"], "tryExpressionStart": 158, "tryExpressionEnd": 162, "tryBlockStart": 158, "tryBlockEnd": 512, "catchExpressionStart": 242, "catchExpressionEnd": 277, "catchBlockStart": 242, "catchBlockEnd": 512, "exceptionHandlingCallStart": [332], "exceptionHandlingCallEnd": [386], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 215, "focalAPIEnd": 233, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jclouds/jclouds/tree/master/core/src/main/java/org/jclouds/json/internal/EnumTypeAdapterThatReturnsFromValue.java", "rawCode": "  @SuppressWarnings(\"cast\")\n  public T deserialize(JsonElement json, Type classOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n    try {\n      return (T) Enum.valueOf((Class<T>) classOfT, json.getAsString());\n    } catch (IllegalArgumentException e) {\n      try {\n        Invokable<?, Object> converter = method((Class<?>) classOfT, \"fromValue\", String.class);\n        return (T) converter.invoke(null, json.getAsString());\n      } catch (Exception e1) {\n        throw e;\n      }\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4070, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["new JsonSyntaxException(*)"], "tryExpressionStart": 285, "tryExpressionEnd": 289, "tryBlockStart": 285, "tryBlockEnd": 525, "catchExpressionStart": 449, "catchExpressionEnd": 474, "catchBlockStart": 449, "catchBlockEnd": 525, "exceptionHandlingCallStart": [490], "exceptionHandlingCallEnd": [516], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 358, "focalAPIEnd": 376, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parse(value)"], "useStart": [345], "useEnd": [377], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ybonnel/gson/tree/master/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java", "rawCode": "    public java.sql.Date deserialize(\n        JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      if (!(json instanceof JsonPrimitive)) {\n        throw new JsonParseException(\"The date should be a string value\");\n      }\n      try {\n        synchronized (format) {\n          Date date = format.parse(json.getAsString());\n          return new java.sql.Date(date.getTime());\n        }\n      } catch (ParseException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n"}, {"dataset": "getAsString", "exampleID": 4071, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 520, "focalAPIEnd": 539, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GaloisInc/FiveUI/tree/master/src/batchtools/headless/src/main/java/com/galois/fiveui/HeadlessRunDescription.java", "rawCode": "    /**\n     * Gracefully lookup property 'prop' in JsonObject 'obj'.\n     *\n     * @param obj a JSON object\n     * @param prop a key string to lookup in the JSON object\n     * @return string property or null if the prop doesn't resolve\n     */\n    public static String objGetString(JsonObject obj, String prop) {\n      JsonElement value = obj.get(prop);\n      if (null == value) {\n        logger.warn(\"HeadlessRunDescription.parse: failed to lookup JSON property: \" + prop);\n      }\n      return null == value ? null : value.getAsString();\n    }\n"}, {"dataset": "getAsString", "exampleID": 4072, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 358, "focalAPIEnd": 376, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shallada/ChessExtended/tree/master/src/com/google/gson/DefaultTypeAdapters.java", "rawCode": "    public java.sql.Date deserialize(\n        JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      if (!(json instanceof JsonPrimitive)) {\n        throw new JsonParseException(\"The date should be a string value\");\n      }\n      try {\n        synchronized (format) {\n          Date date = format.parse(json.getAsString());\n          return new java.sql.Date(date.getTime());\n        }\n      } catch (ParseException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n"}, {"dataset": "getAsString", "exampleID": 4073, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 183, "focalAPIEnd": 208, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["DateFormat.parse(value)", "parse(value)", "new JsonParseException(value)"], "useStart": [285, 476, 589], "useEnd": [313, 526, 623], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lossyrob/caliper/tree/master/caliper/src/main/java/com/google/caliper/Json.java", "rawCode": "    @Override\n    public synchronized Date deserialize(\n        JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) {\n      String dateString = jsonElement.getAsString();\n      // first try to parse as an ISO 8601 date\n      try {\n        return dateFormat.parse(dateString);\n      } catch (ParseException ignored) {\n      }\n      // next, try a GSON-style locale-specific dates (for Caliper r282 and earlier)\n      try {\n        return DateFormat.getDateTimeInstance().parse(dateString);\n      } catch (ParseException ignored) {\n      }\n      throw new JsonParseException(dateString);\n    }\n"}, {"dataset": "getAsString", "exampleID": 4074, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 887, "focalAPIEnd": 907, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alvarl/FanApp/tree/master/modules/securesocial-0.2.4/app/securesocial/provider/providers/GoogleProvider.java", "rawCode": "  @Override\n  protected void fillProfile(SocialUser user, Map<String, Object> authContext) {\n    OpenID.UserInfo info = (OpenID.UserInfo) authContext.get(OpenIDProvider.USER_INFO);\n    user.displayName =\n        FoursquareProvider.fullName(\n            info.extensions.get(FIRST_NAME), info.extensions.get(LAST_NAME));\n    user.email = info.extensions.get(EMAIL);\n\n    WS.HttpResponse response =\n        WS.url(SELF_API).oauth(user.serviceInfo, user.token, user.secret).get();\n    if (response.getStatus() != 200) {\n      // Amazingly, if there's an error Google replies with an html page ... if it were json I could\n      // log some info.\n      throw new AuthenticationException();\n    }\n    JsonElement contactInfo = response.getJson();\n    JsonElement avatar = contactInfo.getAsJsonObject().getAsJsonObject(ENTRY).get(THUMBNAIL_URL);\n    if (avatar != null) {\n      user.avatarUrl = avatar.getAsString();\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4075, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement!=null", "guardType": "IF {", "guardExpressionStart": 565, "guardExpressionEnd": 590, "guardBlockStart": 565, "guardBlockEnd": 642, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 609, "focalAPIEnd": 635, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 733, "followUpCheckExpressionEnd": 753, "followUpCheckBlockStart": 733, "followUpCheckBlockEnd": 822, "use": ["decode(value,*)", "new TextElementModel(int,String,AID,value)", "new LinkElementModel(int,String,AID,value)", "new TextElementModel(int,String,AID,value)"], "useStart": [772, 979, 1105, 1231], "useEnd": [813, 1029, 1155, 1281], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/paillardf/Work-Hub/tree/master/Work-Hub-MainLib/src/com/workhub/utils/MessageFactory.java", "rawCode": "  public static ElementModel getModel(ACLMessage message) {\n\n    JsonParser js = new JsonParser();\n    int color = ((JsonObject) js.parse(message.getContent())).get(\"color\").getAsInt();\n    String title = ((JsonObject) js.parse(message.getContent())).get(\"title\").getAsString();\n\n    AID agent = message.getSender();\n    int type_model = ((JsonObject) js.parse(message.getContent())).get(\"type\").getAsInt();\n\n    ElementModel model = null;\n    String content = null;\n\n    JsonElement content_json = ((JsonObject) js.parse(message.getContent())).get(\"content\");\n    if (content_json != null) {\n      content = content_json.getAsString();\n    }\n\n    if (type_model == Constants.TYPE_ELEMENT_PICTURE) {\n      byte[] image = null;\n      if (content != null) {\n        image = Base64.decode(content, Base64.NO_OPTIONS);\n      }\n      model = new PictureElementModel(color, title, agent, image);\n\n    } else if (type_model == Constants.TYPE_ELEMENT_FILE) {\n      // TODO\n      model = new TextElementModel(color, title, agent, content);\n    } else if (type_model == Constants.TYPE_ELEMENT_LINK) {\n      model = new LinkElementModel(color, title, agent, content);\n    } else if (type_model == Constants.TYPE_ELEMENT_TEXT) {\n      model = new TextElementModel(color, title, agent, content);\n    }\n\n    return (ElementModel) model;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4076, "initialization": ["JsonElement jsonElement = new JsonPrimitive(*)"], "initializationStart": [117], "initializationEnd": [149], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 176, "focalAPIEnd": 203, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)"], "useStart": [155], "useEnd": [204], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bolinfest/plovr/tree/master/test/org/plovr/GsonTest.java", "rawCode": "  @Test(expected = NullPointerException.class)\n  public void gettingNullAsString() {\n    JsonElement nullPrimitive = new JsonPrimitive((String) null);\n    assertEquals(\"null\", nullPrimitive.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4077, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 67, "focalAPIEnd": 82, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.replaceAll(String,String)"], "useStart": [67], "useEnd": [103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chibigeekgal/planA/tree/master/MaaApp/src/main/Library.java", "rawCode": "  public static String convertToString(JsonElement e) {\n    return e.getAsString().replaceAll(\"\\\"\", \"\");\n  }\n"}, {"dataset": "getAsString", "exampleID": 4078, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["new JsonParseException(*)"], "tryExpressionStart": 61, "tryExpressionEnd": 65, "tryBlockStart": 61, "tryBlockEnd": 204, "catchExpressionStart": 125, "catchExpressionEnd": 158, "catchBlockStart": 125, "catchBlockEnd": 204, "exceptionHandlingCallStart": [172], "exceptionHandlingCallEnd": [197], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 94, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["forName(value)"], "useStart": [80], "useEnd": [117], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CMPUT301F13T01/CreateYourOwnAdventure/tree/master/CreateYourOwnAdventure/src/cmput301/f13t01/elasticsearch/InterfaceAdapter.java", "rawCode": "  private Type typeForName(final JsonElement typeElem) {\n    try {\n      return Class.forName(typeElem.getAsString());\n    } catch (ClassNotFoundException e) {\n      throw new JsonParseException(e);\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4079, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [292], "initializationEnd": [317], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 375, "focalAPIEnd": 400, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)"], "useStart": [355], "useEnd": [401], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhouxiaoxiaoxujian/gson/tree/master/gson/src/test/java/com/google/gson/JsonObjectTest.java", "rawCode": "  public void testAddingStringProperties() throws Exception {\n    String propertyName = \"property\";\n    String value = \"blah\";\n\n    JsonObject jsonObj = new JsonObject();\n    jsonObj.addProperty(propertyName, value);\n\n    assertTrue(jsonObj.has(propertyName));\n\n    JsonElement jsonElement = jsonObj.get(propertyName);\n    assertNotNull(jsonElement);\n    assertEquals(value, jsonElement.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4080, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [1293], "initializationEnd": [1310], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["getName()", "println(String)"], "tryExpressionStart": 405, "tryExpressionEnd": 409, "tryBlockStart": 405, "tryBlockEnd": 3466, "catchExpressionStart": 3279, "catchExpressionEnd": 3311, "catchBlockStart": 3279, "catchBlockEnd": 3390, "exceptionHandlingCallStart": [3354, 3321], "exceptionHandlingCallEnd": [3365, 3366], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement!=null", "guardType": "IF {", "guardExpressionStart": 1384, "guardExpressionEnd": 1399, "guardBlockStart": 1384, "guardBlockEnd": 2089, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 1478, "focalAPIEnd": 1494, "followUpCheck": "value.startsWith(\"10.\")", "checkType": "IF", "followUpCheckExpressionStart": 1508, "followUpCheckExpressionEnd": 1534, "followUpCheckBlockStart": 1508, "followUpCheckBlockEnd": 1692, "use": ["value.substring(int)", "value.replaceAll(String,String)", "value.replace(String,String)", "value.replace(String,String)", "value.replace(String,String)", "value.replace(String,String)", "value.lastIndexOf(char)", "jsonElement.getAsString()"], "useStart": [1633, 1770, 1932, 1973, 2014, 2055, 2140, 2481], "useEnd": [1649, 1795, 1953, 1994, 2035, 2076, 2160, 2497], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/idiginfo/citagora/tree/master/apisvc/src/org/idiginfo/docsvc/svcapi/harvest/MasSplit.java", "rawCode": "  @Override\n  public int splitFiles(String inFilePrefix, String splitFilePrefix) {\n    int numFiles = 0;\n    File baseDirectory = new File(inFilePrefix);\n    File[] files = baseDirectory.listFiles();\n    System.out.println(\"number of files: \" + files.length);\n    for (File f : files) {\n      if (f.isDirectory()) {\n        continue;\n      }\n      System.out.println(\"getting file \" + f.getName());\n      try {\n        FileReader in = new FileReader(f);\n        JsonObject tree = (JsonObject) parser.parse(in);\n        // get list of records\n        JsonObject results = (JsonObject) tree.get(\"d\");\n        JsonObject publication = (JsonObject) results.get(\"Publication\");\n        JsonElement result = publication.get(\"Result\");\n        JsonArray entries = result.getAsJsonArray();\n        // int numEntries = entries.size();\n        for (JsonElement entry : entries) {\n          String splitFileName = splitFilePrefix;\n          JsonObject record = (JsonObject) entry;\n          if (record == null) break;\n          // find an id to use as the file name\n          // try doi first\n          // in some cases, SciVerse returns invalid doi strings\n          // Examples include \"org/{valid doi}\", \"http://...\", \"{valid\n          // doi}\\\"\n          // \"jkns.2011...\"\n          JsonElement id = record.get(\"DOI\");\n          boolean isDoi = false;\n          String doi = null;\n          if (id != null) {\n            // look at doi string and fix it if necessary\n            doi = id.getAsString();\n            if (doi.startsWith(\"10.\")) {\n              isDoi = true;\n            } else if (doi.startsWith(\"org\")) {\n              doi = doi.substring(4);\n              isDoi = true;\n            }\n            // fix double slashes and trailing backslashes\n            doi = doi.replaceAll(\"//\", \"/\");\n            if (doi.contains(\"<\")) {\n              System.out.println(\"Problem character in: \" + doi);\n            }\n            doi = doi.replace(\"<\", \"-\");\n            doi = doi.replace(\">\", \"-\");\n            doi = doi.replace(\":\", \"-\");\n            doi = doi.replace(\";\", \"-\");\n          }\n          if (isDoi) {\n            int endIndex = doi.lastIndexOf('/');\n            if (endIndex > -1) {\n              String fileDirName = splitFilePrefix + doi.substring(0, endIndex);\n              (new File(fileDirName)).mkdirs();\n            }\n\n            splitFileName += doi + \".json\";\n          } else { // use MAS id\n            id = record.get(\"ID\");\n            String idString = id.getAsString();\n            int beginIndex = idString.indexOf(':') + 1;\n            String fileDirName = splitFilePrefix + \"mas/\";\n            (new File(fileDirName)).mkdirs();\n            splitFileName = fileDirName + \"mas_\" + idString.substring(beginIndex) + \".json\";\n          }\n          try {\n            File outFile = new File(splitFileName);\n            if (outFile.exists()) {\n              // already stored this item\n              System.out.println(\"File exists: \" + splitFileName);\n            } else {\n              FileWriter out = new FileWriter(splitFileName);\n              gson.toJson(record, out);\n              out.close();\n            }\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n        in.close();\n        numFiles++;\n      } catch (FileNotFoundException e) {\n        System.out.println(\"no file: \" + f.getName());\n        break;\n      } catch (IOException e) {\n        e.printStackTrace();\n        break;\n      }\n    }\n\n    return numFiles;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4081, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [74], "initializationEnd": [95], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 178, "focalAPIEnd": 201, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ApplyStringFilter(value)", "jsonElement.getAsString()", "StringToDate(value)", "jsonElement.getAsBoolean()"], "useStart": [160, 275, 246, 398], "useEnd": [202, 298, 299, 422], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GlobalsDB/Challenges/tree/master/3/bael/app/globalswrapper/FilterCondition.java", "rawCode": "  public Boolean IsValid(JsonObject record) {\n    JsonElement nodeValue = record.get(FieldName);\n    switch (DataType) {\n      case STRING_TYPE:\n        return ApplyStringFilter(nodeValue.getAsString());\n      case DATE_TYPE:\n        Date date = DataTypesHelper.StringToDate(nodeValue.getAsString());\n        return ApplyDateFilter(date);\n      case BOOLEAN_TYPE:\n        return ApplyBooleanFilter(nodeValue.getAsBoolean());\n      default:\n        return true;\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4082, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 177, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JetBrains/intellij-plugins/tree/master/phoneGap/src/com/github/masahirosuzuka/PhoneGapIntelliJPlugin/commandLine/PhoneGapPluginsList.java", "rawCode": "    private static String getDescr(JsonObject jsonObject) {\n      JsonElement descriptionElement = jsonObject.get(\"description\");\n      return descriptionElement == null ? \"\" : descriptionElement.getAsString();\n    }\n"}, {"dataset": "getAsString", "exampleID": 4083, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 389, "focalAPIEnd": 414, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BMintern/gson/tree/master/src/test/java/com/google/gson/JsonObjectTest.java", "rawCode": "  public void testAddingCharacterProperties() throws Exception {\n    String propertyName = \"property\";\n    char value = 'a';\n\n    JsonObject jsonObj = new JsonObject();\n    jsonObj.addProperty(propertyName, value);\n\n    assertTrue(jsonObj.has(propertyName));\n\n    JsonElement jsonElement = jsonObj.get(propertyName);\n    assertNotNull(jsonElement);\n    assertEquals(String.valueOf(value), jsonElement.getAsString());\n    assertEquals(value, jsonElement.getAsCharacter());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4084, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 358, "focalAPIEnd": 376, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shallada/ChessExtended/tree/master/src/com/google/gson/DefaultTypeAdapters.java", "rawCode": "    public java.sql.Date deserialize(\n        JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      if (!(json instanceof JsonPrimitive)) {\n        throw new JsonParseException(\"The date should be a string value\");\n      }\n      try {\n        synchronized (format) {\n          Date date = format.parse(json.getAsString());\n          return new java.sql.Date(date.getTime());\n        }\n      } catch (ParseException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n"}, {"dataset": "getAsString", "exampleID": 4085, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 237, "focalAPIEnd": 252, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/0xdata/h2o/tree/master/src/main/java/water/util/RString.java", "rawCode": "  public void replace(JsonObject json) {\n    for (Entry<String, JsonElement> obj : json.entrySet()) {\n      JsonElement v = obj.getValue();\n      if (v.isJsonPrimitive() && ((JsonPrimitive) v).isString()) {\n        replace(obj.getKey(), v.getAsString());\n      } else if (v.isJsonArray()) {\n        for (JsonElement e : (JsonArray) v) {\n          assert e instanceof JsonObject;\n          RString sub = restartGroup(obj.getKey());\n          sub.replace((JsonObject) e);\n          sub.append();\n        }\n      } else {\n        replace(obj.getKey(), v);\n      }\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4086, "initialization": ["JsonElement jsonElement = JsonElement.getAsJsonObject()"], "initializationStart": [270], "initializationEnd": [298], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 374, "focalAPIEnd": 396, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["equalsIgnoreCase(value)"], "useStart": [350], "useEnd": [397], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/motech/care-reporting/tree/master/commcare-migration/src/main/java/org/motechproject/care/reporting/migration/task/CaseMigrationTask.java", "rawCode": "  private boolean isTask(JsonElement aCase) {\n    JsonObject jsonObject = (JsonObject) aCase;\n    if (jsonObject == null) return false;\n    JsonElement properties = jsonObject.get(\"properties\");\n    if (properties == null) return false;\n    final JsonElement caseType = properties.getAsJsonObject().get(\"case_type\");\n    return (caseType != null) && \"TASK\".equalsIgnoreCase(caseType.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4087, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jsonElement.isJsonNull())", "guardType": "IF {", "guardExpressionStart": 138, "guardExpressionEnd": 160, "guardBlockStart": 138, "guardBlockEnd": 191, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 222, "focalAPIEnd": 240, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseLong(value)"], "useStart": [278], "useEnd": [301], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/avshabanov/java-maven-tests/tree/master/src/microblog/src/mb-exposure/src/main/java/org/microblog/exposure/shared/provider/GsonAwareContextResolver.java", "rawCode": "    public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      if (json.isJsonNull()) {\n        return null;\n      }\n\n      final String dateStr = json.getAsString();\n      try {\n        return new Date(Long.parseLong(dateStr));\n      } catch (NumberFormatException e) {\n        throw new JsonParseException(\"Invalid date string: \" + dateStr, e);\n      }\n    }\n"}, {"dataset": "getAsString", "exampleID": 4088, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [240], "initializationEnd": [267], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement!=null&&jsonElement.isJsonPrimitive()", "guardType": "IF {", "guardExpressionStart": 276, "guardExpressionEnd": 325, "guardBlockStart": 276, "guardBlockEnd": 373, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 343, "focalAPIEnd": 364, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Spoutcraft/Spoutcraft/tree/master/src/main/java/com/prupe/mcpatcher/Config.java", "rawCode": "  private static String getSelectedLauncherProfile(File minecraftDir) {\n    File path = new File(minecraftDir, \"launcher_profiles.json\");\n    JsonObject json = JsonUtils.parseJson(path);\n\n    if (json != null) {\n      JsonElement element = json.get(\"selectedProfile\");\n\n      if (element != null && element.isJsonPrimitive()) {\n        return element.getAsString();\n      }\n    }\n\n    return null;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4089, "initialization": ["JsonElement jsonElement = Object.get(String)"], "initializationStart": [311], "initializationEnd": [348], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement!=null", "guardType": "IF {", "guardExpressionStart": 357, "guardExpressionEnd": 381, "guardBlockStart": 357, "guardBlockEnd": 1077, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 409, "focalAPIEnd": 434, "followUpCheck": "value.equals(GetMessageRequest.TYPE)", "checkType": "IF", "followUpCheckExpressionStart": 445, "followUpCheckExpressionEnd": 487, "followUpCheckBlockStart": 445, "followUpCheckBlockEnd": 1069, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Aldeon/Aldeon/tree/master/src/main/java/org/aldeon/networking/conversion/RequestClassMapper.java", "rawCode": "  @Override\n  public Class<? extends Request> getClass(Object object) {\n\n    /*\n    We assume that each request has a field named 'type'.\n    By reading this value, we can figure out what this\n    message should be converted to.\n\n    */\n\n    if (object instanceof JsonObject) {\n\n      JsonElement typeElement = ((JsonObject) object).get(TYPE_FIELD);\n\n      if (typeElement != null) {\n\n        String action = typeElement.getAsString();\n\n        if (action.equals(GetMessageRequest.TYPE)) {\n          return GetMessageRequest.class;\n        } else if (action.equals(GetRelevantPeersRequest.TYPE)) {\n          return GetRelevantPeersRequest.class;\n        } else if (action.equals(CompareTreesRequest.TYPE)) {\n          return CompareTreesRequest.class;\n        } else if (action.equals(IndicateInterestRequest.TYPE)) {\n          return IndicateInterestRequest.class;\n        } else if (action.equals(GetClockRequest.TYPE)) {\n          return GetClockRequest.class;\n        } else if (action.equals(GetDiffRequest.TYPE)) {\n          return GetDiffRequest.class;\n        }\n      }\n    }\n\n    return null;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4090, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement.isJsonPrimitive()", "guardType": "IF {", "guardExpressionStart": 139, "guardExpressionEnd": 166, "guardBlockStart": 139, "guardBlockEnd": 474, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 251, "focalAPIEnd": 269, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setDisplay(value)", "jsonElement.getAsJsonObject()", "jsonElement.get(String)"], "useStart": [234, 391, 391], "useEnd": [270, 413, 428], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bruceMacLeod/motech-server-pillreminder-0.18/tree/master/modules/openmrs/ws/src/main/java/org/motechproject/openmrs/ws/resource/model/Observation.java", "rawCode": "    @Override\n    public ObservationValue deserialize(\n        JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n      if (json.isJsonPrimitive()) {\n        ObservationValue value = new ObservationValue();\n        value.setDisplay(json.getAsString());\n        return value;\n      } else {\n        ObservationValue value = new ObservationValue();\n        value.setDisplay(json.getAsJsonObject().get(\"display\").getAsString());\n        return value;\n      }\n    }\n"}, {"dataset": "getAsString", "exampleID": 4091, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [95], "initializationEnd": [111], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jsonElement==null)", "guardType": "IF {", "guardExpressionStart": 119, "guardExpressionEnd": 136, "guardBlockStart": 119, "guardBlockEnd": 149, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 171, "focalAPIEnd": 189, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.length()"], "useStart": [255], "useEnd": [269], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cloudsmith/geppetto/tree/master/org.cloudsmith.geppetto.catalog/src/org/cloudsmith/geppetto/catalog/impl/CatalogResourceImpl.java", "rawCode": "    private static String getString(JsonObject jsonObj, String key) {\n      JsonElement json = jsonObj.get(key);\n      if (json == null) return null;\n      String value = json.getAsString();\n\n      // unset values are null, not empty strings\n      return value.length() == 0 ? null : value;\n    }\n"}, {"dataset": "getAsString", "exampleID": 4092, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement.isJsonPrimitive()", "guardType": "IF {", "guardExpressionStart": 139, "guardExpressionEnd": 166, "guardBlockStart": 139, "guardBlockEnd": 474, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 251, "focalAPIEnd": 269, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setDisplay(value)", "jsonElement.getAsJsonObject()", "jsonElement.get(String)"], "useStart": [234, 391, 391], "useEnd": [270, 413, 428], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/motech/motech-server-pillreminder/tree/master/modules/openmrs/ws/src/main/java/org/motechproject/openmrs/ws/resource/model/Observation.java", "rawCode": "    @Override\n    public ObservationValue deserialize(\n        JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n      if (json.isJsonPrimitive()) {\n        ObservationValue value = new ObservationValue();\n        value.setDisplay(json.getAsString());\n        return value;\n      } else {\n        ObservationValue value = new ObservationValue();\n        value.setDisplay(json.getAsJsonObject().get(\"display\").getAsString());\n        return value;\n      }\n    }\n"}, {"dataset": "getAsString", "exampleID": 4093, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [445], "initializationEnd": [463], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "null!=jsonElement", "guardType": "IF {", "guardExpressionStart": 469, "guardExpressionEnd": 489, "guardBlockStart": 469, "guardBlockEnd": 619, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 520, "focalAPIEnd": 541, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Collabinate/Collabinate/tree/master/collabinate-server/src/main/java/com/collabinate/server/activitystreams/ActivityStreamsObject.java", "rawCode": "  /**\n   * Gets a string value from the given json object.\n   *\n   * @param key The key of the value to retrieve.\n   * @param container The json object from which to retrieve a string.\n   * @return The value of the given string key, or null if it does not exist.\n   */\n  private String getStringValue(String key, JsonObject container) {\n    if (null == key || null == container) return null;\n\n    String value = null;\n\n    JsonElement element = container.get(key);\n    if (null != element) {\n      try {\n        value = element.getAsString();\n      } catch (ClassCastException | IllegalStateException e) {\n      }\n    }\n\n    return value;\n  }\n"}, {"dataset": "getAsString", "exampleID": 4094, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 233, "focalAPIEnd": 249, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["decodeBase64(value)"], "useStart": [213], "useEnd": [250], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/testmycode/tmc-netbeans/tree/master/tmc-plugin/src/fi/helsinki/cs/tmc/utilities/ByteArrayGsonSerializer.java", "rawCode": "  @Override\n  public byte[] deserialize(JsonElement je, Type type, JsonDeserializationContext jdc)\n      throws JsonParseException {\n    if (je.isJsonPrimitive() && ((JsonPrimitive) je).isString()) {\n      return Base64.decodeBase64(je.getAsString());\n    } else if (je.isJsonNull()) {\n      return null;\n    } else {\n      throw new JsonParseException(\"Not a base64 string.\");\n    }\n  }\n"}, {"dataset": "getAsString", "exampleID": 4095, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [124], "initializationEnd": [146], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 223, "focalAPIEnd": 245, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)"], "useStart": [188], "useEnd": [246], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ieb/sparsemapcontent/tree/master/extensions/integration/src/main/java/uk/co/tfd/sm/integration/JsonTestUtils.java", "rawCode": "  public static void checkProperty(JsonObject json, String propertyName, String propertyValue) {\n    JsonElement testProp = json.get(propertyName);\n    Assert.assertNotNull(testProp);\n    Assert.assertEquals(propertyValue, testProp.getAsString());\n  }\n"}, {"dataset": "getAsString", "exampleID": 4096, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 414, "focalAPIEnd": 437, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["seriesIdentifierFrom(String,value,Integer)", "identifierFrom(value,String,String)"], "useStart": [650, 743], "useEnd": [711, 790], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/atlasapi/atlas/tree/master/src/main/java/org/atlasapi/query/content/fuzzy/RemoteFuzzySearcher.java", "rawCode": "    @Override\n    public ContentIdentifier deserialize(\n        JsonElement json, Type typeOfT, JsonDeserializationContext context)\n        throws JsonParseException {\n      JsonObject jsonObj = json.getAsJsonObject();\n      String uri = jsonObj.get(\"uri\").getAsString();\n      String type = jsonObj.get(\"type\").getAsString();\n      JsonElement idElement = jsonObj.get(\"id\");\n      String id = idElement != null ? idElement.getAsString() : null;\n\n      if (\"series\".equals(type)) {\n        JsonElement seriesElement = jsonObj.get(\"seriesNumber\");\n        Integer seriesNumber = seriesElement != null ? seriesElement.getAsInt() : null;\n        return ContentIdentifier.seriesIdentifierFrom(uri, id, seriesNumber);\n      } else {\n        return ContentIdentifier.identifierFrom(id, uri, type);\n      }\n    }\n"}, {"dataset": "getAsString", "exampleID": 4097, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [95], "initializationEnd": [111], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jsonElement==null)", "guardType": "IF {", "guardExpressionStart": 119, "guardExpressionEnd": 136, "guardBlockStart": 119, "guardBlockEnd": 149, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 171, "focalAPIEnd": 189, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.length()"], "useStart": [255], "useEnd": [269], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/puppetlabs/geppetto/tree/master/com.puppetlabs.geppetto.catalog/src/com/puppetlabs/geppetto/catalog/impl/CatalogResourceImpl.java", "rawCode": "    private static String getString(JsonObject jsonObj, String key) {\n      JsonElement json = jsonObj.get(key);\n      if (json == null) return null;\n      String value = json.getAsString();\n\n      // unset values are null, not empty strings\n      return value.length() == 0 ? null : value;\n    }\n"}, {"dataset": "getAsString", "exampleID": 4098, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [487], "initializationEnd": [502], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jsonElement!=null", "guardType": "IF {", "guardExpressionStart": 508, "guardExpressionEnd": 525, "guardBlockStart": 508, "guardBlockEnd": 576, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 550, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setCode(value)"], "useStart": [534], "useEnd": [569], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/incubator-tajo/tree/master/tajo-common/src/main/java/org/apache/tajo/json/DataTypeAdapter.java", "rawCode": "  @Override\n  public DataType deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n\n    JsonObject obj = (JsonObject) json;\n    DataType.Builder builder = DataType.newBuilder();\n    TajoDataTypes.Type type = TajoDataTypes.Type.valueOf(obj.get(\"type\").getAsString());\n    builder.setType(type);\n\n    JsonElement len = obj.get(\"len\");\n    if (len != null) {\n      builder.setLength(len.getAsInt());\n    }\n    JsonElement code = obj.get(\"code\");\n    if (code != null) {\n      builder.setCode(code.getAsString());\n    }\n    return builder.build();\n  }\n"}, {"dataset": "getAsString", "exampleID": 4099, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jsonElement.getAsLong()", "jsonElement.getAsLong()", "jsonElement.getAsLong()"], "configurationStart": [229, 337, 446], "configurationEnd": [244, 352, 461], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 570, "focalAPIEnd": 587, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jsonElement.getAsNumber()", "jsonElement.getAsString()", "jsonElement.toString()"], "useStart": [693, 833, 882], "useEnd": [710, 850, 896], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/0xdata/h2o/tree/master/src/main/java/water/api/RequestBuilders.java", "rawCode": "    public String elementToString(JsonElement elm, String contextName) {\n      String elementName = elementName(contextName);\n      if (elementName.endsWith(Suffixes.BYTES_PER_SECOND)) {\n        return PrettyPrint.bytesPerSecond(elm.getAsLong());\n      } else if (elementName.endsWith(Suffixes.BYTES)) {\n        return PrettyPrint.bytes(elm.getAsLong());\n      } else if (elementName.endsWith(Suffixes.MILLIS)) {\n        return PrettyPrint.msecs(elm.getAsLong(), true);\n      } else if (elm instanceof JsonPrimitive && ((JsonPrimitive) elm).isString()) {\n        return elm.getAsString();\n      } else if (elm instanceof JsonPrimitive && ((JsonPrimitive) elm).isNumber()) {\n        Number n = elm.getAsNumber();\n        if (n instanceof Double) {\n          Double d = (Double) n;\n          return format(d);\n        }\n        return elm.getAsString();\n      } else {\n        return elm.toString();\n      }\n    }\n"}, {"dataset": "getAsString", "exampleID": 4100, "initialization": ["JsonElement jsonElement = JsonObject.get(String)"], "initializationStart": [85], "initializationEnd": [97], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jsonElement.getAsString()", "focalAPIStart": 180, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.length()"], "useStart": [217], "useEnd": [228], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/0xdata/h2o/tree/master/src/main/java/water/api/RequestBuilders.java", "rawCode": "    private String trunc(JsonObject obj, String fld, int n) {\n      JsonElement je = obj.get(fld);\n      if (je == null || je instanceof JsonNull) return \"<br>\";\n      String s1 = je.getAsString();\n      String s2 = (s1.length() > n ? s1.substring(0, n) : s1);\n      String s3 = s2.replace(\" \", \"&nbsp;\");\n      return s3 + \"<br>\";\n    }\n"}]