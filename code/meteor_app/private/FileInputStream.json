[{"dataset": "FileInputStream", "exampleID": 2201, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "println(String)"], "tryExpressionStart": 151, "tryExpressionEnd": 155, "tryBlockStart": 151, "tryBlockEnd": 813, "catchExpressionStart": 706, "catchExpressionEnd": 726, "catchBlockStart": 706, "catchBlockEnd": 813, "exceptionHandlingCallStart": [791, 760], "exceptionHandlingCallEnd": [805, 806], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 262, "focalAPIEnd": 291, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new DataInputStream(fis)"], "useStart": [363], "useEnd": [391], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mike011/TanitaScale/tree/master/TanitaScaleReporter/src/main/java/ca/charland/tanitascale/LoadFile.java", "rawCode": "  /** Loads an entire file line by line. */\n  public static List<String> load(String filename) {\n    List<String> lines = new ArrayList<String>();\n    try {\n      // Open the file that is the first\n      // command line parameter\n      FileInputStream fstream = new FileInputStream(filename);\n      // Get the object of DataInputStream\n      DataInputStream in = new DataInputStream(fstream);\n      BufferedReader br = new BufferedReader(new InputStreamReader(in));\n      String strLine;\n      // Read File Line By Line\n      while ((strLine = br.readLine()) != null) {\n        // Print the content on the console\n        lines.add(strLine);\n      }\n      // Close the input stream\n      in.close();\n    } catch (Exception e) { // Catch exception if any\n      System.err.println(\"Error: \" + e.getMessage());\n    }\n    return lines;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2202, "initialization": ["File file = new File(String)"], "initializationStart": [330], "initializationEnd": [353], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["error(*)"], "tryExpressionStart": 777, "tryExpressionEnd": 781, "tryBlockStart": 777, "tryBlockEnd": 1290, "catchExpressionStart": 1168, "catchExpressionEnd": 1200, "catchBlockStart": 1168, "catchBlockEnd": 1227, "exceptionHandlingCallStart": [1208], "exceptionHandlingCallEnd": [1220], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 831, "focalAPIEnd": 863, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new InputSource(fis)"], "useStart": [815], "useEnd": [864], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/tools/tree/master/ide/eclipse/server/org.wso2.developerstudio.eclipse.carbonserver40/src/org/wso2/developerstudio/eclipse/carbonserver40/util/CarbonServer40Utils.java", "rawCode": "  public static String getWebContextRoot(IServer server) {\n    String transportsXml =\n        FileUtils.addNodesToPath(\n            CarbonServerManager.getServerHome(server).toOSString(),\n            new String[] {\"repository\", \"conf\", \"carbon.xml\"});\n    XPathFactory factory = XPathFactory.newInstance();\n    File xmlDocument = new File(transportsXml);\n    String webContextRoot = null;\n    NamespaceContext ctx =\n        new NamespaceContext() {\n          public String getNamespaceURI(String prefix) {\n            return \"http://wso2.org/projects/carbon/carbon.xml\";\n          }\n\n          public String getPrefix(String arg0) {\n            return null;\n          }\n\n          public Iterator getPrefixes(String arg0) {\n            return null;\n          }\n        };\n\n    try {\n      InputSource inputSource = new InputSource(new FileInputStream(xmlDocument));\n      XPath xPath = factory.newXPath();\n      xPath.setNamespaceContext(ctx);\n      XPathExpression xPathExpression = xPath.compile(\"/:Server/:WebContextRoot\");\n      webContextRoot = xPathExpression.evaluate(inputSource);\n      webContextRoot = webContextRoot.equals(\"/\") ? \"\" : webContextRoot;\n    } catch (FileNotFoundException e) {\n      log.error(e);\n    } catch (XPathExpressionException e) {\n      log.error(e);\n    }\n    return webContextRoot;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2203, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 829, "focalAPIEnd": 858, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["loadNetworkDescriptor(fis)"], "useStart": [892], "useEnd": [921], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dana-i2cat/opennaas/tree/master/core/resources/src/main/java/org/opennaas/core/resources/shell/CreateResourceCommand.java", "rawCode": "  /**\n   * Helper methods to test these functionality...\n   *\n   * @param filename\n   * @return\n   * @throws JAXBException\n   * @throws IOException\n   * @throws ResourceException\n   * @throws SAXException\n   */\n  private NetworkTopology getNetworkDescriptor(String filename)\n      throws JAXBException, IOException, ResourceException, SAXException {\n    InputStream stream = null;\n    // First try a URL\n    try {\n      URL url = new URL(filename);\n      log.info(\"URL: \" + url);\n      stream = url.openStream();\n    } catch (MalformedURLException ignore) {\n      // Then try a file\n      // Added class loader to read files\n\n      // TODO check to read topologies with relative paths\n      // stream =\n      // this.getClass().getClassLoader().getResourceAsStream(filename);\n      log.error(\"file: \" + filename);\n      stream = new FileInputStream(filename);\n    }\n\n    NetworkTopology rd = loadNetworkDescriptor(stream);\n    return rd;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2204, "initialization": ["File file = new File(String)"], "initializationStart": [675], "initializationEnd": [691], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 729, "tryExpressionEnd": 733, "tryBlockStart": 729, "tryBlockEnd": 1202, "catchExpressionStart": 1071, "catchExpressionEnd": 1103, "catchBlockStart": 1071, "catchBlockEnd": 1141, "exceptionHandlingCallStart": [1113], "exceptionHandlingCallEnd": [1132], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 752, "focalAPIEnd": 777, "followUpCheck": "fis.read(outputByte,0,4096) != -1", "checkType": "LOOP {", "followUpCheckExpressionStart": 895, "followUpCheckExpressionEnd": 941, "followUpCheckBlockStart": 895, "followUpCheckBlockEnd": 995, "use": ["fis.close()"], "useStart": [1005], "useEnd": [1019], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/EPSI-Bordeaux/CVTheque_LesPoneys/tree/master/src/main/java/poney/controller/DetailCVController.java", "rawCode": "  @RequestMapping(method = RequestMethod.POST)\n  public String download(\n      ModelMap model,\n      @RequestParam(\"id\") Integer idCV,\n      HttpServletResponse response,\n      HttpSession session) {\n    if (idCV == null) {\n      return \"acceuil\";\n    } else {\n      CV cv = HECV.get(idCV);\n\n      String cvUrl = cv.getCvUrl();\n      String splitUrl[] = cvUrl.split(\"/\");\n      String cvName = splitUrl[splitUrl.length - 1];\n      String cvPath = session.getServletContext().getRealPath(\"/\") + cvUrl.substring(1);\n\n      response.setContentType(\"application/octet-stream\");\n      response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + cvName);\n\n      File file = new File(cvPath);\n      FileInputStream fileIn;\n      try {\n        fileIn = new FileInputStream(file);\n        ServletOutputStream out = response.getOutputStream();\n\n        byte[] outputByte = new byte[4096];\n\n        while (fileIn.read(outputByte, 0, 4096) != -1) {\n          out.write(outputByte, 0, 4096);\n        }\n\n        fileIn.close();\n        out.flush();\n        out.close();\n      } catch (FileNotFoundException e) {\n        e.printStackTrace();\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n\n      return null;\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2205, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 93, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fis.close()"], "useStart": [332], "useEnd": [342], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CloudifySource/iTests-Framework/tree/master/src/main/java/iTests/framework/utils/DeploymentUtils.java", "rawCode": "  private static void copyFile(File src, File dst) throws IOException {\n    InputStream in = new FileInputStream(src);\n    OutputStream out = new FileOutputStream(dst);\n\n    // Transfer bytes from in to out\n    byte[] buf = new byte[1024];\n    int len;\n    while ((len = in.read(buf)) > 0) {\n      out.write(buf, 0, len);\n    }\n    in.close();\n    out.close();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2206, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 189, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new StreamSource(fis)"], "useStart": [349], "useEnd": [381], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/camptocamp/secureOWS/tree/master/owsproxyserver/src/org/deegree/portal/standard/csw/MetadataTransformer.java", "rawCode": "  /**\n   * @param filePathName\n   * @throws FileNotFoundException\n   */\n  private void initTransformer(String filePathName) throws FileNotFoundException {\n\n    InputStream xslInputStream = new FileInputStream(filePathName);\n\n    try {\n      TransformerFactory tFactory = TransformerFactory.newInstance();\n      transformer = tFactory.newTransformer(new StreamSource(xslInputStream));\n    } catch (TransformerConfigurationException e) {\n      e.printStackTrace();\n    } catch (TransformerFactoryConfigurationError e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2207, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getName()", "getLogger(*)", "log(*,String,String)", "getResourceAsStream(String)", "Properties.load(InputStream)", "InputStream.close()"], "tryExpressionStart": 1180, "tryExpressionEnd": 1184, "tryBlockStart": 1180, "tryBlockEnd": 1628, "catchExpressionStart": 1318, "catchExpressionEnd": 1341, "catchBlockStart": 1318, "catchBlockEnd": 1628, "exceptionHandlingCallStart": [1370, 1353, 1353, 1515, 1576, 1607], "exceptionHandlingCallEnd": [1394, 1395, 1485, 1563, 1595, 1617], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 1218, "focalAPIEnd": 1251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Properties.load(fis)", "fis.close()"], "useStart": [1263, 1295], "useEnd": [1283, 1306], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/I-TECH/OpenEMRConnect/tree/master/oeclib/src/main/java/ke/go/moh/oec/lib/Mediator.java", "rawCode": "  /**\n   * Gets the standard properties class.\n   *\n   * @return properties.\n   *     <p>The default property file is named openemrconnect.properties.\n   */\n  public static Properties getProperties() {\n    if (properties == null) {\n      properties = new Properties();\n\n      // If a system property defining the configuration directory is\n      // available, use it.\n      String configDirectory = System.getProperty(\"configDirectory\");\n      if (configDirectory == null) {\n        configDirectory = runtimeDirectory;\n      }\n\n      // First attempt to load from the filesystem, which will only work\n      // in a dev environment (i.e. from within the IDE), and for many,\n      // only for runtime2 or better.\n\n      // On deployments, the properties file should live in the jar, and\n      // thus require loading as a resource (unless the system property\n      // for \"configDirectory\" is supplied).\n\n      String propFileName = \"openemrconnect.properties\";\n      try {\n        String propPathName = configDirectory + propFileName;\n        Logger.getLogger(Mediator.class.getName())\n            .log(Level.INFO, \"Attempt property load from file ''{0}''\", propPathName);\n        try {\n          FileInputStream fis = new FileInputStream(propPathName);\n          properties.load(fis);\n          fis.close();\n        } catch (IOException ex) {\n          Logger.getLogger(Mediator.class.getName())\n              .log(Level.INFO, \"Attempt property load as resource ''{0}''\", propFileName);\n          InputStream in = (Mediator.class.getResourceAsStream(propFileName));\n          properties.load(in);\n          in.close();\n        }\n      } catch (Exception ex) {\n        Logger.getLogger(Mediator.class.getName())\n            .log(\n                Level.SEVERE,\n                \"getProperty() Can''t open ''{0}'' -- Please create the properties file if it doesn''t exist and then restart the app\",\n                propFileName);\n        System.exit(1);\n      }\n    }\n    return properties;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2208, "initialization": ["File file = new File(String)"], "initializationStart": [501], "initializationEnd": [525], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 810, "focalAPIEnd": 840, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["copy(fis,OutputStream,boolean)", "fis.close()"], "useStart": [853, 902], "useEnd": [884, 913], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jsanda/rhq-plugins/tree/master/jboss-as-7/src/test/java/org/rhq/modules/plugins/jbossas7/itest/nonpc/AbstractIntegrationTest.java", "rawCode": "  String uploadToAs(String deploymentPath) throws IOException {\n    ASUploadConnection conn = new ASUploadConnection(DC_HOST, DC_HTTP_PORT, DC_USER, DC_PASS);\n    String fileName = new File(deploymentPath).getName();\n    OutputStream os = conn.getOutputStream(fileName);\n\n    // URL url = getClass().getClassLoader().getResource(\".\");\n    // System.out.println(url);\n\n    InputStream fis = getClass().getClassLoader().getResourceAsStream(deploymentPath);\n    if (fis == null) {\n      File inputFile = new File(deploymentPath);\n      if (!inputFile.canRead()) {\n        throw new FileNotFoundException(\n            \"Input stream for path [\"\n                + deploymentPath\n                + \"] could not be opened - does the file exist either in the test classpath or on the filesystem?\");\n      }\n      fis = new FileInputStream(inputFile);\n    }\n\n    StreamUtil.copy(fis, os, false);\n    try {\n      fis.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    JsonNode node = conn.finishUpload();\n    // System.out.println(node);\n    assert node != null : \"No result from upload - node was null\";\n    assert node.has(\"outcome\") : \"No outcome from upload\";\n    String outcome = node.get(\"outcome\").getTextValue();\n    assert outcome.equals(\"success\") : \"Upload was no success\" + outcome;\n\n    JsonNode resultNode = node.get(\"result\");\n    return resultNode.get(\"BYTES_VALUE\").getTextValue();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2209, "initialization": ["File file = new File(String)"], "initializationStart": [111], "initializationEnd": [241], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 274, "focalAPIEnd": 299, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fis.read(byte[])", "fis.close()"], "useStart": [623, 688], "useEnd": [644, 704], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/europeana/contrib/tree/master/repox/branches/repox_rhine/src/main/java/pt/utl/ist/repox/Splitter.java", "rawCode": "  public static void split() throws IOException {\n    long maxSize = 1 * 1024 * 1024;\n\n    File file =\n        new File(\n            \"C:/LavoriMiei/Europeana/Sources/Contrib/Repox/work/1.testdeploy/testrecords/idextracted update/repox1.out\");\n    FileInputStream inStream = new FileInputStream(file);\n\n    File fileOut =\n        new File(\n            \"C:/LavoriMiei/Europeana/Sources/Contrib/Repox/work/1.testdeploy/testrecords/idextracted update/repox2.out\");\n    FileOutputStream outStream = new FileOutputStream(fileOut);\n\n    byte[] buffer = new byte[1024];\n    for (int i = 0; i < maxSize; i += buffer.length) {\n      inStream.read(buffer);\n      outStream.write(buffer);\n    }\n\n    inStream.close();\n    outStream.close();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2210, "initialization": ["File file = new File(File,*)"], "initializationStart": [1447], "initializationEnd": [1478], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.getParentFile()"], "configurationStart": [1540], "configurationEnd": [1560], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 1831, "focalAPIEnd": 1856, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["readFrom(fis,*)", "fis.close()"], "useStart": [1887, 1943], "useEnd": [1931, 1953], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/florhaf/ravent/tree/master/service/lib/joda-time-2.0/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java", "rawCode": "  /**\n   * Returns a map of ids to DateTimeZones.\n   *\n   * @param outputDir optional directory to write compiled data files to\n   * @param sources optional list of source files to parse\n   */\n  public Map<String, DateTimeZone> compile(File outputDir, File[] sources) throws IOException {\n    if (sources != null) {\n      for (int i = 0; i < sources.length; i++) {\n        BufferedReader in = new BufferedReader(new FileReader(sources[i]));\n        parseDataFile(in);\n        in.close();\n      }\n    }\n\n    if (outputDir != null) {\n      if (!outputDir.exists()) {\n        throw new IOException(\"Destination directory doesn't exist: \" + outputDir);\n      }\n      if (!outputDir.isDirectory()) {\n        throw new IOException(\"Destination is not a directory: \" + outputDir);\n      }\n    }\n\n    Map<String, DateTimeZone> map = new TreeMap<String, DateTimeZone>();\n\n    System.out.println(\"Writing zoneinfo files\");\n    for (int i = 0; i < iZones.size(); i++) {\n      Zone zone = iZones.get(i);\n      DateTimeZoneBuilder builder = new DateTimeZoneBuilder();\n      zone.addToBuilder(builder, iRuleSets);\n      final DateTimeZone original = builder.toDateTimeZone(zone.iName, true);\n      DateTimeZone tz = original;\n      if (test(tz.getID(), tz)) {\n        map.put(tz.getID(), tz);\n        if (outputDir != null) {\n          if (ZoneInfoCompiler.verbose()) {\n            System.out.println(\"Writing \" + tz.getID());\n          }\n          File file = new File(outputDir, tz.getID());\n          if (!file.getParentFile().exists()) {\n            file.getParentFile().mkdirs();\n          }\n          OutputStream out = new FileOutputStream(file);\n          try {\n            builder.writeTo(zone.iName, out);\n          } finally {\n            out.close();\n          }\n\n          // Test if it can be read back.\n          InputStream in = new FileInputStream(file);\n          DateTimeZone tz2 = DateTimeZoneBuilder.readFrom(in, tz.getID());\n          in.close();\n\n          if (!original.equals(tz2)) {\n            System.out.println(\"*e* Error in \" + tz.getID() + \": Didn't read properly from file\");\n          }\n        }\n      }\n    }\n\n    for (int pass = 0; pass < 2; pass++) {\n      for (int i = 0; i < iLinks.size(); i += 2) {\n        String id = iLinks.get(i);\n        String alias = iLinks.get(i + 1);\n        DateTimeZone tz = map.get(id);\n        if (tz == null) {\n          if (pass > 0) {\n            System.out.println(\n                \"Cannot find time zone '\" + id + \"' to link alias '\" + alias + \"' to\");\n          }\n        } else {\n          map.put(alias, tz);\n        }\n      }\n    }\n\n    if (outputDir != null) {\n      System.out.println(\"Writing ZoneInfoMap\");\n      File file = new File(outputDir, \"ZoneInfoMap\");\n      if (!file.getParentFile().exists()) {\n        file.getParentFile().mkdirs();\n      }\n\n      OutputStream out = new FileOutputStream(file);\n      DataOutputStream dout = new DataOutputStream(out);\n      try {\n        // Sort and filter out any duplicates that match case.\n        Map<String, DateTimeZone> zimap =\n            new TreeMap<String, DateTimeZone>(String.CASE_INSENSITIVE_ORDER);\n        zimap.putAll(map);\n        writeZoneInfoMap(dout, zimap);\n      } finally {\n        dout.close();\n      }\n    }\n\n    return map;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2211, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["format(String,File,*)", "getLocalizedMessage()", "display(*,*)"], "tryExpressionStart": 352, "tryExpressionEnd": 356, "tryBlockStart": 352, "tryBlockEnd": 1221, "catchExpressionStart": 708, "catchExpressionEnd": 728, "catchBlockStart": 708, "catchBlockEnd": 883, "exceptionHandlingCallStart": [774, 851, 736], "exceptionHandlingCallEnd": [839, 874, 875], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 398, "focalAPIEnd": 423, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new BufferedInputStream(fis)"], "useStart": [374], "useEnd": [424], "hasFinally": 1, "cleanUpCall": ["BufferedInputStream.close()"], "finallyExpressionStart": 884, "finallyExpressionEnd": 892, "finallyBlockStart": 884, "finallyBlockEnd": 1221, "cleanUpCallStart": [935], "cleanUpCallEnd": [950], "url": "https://github.com/wubs/485-Project/tree/master/pa6/hadoop/src/contrib/eclipse-plugin/src/java/org/apache/hadoop/eclipse/dfs/DFSFile.java", "rawCode": "  /**\n   * Upload a local file to this file on the distributed file system\n   *\n   * @param monitor\n   * @param file\n   */\n  public void upload(IProgressMonitor monitor, File file) {\n\n    final int taskSize = 1024;\n\n    monitor.setTaskName(\"Upload file \" + this.path);\n\n    BufferedInputStream istream = null;\n    DataOutputStream ostream = null;\n\n    try {\n      istream = new BufferedInputStream(new FileInputStream(file));\n      ostream = getDFS().create(this.path);\n\n      int bytes;\n      byte[] buffer = new byte[taskSize];\n\n      while ((bytes = istream.read(buffer)) >= 0) {\n        if (monitor.isCanceled()) return;\n        ostream.write(buffer, 0, bytes);\n        monitor.worked(1);\n      }\n\n    } catch (Exception e) {\n      ErrorMessageDialog.display(\n          String.format(\"Unable to uploade file %s to %s\", file, this.path),\n          e.getLocalizedMessage());\n\n    } finally {\n      try {\n        if (istream != null) istream.close();\n      } catch (IOException e) {\n        e.printStackTrace();\n        // nothing we can do here\n      }\n      try {\n        if (ostream != null) ostream.close();\n      } catch (IOException e) {\n        e.printStackTrace();\n        // nothing we can do here\n      }\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2212, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "StorageException", "exceptionHandlingCall": [], "tryExpressionStart": 753, "tryExpressionEnd": 757, "tryBlockStart": 753, "tryBlockEnd": 1002, "catchExpressionStart": 1187, "catchExpressionEnd": 1215, "catchBlockStart": 1187, "catchBlockEnd": 1242, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.getAbsolutePath()"], "configurationStart": [816], "configurationEnd": [838], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 1141, "focalAPIEnd": 1166, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createOrUpdatePayload(DigitalObject,String,fis)"], "useStart": [1106], "useEnd": [1167], "hasFinally": 1, "cleanUpCall": ["Payload.close()"], "finallyExpressionStart": 1358, "finallyExpressionEnd": 1366, "finallyBlockStart": 1358, "finallyBlockEnd": 1435, "cleanUpCallStart": [1405], "cleanUpCallEnd": [1420], "url": "https://github.com/the-fascinator/the-fascinator/tree/master/common/src/main/java/com/googlecode/fascinator/common/storage/StorageUtils.java", "rawCode": "  /**\n   * This method stores a File as a DigitalObject into the specified Storage. The File can be stored\n   * as a linked Payload if specified.\n   *\n   * @param storage a Storage instance\n   * @param file the File to store\n   * @param linked set true to link to the original file, false to copy\n   * @return a DigitalObject\n   * @throws StorageException if there was an error storing the file\n   */\n  public static DigitalObject storeFile(Storage storage, File file, boolean linked)\n      throws StorageException {\n    DigitalObject object = null;\n    Payload payload = null;\n    String oid = generateOid(file);\n    String pid = generatePid(file);\n    try {\n      try {\n        object = getDigitalObject(storage, oid);\n        if (linked) {\n          try {\n            String path = FilenameUtils.separatorsToUnix(file.getAbsolutePath());\n            payload = createLinkedPayload(object, pid, path);\n          } catch (StorageException se) {\n            payload = object.getPayload(pid);\n          }\n        } else {\n          log.debug(\"Attempting to create or update payload...\");\n          payload = createOrUpdatePayload(object, pid, new FileInputStream(file));\n        }\n      } catch (StorageException se) {\n        throw se;\n      }\n    } catch (FileNotFoundException fnfe) {\n      throw new StorageException(\"File not found '\" + oid + \"'\");\n    } finally {\n      if (payload != null) {\n        payload.close();\n      }\n    }\n    return object;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2213, "initialization": ["File file = new File(*,String)"], "initializationStart": [176], "initializationEnd": [201], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["Logger.error(String)"], "tryExpressionStart": 211, "tryExpressionEnd": 215, "tryBlockStart": 211, "tryBlockEnd": 773, "catchExpressionStart": 571, "catchExpressionEnd": 593, "catchBlockStart": 571, "catchBlockEnd": 773, "exceptionHandlingCallStart": [605], "exceptionHandlingCallEnd": [762], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 249, "focalAPIEnd": 274, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fis.read(byte[])", "fis.close()"], "useStart": [286, 312], "useEnd": [300, 323], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wangyif2/4d19/tree/master/Lab4/src/zookeeper/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/Bookie.java", "rawCode": "    synchronized void readLog() {\n      byte buff[] = new byte[16];\n      ByteBuffer bb = ByteBuffer.wrap(buff);\n      for (File dir : ledgerDirectories) {\n        File file = new File(dir, \"lastMark\");\n        try {\n          FileInputStream fis = new FileInputStream(file);\n          fis.read(buff);\n          fis.close();\n          bb.clear();\n          long i = bb.getLong();\n          long p = bb.getLong();\n          if (i > txnLogId) {\n            txnLogId = i;\n          }\n          if (p > txnLogPosition) {\n            txnLogPosition = p;\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Problems reading from \"\n                  + file\n                  + \" (this is okay if it is the first time starting this bookie\");\n        }\n      }\n    }\n"}, {"dataset": "FileInputStream", "exampleID": 2214, "initialization": ["File file = new File(File,*)"], "initializationStart": [161], "initializationEnd": [199], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "file.exists()", "guardType": "IF {", "guardExpressionStart": 205, "guardExpressionEnd": 228, "guardBlockStart": 205, "guardBlockEnd": 614, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 293, "focalAPIEnd": 323, "followUpCheck": "fis != null", "checkType": "IF", "followUpCheckExpressionStart": 490, "followUpCheckExpressionEnd": 509, "followUpCheckBlockStart": 490, "followUpCheckBlockEnd": 551, "use": ["decodeStream(fis,*,*)", "fis.close()"], "useStart": [340, 524], "useEnd": [386, 538], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 456, "finallyExpressionEnd": 464, "finallyBlockStart": 456, "finallyBlockEnd": 608, "cleanUpCallStart": [524], "cleanUpCallEnd": [538], "url": "https://github.com/larsrottmann/inovex-app-client/tree/master/Inovex App/src/de/inovex/app/provider/DataUtilities.java", "rawCode": "  public static Bitmap loadThumbnail(String id) {\n    File thumbDir = new File(Environment.getExternalStorageDirectory(), CACHE_DIRECTORY);\n    File thumbFile = new File(thumbDir, String.valueOf(id));\n    if (thumbFile.exists()) {\n      InputStream stream = null;\n      try {\n        stream = new FileInputStream(thumbFile);\n        return BitmapFactory.decodeStream(stream, null, null);\n      } catch (FileNotFoundException e) {\n        // Ignore\n      } finally {\n        try {\n          if (stream != null) {\n            stream.close();\n          }\n        } catch (IOException ignore) {\n        }\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2215, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(name==null||name.isEmpty()||name.equals(\"-\",))", "guardType": "IF {", "guardExpressionStart": 1847, "guardExpressionEnd": 1905, "guardBlockStart": 1847, "guardBlockEnd": 2090, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 1960, "focalAPIEnd": 1986, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new OpenJDK7GZIPInputStream(fis)", "new InputStreamReader(fis)"], "useStart": [2040, 2255], "useEnd": [2071, 2280], "hasFinally": 1, "cleanUpCall": ["CDXToSSTable.close()"], "finallyExpressionStart": 2388, "finallyExpressionEnd": 2396, "finallyBlockStart": 2388, "finallyBlockEnd": 2467, "cleanUpCallStart": [2436], "cleanUpCallEnd": [2452], "url": "https://github.com/internetarchive/ia-hadoop-tools/tree/master/src/main/java/org/archive/cassandra/CDXToSSTable.java", "rawCode": "  public static void main(String[] args) throws IOException {\n\n    Options options = new Options();\n    options.addOption(\"d\", false, \"DeflateCompressor\");\n    options.addOption(\"l\", false, \"LZ4Compressor\");\n    options.addOption(\"s\", false, \"SnappyCompressor\");\n\n    // options.addOption(\"o\", \"output\", true, \"Ouput Dir\");\n    options.addOption(\"k\", \"key\", true, \"Keyspace (default: \" + DEFAULT_KEYSPACE + \")\");\n    options.addOption(\"f\", \"format\", true, \"cdx format (default: \" + DEFAULT_FORMAT + \")\");\n    options.addOption(\"cf\", \"table\", true, \"Table/Column Family (default: \" + DEFAULT_CF + \")\");\n\n    CommandLineParser parser = new BasicParser();\n    CommandLine cmd = null;\n\n    try {\n      cmd = parser.parse(options, args);\n    } catch (ParseException e) {\n      System.err.println(e);\n    }\n\n    String keyspace = cmd.getOptionValue(\"k\", DEFAULT_KEYSPACE);\n    String cf = cmd.getOptionValue(\"cf\", DEFAULT_CF);\n    String format = cmd.getOptionValue(\"f\", DEFAULT_FORMAT);\n    boolean convert = format.equals(\"cdx09\");\n\n    CDXToSSTable cdxTosst = null;\n\n    ICompressor compressor = null;\n\n    if (cmd.hasOption(\"d\")) {\n      compressor = DeflateCompressor.create(null);\n    } else if (cmd.hasOption(\"s\")) {\n      compressor = SnappyCompressor.create(null);\n    } else if (cmd.hasOption(\"l\")) {\n      compressor = LZ4Compressor.create(null);\n    } else {\n      compressor = LZ4Compressor.create(null);\n    }\n\n    String argsleft[] = cmd.getArgs();\n\n    if (argsleft.length == 0) {\n      System.err.println(\"Must supply <outdir>\");\n      System.exit(1);\n      return;\n    }\n\n    String input, outdir;\n\n    if (argsleft.length == 1) {\n      outdir = argsleft[0];\n      input = null;\n    } else {\n      input = argsleft[0];\n      outdir = argsleft[1];\n    }\n\n    try {\n      Config.setClientMode(true);\n\n      InputStream in = null;\n\n      if (input == null || input.isEmpty() || input.equals(\"-\")) {\n        in = System.in;\n      } else {\n        in = new FileInputStream(input);\n        if (input.endsWith(\".gz\")) {\n          in = new OpenJDK7GZIPInputStream(in);\n        }\n      }\n\n      cdxTosst = new CDXToSSTable(outdir, format, keyspace, cf, compressor, convert);\n\n      String line = null;\n\n      BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n\n      while ((line = reader.readLine()) != null) {\n        cdxTosst.insertCdxLine(line);\n      }\n\n    } finally {\n      if (cdxTosst != null) {\n        cdxTosst.close();\n      }\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2216, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 271, "focalAPIEnd": 305, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ObjectInputStream(fis)"], "useStart": [249], "useEnd": [306], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Mateful/Twitchess/tree/master/src/de/fhb/projects/Twitchess/util/Serializer.java", "rawCode": "  public static Object load(String name, String folder)\n      throws FileNotFoundException, IOException, ClassNotFoundException {\n    Object o = new Object();\n    ObjectInputStream inStream;\n    if (!folder.equals(\"\")) folder += \"/\";\n    inStream = new ObjectInputStream(new FileInputStream(folder + name));\n    o = inStream.readObject();\n    return o;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2217, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 96, "tryExpressionEnd": 100, "tryBlockStart": 96, "tryBlockEnd": 241, "catchExpressionStart": 157, "catchExpressionEnd": 189, "catchBlockStart": 157, "catchBlockEnd": 241, "exceptionHandlingCallStart": [207], "exceptionHandlingCallEnd": [230], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "file.isFile()", "guardType": "IF {", "guardExpressionStart": 66, "guardExpressionEnd": 85, "guardBlockStart": 66, "guardBlockEnd": 358, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 119, "focalAPIEnd": 145, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/seasarorg/mayaa/tree/master/src-impl/org/seasar/mayaa/impl/source/FileSourceDescriptor.java", "rawCode": "  public InputStream getInputStream() {\n    if (exists()) {\n      if (_file.isFile()) {\n        try {\n          return new FileInputStream(_file);\n        } catch (FileNotFoundException e) {\n          throw new RuntimeException(e);\n        }\n      } else if (_file.isDirectory()) {\n        CycleUtil.getServiceCycle().redirect(_file.getName() + \"/\");\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2218, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 335, "focalAPIEnd": 363, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new InputStreamReader(fis)"], "useStart": [313], "useEnd": [364], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/tools/preload/Compile.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    if (args.length != 2) {\n      System.err.println(\"Usage: Compile [log file] [output file]\");\n      System.exit(0);\n    }\n\n    Root root = new Root();\n\n    List<Record> records = new ArrayList<Record>();\n\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(args[0])));\n\n    String line;\n    int lineNumber = 0;\n    while ((line = in.readLine()) != null) {\n      lineNumber++;\n      if (line.startsWith(\"I/PRELOAD\")) {\n        try {\n          String clipped = line.substring(19);\n          records.add(new Record(clipped, lineNumber));\n        } catch (RuntimeException e) {\n          throw new RuntimeException(\n              \"Exception while recording line \" + lineNumber + \": \" + line, e);\n        }\n      }\n    }\n\n    for (Record record : records) {\n      root.indexProcess(record);\n    }\n\n    for (Record record : records) {\n      root.indexClassOperation(record);\n    }\n\n    in.close();\n\n    root.toFile(args[1]);\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2219, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 347, "focalAPIEnd": 370, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new BufferedInputStream(fis)"], "useStart": [323], "useEnd": [371], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jiongs/cocit/tree/master/src/cocit/com/jiongsoft/cocit/util/FileUtil.java", "rawCode": "  /**\n   * Copy the contents of the given input File into a new byte array.\n   *\n   * @param in the file to copy from\n   * @return the new byte array that has been copied to\n   * @throws IOException in case of I/O errors\n   */\n  public static byte[] copyToByteArray(File in) throws IOException {\n    return copyToByteArray(new BufferedInputStream(new FileInputStream(in)));\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2220, "initialization": ["File file = new File(String)"], "initializationStart": [144], "initializationEnd": [162], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["error(String,*)"], "tryExpressionStart": 243, "tryExpressionEnd": 247, "tryBlockStart": 243, "tryBlockEnd": 1360, "catchExpressionStart": 917, "catchExpressionEnd": 937, "catchBlockStart": 917, "catchBlockEnd": 1132, "exceptionHandlingCallStart": [1023], "exceptionHandlingCallEnd": [1040], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "file.exists()", "guardType": "IF {", "guardExpressionStart": 168, "guardExpressionEnd": 192, "guardBlockStart": 168, "guardBlockEnd": 1366, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 271, "focalAPIEnd": 302, "followUpCheck": "fis != null", "checkType": "IF", "followUpCheckExpressionStart": 1151, "followUpCheckExpressionEnd": 1175, "followUpCheckBlockStart": 1151, "followUpCheckBlockEnd": 1352, "use": ["createXMLStreamReader(fis)", "fis.close()"], "useStart": [337, 1206], "useEnd": [401, 1225], "hasFinally": 1, "cleanUpCall": ["FileInputStream.close()"], "finallyExpressionStart": 1133, "finallyExpressionEnd": 1141, "finallyBlockStart": 1133, "finallyBlockEnd": 1360, "cleanUpCallStart": [1206], "cleanUpCallEnd": [1225], "url": "https://github.com/ahgittin/stratos/tree/master/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/util/CommonUtil.java", "rawCode": "  private static String loadTermsOfUsage(String eulaFile) {\n    String eula = StratosConstants.STRATOS_EULA_DEFAULT_TEXT;\n    File configFile = new File(eulaFile);\n    if (configFile.exists()) {\n      FileInputStream inputStream = null;\n      try {\n        inputStream = new FileInputStream(configFile);\n        XMLStreamReader parser = XMLInputFactory.newInstance().createXMLStreamReader(inputStream);\n        StAXOMBuilder builder = new StAXOMBuilder(parser);\n        OMElement documentElement = builder.getDocumentElement();\n        Iterator it = documentElement.getChildElements();\n        while (it.hasNext()) {\n          OMElement element = (OMElement) it.next();\n\n          // Checks whether Email Validation is mandatory for tenant registration complete.\n          if (\"EULA\".equalsIgnoreCase(element.getLocalName())) {\n            eula = element.getText();\n          }\n        }\n        return eula;\n      } catch (Exception e) {\n        String msg = \"Error in loading Stratos Terms and Conditions File.\";\n        log.error(msg, e);\n        return eula; // returns the default text, if the file could not be loaded.\n      } finally {\n        if (inputStream != null) {\n          try {\n            inputStream.close();\n          } catch (IOException e) {\n            log.error(\"Could not close the EULA File \" + eulaFile);\n          }\n        }\n      }\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"Unable to locate the stratos EULA file. Default value will be used.\");\n    }\n    return eula; // return the default, if the file not found.\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2221, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 422, "focalAPIEnd": 450, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new POIFSFileSystem(fis)", "fis.close()"], "useStart": [519, 578], "useEnd": [547, 593], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/srnsw/xena/tree/master/plugins/email/ext/src/poi-3.2-FINAL/src/java/org/apache/poi/poifs/filesystem/POIFSFileSystem.java", "rawCode": "  /**\n   * read in a file and write it back out again\n   *\n   * @param args names of the files; arg[ 0 ] is the input file, arg[ 1 ] is the output file\n   * @exception IOException\n   */\n  public static void main(String args[]) throws IOException {\n    if (args.length != 2) {\n      System.err.println(\"two arguments required: input filename and output filename\");\n      System.exit(1);\n    }\n    FileInputStream istream = new FileInputStream(args[0]);\n    FileOutputStream ostream = new FileOutputStream(args[1]);\n\n    new POIFSFileSystem(istream).writeFilesystem(ostream);\n    istream.close();\n    ostream.close();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2222, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 765, "tryExpressionEnd": 769, "tryBlockStart": 765, "tryBlockEnd": 1229, "catchExpressionStart": 1167, "catchExpressionEnd": 1187, "catchBlockStart": 1167, "catchBlockEnd": 1229, "exceptionHandlingCallStart": [1199], "exceptionHandlingCallEnd": [1218], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "name.endsWith(\".ogg\",)", "guardType": "IF {", "guardExpressionStart": 502, "guardExpressionEnd": 537, "guardBlockStart": 502, "guardBlockEnd": 1950, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 852, "focalAPIEnd": 886, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["OggDecoder.getData(fis)", "fis.close()"], "useStart": [913, 1144], "useEnd": [933, 1155], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yellowiscool/Poly-Rallye/tree/master/src/polyrallye/ouie/utilitaires/SoundScape.java", "rawCode": "  /**\n   * Load sound data from a file into a buffer. Returns a handle that is passed to makeSoundSource()\n   * to create a sound in the environment. Multiple sound sources can be bound to one data buffer.\n   *\n   * <p>\n   *\n   * @param soundFilename name of file to load (.wav)\n   * @return numeric handle to the sound data buffer\n   */\n  public static int loadSoundData(String soundFilename) // , int\n        // soundDataBufferHandle)\n      {\n    int soundDataBufferHandle = allocateSoundData();\n    if (soundFilename.endsWith(\".ogg\")) {\n      if (haveVorbis) {\n        ByteBuffer filebuffer = getData(soundFilename);\n        AL10.alBufferData(soundDataBufferHandle, AL10.AL_FORMAT_VORBIS_EXT, filebuffer, -1);\n        filebuffer.clear();\n      } else {\n\n        try {\n          OggDecoder decoder = new OggDecoder();\n          FileInputStream fis = new FileInputStream(soundFilename);\n\n          OggData ogg = decoder.getData(fis);\n\n          AL10.alBufferData(\n              soundDataBufferHandle,\n              ogg.channels > 1 ? AL10.AL_FORMAT_STEREO16 : AL10.AL_FORMAT_MONO16,\n              ogg.data,\n              ogg.rate);\n\n          fis.close();\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }\n    } else {\n      // load wave data into buffer (manière de l'auteur mais j'y crois plus)\n      // WaveData wavefile = WaveData.create(soundFilename);\n\n      // FAIT MAISON BEURK PAS BEAU\n\n      File fin = new File(soundFilename);\n      AudioInputStream aud = null;\n\n      try {\n        aud = AudioSystem.getAudioInputStream(fin);\n      } catch (UnsupportedAudioFileException e) {\n        System.out.println(\"Format non supporte\");\n        e.printStackTrace();\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n      WaveData wavefile = WaveData.create(aud);\n\n      AL10.alBufferData(soundDataBufferHandle, wavefile.format, wavefile.data, wavefile.samplerate);\n      wavefile.dispose();\n    }\n    if ((lastError = AL10.alGetError()) != AL10.AL_NO_ERROR) {\n      exit(lastError);\n    }\n    return soundDataBufferHandle;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2223, "initialization": ["File file = new File(String)", "File file = new File(String)"], "initializationStart": [327, 457], "initializationEnd": [378, 509], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 1922, "focalAPIEnd": 1951, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new PdfReader(fis)"], "useStart": [1908], "useEnd": [1952], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lortas/Earthdawn-Character-Editor/tree/master/src/de/earthdawn/ECEPdfExporter.java", "rawCode": "  public void exportSpellcards(EDCHARACTER edCharakter, File outFile, int version)\n      throws DocumentException, IOException {\n    CharacterContainer character = new CharacterContainer(edCharakter);\n    File template = null;\n    int maxSpellPerPage = 1;\n    switch (version) {\n      case 0:\n      default:\n        template = new File(\"./templates/spellcards_portrait_2x2.pdf\");\n        maxSpellPerPage = 4;\n        break;\n      case 1:\n        template = new File(\"./templates/spellcards_landscape_2x2.pdf\");\n        maxSpellPerPage = 4;\n        break;\n    }\n    String filename = outFile.getCanonicalPath();\n    String filenameBegin = \"\";\n    String filenameEnd = \"\";\n    int dotPosition = filename.lastIndexOf('.');\n    if (dotPosition >= 0) {\n      filenameBegin = filename.substring(0, dotPosition);\n      filenameEnd = filename.substring(dotPosition);\n    } else {\n      filenameBegin = filename;\n    }\n    int counterFile = 0;\n    int counterSpells = maxSpellPerPage;\n    PdfStamper stamper = null;\n    PdfReader reader = null;\n    Map<String, SpelldescriptionType> spelldescriptions =\n        ApplicationProperties.create().getSpellDescriptions();\n\n    List<List<SPELLType>> spellslist = new ArrayList<List<SPELLType>>();\n    List<String> disciplineNames = new ArrayList<String>();\n    spellslist.add(character.getOpenSpellList());\n    disciplineNames.add(\"\");\n    for (DISCIPLINEType discipline : character.getDisciplines()) {\n      spellslist.add(discipline.getSPELL());\n      disciplineNames.add(discipline.getName());\n    }\n    int spelllistnr = 0;\n    for (List<SPELLType> spells : spellslist) {\n      Collections.sort(spells, new SpellComparator());\n      for (SPELLType spell : spells) {\n        if (counterSpells < maxSpellPerPage) {\n          counterSpells++;\n        } else {\n          if (stamper != null) stamper.close();\n          if (reader != null) reader.close();\n          reader = new PdfReader(new FileInputStream(template));\n          stamper =\n              new PdfStamper(\n                  reader,\n                  new FileOutputStream(\n                      new File(filenameBegin + String.format(\"%02d\", counterFile) + filenameEnd)));\n          acroFields = stamper.getAcroFields();\n          counterSpells = 1;\n          counterFile++;\n        }\n        acroFields.setField(\"Discipline\" + counterSpells, disciplineNames.get(spelllistnr));\n        acroFields.setField(\"Spell Name\" + counterSpells, spell.getName());\n        acroFields.setField(\"Spell Circle\" + counterSpells, String.valueOf(spell.getCircle()));\n        acroFields.setField(\"Spellcasting\" + counterSpells, spell.getCastingdifficulty());\n        acroFields.setField(\"Threads\" + counterSpells, spell.getThreads());\n        acroFields.setField(\"Weaving\" + counterSpells, spell.getWeavingdifficulty());\n        acroFields.setField(\n            \"Reattuning\" + counterSpells, String.valueOf(spell.getReattuningdifficulty()));\n        acroFields.setField(\"Range\" + counterSpells, spell.getRange());\n        acroFields.setField(\"Duration\" + counterSpells, spell.getDuration());\n        acroFields.setField(\"Effect\" + counterSpells, spell.getEffect());\n        acroFields.setField(\"Page reference\" + counterSpells, String.valueOf(spell.getBookref()));\n        acroFields.setField(\"Air\" + counterSpells, \"No\");\n        acroFields.setField(\"Earth\" + counterSpells, \"No\");\n        acroFields.setField(\"Fear\" + counterSpells, \"No\");\n        acroFields.setField(\"Fire\" + counterSpells, \"No\");\n        acroFields.setField(\"Illusion\" + counterSpells, \"No\");\n        acroFields.setField(\"Illusion N\" + counterSpells, \"Yes\");\n        acroFields.setField(\"Water\" + counterSpells, \"No\");\n        acroFields.setField(\"Wood\" + counterSpells, \"No\");\n        switch (spell.getElement()) {\n          case AIR:\n            acroFields.setField(\"Air\" + counterSpells, \"Yes\");\n            break;\n          case EARTH:\n            acroFields.setField(\"Earth\" + counterSpells, \"Yes\");\n            break;\n          case FEAR:\n            acroFields.setField(\"Fear\" + counterSpells, \"Yes\");\n            break;\n          case FIRE:\n            acroFields.setField(\"Fire\" + counterSpells, \"Yes\");\n            break;\n          case ILLUSION:\n            acroFields.setField(\"Illusion\" + counterSpells, \"Yes\");\n            acroFields.setField(\"Illusion N\" + counterSpells, \"No\");\n            break;\n          case WATER:\n            acroFields.setField(\"Water\" + counterSpells, \"Yes\");\n            break;\n          case WOOD:\n            acroFields.setField(\"Wood\" + counterSpells, \"Yes\");\n            break;\n          case UNDEFINED:\n            break;\n        }\n        SpelldescriptionType spelldescription = spelldescriptions.get(spell.getName());\n        if ((spelldescription == null) || (spelldescription.getValue() == null))\n          acroFields.setField(\"Spell description\" + counterSpells, \"\");\n        else acroFields.setField(\"Spell description\" + counterSpells, spelldescription.getValue());\n      }\n      spelllistnr++;\n    }\n    stamper.close();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2224, "initialization": ["File file = new File(File,String)"], "initializationStart": [281], "initializationEnd": [328], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 382, "focalAPIEnd": 407, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ObjectInputStream(fis)"], "useStart": [360], "useEnd": [408], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/easel/colloquoy/tree/master/Plug-Ins/SocialNetworkView/PieSpy-0/org/jibble/socnet/SocialNetworkBot.java", "rawCode": "  private Graph readGraph(String channel) {\n    Graph g = null;\n    // Try and see if the graph can be restored from file.\n    try {\n      String strippedChannel = channel.toLowerCase().substring(1);\n\n      File dir = new File(_outputDirectory, strippedChannel);\n      File file = new File(dir, strippedChannel + \"-restore.dat\");\n      ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file));\n      String version = (String) ois.readObject();\n      if (version.equals(SocialNetworkBot.VERSION)) {\n        g = (Graph) ois.readObject();\n      }\n      ois.close();\n    } catch (Exception e) {\n      // Do nothing?\n    }\n    return g;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2225, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 159, "tryExpressionEnd": 163, "tryBlockStart": 159, "tryBlockEnd": 3396, "catchExpressionStart": 3213, "catchExpressionEnd": 3245, "catchBlockStart": 3213, "catchBlockEnd": 3279, "exceptionHandlingCallStart": [3253], "exceptionHandlingCallEnd": [3272], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 276, "focalAPIEnd": 308, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new InputStreamReader(fis)"], "useStart": [254], "useEnd": [309], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kateyim/crawler/tree/master/src/main/java/mo/umac/db/H2DB.java", "rawCode": "  private void convertResultsFile(String folderPath, String h2Name) {\n    String resultsFile = folderPath + \"results\";\n    BufferedReader brResult = null;\n    try {\n      Connection conn = getConnection(dbNameSource);\n      brResult = new BufferedReader(new InputStreamReader(new FileInputStream(resultsFile)));\n      String data = null;\n      String[] split;\n      int position = 1;\n      PreparedStatement prepItem = conn.prepareStatement(sqlPrepInsertItem);\n      PreparedStatement prepCategory = conn.prepareStatement(sqlPrepInsertCategory);\n      PreparedStatement prepRelationship = conn.prepareStatement(sqlPrepInsertRelationship);\n      while ((data = brResult.readLine()) != null) {\n        try {\n          data = data.trim();\n          split = data.split(\";\");\n          int queryID = parseID(split[0]);\n          int itemID = Integer.parseInt(split[1]);\n          String title = split[2];\n          // for Dominos#39;s\n          if (title.equals(\"Dominos#39\")) {\n            title = \"Dominos#39;s\";\n            String city = split[4];\n            String state = split[5];\n            double latitude = Double.parseDouble(split[6]);\n            double longitude = Double.parseDouble(split[7]);\n            double distance = Double.parseDouble(split[8]);\n            List<Category> categories = new ArrayList<Category>();\n            for (int i = 9; i < split.length; i = i + 2) {\n              // prepare category\n              Category category = new Category(Integer.parseInt(split[i]), split[i + 1]);\n              categories.add(category);\n\n              setPrepCategory(itemID, category, prepCategory);\n              prepCategory.addBatch();\n            }\n            APOI result =\n                new APOI(\n                    itemID, title, city, state, longitude, latitude, null, distance, categories, 0);\n\n            setPrepItem(result, prepItem);\n            prepItem.addBatch();\n          } else {\n            String city = split[3];\n            String state = split[4];\n            double latitude = Double.parseDouble(split[5]);\n            double longitude = Double.parseDouble(split[6]);\n            double distance = Double.parseDouble(split[7]);\n            List<Category> categories = new ArrayList<Category>();\n            for (int i = 8; i < split.length; i = i + 2) {\n              // prepare category\n              Category category = new Category(Integer.parseInt(split[i]), split[i + 1]);\n              categories.add(category);\n\n              setPrepCategory(itemID, category, prepCategory);\n              prepCategory.addBatch();\n            }\n            APOI result =\n                new APOI(\n                    itemID, title, city, state, longitude, latitude, null, distance, categories, 0);\n            setPrepItem(result, prepItem);\n            prepItem.addBatch();\n          }\n          //\n          setPrepRelationship(itemID, queryID, position++, prepRelationship);\n          prepRelationship.addBatch();\n        } catch (Exception e) {\n          System.out.println(data);\n        }\n      }\n      // execute prepare statements...\n      prepCategory.executeBatch();\n      prepItem.executeBatch();\n      prepRelationship.executeBatch();\n\n      brResult.close();\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (SQLException e1) {\n      e1.printStackTrace();\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2226, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 2229, "focalAPIEnd": 2271, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new BufferedInputStream(fis)"], "useStart": [2205], "useEnd": [2272], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openjdk-mirror/jdk7u-corba/tree/master/src/share/classes/com/sun/tools/corba/se/idl/som/cff/FileLocator.java", "rawCode": "  /**\n   * locateClassFile returns a DataInputStream with mark/reset capability that can be used to read\n   * the requested class file. The CLASSPATH is used to locate the class.\n   *\n   * @param classFileName The name of the class to locate. The class name should be given in\n   *     fully-qualified form, for example:\n   *     <pre>\n   * java.lang.Object\n   * java.io.DataInputStream\n   * </pre>\n   *\n   * @exception java.io.FileNotFoundException The requested class file could not be found.\n   * @exception java.io.IOException The requested class file could not be opened.\n   */\n  public static DataInputStream locateClassFile(String classFileName)\n      throws FileNotFoundException, IOException {\n\n    boolean notFound = true;\n    StringTokenizer st;\n    String path = \"\";\n    String pathNameForm;\n    File cf = null;\n    NamedDataInputStream result;\n\n    st = new StringTokenizer(classPath, pathSeparator, false);\n    pathNameForm = classFileName.replace('.', File.separatorChar) + \".class\";\n\n    while (st.hasMoreTokens() && notFound) {\n\n      try {\n        path = st.nextToken();\n      } catch (NoSuchElementException nse) {\n        break;\n      }\n      int pLen = path.length();\n      String pathLast4 = pLen > 3 ? path.substring(pLen - 4) : \"\";\n      if (pathLast4.equalsIgnoreCase(\".zip\") || pathLast4.equalsIgnoreCase(\".jar\")) {\n\n        try {\n\n          result = locateInZipFile(path, classFileName, true, true);\n          if (result == null) continue;\n          return (DataInputStream) result;\n\n        } catch (ZipException zfe) {\n          continue;\n        } catch (IOException ioe) {\n          continue;\n        }\n\n      } else {\n        try {\n          cf = new File(path + File.separator + pathNameForm);\n        } catch (NullPointerException npe) {\n          continue;\n        }\n        if ((cf != null) && cf.exists()) notFound = false;\n      }\n    }\n\n    if (notFound) {\n\n      /* Make one last attempt to find the file in the current\n       * directory\n       */\n\n      int lastdot = classFileName.lastIndexOf('.');\n      String simpleName = (lastdot >= 0) ? classFileName.substring(lastdot + 1) : classFileName;\n\n      result =\n          new NamedDataInputStream(\n              new BufferedInputStream(new FileInputStream(simpleName + \".class\")),\n              simpleName + \".class\",\n              false);\n      return (DataInputStream) result;\n    }\n\n    result =\n        new NamedDataInputStream(\n            new BufferedInputStream(new FileInputStream(cf)),\n            path + File.separator + pathNameForm,\n            false);\n    return (DataInputStream) result;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2227, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 149, "tryExpressionEnd": 153, "tryBlockStart": 149, "tryBlockEnd": 496, "catchExpressionStart": 305, "catchExpressionEnd": 337, "catchBlockStart": 305, "catchBlockEnd": 371, "exceptionHandlingCallStart": [345], "exceptionHandlingCallEnd": [364], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 167, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ObjectInputStream(fis)"], "useStart": [209], "useEnd": [235], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rosedu/edss/tree/master/branches/model/src/Model/Schematic.java", "rawCode": "  public static Schematic load(String filename) {\n    Schematic scheme = null;\n    FileInputStream fis = null;\n    ObjectInputStream in = null;\n\n    try {\n      fis = new FileInputStream(filename);\n      in = new ObjectInputStream(fis);\n      scheme = (Schematic) in.readObject();\n      in.close();\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (ClassNotFoundException e) {\n      e.printStackTrace();\n    }\n\n    return scheme;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2228, "initialization": ["File file = new File(String)", "File file = new File(String)", "File file = new File(String)"], "initializationStart": [121, 353, 594], "initializationEnd": [150, 385, 629], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "file.exists()", "guardType": "IF {", "guardExpressionStart": 641, "guardExpressionEnd": 665, "guardBlockStart": 641, "guardBlockEnd": 1280, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 705, "focalAPIEnd": 736, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Properties.load(fis)", "fis.close()"], "useStart": [744, 781], "useEnd": [773, 801], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/joachimhs/Montric/tree/master/Montric.Proxy/src/main/java/org/eurekaj/proxy/app/Main.java", "rawCode": "  private void readProperties() throws IOException {\n    Properties properties = new Properties();\n    File configFile = new File(\"config.properties\");\n    if (!configFile.exists()) {\n      log.debug(\n          \"config.properties not found at : \"\n              + configFile.getAbsolutePath()\n              + \" trying one level up.\");\n      configFile = new File(\"../config.properties\");\n    }\n    if (!configFile.exists()) {\n      log.debug(\n          \"config.properties not found at : \"\n              + configFile.getAbsolutePath()\n              + \" trying one level up.\");\n      configFile = new File(\"../../config.properties\");\n    }\n    if (configFile.exists()) {\n      FileInputStream configStream = new FileInputStream(configFile);\n      properties.load(configStream);\n      configStream.close();\n      log.debug(\"Server properties loaded from \" + configFile.getAbsolutePath());\n      for (Enumeration<Object> e = properties.keys(); e.hasMoreElements(); ) {\n        Object property = (String) e.nextElement();\n        log.debug(\"\\t\\t* \" + property + \"=\" + properties.get(property));\n      }\n    } else {\n      String message = \"Could not find \" + configFile.getAbsolutePath() + \". Unable to start.\";\n      log.error(message);\n      throw new RuntimeException(message);\n    }\n\n    setProperties(properties);\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2229, "initialization": ["File file = getPropertiesFile()"], "initializationStart": [120], "initializationEnd": [139], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 174, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Properties.load(fis)"], "useStart": [217], "useEnd": [245], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ArchimedesCAD/Archimedes/tree/master/br.org.archimedes.core/src/br/org/archimedes/gui/model/Workspace.java", "rawCode": "  /** Loads workspace properties, if they can be found. */\n  private void loadProperties() {\n\n    File propertiesFile = getPropertiesFile();\n    try {\n      InputStream in = new FileInputStream(propertiesFile);\n      workspaceProperties.load(in);\n    } catch (IOException e) {\n    }\n\n    setDefaults(workspaceProperties);\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2230, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 378, "focalAPIEnd": 403, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new GZIPInputStream(fis)", "new InputStreamReader(fis,String)"], "useStart": [458, 550], "useEnd": [482, 586], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vandurme/jerboa/tree/master/src/main/java/edu/jhu/jerboa/util/FileManager.java", "rawCode": "  /**\n   * Returns a BufferedReader from the given file.\n   *\n   * <p>If filename ends in .gz suffix, will wrap the FileReader appropriately.\n   */\n  public static BufferedReader getReader(File file, String encoding) throws IOException {\n    InputStreamReader isr;\n    GZIPInputStream gs;\n\n    logger.info(\"Opening [\" + file.getCanonicalPath() + \"]\");\n    FileInputStream fis = new FileInputStream(file);\n    if (file.getName().endsWith(\".gz\")) {\n      gs = new GZIPInputStream(fis);\n      isr = new InputStreamReader(gs, encoding);\n    } else isr = new InputStreamReader(fis, encoding);\n\n    return new BufferedReader(isr);\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2231, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 153, "focalAPIEnd": 183, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new BufferedInputStream(fis)"], "useStart": [129], "useEnd": [184], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hmdev/AozoraEpub3/tree/master/src/com/github/hmdev/info/ImageInfo.java", "rawCode": "  /** ファイルから画像情報を生成 */\n  public static ImageInfo getImageInfo(File imageFile) throws IOException {\n    BufferedInputStream bis = new BufferedInputStream(new FileInputStream(imageFile));\n    ImageInfo imageInfo = ImageInfo.getImageInfo(bis, -1);\n    bis.close();\n    return imageInfo;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2232, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["Enumeration<?>.getMessage()", "println(*)", "exit(int)"], "tryExpressionStart": 2157, "tryExpressionEnd": 2161, "tryBlockStart": 2157, "tryBlockEnd": 2337, "catchExpressionStart": 2232, "catchExpressionEnd": 2254, "catchBlockStart": 2232, "catchBlockEnd": 2337, "exceptionHandlingCallStart": [2285, 2266, 2312], "exceptionHandlingCallEnd": [2299, 2300, 2326], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 2190, "focalAPIEnd": 2219, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["load(fis)"], "useStart": [2173], "useEnd": [2220], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lihaosky/shard/tree/master/simulator/client/ycsb/src/com/yahoo/ycsb/Client.java", "rawCode": "  public static void main(String[] args) {\n    String dbname;\n    Properties props = new Properties();\n    Properties fileprops = new Properties();\n    boolean dotransactions = true;\n    int threadcount = 1;\n    int target = 0;\n    boolean status = false;\n    String label = \"\";\n\n    // parse arguments\n    int argindex = 0;\n\n    if (args.length == 0) {\n      usageMessage();\n      System.exit(0);\n    }\n\n    while (args[argindex].startsWith(\"-\")) {\n      if (args[argindex].compareTo(\"-threads\") == 0) {\n        argindex++;\n        if (argindex >= args.length) {\n          usageMessage();\n          System.exit(0);\n        }\n        int tcount = Integer.parseInt(args[argindex]);\n        props.setProperty(\"threadcount\", tcount + \"\");\n        argindex++;\n      } else if (args[argindex].compareTo(\"-target\") == 0) {\n        argindex++;\n        if (argindex >= args.length) {\n          usageMessage();\n          System.exit(0);\n        }\n        int ttarget = Integer.parseInt(args[argindex]);\n        props.setProperty(\"target\", ttarget + \"\");\n        argindex++;\n      } else if (args[argindex].compareTo(\"-load\") == 0) {\n        dotransactions = false;\n        argindex++;\n      } else if (args[argindex].compareTo(\"-t\") == 0) {\n        dotransactions = true;\n        argindex++;\n      } else if (args[argindex].compareTo(\"-s\") == 0) {\n        status = true;\n        argindex++;\n      } else if (args[argindex].compareTo(\"-db\") == 0) {\n        argindex++;\n        if (argindex >= args.length) {\n          usageMessage();\n          System.exit(0);\n        }\n        props.setProperty(\"db\", args[argindex]);\n        argindex++;\n      } else if (args[argindex].compareTo(\"-l\") == 0) {\n        argindex++;\n        if (argindex >= args.length) {\n          usageMessage();\n          System.exit(0);\n        }\n        label = args[argindex];\n        argindex++;\n      } else if (args[argindex].compareTo(\"-P\") == 0) {\n        argindex++;\n        if (argindex >= args.length) {\n          usageMessage();\n          System.exit(0);\n        }\n        String propfile = args[argindex];\n        argindex++;\n\n        Properties myfileprops = new Properties();\n        try {\n          myfileprops.load(new FileInputStream(propfile));\n        } catch (IOException e) {\n          System.out.println(e.getMessage());\n          System.exit(0);\n        }\n\n        // Issue #5 - remove call to stringPropertyNames to make compilable under Java 1.5\n        for (Enumeration<?> e = myfileprops.propertyNames(); e.hasMoreElements(); ) {\n          String prop = (String) e.nextElement();\n\n          fileprops.setProperty(prop, myfileprops.getProperty(prop));\n        }\n\n      } else if (args[argindex].compareTo(\"-p\") == 0) {\n        argindex++;\n        if (argindex >= args.length) {\n          usageMessage();\n          System.exit(0);\n        }\n        int eq = args[argindex].indexOf('=');\n        if (eq < 0) {\n          usageMessage();\n          System.exit(0);\n        }\n\n        String name = args[argindex].substring(0, eq);\n        String value = args[argindex].substring(eq + 1);\n        props.put(name, value);\n        // System.out.println(\"[\"+name+\"]=[\"+value+\"]\");\n        argindex++;\n      } else {\n        System.out.println(\"Unknown option \" + args[argindex]);\n        usageMessage();\n        System.exit(0);\n      }\n\n      if (argindex >= args.length) {\n        break;\n      }\n    }\n\n    if (argindex != args.length) {\n      usageMessage();\n      System.exit(0);\n    }\n\n    // set up logging\n    // BasicConfigurator.configure();\n\n    // overwrite file properties with properties from the command line\n\n    // Issue #5 - remove call to stringPropertyNames to make compilable under Java 1.5\n    for (Enumeration<?> e = props.propertyNames(); e.hasMoreElements(); ) {\n      String prop = (String) e.nextElement();\n\n      fileprops.setProperty(prop, props.getProperty(prop));\n    }\n\n    props = fileprops;\n\n    if (!checkRequiredProperties(props)) {\n      System.exit(0);\n    }\n\n    // get number of threads, target and db\n    threadcount = Integer.parseInt(props.getProperty(\"threadcount\", \"1\"));\n    dbname = props.getProperty(\"db\", \"com.yahoo.ycsb.BasicDB\");\n    target = Integer.parseInt(props.getProperty(\"target\", \"0\"));\n\n    // compute the target throughput\n    double targetperthreadperms = -1;\n    if (target > 0) {\n      double targetperthread = ((double) target) / ((double) threadcount);\n      targetperthreadperms = targetperthread / 1000.0;\n    }\n\n    System.out.println(\"YCSB Client 0.1\");\n    System.out.print(\"Command line:\");\n    for (int i = 0; i < args.length; i++) {\n      System.out.print(\" \" + args[i]);\n    }\n    System.out.println();\n    System.err.println(\"Loading workload...\");\n\n    // show a warning message that creating the workload is taking a while\n    // but only do so if it is taking longer than 2 seconds\n    // (showing the message right away if the setup wasn't taking very long was confusing people)\n    Thread warningthread =\n        new Thread() {\n          public void run() {\n            try {\n              sleep(2000);\n            } catch (InterruptedException e) {\n              return;\n            }\n            System.err.println(\" (might take a few minutes for large data sets)\");\n          }\n        };\n\n    warningthread.start();\n\n    // set up measurements\n    Measurements.setProperties(props);\n\n    // load the workload\n    ClassLoader classLoader = Client.class.getClassLoader();\n\n    Workload workload = null;\n\n    try {\n      Class<?> workloadclass = classLoader.loadClass(props.getProperty(WORKLOAD_PROPERTY));\n\n      workload = (Workload) workloadclass.newInstance();\n    } catch (Exception e) {\n      e.printStackTrace();\n      e.printStackTrace(System.out);\n      System.exit(0);\n    }\n\n    try {\n      workload.init(props);\n    } catch (WorkloadException e) {\n      e.printStackTrace();\n      e.printStackTrace(System.out);\n      System.exit(0);\n    }\n\n    warningthread.interrupt();\n\n    // run the workload\n\n    System.err.println(\"Starting test.\");\n\n    int opcount;\n    if (dotransactions) {\n      opcount = Integer.parseInt(props.getProperty(OPERATION_COUNT_PROPERTY, \"0\"));\n    } else {\n      if (props.containsKey(INSERT_COUNT_PROPERTY)) {\n        opcount = Integer.parseInt(props.getProperty(INSERT_COUNT_PROPERTY, \"0\"));\n      } else {\n        opcount = Integer.parseInt(props.getProperty(RECORD_COUNT_PROPERTY, \"0\"));\n      }\n    }\n\n    Vector<Thread> threads = new Vector<Thread>();\n\n    for (int threadid = 0; threadid < threadcount; threadid++) {\n      DB db = null;\n      try {\n        db = DBFactory.newDB(dbname, props);\n      } catch (UnknownDBException e) {\n        System.out.println(\"Unknown DB \" + dbname);\n        System.exit(0);\n      }\n\n      Thread t =\n          new ClientThread1(\n              db,\n              dotransactions,\n              workload,\n              threadid,\n              threadcount,\n              props,\n              opcount / threadcount,\n              targetperthreadperms);\n\n      threads.add(t);\n    }\n\n    StatusThread1 statusthread = null;\n\n    if (status) {\n      boolean standardstatus = false;\n      if (props.getProperty(\"measurementtype\", \"\").compareTo(\"timeseries\") == 0) {\n        standardstatus = true;\n      }\n      statusthread = new StatusThread1(threads, label, standardstatus);\n      statusthread.start();\n    }\n\n    long st = System.currentTimeMillis();\n\n    for (Thread t : threads) {\n      t.start();\n    }\n\n    for (Thread t : threads) {\n      try {\n        t.join();\n      } catch (InterruptedException e) {\n      }\n    }\n\n    long en = System.currentTimeMillis();\n\n    if (status) {\n      statusthread.interrupt();\n    }\n\n    try {\n      workload.cleanup();\n    } catch (WorkloadException e) {\n      e.printStackTrace();\n      e.printStackTrace(System.out);\n      System.exit(0);\n    }\n\n    try {\n      exportMeasurements(props, opcount, en - st);\n    } catch (IOException e) {\n      System.err.println(\"Could not export measurements, error: \" + e.getMessage());\n      e.printStackTrace();\n      System.exit(-1);\n    }\n\n    System.exit(0);\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2233, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "error(String,String)"], "tryExpressionStart": 349, "tryExpressionEnd": 353, "tryBlockStart": 349, "tryBlockEnd": 714, "catchExpressionStart": 419, "catchExpressionEnd": 439, "catchBlockStart": 419, "catchBlockEnd": 586, "exceptionHandlingCallStart": [460, 537], "exceptionHandlingCallEnd": [474, 565], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 366, "focalAPIEnd": 391, "followUpCheck": "fis != null", "checkType": "IF", "followUpCheckExpressionStart": 603, "followUpCheckExpressionEnd": 618, "followUpCheckBlockStart": 603, "followUpCheckBlockEnd": 708, "use": ["BMPDecoder.read(fis)", "fis.close()"], "useStart": [399, 645], "useEnd": [411, 655], "hasFinally": 1, "cleanUpCall": ["FileInputStream.close()"], "finallyExpressionStart": 587, "finallyExpressionEnd": 595, "finallyBlockStart": 587, "finallyBlockEnd": 714, "cleanUpCallStart": [645], "cleanUpCallEnd": [655], "url": "https://github.com/smas036/ImageJ/tree/master/src/main/ij/plugin/BMP_Reader.java", "rawCode": "  public void run(String arg) {\n    OpenDialog od = new OpenDialog(\"Open BMP...\", arg);\n    String directory = od.getDirectory();\n    String name = od.getFileName();\n    if (name == null) return;\n    String path = directory + name;\n\n    // IJ.showStatus(\"Opening: \" + path);\n    BMPDecoder bmp = new BMPDecoder();\n    FileInputStream is = null;\n    try {\n      is = new FileInputStream(path);\n      bmp.read(is);\n    } catch (Exception e) {\n      String msg = e.getMessage();\n      if (msg == null || msg.equals(\"\")) msg = \"\" + e;\n      IJ.error(\"BMP Decoder\", msg);\n      return;\n    } finally {\n      if (is != null) {\n        try {\n          is.close();\n        } catch (IOException e) {\n        }\n      }\n    }\n\n    MemoryImageSource mis = bmp.makeImageSource();\n    if (mis == null) IJ.write(\"mis=null\");\n    Image img = Toolkit.getDefaultToolkit().createImage(mis);\n    FileInfo fi = new FileInfo();\n    fi.fileFormat = FileInfo.BMP;\n    fi.fileName = name;\n    fi.directory = directory;\n    setImage(img);\n    setTitle(name);\n    setFileInfo(fi);\n    if (bmp.topDown) getProcessor().flipVertical();\n    if (arg.equals(\"\")) show();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2234, "initialization": ["File file = new File(*,String)"], "initializationStart": [208], "initializationEnd": [261], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["e(String,String)"], "tryExpressionStart": 121, "tryExpressionEnd": 125, "tryBlockStart": 121, "tryBlockEnd": 993, "catchExpressionStart": 827, "catchExpressionEnd": 859, "catchBlockStart": 827, "catchBlockEnd": 923, "exceptionHandlingCallStart": [867], "exceptionHandlingCallEnd": [916], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 277, "focalAPIEnd": 302, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new BufferedInputStream(fis)", "fis.close()"], "useStart": [441, 808], "useEnd": [469, 819], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mevansjr/FSO/tree/master/MDF 3/Week 1/ContentService/src/com/markevansjr/fragmentapp/FileStuff.java", "rawCode": "  public static String readStringFile(Context context, String filename, Boolean external) {\n    String content = \"\";\n    try {\n      File file;\n      FileInputStream fin;\n      if (external) {\n        file = new File(context.getExternalFilesDir(null), filename);\n        fin = new FileInputStream(file);\n      } else {\n        file = new File(filename);\n        fin = context.openFileInput(filename);\n      }\n      BufferedInputStream bin = new BufferedInputStream(fin);\n      byte[] contentBytes = new byte[1024];\n      int bytesRead = 0;\n      StringBuffer contentBuffer = new StringBuffer();\n\n      while ((bytesRead = bin.read(contentBytes)) != -1) {\n        content = new String(contentBytes, 0, bytesRead);\n        contentBuffer.append(content);\n      }\n      content = contentBuffer.toString();\n      fin.close();\n    } catch (FileNotFoundException e) {\n      Log.e(\"READ ERROR\", \"FILE NOT FOUND \" + filename);\n    } catch (IOException e) {\n      Log.e(\"READ ERROR\", \"I/O ERROR\");\n    }\n    return content;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2235, "initialization": ["File file = new File(String)"], "initializationStart": [272], "initializationEnd": [283], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 299, "focalAPIEnd": 321, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["findWin(fis)"], "useStart": [291], "useEnd": [322], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lemmy/dnsjava/tree/master/tags/dnsjava-1-2-2/org/xbill/DNS/FindServer.java", "rawCode": "  /** Calls winipcfg and parses the result to find servers and a search path. */\n  private static void find95() {\n    String s = \"winipcfg.out\";\n    try {\n      Process p;\n      p = Runtime.getRuntime().exec(\"winipcfg /all /batch \" + s);\n      p.waitFor();\n      File f = new File(s);\n      findWin(new FileInputStream(f));\n      new File(s).delete();\n    } catch (Exception e) {\n      return;\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2236, "initialization": ["File file = new File(*,String)"], "initializationStart": [442], "initializationEnd": [483], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getCwd()"], "tryExpressionStart": 624, "tryExpressionEnd": 628, "tryBlockStart": 624, "tryBlockEnd": 1005, "catchExpressionStart": 773, "catchExpressionEnd": 795, "catchBlockStart": 773, "catchBlockEnd": 919, "exceptionHandlingCallStart": [859], "exceptionHandlingCallEnd": [876], "configuration": ["file.length()"], "configurationStart": [507], "configurationEnd": [517], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 642, "focalAPIEnd": 664, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new DataInputStream(fis)", "cleanupStream(fis)"], "useStart": [678, 936], "useEnd": [702, 963], "hasFinally": 1, "cleanUpCall": ["cleanupStream(FileInputStream)", "cleanupStream(DataInputStream)"], "finallyExpressionStart": 920, "finallyExpressionEnd": 928, "finallyBlockStart": 920, "finallyBlockEnd": 1005, "cleanUpCallStart": [936, 971], "cleanUpCallEnd": [963, 998], "url": "https://github.com/robo-code/robocode/tree/master/robocode.ui.editor/src/main/java/net/sf/robocode/ui/editor/RobocodeEditor.java", "rawCode": "  public void createNewJavaFile() {\n    String packageName = null;\n\n    if (getActiveWindow() != null) {\n      packageName = getActiveWindow().getPackage();\n    }\n    if (packageName == null) {\n      packageName = \"mypackage\";\n    }\n\n    EditWindow editWindow = new EditWindow(repositoryManager, this, robotsDirectory);\n\n    String templateName = \"templates\" + File.separatorChar + \"newjavafile.tpt\";\n\n    String template = \"\";\n\n    File f = new File(FileUtil.getCwd(), templateName);\n    int size = (int) (f.length());\n    byte buff[] = new byte[size];\n\n    FileInputStream fis = null;\n    DataInputStream dis = null;\n\n    try {\n      fis = new FileInputStream(f);\n      dis = new DataInputStream(fis);\n\n      dis.readFully(buff);\n      template = new String(buff);\n    } catch (IOException e) {\n      template =\n          \"Unable to read template file: \" + FileUtil.getCwd() + File.separatorChar + templateName;\n    } finally {\n      FileUtil.cleanupStream(fis);\n      FileUtil.cleanupStream(dis);\n    }\n\n    String name = \"MyClass\";\n\n    int index = template.indexOf(\"$\");\n\n    while (index >= 0) {\n      if (template.substring(index, index + 10).equals(\"$CLASSNAME\")) {\n        template = template.substring(0, index) + name + template.substring(index + 10);\n        index += name.length();\n      } else if (template.substring(index, index + 8).equals(\"$PACKAGE\")) {\n        template = template.substring(0, index) + packageName + template.substring(index + 8);\n        index += packageName.length();\n      } else {\n        index++;\n      }\n      index = template.indexOf(\"$\", index);\n    }\n\n    EditorPane editorPane = editWindow.getEditorPane();\n\n    editorPane.setText(template);\n    editorPane.setCaretPosition(0);\n\n    addPlaceShowFocus(editWindow);\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2237, "initialization": ["File file = new File(*)"], "initializationStart": [3313], "initializationEnd": [3354], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 3478, "focalAPIEnd": 3508, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new BufferedInputStream(fis)"], "useStart": [3454], "useEnd": [3509], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/SpagoBI-V4x/tree/master/SpagoBabel/src/it/eng/spagobabel/bin/DiffAllFile.java", "rawCode": "  public static void diffFile(String subPath, String fileName, String newPath) throws IOException {\n    String home = \"/home/spinelli/Scrivania\";\n\n    // Path della cartella che contiene la vecchia versione dei progetti\n    String oldPath = \"/home/spinelli/Scrivania/OldprogettiSpago\";\n\n    /*Cartella che conterrà i file presenti nella gerarchia\n     * prodotta da ExtractAllFile, ma non presenti nella versione vecchia\n     * dei programmi (oldPath)\n     */\n    String master = \"/home/spinelli/Scrivania/ToTranslate\";\n    (new File(master)).mkdir();\n\n    String path = oldPath + subPath + \"/\" + fileName;\n    int count = 0;\n    File dir = new File(path);\n    if (dir.exists()) {\n      // Controllo se i file (vecchia versione e nuova versione) sono diversi\n      try {\n        BufferedReader oldfileTemp = new BufferedReader(new FileReader(path));\n        BufferedReader newfileTemp = new BufferedReader(new FileReader(newPath + \"/\" + fileName));\n        String oldStrTemp;\n        String newStrTemp;\n        while ((newStrTemp = newfileTemp.readLine()) != null) {\n          oldStrTemp = oldfileTemp.readLine();\n\n          // Se sono diversi incremento la variabile contatore\n          if (!newStrTemp.equals(oldStrTemp)) {\n            count++;\n          }\n        }\n        oldfileTemp.close();\n        newfileTemp.close();\n\n        /*Se sono sicura che sono diversi creo il percorso nella cartella master e\n         *creo il file che contiene la differenza rispetto il file della nuova versione\n         */\n        if (count != 0) {\n          String name = CreateDir.getName(fileName);\n          String diff = master + subPath;\n          File f1 = new File(diff);\n          f1.mkdirs();\n          File fileFirst = new File(master + subPath + \"/\" + name);\n          fileFirst.createNewFile();\n\n          BufferedReader oldfile = new BufferedReader(new FileReader(path));\n          BufferedReader newfile = new BufferedReader(new FileReader(newPath + \"/\" + fileName));\n          BufferedWriter outfile =\n              new BufferedWriter(new FileWriter(master + subPath + \"/\" + name));\n          String oldStr;\n          String newStr;\n          while ((newStr = newfile.readLine()) != null) {\n            oldStr = oldfile.readLine();\n            if (!newStr.equals(oldStr)) {\n              count++;\n              try {\n                // Scrivo il nuovo file\n                outfile.write(newStr);\n                outfile.write(\"\\n\");\n\n              } catch (IOException e) {\n              }\n            }\n          }\n          oldfile.close();\n          newfile.close();\n          outfile.close();\n\n          if (count == 0) {\n            File file = new File(master + subPath + \"/\" + name);\n            file.delete();\n          }\n        }\n\n        File allDir = new File(master + subPath);\n        allDir.delete();\n\n      } catch (IOException e) {\n        // Exceptions ignored.\n      }\n      File MastDir = new File(master);\n      String[] lista = MastDir.list();\n      for (int j = 0; j < lista.length; j++) {\n        File temp = new File(master + \"/\" + lista[j]);\n        temp.delete();\n      }\n    } else {\n      // Viene eseguito nel caso in cui il file è presente solo nella nuova versione\n      String diff = master + subPath;\n      File f1 = new File(diff);\n      f1.mkdirs();\n      File inputFile = new File(home + subPath + \"/\" + fileName);\n      File outputFile = new File(diff + \"/\" + fileName);\n      InputStream finput;\n      finput = new BufferedInputStream(new FileInputStream(inputFile));\n      OutputStream foutput;\n      foutput = new BufferedOutputStream(new FileOutputStream(outputFile));\n      byte[] buffer = new byte[1024 * 500];\n      int bytes_letti = 0;\n      while ((bytes_letti = finput.read(buffer)) > 0) foutput.write(buffer, 0, bytes_letti);\n      finput.close();\n      foutput.close();\n    }\n    File allDir = new File(master + subPath);\n    allDir.delete();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2238, "initialization": ["File file = new File(String)"], "initializationStart": [934], "initializationEnd": [963], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getAbsolutePath()", "Log.info(String)"], "tryExpressionStart": 1068, "tryExpressionEnd": 1072, "tryBlockStart": 1068, "tryBlockEnd": 1976, "catchExpressionStart": 1657, "catchExpressionEnd": 1679, "catchBlockStart": 1657, "catchBlockEnd": 1784, "exceptionHandlingCallStart": [1735, 1691], "exceptionHandlingCallEnd": [1772, 1773], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "file.exists()", "guardType": "IF {", "guardExpressionStart": 971, "guardExpressionEnd": 1004, "guardBlockStart": 971, "guardBlockEnd": 1984, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 1107, "focalAPIEnd": 1147, "followUpCheck": "fis != null", "checkType": "IF", "followUpCheckExpressionStart": 1805, "followUpCheckExpressionEnd": 1838, "followUpCheckBlockStart": 1805, "followUpCheckBlockEnd": 1966, "use": ["Properties.load(fis)", "fis.close()", "fis.close()"], "useStart": [1216, 1270, 1873], "useEnd": [1258, 1298, 1901], "hasFinally": 1, "cleanUpCall": ["FileInputStream.close()"], "finallyExpressionStart": 1785, "finallyExpressionEnd": 1793, "finallyBlockStart": 1785, "finallyBlockEnd": 1976, "cleanUpCallStart": [1270], "cleanUpCallEnd": [1298], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.2.0-rc06/kernel-util/src/main/java/org/sakaiproject/util/conversion/UpgradeSchema.java", "rawCode": "  /**\n   * Make it easy to target the local database. Data source properties are searched in the following\n   * order, with the first match winning:\n   *\n   * <ul>\n   *   <li>A Java system property named \"sakai.properties\" which will be used to load a properties\n   *       file containing property names such as \"url@javax.sql.BaseDataSource\".\n   *   <li>Input configProperties named \"dbDriver\", \"dbURL\", \"dbUser\", and \"dbPass\".\n   * </ul>\n   *\n   * (Side note: this configuration logic would be easy to externalize with Spring.)\n   *\n   * @param configProperties\n   */\n  private DriverAdapterCPDS getDataSource(Properties configProperties)\n      throws ClassNotFoundException {\n    String dbDriver = null;\n    String dbUrl = null;\n    String dbUser = null;\n    String dbPassword = null;\n    String sakaiPropertiesPath = System.getProperty(\"sakai.properties\");\n    if (sakaiPropertiesPath != null) {\n      File sakaiPropertiesFile = new File(sakaiPropertiesPath);\n      if (sakaiPropertiesFile.exists()) {\n        FileInputStream sakaiPropertiesInput = null;\n        try {\n          sakaiPropertiesInput = new FileInputStream(sakaiPropertiesFile);\n          Properties sakaiProperties = new Properties();\n          sakaiProperties.load(sakaiPropertiesInput);\n          sakaiPropertiesInput.close();\n          dbDriver = sakaiProperties.getProperty(\"driverClassName@javax.sql.BaseDataSource\");\n          dbUrl = sakaiProperties.getProperty(\"url@javax.sql.BaseDataSource\");\n          dbUser = sakaiProperties.getProperty(\"username@javax.sql.BaseDataSource\");\n          dbPassword = sakaiProperties.getProperty(\"password@javax.sql.BaseDataSource\");\n        } catch (IOException e) {\n          log.info(\"Error loading properties from \" + sakaiPropertiesFile.getAbsolutePath());\n        } finally {\n          if (sakaiPropertiesInput != null) {\n            try {\n              sakaiPropertiesInput.close();\n            } catch (IOException e) {\n            }\n          }\n        }\n      }\n    }\n    if (dbDriver == null) dbDriver = configProperties.getProperty(\"dbDriver\");\n    if (dbUrl == null) dbUrl = configProperties.getProperty(\"dbURL\");\n    if (dbUser == null) dbUser = configProperties.getProperty(\"dbUser\");\n    if (dbPassword == null) dbPassword = configProperties.getProperty(\"dbPass\");\n\n    DriverAdapterCPDS cpds = new DriverAdapterCPDS();\n    try {\n      cpds.setDriver(dbDriver);\n    } catch (ClassNotFoundException e) {\n      throw new ClassNotFoundException();\n    }\n    cpds.setUrl(dbUrl);\n    cpds.setUser(dbUser);\n    cpds.setPassword(dbPassword);\n    return cpds;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2239, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["println(String)"], "tryExpressionStart": 246, "tryExpressionEnd": 250, "tryBlockStart": 246, "tryBlockEnd": 657, "catchExpressionStart": 439, "catchExpressionEnd": 463, "catchBlockStart": 439, "catchBlockEnd": 541, "exceptionHandlingCallStart": [473], "exceptionHandlingCallEnd": [532], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 265, "focalAPIEnd": 293, "followUpCheck": "fis != null", "checkType": "IF", "followUpCheckExpressionStart": 576, "followUpCheckExpressionEnd": 591, "followUpCheckBlockStart": 576, "followUpCheckBlockEnd": 603, "use": ["new MetaInfo(fis)", "fis.close()"], "useStart": [319, 592], "useEnd": [335, 602], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 542, "finallyExpressionEnd": 550, "finallyBlockStart": 542, "finallyBlockEnd": 657, "cleanUpCallStart": [592], "cleanUpCallEnd": [602], "url": "https://github.com/i2p/i2p.i2p/tree/master/apps/i2psnark/java/src/org/klomp/snark/MetaInfo.java", "rawCode": "  /** @since 0.8.5 */\n  public static void main(String[] args) {\n    if (args.length <= 0) {\n      System.err.println(\"Usage: MetaInfo files...\");\n      return;\n    }\n    for (int i = 0; i < args.length; i++) {\n      InputStream in = null;\n      try {\n        in = new FileInputStream(args[i]);\n        MetaInfo meta = new MetaInfo(in);\n        System.out.println(args[i] + \" InfoHash: \" + I2PSnarkUtil.toHex(meta.getInfoHash()));\n      } catch (IOException ioe) {\n        System.err.println(\"Error in file \" + args[i] + \": \" + ioe);\n      } finally {\n        try {\n          if (in != null) in.close();\n        } catch (IOException ioe) {\n        }\n      }\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2240, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["new VdcException(*)"], "tryExpressionStart": 56, "tryExpressionEnd": 60, "tryBlockStart": 56, "tryBlockEnd": 365, "catchExpressionStart": 293, "catchExpressionEnd": 325, "catchBlockStart": 293, "catchBlockEnd": 365, "exceptionHandlingCallStart": [339], "exceptionHandlingCallEnd": [358], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 234, "focalAPIEnd": 259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Dhandapani/gluster-ovirt/tree/master/backend/manager/modules/utils/src/main/java/org/ovirt/engine/core/utils/FileUtil.java", "rawCode": "  public static InputStream findFile(String name) {\n    try {\n      InputStream fis = FileUtil.class.getClassLoader().getResourceAsStream(name);\n      // If this is null, look on the file system\n      if (fis == null) {\n        fis = new FileInputStream(name);\n      }\n      return fis;\n    } catch (FileNotFoundException e) {\n      throw new VdcException(e);\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2241, "initialization": ["File file = new File(*)"], "initializationStart": [232], "initializationEnd": [269], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 360, "focalAPIEnd": 385, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new BufferedInputStream(fis)"], "useStart": [336], "useEnd": [386], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/atgreen/moxiedev/tree/master/gcc/libjava/classpath/gnu/java/net/protocol/file/Connection.java", "rawCode": "  /** \"Connects\" to the file by opening it. */\n  public void connect() throws IOException {\n    // Call is ignored if already connected.\n    if (connected) return;\n\n    // If not connected, then file needs to be openned.\n    file = new File(unquote(getURL().getFile()));\n\n    if (!file.isDirectory()) {\n      if (doInput) inputStream = new BufferedInputStream(new FileInputStream(file));\n\n      if (doOutput) outputStream = new BufferedOutputStream(new FileOutputStream(file));\n    } else {\n      if (doInput) {\n        inputStream = new ByteArrayInputStream(getDirectoryListing());\n      }\n\n      if (doOutput)\n        throw new ProtocolException(\"file: protocol does not support output on directories\");\n    }\n\n    connected = true;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2242, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 86, "focalAPIEnd": 115, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Properties.load(fis)"], "useStart": [121], "useEnd": [134], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bloodysnowx/ProgramContest/tree/master/java/FileProperties/src/FileProperties.java", "rawCode": "  @Override\n  public void readFromFile(String filename) throws IOException {\n    in = new FileInputStream(filename);\n    prop.load(in);\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2243, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 497, "focalAPIEnd": 870, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["load(fis)"], "useStart": [478], "useEnd": [871], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/commons/tree/master/qa/web-test-framework/GaaS/src/test/java/org/wso2/carbon/web/test/GaaS/BrowserInitializer.java", "rawCode": "  public static synchronized void initProperty() throws Exception {\n    if (property == null) {\n      Properties p1 = new Properties();\n      System.out.println(\n          \"..\"\n              + File.separator\n              + \"commons\"\n              + File.separator\n              + \"src\"\n              + File.separator\n              + \"test\"\n              + File.separator\n              + \"resources\"\n              + File.separator\n              + \"framework.properties\");\n      p1.load(\n          new FileInputStream(\n              \"..\"\n                  + File.separator\n                  + \"commons\"\n                  + File.separator\n                  + \"src\"\n                  + File.separator\n                  + \"test\"\n                  + File.separator\n                  + \"resources\"\n                  + File.separator\n                  + \"framework.properties\"));\n      setProperty(p1);\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2244, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 76, "focalAPIEnd": 112, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fis.close()"], "useStart": [355], "useEnd": [366], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TihiyTi/HeartLive/tree/master/CommunicationFile/src/test/java/com/tihiy/comm/parse/FreeTest.java", "rawCode": "  @Test\n  public void testRead() throws IOException {\n    FileChannel fci = new FileInputStream(\"test_out3.txt\").getChannel();\n    ByteBuffer bb = ByteBuffer.allocate(10);\n    int read;\n    while ((read = fci.read(bb)) != -1) {\n      byte[] ar = bb.array();\n      for (byte b : ar) {\n        System.out.print(\" \" + b);\n      }\n      bb.clear();\n    }\n    fci.close();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2245, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 171, "tryExpressionEnd": 175, "tryBlockStart": 171, "tryBlockEnd": 1515, "catchExpressionStart": 1461, "catchExpressionEnd": 1481, "catchBlockStart": 1461, "catchBlockEnd": 1515, "exceptionHandlingCallStart": [1489], "exceptionHandlingCallEnd": [1508], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 232, "focalAPIEnd": 263, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["extractZipResource(fis,File,boolean)"], "useStart": [205], "useEnd": [276], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chr15m/PdDroidParty/tree/master/src/cx/mccormick/pddroidparty/PatchSelector.java", "rawCode": "  private void getLatestVersion() {\n    // TODO Auto-generated method stub\n    File temp = new File(Environment.getExternalStorageDirectory().toString() + \"/pdTemp\");\n    try {\n      List<File> listMain = IoUtils.extractZipResource(new FileInputStream(pdzZipPath), temp, true);\n      if (listMain.size() != 0) {\n        for (File f : listMain) {\n          if (f.isDirectory()) folderName = f.getName();\n          if (f.getAbsolutePath().toLowerCase().contains(\"droidparty_main.pd\")) {\n            foundmainPd = true;\n            dpMainfileName = f.getName();\n            InputStream is = new FileInputStream(f);\n            BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n            String line;\n            while ((line = reader.readLine()) != null) {\n              String version;\n              if (line.contains(\" version: \")) {\n                Log.d(\"LatestVersionLine\", line);\n                version = line.substring(line.lastIndexOf(\":\") + 1, line.length() - 1);\n                this.latestVersion = Float.parseFloat(version);\n                break;\n              } else {\n                version = \"0\";\n                this.latestVersion = Float.parseFloat(version);\n              }\n            }\n            reader.close();\n            Log.d(\"LatestVersion\", latestVersion + \"\");\n            break;\n          }\n        }\n        if (!foundmainPd) {\n          closePd();\n        }\n      } else {\n        closePd();\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2246, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new RuntimeException(String,*)"], "tryExpressionStart": 754, "tryExpressionEnd": 758, "tryBlockStart": 754, "tryBlockEnd": 1176, "catchExpressionStart": 1080, "catchExpressionEnd": 1103, "catchBlockStart": 1080, "catchBlockEnd": 1176, "exceptionHandlingCallStart": [1117], "exceptionHandlingCallEnd": [1169], "configuration": ["file.length()"], "configurationStart": [562], "configurationEnd": [575], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 787, "focalAPIEnd": 812, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fis.read(byte[],int,int)", "fis.close()"], "useStart": [877, 1062], "useEnd": [904, 1072], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tools/dx-tests/src/dxconvext/util/FileUtils.java", "rawCode": "  /**\n   * Reads the given file, translating {@link IOException} to a {@link RuntimeException} of some\n   * sort.\n   *\n   * @param file non-null; the file to read\n   * @return non-null; contents of the file\n   */\n  public static byte[] readFile(File file) {\n    if (!file.exists()) {\n      throw new RuntimeException(file + \": file not found\");\n    }\n\n    if (!file.isFile()) {\n      throw new RuntimeException(file + \": not a file\");\n    }\n\n    if (!file.canRead()) {\n      throw new RuntimeException(file + \": file not readable\");\n    }\n\n    long longLength = file.length();\n    int length = (int) longLength;\n    if (length != longLength) {\n      throw new RuntimeException(file + \": file too long\");\n    }\n\n    byte[] result = new byte[length];\n\n    try {\n      FileInputStream in = new FileInputStream(file);\n      int at = 0;\n      while (length > 0) {\n        int amt = in.read(result, at, length);\n        if (amt == -1) {\n          throw new RuntimeException(file + \": unexpected EOF\");\n        }\n        at += amt;\n        length -= amt;\n      }\n      in.close();\n    } catch (IOException ex) {\n      throw new RuntimeException(file + \": trouble reading\", ex);\n    }\n\n    return result;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2247, "initialization": ["File file = new File(*)", "File file = new File(*)"], "initializationStart": [478, 550], "initializationEnd": [501, 562], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "file!=null", "guardType": "IF {", "guardExpressionStart": 652, "guardExpressionEnd": 666, "guardBlockStart": 652, "guardBlockEnd": 1933, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 774, "focalAPIEnd": 796, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Properties.load(fis)", "release(fis)"], "useStart": [808, 857], "useEnd": [825, 881], "hasFinally": 1, "cleanUpCall": ["release(InputStream)"], "finallyExpressionStart": 837, "finallyExpressionEnd": 845, "finallyBlockStart": 837, "finallyBlockEnd": 914, "cleanUpCallStart": [857], "cleanUpCallEnd": [881], "url": "https://github.com/fbierhaus/hackathon/tree/master/common/src/com/vzw/util/config/AbstractProperties.java", "rawCode": "  /**\n   * Recursive method call\n   *\n   * @param cl\n   * @param searchRealPath\n   * @param fileNames\n   * @throws Exception\n   */\n  private Properties _load(\n      boolean buildFileInfos, ClassLoader cl, boolean searchRealPath, String... fileNames)\n      throws Exception {\n\n    Properties propRet = new Properties();\n    InputStream fis = null;\n\n    for (String fn : fileNames) {\n      URL url = cl.getResource(fn);\n\n      File f = null;\n\n      if (url != null) {\n        f = new File(url.getFile());\n      } else if (searchRealPath) {\n        f = new File(fn);\n        if (!(f.exists() && f.isFile())) {\n          f = null;\n        }\n      }\n\n      if (f != null) {\n        // we found a file\n        Properties propCur = new Properties();\n\n        try {\n          fis = new FileInputStream(f);\n          propCur.load(fis);\n        } finally {\n          CleanupUtil.release(fis);\n          fis = null;\n        }\n\n        if (buildFileInfos) {\n          if (fileInfos == null) {\n            fileInfos = new ArrayList<FileInfo>();\n          }\n          FileInfo fi = new FileInfo(f);\n          fi.setLastModified(f.lastModified());\n          fileInfos.add(fi);\n        }\n\n        //\n        // check imports\n        //\n        boolean srp;\n        String srpStr = propCur.getProperty(\"import.search_real_path\");\n        srp = StringUtils.equalsIgnoreCase(srpStr, \"true\");\n\n        String[] files = null;\n        String flStr = propCur.getProperty(\"import.files\");\n        if (flStr != null) {\n          files = flStr.split(\"\\\\s*,\\\\s*\");\n        }\n\n        if (!CollectionUtil.isEmpty(files)) {\n          Properties propImport = _load(buildFileInfos, cl, srp, files);\n          // once done,\n          propRet.putAll(propImport);\n        }\n\n        propRet.putAll(propCur);\n\n        //\n        // now check sub dir\n        //\n        checkIncludeHome(propRet, f);\n        // once done, the include_home_subdir will be removed\n      }\n    }\n\n    return propRet;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2248, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getAbsolutePath()", "new XMLDBException(*,String,*)"], "tryExpressionStart": 355, "tryExpressionEnd": 359, "tryBlockStart": 355, "tryBlockEnd": 1029, "catchExpressionStart": 824, "catchExpressionEnd": 846, "catchBlockStart": 824, "catchBlockEnd": 1029, "exceptionHandlingCallStart": [982, 862], "exceptionHandlingCallEnd": [1004, 1020], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(!(file.canRead())) && file!=null", "guardType": "IF {", "guardExpressionStart": 143, "guardExpressionEnd": 160, "guardBlockStart": 143, "guardBlockEnd": 1193, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 511, "focalAPIEnd": 536, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fis.read(byte[])", "fis.close()"], "useStart": [580, 676], "useEnd": [594, 686], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cadsr-cgmdr/tree/master/src/org/exist/xmldb/RemoteXMLResource.java", "rawCode": "  /**\n   * Force content to be loaded into mem\n   *\n   * @throws XMLDBException\n   */\n  protected byte[] getData() throws XMLDBException {\n    if (file != null) {\n      if (!file.canRead())\n        throw new XMLDBException(\n            ErrorCodes.INVALID_RESOURCE,\n            \"failed to read resource content from file \" + file.getAbsolutePath());\n      try {\n        final byte[] chunk = new byte[512];\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final FileInputStream in = new FileInputStream(file);\n        int l;\n        do {\n          l = in.read(chunk);\n          if (l > 0) out.write(chunk, 0, l);\n\n        } while (l > -1);\n        in.close();\n        final byte[] data = out.toByteArray();\n        // content = new String(data);\n        file = null;\n        return data;\n      } catch (IOException e) {\n        throw new XMLDBException(\n            ErrorCodes.INVALID_RESOURCE,\n            \"failed to read resource content from file \" + file.getAbsolutePath(),\n            e);\n      }\n    } else if (content != null)\n      try {\n        return content.getBytes(\"UTF-8\");\n      } catch (UnsupportedEncodingException e) {\n        LOG.warn(e);\n      }\n    return null;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2249, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 98, "focalAPIEnd": 123, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["readBytesAndClose(fis,int)"], "useStart": [72], "useEnd": [127], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/H2-Mirror/tree/master/h2/src/tools/org/h2/build/indexer/Indexer.java", "rawCode": "  private void readPage(File file) throws Exception {\n    byte[] data = IOUtils.readBytesAndClose(new FileInputStream(file), 0);\n    String text = new String(data, \"UTF-8\");\n    StringTokenizer t = new StringTokenizer(text, \"<> \\r\\n\", true);\n    boolean inTag = false;\n    title = false;\n    heading = false;\n    while (t.hasMoreTokens()) {\n      String token = t.nextToken();\n      if (token.length() == 1) {\n        char c = token.charAt(0);\n        switch (c) {\n          case '<':\n            {\n              if (inTag) {\n                process(\"???\");\n              }\n              inTag = true;\n              if (!t.hasMoreTokens()) {\n                break;\n              }\n              token = t.nextToken();\n              if (token.startsWith(\"/\")) {\n                title = false;\n                heading = false;\n              } else if (token.equalsIgnoreCase(\"title\")) {\n                title = true;\n              } else if (token.length() == 2\n                  && Character.toLowerCase(token.charAt(0)) == 'h'\n                  && Character.isDigit(token.charAt(1))) {\n                heading = true;\n              }\n              // TODO maybe skip script tags?\n              break;\n            }\n          case '>':\n            {\n              if (!inTag) {\n                process(\"???\");\n              }\n              inTag = false;\n              break;\n            }\n          case '\\r':\n          case '\\n':\n          case ' ':\n            break;\n          default:\n            if (!inTag) {\n              process(token);\n            }\n        }\n      } else {\n        if (!inTag) {\n          process(token);\n        }\n      }\n    }\n\n    if (page.title == null || page.title.trim().length() == 0) {\n      System.out.println(\"Error: not title found in \" + file.getName());\n      page.title = file.getName();\n    }\n    page.title = page.title.trim();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2250, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": [], "tryExpressionStart": 144, "tryExpressionEnd": 148, "tryBlockStart": 144, "tryBlockEnd": 401, "catchExpressionStart": 255, "catchExpressionEnd": 277, "catchBlockStart": 255, "catchBlockEnd": 323, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 166, "focalAPIEnd": 195, "followUpCheck": "fis != null", "checkType": "IF", "followUpCheckExpressionStart": 340, "followUpCheckExpressionEnd": 360, "followUpCheckBlockStart": 340, "followUpCheckBlockEnd": 395, "use": ["FTPClient.storeFile(String,fis)", "fis.close()"], "useStart": [210, 371], "useEnd": [247, 386], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 324, "finallyExpressionEnd": 332, "finallyBlockStart": 324, "finallyBlockEnd": 401, "cleanUpCallStart": [371], "cleanUpCallEnd": [386], "url": "https://github.com/wf1768/archive/tree/master/src/java/com/yapu/system/util/FtpUtil.java", "rawCode": "  public boolean uploadFile(String fileName, String newName) throws IOException {\n    boolean flag = false;\n    InputStream iStream = null;\n    try {\n      iStream = new FileInputStream(fileName);\n      flag = ftpClient.storeFile(newName, iStream);\n    } catch (IOException e) {\n      flag = false;\n      return flag;\n    } finally {\n      if (iStream != null) {\n        iStream.close();\n      }\n    }\n    return flag;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2251, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 207, "focalAPIEnd": 235, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fis.skip(int)", "verifyData(fis,int,*)", "fis.read()"], "useStart": [243, 270, 345], "useEnd": [262, 320, 355], "hasFinally": 1, "cleanUpCall": ["closeQuietly(*)"], "finallyExpressionStart": 426, "finallyExpressionEnd": 434, "finallyBlockStart": 426, "finallyBlockEnd": 478, "cleanUpCallStart": [442], "cleanUpCallEnd": [471], "url": "https://github.com/TaintDroid/android_platform_libcore/tree/master/luni/src/test/java/libcore/java/io/FileInputStreamTest.java", "rawCode": "  public void testSkipInPipes() throws Exception {\n    FileDescriptor[] pipe = Libcore.os.pipe();\n    DataFeeder feeder = new DataFeeder(pipe[1]);\n    try {\n      feeder.start();\n      FileInputStream fis = new FileInputStream(pipe[0]);\n      fis.skip(SKIP_SIZE);\n      verifyData(fis, SKIP_SIZE, TOTAL_SIZE - SKIP_SIZE);\n      assertEquals(-1, fis.read());\n      feeder.join(1000);\n      assertFalse(feeder.isAlive());\n    } finally {\n      IoUtils.closeQuietly(pipe[0]);\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2252, "initialization": ["File file = hashedCacheFile(String,String)"], "initializationStart": [180], "initializationEnd": [223], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 310, "focalAPIEnd": 335, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Properties.load(fis)", "fis.close()"], "useStart": [341, 1197], "useEnd": [373, 1220], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chartsy/chartsy/tree/master/Chartsy/Main/src/org/chartsy/main/managers/CacheManager.java", "rawCode": "  public Dataset fetchVisibleDatasetFromCache(String fileName, int period, int end)\n      throws IOException {\n    String folder = FileUtils.cacheDatasetsFolder();\n    File file = FileUtils.hashedCacheFile(folder, fileName);\n\n    Properties properties = new Properties();\n    FileInputStream fileInputStream = new FileInputStream(file);\n    properties.load(fileInputStream);\n\n    List<DataItem> items = new ArrayList<DataItem>();\n    int size = properties.size();\n    for (int i = 0; i < period; i++) {\n      int j = end - period + i;\n      if (j < size && j >= 0) {\n        String key = Integer.toString(j);\n        String property = properties.getProperty(key);\n        if (property.equals(\"null\")) {\n          items.add(null);\n        } else {\n          String[] values = property.split(\",\");\n          DataItem item =\n              new DataItem(\n                  Long.parseLong(values[0]),\n                  Double.parseDouble(values[1]),\n                  Double.parseDouble(values[2]),\n                  Double.parseDouble(values[3]),\n                  Double.parseDouble(values[4]),\n                  Double.parseDouble(values[5]));\n          items.add(item);\n        }\n      }\n    }\n\n    fileInputStream.close();\n    Dataset dataset = new Dataset(items);\n    return dataset;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2253, "initialization": ["File file = new File(*,String)"], "initializationStart": [418], "initializationEnd": [493], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 838, "focalAPIEnd": 863, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["loadBytes(fis)"], "useStart": [825], "useEnd": [864], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gmfawcett/openmark-mvn/tree/master/tags/v1.13/trunk-archive/src/om/devservlet/DevServlet.java", "rawCode": "  private void handleQuestion(\n      String idVersion, HttpServletRequest request, HttpServletResponse response) throws Exception {\n    Matcher m = QUESTIONID_REGEXP.matcher(idVersion);\n    if (!m.matches()) {\n      sendError(\n          request,\n          response,\n          HttpServletResponse.SC_NOT_FOUND,\n          \"Not found\",\n          \"Not a valid question id-version.\",\n          null);\n    }\n    File file = new File(getServletContext().getRealPath(\"questions\"), m.group(1) + \".jar\");\n\n    // Check that the requested file exits.\n    if (!file.exists()) {\n      sendError(\n          request,\n          response,\n          HttpServletResponse.SC_NOT_FOUND,\n          \"Not found\",\n          \"The requested question is not present on this server.\",\n          null);\n    }\n\n    // Then send it.\n    byte[] abQuestion = IO.loadBytes(new FileInputStream(file));\n    response.setContentType(\"application/x-openmark\");\n    response.setContentLength(abQuestion.length);\n    OutputStream os = response.getOutputStream();\n    os.write(abQuestion);\n    os.close();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2254, "initialization": ["File file = new File(String)"], "initializationStart": [107], "initializationEnd": [129], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": [], "tryExpressionStart": 1713, "tryExpressionEnd": 1717, "tryBlockStart": 1713, "tryBlockEnd": 2188, "catchExpressionStart": 2045, "catchExpressionEnd": 2067, "catchBlockStart": 2045, "catchBlockEnd": 2079, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.getName()"], "configurationStart": [573], "configurationEnd": [591], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 1732, "focalAPIEnd": 1761, "followUpCheck": "fis != null", "checkType": "IF", "followUpCheckExpressionStart": 1979, "followUpCheckExpressionEnd": 1996, "followUpCheckBlockStart": 1979, "followUpCheckBlockEnd": 2079, "use": ["fis.close()"], "useStart": [2021], "useEnd": [2033], "hasFinally": 1, "cleanUpCall": ["FileInputStream.close()"], "finallyExpressionStart": 1963, "finallyExpressionEnd": 1971, "finallyBlockStart": 1963, "finallyBlockEnd": 2188, "cleanUpCallStart": [2021], "cleanUpCallEnd": [2033], "url": "https://github.com/derekqian/coDoc/tree/master/edu.pdx.svl.coDoc.cdc/src/edu/pdx/svl/coDoc/cdc/FileCopy.java", "rawCode": "  public static void copy(String fromFileName, String toFileName) throws IOException {\n    File fromFile = new File(fromFileName);\n    File toFile = new File(toFileName);\n\n    if (!fromFile.exists())\n      throw new IOException(\"FileCopy: \" + \"no such source file: \" + fromFileName);\n    if (!fromFile.isFile())\n      throw new IOException(\"FileCopy: \" + \"can't copy directory: \" + fromFileName);\n    if (!fromFile.canRead())\n      throw new IOException(\"FileCopy: \" + \"source file is unreadable: \" + fromFileName);\n\n    if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n\n    if (toFile.exists()) {\n      if (!toFile.canWrite())\n        throw new IOException(\"FileCopy: \" + \"destination file is unwriteable: \" + toFileName);\n      System.out.print(\"Overwrite existing file \" + toFile.getName() + \"? (Y/N): \");\n      System.out.flush();\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      String response = in.readLine();\n      if (!response.equals(\"Y\") && !response.equals(\"y\"))\n        throw new IOException(\"FileCopy: \" + \"existing file was not overwritten.\");\n    } else {\n      String parent = toFile.getParent();\n      if (parent == null) parent = System.getProperty(\"user.dir\");\n      File dir = new File(parent);\n      if (!dir.exists())\n        throw new IOException(\"FileCopy: \" + \"destination directory doesn't exist: \" + parent);\n      if (dir.isFile())\n        throw new IOException(\"FileCopy: \" + \"destination is not a directory: \" + parent);\n      if (!dir.canWrite())\n        throw new IOException(\"FileCopy: \" + \"destination directory is unwriteable: \" + parent);\n    }\n\n    FileInputStream from = null;\n    FileOutputStream to = null;\n    try {\n      from = new FileInputStream(fromFile);\n      to = new FileOutputStream(toFile);\n      byte[] buffer = new byte[4096];\n      int bytesRead;\n\n      while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead); // write\n    } finally {\n      if (from != null)\n        try {\n          from.close();\n        } catch (IOException e) {;\n        }\n      if (to != null)\n        try {\n          to.close();\n        } catch (IOException e) {;\n        }\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2255, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 158, "tryExpressionEnd": 162, "tryBlockStart": 158, "tryBlockEnd": 529, "catchExpressionStart": 471, "catchExpressionEnd": 491, "catchBlockStart": 471, "catchBlockEnd": 529, "exceptionHandlingCallStart": [501], "exceptionHandlingCallEnd": [520], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "file.exists()", "guardType": "IF {", "guardExpressionStart": 131, "guardExpressionEnd": 149, "guardBlockStart": 131, "guardBlockEnd": 535, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 194, "focalAPIEnd": 219, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ObjectInputStream(fis)", "fis.close()"], "useStart": [253, 450], "useEnd": [279, 461], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/moumar/beads/tree/master/src/beads_main/net/beadsproject/beads/analysis/FeatureSet.java", "rawCode": "  /** Reads data from given file. Assumes file ref already exists. */\n  @SuppressWarnings(\"unchecked\")\n  private void read() {\n    if (file.exists()) {\n      try {\n        FileInputStream fis = new FileInputStream(file);\n        ObjectInputStream ois = new ObjectInputStream(fis);\n        tracks = (Hashtable<String, FeatureTrack>) ois.readObject();\n        globalFeatures = (Hashtable<String, Object>) ois.readObject();\n        ois.close();\n        fis.close();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2256, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["println(String)", "printStackTrace(*)"], "tryExpressionStart": 264, "tryExpressionEnd": 268, "tryBlockStart": 264, "tryBlockEnd": 2156, "catchExpressionStart": 1871, "catchExpressionEnd": 1893, "catchBlockStart": 1871, "catchBlockEnd": 2037, "exceptionHandlingCallStart": [1901, 1993], "exceptionHandlingCallEnd": [1964, 2022], "configuration": ["file.length()"], "configurationStart": [54], "configurationEnd": [67], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 446, "focalAPIEnd": 471, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new InputStreamReader(fis,String)"], "useStart": [502], "useEnd": [544], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/srnsw/xena/tree/master/plugins/email/ext/src/inetlib-1.1.1/source/gnu/inet/nntp/FileNewsrc.java", "rawCode": "  /** Load the file. */\n  void load() {\n    long fs = file.length();\n    long max = (long) Integer.MAX_VALUE;\n    int bs = (int) (fs > max ? max : fs);\n\n    groups = new LinkedList();\n    lines = new HashMap(bs / 20);\n    subs = new LinkedList();\n\n    // Load\n    try {\n      long t1 = System.currentTimeMillis();\n      if (debug) {\n        System.err.println(\"DEBUG: nntp: newsrc loading \" + file.getPath());\n      }\n\n      FileInputStream fr = new FileInputStream(file);\n      InputStreamReader ir = new InputStreamReader(fr, NEWSRC_ENCODING);\n      BufferedReader reader = new BufferedReader(ir, bs);\n      String line = reader.readLine();\n      while (line != null) {\n        int cp = line.indexOf(':');\n        if (cp > -1) {\n          // Subscribed newsgroup\n          String name = line.substring(0, cp);\n          groups.add(name);\n          subs.add(name);\n          cp++;\n          if (cp < line.length()) {\n            String tail = line.substring(cp).trim();\n            if (tail.length() > 0) {\n              lines.put(name, tail);\n            }\n          }\n        } else {\n          int pp = line.indexOf('!');\n          if (pp > -1) {\n            // Unsubscribed newsgroup\n            String name = line.substring(0, pp);\n            groups.add(name);\n            pp++;\n            if (pp < line.length()) {\n              String tail = line.substring(pp).trim();\n              if (tail.length() > 0) {\n                lines.put(name, tail);\n              }\n            }\n          }\n          // else ignore - comments etc will not be saved!\n        }\n        line = reader.readLine();\n      }\n      reader.close();\n      long t2 = System.currentTimeMillis();\n      if (debug) {\n        System.err.println(\n            \"DEBUG: nntp: newsrc load: \" + groups.size() + \" groups in \" + (t2 - t1) + \"ms\");\n      }\n    } catch (FileNotFoundException e) {\n    } catch (IOException e) {\n      System.err.println(\"WARNING: nntp: unable to read newsrc file\");\n      if (debug) {\n        e.printStackTrace(System.err);\n      }\n    } catch (SecurityException e) {\n      System.err.println(\"WARNING: nntp: \" + \"no read permission on newsrc file\");\n    }\n    dirty = false;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2257, "initialization": ["File file = new File(*)"], "initializationStart": [598], "initializationEnd": [642], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": [], "tryExpressionStart": 673, "tryExpressionEnd": 677, "tryBlockStart": 673, "tryBlockEnd": 1398, "catchExpressionStart": 762, "catchExpressionEnd": 782, "catchBlockStart": 762, "catchBlockEnd": 1398, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 708, "focalAPIEnd": 733, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/KNL-277/kernel-impl/src/main/java/org/sakaiproject/content/impl/DbContentService.java", "rawCode": "    /**\n     * Return an input stream.\n     *\n     * @param resource - the resource for the stream It is a non-fatal error for the file not to be\n     *     readible as long as the resource's expected length is zero. A zero length body is\n     *     indicated by returning null. We check for the body length *after* we try to read the\n     *     file. If the file is readible, we simply read it and return it as the body.\n     */\n    protected InputStream streamResourceBodyFilesystem(ContentResource resource)\n        throws ServerOverloadException {\n      // form the file name\n      File file = new File(externalResourceFileName(resource));\n\n      // read the new\n      try {\n        FileInputStream in = new FileInputStream(file);\n        return in;\n      } catch (Throwable t) {\n        // If there is not supposed to be data in the file - simply return null\n        if (((BaseResourceEdit) resource).m_contentLength == 0) {\n          return null;\n        }\n\n        // If we have a non-zero body length and reading failed, it is an error worth of note\n        M_log.warn(\n            \": failed to read resource: \"\n                + resource.getId()\n                + \" len: \"\n                + ((BaseResourceEdit) resource).m_contentLength\n                + \" : \"\n                + t);\n        throw new ServerOverloadException(\"failed to read resource body\");\n        // return null;\n      }\n    }\n"}, {"dataset": "FileInputStream", "exampleID": 2258, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "println(String)", "printStackTrace()", "exit(int)"], "tryExpressionStart": 1626, "tryExpressionEnd": 1630, "tryBlockStart": 1626, "tryBlockEnd": 5303, "catchExpressionStart": 5156, "catchExpressionEnd": 5177, "catchBlockStart": 5156, "catchBlockEnd": 5303, "exceptionHandlingCallStart": [5230, 5185, 5254, 5282], "exceptionHandlingCallEnd": [5245, 5246, 5274, 5296], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "name!=null", "guardType": "IF {", "guardExpressionStart": 1893, "guardExpressionEnd": 1910, "guardBlockStart": 1893, "guardBlockEnd": 2060, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 1976, "focalAPIEnd": 2001, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new BufferedInputStream(fis)"], "useStart": [1952], "useEnd": [2002], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/danielstutzman/SongReader/tree/master/lib/javamail-1.4.4/demo/msgshow.java", "rawCode": "  public static void main(String argv[]) {\n    int optind;\n    InputStream msgStream = System.in;\n\n    for (optind = 0; optind < argv.length; optind++) {\n      if (argv[optind].equals(\"-T\")) {\n        protocol = argv[++optind];\n      } else if (argv[optind].equals(\"-H\")) {\n        host = argv[++optind];\n      } else if (argv[optind].equals(\"-U\")) {\n        user = argv[++optind];\n      } else if (argv[optind].equals(\"-P\")) {\n        password = argv[++optind];\n      } else if (argv[optind].equals(\"-v\")) {\n        verbose = true;\n      } else if (argv[optind].equals(\"-D\")) {\n        debug = true;\n      } else if (argv[optind].equals(\"-f\")) {\n        mbox = argv[++optind];\n      } else if (argv[optind].equals(\"-L\")) {\n        url = argv[++optind];\n      } else if (argv[optind].equals(\"-p\")) {\n        port = Integer.parseInt(argv[++optind]);\n      } else if (argv[optind].equals(\"-s\")) {\n        showStructure = true;\n      } else if (argv[optind].equals(\"-S\")) {\n        saveAttachments = true;\n      } else if (argv[optind].equals(\"-m\")) {\n        showMessage = true;\n      } else if (argv[optind].equals(\"-a\")) {\n        showAlert = true;\n      } else if (argv[optind].equals(\"--\")) {\n        optind++;\n        break;\n      } else if (argv[optind].startsWith(\"-\")) {\n        System.out.println(\"Usage: msgshow [-L url] [-T protocol] [-H host] [-p port] [-U user]\");\n        System.out.println(\"\\t[-P password] [-f mailbox] [msgnum ...] [-v] [-D] [-s] [-S] [-a]\");\n        System.out.println(\"or msgshow -m [-v] [-D] [-s] [-S] [-f msg-file]\");\n        System.exit(1);\n      } else {\n        break;\n      }\n    }\n\n    try {\n      // Get a Properties object\n      Properties props = System.getProperties();\n\n      // Get a Session object\n      Session session = Session.getInstance(props, null);\n      session.setDebug(debug);\n\n      if (showMessage) {\n        MimeMessage msg;\n        if (mbox != null)\n          msg = new MimeMessage(session, new BufferedInputStream(new FileInputStream(mbox)));\n        else msg = new MimeMessage(session, msgStream);\n        dumpPart(msg);\n        System.exit(0);\n      }\n\n      // Get a Store object\n      Store store = null;\n      if (url != null) {\n        URLName urln = new URLName(url);\n        store = session.getStore(urln);\n        if (showAlert) {\n          store.addStoreListener(\n              new StoreListener() {\n                public void notification(StoreEvent e) {\n                  String s;\n                  if (e.getMessageType() == StoreEvent.ALERT) s = \"ALERT: \";\n                  else s = \"NOTICE: \";\n                  System.out.println(s + e.getMessage());\n                }\n              });\n        }\n        store.connect();\n      } else {\n        if (protocol != null) store = session.getStore(protocol);\n        else store = session.getStore();\n\n        // Connect\n        if (host != null || user != null || password != null)\n          store.connect(host, port, user, password);\n        else store.connect();\n      }\n\n      // Open the Folder\n\n      Folder folder = store.getDefaultFolder();\n      if (folder == null) {\n        System.out.println(\"No default folder\");\n        System.exit(1);\n      }\n\n      if (mbox == null) mbox = \"INBOX\";\n      folder = folder.getFolder(mbox);\n      if (folder == null) {\n        System.out.println(\"Invalid folder\");\n        System.exit(1);\n      }\n\n      // try to open read/write and if that fails try read-only\n      try {\n        folder.open(Folder.READ_WRITE);\n      } catch (MessagingException ex) {\n        folder.open(Folder.READ_ONLY);\n      }\n      int totalMessages = folder.getMessageCount();\n\n      if (totalMessages == 0) {\n        System.out.println(\"Empty folder\");\n        folder.close(false);\n        store.close();\n        System.exit(1);\n      }\n\n      if (verbose) {\n        int newMessages = folder.getNewMessageCount();\n        System.out.println(\"Total messages = \" + totalMessages);\n        System.out.println(\"New messages = \" + newMessages);\n        System.out.println(\"-------------------------------\");\n      }\n\n      if (optind >= argv.length) {\n        // Attributes & Flags for all messages ..\n        Message[] msgs = folder.getMessages();\n\n        // Use a suitable FetchProfile\n        FetchProfile fp = new FetchProfile();\n        fp.add(FetchProfile.Item.ENVELOPE);\n        fp.add(FetchProfile.Item.FLAGS);\n        fp.add(\"X-Mailer\");\n        folder.fetch(msgs, fp);\n\n        for (int i = 0; i < msgs.length; i++) {\n          System.out.println(\"--------------------------\");\n          System.out.println(\"MESSAGE #\" + (i + 1) + \":\");\n          dumpEnvelope(msgs[i]);\n          // dumpPart(msgs[i]);\n        }\n      } else {\n        while (optind < argv.length) {\n          int msgnum = Integer.parseInt(argv[optind++]);\n          System.out.println(\"Getting message number: \" + msgnum);\n          Message m = null;\n\n          try {\n            m = folder.getMessage(msgnum);\n            dumpPart(m);\n          } catch (IndexOutOfBoundsException iex) {\n            System.out.println(\"Message number out of range\");\n          }\n        }\n      }\n\n      folder.close(false);\n      store.close();\n    } catch (Exception ex) {\n      System.out.println(\"Oops, got exception! \" + ex.getMessage());\n      ex.printStackTrace();\n      System.exit(1);\n    }\n    System.exit(0);\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2259, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getAbsolutePath()", "error(String,*)", "new IOException(String)"], "tryExpressionStart": 1203, "tryExpressionEnd": 1207, "tryBlockStart": 1203, "tryBlockEnd": 1712, "catchExpressionStart": 1445, "catchExpressionEnd": 1475, "catchBlockStart": 1445, "catchBlockEnd": 1644, "exceptionHandlingCallStart": [1532, 1570, 1613], "exceptionHandlingCallEnd": [1554, 1599, 1637], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 1220, "focalAPIEnd": 1245, "followUpCheck": "fis != null", "checkType": "IF", "followUpCheckExpressionStart": 1661, "followUpCheckExpressionEnd": 1676, "followUpCheckBlockStart": 1661, "followUpCheckBlockEnd": 1706, "use": ["fis.close()"], "useStart": [1687], "useEnd": [1697], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 1645, "finallyExpressionEnd": 1653, "finallyBlockStart": 1645, "finallyBlockEnd": 1712, "cleanUpCallStart": [1687], "cleanUpCallEnd": [1697], "url": "https://github.com/derekhiggins/ovirt-engine/tree/master/backend/manager/modules/root/src/main/java/org/ovirt/engine/core/ServletUtils.java", "rawCode": "  public static void sendFile(\n      final HttpServletRequest request,\n      final HttpServletResponse response,\n      final File file,\n      final String type)\n      throws IOException {\n    // Make sure the file exits and is readable and send a 404 error\n    // response if it doesn't:\n    if (!file.exists() || !file.canRead()) {\n      log.error(\n          \"Can't read file \\\"\"\n              + file.getAbsolutePath()\n              + \"\\\" for request \\\"\"\n              + request.getRequestURI()\n              + \"\\\", will send a 404 error response.\");\n      response.sendError(HttpServletResponse.SC_NOT_FOUND);\n      return;\n    }\n\n    // Advice against large files:\n    long length = file.length();\n    if (length > LARGE) {\n      log.warn(\n          \"File \\\"\"\n              + file.getAbsolutePath()\n              + \" is \"\n              + length\n              + \" bytes long. Please reconsider using this servlet for files larger than \"\n              + LARGE\n              + \" bytes.\");\n    }\n\n    // Set the content type:\n    response.setContentType(type);\n    response.setContentLength((int) length);\n\n    // Send the content of the file:\n    InputStream in = null;\n    OutputStream out = null;\n    try {\n      in = new FileInputStream(file);\n      out = response.getOutputStream();\n      byte[] buffer = new byte[4096];\n      int count = 0;\n      while ((count = in.read(buffer)) != -1) {\n        out.write(buffer, 0, count);\n      }\n    } catch (IOException exception) {\n      final String message = \"Error sending file \\\"\" + file.getAbsolutePath() + \"\\\".\";\n      log.error(message, exception);\n      throw new IOException(message);\n    } finally {\n      if (in != null) {\n        in.close();\n      }\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2260, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 136, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new InputStreamReader(fis,*)"], "useStart": [114], "useEnd": [194], "hasFinally": 1, "cleanUpCall": ["closeQuietly(Reader)"], "finallyExpressionStart": 291, "finallyExpressionEnd": 299, "finallyBlockStart": 291, "finallyBlockEnd": 337, "cleanUpCallStart": [307], "cleanUpCallEnd": [330], "url": "https://github.com/sap-production/xcode-maven-plugin/tree/master/modules/xcode-maven-plugin/src/main/java/com/sap/prd/mobile/ios/mios/UpdateVersionInPomMojo.java", "rawCode": "  Model readPom(File pom) throws IOException, XmlPullParserException {\n\n    Reader r = null;\n\n    try {\n      r = new InputStreamReader(new FileInputStream(pom), Charset.defaultCharset().name());\n\n      Model model = new MavenXpp3Reader().read(r);\n      r.close();\n      return model;\n    } finally {\n      IOUtils.closeQuietly(r);\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2261, "initialization": ["File file = getRepairerListFile()"], "initializationStart": [68], "initializationEnd": [89], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 232, "focalAPIEnd": 254, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new InputStreamReader(fis,String)", "ensureClose(fis)"], "useStart": [286, 563], "useEnd": [320, 578], "hasFinally": 1, "cleanUpCall": ["ensureClose(BufferedReader)", "ensureClose(FileInputStream)"], "finallyExpressionStart": 524, "finallyExpressionEnd": 532, "finallyBlockStart": 524, "finallyBlockEnd": 585, "cleanUpCallStart": [540, 563], "cleanUpCallEnd": [555, 578], "url": "https://github.com/araqne/logdb/tree/master/araqne-logstorage/src/main/java/org/araqne/logstorage/repair/LogFileRepairerRegistryImpl.java", "rawCode": "  @Validate\n  public void start() throws IOException {\n    File f = getRepairerListFile();\n    if (!f.exists()) return;\n\n    // load file engine list\n    FileInputStream is = null;\n    BufferedReader br = null;\n    try {\n      is = new FileInputStream(f);\n      br = new BufferedReader(new InputStreamReader(is, \"utf-8\"));\n\n      while (true) {\n        String line = br.readLine();\n        if (line == null) break;\n\n        String type = line.trim();\n        availableRepairers.put(type, new WaitEvent(type));\n      }\n    } finally {\n      ensureClose(br);\n      ensureClose(is);\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2262, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 320, "focalAPIEnd": 345, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["load(fis)"], "useStart": [292], "useEnd": [346], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/copperflake/SAT/tree/master/src/sat/tower/TowerCLI.java", "rawCode": "  /**\n   * Charge une configuration depuis un fichier créé par la commande <code>store</code>.\n   *\n   * @param path Le chemin du fichier à lire.\n   * @throws FileNotFoundException\n   * @throws IOException\n   */\n  public void load(String path) throws FileNotFoundException, IOException {\n    getTower().getConfig().load(new FileInputStream(path));\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2263, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["printStackTrace(*)"], "tryExpressionStart": 73, "tryExpressionEnd": 77, "tryBlockStart": 73, "tryBlockEnd": 815, "catchExpressionStart": 751, "catchExpressionEnd": 771, "catchBlockStart": 751, "catchBlockEnd": 815, "exceptionHandlingCallStart": [779], "exceptionHandlingCallEnd": [808], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 388, "focalAPIEnd": 419, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new LuaParser(fis,String)", "fis.close()"], "useStart": [555, 733], "useEnd": [582, 743], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/FoxyCorndog/WorkspaceOld/tree/master/LuaJ/src/lua2java.java", "rawCode": "  private void processFile(InputFile inf) {\n    inf.outdir.mkdirs();\n    try {\n      if (verbose)\n        System.out.println(\n            \"pkg=\"\n                + inf.javapackage\n                + \" file=\"\n                + inf.javaclassname\n                + \".java dest=\"\n                + inf.outfile\n                + \" src=\"\n                + inf.infile);\n      FileInputStream in = new FileInputStream(inf.infile);\n      FileOutputStream out = new FileOutputStream(inf.outfile);\n      PrintWriter pw = new PrintWriter(out);\n      LuaParser parser = new LuaParser(in, encoding);\n      Chunk chunk = parser.Chunk();\n      new JavaCodeGen(chunk, pw, inf.javapackage, inf.javaclassname);\n      pw.close();\n      out.close();\n      in.close();\n    } catch (Throwable t) {\n      t.printStackTrace(System.err);\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2264, "initialization": ["File file = new File(String)"], "initializationStart": [92], "initializationEnd": [131], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 155, "focalAPIEnd": 180, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ANTLRInputStream(fis)"], "useStart": [211], "useEnd": [236], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kirakira/fatworm/tree/master/src/fatworm/logicplan/PlanGen.java", "rawCode": "  public static void main(String[] args) throws Exception {\n\n    // initial\n    File file = new File(\"/home/hxr/fatworm/input.txt\");\n    InputStream inp = new FileInputStream(file);\n    ANTLRInputStream input = new ANTLRInputStream(inp);\n    writer = new PrintWriter(new FileOutputStream(\"/home/hxr/fatworm/output.txt\"));\n    FatwormLexer lexer = new FatwormLexer(input);\n    CommonTokenStream tokens = new CommonTokenStream(lexer);\n\n    // parser\n    FatwormParser parser = new FatwormParser(tokens);\n    FatwormParser.prog_return r = parser.prog();\n    CommonTree t = (CommonTree) r.getTree();\n    CommonTreeNodeStream ns = new CommonTreeNodeStream(t);\n    System.out.println(t.toStringTree());\n    // System.out.println(t.getChildCount());\n    // logical query plan/ relation algebra tree\n    LinkedList<SqlStatement> nodeList = new LinkedList<SqlStatement>();\n    for (int i = 0; i < t.getChildCount(); i++) {\n      SqlStatement sqlStatement = planGen((CommonTree) t.getChild(i));\n      nodeList.add(sqlStatement);\n    }\n\n    // output\n    // printNode(writer, 0, nodeList.getLast());\n    writer.flush();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2265, "initialization": ["File file = createTempFile(String,*)"], "initializationStart": [946], "initializationEnd": [979], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.deleteOnExit()"], "configurationStart": [985], "configurationEnd": [1007], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 1279, "focalAPIEnd": 1307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["importXML(*,fis,*)", "fis.close()"], "useStart": [1325, 1434], "useEnd": [1410, 1444], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 1418, "finallyExpressionEnd": 1426, "finallyBlockStart": 1418, "finallyBlockEnd": 1451, "cleanUpCallStart": [1434], "cleanUpCallEnd": [1444], "url": "https://github.com/bdelacretaz/terye/tree/master/jcr-tck-testsuite/src/main/java/org/apache/jackrabbit/test/api/ShareableNodeTest.java", "rawCode": "  /**\n   * Verify document view import via workspace (6.13.14). Export a document view containing a\n   * shareable node and verify, that reimporting underneath a different parent adds another member\n   * to the shared set and does not duplicate children nodes.\n   */\n  public void testImportDocumentViewCollision() throws Exception {\n    // setup parent nodes and first child\n    Node a1 = testRootNode.addNode(\"a1\");\n    Node a2 = testRootNode.addNode(\"a2\");\n    Node a3 = testRootNode.addNode(\"a3\");\n    Node b1 = a1.addNode(\"b1\");\n    testRootNode.save();\n\n    // add mixin\n    ensureMixinType(b1, mixShareable);\n    b1.save();\n\n    // clone\n    Session session = b1.getSession();\n    Workspace workspace = session.getWorkspace();\n    workspace.clone(workspace.getName(), b1.getPath(), a2.getPath() + \"/b2\", false);\n\n    // add child c to shareable nodes b1 & b2\n    b1.addNode(\"c\");\n    b1.save();\n\n    // create temp file\n    File tmpFile = File.createTempFile(\"test\", null);\n    tmpFile.deleteOnExit();\n\n    // export system view of /a1/b1\n    OutputStream out = new FileOutputStream(tmpFile);\n    try {\n      session.exportDocumentView(b1.getPath(), out, false, false);\n    } finally {\n      out.close();\n    }\n\n    // and import again underneath /a3\n    InputStream in = new FileInputStream(tmpFile);\n    try {\n      workspace.importXML(a3.getPath(), in, ImportUUIDBehavior.IMPORT_UUID_COLLISION_THROW);\n    } finally {\n      in.close();\n    }\n\n    // verify there's another element in the shared set\n    Node[] shared = getSharedSet(b1);\n    assertEquals(3, shared.length);\n\n    // verify child c has not been duplicated\n    Node[] children = toArray(b1.getNodes());\n    assertEquals(1, children.length);\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2266, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.length()"], "configurationStart": [83], "configurationEnd": [96], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 224, "focalAPIEnd": 249, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fis.map(*,int,long)", "fis.map(*,*,long)", "fis.close()"], "useStart": [313, 434, 625], "useEnd": [368, 542, 644], "hasFinally": 1, "cleanUpCall": ["FileChannel.close()"], "finallyExpressionStart": 609, "finallyExpressionEnd": 617, "finallyBlockStart": 609, "finallyBlockEnd": 651, "cleanUpCallStart": [625], "cleanUpCallEnd": [644], "url": "https://github.com/bwilson30/distributed-ftp/tree/master/the_final_folder/client/filehash.java", "rawCode": "  public static String computeHash(File file) throws IOException {\n    long size = file.length();\n    long chunkSizeForFile = Math.min(HASH_CHUNK_SIZE, size);\n    if (!file.exists()) return \"\";\n    FileChannel fileChannel = new FileInputStream(file).getChannel();\n\n    try {\n      long head = computeHashForChunk(fileChannel.map(MapMode.READ_ONLY, 0, chunkSizeForFile));\n      long tail =\n          computeHashForChunk(\n              fileChannel.map(\n                  MapMode.READ_ONLY, Math.max(size - HASH_CHUNK_SIZE, 0), chunkSizeForFile));\n\n      return String.format(\"%016x\", size + head + tail);\n    } finally {\n      fileChannel.close();\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2267, "initialization": ["File file = new File(*)"], "initializationStart": [72], "initializationEnd": [104], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["new IllegalArgumentException(*)"], "tryExpressionStart": 110, "tryExpressionEnd": 114, "tryBlockStart": 110, "tryBlockEnd": 246, "catchExpressionStart": 162, "catchExpressionEnd": 194, "catchBlockStart": 162, "catchBlockEnd": 246, "exceptionHandlingCallStart": [208], "exceptionHandlingCallEnd": [239], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 129, "focalAPIEnd": 154, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/droolsjbpm/jbpm-designer/tree/master/jbpm-designer-backend/src/main/java/org/jbpm/designer/web/stencilset/impl/LocalStencilSetImpl.java", "rawCode": "  public InputStream getResourceContents(String path) {\n    File file = new File(_basePath + \"/\" + path);\n    try {\n      return new FileInputStream(file);\n    } catch (FileNotFoundException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2268, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 251, "focalAPIEnd": 309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["load(fis)"], "useStart": [231], "useEnd": [310], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fcrepo/fcrepo-historical/tree/master/fcrepo-client/fcrepo-client-admin/src/main/java/fedora/client/batch/BatchAdditions.java", "rawCode": "  public static final void main(String[] args) {\n    try {\n      Properties miscProperties = new Properties();\n      Properties datastreamProperties = new Properties();\n      Properties metadataProperties = new Properties();\n      miscProperties.load(new FileInputStream(\"c:\\\\batchdemo\\\\batchtool.properties\"));\n      datastreamProperties.load(new FileInputStream(\"c:\\\\batchdemo\\\\datastream.properties\"));\n      metadataProperties.load(new FileInputStream(\"c:\\\\batchdemo\\\\metadata.properties\"));\n      BatchAdditions batchAdditions =\n          new BatchAdditions(miscProperties, datastreamProperties, metadataProperties);\n      batchAdditions.prep();\n      batchAdditions.process();\n    } catch (Exception e) {\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2269, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 96, "focalAPIEnd": 125, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fis.read(byte[])", "fis.close()"], "useStart": [269, 398], "useEnd": [285, 409], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RomRaider/assembla.flat/tree/master/trunk/src/com/romraider/util/MD5Checksum.java", "rawCode": "  public static byte[] createChecksum(String filename) throws Exception {\n    InputStream fis = new FileInputStream(filename);\n\n    byte[] buffer = new byte[1024];\n    MessageDigest complete = MessageDigest.getInstance(\"MD5\");\n    int numRead;\n    do {\n      numRead = fis.read(buffer);\n      if (numRead > 0) {\n        complete.update(buffer, 0, numRead);\n      }\n    } while (numRead != -1);\n    fis.close();\n    return complete.digest();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2270, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 254, "tryExpressionEnd": 258, "tryBlockStart": 254, "tryBlockEnd": 1468, "catchExpressionStart": 1371, "catchExpressionEnd": 1393, "catchBlockStart": 1371, "catchBlockEnd": 1468, "exceptionHandlingCallStart": [1442], "exceptionHandlingCallEnd": [1461], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 288, "focalAPIEnd": 329, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getNextChunk(fis)", "fis.skip(int)", "getNextChunk(fis)", "fis.read(byte[])"], "useStart": [406, 616, 727, 863], "useEnd": [423, 639, 744, 876], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/edwardlzk/SearchEngine/tree/master/src/edu/nyu/cs/cs2580/IndexerInvertedCompressed.java", "rawCode": "  /**\n   * Get the term information from compressed file\n   *\n   * @param termHash\n   * @return\n   */\n  private Map<Integer, Vector<Integer>> getTerm(long termHash) {\n\n    Map<Integer, Vector<Integer>> ret = new HashMap<Integer, Vector<Integer>>();\n\n    try {\n      FileInputStream fis = new FileInputStream(baseName + mergefile);\n\n      long currentTerm;\n      while ((currentTerm = convertVbyteToNumLong(getNextChunk(fis))) != -1) {\n        // Loop when we have following terms\n        int length = convertVbyteToNum(getNextChunk(fis));\n        if (currentTerm != termHash) {\n          // skip this term\n          fis.skip((long) length);\n        } else {\n          while (length > 0) {\n            Vector<Byte> lengthByte = getNextChunk(fis);\n            int docLength = convertVbyteToNum(lengthByte);\n            byte[] doc = new byte[docLength];\n            fis.read(doc);\n            Vector<Vector<Byte>> chunks = getChunks(doc);\n            int docId = convertVbyteToNum(chunks.get(0));\n            Vector<Integer> positions = new Vector<Integer>();\n            for (int i = 1; i < chunks.size(); i++) {\n              positions.add(convertVbyteToNum(chunks.get(i)));\n            }\n            // Add the doc and positions to the map\n            ret.put(docId, positions);\n            length -= (docLength + lengthByte.size());\n          }\n        }\n      }\n\n    } catch (IOException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    return ret;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2271, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 189, "tryExpressionEnd": 193, "tryBlockStart": 189, "tryBlockEnd": 520, "catchExpressionStart": 466, "catchExpressionEnd": 486, "catchBlockStart": 466, "catchBlockEnd": 520, "exceptionHandlingCallStart": [494], "exceptionHandlingCallEnd": [513], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 222, "focalAPIEnd": 250, "followUpCheck": "fis.available() > 0", "checkType": "LOOP {", "followUpCheckExpressionStart": 318, "followUpCheckExpressionEnd": 344, "followUpCheckBlockStart": 318, "followUpCheckBlockEnd": 422, "use": ["fis.read(byte[])", "fis.close()"], "useStart": [367, 448], "useEnd": [379, 458], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wox2/migrace_databaze/tree/master/skola/Fel_bc/1.semestr/Algoritmizace/PrikladyPrednasky2007/Alg8/src/alg8/Kopie5.java", "rawCode": "  public static void main(String[] args) {\n    if (args.length < 2) {\n      System.out.println(\"použití: Kopie3 <vstup> <výstup>\");\n      return;\n    }\n    byte[] buf = new byte[1000];\n    try {\n      FileInputStream in = new FileInputStream(args[0]);\n      FileOutputStream out = new FileOutputStream(args[1]);\n      while (in.available() > 0) {\n        int pocet = in.read(buf);\n        out.write(buf, 0, pocet);\n      }\n      out.close();\n      in.close();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2272, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "NoSuchAlgorithmException", "exceptionHandlingCall": ["printStackTrace()", "new IllegalStateException()"], "tryExpressionStart": 69, "tryExpressionEnd": 73, "tryBlockStart": 69, "tryBlockEnd": 698, "catchExpressionStart": 473, "catchExpressionEnd": 508, "catchBlockStart": 473, "catchBlockEnd": 583, "exceptionHandlingCallStart": [516, 549], "exceptionHandlingCallEnd": [535, 576], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 233, "focalAPIEnd": 255, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fis.close()"], "useStart": [372], "useEnd": [382], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/plantuml/tree/master/tags/plantuml-6939/src/net/sourceforge/plantuml/SignatureUtils.java", "rawCode": "  public static String getSignature(File f) throws IOException {\n    try {\n      final AsciiEncoder coder = new AsciiEncoder();\n      final MessageDigest msgDigest = MessageDigest.getInstance(\"MD5\");\n      final FileInputStream is = new FileInputStream(f);\n      int read = -1;\n      while ((read = is.read()) != -1) {\n        msgDigest.update((byte) read);\n      }\n      is.close();\n      final byte[] digest = msgDigest.digest();\n      return coder.encode(digest);\n    } catch (NoSuchAlgorithmException e) {\n      e.printStackTrace();\n      throw new IllegalStateException();\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n      throw new IllegalStateException();\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2273, "initialization": ["File file = new File(*,String)"], "initializationStart": [746], "initializationEnd": [823], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 1559, "focalAPIEnd": 1586, "followUpCheck": "fis != null", "checkType": "IF", "followUpCheckExpressionStart": 1962, "followUpCheckExpressionEnd": 1978, "followUpCheckBlockStart": 1962, "followUpCheckBlockEnd": 2078, "use": ["fis.read(byte[])", "fis.close()"], "useStart": [1633, 2009], "useEnd": [1648, 2020], "hasFinally": 1, "cleanUpCall": ["FileInputStream.close()"], "finallyExpressionStart": 1944, "finallyExpressionEnd": 1952, "finallyBlockStart": 1944, "finallyBlockEnd": 2086, "cleanUpCallStart": [2009], "cleanUpCallEnd": [2020], "url": "https://github.com/jdeolive/geotools-old/tree/master/modules/plugin/geotiff/src/test/java/org/geotools/gce/geotiff/GeoTiffWriterTest.java", "rawCode": "  @Test\n  public void testWriteBigTiff() throws Exception {\n\n    String files[] = new String[] {\"geo.tiff\", \"no_crs_no_envelope.tif\"};\n\n    int i = 0;\n    for (String file : files) {\n      final File input = TestData.file(GeoTiffReaderTest.class, file);\n      final AbstractGridFormat format = new GeoTiffFormat();\n      assertTrue(format.accepts(input));\n\n      // getting a reader\n      GeoTiffReader reader = new GeoTiffReader(input);\n\n      // reading the coverage\n      GridCoverage2D coverage = (GridCoverage2D) reader.read(null);\n\n      // check coverage and crs\n      assertNotNull(coverage);\n      assertNotNull(coverage.getCoordinateReferenceSystem());\n      reader.dispose();\n\n      // get a writer\n      final File output =\n          new File(TestData.file(GeoTiffReaderTest.class, \".\"), \"bigtiff\" + i + \".tif\");\n      GeoTiffWriter writer = new GeoTiffWriter(output);\n\n      GeoTiffWriteParams params = new GeoTiffWriteParams();\n      params.setForceToBigTIFF(true);\n      ParameterValue<GeoToolsWriteParams> value = GeoTiffFormat.GEOTOOLS_WRITE_PARAMS.createValue();\n      value.setValue(params);\n\n      writer.write(coverage, new GeneralParameterValue[] {value});\n      writer.dispose();\n      coverage.dispose(true);\n\n      // getting a reader\n      reader = new GeoTiffReader(output);\n      RenderedImage ri = reader.read(null).getRenderedImage();\n      assertEquals(ri.getWidth(), i == 0 ? 120 : 12);\n      assertEquals(ri.getHeight(), i == 0 ? 120 : 12);\n      reader.dispose();\n\n      FileInputStream fis = null;\n      try {\n        fis = new FileInputStream(output);\n\n        byte[] bytes = new byte[6];\n        fis.read(bytes);\n        if (bytes[0] == 77 && bytes[1] == 77) {\n          // Big Endian Case\n          assertEquals(bytes[3], 43); // 43 is the magic number of BigTiff\n        } else {\n          // Little Endian Case\n          assertEquals(bytes[4], 43); // 43 is the magic number of BigTiff\n        }\n      } finally {\n        if (fis != null) {\n          try {\n            fis.close();\n          } catch (Throwable t) {\n\n          }\n        }\n      }\n      i++;\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2274, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 35, "tryExpressionEnd": 39, "tryBlockStart": 35, "tryBlockEnd": 215, "catchExpressionStart": 159, "catchExpressionEnd": 181, "catchBlockStart": 159, "catchBlockEnd": 215, "exceptionHandlingCallStart": [189], "exceptionHandlingCallEnd": [208], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 89, "focalAPIEnd": 150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["load(fis)"], "useStart": [79], "useEnd": [151], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wallnerryan/floodlight/tree/master/src/main/java/net/floodlightcontroller/qos/QoSDBStorageSource.java", "rawCode": "  public void connectToDB() {\n\n    try {\n      // load a properties file\n      prop.load(new FileInputStream(\"src/main/resources/db.mysql.properties\"));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    databaseUrl = prop.getProperty(\"dburl\");\n    uname = prop.getProperty(\"username\");\n    pwd = prop.getProperty(\"password\");\n    System.out.println(\"Connected to: \" + databaseUrl);\n    // System.out.println(uname);\n    // System.out.println(pwd);\n\n    try {\n\n      Class.forName(dbClass);\n      Connection con = DriverManager.getConnection(databaseUrl, uname, pwd);\n      Statement stmt = con.createStatement();\n      ResultSet rs = stmt.executeQuery(query);\n\n      while (rs.next()) {\n        dbtime = rs.getString(1);\n        System.out.println(dbtime);\n      } // end while\n\n      con.close();\n    } // end try\n    catch (ClassNotFoundException e) {\n      e.printStackTrace();\n    } catch (SQLException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2275, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 373, "focalAPIEnd": 398, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createImageInputStream(fis)", "fis.close()"], "useStart": [520, 636], "useEnd": [555, 647], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BrentDouglas/richfaces-3/tree/master/examples/photoalbum/source/web/src/main/java/org/richfaces/photoalbum/util/FileUtils.java", "rawCode": "  /**\n   * Utility method to read image from disk and transform image to BufferedImage object\n   *\n   * @param data - relative path to the image\n   * @param format - file prefix of the image\n   * @return BufferedImage representation of the image\n   */\n  public static BufferedImage bitmapToImage(String data, String format) throws IOException {\n    final InputStream inb = new FileInputStream(data);\n    final ImageReader rdr = ImageIO.getImageReadersByFormatName(format).next();\n    final ImageInputStream imageInput = ImageIO.createImageInputStream(inb);\n    rdr.setInput(imageInput);\n    final BufferedImage image = rdr.read(0);\n    inb.close();\n    return image;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2276, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 452, "focalAPIEnd": 477, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new InputStreamReader(fis)", "new InputStreamReader(fis,String)"], "useStart": [430, 503], "useEnd": [478, 561], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lintool/Ivory/tree/master/src/java/other/edu/stanford/nlp/io/IOUtils.java", "rawCode": "  /**\n   * Returns all the text in the given File.\n   *\n   * @param file The file to read from\n   * @param encoding The character encoding to assume. This may be null, and the platform default\n   *     character encoding is used.\n   */\n  public static String slurpFile(File file, String encoding) throws IOException {\n    Reader r;\n    // InputStreamReader doesn't allow encoding to be null;\n    if (encoding == null) {\n      r = new InputStreamReader(new FileInputStream(file));\n    } else {\n      r = new InputStreamReader(new FileInputStream(file), encoding);\n    }\n    return IOUtils.slurpReader(r);\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2277, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["println(String)", "printStackTrace()"], "tryExpressionStart": 210, "tryExpressionEnd": 214, "tryBlockStart": 210, "tryBlockEnd": 840, "catchExpressionStart": 745, "catchExpressionEnd": 765, "catchBlockStart": 745, "catchBlockEnd": 840, "exceptionHandlingCallStart": [773, 814], "exceptionHandlingCallEnd": [806, 833], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 373, "focalAPIEnd": 401, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fis.close()"], "useStart": [713], "useEnd": [729], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wf1768/archive/tree/master/src/java/com/yapu/system/util/FileOperate.java", "rawCode": "  /**\n   * 复制单个文件\n   *\n   * @param oldPath String 原文件路径 如：c:/fqf.txt\n   * @param newPath String 复制后路径 如：f:/fqf.txt\n   * @return boolean\n   */\n  public static void copyFile(String oldPath, String newPath) {\n    try {\n      int bytesum = 0;\n      int byteread = 0;\n      File oldfile = new File(oldPath);\n      if (oldfile.exists()) { // 文件存在时\n        InputStream inStream = new FileInputStream(oldPath); // 读入原文件\n        FileOutputStream fs = new FileOutputStream(newPath);\n        byte[] buffer = new byte[1444];\n        while ((byteread = inStream.read(buffer)) != -1) {\n          bytesum += byteread; // 字节数 文件大小\n          System.out.println(bytesum);\n          fs.write(buffer, 0, byteread);\n        }\n        inStream.close();\n      }\n    } catch (Exception e) {\n      System.out.println(\"复制单个文件操作出错 \");\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2278, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 151, "focalAPIEnd": 181, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fis.close()"], "useStart": [368], "useEnd": [379], "hasFinally": 1, "cleanUpCall": ["FileInputStream.close()"], "finallyExpressionStart": 352, "finallyExpressionEnd": 360, "finallyBlockStart": 352, "finallyBlockEnd": 386, "cleanUpCallStart": [368], "cleanUpCallEnd": [379], "url": "https://github.com/RomRaider/assembla.flat/tree/master/branches/dev_gui_def_overhaul/src/com/romraider/editor/ecu/ECUEditor.java", "rawCode": "  private byte[] readFile(File inputFile) throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    FileInputStream fis = new FileInputStream(inputFile);\n    try {\n      byte[] buf = new byte[8192];\n      int bytesRead;\n      while ((bytesRead = fis.read(buf)) != -1) {\n        baos.write(buf, 0, bytesRead);\n      }\n    } finally {\n      fis.close();\n    }\n    return baos.toByteArray();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2279, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["error(String)", "error(*)"], "tryExpressionStart": 86, "tryExpressionEnd": 90, "tryBlockStart": 86, "tryBlockEnd": 507, "catchExpressionStart": 334, "catchExpressionEnd": 354, "catchBlockStart": 334, "catchBlockEnd": 507, "exceptionHandlingCallStart": [362, 433], "exceptionHandlingCallEnd": [425, 445], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "file!=null", "guardType": "IF {", "guardExpressionStart": 98, "guardExpressionEnd": 126, "guardBlockStart": 98, "guardBlockEnd": 327, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 229, "focalAPIEnd": 265, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Image(fis,*,boolean)"], "useStart": [200], "useEnd": [308], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/FoxyCorndog/WorkspaceOld/tree/master/slick/tools/org/newdawn/slick/tools/peditor/ParticleGame.java", "rawCode": "  public void render(GameContainer container, Graphics g) throws SlickException {\n    try {\n      if (backgroundImage != null) {\n        if (background == null) {\n          background =\n              new Image(\n                  new FileInputStream(backgroundImage), backgroundImage.getAbsolutePath(), false);\n        }\n      }\n    } catch (Exception e) {\n      Log.error(\"Failed to load backgroundImage: \" + backgroundImage);\n      Log.error(e);\n      backgroundImage = null;\n      background = null;\n    }\n\n    GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);\n    GL11.glLoadIdentity();\n\n    if (background != null) {\n      g.fillRect(0, 0, container.getWidth(), container.getHeight(), background, 0, 0);\n    }\n    max = Math.max(max, system.getParticleCount());\n\n    if (hudOn) {\n      g.setColor(Color.white);\n      g.drawString(\"FPS: \" + container.getFPS(), 10, 10);\n      g.drawString(\"Particles: \" + system.getParticleCount(), 10, 25);\n      g.drawString(\"Max: \" + max, 10, 40);\n      g.drawString(\"LMB: Position Emitter RMB: Default Position\", 20, 527);\n    }\n\n    GL11.glTranslatef(250, 300, 0);\n    for (int i = 0; i < emitters.size(); i++) {\n      ((ConfigurableEmitter) emitters.get(i)).setPosition(0, ypos);\n    }\n    system.render();\n\n    g.setColor(new Color(0, 0, 0, 0.5f));\n    g.fillRect(-1, -5, 2, 10);\n    g.fillRect(-5, -1, 10, 2);\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2280, "initialization": ["File file = createTempFile(String,String)"], "initializationStart": [108], "initializationEnd": [142], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["warn(String,*)"], "tryExpressionStart": 80, "tryExpressionEnd": 84, "tryBlockStart": 80, "tryBlockEnd": 1083, "catchExpressionStart": 954, "catchExpressionEnd": 982, "catchBlockStart": 954, "catchBlockEnd": 1083, "exceptionHandlingCallStart": [992], "exceptionHandlingCallEnd": [1052], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 289, "focalAPIEnd": 321, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new POIFSFileSystem(fis)"], "useStart": [358], "useEnd": [382], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Union-Investment/Crud2Go/tree/master/eai-portal-webapp-administration/src/main/java/de/unioninvestment/eai/portal/portlet/crud/export/CsvExportTask.java", "rawCode": "    public boolean sendConverted() {\n      File tempXlsFile, tempCsvFile;\n      try {\n        tempXlsFile = File.createTempFile(\"tmp\", \".xls\");\n        final FileOutputStream fileOut = new FileOutputStream(tempXlsFile);\n        workbook.write(fileOut);\n        final FileInputStream fis = new FileInputStream(tempXlsFile);\n        final POIFSFileSystem fs = new POIFSFileSystem(fis);\n        tempCsvFile = File.createTempFile(\"tmp\", \".csv\");\n        final PrintStream p =\n            new PrintStream(new BufferedOutputStream(new FileOutputStream(tempCsvFile, true)));\n\n        final XLS2CSVmra xls2csv = new XLS2CSVmra(fs, p, -1);\n        xls2csv.process();\n        p.close();\n        if (null == mimeType) {\n          setMimeType(CSV_MIME_TYPE);\n        }\n        // \"super.\" entfernt, damit die Methode in der Subklasse\n        // überschrieben werden kann.\n        return sendConvertedFileToUser(UI.getCurrent(), tempCsvFile, exportFileName);\n      } catch (final IOException e) {\n        LOGGER.warn(\"Converting to CSV failed with IOException \", e);\n        return false;\n      }\n    }\n"}, {"dataset": "FileInputStream", "exampleID": 2281, "initialization": ["String name = getProperty(String)"], "initializationStart": [139], "initializationEnd": [175], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "name!=null", "guardType": "IF {", "guardExpressionStart": 245, "guardExpressionEnd": 264, "guardBlockStart": 245, "guardBlockEnd": 577, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 337, "focalAPIEnd": 364, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Properties.load(fis)", "fis.close()"], "useStart": [372, 391], "useEnd": [383, 402], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/SAK-18678/kernel-impl/src/test/java/org/sakaiproject/content/impl/serialize/impl/test/MySQLByteStorage.java", "rawCode": "  protected void setUp() throws Exception {\n\n    super.setUp();\n    DriverAdapterCPDS cpds = new DriverAdapterCPDS();\n\n    String config = System.getProperty(\"migrate.config\"); // ,\"migrate.properties\");\n    Properties p = new Properties();\n    if (config != null) {\n      log.info(\"Using Config \" + config);\n      FileInputStream fin = new FileInputStream(config);\n      p.load(fin);\n      fin.close();\n      for (Entry<Object, Object> entry : p.entrySet()) {\n        Object k = entry.getKey();\n        log.info(\" Test Properties \" + k + \":\" + entry.getValue());\n      }\n    }\n\n    cpds.setDriver(p.getProperty(\"dbDriver\", \"com.mysql.jdbc.Driver\"));\n    cpds.setUrl(\n        p.getProperty(\n            \"dbURL\",\n            \"jdbc:mysql://127.0.0.1:3306/sakai22?useUnicode=true&characterEncoding=UTF-8\"));\n    cpds.setUser(p.getProperty(\"dbUser\", \"sakai22\"));\n    cpds.setPassword(p.getProperty(\"dbPass\", \"sakai22\"));\n\n    tds = new SharedPoolDataSource();\n    tds.setConnectionPoolDataSource(cpds);\n    tds.setMaxActive(10);\n    tds.setMaxWait(5);\n    tds.setDefaultAutoCommit(false);\n\n    Connection connection = null;\n    Statement statement = null;\n    try {\n      connection = tds.getConnection();\n      statement = connection.createStatement();\n      try {\n        statement.execute(\"drop table blobtest\");\n      } catch (Exception ex) {\n      }\n      statement.execute(\"create table blobtest ( id int, bval longtext, primary key(id) )\");\n    } finally {\n      try {\n        statement.close();\n      } catch (Exception ex) {\n\n      }\n      try {\n        connection.close();\n      } catch (Exception ex) {\n\n      }\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2282, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 2448, "focalAPIEnd": 2482, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new GZIPInputStream(fis)"], "useStart": [2428], "useEnd": [2483], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/divad12/web-search-experiment/tree/master/clueweb-processing/ExtractDocno2.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    long time = System.currentTimeMillis();\n    String[] keys = {\"en0000\", \"en0001\", \"en0040\"};\n\n    String[] directories = {\n      \"/home/aiman/WRP/WarcProject/src/WarcFiles/clueweb1/en0000\",\n      \"/home/aiman/WRP/WarcProject/src/WarcFiles/clueweb1/en0001\",\n      \"/home/aiman/WRP/WarcProject/src/WarcFiles/clueweb1/en0002\",\n      \"/home/aiman/WRP/WarcProject/src/WarcFiles/clueweb2/en0000\",\n      \"/home/aiman/WRP/WarcProject/src/WarcFiles/clueweb2/en0001\",\n      \"/home/aiman/WRP/WarcProject/src/WarcFiles/clueweb2/en0002\"\n    };\n\n    Class c = ExtractDocno2.class;\n\n    BufferedReader docnoReader =\n        new BufferedReader(\n            new InputStreamReader(c.getResourceAsStream(\"clueweb09spam.Fusion.ge70.txt\")));\n    String docno = \"\";\n    PrintWriter titleFile =\n        new PrintWriter(\n            new BufferedWriter(\n                new FileWriter(\"/home/aiman/WRP/WarcProject/output/\" + \"title\" + \".txt\")));\n    while ((docno = docnoReader.readLine()) != null) {\n      // = \"clueweb09-en0040-54-00397\";// args[0];\n      StringBuilder title = new StringBuilder(\"\");\n      StringBuilder plaiText = new StringBuilder(\"\");\n\n      PrintWriter outHeader =\n          new PrintWriter(\n              new BufferedWriter(\n                  new FileWriter(\"/home/aiman/WRP/WarcProject/output/\" + docno + \".header\")));\n      PrintWriter outHtml =\n          new PrintWriter(\n              new BufferedWriter(\n                  new FileWriter(\"/home/aiman/WRP/WarcProject/output/\" + docno + \".html\")));\n      PrintWriter outText =\n          new PrintWriter(\n              new BufferedWriter(\n                  new FileWriter(\"/home/aiman/WRP/WarcProject/output/\" + docno + \".txt\")));\n      // New code\n      PrintWriter outUrl =\n          new PrintWriter(\n              new BufferedWriter(\n                  new FileWriter(\"/home/aiman/WRP/WarcProject/output/\" + docno + \".url\")));\n\n      // 012345678901234567890123456789\n      // clueweb09-en0113-48-27622\n\n      String subdir = docno.substring(10, 16);\n      String zipFile = docno.substring(17, 19) + \".warc.gz\";\n\n      int i = 0;\n      for (; i < keys.length; ++i) {\n        if (keys[i].compareTo(subdir) == 0) break;\n      }\n      String inputWarcFile = directories[i] + \"/\" + zipFile;\n\n      // System.out.println( inputWarcFile ) ;\n\n      // open our gzip input stream\n      GZIPInputStream gzInputStream = new GZIPInputStream(new FileInputStream(inputWarcFile));\n\n      /// cast to a data input stream\n      DataInputStream inStream = new DataInputStream(gzInputStream);\n\n      // iterate through our stream\n      WarcRecord thisWarcRecord;\n      while ((thisWarcRecord = WarcRecord.readNextWarcRecord(inStream)) != null) {\n\n        // see if it's a response record\n\n        if (thisWarcRecord.getHeaderRecordType().equals(\"response\")) {\n          // it is - create a WarcHTML record\n          WarcHTMLResponseRecord htmlRecord = new WarcHTMLResponseRecord(thisWarcRecord);\n          // get our TREC ID and target URI\n          String thisTRECID = htmlRecord.getTargetTrecID();\n          // System.out.println(\"thisTRECID :\" +thisTRECID);\n\n          if (docno.compareTo(thisTRECID) == 0) {\n            byte[] contentBytes = thisWarcRecord.getContent();\n\n            ByteArrayInputStream contentStream = new ByteArrayInputStream(contentBytes);\n            BufferedReader inReader = new BufferedReader(new InputStreamReader(contentStream));\n\n            String thisTargetURI = htmlRecord.getTargetURI();\n            outUrl.print(thisTargetURI);\n            outUrl.close();\n\n            // forward to the first /n/n\n\n            boolean firstLine = true;\n            boolean inHeader = true;\n            String line = null;\n            while (inHeader && ((line = inReader.readLine()) != null)) {\n              if (!firstLine && line.trim().length() == 0) {\n                inHeader = false;\n              } else {\n                outHeader.println(line);\n              }\n\n              if (firstLine) {\n                firstLine = false;\n              }\n            }\n            outHeader.close();\n\n            // now we have the rest of the lines\n            // read them all into a string buffer\n            // to remove all new lines\n            StringBuilder html = new StringBuilder(65536);\n\n            while ((line = inReader.readLine()) != null) {\n              outHtml.println(line);\n              html.append(line);\n            }\n            outHtml.close();\n            Source source = new Source(html);\n            Element titleElement = source.getFirstElement(\"title\");\n            String tilteContent = \"\";\n            if (titleElement != null) tilteContent = titleElement.getContent().toString();\n            else tilteContent = \"\\n\";\n\n            title.append(docno + \"\\t\" + tilteContent + \"\\n\");\n            Renderer renderer = source.getRenderer();\n            renderer.setIncludeHyperlinkURLs(false);\n            String renderedText = renderer.toString();\n            plaiText.append(renderedText);\n            System.out.println(\"Tokenize url is\");\n            System.out.println(GetTokenizeURL.getTokenizeUrl(htmlRecord.getTargetURI()));\n            System.out.println(\"anchor text of docno :-\" + docno);\n            System.out.println(GetAncherText.getAncherText(source));\n\n            break;\n          }\n        }\n      }\n\n      inStream.close();\n      outText.print(plaiText);\n      outText.close();\n      titleFile.print(title.toString());\n    }\n\n    titleFile.close();\n    System.out.println(\"total time\" + (System.currentTimeMillis() - time));\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2283, "initialization": ["File file = new File(String)"], "initializationStart": [560], "initializationEnd": [578], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.getName()"], "configurationStart": [800], "configurationEnd": [814], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 952, "focalAPIEnd": 977, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new BufferedInputStream(fis)"], "useStart": [928], "useEnd": [978], "hasFinally": 1, "cleanUpCall": ["BufferedOutputStream.close()"], "finallyExpressionStart": 1209, "finallyExpressionEnd": 1217, "finallyBlockStart": 1209, "finallyBlockEnd": 1452, "cleanUpCallStart": [1269], "cleanUpCallEnd": [1283], "url": "https://github.com/NCIP/nci-term-suggestion/tree/master/software/ncitermform/src/java/gov/nih/nci/evs/browser/servlet/DownloadServlet.java", "rawCode": "  protected void downloadTemplate(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    // String filename = URLDecoder.decode(request.getPathInfo(), \"UTF-8\");\n    // File file = new File(\"/path/to/files\", filename);\n\n    String filename =\n        Constants\n            .CDISC_MULTIPLE_TERM_REQUEST_TEMPLATE; // \"CDISC_Controlled_Terminology_Multiple_Term_Request_Spreadsheet.xlsx\";\n    String pathname = AppProperties.getConfigurationDir() + filename;\n    // Systen.out.println(pathname);\n\n    File file = new File(pathname);\n\n    response.setHeader(\"Content-Type\", getServletContext().getMimeType(file.getName()));\n    // response.setHeader(\"Content-Length\", file.length());\n    response.setHeader(\"Content-Disposition\", \"inline; filename=\\\"\" + file.getName() + \"\\\"\");\n\n    BufferedInputStream input = null;\n    BufferedOutputStream output = null;\n\n    try {\n      input = new BufferedInputStream(new FileInputStream(file));\n      output = new BufferedOutputStream(response.getOutputStream());\n\n      byte[] buffer = new byte[8192];\n      for (int length = 0; (length = input.read(buffer)) > 0; ) {\n        output.write(buffer, 0, length);\n      }\n    } finally {\n      if (output != null)\n        try {\n          output.close();\n        } catch (IOException ignore) {\n        }\n      if (input != null)\n        try {\n          input.close();\n        } catch (IOException ignore) {\n        }\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2284, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 200, "tryExpressionEnd": 204, "tryBlockStart": 200, "tryBlockEnd": 1091, "catchExpressionStart": 609, "catchExpressionEnd": 629, "catchBlockStart": 609, "catchBlockEnd": 664, "exceptionHandlingCallStart": [637], "exceptionHandlingCallEnd": [656], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 242, "focalAPIEnd": 297, "followUpCheck": "fis != null", "checkType": "IF", "followUpCheckExpressionStart": 957, "followUpCheckExpressionEnd": 973, "followUpCheckBlockStart": 957, "followUpCheckBlockEnd": 1085, "use": ["fis.close()"], "useStart": [724], "useEnd": [737], "hasFinally": 1, "cleanUpCall": ["GZIPOutputStream.close()"], "finallyExpressionStart": 665, "finallyExpressionEnd": 673, "finallyBlockStart": 665, "finallyBlockEnd": 1091, "cleanUpCallStart": [724], "cleanUpCallEnd": [737], "url": "https://github.com/svn2github/dujiaok_dev/tree/master/static/dujiaok/xui/build/src/com/alibaba/xui/build/util/GZip.java", "rawCode": "  public static void compress(String dir, String srcName, String destName, String encoding) {\n\n    FileInputStream fin = null;\n    FileOutputStream fout = null;\n    GZIPOutputStream gzout = null;\n    try {\n      // 打开需压缩文件作为文件输入流\n      fin = new FileInputStream(dir + FileUtil.PATH_CHAR + srcName);\n      // 建立压缩文件输出流\n      fout = new FileOutputStream(dir + FileUtil.PATH_CHAR + destName);\n      // 建立gzip压缩输出流\n      gzout = new GZIPOutputStream(fout);\n      byte[] buf = new byte[1024]; // 设定读入缓冲区尺寸\n      int num;\n\n      while ((num = fin.read(buf)) != -1) {\n        gzout.write(buf, 0, num);\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n\n    } finally {\n      if (gzout != null)\n        try {\n          gzout.close();\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      if (fout != null)\n        try {\n          fout.close();\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      if (fin != null)\n        try {\n          fin.close();\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2285, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new RuntimeException(String,*)"], "tryExpressionStart": 128, "tryExpressionEnd": 132, "tryBlockStart": 128, "tryBlockEnd": 327, "catchExpressionStart": 204, "catchExpressionEnd": 226, "catchBlockStart": 204, "catchBlockEnd": 327, "exceptionHandlingCallStart": [240], "exceptionHandlingCallEnd": [320], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 156, "focalAPIEnd": 195, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["load(fis)"], "useStart": [140], "useEnd": [196], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CloudifySource/iTests-Framework/tree/master/src/main/java/iTests/framework/tools/SGTestHelper.java", "rawCode": "  public static Properties getPropertiesFromFile(String propertiesFileName) {\n    Properties properties = new Properties();\n    try {\n      properties.load(new FileInputStream(propertiesFileName));\n    } catch (IOException e) {\n      throw new RuntimeException(\"failed to read \" + propertiesFileName + \" file - \" + e, e);\n    }\n\n    return properties;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2286, "initialization": ["File file = new File(String)"], "initializationStart": [1003], "initializationEnd": [1060], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["error(String,*)", "HttpServletResponse.getWriter()", "getMessage()", "print(String)"], "tryExpressionStart": 336, "tryExpressionEnd": 340, "tryBlockStart": 336, "tryBlockEnd": 2275, "catchExpressionStart": 1994, "catchExpressionEnd": 2014, "catchBlockStart": 1994, "catchBlockEnd": 2117, "exceptionHandlingCallStart": [2022, 2061, 2095, 2061], "exceptionHandlingCallEnd": [2053, 2077, 2109, 2110], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 1267, "focalAPIEnd": 1292, "followUpCheck": "null != fis", "checkType": "IF", "followUpCheckExpressionStart": 2204, "followUpCheckExpressionEnd": 2229, "followUpCheckBlockStart": 2204, "followUpCheckBlockEnd": 2269, "use": ["Properties.load(fis)", "fis.close()", "fis.close()"], "useStart": [1470, 1810, 1846], "useEnd": [1495, 1830, 1865], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 2118, "finallyExpressionEnd": 2126, "finallyBlockStart": 2118, "finallyBlockEnd": 2275, "cleanUpCallStart": [1810], "cleanUpCallEnd": [1830], "url": "https://github.com/henryyan/kft-activiti-demo/tree/master/src/main/java/me/kafeitu/modules/web/servlet/PropertiesServlet.java", "rawCode": "  /**\n   * 分文件获取全部属性\n   *\n   * @param resp\n   * @throws ServletException\n   * @throws IOException\n   */\n  protected void writePropertiesBySplit(HttpServletResponse resp)\n      throws ServletException, IOException {\n    InputStream inputStream = null;\n    InputStream cInputStream = null;\n    StringBuilder sb = new StringBuilder();\n    try {\n      ClassLoader loader = Thread.currentThread().getContextClassLoader();\n      inputStream = loader.getResourceAsStream(\"application-files.properties\");\n      Properties props = new LinkedProperties();\n      props.load(inputStream);\n      Set<Object> fileKeySet = props.keySet();\n      for (Object obj : fileKeySet) {\n        logger.debug(\"读取文件:key={}, value={}\", obj, props.getProperty(obj.toString()));\n        sb.append(\n            \"<span style='color:red;font-weight:bold;'>\"\n                + props.getProperty(obj.toString())\n                + \"</span><br/>\");\n        if (props.getProperty(obj.toString()).startsWith(\"file:\")) {\n          File file = new File(props.getProperty(obj.toString()).split(\":\")[1]);\n          if (file.getParentFile() != null && !file.getParentFile().exists()) {\n            continue;\n          }\n          if (!file.exists()) {\n            continue;\n          }\n          cInputStream = new FileInputStream(file);\n        } else {\n          cInputStream = loader.getResourceAsStream(props.getProperty(obj.toString()));\n        }\n\n        Properties cProps = new LinkedProperties();\n        cProps.load(cInputStream);\n        Set<Object> cFileKeySet = cProps.keySet();\n        for (Object cObj : cFileKeySet) {\n          sb.append(\n              cObj.toString()\n                  + \"<span style='color:red;font-weight:bold;'>=</span>\"\n                  + cProps.get(cObj.toString())\n                  + \"<br/>\");\n        }\n        cInputStream.close();\n      }\n      inputStream.close();\n      resp.setContentType(\"text/html\");\n      resp.getWriter().print(\"<html><body>\" + sb.toString() + \"</body></html>\");\n    } catch (Exception e) {\n      logger.error(\"删除本地配置文件的属性:\", e);\n      resp.getWriter().print(\"error:\" + e.getMessage());\n    } finally {\n      if (null != inputStream) {\n        inputStream.close();\n      }\n      if (null != cInputStream) {\n        cInputStream.close();\n      }\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2287, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(file.isDirectory()) &&  !(visited.contains(file,))", "guardType": "IF {", "guardExpressionStart": 112, "guardExpressionEnd": 141, "guardBlockStart": 112, "guardBlockEnd": 200, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 955, "focalAPIEnd": 982, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["copy(fis,OutputStream)", "fis.close()"], "useStart": [990, 1041], "useEnd": [1033, 1061], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cloudsmith/geppetto/tree/master/org.cloudsmith.geppetto.common/src/org/cloudsmith/geppetto/common/os/OsUtil.java", "rawCode": "  private static void copyRecursive(File source, File target, Set<File> visited)\n      throws IOException {\n    if (visited.contains(source)) throw new IOException(\"Circular file structure detected\");\n\n    visited.add(source);\n\n    if (source.isDirectory()) {\n      for (File subSource : source.listFiles()) {\n        File subTarget = new File(target, subSource.getPath());\n        subTarget.mkdirs();\n        if (!subTarget.isDirectory())\n          throw new IOException(\n              \"Unable to create or access directory \" + subTarget.getAbsolutePath());\n        copyRecursive(subSource, subTarget, visited);\n      }\n    } else {\n      File directory = target.getParentFile();\n      directory.mkdirs();\n      if (!directory.isDirectory())\n        throw new IOException(\n            \"Unable to create or access directory \" + directory.getAbsolutePath());\n      OutputStream targetStream = new FileOutputStream(target);\n      InputStream sourceStream = new FileInputStream(source);\n      StreamUtil.copy(sourceStream, targetStream);\n      sourceStream.close();\n      targetStream.close();\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2288, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 58, "tryExpressionEnd": 62, "tryBlockStart": 58, "tryBlockEnd": 364, "catchExpressionStart": 246, "catchExpressionEnd": 266, "catchBlockStart": 246, "catchBlockEnd": 364, "exceptionHandlingCallStart": [280], "exceptionHandlingCallEnd": [325], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 98, "focalAPIEnd": 134, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fis.read()", "fis.close()"], "useStart": [161, 185], "useEnd": [171, 196], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/services/java/com/android/server/LightsService.java", "rawCode": "        public boolean getFlashlightEnabled() {\n          try {\n            FileInputStream fis = new FileInputStream(FLASHLIGHT_FILE);\n            int result = fis.read();\n            fis.close();\n            return (result != '0');\n          } catch (Exception e) {\n            Slog.e(TAG, \"getFlashlightEnabled failed\", e);\n            return false;\n          }\n        }\n"}, {"dataset": "FileInputStream", "exampleID": 2289, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 1013, "focalAPIEnd": 1041, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["FileInputStream.read(fis)"], "useStart": [1006], "useEnd": [1042], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/srnsw/xena/tree/master/plugins/email/ext/src/poi-3.2-FINAL/src/examples/src/org/apache/poi/hpsf/examples/WriteAuthorAndTitle.java", "rawCode": "  /**\n   * Runs the example program.\n   *\n   * @param args Command-line arguments. The first command-line argument must be the name of a POI\n   *     filesystem to read.\n   * @throws IOException if any I/O exception occurs.\n   */\n  public static void main(final String[] args) throws IOException {\n    /* Check whether we have exactly two command-line arguments. */\n    if (args.length != 2) {\n      System.err.println(\n          \"Usage: \" + WriteAuthorAndTitle.class.getName() + \" originPOIFS destinationPOIFS\");\n      System.exit(1);\n    }\n\n    /* Read the names of the origin and destination POI filesystems. */\n    final String srcName = args[0];\n    final String dstName = args[1];\n\n    /* Read the origin POIFS using the eventing API. The real work is done\n     * in the class ModifySICopyTheRest which is registered here as a\n     * POIFSReader. */\n    final POIFSReader r = new POIFSReader();\n    final ModifySICopyTheRest msrl = new ModifySICopyTheRest(dstName);\n    r.registerListener(msrl);\n    r.read(new FileInputStream(srcName));\n\n    /* Write the new POIFS to disk. */\n    msrl.close();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2290, "initialization": ["File file = new File(*)"], "initializationStart": [186], "initializationEnd": [213], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 286, "tryExpressionEnd": 290, "tryBlockStart": 286, "tryBlockEnd": 499, "catchExpressionStart": 433, "catchExpressionEnd": 455, "catchBlockStart": 433, "catchBlockEnd": 499, "exceptionHandlingCallStart": [469], "exceptionHandlingCallEnd": [492], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 343, "focalAPIEnd": 368, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new DataInputStream(fis)"], "useStart": [323], "useEnd": [369], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dukeboard/kevoree-extra/tree/master/org.kevoree.extra.osgi.jpaxos/src/main/java/lsr/paxos/storage/SingleNumberWriter.java", "rawCode": "  /**\n   * Reads number from file. If the file doesn't exist, returns 0.\n   *\n   * @return number from file or 0 if file doesn't exist\n   */\n  public long readNumber() {\n    File file = new File(currentFilePath());\n\n    if (!file.exists()) {\n      return 0;\n    }\n\n    long number;\n    try {\n      DataInputStream stream = new DataInputStream(new FileInputStream(file));\n      number = stream.readLong();\n      stream.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    return number;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2291, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 271, "focalAPIEnd": 296, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bmcdorman/CBCJVM/tree/master/eclipse/src/cbcdownloader/USBDownloader.java", "rawCode": "  private static boolean sendFile(OutputStream out, InputStream in, File file, String path)\n      throws IOException {\n    ByteArrayOutputStream stream = new ByteArrayOutputStream();\n    DataOutputStream dStream = new DataOutputStream(stream);\n\n    FileInputStream fIn = new FileInputStream(file);\n    ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n    byte[] buff = new byte[512];\n    int len = 0;\n    while ((len = fIn.read(buff)) != -1) bOut.write(buff, 0, len);\n\n    byte[] fileData = bOut.toByteArray();\n\n    System.out.println(new String());\n\n    dStream.writeByte(3);\n    dStream.writeShort(2 + path.length() + 2 + fileData.length);\n\n    dStream.writeShort(path.length());\n    dStream.write(path.getBytes());\n\n    dStream.writeShort(bOut.toByteArray().length);\n    dStream.write(bOut.toByteArray());\n\n    new Packet(stream.toByteArray()).write(out, in);\n\n    return true;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2292, "initialization": ["File file = new File(File,String)"], "initializationStart": [178], "initializationEnd": [197], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["toString()", "e(String,*)"], "tryExpressionStart": 92, "tryExpressionEnd": 96, "tryBlockStart": 92, "tryBlockEnd": 876, "catchExpressionStart": 539, "catchExpressionEnd": 561, "catchBlockStart": 539, "catchBlockEnd": 607, "exceptionHandlingCallStart": [438, 569], "exceptionHandlingCallEnd": [484, 600], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 211, "focalAPIEnd": 238, "followUpCheck": "fis != null", "checkType": "IF", "followUpCheckExpressionStart": 696, "followUpCheckExpressionEnd": 712, "followUpCheckBlockStart": 696, "followUpCheckBlockEnd": 870, "use": ["fis.getChannel()", "fis.close()"], "useStart": [263, 739], "useEnd": [279, 750], "hasFinally": 1, "cleanUpCall": ["FileInputStream.close()"], "finallyExpressionStart": 680, "finallyExpressionEnd": 688, "finallyBlockStart": 680, "finallyBlockEnd": 876, "cleanUpCallStart": [739], "cleanUpCallEnd": [750], "url": "https://github.com/arnevidar/TimeApp/tree/master/android/src/com/punchmachine/filehandling/EmailSettings.java", "rawCode": "  private void readFile() {\n    String jsonString = \"\";\n    FileInputStream fIn = null;\n    try {\n      File dir = Environment.getExternalStorageDirectory();\n      File myFile = new File(dir, path);\n      fIn = new FileInputStream(myFile);\n      FileChannel fc = fIn.getChannel();\n      MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());\n      /* Instead of using default, pass in a decoder. */\n      jsonString = Charset.defaultCharset().decode(bb).toString();\n      jsonObject = new JSONObject(jsonString);\n    } catch (IOException e) {\n      Log.e(\"ReadFile\", e.toString());\n    } catch (JSONException je) {\n      Log.e(\"JSON ex\", je.toString());\n    } finally {\n      if (fIn != null) {\n        try {\n          fIn.close();\n        } catch (IOException ioe) {\n          Log.e(\"EmailSettings.java, readFile\", ioe.toString());\n        }\n      }\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2293, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 624, "focalAPIEnd": 654, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ObjectInputStream(fis)"], "useStart": [602], "useEnd": [655], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/edwardlzk/SearchEngine/tree/master/src/edu/nyu/cs/cs2580/hw3/IndexerFullScan.java", "rawCode": "  /**\n   * Loads the index from the index file.\n   *\n   * <p>N.B. For this particular implementation, loading the index from the simple serialization\n   * format is in fact slower than constructing the index from scratch. For the more efficient\n   * indices, loading should be much faster than constructing.\n   *\n   * @throws IOException, ClassNotFoundException\n   */\n  @Override\n  public void loadIndex() throws IOException, ClassNotFoundException {\n    String indexFile = _options._indexPrefix + \"/corpus.idx\";\n    System.out.println(\"Load index from: \" + indexFile);\n\n    ObjectInputStream reader = new ObjectInputStream(new FileInputStream(indexFile));\n    IndexerFullScan loaded = (IndexerFullScan) reader.readObject();\n\n    this._documents = loaded._documents;\n    // Compute numDocs and totalTermFrequency b/c Indexer is not serializable.\n    this._numDocs = _documents.size();\n    for (Integer freq : loaded._termCorpusFrequency.values()) {\n      this._totalTermFrequency += freq;\n    }\n    this._dictionary = loaded._dictionary;\n    this._terms = loaded._terms;\n    this._termCorpusFrequency = loaded._termCorpusFrequency;\n    this._termDocFrequency = loaded._termDocFrequency;\n    reader.close();\n\n    System.out.println(\n        Integer.toString(_numDocs)\n            + \" documents loaded \"\n            + \"with \"\n            + Long.toString(_totalTermFrequency)\n            + \" terms!\");\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2294, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "file!=null", "guardType": "IF {", "guardExpressionStart": 73, "guardExpressionEnd": 90, "guardBlockStart": 73, "guardBlockEnd": 232, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 106, "focalAPIEnd": 131, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lowasser/guava-experimental/tree/master/guava/src/com/google/common/io/FileBackedOutputStream.java", "rawCode": "  private synchronized InputStream openStream() throws IOException {\n    if (file != null) {\n      return new FileInputStream(file);\n    } else {\n      return new ByteArrayInputStream(memory.getBuffer(), 0, memory.getCount());\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2295, "initialization": ["File file = new File(String)"], "initializationStart": [146], "initializationEnd": [164], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new RuntimeException(String,*)"], "tryExpressionStart": 364, "tryExpressionEnd": 368, "tryBlockStart": 364, "tryBlockEnd": 609, "catchExpressionStart": 505, "catchExpressionEnd": 525, "catchBlockStart": 505, "catchBlockEnd": 609, "exceptionHandlingCallStart": [540], "exceptionHandlingCallEnd": [602], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 398, "focalAPIEnd": 423, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cotrix/cotrixrep/tree/master/cotrix/cotrix-configuration/src/main/java/org/cotrix/configuration/ConfigurationLocator.java", "rawCode": "  private InputStream resolve(String location) {\n\n    if (location == null) throw new RuntimeException(\"location is undefined\");\n\n    File file = new File(location);\n\n    if (!file.exists() || !file.canRead() || file.isDirectory())\n      throw new RuntimeException(\n          \"configuration @ \" + file + \" does not exist, cannot be read, or is a directory\");\n\n    try {\n\n      InputStream stream = new FileInputStream(file);\n\n      log.info(\"using configuration @ {}\", file);\n\n      return stream;\n\n    } catch (Exception e) {\n\n      throw new RuntimeException(\"cannot read configuration @ \" + file, e);\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2296, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "toString()", "getString(String)", "showMessageDialog(*,*,*,*)"], "tryExpressionStart": 187, "tryExpressionEnd": 191, "tryBlockStart": 187, "tryBlockEnd": 742, "catchExpressionStart": 549, "catchExpressionEnd": 571, "catchBlockStart": 549, "catchBlockEnd": 742, "exceptionHandlingCallStart": [579, 655, 671, 608], "exceptionHandlingCallEnd": [600, 669, 707, 735], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 230, "focalAPIEnd": 336, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new InputStreamReader(fis)", "fis.close()"], "useStart": [387, 531], "useEnd": [412, 541], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/release-3-1-0-pre5/src/lib/com/izforge/izpack/frontend/FrontendLicence.java", "rawCode": "  /**\n   * Gets the license text.\n   *\n   * @return The license text.\n   */\n  private String getLicenceText() {\n    StringBuffer buffer = new StringBuffer();\n\n    // We read the file\n    try {\n      FileInputStream in =\n          new FileInputStream(\n              Frontend.IZPACK_HOME + \"legal\" + File.separator + \"IzPack-Licence.txt\");\n      BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n      int c = 0;\n      while (c != -1) {\n        c = reader.read();\n        buffer.append((char) c);\n      }\n\n      in.close();\n    } catch (Exception err) {\n      err.printStackTrace();\n      JOptionPane.showMessageDialog(\n          this, err.toString(), langpack.getString(\"frontend.error\"), JOptionPane.ERROR_MESSAGE);\n    }\n\n    // We return it\n    return buffer.toString();\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2297, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(name)", "focalAPIStart": 946, "focalAPIEnd": 981, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new InputStreamReader(fis)", "fis.close()"], "useStart": [1032, 3080], "useEnd": [1058, 3091], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ieure/lucene-solr-snapshot/tree/master/lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/Syns2Index.java", "rawCode": "  /** Takes arg of prolog file name and index directory. */\n  public static void main(String[] args) throws Throwable {\n    // get command line arguments\n    String prologFilename = null; // name of file \"wn_s.pl\"\n    String indexDir = null;\n    if (args.length == 2) {\n      prologFilename = args[0];\n      indexDir = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    // ensure that the prolog file is readable\n    if (!(new File(prologFilename)).canRead()) {\n      err.println(\"Error: cannot read Prolog file: \" + prologFilename);\n      System.exit(1);\n    }\n    // exit if the target index directory already exists\n    if ((new File(indexDir)).isDirectory()) {\n      err.println(\"Error: index directory already exists: \" + indexDir);\n      err.println(\"Please specify a name of a non-existent directory\");\n      System.exit(1);\n    }\n\n    o.println(\"Opening Prolog file \" + prologFilename);\n    final FileInputStream fis = new FileInputStream(prologFilename);\n    final BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n    String line;\n\n    // maps a word to all the \"groups\" it's in\n    final Map<String, List<String>> word2Nums = new TreeMap<String, List<String>>();\n    // maps a group to all the words in it\n    final Map<String, List<String>> num2Words = new TreeMap<String, List<String>>();\n    // number of rejected words\n    int ndecent = 0;\n\n    // status output\n    int mod = 1;\n    int row = 1;\n    // parse prolog file\n    o.println(\"[1/2] Parsing \" + prologFilename);\n    while ((line = br.readLine()) != null) {\n      // occasional progress\n      if ((++row) % mod == 0) // periodically print out line we read in\n      {\n        mod *= 2;\n        o.println(\n            \"\\t\"\n                + row\n                + \" \"\n                + line\n                + \" \"\n                + word2Nums.size()\n                + \" \"\n                + num2Words.size()\n                + \" ndecent=\"\n                + ndecent);\n      }\n\n      // syntax check\n      if (!line.startsWith(\"s(\")) {\n        err.println(\"OUCH: \" + line);\n        System.exit(1);\n      }\n\n      // parse line\n      line = line.substring(2);\n      int comma = line.indexOf(',');\n      String num = line.substring(0, comma);\n      int q1 = line.indexOf('\\'');\n      line = line.substring(q1 + 1);\n      int q2 = line.lastIndexOf('\\'');\n      String word = line.substring(0, q2).toLowerCase().replace(\"''\", \"'\");\n\n      // make sure is a normal word\n      if (!isDecent(word)) {\n        ndecent++;\n        continue; // don't store words w/ spaces\n      }\n\n      // 1/2: word2Nums map\n      // append to entry or add new one\n      List<String> lis = word2Nums.get(word);\n      if (lis == null) {\n        lis = new LinkedList<String>();\n        lis.add(num);\n        word2Nums.put(word, lis);\n      } else lis.add(num);\n\n      // 2/2: num2Words map\n      lis = num2Words.get(num);\n      if (lis == null) {\n        lis = new LinkedList<String>();\n        lis.add(word);\n        num2Words.put(num, lis);\n      } else lis.add(word);\n    }\n\n    // close the streams\n    fis.close();\n    br.close();\n\n    // create the index\n    o.println(\n        \"[2/2] Building index to store synonyms, \"\n            + \" map sizes are \"\n            + word2Nums.size()\n            + \" and \"\n            + num2Words.size());\n    index(indexDir, word2Nums, num2Words);\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2298, "initialization": ["File file = new File(String)"], "initializationStart": [1292], "initializationEnd": [1320], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["setInSetup(boolean)"], "tryExpressionStart": 208, "tryExpressionEnd": 212, "tryBlockStart": 208, "tryBlockEnd": 1643, "catchExpressionStart": 1569, "catchExpressionEnd": 1592, "catchBlockStart": 1569, "catchBlockEnd": 1643, "exceptionHandlingCallStart": [1431], "exceptionHandlingCallEnd": [1447], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "file.exists()", "guardType": "IF {", "guardExpressionStart": 1329, "guardExpressionEnd": 1355, "guardBlockStart": 1329, "guardBlockEnd": 1482, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 1374, "focalAPIEnd": 1407, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["load(fis)"], "useStart": [1356], "useEnd": [1408], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/phillco/Disasteroids/tree/master/Disasteroids/trunk/src/disasteroids/Settings.java", "rawCode": "  /**\n   * Loads settings from <code>SETTINGS_FILE_PATH</code>, if it exists.\n   *\n   * @return whether settings were loaded\n   */\n  public static boolean loadFromStorage() {\n    boolean bSuccess = true;\n    try {\n      // Create the default settings.\n      // if ( defaultSettings == null )\n      {\n        defaultSettings = new Properties();\n        defaultSettings.put(\"musicOn\", String.valueOf(true));\n        defaultSettings.put(\"soundOn\", String.valueOf(true));\n        defaultSettings.put(\"fullscreenMode\", String.valueOf(true));\n        defaultSettings.put(\"qualityRendering\", String.valueOf(true));\n        defaultSettings.put(\"lastConnectionIP\", \"localhost\");\n        defaultSettings.put(\"lastLevel\", \"wave\");\n        defaultSettings.put(\"highScore\", String.valueOf(2000));\n        defaultSettings.put(\"highScorer\", \"Phillip & Andy\");\n        // defaultSettings.put( \"lowScore\", String.valueOf( -2000 ) );\n        // defaultSettings.put( \"lowScorer\", \"Matt\" );\n        defaultSettings.put(\"playerName\", \"Player\");\n        defaultSettings.put(\"playerColor\", String.valueOf(Color.red.getRGB()));\n      }\n\n      // Create the user's settings with the defaults as a base.\n      userSettings = new Properties(defaultSettings);\n\n      // Load the settings file.\n      File settingsFile = new File(SETTINGS_FILE_PATH);\n\n      if (settingsFile.exists()) userSettings.load(new FileInputStream(settingsFile));\n      else {\n        setInSetup(true);\n        bSuccess = false;\n      }\n\n      oldHighScore = getHighScore();\n      oldHighScorer = getHighScoreName();\n    } catch (IOException ex) {\n      setInSetup(true);\n      return false;\n    }\n\n    // Success!\n    return bSuccess;\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2299, "initialization": ["File file = new File(String)"], "initializationStart": [188], "initializationEnd": [206], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["error(String,*)"], "tryExpressionStart": 305, "tryExpressionEnd": 309, "tryBlockStart": 305, "tryBlockEnd": 1231, "catchExpressionStart": 610, "catchExpressionEnd": 644, "catchBlockStart": 610, "catchBlockEnd": 743, "exceptionHandlingCallStart": [652], "exceptionHandlingCallEnd": [694], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "file.exists()", "guardType": "IF {", "guardExpressionStart": 417, "guardExpressionEnd": 443, "guardBlockStart": 417, "guardBlockEnd": 573, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 471, "focalAPIEnd": 504, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["updatePayload(*,fis)"], "useStart": [514], "useEnd": [564], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/the-fascinator/the-fascinator/tree/master/core/src/main/java/com/googlecode/fascinator/IndexClient.java", "rawCode": "  /**\n   * Update the rules object associated with this object\n   *\n   * @param rulesOid The rulesOid to update\n   */\n  private void updateRules(String rulesOid) {\n    File externalFile = new File(rulesOid);\n    DigitalObject rulesObj = null;\n\n    // Make sure our rules file in storage is up-to-date\n    try {\n      rulesObj = realStorage.getObject(rulesOid);\n      // Update if the external rules file exists\n      if (externalFile.exists()) {\n        InputStream in = new FileInputStream(externalFile);\n        rulesObj.updatePayload(externalFile.getName(), in);\n      }\n\n      // InputStream problem\n    } catch (FileNotFoundException fex) {\n      log.error(\"Error reading rules file\", fex);\n      // Doesn't exist, we need to add it\n    } catch (StorageException ex) {\n      try {\n        rulesObj = realStorage.createObject(rulesOid);\n        InputStream in = new FileInputStream(externalFile);\n        Payload p = rulesObj.createStoredPayload(externalFile.getName(), in);\n        p.setLabel(\"Fascinator Indexing Rules\");\n      } catch (FileNotFoundException fex) {\n        log.error(\"Error reading rules file\", fex);\n      } catch (StorageException sex) {\n        log.error(\"Error creating rules object\", sex);\n      }\n    }\n  }\n"}, {"dataset": "FileInputStream", "exampleID": 2300, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "fis = fileInputStream.FileInputStream(file)", "focalAPIStart": 650, "focalAPIEnd": 675, "followUpCheck": "fis != null", "checkType": "IF", "followUpCheckExpressionStart": 766, "followUpCheckExpressionEnd": 790, "followUpCheckBlockStart": 766, "followUpCheckBlockEnd": 811, "use": ["getAudioFileFormat(fis,*)", "fis.close()"], "useStart": [690, 791], "useEnd": [742, 810], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 750, "finallyExpressionEnd": 758, "finallyBlockStart": 750, "finallyBlockEnd": 817, "cleanUpCallStart": [791], "cleanUpCallEnd": [810], "url": "https://github.com/NineWorlds/jflac/tree/master/jflac-codec/src/main/java/org/kc7bfi/jflac/sound/spi/FlacAudioFileReader.java", "rawCode": "  /**\n   * Obtains the audio file format of the File provided. The File must point to valid audio file\n   * data.\n   *\n   * @param file the File from which file format information should be extracted.\n   * @return an AudioFileFormat object describing the audio file format.\n   * @exception UnsupportedAudioFileException if the File does not point to a valid audio file data\n   *     recognized by the system.\n   * @exception IOException if an I/O exception occurs.\n   */\n  public AudioFileFormat getAudioFileFormat(File file)\n      throws UnsupportedAudioFileException, IOException {\n    InputStream inputStream = null;\n    try {\n      inputStream = new FileInputStream(file);\n      return getAudioFileFormat(inputStream, (int) file.length());\n    } finally {\n      if (inputStream != null) inputStream.close();\n    }\n  }\n"}]