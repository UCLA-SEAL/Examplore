[{"dataset": "getExternalStorageDirectory", "exampleID": 1801, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 360, "focalAPIEnd": 401, "followUpCheck": "!f.renameTo(new File(path))", "checkType": "IF", "followUpCheckExpressionStart": 670, "followUpCheckExpressionEnd": 702, "followUpCheckBlockStart": 670, "followUpCheckBlockEnd": 738, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/polyvi/cordova-plugin-media/tree/master/src/android/AudioPlayer.java", "rawCode": "  /**\n   * Save temporary recorded file to specified name\n   *\n   * @param file\n   */\n  public void moveFile(String file) {\n    /* this is a hack to save the file as the specified name */\n    File f = new File(this.tempFile);\n\n    if (!file.startsWith(\"/\")) {\n      if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n        file = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + file;\n      } else {\n        file = \"/data/data/\" + handler.cordova.getActivity().getPackageName() + \"/cache/\" + file;\n      }\n    }\n\n    String logMsg = \"renaming \" + this.tempFile + \" to \" + file;\n    Log.d(LOG_TAG, logMsg);\n    if (!f.renameTo(new File(file))) Log.e(LOG_TAG, \"FAILED \" + logMsg);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1802, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 433, "focalAPIEnd": 474, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.toString()"], "useStart": [433], "useEnd": [485], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ktoonsez/AOKP-I777/tree/master/packages/apps/Settings/src/com/android/settings/applications/ManageApplications.java", "rawCode": "  void updateStorageUsage() {\n    if (mCurView == VIEW_RUNNING) {\n      return;\n    }\n\n    long freeStorage = 0;\n    long appStorage = 0;\n    long totalStorage = 0;\n    CharSequence newLabel = null;\n\n    if (mFilterApps == FILTER_APPS_SDCARD) {\n      if (mLastShowedInternalStorage) {\n        mLastShowedInternalStorage = false;\n      }\n      newLabel = getActivity().getText(R.string.sd_card_storage);\n      mSDCardFileStats.restat(Environment.getExternalStorageDirectory().toString());\n      try {\n        totalStorage = (long) mSDCardFileStats.getBlockCount() * mSDCardFileStats.getBlockSize();\n        freeStorage =\n            (long) mSDCardFileStats.getAvailableBlocks() * mSDCardFileStats.getBlockSize();\n      } catch (IllegalArgumentException e) {\n        // use the old value of mFreeMem\n      }\n      final int N = mApplicationsAdapter.getCount();\n      for (int i = 0; i < N; i++) {\n        ApplicationsState.AppEntry ae = mApplicationsAdapter.getAppEntry(i);\n        appStorage += ae.externalCodeSize + ae.externalDataSize;\n      }\n    } else {\n      if (!mLastShowedInternalStorage) {\n        mLastShowedInternalStorage = true;\n      }\n      newLabel = getActivity().getText(R.string.internal_storage);\n      mDataFileStats.restat(\"/data\");\n      try {\n        totalStorage = (long) mDataFileStats.getBlockCount() * mDataFileStats.getBlockSize();\n        freeStorage = (long) mDataFileStats.getAvailableBlocks() * mDataFileStats.getBlockSize();\n      } catch (IllegalArgumentException e) {\n      }\n      final boolean emulatedStorage = Environment.isExternalStorageEmulated();\n      final int N = mApplicationsAdapter.getCount();\n      for (int i = 0; i < N; i++) {\n        ApplicationsState.AppEntry ae = mApplicationsAdapter.getAppEntry(i);\n        appStorage += ae.codeSize + ae.dataSize;\n        if (emulatedStorage) {\n          appStorage += ae.externalCodeSize + ae.externalDataSize;\n        }\n      }\n      freeStorage += mApplicationsState.sumCacheSizes();\n    }\n    if (newLabel != null) {\n      mStorageChartLabel.setText(newLabel);\n    }\n    if (totalStorage > 0) {\n      mColorBar.setRatios(\n          (totalStorage - freeStorage - appStorage) / (float) totalStorage,\n          appStorage / (float) totalStorage,\n          freeStorage / (float) totalStorage);\n      long usedStorage = totalStorage - freeStorage;\n      if (mLastUsedStorage != usedStorage) {\n        mLastUsedStorage = usedStorage;\n        String sizeStr = Formatter.formatShortFileSize(getActivity(), usedStorage);\n        mUsedStorageText.setText(\n            getActivity().getResources().getString(R.string.service_foreground_processes, sizeStr));\n      }\n      if (mLastFreeStorage != freeStorage) {\n        mLastFreeStorage = freeStorage;\n        String sizeStr = Formatter.formatShortFileSize(getActivity(), freeStorage);\n        mFreeStorageText.setText(\n            getActivity().getResources().getString(R.string.service_background_processes, sizeStr));\n      }\n    } else {\n      mColorBar.setRatios(0, 0, 0);\n      if (mLastUsedStorage != -1) {\n        mLastUsedStorage = -1;\n        mUsedStorageText.setText(\"\");\n      }\n      if (mLastFreeStorage != -1) {\n        mLastFreeStorage = -1;\n        mFreeStorageText.setText(\"\");\n      }\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1803, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 122, "focalAPIEnd": 163, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,*)"], "useStart": [100], "useEnd": [246], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ushahidi/Ushahidi_Android/tree/master/Core/src/com/ushahidi/android/app/util/ImageManager.java", "rawCode": "  public static String getPhotoPath(Context context, String pathfileName) {\n    File path =\n        new File(\n            Environment.getExternalStorageDirectory(),\n            String.format(\"%s%s%s\", context.getPackageName(), \"/\", pathfileName));\n\n    if (!path.exists()) {\n      return null;\n    }\n\n    return path.getAbsolutePath();\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1804, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 323, "focalAPIEnd": 364, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getPath()"], "useStart": [323], "useEnd": [374], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/47deg/restrung/tree/master/android-rest/src/main/java/ly/apps/android/rest/utils/FileUtils.java", "rawCode": "  public static File getExternalCacheDir(Context context) {\n    if (hasExternalCacheDir()) {\n      return context.getExternalCacheDir();\n    }\n\n    // Before Froyo we need to construct the external cache dir ourselves\n    final String cacheDir = \"/Android/data/\" + context.getPackageName() + \"/cache/\";\n    return new File(Environment.getExternalStorageDirectory().getPath() + cacheDir);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1805, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 210, "focalAPIEnd": 251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getPath()"], "useStart": [210], "useEnd": [261], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wangwang4git/4MyLove/tree/master/src/com/bbs/whu/utils/MyFileUtils.java", "rawCode": "  public static String getSdcardDataCacheDir(String userName) {\n    if (Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n      File file =\n          new File(\n              Environment.getExternalStorageDirectory().getPath()\n                  + \"/whubbs/data/cache/\"\n                  + userName);\n      if (!file.exists()) {\n        if (file.mkdirs()) {\n          mSdcardDataCacheDir = file.getAbsolutePath();\n        }\n      } else {\n        mSdcardDataCacheDir = file.getAbsolutePath();\n      }\n    }\n    return mSdcardDataCacheDir;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1806, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 192, "focalAPIEnd": 233, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new StatFs(path)"], "useStart": [266], "useEnd": [294], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xstd/private_phone/tree/master/android_code/src/com/xstd/pirvatephone/activity/ShowSDCardMediaActivity.java", "rawCode": "  @SuppressWarnings(\"deprecation\")\n  private void checkLowStorage() {\n    // Check available space only if we are writable\n    if (ImageManager.hasStorage()) {\n      String storageDirectory = Environment.getExternalStorageDirectory().toString();\n      StatFs stat = new StatFs(storageDirectory);\n      long remaining = (long) stat.getAvailableBlocks() * stat.getBlockSize();\n      if (remaining < LOW_STORAGE_THRESHOLD) {\n        mHandler.post(\n            new Runnable() {\n              public void run() {\n                checkLowStorageFinished();\n              }\n            });\n      }\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1807, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 85, "focalAPIEnd": 126, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [76], "useEnd": [140], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_LegacyCamera/tree/master/tests/src/com/android/camera/functional/VideoCaptureIntentTest.java", "rawCode": "  @LargeTest\n  public void testExtraOutput() throws Exception {\n    mFile = new File(Environment.getExternalStorageDirectory(), \"video.tmp\");\n\n    Uri uri = Uri.fromFile(mFile);\n    mIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri);\n    setActivityIntent(mIntent);\n    getActivity();\n\n    recordVideo();\n    pressDone();\n\n    verify(getActivity(), uri);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1808, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 364, "focalAPIEnd": 405, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.startsWith(path)"], "useStart": [428], "useEnd": [457], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_providers_DownloadProvider/tree/master/ui/src/com/android/providers/downloads/ui/DownloadList.java", "rawCode": "  private boolean isOnExternalStorage(Cursor cursor) {\n    String localUriString = cursor.getString(mLocalUriColumnId);\n    if (localUriString == null) {\n      return false;\n    }\n    Uri localUri = Uri.parse(localUriString);\n    if (!localUri.getScheme().equals(\"file\")) {\n      return false;\n    }\n    String path = localUri.getPath();\n    String externalRoot = Environment.getExternalStorageDirectory().getPath();\n    return path.startsWith(externalRoot);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1809, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 254, "focalAPIEnd": 295, "followUpCheck": "!db_man.isDirectoryObserved(path)", "checkType": "IF", "followUpCheckExpressionStart": 459, "followUpCheckExpressionEnd": 497, "followUpCheckBlockStart": 459, "followUpCheckBlockEnd": 579, "use": ["DBManager.addDirectory(path)"], "useStart": [547], "useEnd": [572], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/novoid/tstest/tree/master/android/src/org/me/tagstore/MainPagerActivity.java", "rawCode": "  /** initializes the database */\n  private void initDatabase() {\n\n    //\n    // initialize database manager\n    //\n    DBManager db_man = m_app.getDBManager();\n\n    //\n    // check if the default storage directory is registered\n    //\n    String path = Environment.getExternalStorageDirectory().getAbsolutePath();\n    path += File.separator + ConfigurationSettings.TAGSTORE_DIRECTORY;\n    path += File.separator + getString(R.string.storage_directory);\n\n    if (!db_man.isDirectoryObserved(path)) {\n      //\n      // register path\n      //\n      db_man.addDirectory(path);\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1810, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 646, "focalAPIEnd": 687, "followUpCheck": "path == null", "checkType": "IF", "followUpCheckExpressionStart": 695, "followUpCheckExpressionEnd": 720, "followUpCheckBlockStart": 695, "followUpCheckBlockEnd": 751, "use": ["new File(path,String)"], "useStart": [849], "useEnd": [913], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BeamApp/Transit/tree/master/tests/android/tests/src/com/zutubi/android/junitreport/Compatibility.java", "rawCode": "  /**\n   * A backwards-compatible version of {@link Context#getExternalFilesDir(String)} which falls back\n   * to using {@link Environment#getExternalStorageDirectory()} on API 7 and below.\n   *\n   * @param context context to get the external files directory for\n   * @param type the type of files directory to return (may be null)\n   * @return the path of the directory holding application files on external storage, or null if\n   *     external storage cannot be accessed\n   */\n  public static File getExternalFilesDir(final Context context, final String type) {\n    if (METHOD_GET_EXTERNAL_FILES_DIR == null) {\n      final File externalRoot = Environment.getExternalStorageDirectory();\n      if (externalRoot == null) {\n        return null;\n      }\n\n      final String packageName = context.getApplicationContext().getPackageName();\n      return new File(externalRoot, \"Android/data/\" + packageName + \"/files\");\n    } else {\n      try {\n        return (File) METHOD_GET_EXTERNAL_FILES_DIR.invoke(context, type);\n      } catch (Exception e) {\n        Log.e(LOG_TAG, \"Could not invoke getExternalFilesDir: \" + e.getMessage(), e);\n        return null;\n      }\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1811, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 79, "focalAPIEnd": 120, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [70], "useEnd": [138], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 456, "finallyExpressionEnd": 464, "finallyBlockStart": 456, "finallyBlockEnd": 608, "cleanUpCallStart": [524], "cleanUpCallEnd": [538], "url": "https://github.com/larsrottmann/inovex-app-client/tree/master/Inovex App/src/de/inovex/app/provider/DataUtilities.java", "rawCode": "  public static Bitmap loadThumbnail(String id) {\n    File thumbDir = new File(Environment.getExternalStorageDirectory(), CACHE_DIRECTORY);\n    File thumbFile = new File(thumbDir, String.valueOf(id));\n    if (thumbFile.exists()) {\n      InputStream stream = null;\n      try {\n        stream = new FileInputStream(thumbFile);\n        return BitmapFactory.decodeStream(stream, null, null);\n      } catch (FileNotFoundException e) {\n        // Ignore\n      } finally {\n        try {\n          if (stream != null) {\n            stream.close();\n          }\n        } catch (IOException ignore) {\n        }\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1812, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 7944, "focalAPIEnd": 7985, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)", "new File(path,*)", "path.mkdirs()"], "useStart": [8002, 8050, 8162], "useEnd": [8028, 8082, 8175], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stevegaron/Synodroid/tree/master/src/com/bigpupdev/synodroid/ui/DetailActivity.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  public void handleMessage(Message msgP) {\n    final Synodroid app = (Synodroid) getApplication();\n    final DetailMain main = (DetailMain) mAdapter.getItem(MAIN_ITEM);\n    DetailFiles files = (DetailFiles) mAdapter.getItem(FILE_ITEM);\n    try {\n      if (((Synodroid) getApplication()).DEBUG)\n        Log.v(Synodroid.DS_TAG, \"DetailActivity: Message received with ID = \" + msgP.what);\n    } catch (Exception ex) {\n      /*DO NOTHING*/\n    }\n    switch (msgP.what) {\n      case ResponseHandler.MSG_DETAILS_FILES_RETRIEVED:\n        try {\n          if (app.DEBUG) Log.v(Synodroid.DS_TAG, \"DetailActivity: Receive file listing message.\");\n        } catch (Exception ex) {\n          /*DO NOTHING*/\n        }\n\n        List<TaskFile> tfile = (List<TaskFile>) msgP.obj;\n        try {\n          files.fileAdapter.updateFiles(tfile);\n\n        } catch (Exception e) {\n          if (app.DEBUG)\n            Log.e(\n                Synodroid.DS_TAG,\n                \"DetailActivity: An error occured while trying to update files list:\",\n                e);\n        }\n        break;\n      case ResponseHandler.MSG_PROPERTIES_RECEIVED:\n        try {\n          if (app.DEBUG)\n            Log.v(Synodroid.DS_TAG, \"DetailActivity: Receive task properties message.\");\n        } catch (Exception ex) {\n          /*DO NOTHING*/\n        }\n\n        TaskProperties tp = (TaskProperties) msgP.obj;\n        ul_rate = tp.ul_rate;\n        dl_rate = tp.dl_rate;\n        max_peers = tp.max_peers;\n        priority = tp.priority;\n        seedingRatio = tp.seeding_ratio;\n        seedingTime = tp.seeding_interval;\n        destination = tp.destination;\n\n        try {\n          showDialog(TASK_PROPERTIES_DIALOG);\n        } catch (Exception e) {\n        }\n        break;\n      case ResponseHandler.MSG_SHARED_DIRECTORIES_RETRIEVED:\n        try {\n          if (app.DEBUG)\n            Log.v(Synodroid.DS_TAG, \"DetailActivity: Received shared directory listing message.\");\n        } catch (Exception ex) {\n          /*DO NOTHING*/\n        }\n\n        AlertDialog.Builder builder = new AlertDialog.Builder(DetailActivity.this);\n\n        if (((Synodroid) getApplication())\n            .getServer()\n            .getDsmVersion()\n            .greaterThen(DSMVersion.VERSION3_0)) {\n          final SharedFolderSelection sf = (SharedFolderSelection) msgP.obj;\n          final String[] dirNames = new String[sf.childrens.size()];\n          final String[] dirIDs = new String[sf.childrens.size()];\n          for (int iLoop = 0; iLoop < sf.childrens.size(); iLoop++) {\n            Folder sharedDir = sf.childrens.get(iLoop);\n            dirNames[iLoop] = sharedDir.name;\n            dirIDs[iLoop] = sharedDir.id;\n          }\n          builder.setTitle(getString(R.string.shared_dir_title) + \":\\n\" + sf.name);\n          builder.setItems(\n              dirNames,\n              new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int item) {\n                  dialog.dismiss();\n                  app.executeAsynchronousAction(\n                      main, new GetDirectoryListShares(dirIDs[item]), true);\n                }\n              });\n          builder.setNegativeButton(\n              R.string.button_cancel,\n              new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int item) {\n                  dialog.dismiss();\n                }\n              });\n          if (!sf.name.equals(\"/\")) {\n            builder.setPositiveButton(\n                R.string.button_ok,\n                new DialogInterface.OnClickListener() {\n                  public void onClick(DialogInterface dialog, int item) {\n                    dialog.dismiss();\n                    app.executeAsynchronousAction(main, new SetShared(task, sf.name), true);\n                  }\n                });\n          }\n\n        } else {\n          List<SharedDirectory> newDirs = (List<SharedDirectory>) msgP.obj;\n          final String[] dirNames = new String[newDirs.size()];\n          int selected = -1;\n          for (int iLoop = 0; iLoop < newDirs.size(); iLoop++) {\n            SharedDirectory sharedDir = newDirs.get(iLoop);\n            dirNames[iLoop] = sharedDir.name;\n            if (sharedDir.isCurrent) {\n              selected = iLoop;\n            }\n          }\n          builder.setTitle(getString(R.string.shared_dir_title));\n          builder.setSingleChoiceItems(\n              dirNames,\n              selected,\n              new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int item) {\n                  dialog.dismiss();\n                  app.executeAsynchronousAction(main, new SetShared(task, dirNames[item]), true);\n                }\n              });\n        }\n\n        AlertDialog alert = builder.create();\n        try {\n          alert.show();\n        } catch (BadTokenException e) {\n          // Unable to show dialog probably because intent has been closed. Ignoring...\n        }\n        break;\n        // Details updated\n      case ResponseHandler.MSG_DETAILS_RETRIEVED:\n        try {\n          if (app.DEBUG) Log.v(Synodroid.DS_TAG, \"DetailActivity: Receive task detail message.\");\n        } catch (Exception ex) {\n          /*DO NOTHING*/\n        }\n\n        TaskDetail details = (TaskDetail) msgP.obj;\n        if (!task.isTorrent && !task.isNZB && files != null) {\n          files.updateEmptyValues(getString(R.string.empty_file_list_wrong_type), false);\n        }\n        if (!task.status.equals(details.status)\n            && files != null\n            && (task.isTorrent || task.isNZB)) {\n          if (details != null\n              && details.status != null\n              && details.status.equals(TaskStatus.TASK_DOWNLOADING.name())) {\n            files.updateEmptyValues(getString(R.string.empty_list_loading), true);\n            app.executeAsynchronousAction(main, new GetFilesAction(task), false);\n          } else {\n            files.updateEmptyValues(getString(R.string.empty_file_list), false);\n            files.resetList();\n          }\n        }\n        task.status = details.status;\n        task.isTorrent = details.isTorrent;\n        task.isNZB = details.isNZB;\n        if (main != null) {\n          main.genAdapter.updateDetails(buildGeneralDetails(details));\n          ((DetailTransfer) mAdapter.getItem(TRANSFER_ITEM))\n              .transAdapter.updateDetails(buildTransferDetails(details));\n        }\n        getIntent().putExtra(\"com.bigpupdev.synodroid.ds.Details\", task);\n        destination = details.destination;\n        setStatus(details.getStatus());\n        updateActionBarTitle(details.fileName);\n        menuHelperInvalidate();\n        break;\n      case ResponseHandler.MSG_ERROR:\n        try {\n          if (app.DEBUG) Log.w(Synodroid.DS_TAG, \"DetailActivity: Receive error message.\");\n        } catch (Exception ex) {\n          /*DO NOTHING*/\n        }\n\n        SynoServer server = ((Synodroid) getApplication()).getServer();\n        if (server != null) server.setLastError((String) msgP.obj);\n        android.view.View.OnClickListener ocl =\n            new android.view.View.OnClickListener() {\n              @Override\n              public void onClick(View v) {\n                Crouton.cancelAllCroutons();\n                DetailActivity.this.finish();\n              }\n            };\n        Crouton.makeText(\n                DetailActivity.this,\n                server.getLastError() + \"\\n\\n\" + getText(R.string.click_dismiss),\n                Synodroid.CROUTON_ERROR)\n            .setOnClickListener(ocl)\n            .show();\n        break;\n      case ResponseHandler.MSG_ORIGINAL_FILE_RETRIEVED:\n        try {\n          if (app.DEBUG)\n            Log.v(Synodroid.DS_TAG, \"DetailActivity: Receive original file retreived message.\");\n        } catch (Exception ex) {\n          /*DO NOTHING*/\n        }\n\n        OriginalFile oriFile = (OriginalFile) msgP.obj;\n        File path = Environment.getExternalStorageDirectory();\n        path = new File(path, \"download\");\n        File file = new File(path, oriFile.fileName);\n        try {\n          // Make sure the Pictures directory exists.\n          path.mkdirs();\n          StringBuffer rawData = oriFile.rawData;\n          OutputStream os = new FileOutputStream(file);\n          os.write(rawData.toString().getBytes());\n          os.close();\n          Crouton.makeText(\n                  DetailActivity.this,\n                  getString(R.string.action_download_original_saved),\n                  Synodroid.CROUTON_INFO)\n              .show();\n        } catch (Exception e) {\n          // Unable to create file, likely because external storage is\n          // not currently mounted.\n          try {\n            if (((Synodroid) getApplication()).DEBUG)\n              Log.w(Synodroid.DS_TAG, \"Error writing \" + file + \" to SDCard.\", e);\n          } catch (Exception ex) {\n            /*DO NOTHING*/\n          }\n          Crouton.makeText(\n                  DetailActivity.this,\n                  getString(R.string.action_download_original_failed),\n                  Synodroid.CROUTON_ALERT)\n              .show();\n        }\n        break;\n      default:\n        try {\n          if (app.DEBUG)\n            Log.w(Synodroid.DS_TAG, \"DetailActivity: Ignored message ID = \" + msgP.what);\n        } catch (Exception ex) {\n          /*DO NOTHING*/\n        }\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1813, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 50, "focalAPIEnd": 91, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getPath()"], "useStart": [50], "useEnd": [101], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zinsser/KingCAI/tree/master/src/com/king/cai/common/KingCAIUtils.java", "rawCode": "  public static String getRootPath() {\n    return Environment.getExternalStorageDirectory().getPath() + \"/KingCAI\";\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1814, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 4003, "focalAPIEnd": 4044, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openforis/collect-android/tree/master/android-app/src/main/java/org/openforis/collect/android/management/BaseActivity.java", "rawCode": "  @Override\n  public boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()) {\n      case R.id.menu_exit:\n        AlertMessage.createPositiveNegativeDialog(\n                BaseActivity.this,\n                false,\n                getResources().getDrawable(R.drawable.warningsign),\n                getResources().getString(R.string.exitAppTitle),\n                getResources().getString(R.string.exitAppMessage),\n                getResources().getString(R.string.yes),\n                getResources().getString(R.string.no),\n                new DialogInterface.OnClickListener() {\n                  @Override\n                  public void onClick(DialogInterface dialog, int which) {\n                    if (ApplicationManager.rootEntitySelectionActivity != null) {\n                      ApplicationManager.rootEntitySelectionActivity.finish();\n                    }\n                    if (ApplicationManager.recordSelectionActivity != null) {\n                      ApplicationManager.recordSelectionActivity.finish();\n                    }\n                    if (ApplicationManager.formScreenActivityList != null) {\n                      for (Activity formScreenActivity :\n                          ApplicationManager.formScreenActivityList) {\n                        formScreenActivity.finish();\n                      }\n                    }\n                    if (ApplicationManager.formSelectionActivity != null) {\n                      ApplicationManager.formSelectionActivity.finish();\n                    }\n                    ApplicationManager.mainActivity.finish();\n                  }\n                },\n                new DialogInterface.OnClickListener() {\n                  @Override\n                  public void onClick(DialogInterface dialog, int which) {}\n                },\n                null)\n            .show();\n        return true;\n      case R.id.menu_save:\n        CollectSurvey collectSurveySave = (CollectSurvey) ApplicationManager.getSurvey();\n        DataManager dataManagerSave =\n            new DataManager(\n                collectSurveySave,\n                collectSurveySave.getSchema().getRootEntityDefinitions().get(0).getName(),\n                ApplicationManager.getLoggedInUser());\n        boolean isSuccess = dataManagerSave.saveRecord(this);\n        if (isSuccess) {\n          AlertMessage.createPositiveDialog(\n                  BaseActivity.this,\n                  true,\n                  null,\n                  getResources().getString(R.string.savingDataTitle),\n                  getResources().getString(R.string.savingDataSuccessMessage),\n                  getResources().getString(R.string.okay),\n                  new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {}\n                  },\n                  null)\n              .show();\n        } else {\n          AlertMessage.createPositiveDialog(\n                  BaseActivity.this,\n                  true,\n                  null,\n                  getResources().getString(R.string.savingDataTitle),\n                  getResources().getString(R.string.savingDataFailureMessage),\n                  getResources().getString(R.string.okay),\n                  new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {}\n                  },\n                  null)\n              .show();\n        }\n        return true;\n      case R.id.menu_export:\n        CollectSurvey collectSurveyExport = (CollectSurvey) ApplicationManager.getSurvey();\n        DataManager dataManagerExport =\n            new DataManager(\n                collectSurveyExport,\n                collectSurveyExport.getSchema().getRootEntityDefinitions().get(0).getName(),\n                ApplicationManager.getLoggedInUser());\n        dataManagerExport.saveRecordToXml(\n            ApplicationManager.currentRecord,\n            Environment.getExternalStorageDirectory().toString()\n                + getResources().getString(R.string.exported_data_folder));\n        return true;\n      case R.id.menu_upload:\n        startActivity(new Intent(BaseActivity.this, UploadActivity.class));\n        return true;\n      case R.id.menu_download:\n        startActivity(new Intent(BaseActivity.this, DownloadActivity.class));\n        return true;\n      case R.id.menu_settings:\n        startActivity(new Intent(BaseActivity.this, SettingsScreen.class));\n        return true;\n      case R.id.menu_about:\n        String versionName;\n        try {\n          versionName =\n              this.getPackageManager().getPackageInfo(this.getPackageName(), 0).versionName;\n        } catch (NameNotFoundException e) {\n          versionName = \"\";\n        }\n        AlertMessage.createPositiveDialog(\n                BaseActivity.this,\n                true,\n                null,\n                getResources().getString(R.string.aboutTabTitle),\n                getResources().getString(R.string.lblApplicationName)\n                    + getResources().getString(R.string.app_name)\n                    + \"\\n\"\n                    + getResources().getString(R.string.lblProgramVersionName)\n                    + versionName\n                    + \"\\n\"\n                    + getResources().getString(R.string.lblFormVersionName)\n                    + ApplicationManager.getSurvey().getProjectName(null)\n                    + \" \"\n                    + ApplicationManager.getSurvey()\n                        .getVersions()\n                        .get(ApplicationManager.getSurvey().getVersions().size() - 1)\n                        .getName(),\n                getResources().getString(R.string.okay),\n                new DialogInterface.OnClickListener() {\n                  @Override\n                  public void onClick(DialogInterface dialog, int which) {}\n                },\n                null)\n            .show();\n        return true;\n\n      default:\n        return super.onOptionsItemSelected(item);\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1815, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 443, "focalAPIEnd": 484, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["openDatabase(path,String)"], "useStart": [1007], "useEnd": [1034], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tpruvot/android_packages_apps_SQLiteManager/tree/master/src/dk/andsen/utils/RootFilePicker.java", "rawCode": "  /**\n   * Open a copy file from the root part of the phone. The file is copied to\n   * /mnt/sccard/aSQLiteManager (this method of opening the file did not work with catalogs\n   * containing \".\"\n   *\n   * @param dbPath Path to the file\n   * @param file The name of the file\n   */\n  private void openRootDatabase(String dbPath, String file) {\n    testTempDir();\n    // Does not work with \".\" in temp path (.aSQLiteManager)\n    String tmpPath = Environment.getExternalStorageDirectory().toString() + tempDir;\n    AShellInterface shc = new AShellInterface(suShell, delay, _cont);\n    String cmd = \"cat \" + dbPath + \"/\" + file + \" > \" + tmpPath + \"/\" + file + \".bck\";\n    shc.runCommand(cmd);\n    cmd = \"cat \" + dbPath + \"/\" + file + \" > \" + tmpPath + \"/\" + file;\n    shc.runCommand(cmd);\n    editingDatabase = true;\n    databasePath = dbPath + \"/\" + file;\n    databaseTemp = tmpPath + \"/\" + file;\n    try {\n      Thread.sleep(delay);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n    openDatabase(tmpPath, file);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1816, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getBaseContext()", "getMessage()", "makeText(*,*,*)", "show()"], "tryExpressionStart": 24, "tryExpressionEnd": 28, "tryBlockStart": 24, "tryBlockEnd": 1040, "catchExpressionStart": 930, "catchExpressionEnd": 950, "catchBlockStart": 930, "catchBlockEnd": 1040, "exceptionHandlingCallStart": [973, 991, 958, 958], "exceptionHandlingCallEnd": [989, 1005, 1026, 1033], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 103, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eziosoft/MultiWii_EZ_GUI/tree/master/src/com/ezio/multiwii/aux_pid/PIDActivity.java", "rawCode": "  void ShareIt() {\n\n    try {\n\n      Log.d(\n          \"aaa\",\n          \"File to send:\"\n              + Environment.getExternalStorageDirectory()\n              + \"/MultiWiiLogs/\"\n              + spinnerProfile.getSelectedItem().toString());\n      File myFile =\n          new File(\n              Environment.getExternalStorageDirectory()\n                  + \"/MultiWiiLogs/\"\n                  + spinnerProfile.getSelectedItem().toString());\n      // MimeTypeMap mime = MimeTypeMap.getSingleton();\n      // String ext =\n      // myFile.getName().substring(myFile.getName().lastIndexOf(\".\") +\n      // 1);\n      // String type = mime.getMimeTypeFromExtension(ext);\n      Intent sharingIntent = new Intent(\"android.intent.action.SEND\");\n      sharingIntent.setType(\"*/*\");\n      sharingIntent.putExtra(\"android.intent.extra.STREAM\", Uri.fromFile(myFile));\n      startActivity(Intent.createChooser(sharingIntent, \"Share using\"));\n    } catch (Exception e) {\n      Toast.makeText(getBaseContext(), e.getMessage(), Toast.LENGTH_SHORT).show();\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1817, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 99, "focalAPIEnd": 140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jakubkinst/Course-Manager/tree/master/cd/android_app_sources/src/cz/kinst/jakub/coursemanager/utils/DownloadTask.java", "rawCode": "  @Override\n  protected File doInBackground(JSONObject... resource) {\n    File myFolder = new File(Environment.getExternalStorageDirectory() + \"/\" + FILE_DIRECTORY);\n    myFolder.mkdirs();\n    File file = new File(\"\");\n    try {\n      // get HTTP response\n      file =\n          cm.getResource(resource[0].getInt(\"id\"), myFolder + \"/\" + resource[0].getString(\"name\"));\n    } catch (JSONException e) {\n    }\n    return file;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1818, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 561, "tryExpressionEnd": 565, "tryBlockStart": 561, "tryBlockEnd": 3172, "catchExpressionStart": 2842, "catchExpressionEnd": 2874, "catchBlockStart": 2842, "catchBlockEnd": 2916, "exceptionHandlingCallStart": [2886], "exceptionHandlingCallEnd": [2905], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 681, "focalAPIEnd": 722, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(path)", "environment.getExternalStorageDirectory()", "append(path)"], "useStart": [631, 1161, 1111], "useEnd": [723, 1202, 1203], "hasFinally": 1, "cleanUpCall": ["FileWriter.close()"], "finallyExpressionStart": 2982, "finallyExpressionEnd": 2990, "finallyBlockStart": 2982, "finallyBlockEnd": 3172, "cleanUpCallStart": [3052], "cleanUpCallEnd": [3062], "url": "https://github.com/shinobushiva/jagkuma/tree/master/src/jag/kumamoto/apps/gotochi/RootBroadcastReceiver.java", "rawCode": "  @Override\n  public void onReceive(Context context, Intent intent) {\n\n    if (intent.getAction().equals(LOCATION_CHANGE_ACTION)) {\n      PrefecturesCode cur = (PrefecturesCode) intent.getSerializableExtra(CURRENT_LOCATION);\n      PrefecturesCode before =\n          intent.hasExtra(BEFORE_LOCATION)\n              ? (PrefecturesCode) intent.getSerializableExtra(BEFORE_LOCATION)\n              : null;\n\n      before = PrefecturesCode.Fukuoka;\n      if (cur != null && before != null) {\n\n        // logとしてど時刻、fromの県、toの県を出力する\n        FileWriter fw = null;\n        try {\n          File file =\n              new File(\n                  new StringBuilder()\n                      .append(Environment.getExternalStorageDirectory())\n                      .append(File.separator)\n                      .append(\"gotochi\")\n                      .append(File.separator)\n                      .append(\"log\")\n                      .append(File.separator)\n                      .toString());\n          if (!file.exists()) {\n            file.mkdirs();\n          }\n\n          fw =\n              new FileWriter(\n                  new StringBuilder()\n                      .append(Environment.getExternalStorageDirectory())\n                      .append(File.separator)\n                      .append(\"gotochi\")\n                      .append(File.separator)\n                      .append(\"log\")\n                      .append(File.separator)\n                      .append(\"change_location.log\")\n                      .toString(),\n                  true);\n\n          final Calendar calendar = Calendar.getInstance(Locale.JAPAN);\n\n          Date data =\n              new Date(\n                  calendar.get(Calendar.YEAR) - 1900,\n                  calendar.get(Calendar.MONTH),\n                  calendar.get(Calendar.DAY_OF_MONTH),\n                  calendar.get(Calendar.HOUR_OF_DAY),\n                  calendar.get(Calendar.MINUTE),\n                  calendar.get(Calendar.SECOND));\n          SimpleDateFormat format =\n              new SimpleDateFormat(\"EEE, dd MMM yyy HH:mm:ss\", Locale.ENGLISH);\n\n          fw.write(\n              new StringBuffer()\n                  .append(format.format(data))\n                  .append(\",\")\n                  .append(before.toString())\n                  .append(\",\")\n                  .append(cur.toString())\n                  .append(\"\\n\")\n                  .toString());\n\n          // トーストもついでに表示しておく\n          Toast.makeText(\n                  context,\n                  new StringBuilder()\n                      .append(\"change location \")\n                      .append(\"from \")\n                      .append(before.toString())\n                      .append(\" to \")\n                      .append(cur.toString())\n                      .toString(),\n                  Toast.LENGTH_LONG)\n              .show();\n\n        } catch (FileNotFoundException e) {\n          e.printStackTrace();\n        } catch (IOException e) {\n          e.printStackTrace();\n        } finally {\n          if (fw != null) {\n            try {\n              fw.close();\n            } catch (IOException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      }\n\n      Intent gotochiIntent = new Intent();\n      StringBuilder builder =\n          new StringBuilder()\n              .append(URI_GOTOCHI_SCHEME)\n              .append(\"://\")\n              .append(cur.toString().toLowerCase());\n      if (before != null) {\n        builder.append(\"?\").append(BEFORE_LOCATION_QUERY).append(\"=\").append(before.code);\n      }\n      gotochiIntent.setData(Uri.parse(builder.toString()));\n\n      gotochiIntent.addCategory(CATEGORY_GOTOCHI);\n      gotochiIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\n      gotochiIntent.putExtra(START_FROM_GOTOCHI_APP, true);\n\n      try {\n        context.startActivity(gotochiIntent);\n      } catch (ActivityNotFoundException e) {\n        // TODO エラーハンドリングどうしようか\n        e.printStackTrace();\n      }\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1819, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 106, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["unpackZip(path,String)", "new File(path,String)"], "useStart": [228, 289], "useEnd": [262, 322], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ManuelCintron/Walrus/tree/master/NavLog Calculator/src/com/navlog/activities/MapDownloadActivity.java", "rawCode": "        @Override\n        public void onReceive(Context context, Intent intent) {\n          String path = Environment.getExternalStorageDirectory() + \"/download/\";\n          // String fileName = \"CJ-27-20-South.zip\";\n\n          unpackZip(path, fileName + \".zip\");\n          File zipFile = new File(path, fileName + \".zip\");\n          zipFile.delete();\n        }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1820, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 244, "tryExpressionEnd": 248, "tryBlockStart": 244, "tryBlockEnd": 2479, "catchExpressionStart": 2425, "catchExpressionEnd": 2445, "catchBlockStart": 2425, "catchBlockEnd": 2479, "exceptionHandlingCallStart": [2453], "exceptionHandlingCallEnd": [2472], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 1123, "focalAPIEnd": 1164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(path)"], "useStart": [1230], "useEnd": [1256], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/charlestontelles/INN372-android/tree/master/SolarPowerCalcAndroid/src/au/edu/qut/inn372/greenhat/activity/TabbedOutputActivity.java", "rawCode": "  /**\n   * Exports the financial calculation to a PDF\n   *\n   * <p>TODO: talk to customer to check which information he needs in the report\n   *\n   * @param view\n   */\n  public void exportPDF() {\n\n    String FILE = \"/SolarPowerReport.pdf\";\n    try {\n      Document document = new Document();\n      boolean mExternalStorageAvailable = false;\n      boolean mExternalStorageWriteable = false;\n      String state = Environment.getExternalStorageState();\n      if (Environment.MEDIA_MOUNTED.equals(state)) {\n        // We can read and write the media\n        mExternalStorageAvailable = mExternalStorageWriteable = true;\n      } else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n        // We can only read the media\n        mExternalStorageAvailable = true;\n        mExternalStorageWriteable = false;\n      } else {\n        // Something else is wrong. It may be one of many other states, but all we need\n        // to know is we can neither read nor write\n        mExternalStorageAvailable = mExternalStorageWriteable = false;\n      }\n      String file = null;\n      if (mExternalStorageWriteable) {\n        file = Environment.getExternalStorageDirectory().getPath() + FILE;\n      }\n\n      PdfWriter.getInstance(document, new FileOutputStream(file));\n      document.open();\n      Paragraph p = new Paragraph(\"Calculation Report\");\n      document.add(p);\n      p = new Paragraph(\" \");\n      document.add(p);\n      PdfPTable table = new PdfPTable(3);\n      PdfPCell c1 = new PdfPCell(new Phrase(\"Year\"));\n      c1.setHorizontalAlignment(Element.ALIGN_CENTER);\n      table.addCell(c1);\n\n      c1 = new PdfPCell(new Phrase(\"Cumulative Savings ($)\"));\n      c1.setHorizontalAlignment(Element.ALIGN_CENTER);\n      table.addCell(c1);\n\n      c1 = new PdfPCell(new Phrase(\"ROI\"));\n      c1.setHorizontalAlignment(Element.ALIGN_CENTER);\n      table.addCell(c1);\n      table.setHeaderRows(1);\n      for (Calculation curCalculation : calculatorList.get(0).getCalculations()) {\n        table.addCell(\"\" + df.format(curCalculation.getYear() + 1));\n        table.addCell(\"\" + df.format(curCalculation.getCumulativeSaving()));\n        table.addCell(\n            \"\"\n                + df.format(\n                    curCalculation.getCumulativeSaving()\n                        / calculatorList.get(0).getEquipment().getCost()));\n      }\n      document.add(table);\n\n      document.close();\n\n      showDialog(DIALOG_GENERATE_PDF);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1821, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 608, "focalAPIEnd": 649, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setRootDir(path)"], "useStart": [1065], "useEnd": [1084], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/InfinitumFramework/Infinitum-Core/tree/master/src/main/java/com/clarionmedia/infinitum/internal/caching/AbstractCache.java", "rawCode": "  /**\n   * Enable caching to the phone's internal storage or SD card.\n   *\n   * @param context the current context\n   * @param storageDevice where to store the cached files, either {@link #DISK_CACHE_INTERNAL} or\n   *     {@link #DISK_CACHE_SDCARD})\n   * @return\n   */\n  public boolean enableDiskCache(Context context, int storageDevice) {\n    Context appContext = context.getApplicationContext();\n\n    String rootDir = null;\n    if (storageDevice == DISK_CACHE_SDCARD\n        && Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {\n      // SD-card available\n      rootDir =\n          Environment.getExternalStorageDirectory().getAbsolutePath()\n              + \"/Android/data/\"\n              + appContext.getPackageName()\n              + \"/cache\";\n    } else {\n      File internalCacheDir = appContext.getCacheDir();\n      // apparently on some configurations this can come back as null\n      if (internalCacheDir == null) {\n        return (mIsDiskCacheEnabled = false);\n      }\n      rootDir = internalCacheDir.getAbsolutePath();\n    }\n\n    setRootDir(rootDir);\n\n    File outFile = new File(mDiskCacheDirectory);\n    if (outFile.mkdirs()) {\n      File nomedia = new File(mDiskCacheDirectory, \".nomedia\");\n      try {\n        nomedia.createNewFile();\n      } catch (IOException e) {\n        Log.e(getClass().getName(), \"Failed creating .nomedia file\");\n      }\n    }\n\n    mIsDiskCacheEnabled = outFile.exists();\n\n    if (!mIsDiskCacheEnabled) {\n      Log.w(getClass().getName(), \"Failed creating disk cache directory \" + mDiskCacheDirectory);\n    } else {\n      Log.d(getClass().getName(), \"Enabled write-through to \" + mDiskCacheDirectory);\n      sanitizeDiskCache();\n    }\n\n    return mIsDiskCacheEnabled;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1822, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 85, "focalAPIEnd": 126, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [76], "useEnd": [140], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/android/platform_packages_apps_camera/tree/master/tests/src/com/android/camera/functional/VideoCaptureIntentTest.java", "rawCode": "  @LargeTest\n  public void testExtraOutput() throws Exception {\n    mFile = new File(Environment.getExternalStorageDirectory(), \"video.tmp\");\n\n    Uri uri = Uri.fromFile(mFile);\n    mIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri);\n    setActivityIntent(mIntent);\n    getActivity();\n\n    recordVideo();\n    pressDone();\n\n    verify(getActivity(), uri);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1823, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 342, "focalAPIEnd": 383, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getPath()"], "useStart": [342], "useEnd": [393], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bopang/FaceMe/tree/master/FaceMe_Android/src/com/example/faceme_android/PictureViewActivityXiaoFei.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    state = (ApplicationData) getApplicationContext();\n    setContentView(R.layout.activity_picture_view);\n    ImageView imview = (ImageView) findViewById(R.id.imageView);\n\n    Bitmap tmp =\n        Tools.getBitmapFromPath(\n            Environment.getExternalStorageDirectory().getPath() + \"/CosplayTmp.png\");\n\n    ApplicationData state = (ApplicationData) getApplicationContext();\n    Bitmap nonfacePoster =\n        Tools.getBitmapFromAsset(this.getBaseContext(), \"iron_man_3_FaceXF_noFace.png\");\n    // Tools.getBitmapFromPath(Environment.getExternalStorageDirectory().getPath()\n    // +\"/CosplayTmp.png\"));\n\n    // CharacterFace facechoosed = state.faceChosed;\n\n    Bitmap userFaceBmp =\n        Bitmap.createScaledBitmap(\n            tmp,\n            (int) (nonfacePoster.getWidth() * 0.22727f),\n            (int) (nonfacePoster.getHeight() * 0.18868),\n            false);\n    Bitmap result =\n        Bitmap.createBitmap(\n            nonfacePoster.getWidth(), nonfacePoster.getHeight(), Bitmap.Config.ARGB_8888);\n    Canvas canvas = new Canvas(result);\n\n    canvas.drawBitmap(\n        userFaceBmp,\n        0.31318f * nonfacePoster.getWidth(),\n        0.16038f * nonfacePoster.getHeight(),\n        null);\n    canvas.drawBitmap(nonfacePoster, 0, 0, null);\n\n    imview.setImageBitmap(result);\n\n    Button btn_share = (Button) findViewById(R.id.button_Share);\n    Button btn_upload = (Button) findViewById(R.id.button_Upload);\n\n    btn_share.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            Intent intent = new Intent(Intent.ACTION_SEND);\n            intent.setType(\"image/png\");\n            File f =\n                new File(Environment.getExternalStorageDirectory().getPath() + \"/CosplayTmp.png\");\n            Uri uri = Uri.fromFile(f);\n            intent.putExtra(Intent.EXTRA_STREAM, uri);\n\n            intent.putExtra(Intent.EXTRA_SUBJECT, \"Share\");\n            intent.putExtra(Intent.EXTRA_TEXT, \"FaceMe is awesome! You should also try this!\");\n            startActivity(Intent.createChooser(intent, getTitle()));\n          }\n        });\n\n    btn_upload.setOnClickListener(\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            createNotification();\n          }\n        });\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1824, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 51, "focalAPIEnd": 92, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [42], "useEnd": [111], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/travp624/packages_apps_BlackICEControl/tree/master/src/com/blackice/control/fragments/Lockscreens.java", "rawCode": "  private File getTempFile() {\n    return new File(Environment.getExternalStorageDirectory(), \".blackice_temp\");\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1825, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "NullPointerException", "exceptionHandlingCall": ["d(String,String)"], "tryExpressionStart": 518, "tryExpressionEnd": 522, "tryBlockStart": 518, "tryBlockEnd": 1153, "catchExpressionStart": 940, "catchExpressionEnd": 971, "catchBlockStart": 940, "catchBlockEnd": 1153, "exceptionHandlingCallStart": [1065], "exceptionHandlingCallEnd": [1144], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 887, "focalAPIEnd": 928, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toDirUrl(path)"], "useStart": [878], "useEnd": [929], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iametza/Ihesi/tree/master/platforms/android/src/org/apache/cordova/file/FileUtils.java", "rawCode": "  private JSONObject requestAllPaths() throws JSONException {\n    Context context = cordova.getActivity();\n    JSONObject ret = new JSONObject();\n    ret.put(\"applicationDirectory\", \"file:///android_asset/\");\n    ret.put(\"applicationStorageDirectory\", toDirUrl(context.getFilesDir().getParentFile()));\n    ret.put(\"dataDirectory\", toDirUrl(context.getFilesDir()));\n    ret.put(\"cacheDirectory\", toDirUrl(context.getCacheDir()));\n    if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n      try {\n        ret.put(\n            \"externalApplicationStorageDirectory\",\n            toDirUrl(context.getExternalFilesDir(null).getParentFile()));\n        ret.put(\"externalDataDirectory\", toDirUrl(context.getExternalFilesDir(null)));\n        ret.put(\"externalCacheDirectory\", toDirUrl(context.getExternalCacheDir()));\n        ret.put(\"externalRootDirectory\", toDirUrl(Environment.getExternalStorageDirectory()));\n      } catch (NullPointerException e) {\n        /* If external storage is unavailable, context.getExternal* returns null */\n        Log.d(LOG_TAG, \"Unable to access these paths, most liklely due to USB storage\");\n      }\n    }\n    return ret;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1826, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 581, "focalAPIEnd": 622, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [645], "useEnd": [672], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/matburt/mobileorg-android/tree/master/MobileOrg/src/main/java/com/matburt/mobileorg/util/FileUtils.java", "rawCode": "  public BufferedWriter getWriter(boolean append) throws IOException {\n    String storageMode = getStorageMode();\n    BufferedWriter writer = null;\n\n    if (storageMode.equals(\"internal\") || storageMode.equals(\"\")) {\n      FileOutputStream fs;\n      String normalized = fileName.replace(\"/\", \"_\");\n      if (append) fs = context.openFileOutput(normalized, Context.MODE_APPEND);\n      else fs = context.openFileOutput(normalized, Context.MODE_PRIVATE);\n      writer = new BufferedWriter(new OutputStreamWriter(fs));\n\n    } else if (storageMode.equals(\"sdcard\")) {\n      File root = Environment.getExternalStorageDirectory();\n      File morgDir = new File(root, \"mobileorg\");\n      morgDir.mkdir();\n      if (morgDir.canWrite()) {\n        File orgFileCard = new File(morgDir, fileName);\n        FileWriter orgFWriter = new FileWriter(orgFileCard, append);\n        writer = new BufferedWriter(orgFWriter);\n      }\n    }\n\n    return writer;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1827, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 390, "focalAPIEnd": 431, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getAbsolutePath()"], "useStart": [390], "useEnd": [449], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xstd/private_phone/tree/master/android_code/src/com/xstd/pirvatephone/activity/AddPrivacyPictureActivity.java", "rawCode": "  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    if (REQUEST_CAMERA_CODE == requestCode && RESULT_OK == resultCode) {\n      PrivacyFileDao dao = PrivacyDaoUtils.getFileDao(this);\n      com.plugin.common.utils.files.FileInfo info = new com.plugin.common.utils.files.FileInfo();\n      info.fileName = fileName;\n      info.filePath =\n          Environment.getExternalStorageDirectory().getAbsolutePath()\n              + \"DCIM\"\n              + File.separator\n              + \"Camera\";\n\n      dao.insert(\n          new PrivacyFile(\n              null, fileName, fileName, info.filePath, new Date(), 0, Long.valueOf(-1)));\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1828, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 186, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getPath()"], "useStart": [273], "useEnd": [301], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bignerdranch/Roger/tree/master/Android/Roger/src/com/bignerdranch/franklin/roger/network/DownloadManager.java", "rawCode": "  public File getExternalFilesDirPreAPIv8() {\n    if (!Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {\n      return null;\n    }\n\n    File externalStorageDir = Environment.getExternalStorageDirectory();\n    String ourExternalStoragePath =\n        externalStorageDir.getPath() + \"/Android/data/\" + context.getPackageName() + \"/files\";\n    File ourExternalStorageDir = new File(ourExternalStoragePath);\n    if (!ourExternalStorageDir.exists()) {\n      if (!ourExternalStorageDir.mkdirs())\n        Log.e(TAG, \"Could not create external storage dir at \" + ourExternalStoragePath);\n    }\n\n    return ourExternalStorageDir;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1829, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(*,String,*)"], "tryExpressionStart": 651, "tryExpressionEnd": 655, "tryBlockStart": 651, "tryBlockEnd": 3543, "catchExpressionStart": 1257, "catchExpressionEnd": 1278, "catchBlockStart": 1257, "catchBlockEnd": 1310, "exceptionHandlingCallStart": [3337], "exceptionHandlingCallEnd": [3405], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 736, "focalAPIEnd": 777, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)", "path.mkdirs()", "new File(path,String)"], "useStart": [792, 861, 1027], "useEnd": [853, 874, 1048], "hasFinally": 1, "cleanUpCall": ["cancelNotification(*,int)"], "finallyExpressionStart": 3475, "finallyExpressionEnd": 3483, "finallyBlockStart": 3475, "finallyBlockEnd": 3543, "cleanUpCallStart": [3491], "cleanUpCallEnd": [3536], "url": "https://github.com/stevegaron/Synodroid/tree/master/src/com/bigpupdev/synodroid/server/DownloadIntentService.java", "rawCode": "  /**\n   * The IntentService calls this method from the default worker thread with the intent that started\n   * the service. When this method returns, IntentService stops the service, as appropriate.\n   */\n  @Override\n  protected void onHandleIntent(Intent intent) {\n    String uri = intent.getStringExtra(URL);\n    String cookie = intent.getStringExtra(COOKIE);\n    boolean dbg = intent.getBooleanExtra(DEBUG, false);\n\n    String fname = \"SYNODROID_\" + UUID.randomUUID().toString().replace(\"-\", \"\").toUpperCase();\n    Notification notification =\n        ServiceHelper.getNotificationProgress(this, uri, progress, DL_ID, R.drawable.dl_download);\n\n    try {\n      URL url = new URL(uri); // you can write here any link\n      File path = Environment.getExternalStorageDirectory();\n      path = new File(path, \"Android/data/com.bigpupdev.synodroid/cache/\");\n      path.mkdirs();\n      if (!fname.toLowerCase().endsWith(\".torrent\") && !fname.toLowerCase().endsWith(\".nzb\")) {\n        fname += \".torrent\";\n      }\n      File file = new File(path, fname);\n\n      long startTime = System.currentTimeMillis();\n      try {\n        if (dbg)\n          Log.v(\n              Synodroid.DS_TAG, \"DownloadIntentService: Downloading \" + uri + \" to temp folder...\");\n      } catch (Exception ex) {\n        /*DO NOTHING*/\n      }\n      try {\n        if (dbg)\n          Log.v(\n              Synodroid.DS_TAG,\n              \"DownloadIntentService: Temp file destination: \" + file.getAbsolutePath());\n      } catch (Exception ex) {\n        /*DO NOTHING*/\n      }\n      /* Open a connection to that URL. */\n      HttpURLConnection ucon = (HttpURLConnection) url.openConnection();\n\n      if (cookie != null && !cookie.equals(\"\")) {\n        ucon.setRequestProperty(\"Cookie\", cookie);\n      }\n\n      /*\n       * Define InputStreams to read from the URLConnection.\n       */\n      InputStream is = ucon.getInputStream();\n\n      while (ucon.getResponseCode() == 302) {\n        ucon = (HttpURLConnection) ucon.getURL().openConnection();\n        is = ucon.getInputStream();\n      }\n      int contentLength = ucon.getContentLength();\n\n      /* Convert the Bytes read to a String. */\n      FileOutputStream fos = new FileOutputStream(file);\n\n      BufferedInputStream bis = new BufferedInputStream(is);\n\n      byte[] buf = new byte[1024];\n      int count = 0;\n      int downloadedSize = 0;\n      ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\n      long lastUpdate = 0;\n      while ((count = bis.read(buf)) != -1) {\n        out.write(buf, 0, count);\n        downloadedSize += count;\n        progress = (int) (((float) downloadedSize / ((float) contentLength)) * 100);\n        if (((lastUpdate + 250) < System.currentTimeMillis()) || downloadedSize == contentLength) {\n          ServiceHelper.updateProgress(this, notification, progress, DL_ID);\n        }\n      }\n\n      fos.write(out.toByteArray());\n      fos.flush();\n      fos.close();\n\n      try {\n        if (dbg)\n          Log.v(\n              Synodroid.DS_TAG,\n              \"DownloadIntentService: Download completed. Elapsed time: \"\n                  + ((System.currentTimeMillis() - startTime) / 1000)\n                  + \" sec(s)\");\n      } catch (Exception ex) {\n        /*DO NOTHING*/\n      }\n      uri = Uri.fromFile(file).toString();\n    } catch (Exception e) {\n      try {\n        if (dbg) Log.e(Synodroid.DS_TAG, \"DownloadIntentService: Download Error.\", e);\n      } catch (Exception ex) {\n        /*DO NOTHING*/\n      }\n    } finally {\n      ServiceHelper.cancelNotification(this, DL_ID);\n    }\n\n    boolean out_url = false;\n    if (!uri.startsWith(\"file\")) {\n      out_url = true;\n    }\n\n    AddTaskAction addTask = new AddTaskAction(Uri.parse(uri), out_url, false);\n    Synodroid app = (Synodroid) getApplication();\n    app.executeAsynchronousAction(app.getServer().getResponseHandler(), addTask, false);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1830, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 360, "focalAPIEnd": 401, "followUpCheck": "!f.renameTo(new File(path))", "checkType": "IF", "followUpCheckExpressionStart": 670, "followUpCheckExpressionEnd": 702, "followUpCheckBlockStart": 670, "followUpCheckBlockEnd": 738, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MoSync/MoSync/tree/master/runtimes/java/platforms/androidJNI/AndroidProject/src/org/apache/cordova/AudioPlayer.java", "rawCode": "  /**\n   * Save temporary recorded file to specified name\n   *\n   * @param file\n   */\n  public void moveFile(String file) {\n    /* this is a hack to save the file as the specified name */\n    File f = new File(this.tempFile);\n\n    if (!file.startsWith(\"/\")) {\n      if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n        file = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + file;\n      } else {\n        file = \"/data/data/\" + handler.cordova.getActivity().getPackageName() + \"/cache/\" + file;\n      }\n    }\n\n    String logMsg = \"renaming \" + this.tempFile + \" to \" + file;\n    Log.d(LOG_TAG, logMsg);\n    if (!f.renameTo(new File(file))) Log.e(LOG_TAG, \"FAILED \" + logMsg);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1831, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 174, "focalAPIEnd": 215, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [165], "useEnd": [231], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ushahidi/Ushahidi_Android/tree/master/Core/src/com/ushahidi/android/app/util/Util.java", "rawCode": "  /**\n   * For debugging purposes. Append content of a string to a file\n   *\n   * @param text\n   */\n  public static void appendLog(String text) {\n    File logFile = new File(Environment.getExternalStorageDirectory(), \"ush_log.txt\");\n    if (!logFile.exists()) {\n      try {\n        logFile.createNewFile();\n      } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      }\n    }\n    try {\n      // BufferedWriter for performance, true to set append to file flag\n      BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n      buf.append(text);\n      buf.newLine();\n      buf.close();\n    } catch (IOException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1832, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 52, "focalAPIEnd": 93, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getPath()"], "useStart": [52], "useEnd": [103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/TextReader/TextReader/src/org/geometerplus/fbreader/Paths.java", "rawCode": "  public static String cardDirectory() {\n    return Environment.getExternalStorageDirectory().getPath();\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1833, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 536, "focalAPIEnd": 577, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [615], "useEnd": [657], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/tests/hosttests/test-apps/DownloadManagerTestApp/src/com/android/frameworks/downloadmanagertests/DownloadManagerTestApp.java", "rawCode": "  /**\n   * Tests that downloads resume when switching on/off Airplane mode numerous times at various\n   * intervals.\n   *\n   * <p>Note: Device has no mobile access when running this test.\n   *\n   * @throws Exception if unsuccessful\n   */\n  public void runDownloadMultipleAirplaneModeEnableDisable() throws Exception {\n    String filename = DOWNLOAD_500K_FILENAME;\n    long filesize = DOWNLOAD_500K_FILESIZE;\n    // make sure WiFi is enabled, and airplane mode is not on\n    doCommonDownloadSetup();\n\n    String localDownloadDirectory = Environment.getExternalStorageDirectory().getPath();\n    File downloadedFile = new File(localDownloadDirectory, filename);\n    long dlRequest = -1;\n    try {\n      downloadedFile.delete();\n\n      // Make sure there are no pending downloads currently going on\n      removeAllCurrentDownloads();\n\n      Uri remoteUri = getExternalFileUri(filename);\n      Request request = new Request(remoteUri);\n\n      // Local destination of downloaded file\n      Uri localUri = Uri.fromFile(downloadedFile);\n      Log.i(LOG_TAG, \"setting localUri to: \" + localUri.getPath());\n      request.setDestinationUri(localUri);\n\n      request.setAllowedNetworkTypes(Request.NETWORK_WIFI);\n\n      dlRequest = mDownloadManager.enqueue(request);\n      waitForDownloadToStart(dlRequest);\n      // are we making any progress?\n      waitForFileToGrow(downloadedFile);\n\n      // download disable\n      Log.i(LOG_TAG, \"Turning on Airplane mode...\");\n      setAirplaneModeOn(true);\n      Thread.sleep(60 * 1000); // wait 1 minute\n\n      // download enable\n      Log.i(LOG_TAG, \"Turning off Airplane mode...\");\n      setAirplaneModeOn(false);\n      // make sure we're starting to download some data...\n      waitForFileToGrow(downloadedFile);\n\n      // reenable the connection to start up the download again\n      Log.i(LOG_TAG, \"Turning on Airplane mode again...\");\n      setAirplaneModeOn(true);\n      Thread.sleep(20 * 1000); // wait 20 seconds\n\n      // Finish up the download...\n      Log.i(LOG_TAG, \"Turning off Airplane mode again...\");\n      setAirplaneModeOn(false);\n\n      Log.i(LOG_TAG, \"Waiting up to 3 minutes for donwload to complete...\");\n      waitForDownloadsOrTimeout(dlRequest, 180 * 1000); // wait up to 3 mins before timeout\n      ParcelFileDescriptor pfd = mDownloadManager.openDownloadedFile(dlRequest);\n      verifyFileSize(pfd, filesize);\n    } finally {\n      Log.i(LOG_TAG, \"Cleaning up files...\");\n      if (dlRequest != -1) {\n        mDownloadManager.remove(dlRequest);\n      }\n      downloadedFile.delete();\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1834, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 165, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dalvik/WebCam/tree/master/src/com/iped/ipcam/utils/FileUtil.java", "rawCode": "  public static void openImage(Context context) {\n    if (Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n      String sdDir = Environment.getExternalStorageDirectory().getAbsolutePath(); // 获取跟目录\n      File file = new File(sdDir + parentPath + picForder);\n      if (!file.exists()) {\n        file.mkdirs();\n      }\n      Intent i = new Intent(Intent.ACTION_VIEW);\n      Uri uri = Uri.parse(\"file://\" + file.getPath());\n      i.setDataAndType(uri, \"image/*\");\n      context.startActivity(i);\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1835, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 656, "focalAPIEnd": 697, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new StringBuilder(path)"], "useStart": [738], "useEnd": [763], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/tests/coretests/src/android/app/DownloadManagerBaseTest.java", "rawCode": "  /**\n   * Helper to create a large file of random data on the SD card.\n   *\n   * @param filename (optional) The name of the file to create on the SD card; pass in null to use a\n   *     default temp filename.\n   * @param type The type of file to create\n   * @param subdirectory If not null, the subdirectory under the SD card where the file should go\n   * @return The File that was created\n   * @throws IOException if there was an error while creating the file.\n   */\n  protected File createFileOnSD(String filename, long fileSize, DataType type, String subdirectory)\n      throws IOException {\n\n    // Build up the file path and name\n    String sdPath = Environment.getExternalStorageDirectory().getPath();\n    StringBuilder fullPath = new StringBuilder(sdPath);\n    if (subdirectory != null) {\n      fullPath.append(File.separatorChar).append(subdirectory);\n    }\n\n    File file = null;\n    if (filename == null) {\n      file = File.createTempFile(\"DMTEST_\", null, new File(fullPath.toString()));\n    } else {\n      fullPath.append(File.separatorChar).append(filename);\n      file = new File(fullPath.toString());\n      file.createNewFile();\n    }\n\n    // Fill the file with random data\n    DataOutputStream output = new DataOutputStream(new FileOutputStream(file));\n    final int CHUNK_SIZE = 1000000; // copy random data in 1000000-char chunks\n    long remaining = fileSize;\n    int nextChunkSize = CHUNK_SIZE;\n    byte[] randomData = null;\n    Random rng = new LoggingRng();\n    byte[] chunkSizeData = generateData(nextChunkSize, type, rng);\n\n    try {\n      while (remaining > 0) {\n        if (remaining < CHUNK_SIZE) {\n          nextChunkSize = (int) remaining;\n          remaining = 0;\n          randomData = generateData(nextChunkSize, type, rng);\n        } else {\n          remaining -= CHUNK_SIZE;\n          randomData = chunkSizeData;\n        }\n        output.write(randomData);\n        Log.i(\n            TAG,\n            \"while creating \"\n                + fileSize\n                + \" file, \"\n                + \"remaining bytes to be written: \"\n                + remaining);\n      }\n    } catch (IOException e) {\n      Log.e(LOG_TAG, \"Error writing to file \" + file.getAbsolutePath());\n      file.delete();\n      throw e;\n    } finally {\n      output.close();\n    }\n    return file;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1836, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 114, "focalAPIEnd": 155, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["environment.getExternalStorageDirectory()", "environment.getExternalStorageDirectory()"], "useStart": [196, 294], "useEnd": [237, 335], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rcg0/arc/tree/master/android application/arc/src/com/example/asdf/GetVcard.java", "rawCode": "  @SuppressLint({\"NewApi\", \"NewApi\", \"NewApi\"})\n  protected void onPostExecute(Void result) {\n\n    File xternal = Environment.getExternalStorageDirectory();\n\n    final Uri uri =\n        Uri.parse(Environment.getExternalStorageDirectory() + \"/ARC/\" + button.getTag());\n\n    File file = new File(Environment.getExternalStorageDirectory() + \"/ARC/\" + button.getTag());\n\n    String path = file.getAbsolutePath();\n\n    button.setText(\"Abrir tarjeta de visita: \" + button.getTag());\n\n    button.setOnClickListener(\n        new View.OnClickListener() {\n          public void onClick(View v) {\n            Intent intent = new Intent();\n            File file =\n                new File(Environment.getExternalStorageDirectory() + \"/ARC/\" + button.getTag());\n            Intent i = new Intent(android.content.Intent.ACTION_VIEW);\n            i.setType(\"text/x-vcard\");\n            activity.startActivity(i);\n          }\n        });\n\n    Toast toast =\n        Toast.makeText(\n            activity.getApplicationContext(),\n            \"Archivo \" + button.getTag() + \" descargado\",\n            Toast.LENGTH_SHORT);\n    toast.show();\n\n    activity.setSupportProgressBarIndeterminateVisibility(false);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1837, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 424, "focalAPIEnd": 465, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.toString()"], "useStart": [424], "useEnd": [476], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Hectorxda/MySettings/tree/master/src/com/android/settings/applications/ManageApplications.java", "rawCode": "  void updateStorageUsage() {\n    if (mCurView == VIEW_RUNNING) {\n      return;\n    }\n\n    long freeStorage = 0;\n    long appStorage = 0;\n    long totalStorage = 0;\n    CharSequence newLabel = null;\n\n    if (mFilterApps == FILTER_APPS_SDCARD) {\n      if (mLastShowedInternalStorage) {\n        mLastShowedInternalStorage = false;\n      }\n      newLabel = this.getText(R.string.sd_card_storage);\n      mSDCardFileStats.restat(Environment.getExternalStorageDirectory().toString());\n      try {\n        totalStorage = (long) mSDCardFileStats.getBlockCount() * mSDCardFileStats.getBlockSize();\n        freeStorage =\n            (long) mSDCardFileStats.getAvailableBlocks() * mSDCardFileStats.getBlockSize();\n      } catch (IllegalArgumentException e) {\n        // use the old value of mFreeMem\n      }\n    } else {\n      if (!mLastShowedInternalStorage) {\n        mLastShowedInternalStorage = true;\n      }\n      newLabel = this.getText(R.string.internal_storage);\n      mDataFileStats.restat(\"/data\");\n      try {\n        totalStorage = (long) mDataFileStats.getBlockCount() * mDataFileStats.getBlockSize();\n        freeStorage = (long) mDataFileStats.getAvailableBlocks() * mDataFileStats.getBlockSize();\n      } catch (IllegalArgumentException e) {\n      }\n      final int N = mApplicationsAdapter.getCount();\n      for (int i = 0; i < N; i++) {\n        ApplicationsState.AppEntry ae = mApplicationsAdapter.getAppEntry(i);\n        appStorage += ae.codeSize + ae.dataSize;\n      }\n      freeStorage += mApplicationsState.sumCacheSizes();\n    }\n    if (newLabel != null) {\n      mStorageChartLabel.setText(newLabel);\n    }\n    if (totalStorage > 0) {\n      mColorBar.setRatios(\n          (totalStorage - freeStorage - appStorage) / (float) totalStorage,\n          appStorage / (float) totalStorage,\n          freeStorage / (float) totalStorage);\n      long usedStorage = totalStorage - freeStorage;\n      if (mLastUsedStorage != usedStorage) {\n        mLastUsedStorage = usedStorage;\n        String sizeStr = Formatter.formatShortFileSize(this, usedStorage);\n        mUsedStorageText.setText(\n            getResources().getString(R.string.service_foreground_processes, sizeStr));\n      }\n      if (mLastFreeStorage != freeStorage) {\n        mLastFreeStorage = freeStorage;\n        String sizeStr = Formatter.formatShortFileSize(this, freeStorage);\n        mFreeStorageText.setText(\n            getResources().getString(R.string.service_background_processes, sizeStr));\n      }\n    } else {\n      mColorBar.setRatios(0, 0, 0);\n      if (mLastUsedStorage != -1) {\n        mLastUsedStorage = -1;\n        mUsedStorageText.setText(\"\");\n      }\n      if (mLastFreeStorage != -1) {\n        mLastFreeStorage = -1;\n        mFreeStorageText.setText(\"\");\n      }\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1838, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 143, "focalAPIEnd": 184, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [268], "useEnd": [309], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ethankhall/Chronos/tree/master/ChronosApp/src/main/java/com/kopysoft/chronos/activities/BackupOptions.java", "rawCode": "  public boolean restoreJson() {\n    Chronos chrono = new Chronos(gContext);\n    JsonToSql json = new JsonToSql(chrono);\n\n    File directory = Environment.getExternalStorageDirectory();\n    // File backup = new File(directory, \"Chronos_Backup.csv\");\n    File backup = new File(directory, \"chronosBackup.json\");\n\n    try {\n      String str = \"\";\n      String line;\n      BufferedReader bufferedReader = new BufferedReader(new FileReader(backup));\n      while ((line = bufferedReader.readLine()) != null) {\n        str += line;\n      }\n\n      bufferedReader.close();\n\n      json.putJson(str);\n\n    } catch (IOException e) {\n      return false;\n    }\n\n    return true;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1839, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 177, "focalAPIEnd": 218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Henridv/AR-Walks/tree/master/src/com/vop/arwalks/AddMessage.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.addmessage);\n    _taken = false;\n    _path = Environment.getExternalStorageDirectory() + \"/images/example.jpg\";\n    locationName = (EditText) findViewById(R.id.loca_name);\n    locationDescription = (EditText) findViewById(R.id.loca_descr);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1840, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 246, "focalAPIEnd": 287, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["mountVolume(path)"], "useStart": [593], "useEnd": [618], "hasFinally": 1, "cleanUpCall": ["StorageManager.unregisterListener(StorageListener)"], "finallyExpressionStart": 1182, "finallyExpressionEnd": 1190, "finallyBlockStart": 1182, "finallyBlockEnd": 1236, "cleanUpCallStart": [1198], "cleanUpCallEnd": [1229], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/tests/coretests/src/android/content/pm/PackageManagerTests.java", "rawCode": "  boolean mountMedia() {\n    // We can't mount emulated storage.\n    if (Environment.isExternalStorageEmulated()) {\n      return true;\n    }\n\n    if (checkMediaState(Environment.MEDIA_MOUNTED)) {\n      return true;\n    }\n\n    final String path = Environment.getExternalStorageDirectory().toString();\n    StorageListener observer = new StorageListener(Environment.MEDIA_MOUNTED);\n    StorageManager sm = (StorageManager) mContext.getSystemService(Context.STORAGE_SERVICE);\n    sm.registerListener(observer);\n    try {\n      // Wait on observer\n      synchronized (observer) {\n        int ret = getMs().mountVolume(path);\n        if (ret != StorageResultCode.OperationSucceeded) {\n          throw new Exception(\"Could not mount the media\");\n        }\n        long waitTime = 0;\n        while ((!observer.isDone()) && (waitTime < MAX_WAIT_TIME)) {\n          observer.wait(WAIT_TIME_INCR);\n          waitTime += WAIT_TIME_INCR;\n        }\n        if (!observer.isDone()) {\n          throw new Exception(\"Timed out waiting for unmount media notification\");\n        }\n        return true;\n      }\n    } catch (Exception e) {\n      Log.e(TAG, \"Exception : \" + e);\n      return false;\n    } finally {\n      sm.unregisterListener(observer);\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1841, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 418, "focalAPIEnd": 459, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [409], "useEnd": [475], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arhughes/droidchatty/tree/master/src/cc/hughes/droidchatty/ComposePostView.java", "rawCode": "        @Override\n        public void onClick(View v) {\n          // store our image in a temp spot\n          String state = Environment.getExternalStorageState();\n          if (Environment.MEDIA_MOUNTED.equals(state)) {\n            // application directory, per Android Data Storage guidelines\n            final String APP_DIRECTORY = \"/Android/data/cc.hughes.droidchatty/files/\";\n            File app_dir = new File(Environment.getExternalStorageDirectory(), APP_DIRECTORY);\n\n            // make sure the directory exists\n            if (!app_dir.exists()) {\n              if (!app_dir.mkdirs()) {\n                ErrorDialog.display(\n                    ComposePostView.this, \"Error\", \"Could not create application directory.\");\n                return;\n              }\n            }\n\n            // our temp file for taking a picture, delete if we already have one\n            File file = new File(app_dir, \"droidchatty.jpg\");\n            if (file.exists()) file.delete();\n\n            _cameraImageLocation = Uri.fromFile(file);\n\n            // start the camera\n            Intent i = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n            i.putExtra(MediaStore.EXTRA_OUTPUT, _cameraImageLocation);\n            startActivityForResult(i, TAKE_PICTURE);\n          } else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n            ErrorDialog.display(\n                ComposePostView.this, \"Error\", \"External storage is mounted as read only.\");\n          } else {\n            ErrorDialog.display(\n                ComposePostView.this, \"Error\", \"External storage is in an unknown state.\");\n          }\n        }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1842, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 264, "focalAPIEnd": 305, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getPath()"], "useStart": [264], "useEnd": [315], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openproject/world2/tree/master/baseworld2/src/com/tianxia/lib/baseworld2/activity/MainActivity.java", "rawCode": "  @Override\n  public Object refreshing() {\n    if (BaseApplication.mNetWorkState == NetworkUtils.NETWORN_NONE) {\n      return null;\n    }\n\n    String result = null;\n    if (BaseApplication.mSdcardDataDir == null) {\n      BaseApplication.mSdcardDataDir =\n          Environment.getExternalStorageDirectory().getPath()\n              + \"/\"\n              + BaseApplication.mAppId\n              + \"/config/\";\n    }\n    File file =\n        new File(\n            BaseApplication.mSdcardDataDir\n                + \"/\"\n                + StringUtils.replaceUrlWithPlus(BaseApplication.mServerLatestUrl));\n    if (file.exists() && file.isFile()) {\n      file.delete();\n    }\n    try {\n      DownloadUtils.download(BaseApplication.mServerLatestUrl, file, false, null);\n      result = FileUtils.readTextFile(file);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return result;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1843, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 285, "focalAPIEnd": 326, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getPath()", "environment.getExternalStorageDirectory()", "path.getPath()"], "useStart": [285, 1022, 1022], "useEnd": [336, 1063, 1073], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chrismccurdy/loot/tree/master/src/net/gumbercules/loot/backend/CopyThread.java", "rawCode": "  @Override\n  public void run() {\n    if (copyInProgress) {\n      return;\n    } else {\n      copyInProgress = true;\n    }\n\n    Looper.prepare();\n\n    int res = 0;\n    if (mOp == BACKUP) {\n      String backup_path = null;\n\n      if (mMod == OFFLINE) {\n        backup_path =\n            Environment.getExternalStorageDirectory().getPath()\n                + mContext.getResources().getString(R.string.backup_path);\n      } else {\n        backup_path = TEMP_BACKUP;\n      }\n\n      if (mPd != null) {\n        FileWatcherThread fwt = new FileWatcherThread(Database.getDbPath(), backup_path, mPd);\n        fwt.start();\n      }\n\n      synchronized (sDataLock) {\n        if (Database.backup(backup_path)) {\n          res = R.string.backup_successful;\n          if (mPd != null) {\n            mPd.setProgress(100);\n          }\n        } else {\n          res = R.string.backup_failed;\n        }\n      }\n    } else if (mOp == RESTORE) {\n      String backup_path = null;\n\n      if (mMod == OFFLINE) {\n        backup_path =\n            Environment.getExternalStorageDirectory().getPath()\n                + mContext.getResources().getString(R.string.backup_path);\n      } else {\n        backup_path = TEMP_BACKUP;\n      }\n\n      if (mPd != null) {\n        FileWatcherThread fwt = new FileWatcherThread(backup_path, Database.getDbPath(), mPd);\n        fwt.start();\n      }\n\n      synchronized (sDataLock) {\n        if (Database.restore(backup_path)) {\n          res = R.string.restore_successful;\n          if (mPd != null) {\n            mPd.setProgress(100);\n          }\n\n          new Thread() {\n            public void run() {\n              try {\n                Thread.sleep(3000);\n              } catch (InterruptedException e) {\n              }\n              System.exit(0);\n            }\n          }.start();\n        } else {\n          res = R.string.restore_failed;\n        }\n      }\n    }\n\n    if (mPd != null) {\n      mPd.dismiss();\n    }\n    copyInProgress = false;\n\n    if (res != 0) {\n      Toast.makeText(mContext, res, Toast.LENGTH_LONG).show();\n    }\n\n    Looper.loop();\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1844, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 72, "focalAPIEnd": 113, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path)", "new RandomAccessFile(path,String)"], "useStart": [313, 422], "useEnd": [331, 458], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maddiesolz/SeniorProjectUF13/tree/master/Lockit/src/amazenite/lockit/RecordVoice.java", "rawCode": "  public void startRecord() {\n\n    inRecordMode = true;\n\n    filePath = Environment.getExternalStorageDirectory().getAbsolutePath();\n    if (Constants.inSetVoice) {\n      filePath += \"/initialSource.wav\";\n    } else {\n      if (hasRecorded) {\n        filePath += \"/testSource.wav\";\n      }\n    }\n\n    File file = new File(filePath);\n    if (file.exists()) {\n      file.delete();\n    }\n    try {\n      randomAccessWriter = new RandomAccessFile(filePath, \"rw\");\n    } catch (FileNotFoundException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    getSamples();\n    if (Constants.inSetVoice) {\n      Constants.voicePassSet = false;\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1845, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 89, "focalAPIEnd": 130, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [80], "useEnd": [143], "hasFinally": 1, "cleanUpCall": ["BufferedInputStream.close()"], "finallyExpressionStart": 750, "finallyExpressionEnd": 758, "finallyBlockStart": 750, "finallyBlockEnd": 828, "cleanUpCallStart": [786], "cleanUpCallEnd": [800], "url": "https://github.com/TeamNyx/packages_apps_LegacyCamera/tree/master/tests/src/com/android/camera/functional/ImageCaptureIntentTest.java", "rawCode": "  @LargeTest\n  public void testExtraOutput() throws Exception {\n    File file = new File(Environment.getExternalStorageDirectory(), \"test.jpg\");\n    BufferedInputStream stream = null;\n    byte[] jpegData;\n\n    try {\n      mIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));\n      setActivityIntent(mIntent);\n      getActivity();\n\n      takePicture();\n      pressDone();\n\n      assertTrue(getActivity().isFinishing());\n      assertEquals(Activity.RESULT_OK, getActivity().getResultCode());\n\n      // Verify the jpeg file\n      int fileLength = (int) file.length();\n      assertTrue(fileLength > 0);\n      jpegData = new byte[fileLength];\n      stream = new BufferedInputStream(new FileInputStream(file));\n      stream.read(jpegData);\n    } finally {\n      if (stream != null) stream.close();\n      file.delete();\n    }\n\n    Bitmap b = BitmapFactory.decodeByteArray(jpegData, 0, jpegData.length);\n    assertTrue(b.getWidth() > 0);\n    assertTrue(b.getHeight() > 0);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1846, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 777, "focalAPIEnd": 818, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ESOS-Lab/Mobibench/tree/master/MobiBench/src/esos/MobiBench/MobiBenchExe.java", "rawCode": "  private void RunMobibench(eAccessMode access_mode, eDbEnable db_enable, eDbMode db_mode) {\n    Setting set = new Setting();\n    int part = set.get_target_partition();\n    int exp_id = 0;\n\n    if (db_enable == eDbEnable.DB_DISABLE) {\n      if (access_mode == eAccessMode.WRITE) exp_id = 0;\n      else if (access_mode == eAccessMode.READ) exp_id = 1;\n      else if (access_mode == eAccessMode.RANDOM_WRITE) exp_id = 2;\n      else if (access_mode == eAccessMode.RANDOM_READ) exp_id = 3;\n    } else {\n      if (db_mode == eDbMode.INSERT) exp_id = 4;\n      else if (db_mode == eDbMode.UPDATE) exp_id = 5;\n      else exp_id = 6;\n    }\n\n    StartThread(exp_id);\n\n    String partition;\n\n    if (part == 0) {\n      partition = data_path;\n    } else if (part == 1) {\n      partition = Environment.getExternalStorageDirectory().getPath();\n    } else {\n      partition = sdcard_2nd_path;\n    }\n\n    String command = \"mobibench\";\n    exe_path = partition + \"/mobibench\";\n    command += \" -p \" + exe_path;\n\n    if (db_enable == eDbEnable.DB_DISABLE) {\n      if (access_mode == eAccessMode.WRITE || access_mode == eAccessMode.RANDOM_WRITE) {\n        command += \" -f \" + set.get_filesize_write() * 1024;\n      } else {\n        command += \" -f \" + set.get_filesize_read() * 1024;\n      }\n      command += \" -r \" + set.get_io_size();\n      command += \" -a \" + access_mode.ordinal();\n      command += \" -y \" + set.get_file_sync_mode();\n      command += \" -t \" + set.get_thread_num();\n    } else {\n      command += \" -d \" + db_mode.ordinal();\n      command += \" -n \" + set.get_transaction_num();\n      // command += \" -n \"+1000;\n      command += \" -j \" + set.get_journal_mode();\n      command += \" -s \" + set.get_sql_sync_mode();\n    }\n\n    System.out.println(\"mobibench command : \" + command);\n\n    mobibench_run(command);\n\n    JoinThread();\n\n    SendResult(exp_id);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1847, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 69, "focalAPIEnd": 110, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [154], "useEnd": [180], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eziosoft/MultiWii_EZ_GUI/tree/master/src/com/ezio/multiwii/helpers/FileAccess.java", "rawCode": "  public static String ReadFile(String fileName) {\n    File sdcard = Environment.getExternalStorageDirectory();\n\n    // Get the text file\n    File file = new File(sdcard, fileName);\n\n    // Read text from file\n    StringBuilder text = new StringBuilder();\n\n    try {\n      BufferedReader br = new BufferedReader(new FileReader(file));\n      String line;\n\n      while ((line = br.readLine()) != null) {\n        text.append(line);\n        text.append('\\n');\n      }\n    } catch (IOException e) {\n      // You'll need to add proper error handling here\n    }\n\n    // Set the text\n    return text.toString();\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1848, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 730, "tryExpressionEnd": 734, "tryBlockStart": 730, "tryBlockEnd": 1442, "catchExpressionStart": 1352, "catchExpressionEnd": 1372, "catchBlockStart": 1352, "catchBlockEnd": 1442, "exceptionHandlingCallStart": [1380], "exceptionHandlingCallEnd": [1435], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 1012, "focalAPIEnd": 1053, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path)"], "useStart": [1100], "useEnd": [1114], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yfli/aSM-clone/tree/master/src/com/athena/asm/util/CrashHandler.java", "rawCode": "  /**\n   * 保存错误信息到文件中\n   *\n   * @param ex\n   * @return 返回文件名称,便于将文件传送到服务器\n   */\n  private String saveCrashInfo2File(Throwable ex) {\n\n    StringBuffer sb = new StringBuffer();\n    for (Map.Entry<String, String> entry : infos.entrySet()) {\n      String key = entry.getKey();\n      String value = entry.getValue();\n      sb.append(key + \"=\" + value + \"\\n\");\n    }\n\n    Writer writer = new StringWriter();\n    PrintWriter printWriter = new PrintWriter(writer);\n    ex.printStackTrace(printWriter);\n    Throwable cause = ex.getCause();\n    while (cause != null) {\n      cause.printStackTrace(printWriter);\n      cause = cause.getCause();\n    }\n    printWriter.close();\n    String result = writer.toString();\n    sb.append(result);\n    try {\n      long timestamp = System.currentTimeMillis();\n      String time = formatter.format(new Date());\n      String fileName = \"crash-\" + time + \"-\" + timestamp + \".log\";\n      if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n        String path = Environment.getExternalStorageDirectory().getPath() + \"/aSM/crash/\";\n        File dir = new File(path);\n        if (!dir.exists()) {\n          dir.mkdirs();\n        }\n        FileOutputStream fos = new FileOutputStream(path + fileName);\n        fos.write(sb.toString().getBytes());\n        fos.close();\n      }\n      return fileName;\n    } catch (Exception e) {\n      Log.e(TAG, \"an error occured while writing file...\", e);\n    }\n    return null;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1849, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 474, "focalAPIEnd": 515, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getPath()"], "useStart": [474], "useEnd": [525], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lbaye/repo/tree/master/android/src/com/socmaps/images/ImageCache.java", "rawCode": "  /**\n   * Get the external app cache directory.\n   *\n   * @param context The context to use\n   * @return The external cache dir\n   */\n  @TargetApi(8)\n  public static File getExternalCacheDir(Context context) {\n    if (ImageUtils.hasFroyo()) {\n      return context.getExternalCacheDir();\n    }\n\n    // Before Froyo we need to construct the external cache dir ourselves\n    final String cacheDir = \"/Android/data/\" + context.getPackageName() + \"/cache/\";\n    return new File(Environment.getExternalStorageDirectory().getPath() + cacheDir);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1850, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 324, "focalAPIEnd": 365, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.toString()"], "useStart": [407], "useEnd": [422], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iametza/Ihesi/tree/master/plugins/org.apache.cordova.file/src/android/DirectoryManager.java", "rawCode": "  /**\n   * Determine if a file or directory exists.\n   *\n   * @param name The name of the file to check.\n   * @return T=exists, F=not found\n   */\n  public static boolean testFileExists(String name) {\n    boolean status;\n\n    // If SD card exists\n    if ((testSaveLocationExists()) && (!name.equals(\"\"))) {\n      File path = Environment.getExternalStorageDirectory();\n      File newPath = constructFilePaths(path.toString(), name);\n      status = newPath.exists();\n    }\n    // If no SD card\n    else {\n      status = false;\n    }\n    return status;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1851, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 81, "focalAPIEnd": 122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getAbsolutePath()"], "useStart": [148], "useEnd": [172], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/isphrazy/networksProject/tree/master/project5/src/cse461/snet/ImgManager.java", "rawCode": "  public static String saveImage(Bitmap img, String picName) {\n    File sdCard = Environment.getExternalStorageDirectory();\n    File dir = new File(sdCard.getAbsolutePath() + \"/\" + PICTURE_FOLDER);\n    dir.mkdirs();\n    String myPictureFullPath = dir.getPath() + picName;\n    // File file = new File(this.getExternalFilesDir(null), this.dirName+fileName); //this function\n    // give null pointer exception so im using other one\n    File file = new File(myPictureFullPath);\n\n    try {\n      FileOutputStream fos = new FileOutputStream(file);\n      img.compress(Bitmap.CompressFormat.PNG, 100, fos);\n      fos.flush();\n      fos.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return myPictureFullPath;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1852, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 1672, "focalAPIEnd": 1713, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kerpie/truTest/tree/master/src/com/trustripes/principal/Snackin.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    developmentSession = getSharedPreferences(ConstantValues.USER_DATA, MODE_PRIVATE);\n    id = developmentSession.getString(\"user_id\", \"-1\");\n    realId = Integer.parseInt(id);\n\n    requestWindowFeature(Window.FEATURE_NO_TITLE);\n    setContentView(R.layout.activity_snackin);\n\n    EasyTracker.getInstance().setContext(getApplicationContext());\n\n    snackText = (TextView) findViewById(R.id.snackin_text);\n    productName = (TextView) findViewById(R.id.snackin_product_name);\n    t = getIntent();\n    status = t.getStringExtra(\"AMBASSADOR_STATUS\");\n    productId = t.getStringExtra(\"PRODUCT_ID\");\n    imagePath = t.getStringExtra(\"productPath\");\n    stringProductName = t.getStringExtra(\"PRODUCT_NAME\");\n    snackinId = t.getStringExtra(\"SNACKIN_ID\");\n    isAnotherPhoto = t.getBooleanExtra(\"IS_ANOTHER_PHOTO\", false);\n\n    backButton = (Button) findViewById(R.id.backButton);\n    toPostSnackin = (Button) findViewById(R.id.button_return_wall);\n    img = (ImageView) findViewById(R.id.ambassador_imageView);\n    productImage = (ImageView) findViewById(R.id.product_photo);\n    ratingBar = (RatingBar) findViewById(R.id.ratingBar_snackin_activity);\n    profilePhoto = (ImageView) findViewById(R.id.wall_item_profile_photo);\n    relativeContainer = (RelativeLayout) findViewById(R.id.ambassador_content);\n    background = (RelativeLayout) findViewById(R.id.Background_snackin);\n\n    backButton.setOnClickListener(\n        new View.OnClickListener() {\n          public void onClick(View v) {\n            finish();\n          }\n        });\n\n    profileImagePath =\n        Environment.getExternalStorageDirectory()\n            + \"/TruStripes/\"\n            + ConstantValues.codeName(realId)\n            + \".jpg\";\n\n    ratingValue = t.getStringExtra(\"RATING\");\n    ratingBar.setOnTouchListener(\n        new View.OnTouchListener() {\n\n          @Override\n          public boolean onTouch(View arg0, MotionEvent arg1) {\n            return true;\n          }\n        });\n\n    ratingBar.setRating(Float.parseFloat(ratingValue));\n\n    toPostSnackin.setOnClickListener(\n        new View.OnClickListener() {\n          public void onClick(View v) {\n            Intent intent = new Intent(Snackin.this, PostSnackin.class);\n            intent.putExtra(\"PRODUCT_PATH\", imagePath);\n            intent.putExtra(\"PRODUCT_ID\", productId);\n            intent.putExtra(\"PRODUCT_NAME\", stringProductName);\n            intent.putExtra(\"PRODUCT_RANKING\", ratingValue);\n            intent.putExtra(\"SNACKIN_ID\", snackinId);\n            intent.putExtra(\"IS_ANOTHER_PHOTO\", isAnotherPhoto);\n            startActivity(intent);\n            finish();\n          }\n        });\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1853, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 97, "focalAPIEnd": 138, "followUpCheck": "!path.canWrite()", "checkType": "IF", "followUpCheckExpressionStart": 144, "followUpCheckExpressionEnd": 176, "followUpCheckBlockStart": 144, "followUpCheckBlockEnd": 242, "use": ["new File(path,String)"], "useStart": [265], "useEnd": [303], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/tests/RenderScriptTests/ImageProcessing/src/com/android/rs/image/ImageProcessingActivity.java", "rawCode": "  public void benchmark_all(View v) {\n    // write result into a file\n    File externalStorage = Environment.getExternalStorageDirectory();\n    if (!externalStorage.canWrite()) {\n      Log.v(TAG, \"sdcard is not writable\");\n      return;\n    }\n    File resultFile = new File(externalStorage, RESULT_FILE);\n    resultFile.setWritable(true, false);\n    try {\n      BufferedWriter rsWriter = new BufferedWriter(new FileWriter(resultFile));\n      Log.v(TAG, \"Saved results in: \" + resultFile.getAbsolutePath());\n      for (int i = 0; i < mTestNames.length; i++) {\n        changeTest(i);\n        float t = getBenchmark();\n        String s = new String(\"\" + mTestNames[i] + \", \" + t);\n        rsWriter.write(s + \"\\n\");\n        Log.v(TAG, \"Test \" + s + \"ms\\n\");\n      }\n      rsWriter.close();\n    } catch (IOException e) {\n      Log.v(TAG, \"Unable to write result file \" + e.getMessage());\n    }\n    changeTest(0);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1854, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 85, "focalAPIEnd": 126, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ebollens/ccnmp/tree/master/android/CCNx-Android-Services/src/org/ccnx/android/services/repo/RepoService.java", "rawCode": "  private String createRepoDir(String repodir) {\n    File f;\n    File external_dir = Environment.getExternalStorageDirectory();\n\n    if (repodir != null) {\n      // Check if repodir contains the external storage path\n      if (!repodir.startsWith(external_dir.getAbsolutePath())) {\n        repodir = external_dir.getAbsolutePath() + repodir;\n      }\n\n      f = new File(repodir);\n      if (f.mkdirs()) {\n        Log.d(TAG, \"Created repodir = \" + repodir);\n      } else {\n        Log.d(TAG, \"Unable to create repodir = \" + repodir + \", already exists\");\n      }\n\n    } else {\n      // repo_dir is null, lets get a directory from the android system\n      // in external storage.\n      f = new File(external_dir.getAbsolutePath() + DEFAULT_REPO_DIR);\n      if (f.mkdirs()) {\n        Log.d(\n            TAG, \"Created default repodir = \" + external_dir.getAbsolutePath() + DEFAULT_REPO_DIR);\n      } else {\n        Log.d(\n            TAG,\n            \"Unable to create default repodir = \"\n                + external_dir.getAbsolutePath()\n                + DEFAULT_REPO_DIR\n                + \", already exists\");\n      }\n      repodir = f.getAbsolutePath();\n    }\n    return repodir;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1855, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getMessage()", "e(String,String)"], "tryExpressionStart": 100, "tryExpressionEnd": 104, "tryBlockStart": 100, "tryBlockEnd": 587, "catchExpressionStart": 498, "catchExpressionEnd": 520, "catchBlockStart": 498, "catchBlockEnd": 587, "exceptionHandlingCallStart": [565, 528], "exceptionHandlingCallEnd": [579, 580], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 124, "focalAPIEnd": 165, "followUpCheck": "path.canWrite()", "checkType": "IF", "followUpCheckExpressionStart": 173, "followUpCheckExpressionEnd": 193, "followUpCheckBlockStart": 173, "followUpCheckBlockEnd": 491, "use": ["new File(path,String)"], "useStart": [222], "useEnd": [246], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/blickly/ghostrun/tree/master/android_app/src/com/ghostrun/activity/WebMapActivityJSInterface.java", "rawCode": "  private void writeToFile(String fileName) {\n    if (xmlContent == null) {\n      return;\n    }\n    try {\n      File root = Environment.getExternalStorageDirectory();\n      if (root.canWrite()) {\n        File outputfile = new File(root, fileName);\n        FileWriter filewriter = new FileWriter(outputfile);\n        BufferedWriter out = new BufferedWriter(filewriter);\n        webView.loadUrl(\"javascript:xmlButton.click_func();\");\n        out.write(xmlContent);\n        out.close();\n      }\n    } catch (IOException e) {\n      Log.e(TAG, \"Could not write file \" + e.getMessage());\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1856, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 169, "focalAPIEnd": 210, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/daumproject/daum-library/tree/master/android/org.daum.library.android.couchDB/src/main/java/com/couchbase/android/CouchbaseMobile.java", "rawCode": "  /**\n   * The path to this apps external (sdcard) memory\n   *\n   * @return path to the apps external directory\n   */\n  public static String externalPath() {\n    return Environment.getExternalStorageDirectory()\n        + \"/Android/data/\"\n        + CouchbaseMobile.appNamespace;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1857, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 424, "focalAPIEnd": 465, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.toString()"], "useStart": [424], "useEnd": [476], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mnlk2-custom/android_packages_apps_Settings/tree/master/src/com/android/settings/applications/ManageApplications.java", "rawCode": "  void updateStorageUsage() {\n    if (mCurView == VIEW_RUNNING) {\n      return;\n    }\n\n    long freeStorage = 0;\n    long appStorage = 0;\n    long totalStorage = 0;\n    CharSequence newLabel = null;\n\n    if (mFilterApps == FILTER_APPS_SDCARD) {\n      if (mLastShowedInternalStorage) {\n        mLastShowedInternalStorage = false;\n      }\n      newLabel = this.getText(R.string.sd_card_storage);\n      mSDCardFileStats.restat(Environment.getExternalStorageDirectory().toString());\n      try {\n        totalStorage = (long) mSDCardFileStats.getBlockCount() * mSDCardFileStats.getBlockSize();\n        freeStorage =\n            (long) mSDCardFileStats.getAvailableBlocks() * mSDCardFileStats.getBlockSize();\n      } catch (IllegalArgumentException e) {\n        // use the old value of mFreeMem\n      }\n    } else {\n      if (!mLastShowedInternalStorage) {\n        mLastShowedInternalStorage = true;\n      }\n      newLabel = this.getText(R.string.internal_storage);\n      mDataFileStats.restat(\"/data\");\n      try {\n        totalStorage = (long) mDataFileStats.getBlockCount() * mDataFileStats.getBlockSize();\n        freeStorage = (long) mDataFileStats.getAvailableBlocks() * mDataFileStats.getBlockSize();\n      } catch (IllegalArgumentException e) {\n      }\n      final int N = mApplicationsAdapter.getCount();\n      for (int i = 0; i < N; i++) {\n        ApplicationsState.AppEntry ae = mApplicationsAdapter.getAppEntry(i);\n        appStorage += ae.codeSize + ae.dataSize;\n      }\n      freeStorage += mApplicationsState.sumCacheSizes();\n    }\n    if (newLabel != null) {\n      mStorageChartLabel.setText(newLabel);\n    }\n    if (totalStorage > 0) {\n      mColorBar.setRatios(\n          (totalStorage - freeStorage - appStorage) / (float) totalStorage,\n          appStorage / (float) totalStorage,\n          freeStorage / (float) totalStorage);\n      long usedStorage = totalStorage - freeStorage;\n      if (mLastUsedStorage != usedStorage) {\n        mLastUsedStorage = usedStorage;\n        String sizeStr = Formatter.formatShortFileSize(this, usedStorage);\n        mUsedStorageText.setText(\n            getResources().getString(R.string.service_foreground_processes, sizeStr));\n      }\n      if (mLastFreeStorage != freeStorage) {\n        mLastFreeStorage = freeStorage;\n        String sizeStr = Formatter.formatShortFileSize(this, freeStorage);\n        mFreeStorageText.setText(\n            getResources().getString(R.string.service_background_processes, sizeStr));\n      }\n    } else {\n      mColorBar.setRatios(0, 0, 0);\n      if (mLastUsedStorage != -1) {\n        mLastUsedStorage = -1;\n        mUsedStorageText.setText(\"\");\n      }\n      if (mLastFreeStorage != -1) {\n        mLastFreeStorage = -1;\n        mFreeStorageText.setText(\"\");\n      }\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1858, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 433, "focalAPIEnd": 474, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.toString()"], "useStart": [433], "useEnd": [485], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_settings/tree/master/src/com/android/settings/applications/ManageApplications.java", "rawCode": "  void updateStorageUsage() {\n    if (mCurView == VIEW_RUNNING) {\n      return;\n    }\n\n    long freeStorage = 0;\n    long appStorage = 0;\n    long totalStorage = 0;\n    CharSequence newLabel = null;\n\n    if (mFilterApps == FILTER_APPS_SDCARD) {\n      if (mLastShowedInternalStorage) {\n        mLastShowedInternalStorage = false;\n      }\n      newLabel = getActivity().getText(R.string.sd_card_storage);\n      mSDCardFileStats.restat(Environment.getExternalStorageDirectory().toString());\n      try {\n        totalStorage = (long) mSDCardFileStats.getBlockCount() * mSDCardFileStats.getBlockSize();\n        freeStorage =\n            (long) mSDCardFileStats.getAvailableBlocks() * mSDCardFileStats.getBlockSize();\n      } catch (IllegalArgumentException e) {\n        // use the old value of mFreeMem\n      }\n      final int N = mApplicationsAdapter.getCount();\n      for (int i = 0; i < N; i++) {\n        ApplicationsState.AppEntry ae = mApplicationsAdapter.getAppEntry(i);\n        appStorage += ae.externalCodeSize + ae.externalDataSize;\n      }\n    } else {\n      if (!mLastShowedInternalStorage) {\n        mLastShowedInternalStorage = true;\n      }\n      newLabel = getActivity().getText(R.string.internal_storage);\n      mDataFileStats.restat(\"/data\");\n      try {\n        totalStorage = (long) mDataFileStats.getBlockCount() * mDataFileStats.getBlockSize();\n        freeStorage = (long) mDataFileStats.getAvailableBlocks() * mDataFileStats.getBlockSize();\n      } catch (IllegalArgumentException e) {\n      }\n      final boolean emulatedStorage = Environment.isExternalStorageEmulated();\n      final int N = mApplicationsAdapter.getCount();\n      for (int i = 0; i < N; i++) {\n        ApplicationsState.AppEntry ae = mApplicationsAdapter.getAppEntry(i);\n        appStorage += ae.codeSize + ae.dataSize;\n        if (emulatedStorage) {\n          appStorage += ae.externalCodeSize + ae.externalDataSize;\n        }\n      }\n      freeStorage += mApplicationsState.sumCacheSizes();\n    }\n    if (newLabel != null) {\n      mStorageChartLabel.setText(newLabel);\n    }\n    if (totalStorage > 0) {\n      mColorBar.setRatios(\n          (totalStorage - freeStorage - appStorage) / (float) totalStorage,\n          appStorage / (float) totalStorage,\n          freeStorage / (float) totalStorage);\n      long usedStorage = totalStorage - freeStorage;\n      if (mLastUsedStorage != usedStorage) {\n        mLastUsedStorage = usedStorage;\n        String sizeStr = Formatter.formatShortFileSize(getActivity(), usedStorage);\n        mUsedStorageText.setText(\n            getActivity().getResources().getString(R.string.service_foreground_processes, sizeStr));\n      }\n      if (mLastFreeStorage != freeStorage) {\n        mLastFreeStorage = freeStorage;\n        String sizeStr = Formatter.formatShortFileSize(getActivity(), freeStorage);\n        mFreeStorageText.setText(\n            getActivity().getResources().getString(R.string.service_background_processes, sizeStr));\n      }\n    } else {\n      mColorBar.setRatios(0, 0, 0);\n      if (mLastUsedStorage != -1) {\n        mLastUsedStorage = -1;\n        mUsedStorageText.setText(\"\");\n      }\n      if (mLastFreeStorage != -1) {\n        mLastFreeStorage = -1;\n        mFreeStorageText.setText(\"\");\n      }\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1859, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 465, "focalAPIEnd": 506, "followUpCheck": "path.startsWith(path + \"/\")", "checkType": "IF", "followUpCheckExpressionStart": 757, "followUpCheckExpressionEnd": 900, "followUpCheckBlockStart": 757, "followUpCheckBlockEnd": 947, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_providers_MediaProvider/tree/master/src/com/android/providers/media/MediaScannerReceiver.java", "rawCode": "  @Override\n  public void onReceive(Context context, Intent intent) {\n    String action = intent.getAction();\n    Uri uri = intent.getData();\n    if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {\n      // scan internal storage\n      scan(context, MediaProvider.INTERNAL_VOLUME);\n    } else {\n      if (uri.getScheme().equals(\"file\")) {\n        // handle intents related to external storage\n        String path = uri.getPath();\n        String externalStoragePath = Environment.getExternalStorageDirectory().getPath();\n\n        Log.d(TAG, \"action: \" + action + \" path: \" + path);\n        if (action.equals(Intent.ACTION_MEDIA_MOUNTED)) {\n          // scan whenever any volume is mounted\n          scan(context, MediaProvider.EXTERNAL_VOLUME);\n        } else if (action.equals(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE)\n            && path != null\n            && path.startsWith(externalStoragePath + \"/\")) {\n          scanFile(context, path);\n        }\n      }\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1860, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 89, "focalAPIEnd": 130, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [80], "useEnd": [143], "hasFinally": 1, "cleanUpCall": ["BufferedInputStream.close()"], "finallyExpressionStart": 750, "finallyExpressionEnd": 758, "finallyBlockStart": 750, "finallyBlockEnd": 828, "cleanUpCallStart": [786], "cleanUpCallEnd": [800], "url": "https://github.com/android/platform_packages_apps_camera/tree/master/tests/src/com/android/camera/functional/ImageCaptureIntentTest.java", "rawCode": "  @LargeTest\n  public void testExtraOutput() throws Exception {\n    File file = new File(Environment.getExternalStorageDirectory(), \"test.jpg\");\n    BufferedInputStream stream = null;\n    byte[] jpegData;\n\n    try {\n      mIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));\n      setActivityIntent(mIntent);\n      getActivity();\n\n      takePicture();\n      pressDone();\n\n      assertTrue(getActivity().isFinishing());\n      assertEquals(Activity.RESULT_OK, getActivity().getResultCode());\n\n      // Verify the jpeg file\n      int fileLength = (int) file.length();\n      assertTrue(fileLength > 0);\n      jpegData = new byte[fileLength];\n      stream = new BufferedInputStream(new FileInputStream(file));\n      stream.read(jpegData);\n    } finally {\n      if (stream != null) stream.close();\n      file.delete();\n    }\n\n    Bitmap b = BitmapFactory.decodeByteArray(jpegData, 0, jpegData.length);\n    assertTrue(b.getWidth() > 0);\n    assertTrue(b.getHeight() > 0);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1861, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 59, "focalAPIEnd": 100, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getVolumeState(path)"], "useStart": [134], "useEnd": [163], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/tests/coretests/src/android/os/storage/AsecTests.java", "rawCode": "  boolean getMediaState() {\n    try {\n      String mPath = Environment.getExternalStorageDirectory().toString();\n      String state = getMs().getVolumeState(mPath);\n      return Environment.MEDIA_MOUNTED.equals(state);\n    } catch (RemoteException e) {\n      return false;\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1862, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 284, "tryExpressionEnd": 288, "tryBlockStart": 284, "tryBlockEnd": 629, "catchExpressionStart": 571, "catchExpressionEnd": 591, "catchBlockStart": 571, "catchBlockEnd": 629, "exceptionHandlingCallStart": [601], "exceptionHandlingCallEnd": [620], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 310, "focalAPIEnd": 351, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getPath()"], "useStart": [386], "useEnd": [400], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DavidOrchard/HockeyBuzz/tree/master/android/src/com/phonegap/demo/DirectoryManager.java", "rawCode": "  protected long getFreeDiskSpace() {\n    /*\n     * gets the available SD card free space or returns -1 if the SD card is not mounted.\n     */\n    String status = Environment.getExternalStorageState();\n    long freeSpace = 0;\n    if (status.equals(Environment.MEDIA_MOUNTED)) {\n      try {\n        File path = Environment.getExternalStorageDirectory();\n        StatFs stat = new StatFs(path.getPath());\n        long blockSize = stat.getBlockSize();\n        long availableBlocks = stat.getAvailableBlocks();\n        freeSpace = availableBlocks * blockSize / 1024;\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    } else {\n      return -1;\n    }\n    return (freeSpace);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1863, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 260, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["unmountVolume(path,boolean,boolean)"], "useStart": [598], "useEnd": [638], "hasFinally": 1, "cleanUpCall": ["StorageManager.unregisterListener(StorageListener)"], "finallyExpressionStart": 1073, "finallyExpressionEnd": 1081, "finallyBlockStart": 1073, "finallyBlockEnd": 1127, "cleanUpCallStart": [1089], "cleanUpCallEnd": [1120], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/core/tests/coretests/src/android/content/pm/PackageManagerTests.java", "rawCode": "  private boolean unmountMedia() {\n    // We can't unmount emulated storage.\n    if (Environment.isExternalStorageEmulated()) {\n      return true;\n    }\n\n    if (checkMediaState(Environment.MEDIA_UNMOUNTED)) {\n      return true;\n    }\n\n    final String path = Environment.getExternalStorageDirectory().getPath();\n    StorageListener observer = new StorageListener(Environment.MEDIA_UNMOUNTED);\n    StorageManager sm = (StorageManager) mContext.getSystemService(Context.STORAGE_SERVICE);\n    sm.registerListener(observer);\n    try {\n      // Wait on observer\n      synchronized (observer) {\n        getMs().unmountVolume(path, true, false);\n        long waitTime = 0;\n        while ((!observer.isDone()) && (waitTime < MAX_WAIT_TIME)) {\n          observer.wait(WAIT_TIME_INCR);\n          waitTime += WAIT_TIME_INCR;\n        }\n        if (!observer.isDone()) {\n          throw new Exception(\"Timed out waiting for unmount media notification\");\n        }\n        return true;\n      }\n    } catch (Exception e) {\n      Log.e(TAG, \"Exception : \" + e);\n      return false;\n    } finally {\n      sm.unregisterListener(observer);\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1864, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 73, "focalAPIEnd": 114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [64], "useEnd": [122], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xCatG/Nanidroid/tree/master/src/com/cattailsw/nanidroid/util/NarUtil.java", "rawCode": "  public static void createNarDirOnSDCard() {\n    File narDir = new File(Environment.getExternalStorageDirectory(), \"nar\");\n    if (narDir.exists() && narDir.isDirectory()) return;\n\n    boolean success = narDir.mkdirs();\n    if (success == false) Log.d(TAG, \"nar folder creation failed\");\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1865, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 730, "focalAPIEnd": 771, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format(String,path,String)"], "useStart": [690], "useEnd": [794], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/stress/CameraStressTest.java", "rawCode": "  protected void setUp() throws Exception {\n    final Semaphore sem = new Semaphore(0);\n    mLooperThread =\n        new Thread() {\n          @Override\n          public void run() {\n            Log.v(TAG, \"starting looper\");\n            Looper.prepare();\n            mHandler = new Handler();\n            sem.release();\n            Looper.loop();\n            Log.v(TAG, \"quit looper\");\n          }\n        };\n    mLooperThread.start();\n    if (!sem.tryAcquire(WAIT_TIMEOUT, TimeUnit.MILLISECONDS)) {\n      fail(\"Failed to start the looper.\");\n    }\n    getActivity();\n    super.setUp();\n\n    mCameraTestHelper = new CameraTestHelper();\n    File stressOutFile =\n        new File(\n            String.format(\n                \"%s/%s\", Environment.getExternalStorageDirectory(), CAMERA_STRESS_OUTPUT));\n    mOutput = new BufferedWriter(new FileWriter(stressOutFile, true));\n    mOutput.write(this.getName() + \"\\n\");\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1866, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 177, "focalAPIEnd": 218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getAbsolutePath()"], "useStart": [177], "useEnd": [236], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/coderbyheart/GroupMood/tree/master/moodclient/src/de/hsrm/mi/mobcomp/y2k11grp04/service/MoodServerService.java", "rawCode": "  /**\n   * Erzeugt den lokalen Pfad zur Cache-Datei eines Topic-Bildes\n   *\n   * @param topic\n   */\n  private File getTopicImageFile(Topic topic) {\n    return new File(\n        Environment.getExternalStorageDirectory().getAbsolutePath()\n            + \"/Android/data/de.hsrm.mi.mobcomp.y2k11grp04/cache/topic-\"\n            + topic.getUri().getHost()\n            + \"-\"\n            + topic.getId()\n            + \".png\");\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1867, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 207, "focalAPIEnd": 259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getPath()"], "useStart": [331], "useEnd": [349], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xunroudabing/DaBing/tree/master/WeiXinEmoj/src/com/dabing/emoj/utils/Util.java", "rawCode": "  public static SDCardInfo getSDCardInfo() {\n    String sDcString = android.os.Environment.getExternalStorageState();\n\n    if (sDcString.equals(android.os.Environment.MEDIA_MOUNTED)) {\n      File pathFile = android.os.Environment.getExternalStorageDirectory();\n\n      try {\n        android.os.StatFs statfs = new android.os.StatFs(pathFile.getPath());\n\n        // 获取SDCard上BLOCK总数\n        long nTotalBlocks = statfs.getBlockCount();\n\n        // 获取SDCard上每个block的SIZE\n        long nBlocSize = statfs.getBlockSize();\n\n        // 获取可供程序使用的Block的数量\n        long nAvailaBlock = statfs.getAvailableBlocks();\n\n        // 获取剩下的所有Block的数量(包括预留的一般程序无法使用的块)\n        long nFreeBlock = statfs.getFreeBlocks();\n\n        SDCardInfo info = new SDCardInfo();\n        // 计算SDCard 总容量大小MB\n        info.total = nTotalBlocks * nBlocSize;\n\n        // 计算 SDCard 剩余大小MB\n        info.free = nAvailaBlock * nBlocSize;\n\n        return info;\n      } catch (IllegalArgumentException e) {\n        Log.e(LOG_TAG, e.toString());\n      }\n    }\n\n    return null;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1868, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 238, "focalAPIEnd": 279, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/avionik/AirSwimmer/tree/master/finaleApp/AirSwimmer/src/de/airswimmer/logic/Movement.java", "rawCode": "  /**\n   * reads the lirc file in the package directory and saves it to sdcard on device\n   *\n   * @return path to lirc file\n   */\n  private String importLircfile() {\n    String newFolder = \"/AirSwimmer\";\n    String extStorageDirectory = Environment.getExternalStorageDirectory().toString();\n    // create directory\n    File dir = new File(extStorageDirectory + newFolder + \"/Lirc.txt\");\n    if (!dir.isDirectory()) {\n\n      File myNewFolder = new File(extStorageDirectory + newFolder);\n      myNewFolder.mkdir();\n      // create lirc file\n      File f = new File(extStorageDirectory + newFolder + \"/Lirc.txt\");\n      try {\n\n        final InputStream is = caller.getAssets().open(nameOfLirc);\n        BufferedReader br = null;\n        try {\n          br = new BufferedReader(new InputStreamReader(is));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while ((line = br.readLine()) != null) {\n            sb.append(line + '\\n');\n          }\n          FileWriter fwriter = new FileWriter(f);\n          BufferedWriter bwriter = new BufferedWriter(fwriter);\n          bwriter.write(sb.toString());\n          bwriter.close();\n        } catch (IOException e) {\n          Toast.makeText(getApplicationContext(), \"Failed to parse Lirc-File\", Toast.LENGTH_SHORT)\n              .show();\n          System.err.println(\"IOException when parsing and writing file: \" + e);\n        } finally {\n\n          if (is != null) {\n            try {\n              is.close();\n            } catch (IOException e) {\n              System.err.println(\"IOException when closing input stream: \" + e);\n              Toast.makeText(\n                      getApplicationContext(), \"Failed to parse Lirc-File\", Toast.LENGTH_SHORT)\n                  .show();\n            }\n          }\n          if (br != null) {\n            try {\n              br.close();\n            } catch (IOException e) {\n              System.err.println(\"IOException when closing buffered reader: \" + e);\n              Toast.makeText(\n                      getApplicationContext(), \"Failed to parse Lirc-File\", Toast.LENGTH_SHORT)\n                  .show();\n            }\n          }\n        }\n\n      } catch (IOException e) {\n        System.err.println(\"Lirc File could not be opened!\");\n        e.printStackTrace();\n        Toast.makeText(getApplicationContext(), \"Failed to parse Lirc-File\", Toast.LENGTH_SHORT)\n            .show();\n      }\n    }\n    return dir.getAbsolutePath();\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1869, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 1472, "focalAPIEnd": 1513, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["buildPath(path,String)"], "useStart": [1462], "useEnd": [1520], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ischweizer/MoSeS--Client-/tree/master/moses/libs/sources-support-v4/src/java/android/support/v4/content/FileProvider.java", "rawCode": "  /**\n   * Parse and return {@link PathStrategy} for given authority as defined in {@link\n   * #META_DATA_FILE_PROVIDER_PATHS} {@code &lt;meta-data>}.\n   *\n   * @see #getPathStrategy(Context, String)\n   */\n  private static PathStrategy parsePathStrategy(Context context, String authority)\n      throws IOException, XmlPullParserException {\n    final SimplePathStrategy strat = new SimplePathStrategy(authority);\n\n    final ProviderInfo info =\n        context.getPackageManager().resolveContentProvider(authority, PackageManager.GET_META_DATA);\n    final XmlResourceParser in =\n        info.loadXmlMetaData(context.getPackageManager(), META_DATA_FILE_PROVIDER_PATHS);\n    if (in == null) {\n      throw new IllegalArgumentException(\"Missing \" + META_DATA_FILE_PROVIDER_PATHS + \" meta-data\");\n    }\n\n    int type;\n    while ((type = in.next()) != END_DOCUMENT) {\n      if (type == START_TAG) {\n        final String tag = in.getName();\n\n        final String name = in.getAttributeValue(null, ATTR_NAME);\n        String path = in.getAttributeValue(null, ATTR_PATH);\n\n        File target = null;\n        if (TAG_ROOT_PATH.equals(tag)) {\n          target = buildPath(DEVICE_ROOT, path);\n        } else if (TAG_FILES_PATH.equals(tag)) {\n          target = buildPath(context.getFilesDir(), path);\n        } else if (TAG_CACHE_PATH.equals(tag)) {\n          target = buildPath(context.getCacheDir(), path);\n        } else if (TAG_EXTERNAL.equals(tag)) {\n          target = buildPath(Environment.getExternalStorageDirectory(), path);\n        }\n\n        if (target != null) {\n          strat.addRoot(name, target);\n        }\n      }\n    }\n\n    return strat;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1870, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 189, "focalAPIEnd": 230, "followUpCheck": "!path.canWrite()", "checkType": "IF", "followUpCheckExpressionStart": 236, "followUpCheckExpressionEnd": 268, "followUpCheckBlockStart": 236, "followUpCheckBlockEnd": 334, "use": ["new File(path,String)"], "useStart": [357], "useEnd": [395], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/tests/RenderScriptTests/ImageProcessing/src/com/android/rs/image/ImageProcessingTest.java", "rawCode": "  /** ImageProcessing benchmark test */\n  @LargeTest\n  public void testImageProcessingBench() {\n    long t = 0;\n    long sum = 0;\n    // write result into a file\n    File externalStorage = Environment.getExternalStorageDirectory();\n    if (!externalStorage.canWrite()) {\n      Log.v(TAG, \"sdcard is not writable\");\n      return;\n    }\n    File resultFile = new File(externalStorage, RESULT_FILE);\n    resultFile.setWritable(true, false);\n    try {\n      BufferedWriter rsWriter = new BufferedWriter(new FileWriter(resultFile));\n      Log.v(TAG, \"Saved results in: \" + resultFile.getAbsolutePath());\n      for (int i = 0; i < ITERATION; i++) {\n        t = mAct.getBenchmark();\n        sum += t;\n        rsWriter.write(\"Renderscript frame time core: \" + t + \" ms\\n\");\n        Log.v(TAG, \"RenderScript framew time core: \" + t + \" ms\");\n      }\n      long avgValue = sum / ITERATION;\n      rsWriter.write(\"Average frame time: \" + avgValue + \" ms\\n\");\n      Log.v(TAG, \"Average frame time: \" + avgValue + \" ms\");\n      rsWriter.close();\n    } catch (IOException e) {\n      Log.v(TAG, \"Unable to write result file \" + e.getMessage());\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1871, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 275, "focalAPIEnd": 316, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(path)"], "useStart": [390], "useEnd": [414], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/permission/src/android/permission/cts/NoSdCardWritePermissionTest.java", "rawCode": "  /**\n   * Verify that writing to the external storage device requires {@link\n   * android.permission.WRITE_EXTERNAL_STORAGE}.\n   *\n   * @since 4\n   */\n  public void testWriteExternalStorage() throws FileNotFoundException, IOException {\n    try {\n      String fl =\n          Environment.getExternalStorageDirectory().toString() + \"/this-should-not-exist.txt\";\n      FileOutputStream strm = new FileOutputStream(fl);\n      strm.write(\"Oops!\".getBytes());\n      strm.flush();\n      strm.close();\n      fail(\"Was able to create and write to \" + fl);\n    } catch (SecurityException e) {\n      // expected\n    } catch (FileNotFoundException e) {\n      // expected\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1872, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 1103, "focalAPIEnd": 1144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [1094], "useEnd": [1164], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/core/java/android/view/ViewDebug.java", "rawCode": "  /**\n   * Stops the current view hierarchy tracing. This method closes the file <code>\n   * /EXTERNAL/view-hierarchy/PREFIX.traces</code>.\n   *\n   * <p>Calling this method creates the file <code>/EXTERNAL/view-hierarchy/PREFIX.tree</code>\n   * containing the view hierarchy of the view supplied to {@link #startHierarchyTracing(String,\n   * View)}.\n   *\n   * <p>This method will return immediately if TRACE_HIERARCHY is false.\n   *\n   * @see #startHierarchyTracing(String, View)\n   * @see #trace(View, android.view.ViewDebug.HierarchyTraceType)\n   */\n  public static void stopHierarchyTracing() {\n    // noinspection PointlessBooleanExpression,ConstantConditions\n    if (!TRACE_HIERARCHY) {\n      return;\n    }\n\n    if (sHierarhcyRoot == null || sHierarchyTraces == null) {\n      throw new IllegalStateException(\n          \"You must call startHierarchyTracing() before\" + \" stopHierarchyTracing()!\");\n    }\n\n    try {\n      sHierarchyTraces.close();\n    } catch (IOException e) {\n      Log.e(\"View\", \"Could not write view traces\");\n    }\n    sHierarchyTraces = null;\n\n    File hierarchyDump = new File(Environment.getExternalStorageDirectory(), \"view-hierarchy/\");\n    // noinspection ResultOfMethodCallIgnored\n    hierarchyDump.mkdirs();\n    hierarchyDump = new File(hierarchyDump, sHierarchyTracePrefix + \".tree\");\n\n    BufferedWriter out;\n    try {\n      out = new BufferedWriter(new FileWriter(hierarchyDump), 8 * 1024);\n    } catch (IOException e) {\n      Log.e(\"View\", \"Could not dump view hierarchy\");\n      return;\n    }\n\n    View view = sHierarhcyRoot.getView();\n    if (view instanceof ViewGroup) {\n      ViewGroup group = (ViewGroup) view;\n      dumpViewHierarchy(group, out, 0);\n      try {\n        out.close();\n      } catch (IOException e) {\n        Log.e(\"View\", \"Could not dump view hierarchy\");\n      }\n    }\n\n    sHierarhcyRoot = null;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1873, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 92, "focalAPIEnd": 133, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,*)"], "useStart": [83], "useEnd": [165], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vogtp/android-CPU-tuner/tree/master/src/ch/amana/android/cputuner/view/activity/CapabilityCheckerActivity.java", "rawCode": "  private File getFilePath(String fileName) {\n    if (path == null) {\n      path = new File(Environment.getExternalStorageDirectory(), getPackageName() + DIR_REPORT);\n      if (!path.exists()) {\n        path.mkdirs();\n      }\n    }\n    return new File(path, fileName);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1874, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 421, "focalAPIEnd": 462, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [412], "useEnd": [481], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pankajkainthla/phonegap-plugins-all/tree/master/Android/BarcodeScanner/LibraryProject/src/com/google/zxing/client/android/encode/EncodeActivity.java", "rawCode": "  @Override\n  public boolean onOptionsItemSelected(MenuItem item) {\n    if (qrCodeEncoder == null) { // Odd\n      Log.w(TAG, \"No existing barcode to send?\");\n      return true;\n    }\n\n    String contents = qrCodeEncoder.getContents();\n    Bitmap bitmap;\n    try {\n      bitmap = qrCodeEncoder.encodeAsBitmap();\n    } catch (WriterException we) {\n      Log.w(TAG, we);\n      return true;\n    }\n\n    File bsRoot = new File(Environment.getExternalStorageDirectory(), \"BarcodeScanner\");\n    File barcodesRoot = new File(bsRoot, \"Barcodes\");\n    if (!barcodesRoot.exists() && !barcodesRoot.mkdirs()) {\n      Log.w(TAG, \"Couldn't make dir \" + barcodesRoot);\n      showErrorMessage(R.string.msg_unmount_usb);\n      return true;\n    }\n    File barcodeFile = new File(barcodesRoot, makeBarcodeFileName(contents) + \".png\");\n    barcodeFile.delete();\n    FileOutputStream fos = null;\n    try {\n      fos = new FileOutputStream(barcodeFile);\n      bitmap.compress(Bitmap.CompressFormat.PNG, 0, fos);\n    } catch (FileNotFoundException fnfe) {\n      Log.w(TAG, \"Couldn't access file \" + barcodeFile + \" due to \" + fnfe);\n      showErrorMessage(R.string.msg_unmount_usb);\n      return true;\n    } finally {\n      if (fos != null) {\n        try {\n          fos.close();\n        } catch (IOException ioe) {\n          // do nothing\n        }\n      }\n    }\n\n    Intent intent = new Intent(Intent.ACTION_SEND, Uri.parse(\"mailto:\"));\n    intent.putExtra(\n        Intent.EXTRA_SUBJECT, getString(R.string.app_name) + \" - \" + qrCodeEncoder.getTitle());\n    intent.putExtra(Intent.EXTRA_TEXT, qrCodeEncoder.getContents());\n    intent.putExtra(Intent.EXTRA_STREAM, Uri.parse(\"file://\" + barcodeFile.getAbsolutePath()));\n    intent.setType(\"image/png\");\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);\n    startActivity(Intent.createChooser(intent, null));\n    return true;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1875, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 215, "focalAPIEnd": 256, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path)"], "useStart": [304], "useEnd": [320], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CMPUT301F12T13/classproject/tree/master/Project/TaskMan/src/ca/cmput301/team13/taskman/ui/VideoCaptureActivity.java", "rawCode": "  /**\n   * Sets up the filepath for a new video and launches the built-in camera application to get the\n   * new video.\n   */\n  public void takeVideo() {\n    // set a file path for the new video\n    String folder = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/tmp\";\n    File folderF = new File(folder);\n    if (!folderF.exists()) {\n      folderF.mkdir();\n    }\n    String imageFilePath = folder + \"/\" + String.valueOf(System.currentTimeMillis()) + \".mp4\";\n    File imageFile = new File(imageFilePath);\n    videoFileUri = Uri.fromFile(imageFile);\n\n    // Start the built-in camera application to get our video\n    Intent intent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);\n    intent.putExtra(MediaStore.EXTRA_OUTPUT, videoFileUri);\n    intent.putExtra(\"android.intent.extra.durationLimit\", 10000);\n    intent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 0); // low quality\n    startActivityForResult(intent, VIDEO_CAPTURE_ACTIVITY_REQUEST_CODE);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1876, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 299, "focalAPIEnd": 340, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getAbsolutePath()"], "useStart": [364], "useEnd": [394], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/asksven/CommandCenter/tree/master/CommandCenter/src/com/asksven/commandcenter/valueobjects/CommandsIO.java", "rawCode": "  private File getFileDir(Context ctx) {\n    File path = null;\n    try {\n      path = m_ctx.getExternalFilesDir(null);\n    } catch (NoSuchMethodError e) {\n      // on Android 2.1 this method does not exist: alternate method\n      String packageName = ctx.getPackageName();\n      File externalPath = Environment.getExternalStorageDirectory();\n      path = new File(externalPath.getAbsolutePath() + \"/Android/data/\" + packageName + \"/files\");\n    }\n\n    return path;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1877, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 70, "focalAPIEnd": 111, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [61], "useEnd": [130], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Dominik8787/GunzenhausenTour/tree/master/WebAppGun/CaptureActivity/CaptureActivity/src/com/google/zxing/client/android/history/HistoryManager.java", "rawCode": "  static Uri saveHistory(String history) {\n    File bsRoot = new File(Environment.getExternalStorageDirectory(), \"BarcodeScanner\");\n    File historyRoot = new File(bsRoot, \"History\");\n    if (!historyRoot.exists() && !historyRoot.mkdirs()) {\n      Log.w(TAG, \"Couldn't make dir \" + historyRoot);\n      return null;\n    }\n    File historyFile = new File(historyRoot, \"history-\" + System.currentTimeMillis() + \".csv\");\n    OutputStreamWriter out = null;\n    try {\n      out = new OutputStreamWriter(new FileOutputStream(historyFile), Charset.forName(\"UTF-8\"));\n      out.write(history);\n      return Uri.parse(\"file://\" + historyFile.getAbsolutePath());\n    } catch (IOException ioe) {\n      Log.w(TAG, \"Couldn't access file \" + historyFile + \" due to \" + ioe);\n      return null;\n    } finally {\n      if (out != null) {\n        try {\n          out.close();\n        } catch (IOException ioe) {\n          // do nothing\n        }\n      }\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1878, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["Context.getResources()", "getString(*)", "makeText(Context,String,*)", "show()"], "tryExpressionStart": 62, "tryExpressionEnd": 66, "tryBlockStart": 62, "tryBlockEnd": 2184, "catchExpressionStart": 1976, "catchExpressionEnd": 1996, "catchBlockStart": 1976, "catchBlockEnd": 2184, "exceptionHandlingCallStart": [2057, 2057, 2004, 2004], "exceptionHandlingCallEnd": [2079, 2115, 2159, 2177], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 837, "focalAPIEnd": 878, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fraggel/Jiayu/tree/master/Jiayu/src/es/jiayu/jiayuid/DownloadReceiver.java", "rawCode": "  public void onReceive(Context context, Intent intent) {\n    try {\n      if (getClass().getPackage().getName().equals(intent.getPackage())) {\n        String action = intent.getAction();\n        if (DownloadManager.ACTION_DOWNLOAD_COMPLETE.equals(action)) {\n          long referenceId = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, -1);\n          boolean b = App.listaDescargas.containsKey(String.valueOf(referenceId));\n          if (b) {\n            String nombre = App.listaDescargas.get(String.valueOf(referenceId));\n            Toast.makeText(\n                    context,\n                    nombre + \" \" + context.getResources().getString(R.string.msgTerminadaDescarga),\n                    Toast.LENGTH_SHORT)\n                .show();\n          }\n          if (App.downloadREF == referenceId) {\n            if (new File(Environment.getExternalStorageDirectory() + \"/JIAYUES/APP/Jiayu.apk\")\n                != null) {\n              if (new File(Environment.getExternalStorageDirectory() + \"/JIAYUES/APP/Jiayu.apk\")\n                  .exists()) {\n                Intent intent2 = new Intent(Intent.ACTION_VIEW);\n                intent2.setDataAndType(\n                    Uri.fromFile(\n                        new File(\n                            Environment.getExternalStorageDirectory() + \"/JIAYUES/APP/Jiayu.apk\")),\n                    \"application/vnd.android.package-archive\");\n                intent2.setFlags(\n                    Intent\n                        .FLAG_ACTIVITY_NEW_TASK); // without this flag android returned a intent\n                                                  // error!\n                context.startActivity(intent2);\n              }\n            }\n          }\n        } else if (DownloadManager.ACTION_NOTIFICATION_CLICKED.equals(action)) {\n          Intent dm = new Intent(DownloadManager.ACTION_VIEW_DOWNLOADS);\n          dm.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n          context.startActivity(dm);\n        }\n      }\n    } catch (Exception e) {\n      Toast.makeText(\n              context,\n              context.getResources().getString(R.string.msgGenericError) + \" 135\",\n              Toast.LENGTH_SHORT)\n          .show();\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1879, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 76, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getPath()"], "useStart": [76], "useEnd": [127], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/giletvin/ornidroid/tree/master/ornidroid/src/main/java/fr/ornidroid/ui/activity/AddCustomMediaActivity.java", "rawCode": "  /** After views. */\n  @AfterViews\n  public void afterViews() {\n    getDir(Environment.getExternalStorageDirectory().getPath());\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1880, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 88, "focalAPIEnd": 129, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [66], "useEnd": [220], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/InsomniaROM/packages_apps_ROMSettings/tree/master/src/com/aokp/romcontrol/fragments/RibbonTargets.java", "rawCode": "  private Uri getTempFileUri() {\n    return Uri.fromFile(\n        new File(\n            Environment.getExternalStorageDirectory(),\n            \"tmp_icon_\" + String.valueOf(mTargetNum) + String.valueOf(arrayNum) + \".png\"));\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1881, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 228, "focalAPIEnd": 269, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [206], "useEnd": [352], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dichro/Fe-Fi/tree/master/src/to/rcpt/fefi/EyefiServerConnection.java", "rawCode": "  private File openWritableFile(long id, String suffix) {\n    File destinationPath;\n    SettingsActivity.FefiPreferences prefs = new SettingsActivity.FefiPreferences(context);\n    destinationPath =\n        new File(\n            Environment.getExternalStorageDirectory(),\n            \"eyefi/\" + prefs.getFolderName(new Date()) + \"/\" + id + \".\" + suffix);\n    destinationPath.getParentFile().mkdirs();\n    return destinationPath;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1882, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 53, "focalAPIEnd": 94, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getAbsolutePath()"], "useStart": [53], "useEnd": [112], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sng/gb/tree/master/trunk/GeoBeagle/di/com/google/code/geobeagle/xmlimport/GeoBeagleEnvironment.java", "rawCode": "  public String getExternalStorageDir() {\n    return Environment.getExternalStorageDirectory().getAbsolutePath();\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1883, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 454, "focalAPIEnd": 495, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [445], "useEnd": [504], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cadavre/android_packages_apps_Mms/tree/master/tests/src/com/android/mms/ui/SmsStressTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // Get input value for this test\n    if (mInst.mNumberMessages > 0) {\n      mIteration = mInst.mNumberMessages;\n    }\n    if (mInst.mSendInterval > 0) {\n      mSendInterval = mInst.mSendInterval;\n    }\n    Log.v(TAG, String.format(\"mIteration: %d, mSendInterval: %d\", mIteration, mSendInterval));\n    mWriter =\n        new BufferedWriter(\n            new FileWriter(new File(Environment.getExternalStorageDirectory(), OUTPUT), true));\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1884, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["environment.getExternalStoragePublicDirectory(*)"], "configurationStart": [308], "configurationEnd": [386], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 437, "focalAPIEnd": 478, "followUpCheck": "null == path", "checkType": "IF", "followUpCheckExpressionStart": 492, "followUpCheckExpressionEnd": 509, "followUpCheckBlockStart": 492, "followUpCheckBlockEnd": 577, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apps4av/avare/tree/master/app/src/main/java/com/ds/avare/storage/Preferences.java", "rawCode": "  /** @return */\n  public String mapsFolder() {\n    File path = mContext.getFilesDir();\n    /*\n     * Make it fail safe?\n     */\n    if (path == null) {\n      path = mContext.getCacheDir();\n      if (path == null) {\n        path = mContext.getExternalCacheDir();\n        if (path == null) {\n          path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);\n          if (path == null) {\n            path = Environment.getExternalStorageDirectory();\n            if (null == path) {\n              path = new File(\"/mnt/sdcard/avare\");\n            }\n          }\n        }\n      }\n    }\n    /*\n     * If no path, use internal folder.\n     * If cannot get internal folder, return / at least\n     */\n    String loc = mPref.getString(mContext.getString(R.string.Maps), path.getAbsolutePath());\n\n    /*\n     * XXX: Legacy for 5.1.0 and 5.1.1.\n     */\n    if (loc.equals(\"Internal\")) {\n      loc = mContext.getFilesDir().getAbsolutePath() + \"/data\";\n    } else if (loc.equals(\"External\")) {\n      loc = mContext.getExternalFilesDir(null) + \"/data\";\n    }\n\n    return (loc);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1885, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 207, "focalAPIEnd": 248, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.toString()"], "useStart": [290], "useEnd": [305], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lukec/yapc10-schedule/tree/master/android/src/com/yapcna/DirectoryManager.java", "rawCode": "  protected boolean deleteFile(String fileName) {\n    boolean status;\n    SecurityManager checker = new SecurityManager();\n\n    if ((testSaveLocationExists()) && (!fileName.equals(\"\"))) {\n\n      File path = Environment.getExternalStorageDirectory();\n      File newPath = constructFilePaths(path.toString(), fileName);\n      checker.checkDelete(newPath.toString());\n      if (newPath.isFile()) {\n        try {\n          Log.i(\"DirectoryManager deleteFile\", fileName);\n          newPath.delete();\n          status = true;\n        } catch (SecurityException se) {\n          se.printStackTrace();\n          status = false;\n        }\n      } else status = false;\n    } else status = false;\n    return status;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1886, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 205, "focalAPIEnd": 246, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getAbsolutePath()"], "useStart": [205], "useEnd": [264], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/poko/IH/tree/master/android/src/net/ecoarttech/ihplus/util/PhotoProvider.java", "rawCode": "  @Override\n  public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {\n    Log.d(TAG, \"open file:\" + uri);\n    String path = uri.getEncodedPath();\n    File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), path);\n    try {\n      if (!file.exists()) file.createNewFile();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    ParcelFileDescriptor parcel =\n        ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_WRITE);\n    Log.d(TAG, \"Parcel: \" + parcel);\n    return parcel;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1887, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 1093, "focalAPIEnd": 1134, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.toString()"], "useStart": [1093], "useEnd": [1145], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openforis/collect-android/tree/master/android-app/src/main/java/org/openforis/collect/android/management/ApplicationManager.java", "rawCode": "  @Override\n  public void onBackPressed() {\n    try {\n      AlertMessage.createPositiveNegativeDialog(\n              ApplicationManager.this,\n              false,\n              getResources().getDrawable(R.drawable.warningsign),\n              getResources().getString(R.string.exitAppTitle),\n              getResources().getString(R.string.exitAppMessage),\n              getResources().getString(R.string.yes),\n              getResources().getString(R.string.no),\n              new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                  ApplicationManager.this.finish();\n                }\n              },\n              new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {}\n              },\n              null)\n          .show();\n    } catch (Exception e) {\n      RunnableHandler.reportException(\n          e,\n          getResources().getString(R.string.app_name),\n          TAG + \":onBackPressed\",\n          Environment.getExternalStorageDirectory().toString()\n              + getResources().getString(R.string.logs_folder)\n              + getResources().getString(R.string.logs_file_name)\n              + System.currentTimeMillis()\n              + getResources().getString(R.string.log_file_extension));\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1888, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["getLocalizedMessage()", "getMessage()", "e(String,*)"], "tryExpressionStart": 525, "tryExpressionEnd": 529, "tryBlockStart": 525, "tryBlockEnd": 1971, "catchExpressionStart": 1489, "catchExpressionEnd": 1521, "catchBlockStart": 1489, "catchBlockEnd": 1611, "exceptionHandlingCallStart": [1543, 1587, 1576], "exceptionHandlingCallEnd": [1566, 1601, 1602], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 747, "focalAPIEnd": 788, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getCanonicalPath()"], "useStart": [747], "useEnd": [807], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rorist/nowatch-tv/tree/master/src/net/nowatch/service/NotifService.java", "rawCode": "    @Override\n    protected Void doInBackground(Void... unused) {\n      int fs = 1;\n      try {\n        fs = Integer.parseInt(file_size);\n      } catch (NumberFormatException e) {\n      }\n      // Get Context\n      Context ctxt = null;\n      if (mService != null) {\n        final NotifService service = mService.get();\n        if (service != null) {\n          ctxt = service.getApplicationContext();\n        }\n      }\n      if (ctxt == null) {\n        cancel(false);\n        return null;\n      }\n      // Download file\n      try {\n        String state = Environment.getExternalStorageState();\n        if (Environment.MEDIA_MOUNTED.equals(state) && !file_uri.equals(new String(\"\"))) {\n          File dst =\n              new File(\n                  Environment.getExternalStorageDirectory().getCanonicalPath()\n                      + \"/\"\n                      + GetFile.PATH_PODCASTS);\n          dst.mkdirs();\n          task = new getPodcastFile(ctxt, DownloadTask.this, fs);\n          dest = dst.getCanonicalPath() + \"/\" + new File(file_uri).getName();\n          if (status == Item.STATUS_INCOMPLETE) {\n            Log.v(TAG, \"resume download\");\n            ItemInfo.changeStatus(ctxt, item_id, Item.STATUS_DOWNLOADING);\n            task.getChannel(file_uri, dest, true);\n          } else {\n            ItemInfo.changeStatus(ctxt, item_id, Item.STATUS_DOWNLOADING);\n            task.getChannel(file_uri, dest, false);\n          }\n        } else {\n          cancel(false);\n        }\n      } catch (MalformedURLException e) {\n        error_msg = e.getLocalizedMessage();\n        Log.e(TAG, e.getMessage());\n      } catch (ClientProtocolException e) {\n        error_msg = e.getLocalizedMessage();\n        Log.e(TAG, e.getMessage());\n      } catch (UnknownHostException e) {\n        error_msg = e.getLocalizedMessage();\n        Log.e(TAG, e.getMessage());\n      } catch (IOException e) {\n        error_msg = e.getLocalizedMessage();\n        Log.e(TAG, e.getMessage());\n      }\n      return null;\n    }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1889, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 271, "focalAPIEnd": 312, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["StringBuilder.append(path)", "StringBuilder.append(path)"], "useStart": [443, 576], "useEnd": [463, 596], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fywb251/bsl_impc_android/tree/master/cube-android/src/com/foreveross/chameleon/phone/modules/task/UnZipTask.java", "rawCode": "  /**\n   * 解压模块\n   *\n   * @param module\n   * @param listener\n   * @throws Exception\n   */\n  public static void unZipAndInstall(Context context, CubeApplication app, CubeModule module)\n      throws Exception {\n\n    if (null != module) {\n\n      String basePath =\n          Environment.getExternalStorageDirectory().getPath() + \"/\" + context.getPackageName();\n      /** sb1是zip位置，sb2是解压缩位置 */\n      StringBuilder sb1 = new StringBuilder();\n      sb1.append(basePath).append(\"/\").append(module.getIdentifier()).append(\".zip\");\n      StringBuilder sb2 = new StringBuilder();\n      sb2.append(basePath).append(\"/www/\").append(module.getIdentifier());\n      // TODO[FENGWEILI]\n      File archive = new File(sb1.toString());\n      try {\n        ZipFile zipfile = new ZipFile(archive);\n        for (Enumeration e = zipfile.entries(); e.hasMoreElements(); ) {\n          ZipEntry entry = (ZipEntry) e.nextElement();\n          unzipEntry(zipfile, entry, sb2.toString());\n        }\n\n      } catch (Exception e) {\n\n        Log.e(\"uzip\", \"Error while extracting file \" + archive, e);\n        throw e;\n      } finally {\n\n      }\n\n    } else {\n      // context.sendStickyBroadcast(new Intent(\"com.csair.cubeModelChange\").putExtra(\n      // \"identifier\", module.getIdentifier()));\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1890, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 87, "focalAPIEnd": 128, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/serious198706/DFCarCheckerProject/tree/master/DFCarChecker/src/main/java/com/df/service/Helper.java", "rawCode": "  public static void setPhotoSize(long currentTimeMillis, int max) {\n    String path = Environment.getExternalStorageDirectory().getPath() + \"/Pictures/DFCarChecker/\";\n    String fileName = Long.toString(currentTimeMillis) + \".jpg\";\n\n    File file = new File(path + fileName);\n    Bitmap bitmap = BitmapFactory.decodeFile(path + fileName);\n\n    int width = bitmap.getWidth();\n    int height = bitmap.getHeight();\n\n    Bitmap newBitmap = null;\n\n    float ratio;\n    float newWidth;\n    float newHeight;\n\n    // 如果宽度小于800, 无视\n    if (width > max) {\n      ratio = (float) width / (float) max;\n      newWidth = max;\n      newHeight = height / ratio;\n    } else if (height > max) {\n      ratio = (float) height / (float) max;\n      newWidth = width / ratio;\n      newHeight = max;\n    } else {\n      newWidth = width;\n      newHeight = height;\n    }\n\n    newBitmap = Bitmap.createScaledBitmap(bitmap, (int) newWidth, (int) newHeight, true);\n\n    try {\n      FileOutputStream ostream = new FileOutputStream(file);\n      newBitmap.compress(Bitmap.CompressFormat.JPEG, 90, ostream);\n\n      ostream.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1891, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["toString()", "e(String,*)"], "tryExpressionStart": 92, "tryExpressionEnd": 96, "tryBlockStart": 92, "tryBlockEnd": 876, "catchExpressionStart": 539, "catchExpressionEnd": 561, "catchBlockStart": 539, "catchBlockEnd": 607, "exceptionHandlingCallStart": [438, 569], "exceptionHandlingCallEnd": [484, 600], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 115, "focalAPIEnd": 156, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [178], "useEnd": [197], "hasFinally": 1, "cleanUpCall": ["FileInputStream.close()"], "finallyExpressionStart": 680, "finallyExpressionEnd": 688, "finallyBlockStart": 680, "finallyBlockEnd": 876, "cleanUpCallStart": [739], "cleanUpCallEnd": [750], "url": "https://github.com/arnevidar/TimeApp/tree/master/android/src/com/punchmachine/filehandling/EmailSettings.java", "rawCode": "  private void readFile() {\n    String jsonString = \"\";\n    FileInputStream fIn = null;\n    try {\n      File dir = Environment.getExternalStorageDirectory();\n      File myFile = new File(dir, path);\n      fIn = new FileInputStream(myFile);\n      FileChannel fc = fIn.getChannel();\n      MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());\n      /* Instead of using default, pass in a decoder. */\n      jsonString = Charset.defaultCharset().decode(bb).toString();\n      jsonObject = new JSONObject(jsonString);\n    } catch (IOException e) {\n      Log.e(\"ReadFile\", e.toString());\n    } catch (JSONException je) {\n      Log.e(\"JSON ex\", je.toString());\n    } finally {\n      if (fIn != null) {\n        try {\n          fIn.close();\n        } catch (IOException ioe) {\n          Log.e(\"EmailSettings.java, readFile\", ioe.toString());\n        }\n      }\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1892, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 374, "focalAPIEnd": 415, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [365], "useEnd": [432], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rjmarsan/PlasmaSound/tree/master/src/com/rj/processing/plasmasoundhd/PDActivity.java", "rawCode": "  public void record() {\n    String name;\n    try {\n      name = JSONPresets.getPresets().getCurrent().getString(\"name\");\n      if (sequencer.isAdded()) {\n        name += \"_\" + JSONSequencerPresets.getPresets().getCurrent().getString(\"name\");\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      name = \"errorerrorerror\";\n    }\n    File outfolder = new File(Environment.getExternalStorageDirectory(), \"Plasma Sound\");\n    outfolder.mkdirs();\n    String filename = pdman.recordOnOff(outfolder, name, true);\n    MiscDialogs.checkForSoundcloudAndDoThatOrNot(this, filename, name);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1893, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 323, "focalAPIEnd": 364, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["path.getPath()"], "useStart": [323], "useEnd": [374], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gnuton/Playground/tree/master/Android/NHProject/NewsHub/src/main/java/org/gnuton/newshub/utils/Utils.java", "rawCode": "  public static File getExternalCacheDir(Context context) {\n    if (hasExternalCacheDir()) {\n      return context.getExternalCacheDir();\n    }\n\n    // Before Froyo we need to construct the external cache dir ourselves\n    final String cacheDir = \"/Android/data/\" + context.getPackageName() + \"/cache/\";\n    return new File(Environment.getExternalStorageDirectory().getPath() + cacheDir);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1894, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 65, "focalAPIEnd": 106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path,String)"], "useStart": [56], "useEnd": [121], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sasq64/droidsound/tree/master/src/com/ssb/droidsound/file/FileUtils.java", "rawCode": "  public static File getTempDir() {\n    File droidDir = new File(Environment.getExternalStorageDirectory(), \"droidsound\");\n    File tempDir = new File(droidDir, \"tempmusic\");\n    File dir = new File(tempDir, \"music\" + Long.toString(System.nanoTime()));\n    dir.mkdirs();\n    return dir;\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1895, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 360, "focalAPIEnd": 401, "followUpCheck": "!f.renameTo(new File(path))", "checkType": "IF", "followUpCheckExpressionStart": 670, "followUpCheckExpressionEnd": 702, "followUpCheckBlockStart": 670, "followUpCheckBlockEnd": 738, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tigoe/BeginningNFC/tree/master/MoodSetter/plugins/org.apache.cordova.core.AudioHandler/src/android/AudioPlayer.java", "rawCode": "  /**\n   * Save temporary recorded file to specified name\n   *\n   * @param file\n   */\n  public void moveFile(String file) {\n    /* this is a hack to save the file as the specified name */\n    File f = new File(this.tempFile);\n\n    if (!file.startsWith(\"/\")) {\n      if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n        file = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + file;\n      } else {\n        file = \"/data/data/\" + handler.cordova.getActivity().getPackageName() + \"/cache/\" + file;\n      }\n    }\n\n    String logMsg = \"renaming \" + this.tempFile + \" to \" + file;\n    Log.d(LOG_TAG, logMsg);\n    if (!f.renameTo(new File(file))) Log.e(LOG_TAG, \"FAILED \" + logMsg);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1896, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 104, "focalAPIEnd": 145, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path)"], "useStart": [230], "useEnd": [244], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/david-sabata/DungeonsAndStudents/tree/master/src/cz/davidsabata/at/postareg/immandbeta120803/locator/WifiLogger.java", "rawCode": "  public static List<LocationInfo> deserializeFromSDcardJsonStatic(String filename) {\n    String path = Environment.getExternalStorageDirectory() + \"/\" + filename;\n\n    String content = null;\n    try {\n      content = new Scanner(new File(path)).useDelimiter(\"\\\\Z\").next();\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n    }\n\n    Gson gson = new Gson();\n    Type collectionType = new TypeToken<List<LocationInfo>>() {}.getType();\n    return gson.fromJson(content, collectionType);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1897, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 320, "focalAPIEnd": 361, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teleportR/TeleportR/tree/master/src/org/teleportr/model/PlaceProvider.java", "rawCode": "  @Override\n  public void onSharedPreferenceChanged(SharedPreferences autocompletion, String key) {\n    Log.d(TAG, \"onSharedPreferenceChanged\");\n\n    // prepare database queries\n    if (db != null) db.close();\n    db = new DatabaseHelper(getContext());\n\n    StringBuilder builder = new StringBuilder();\n    String dir = Environment.getExternalStorageDirectory().getPath() + \"/teleporter/\";\n    builder.append(String.format(SQL, \"city\", \"address\", \"myplaces\"));\n    for (String file : autocompletion.getAll().keySet()) {\n      if (autocompletion.getBoolean(file, false)) {\n        String path = dir + file;\n        if (!new File(path).exists()) {\n          Log.d(TAG, file + \" doesn't exist\");\n          continue;\n        }\n        String name = file.split(\"\\\\.\")[0];\n        db.getWritableDatabase()\n            .execSQL(\"ATTACH DATABASE '\" + path + \"' AS '\" + name.replace(\"-\", \"_\") + \"';\");\n        builder.append(\"UNION ALL \");\n        builder.append(\n            String.format(\n                SQL,\n                \"'\" + name.substring(name.indexOf(\"_\") + 1) + \"'\",\n                \"name\",\n                name.replace(\"-\", \"_\") + \".places\"));\n        // Log.d(TAG, name);\n      }\n    }\n    builder.append(\" LIMIT 42\");\n    sql = builder.toString();\n    // Log.d(TAG, sql);\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1898, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 16392, "focalAPIEnd": 16433, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(path)", "new File(path)"], "useStart": [16481, 16598], "useEnd": [16495, 16612], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fywb251/bsl_impc_android/tree/master/cube-android/src/com/foreveross/chameleon/pad/fragment/ChatRoomFragment.java", "rawCode": "  private void initValues(View view) {\n    voiceStatus = false;\n    if (userModel != null) {\n      userModel = null;\n    }\n    if (chatGroupModel != null) {\n      chatGroupModel = null;\n    }\n\n    chatroom_layout_content = (ChatroomLayout) view.findViewById(R.id.chatroom_layout_content);\n    chatroom_layout_content.setTouchCallback(\n        new ChatroomLayout.TouchCallback() {\n\n          @Override\n          public void onTouchCallbackEvent() {\n            closeOtherWindow();\n          }\n        });\n\n    // 清除当前聊天的jid\n    Preferences.saveChatJid(\"\", Application.sharePref);\n    Intent i = getAssocActivity().getIntent();\n    String chat = i.getStringExtra(\"chat\");\n    chat_popwindows = (RelativeLayout) view.findViewById(R.id.chat_popwindows);\n    chat_opengallery = (Button) view.findViewById(R.id.chat_opengallery);\n    chat_opengallery.setOnClickListener(mClickListener);\n    chat_takepicture = (Button) view.findViewById(R.id.chat_takepicture);\n    chat_takepicture.setOnClickListener(mClickListener);\n    chat_cancle = (Button) view.findViewById(R.id.chat_cancle);\n    chat_cancle.setOnClickListener(mClickListener);\n    chat_pop_transparent = (LinearLayout) view.findViewById(R.id.chat_pop_transparent);\n    chat_pop_transparent.setOnClickListener(mClickListener);\n    titlebar_right = (Button) view.findViewById(R.id.title_barright);\n    titlebar_right.setText(\"管理\");\n    titlebar_right.setOnClickListener(mClickListener);\n    chat_change_btn = (Button) view.findViewById(R.id.chat_change_btn);\n    chat_change_btn.setOnClickListener(mClickListener);\n    chat_emotion_btn = (Button) view.findViewById(R.id.chat_emotion_btn);\n    chat_emotion_btn.setOnClickListener(mClickListener);\n    collect_friend = (Button) view.findViewById(R.id.chatroom_collect_friend_icon);\n    collect_friend.setVisibility(View.VISIBLE);\n    collect_friend.setOnClickListener(mClickListener);\n    chat_error_message = (TextView) view.findViewById(R.id.chat_error_message);\n    chat_net_exception = (LinearLayout) view.findViewById(R.id.chat_net_exception);\n    chat_send_layout = (RelativeLayout) view.findViewById(R.id.chat_send_layout);\n    if (\"room\".equals(chat)) {\n      // changeButton.setVisibility(View.GONE);\n      roomId = i.getStringExtra(\"jid\");\n\n      // 保存当前聊天用户\n      Preferences.saveChatJid(roomId, Application.sharePref);\n      chatGroupModel = IMModelManager.instance().getChatRoomContainer().getStuff(roomId);\n\n      if (chatGroupModel != null) {\n        roomIsNoExit = false;\n        titlebar_right.setVisibility(View.VISIBLE);\n        CubeModule module =\n            CubeModuleManager.getInstance()\n                .getCubeModuleByIdentifier(TmpConstants.CHAT_RECORD_IDENTIFIER);\n        if (module != null) {\n          module.decreaseMsgCountBy(chatGroupModel.getUnreadMessageCount());\n        }\n        chatGroupModel.clearNewMessageCount();\n        conversations = chatGroupModel.getConversations();\n      } else {\n        roomIsNoExit = true;\n        titlebar_right.setVisibility(View.GONE);\n        // 用戶群为已解散用户群\n        // 构建一个假的chatGroupModel\n        chatGroupModel = new ChatGroupModel();\n        SessionModel model = IMModelManager.instance().getSessionContainer().getStuff(roomId);\n        chatGroupModel.setGroupName(model.getRoomName());\n        chatGroupModel.setGroupCode(roomId);\n        chatGroupModel.setRoomJid(roomId);\n        conversations = chatGroupModel.findLastHistory(-1);\n        Log.i(\"conversations\", conversations.toString());\n        chat_net_exception.setVisibility(View.VISIBLE);\n        chat_send_layout.setVisibility(View.GONE);\n        List<ChatDataModel> models =\n            StaticReference.userMf.queryForEq(\"roomJid\", roomId, ChatDataModel.class);\n        if (models != null && models.size() > 0) {\n          ChatDataModel chatModel = models.get(0);\n          if (chatModel.getMycreate()) {\n            chat_error_message.setText(\"用户组已解散\");\n          } else {\n            chat_error_message.setText(\"你已退出用户组\");\n          }\n        }\n      }\n\n    } else {\n      titlebar_right.setVisibility(View.GONE);\n      collect_friend.setVisibility(View.VISIBLE);\n      String jid = i.getStringExtra(\"jid\");\n      Preferences.saveChatJid(jid, Application.sharePref);\n      userModel = IMModelManager.instance().getUserModel(jid);\n      if (userModel != null) {\n        if (userModel.isFavor()) {\n          collect_friend.setText(\"取消关注\");\n\n        } else {\n          collect_friend.setText(\"关注\");\n        }\n        CubeModule module =\n            CubeModuleManager.getInstance()\n                .getCubeModuleByIdentifier(TmpConstants.CHAT_RECORD_IDENTIFIER);\n        if (module != null) {\n          module.decreaseMsgCountBy(userModel.getUnreadMessageCount());\n        }\n        userModel.clearNewMessageCount();\n        conversations = userModel.getConversations();\n      }\n    }\n\n    flowview = (RelativeLayout) view.findViewById(R.id.chat_room_flowview);\n    flowview.setOnClickListener(mClickListener);\n    if (application.getNotificationService() != null) {\n      currentAccount =\n          Preferences.getUserName(Application.sharePref)\n              + \"@\"\n              + application\n                  .getNotificationService()\n                  .getManagerServiceName(application.getChatManager());\n    }\n\n    PreferencesUtil.setValue(getAssocActivity(), \"currentAccount\", currentAccount);\n\n    titlebar_left = (Button) view.findViewById(R.id.title_barleft);\n    titlebar_left.setOnClickListener(mClickListener);\n    titlebar_content = (TextView) view.findViewById(R.id.title_barcontent);\n    if (chatGroupModel != null) {\n      titlebar_content.setText(chatGroupModel.getGroupName());\n    }\n    if (userModel != null) {\n      titlebar_content.setText(userModel.getName());\n    }\n\n    titlebar_content.setEllipsize(TruncateAt.END);\n    titlebar_content.setSingleLine(true);\n    listview = (ListView) view.findViewById(R.id.chat_history_lv);\n    listview.setSelected(true);\n\n    edittext = (EditText) view.findViewById(R.id.chat_content_et);\n    edittext.setOnFocusChangeListener(focusChangeListener);\n    edittext.setOnTouchListener(\n        new OnTouchListener() {\n\n          @Override\n          public boolean onTouch(View v, MotionEvent event) {\n            /* if (local_module_layout.isShown()) {\n            local_module_layout.setVisibility(View.GONE);\n            }*/\n            chat_change_btn.setBackgroundResource(R.drawable.voice_button_selector);\n            local_ex_layout.setVisibility(View.GONE);\n            return false;\n          }\n        });\n\n    postButton = (Button) view.findViewById(R.id.chat_btn_sendcontent);\n    postButton.setOnClickListener(mClickListener);\n    chat_plus_btn = (Button) view.findViewById(R.id.chat_plus_btn);\n    chat_plus_btn.setOnClickListener(mClickListener);\n    chat_voice = (Button) view.findViewById(R.id.chat_voice);\n    chat_voice.setOnTouchListener(\n        new OnTouchListener() {\n          @Override\n          public boolean onTouch(View v, MotionEvent event) {\n            if (application.getNotificationService() != null\n                && !application.getNotificationService().isOnline(application.getChatManager())) {\n\n              if (!roomIsNoExit) {\n                flowview.setVisibility(View.VISIBLE);\n                chat_net_exception.setVisibility(View.VISIBLE);\n                chat_send_layout.setVisibility(View.GONE);\n              }\n              return true;\n            }\n\n            if (event.getAction() == MotionEvent.ACTION_DOWN) {\n              mHandler.sendEmptyMessage(RECORD_START);\n              start = 0;\n              start = System.currentTimeMillis();\n              if (userModel != null) {\n                longimplement(userModel.getName());\n              }\n              if (chatGroupModel != null) {\n                longimplement(chatGroupModel.getGroupName());\n              }\n              // voiceButton\n              // .setBackgroundResource(R.drawable.chatroom_voice_button_click);\n\n              isStart.set(true);\n              Thread ampThread = new Thread(ampTask);\n              ampThread.start();\n            }\n            if (event.getAction() == MotionEvent.ACTION_UP) {\n              // 延时一秒\n              try {\n                Thread.sleep(300);\n              } catch (InterruptedException e1) {\n                // TODO Auto-generated catch block\n                e1.printStackTrace();\n              }\n              mHandler.sendEmptyMessage(RECORD_END);\n              isStart.set(false);\n              // voiceButton\n              // .setBackgroundResource(R.drawable.chatroom_voice_button);\n              // 此处触发停止事件\n              if (mr != null) {\n                // 停止录音\n                mr.stop();\n                // 释放录音\n                try {\n                  mr.reset();\n                  mr.release();\n                } catch (Exception e) {\n                  e.printStackTrace();\n                }\n\n                // 翻译资源\n                mr = null;\n              }\n              if (System.currentTimeMillis() - start > 1500) {\n                Toast.makeText(getAssocActivity(), \"录制成功\", Toast.LENGTH_SHORT).show();\n                String fromWho = currentAccount;\n                String toWho = null;\n                if (userModel != null) {\n                  toWho = userModel.getJid();\n                }\n                if (chatGroupModel != null) {\n                  toWho = chatGroupModel.getRoomJid();\n                }\n\n                final ConversationMessage conversation =\n                    createConversation(myRecAudioFile.getPath(), fromWho, toWho, \"voice\");\n                // 发送消息至服务器\n                // ====================MARK\n                HttpRequestAsynTask uploadTask =\n                    new HttpRequestAsynTask(ChatRoomFragment.this.getAssocActivity()) {\n\n                      @Override\n                      protected void doPostExecute(String result) {\n\n                        if (\"error\".equals(result)) {\n                          Toast.makeText(\n                                  ChatRoomFragment.this.getAssocActivity(),\n                                  \"发送失败\",\n                                  Toast.LENGTH_SHORT)\n                              .show();\n                          return;\n                        }\n                        try {\n                          JSONObject json = new JSONObject(result);\n                          String id = json.getString(\"id\");\n                          conversation.setPicId(id);\n                          sendMessage(conversation);\n                        } catch (JSONException e) {\n                          e.printStackTrace();\n                          Toast.makeText(\n                                  ChatRoomFragment.this.getAssocActivity(),\n                                  \"发送失败\",\n                                  Toast.LENGTH_SHORT)\n                              .show();\n                        }\n                      }\n                    };\n                uploadTask.setNeedProgressDialog(false);\n                uploadTask.setShowProgressDialog(false);\n                StringBuilder sb = new StringBuilder();\n                sb.append(\"UPLOAD:file=\")\n                    .append(new File(myRecAudioFile.getPath()))\n                    .append(\";enctype=\")\n                    .append(\"multipart/form-data\")\n                    .append(\";sessionKey=\")\n                    .append(URL.getSessionKey())\n                    .append(\";appKey=\")\n                    .append(URL.getAppKey());\n                uploadTask.execute(\n                    URL.UPLOAD_URL, sb.toString(), HttpUtil.UTF8_ENCODING, HttpUtil.HTTP_POST);\n              } else {\n                if (myRecAudioFile.exists()) {\n                  myRecAudioFile.delete();\n                }\n                Toast.makeText(getAssocActivity(), \"您讲话的时间太短了\", Toast.LENGTH_SHORT).show();\n              }\n            }\n            return true;\n          }\n        });\n\n    // layout_voice = (RelativeLayout) view.findViewById(R.id.chat_layout_voice);\n    // layout_keyboard = (RelativeLayout) view.findViewById(R.id.chat_layout_keyboard);\n\n    if (userModel != null) {\n      adapter = new ChatRoomAdapter(getAssocActivity(), conversations, userModel);\n    }\n    if (chatGroupModel != null) {\n      adapter = new ChatRoomAdapter(getAssocActivity(), conversations, chatGroupModel);\n    }\n    listview.setAdapter(adapter);\n    listview.setSelection(conversations.size());\n\n    if (chatGroupModel != null) {\n      if (!roomIsNoExit) {\n        new AsyncTask<Void, Void, Void>() {\n\n          @Override\n          protected Void doInBackground(Void... params) {\n            chatGroupModel.findHistory(-1);\n            return null;\n          }\n\n          protected void onPostExecute(Void result) {\n            listview.setSelection(adapter.getCount());\n            adapter.notifyDataSetChanged();\n          };\n        }.execute();\n      }\n    }\n\n    progressDialog = new ProgressDialog(getAssocActivity());\n    progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\n    progressDialog.setTitle(\"提示\");\n    progressDialog.setCanceledOnTouchOutside(false);\n    progressDialog.setCancelable(true);\n    progressDialog.setMessage(\"正在录音...\");\n\n    dialog = createDialog();\n    NotificationService notificationService =\n        Application.class.cast(getAssocActivity().getApplication()).getNotificationService();\n    if (notificationService != null && notificationService.isOnline(application.getChatManager())) {\n      if (!roomIsNoExit) {\n        flowview.setVisibility(View.GONE);\n        chat_net_exception.setVisibility(View.GONE);\n        chat_send_layout.setVisibility(View.VISIBLE);\n      }\n\n    } else {\n      if (!roomIsNoExit) {\n        flowview.setVisibility(View.VISIBLE);\n        chat_net_exception.setVisibility(View.VISIBLE);\n        chat_send_layout.setVisibility(View.GONE);\n      }\n    }\n\n    /** ----------------------- 表情部分 ----------------------- */\n    // local_module_layout = (LinearLayout) view.findViewById(R.id.local_module_layout);\n    local_ex_layout = (RelativeLayout) view.findViewById(R.id.local_expression_layout);\n    viewPager = (ViewPager) view.findViewById(R.id.viewpagerLayout);\n    emotionViewGroup = (ViewGroup) view.findViewById(R.id.viewGroup);\n    ExpressionUtil.getInstance().ParseExpressionFileData(this.getAssocActivity(), 26);\n    createExpressionPageView();\n    LocalModule emotions = new LocalModule();\n    emotions.setModuleName(\"表情\");\n    emotions.setLocalClass(\"emotion\");\n    emotions.setIcon(getResources().getDrawable(R.drawable.emotions_big));\n    emotions.setSortNum(2);\n    modulelList.add(emotions);\n    LocalModule photographer = new LocalModule();\n    photographer.setModuleName(\"拍照\");\n    photographer.setLocalClass(\"photographer\");\n    photographer.setIcon(getResources().getDrawable(R.drawable.photo_icon_big));\n    photographer.setSortNum(1);\n    modulelList.add(photographer);\n    LocalModule localPic = new LocalModule();\n    localPic.setModuleName(\"图片\");\n    localPic.setLocalClass(\"picture\");\n    localPic.setIcon(getResources().getDrawable(R.drawable.local_pic_big));\n    localPic.setSortNum(0);\n    modulelList.add(localPic);\n    /* grideView = (GridView) view.findViewById(R.id.grideView);\n    grideView.setAdapter(new GridVeiwListAdapter(this.getAssocActivity(),modulelList));\n    grideView.setOnItemClickListener(new OnItemClickListener() {\n\n    @Override\n    public void onItemClick(AdapterView<?> adapter, View view,\n    int index, long arg3) {\n    if (modulelList.get(index).getLocalClass().equals(\"emotion\")) {\n    // 表情\n    if (local_module_layout.isShown()) {\n    local_module_layout.setVisibility(View.GONE);\n    local_ex_layout.setVisibility(View.VISIBLE);\n    // viewPager.setVisibility(View.VISIBLE);\n    }\n    } else if (modulelList.get(index).getLocalClass()\n    .equals(\"picture\")) {\n    // 关闭键盘\n    // InputMethodManager imm2 = (InputMethodManager) getAssocActivity().getSystemService(Context.INPUT_METHOD_SERVICE);\n    // imm2.hideSoftInputFromWindow(edittext.getWindowToken(), 0);\n    closeKeyboard();\n    openGallery();\n    } else if (modulelList.get(index).getLocalClass()\n    .equals(\"photographer\")) {\n    // 关闭键盘\n    // InputMethodManager imm2 = (InputMethodManager) getAssocActivity().getSystemService(Context.INPUT_METHOD_SERVICE);\n    // imm2.hideSoftInputFromWindow(edittext.getWindowToken(), 0);\n    closeKeyboard();\n    takePicture();\n\n    }\n    }\n    });*/\n    String path = Environment.getExternalStorageDirectory() + \"/CubeImageCache/sendFiles/\";\n    File dir = new File(path);\n    if (!dir.exists()) {\n      dir.mkdirs();\n    }\n    path += TEMP_PHOTO_FILE_NAME;\n    mFileTemp = new File(path);\n    if (!mFileTemp.exists()) {\n      try {\n        mFileTemp.createNewFile();\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Log.e(\"------------------------\", \"文件路径：\" + mFileTemp.getPath());\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1899, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 64, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stevegaron/Synodroid/tree/master/src/com/bigpupdev/synodroid/ui/DebugActivity.java", "rawCode": "  private void sendDebugLogs(String logs) {\n    File out_path = Environment.getExternalStorageDirectory();\n    out_path = new File(out_path, \"Android/data/com.bigpupdev.synodroid/cache/\");\n    File file = new File(out_path, \"debug_log.txt\");\n    try {\n      // Make sure the Pictures directory exists.\n      out_path.mkdirs();\n      OutputStream os = new FileOutputStream(file);\n      os.write(logs.getBytes());\n      os.close();\n      try {\n        final Intent emailIntent = new Intent(android.content.Intent.ACTION_SEND);\n        emailIntent.putExtra(\n            android.content.Intent.EXTRA_EMAIL, new String[] {\"synodroid@gmail.com\"});\n        emailIntent.putExtra(\n            android.content.Intent.EXTRA_SUBJECT, \"Synodroid Professional - Debug log\");\n        emailIntent.setType(\"plain/text\");\n        emailIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse(\"file://\" + file.getAbsolutePath()));\n        startActivity(emailIntent);\n      } catch (Exception e) {\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\n        builder.setMessage(R.string.err_noemail);\n        builder\n            .setTitle(getString(R.string.connect_error_title))\n            .setCancelable(false)\n            .setPositiveButton(\n                \"OK\",\n                new DialogInterface.OnClickListener() {\n                  public void onClick(DialogInterface dialog, int id) {\n                    dialog.cancel();\n                  }\n                });\n        AlertDialog errorDialog = builder.create();\n        try {\n          errorDialog.show();\n        } catch (BadTokenException ex) {\n          // Unable to show dialog probably because intent has been closed. Ignoring...\n        }\n      }\n    } catch (Exception e) {\n      // Unable to create file, likely because external storage is\n      // not currently mounted.\n      try {\n        Log.e(Synodroid.DS_TAG, \"Error writing \" + file + \" to SDCard.\", e);\n      } catch (Exception ex) {\n        /*DO NOTHING*/\n      }\n    }\n  }\n"}, {"dataset": "getExternalStorageDirectory", "exampleID": 1900, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 60, "tryExpressionEnd": 64, "tryBlockStart": 60, "tryBlockEnd": 640, "catchExpressionStart": 586, "catchExpressionEnd": 606, "catchBlockStart": 586, "catchBlockEnd": 640, "exceptionHandlingCallStart": [614], "exceptionHandlingCallEnd": [633], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "path = environment.getExternalStorageDirectory()", "focalAPIStart": 247, "focalAPIEnd": 288, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rcg0/arc/tree/master/android application/arc/src/com/example/asdf/FileHelper.java", "rawCode": "  public void downloadData(String url, Button button) {\n    try {\n\n      URL URL = new URL(url);\n      URLConnection conn = URL.openConnection();\n      conn.connect();\n\n      InputStream is = URL.openStream();\n\n      File testDirectory = new File(Environment.getExternalStorageDirectory() + \"/ARC/\");\n\n      FileOutputStream fos = new FileOutputStream(testDirectory + \"/\" + button.getTag());\n\n      byte data[] = new byte[1024];\n\n      int count = 0;\n\n      while ((count = is.read(data)) != -1) {\n        fos.write(data, 0, count);\n      }\n\n      is.close();\n      fos.close();\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}]