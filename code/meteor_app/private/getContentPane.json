[{"dataset": "getContentPane", "exampleID": 3301, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [289], "initializationEnd": [301], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 307, "focalAPIEnd": 329, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JGraphAdapterDemo)", "jFrame.setTitle(String)", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [307, 347, 401, 459, 477], "useEnd": [341, 395, 453, 471, 499], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rcpoison/jgrapht/tree/master/jgrapht-demo/src/main/java/org/jgrapht/demo/JGraphAdapterDemo.java", "rawCode": "  /**\n   * An alternative starting point for this demo, to also allow running this applet as an\n   * application.\n   *\n   * @param args ignored.\n   */\n  public static void main(String[] args) {\n    JGraphAdapterDemo applet = new JGraphAdapterDemo();\n    applet.init();\n\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(applet);\n    frame.setTitle(\"JGraphT Adapter to JGraph Demo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3302, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 80, "focalAPIEnd": 102, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.pack()", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [80, 130, 148, 206, 224], "useEnd": [124, 142, 200, 218, 246], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nh2/dsa42/tree/master/teilnehmer/ben/HalloWelt/src/FramePanel.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(new FramePanel());\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3303, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [1102], "initializationEnd": [1142], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setIconImage(Image)"], "configurationStart": [1680], "configurationEnd": [1743], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 1749, "focalAPIEnd": 1771, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.pack()", "jFrame.setSize(int,int)", "centerWindowOnComponent(jFrame,*)", "jFrame.setVisible(boolean)"], "useStart": [1749, 2887, 2905, 2935, 3014], "useEnd": [1786, 2899, 2928, 3008, 3036], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rachitpant/UAlbany-Client/tree/master/src/java/org/jivesoftware/sparkimpl/plugin/scratchpad/ScratchPadPlugin.java", "rawCode": "  private void showPrivateNotes(final PrivateNotes privateNotes) {\n    String text = privateNotes.getNotes();\n\n    final JLabel titleLabel = new JLabel(\"Notepad\");\n    titleLabel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY));\n    titleLabel.setFont(new Font(\"Dialog\", Font.BOLD, 13));\n    titleLabel.setHorizontalAlignment(JLabel.CENTER);\n\n    final JTextPane pane = new JTextPane();\n    pane.setFont(new Font(\"Dialog\", Font.PLAIN, 12));\n\n    pane.setOpaque(false);\n\n    final JScrollPane scrollPane =\n        new JScrollPane(\n            pane, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n    scrollPane.setOpaque(false);\n    scrollPane.getViewport().setOpaque(false);\n\n    pane.setText(text);\n    final RolloverButton button = new RolloverButton(Res.getString(\"save\"), null);\n    final RolloverButton cancelButton = new RolloverButton(Res.getString(\"cancel\"), null);\n    ResourceUtils.resButton(button, Res.getString(\"button.save\"));\n    ResourceUtils.resButton(cancelButton, Res.getString(\"button.cancel\"));\n\n    final JFrame frame = new JFrame(Res.getString(\"title.notes\"));\n\n    final JPanel mainPanel = new JPanel();\n\n    pane.addKeyListener(\n        new KeyAdapter() {\n          public void keyReleased(KeyEvent e) {\n            if (e.getKeyChar() == KeyEvent.VK_ESCAPE) {\n              frame.dispose();\n\n              // Save it.\n              String text = pane.getText();\n              privateNotes.setNotes(text);\n              PrivateNotes.savePrivateNotes(privateNotes);\n            }\n          }\n        });\n\n    mainPanel.setBackground(Color.white);\n    mainPanel.setLayout(new GridBagLayout());\n    frame.setIconImage(SparkManager.getMainWindow().getIconImage());\n    frame.getContentPane().add(mainPanel);\n\n    // mainPanel.add(titleLabel, new GridBagConstraints(0, 0, 3, 1, 1.0, 0.0,\n    // GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));\n\n    mainPanel.add(\n        scrollPane,\n        new GridBagConstraints(\n            0,\n            1,\n            3,\n            1,\n            1.0,\n            1.0,\n            GridBagConstraints.WEST,\n            GridBagConstraints.BOTH,\n            new Insets(0, 0, 0, 0),\n            0,\n            0));\n    mainPanel.add(\n        button,\n        new GridBagConstraints(\n            1,\n            2,\n            1,\n            1,\n            1.0,\n            0.0,\n            GridBagConstraints.EAST,\n            GridBagConstraints.NONE,\n            new Insets(0, 0, 0, 0),\n            0,\n            0));\n    mainPanel.add(\n        cancelButton,\n        new GridBagConstraints(\n            2,\n            2,\n            1,\n            1,\n            0.0,\n            0.0,\n            GridBagConstraints.EAST,\n            GridBagConstraints.NONE,\n            new Insets(0, 0, 0, 0),\n            0,\n            0));\n\n    frame.pack();\n    frame.setSize(400, 400);\n\n    GraphicUtils.centerWindowOnComponent(frame, SparkManager.getMainWindow());\n    frame.setVisible(true);\n    pane.setCaretPosition(0);\n\n    button.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent actionEvent) {\n            frame.dispose();\n\n            // Save it.\n            String text = pane.getText();\n            privateNotes.setNotes(text);\n            PrivateNotes.savePrivateNotes(privateNotes);\n          }\n        });\n\n    cancelButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent actionEvent) {\n            frame.dispose();\n          }\n        });\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3304, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [631], "initializationEnd": [643], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 664, "focalAPIEnd": 686, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(WheelInterface,*)", "property.add(Button,*)", "property.add(Button,*)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "jFrame.setLocation(int,int)", "jFrame.setVisible(boolean)"], "useStart": [692, 731, 773, 814, 872, 901, 934], "useEnd": [725, 767, 808, 866, 895, 928, 956], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/osate/examples/tree/master/codegen/stepper-motor/usercode-simple/WheelInterface.java", "rawCode": "  public static void main(String[] args) {\n    final WheelInterface demo = new WheelInterface();\n    Button btnStrat = new Button(\"Start\"), btnStop = new Button(\"Stop\");\n    btnStrat.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            demo.addIncrement(1);\n            demo.setVisible(true);\n            // demo.start();\n          }\n        });\n    btnStop.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            demo.stop();\n            demo.setVisible(false);\n          }\n        });\n    JFrame frame = new JFrame();\n    Container cp = frame.getContentPane();\n    cp.add(demo, BorderLayout.CENTER);\n    cp.add(btnStrat, BorderLayout.NORTH);\n    cp.add(btnStop, BorderLayout.SOUTH);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(500, 500);\n    frame.setLocation(500, 500);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3305, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [91], "initializationEnd": [125], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 211, "focalAPIEnd": 233, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(SwingLoggerPanel)", "jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [211, 256, 285, 355], "useEnd": [250, 279, 349, 377], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vaadin/gwt/tree/master/dev/core/test/com/google/gwt/dev/SwingTreeLoggerTestApp.java", "rawCode": "  /** @param args ignored */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"SwingTreeLogger test\");\n    SwingLoggerPanel loggerPanel = new SwingLoggerPanel(TreeLogger.INFO, null);\n    frame.getContentPane().add(loggerPanel);\n    frame.setSize(950, 700);\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.setVisible(true);\n    TreeLogger logger = loggerPanel.getLogger();\n    logger.log(TreeLogger.INFO, \"info 1\");\n    TreeLogger branch = logger.branch(TreeLogger.INFO, \"info branch\");\n    branch.log(TreeLogger.DEBUG, \"debug 1\");\n    branch.log(TreeLogger.ERROR, \"error 1\");\n    TreeLogger dbgBranch = logger.branch(TreeLogger.DEBUG, \"debug branch\");\n    dbgBranch.log(TreeLogger.SPAM, \"spam 1\");\n    dbgBranch.log(TreeLogger.WARN, \"warn 1\");\n    logger.log(TreeLogger.INFO, \"info 2\");\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3306, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [230], "initializationEnd": [269], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 371, "focalAPIEnd": 393, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [371, 451, 469], "useEnd": [417, 463, 491], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/timaschew/jANN/tree/master/src/main/java/de/unikassel/ann/gui/HelpOverview.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the event\n   * dispatch thread.\n   */\n  public static void createAndShowGUI() {\n\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"jANN-Funktionen Übersicht\");\n    // frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Add content to the window.\n    frame.getContentPane().add(new HelpOverview());\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3307, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [352], "initializationEnd": [377], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [383], "configurationEnd": [435], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 441, "focalAPIEnd": 463, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(String,AWTMedical3)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [441, 490, 508], "useEnd": [484, 502, 530], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/malaterre/GDCM/tree/master/Utilities/VTK/Examples/Java/AWTMedical3.java", "rawCode": "  public static void main(String s[]) {\n    if (s.length == 0) {\n      return; // need a filename here\n    }\n    File theFile = new File(s[0]);\n    // File theFile = new\n    // File(\"/Users/mmroden/Documents/MVSDownloadDirectory/Documents/1.2.840.113704.1.111.3384.1271766367.5/\");\n    AWTMedical3 panel = new AWTMedical3(theFile);\n\n    JFrame frame = new JFrame(\"AWTMedical3\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(\"Center\", panel);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3308, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [144], "initializationEnd": [182], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 1225, "focalAPIEnd": 1247, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setSize(int,int)", "jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [1225, 1264, 1293, 1322], "useEnd": [1258, 1287, 1315, 1374], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maiklos/squirrel-sql/tree/master/sql12/test/jfctests/net/sourceforge/squirrel_sql/client/update/gui/UpdateSummaryDialogTestUI.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    ApplicationArguments.initialize(new String[] {});\n\n    final JFrame frame = new JFrame(\"Test UpdateManagerDialog\");\n    JButton showDialogButton = new JButton(\"Show UpdateManager Dialog\");\n    JLabel installedVersionLabel = new JLabel(\"InstalledVersion: \");\n    JLabel availableVersionLabel = new JLabel(\"AvailableVersion: \");\n    final JTextField installedVersionTF = new JTextField(\"installedVersion\", 30);\n    final JTextField availableVersionTF = new JTextField(\"availableVersion\", 30);\n    showDialogButton.addActionListener(\n        new ActionListener() {\n          UpdateSummaryDialog dialog = null;\n\n          public void actionPerformed(ActionEvent e) {\n            dialog = new UpdateSummaryDialog(frame, getArtifacts(), null);\n            dialog.setInstalledVersion(installedVersionTF.getText());\n            dialog.setAvailableVersion(availableVersionTF.getText());\n            dialog.setVisible(true);\n          }\n        });\n    JPanel panel = new JPanel();\n\n    panel.add(installedVersionLabel);\n    panel.add(installedVersionTF);\n    panel.add(availableVersionLabel);\n    panel.add(availableVersionTF);\n    panel.add(showDialogButton);\n\n    frame.getContentPane().add(panel);\n    frame.setSize(400, 200);\n    frame.setVisible(true);\n\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3309, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [158], "initializationEnd": [176], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 183, "focalAPIEnd": 205, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.getContentPane()", "property.add(EmbeddedBrowserViewer,*)", "jFrame.setVisible(boolean)", "jFrame.pack()", "jFrame.setSize(int,int)"], "useStart": [183, 241, 241, 302, 330, 348], "useEnd": [235, 263, 296, 324, 342, 371], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rachitpant/UAlbany-Client/tree/master/src/java/org/jivesoftware/spark/component/browser/EmbeddedBrowserViewer.java", "rawCode": "  public static void main(String[] args) {\n    EmbeddedBrowserViewer viewer = new EmbeddedBrowserViewer();\n    viewer.initializeBrowser();\n    JFrame frame = new JFrame(\"Test\");\n\n    frame.getContentPane().setLayout(new BorderLayout());\n    frame.getContentPane().add(viewer, BorderLayout.CENTER);\n    frame.setVisible(true);\n    frame.pack();\n    frame.setSize(600, 400);\n    viewer.loadURL(\"http://igniterealtime.org\");\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3310, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [142], "initializationEnd": [154], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 160, "focalAPIEnd": 182, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [160, 216, 286, 304], "useEnd": [210, 280, 298, 326], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dameiers/SI2012/tree/master/src/gui/steps/VoyageMethodStep.java", "rawCode": "  /** Auto-generated main method to display this JPanel inside a new JFrame. */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(new VoyageMethodStep());\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3311, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [682], "initializationEnd": [694], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setJMenuBar(JMenuBar)"], "configurationStart": [700, 741, 876], "configurationEnd": [735, 793, 902], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 2447, "focalAPIEnd": 2469, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(SpringLayout)", "jFrame.getContentPane()", "putConstraint(*,JPanel,int,*,property)", "jFrame.getContentPane()", "putConstraint(*,JPanel,int,*,property)", "jFrame.getContentPane()", "putConstraint(*,JPanel,int,*,property)", "jFrame.getContentPane()", "property.add(JPanel)", "jFrame.getContentPane()", "putConstraint(*,JPanel,int,*,property)", "jFrame.getContentPane()", "property.add(JPanel)"], "useStart": [2447, 2695, 2609, 2808, 2724, 2923, 2837, 3035, 3035, 6206, 6119, 6419, 6419], "useEnd": [2493, 2717, 2718, 2830, 2831, 2945, 2946, 3057, 3068, 6228, 6229, 6441, 6454], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Kresshy/szoftlab4/tree/master/szoftlab4/src/hu/miracleworkers/swing/GUI.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initialize() {\n\n    try {\n      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n    } catch (ClassNotFoundException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (InstantiationException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (IllegalAccessException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (UnsupportedLookAndFeelException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    // Egy új frame létrehozása a következő méretekkel\n    frame = new JFrame();\n    frame.setBounds(100, 100, 900, 600);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Menubar hozzáadása a framehez\n    JMenuBar menuBar = new JMenuBar();\n    frame.setJMenuBar(menuBar);\n\n    // Menupont hozzáadása\n    JMenu mnNewMenu = new JMenu(\"J\\u00E1t\\u00E9k\");\n    menuBar.add(mnNewMenu);\n\n    // Menuponthoz elemek hozzáadása\n    // Minden menüpontnak beállítjuk az ActionListenert\n    // Minden menüpontnak beállítjuk az ActionCommandot\n    JMenuItem mntmNewMenuItem = new JMenuItem(\"Ind\\u00EDt\\u00E1s\");\n    mntmNewMenuItem.addActionListener(this);\n    mntmNewMenuItem.setActionCommand(\"start\");\n    mnNewMenu.add(mntmNewMenuItem);\n\n    JMenuItem mntmNewMenuItem_1 = new JMenuItem(\"Kil\\u00E9p\\u00E9s\");\n    mntmNewMenuItem_1.addActionListener(this);\n    mntmNewMenuItem_1.setActionCommand(\"exit\");\n    mnNewMenu.add(mntmNewMenuItem_1);\n\n    // Menupont hozzáadása\n    JMenu mnNewMenu_1 = new JMenu(\"S\\u00FAg\\u00F3\");\n    menuBar.add(mnNewMenu_1);\n\n    // Menuponthoz elemek hozzáadása\n    // Minden menüpontnak beállítjuk az ActionListenert\n    // Minden menüpontnak beállítjuk az ActionCommandot\n    JMenuItem mntmToplista = new JMenuItem(\"Toplista\");\n    mntmToplista.addActionListener(this);\n    mntmToplista.setActionCommand(\"highscore\");\n    mnNewMenu_1.add(mntmToplista);\n\n    JMenuItem mntmSegtsg = new JMenuItem(\"Seg\\u00EDts\\u00E9g\");\n    mntmSegtsg.addActionListener(this);\n    mntmSegtsg.setActionCommand(\"help\");\n    mnNewMenu_1.add(mntmSegtsg);\n\n    JMenuItem mntmCredits = new JMenuItem(\"Credits\");\n    mntmCredits.addActionListener(this);\n    mntmCredits.setActionCommand(\"credits\");\n    mnNewMenu_1.add(mntmCredits);\n\n    // Spring layout beállítása\n    SpringLayout springLayout = new SpringLayout();\n    frame.getContentPane().setLayout(springLayout);\n\n    // A felső panel hozzáadása\n    JPanel panel = new JPanel();\n\n    // spring layout megkötések beállítása\n    springLayout.putConstraint(\n        SpringLayout.NORTH, panel, 0, SpringLayout.NORTH, frame.getContentPane());\n    springLayout.putConstraint(\n        SpringLayout.WEST, panel, 0, SpringLayout.WEST, frame.getContentPane());\n    springLayout.putConstraint(\n        SpringLayout.EAST, panel, 884, SpringLayout.WEST, frame.getContentPane());\n    panel.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));\n    frame.getContentPane().add(panel);\n\n    // Pause gomb hozzáadása a panelhez\n    JButton btnNewButton = new JButton(\"||\");\n    btnNewButton.addActionListener(this);\n    btnNewButton.setActionCommand(\"pause\");\n    btnNewButton.setHorizontalAlignment(SwingConstants.RIGHT);\n\n    remainingPoiosonLabel = new JLabel(\"M\\u00E9reg: 5\");\n    remainingPoiosonLabel.setHorizontalAlignment(SwingConstants.RIGHT);\n\n    remainingDeodorizeLabel = new JLabel(\"Szagtalan\\u00EDt\\u00F3: 5\");\n    remainingDeodorizeLabel.setHorizontalAlignment(SwingConstants.RIGHT);\n\n    // Label hozzáadása\n    // TODO pontszámés nehézségi szint számítása és kiírása\n    lblElteltId = new JLabel(\"Pontsz\\u00E1m: XXXX Neh\\u00E9zs\\u00E9gi szint: XX\");\n    GroupLayout gl_panel = new GroupLayout(panel);\n    gl_panel.setHorizontalGroup(\n        gl_panel\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                Alignment.TRAILING,\n                gl_panel\n                    .createSequentialGroup()\n                    .addGap(28)\n                    .addComponent(lblElteltId)\n                    .addPreferredGap(ComponentPlacement.RELATED, 309, Short.MAX_VALUE)\n                    .addComponent(remainingPoiosonLabel)\n                    .addContainerGap(4, 50)\n                    .addComponent(remainingDeodorizeLabel)\n                    .addContainerGap(4, 50)\n                    .addComponent(btnNewButton)\n                    .addContainerGap()));\n    gl_panel.setVerticalGroup(\n        gl_panel\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                Alignment.TRAILING,\n                gl_panel\n                    .createSequentialGroup()\n                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(\n                        gl_panel\n                            .createParallelGroup(Alignment.BASELINE)\n                            .addComponent(\n                                btnNewButton,\n                                GroupLayout.PREFERRED_SIZE,\n                                23,\n                                GroupLayout.PREFERRED_SIZE)\n                            .addComponent(\n                                remainingPoiosonLabel,\n                                GroupLayout.PREFERRED_SIZE,\n                                23,\n                                GroupLayout.PREFERRED_SIZE)\n                            .addComponent(\n                                remainingDeodorizeLabel,\n                                GroupLayout.PREFERRED_SIZE,\n                                23,\n                                GroupLayout.PREFERRED_SIZE)\n                            .addComponent(lblElteltId))\n                    .addContainerGap()));\n    panel.setLayout(gl_panel);\n    // Ide jön a játéktér\n    // Ez a panelünk lesz a perspektívát megjelenítő nézet\n    JPanel panel_1 = new PerspectivePanel(p);\n    panel_1.addMouseListener(this);\n\n    // A panel hozzáadása a layouthoz\n    springLayout.putConstraint(SpringLayout.NORTH, panel_1, 6, SpringLayout.SOUTH, panel);\n    springLayout.putConstraint(\n        SpringLayout.WEST, panel_1, 10, SpringLayout.WEST, frame.getContentPane());\n    springLayout.putConstraint(SpringLayout.SOUTH, panel_1, 482, SpringLayout.SOUTH, panel);\n    springLayout.putConstraint(SpringLayout.EAST, panel_1, -10, SpringLayout.EAST, panel);\n    frame.getContentPane().add(panel_1);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3312, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [354], "initializationEnd": [382], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.addWindowListener(WindowListener)"], "configurationStart": [388], "configurationEnd": [414], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 484, "focalAPIEnd": 506, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JCalendarDemo)", "jFrame.pack()", "jFrame.setBounds(int,int,int,int)", "jFrame.setVisible(boolean)"], "useStart": [484, 522, 540, 702], "useEnd": [516, 534, 696, 724], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/clases-javiergarbedo-1daw/childout/tree/master/lib/src/com/toedter/calendar/demo/JCalendarDemo.java", "rawCode": "  /**\n   * Creates a JFrame with a JCalendarDemo inside and can be used for testing.\n   *\n   * @param s The command line arguments\n   */\n  public static void main(String[] s) {\n    WindowListener l =\n        new WindowAdapter() {\n          public void windowClosing(WindowEvent e) {\n            System.exit(0);\n          }\n        };\n\n    JFrame frame = new JFrame(\"JCalendar Demo\");\n    frame.addWindowListener(l);\n\n    JCalendarDemo demo = new JCalendarDemo();\n    demo.init();\n    frame.getContentPane().add(demo);\n    frame.pack();\n    frame.setBounds(\n        200,\n        200,\n        (int) frame.getPreferredSize().getWidth() + 40,\n        (int) frame.getPreferredSize().getHeight() + 250);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3313, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 167, "focalAPIEnd": 190, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new JDialog(jFrame,String)", "jFrame.getContentPane()", "JFrame.setPreferredSize(property)"], "useStart": [245, 412, 398], "useEnd": [270, 435, 465], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Zearin/BibTeXML/tree/master/bibtexconverter-j/src/de/mospace/swing/MiniShell.java", "rawCode": "  /** Shows this MiniShell floating. */\n  private void showDialog() {\n    floating = true;\n    if (dialg == null || !dialg.isVisible()) {\n      Dimension parentsize = parent.getContentPane().getSize();\n      if (dialg == null) {\n        dialg = new JDialog(parent, name);\n      }\n      dockButton.setVisible(true);\n      floatButton.setVisible(false);\n      dialg.getContentPane().add(this);\n      ((JComponent) parent.getContentPane()).setPreferredSize(parentsize);\n      dialg.pack();\n      dialg.setVisible(true);\n      piop.requestFocus();\n    }\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3314, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [294], "initializationEnd": [322], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [329, 360], "configurationEnd": [354, 413], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 734, "focalAPIEnd": 757, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.getContentPane()", "property.add(String,*)", "jFrame.doLayout()", "jFrame.setVisible(boolean)"], "useStart": [734, 793, 793, 855, 879], "useEnd": [787, 816, 849, 872, 902], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jesseeichar/debrief/tree/master/trunk/org.mwc.asset.legacy/src/ASSET/GUI/Workbench/LoadedWorkbench.java", "rawCode": "  public static void main(String[] args) {\n    // try{\n    // UIManager.setLookAndFeel(new com.incors.plaf.kunststoff.KunststoffLookAndFeel());\n    // }catch(UnsupportedLookAndFeelException e)\n    // {\n    // e.printStackTrace();\n    // }\n\n    // create the interface\n    final JFrame parent = new JFrame(\"Loaded session\");\n\n    parent.setSize(1100, 600);\n    parent.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // open the splash screen\n    CoreGUISwing.showSplash(parent, \"images/WorkBenchLogo.gif\");\n\n    // create the tool-parent\n    final CoreGUISwing.ASSETParent pr = new CoreGUISwing.ASSETParent(parent);\n\n    // create the workbench\n    final WorkBenchGUI viewer = new WorkBenchGUI(pr);\n\n    // collate the parent\n    parent.getContentPane().setLayout(new BorderLayout());\n    parent.getContentPane().add(\"Center\", viewer.getPanel());\n    parent.doLayout();\n\n    parent.setVisible(true);\n\n    // finally load the data\n\n    // put the datafile into a vector\n    Vector<File> theScenarios = new Vector<File>();\n    theScenarios.add(new File(MY_SCENARIO));\n\n    Vector<File> theControls = new Vector<File>();\n    theControls.add(new File(MY_OBSERVERS));\n\n    // load the data\n    try {\n      viewer.scenarioDropped(theScenarios);\n      viewer.observerDropped(theControls);\n\n    } catch (FileNotFoundException e) {\n      e\n          .printStackTrace(); // To change body of catch statement use File | Settings | File\n                              // Templates.\n    }\n\n    // trigger a fit-to-win\n    viewer.FitToWin();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3315, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [142], "initializationEnd": [154], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 160, "focalAPIEnd": 182, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [160, 211, 281, 299], "useEnd": [205, 275, 293, 321], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ivanstojkovic/doodle/tree/master/feeder/src/main/java/at/tuwien/sbc/feeder/gui/panels/SearchPanel.java", "rawCode": "  /** Auto-generated main method to display this JPanel inside a new JFrame. */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(new SearchPanel());\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3316, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [193], "initializationEnd": [217], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 223, "focalAPIEnd": 245, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [223, 273, 291], "useEnd": [267, 285, 313], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DeKaN/mediateka/tree/master/jcalendar/src/com/toedter/components/JSpinField.java", "rawCode": "  /**\n   * Creates a JFrame with a JSpinField inside and can be used for testing.\n   *\n   * @param s The command line arguments\n   */\n  public static void main(String[] s) {\n    JFrame frame = new JFrame(\"JSpinField\");\n    frame.getContentPane().add(new JSpinField());\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3317, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [1059], "initializationEnd": [1077], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [1083, 1112], "configurationEnd": [1106, 1164], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 1170, "focalAPIEnd": 1192, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.getContentPane()", "property.add(JLabel,GridBagConstraints)", "jFrame.setLocationRelativeTo(Window)", "jFrame.setVisible(boolean)"], "useStart": [1170, 1228, 1228, 1304, 1343], "useEnd": [1222, 1250, 1298, 1337, 1365], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/johdah/Weka/tree/master/src/main/java/weka/core/json/JSONNode.java", "rawCode": "  /**\n   * Only for testing. Generates a simple JSON object and displays it.\n   *\n   * @param args ignored\n   * @throws Exception if something goes wrong\n   */\n  public static void main(String[] args) throws Exception {\n    // generates the example listed here:\n    // http://en.wikipedia.org/wiki/JSON\n    JSONNode person = new JSONNode();\n    person.addPrimitive(\"firstName\", \"John\");\n    person.addPrimitive(\"lastName\", \"Smith\");\n    JSONNode address = person.addObject(\"address\");\n    address.addPrimitive(\"streetAddress\", \"21 2nd Street\");\n    address.addPrimitive(\"city\", \"New York\");\n    address.addPrimitive(\"state\", \"NY\");\n    address.addPrimitive(\"postalCode\", 10021);\n    JSONNode phonenumbers = person.addArray(\"phoneNumbers\");\n    phonenumbers.addArrayElement(\"212 555-1234\");\n    phonenumbers.addArrayElement(\"646 555-4567\");\n\n    // output in console\n    StringBuffer buffer = new StringBuffer();\n    person.toString(buffer);\n    System.out.println(buffer.toString());\n\n    // display GUI\n    JTree tree = new JTree(person);\n    JFrame frame = new JFrame(\"JSON\");\n    frame.setSize(800, 600);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().setLayout(new BorderLayout());\n    frame.getContentPane().add(new JScrollPane(tree), BorderLayout.CENTER);\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3318, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [122], "initializationEnd": [192], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [199], "configurationEnd": [251], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 257, "focalAPIEnd": 279, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setPreferredSize(Dimension)", "jFrame.pack()", "jFrame.setLocationRelativeTo(Window)", "jFrame.setVisible(boolean)"], "useStart": [257, 305, 358, 376, 415], "useEnd": [299, 352, 370, 409, 437], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alessandro-aglietti/itis-leonardo-da-vinci/tree/master/swingset3/src/com/sun/swingset3/demos/tree/TreeDemo.java", "rawCode": "  /** main method allows us to run as a standalone demo. */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(TreeDemo.class.getAnnotation(DemoProperties.class).value());\n\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(new TreeDemo());\n    frame.setPreferredSize(new Dimension(800, 600));\n    frame.pack();\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3319, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [149], "initializationEnd": [171], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(Window)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [177, 206, 245], "configurationEnd": [200, 239, 297], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 304, "focalAPIEnd": 326, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setVisible(boolean)"], "useStart": [304, 351], "useEnd": [345, 373], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgothel/jogl-demos/tree/master/src/redbook/src/glredbook10/bezcurve.java", "rawCode": "  public static void main(String[] args) {\n\n    bezcurve demo = new bezcurve();\n\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"bezcurve\");\n    frame.setSize(500, 500);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    frame.getContentPane().add(demo.drawable);\n    frame.setVisible(true);\n    demo.drawable.requestFocusInWindow();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3320, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [65], "initializationEnd": [95], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 156, "focalAPIEnd": 178, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(ClickController,*)", "jFrame.addWindowListener(WindowListener)", "jFrame.pack()", "jFrame.show()"], "useStart": [156, 215, 298, 316], "useEnd": [209, 268, 310, 328], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/patsgit/Click-OLSR/tree/master/apps/ClickController/ClickController.java", "rawCode": "  public static ClickController newWindow() {\n    JFrame frame = new JFrame(\"Click Controller\");\n    ClickController cntr = new ClickController(frame);\n    frame.getContentPane().add(cntr, BorderLayout.CENTER);\n    frame.addWindowListener(new CloseWindowAdapter(cntr));\n    cntr.enableClose();\n    frame.pack();\n    frame.show();\n    return cntr;\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3321, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [199], "initializationEnd": [211], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 256, "focalAPIEnd": 278, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getErrorInternalFrame(property)"], "useStart": [231], "useEnd": [279], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmyroadctfig/swingx/tree/master/swingx-core/src/test/java/org/jdesktop/swingx/plaf/basic/BasicErrorPaneUITest.java", "rawCode": "  @Test\n  public void testGetErrorInternalFrameContentPane() {\n    if (GraphicsEnvironment.isHeadless()) {\n      LOG.fine(\"cannot run - headless environment\");\n      return;\n    }\n    JFrame frame = new JFrame();\n    assertNotNull(ui.getErrorInternalFrame(frame.getContentPane()));\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3322, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [76], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [110], "configurationEnd": [174], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 555, "focalAPIEnd": 577, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(PrefPanel)", "jFrame.pack()", "jFrame.setLocation(int,int)", "jFrame.setVisible(boolean)"], "useStart": [555, 591, 609, 674], "useEnd": [585, 603, 636, 696], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Unidata/thredds/tree/master/ui/src/test/java/ucar/util/prefs/ui/TestPanel2.java", "rawCode": "  /** test */\n  public static void main(String args[]) {\n    JFrame frame = new JFrame(\"Test PrefPanel\");\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n\n    TestPanel2 tp = new TestPanel2();\n    // PrefPanel pp = tp.makeTestPanelOld(null);\n    // PrefPanel pp = tp.makeTestPanel(null);\n    // PrefPanel pp = tp.makeTestPanelFirstHeading(null);\n    // PrefPanel pp = tp.make3columns();\n    PrefPanel pp = tp.make3columnsOneLong();\n\n    // PrefPanel pp = tp.makeComboBox();\n    // PrefPanel pp = tp.makeDialog().getPrefPanel();\n\n    frame.getContentPane().add(pp);\n    frame.pack();\n    frame.setLocation(300, 300);\n    // frame.setSize(300, 300);\n    frame.setVisible(true);\n\n    PrefPanel.Dialog d = tp.makeDialog();\n    d.finish();\n    d.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3323, "initialization": ["JFrame jFrame = createFrame()"], "initializationStart": [212], "initializationEnd": [225], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setTitle(String)"], "configurationStart": [231], "configurationEnd": [252], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 258, "focalAPIEnd": 280, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel,*)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [258, 322, 340], "useEnd": [316, 334, 362], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ctn-waterloo/nengo_1.4/tree/master/simulator/src/java/main/ca/nengo/plot/Plotter.java", "rawCode": "  /**\n   * Display a new plot.\n   *\n   * @param plotPanel A panel containng the plot image\n   * @param title The plot title\n   */\n  public void showPlot(JPanel plotPanel, String title) {\n    final JFrame frame = createFrame();\n    frame.setTitle(title);\n    frame.getContentPane().add(plotPanel, BorderLayout.CENTER);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3324, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [89], "initializationEnd": [101], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [107, 148], "configurationEnd": [142, 200], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 809, "focalAPIEnd": 831, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new GroupLayout(property)", "jFrame.getContentPane()", "property.setLayout(GroupLayout)"], "useStart": [793, 2853, 2853], "useEnd": [832, 2875, 2898], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/formatic-practicas/pruebasJava/tree/master/src/antonio/ConversorWindow.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initialize() {\n    frame = new JFrame();\n    frame.setBounds(100, 100, 450, 300);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    grados = new JTextField();\n    grados.setColumns(10);\n\n    JButton btnACelsius = new JButton(\"A Celsius\");\n    btnACelsius.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent arg0) {\n            String cad = grados.getText();\n            double res = Double.parseDouble(cad);\n            double far = conversor.cToF(res);\n            JLabel l = getResultado();\n            l.setText(\"\" + far);\n          }\n        });\n\n    JButton btnAFarenheit = new JButton(\"A Farenheit\");\n\n    resultado = new JLabel(\"\");\n    GroupLayout groupLayout = new GroupLayout(frame.getContentPane());\n    groupLayout.setHorizontalGroup(\n        groupLayout\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                groupLayout\n                    .createSequentialGroup()\n                    .addGap(33)\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.LEADING)\n                            .addComponent(btnAFarenheit)\n                            .addGroup(\n                                groupLayout\n                                    .createSequentialGroup()\n                                    .addComponent(btnACelsius)\n                                    .addGap(115)\n                                    .addComponent(resultado))\n                            .addComponent(\n                                grados,\n                                GroupLayout.PREFERRED_SIZE,\n                                GroupLayout.DEFAULT_SIZE,\n                                GroupLayout.PREFERRED_SIZE))\n                    .addContainerGap(132, Short.MAX_VALUE)));\n    groupLayout.setVerticalGroup(\n        groupLayout\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                groupLayout\n                    .createSequentialGroup()\n                    .addGap(39)\n                    .addComponent(\n                        grados,\n                        GroupLayout.PREFERRED_SIZE,\n                        GroupLayout.DEFAULT_SIZE,\n                        GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(ComponentPlacement.UNRELATED)\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.BASELINE)\n                            .addComponent(btnACelsius)\n                            .addComponent(resultado))\n                    .addPreferredGap(ComponentPlacement.UNRELATED)\n                    .addComponent(btnAFarenheit)\n                    .addContainerGap(132, Short.MAX_VALUE)));\n    frame.getContentPane().setLayout(groupLayout);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3325, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [91], "initializationEnd": [125], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 211, "focalAPIEnd": 233, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(SwingLoggerPanel)", "jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [211, 256, 285, 355], "useEnd": [250, 279, 349, 377], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prsebastian/gwt-issue-8215/tree/master/dev/core/test/com/google/gwt/dev/SwingTreeLoggerTestApp.java", "rawCode": "  /** @param args ignored */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"SwingTreeLogger test\");\n    SwingLoggerPanel loggerPanel = new SwingLoggerPanel(TreeLogger.INFO, null);\n    frame.getContentPane().add(loggerPanel);\n    frame.setSize(950, 700);\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.setVisible(true);\n    TreeLogger logger = loggerPanel.getLogger();\n    logger.log(TreeLogger.INFO, \"info 1\");\n    TreeLogger branch = logger.branch(TreeLogger.INFO, \"info branch\");\n    branch.log(TreeLogger.DEBUG, \"debug 1\");\n    branch.log(TreeLogger.ERROR, \"error 1\");\n    TreeLogger dbgBranch = logger.branch(TreeLogger.DEBUG, \"debug branch\");\n    dbgBranch.log(TreeLogger.SPAM, \"spam 1\");\n    dbgBranch.log(TreeLogger.WARN, \"warn 1\");\n    logger.log(TreeLogger.INFO, \"info 2\");\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3326, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 274, "focalAPIEnd": 296, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.repaint()"], "useStart": [274], "useEnd": [306], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/neel-shah/JLatexMath/tree/master/src/org/scilab/forge/jlatexmath/editor/myView.java", "rawCode": "  public void update(Observable o, Object arg) {\n    ArrayList<Atom> a = (ArrayList) arg;\n    root = a.get(0);\n    selAtom = a.get(1);\n    box = root.createBox(te);\n    box.updateRectangle(size, (3 / size), (3 / size));\n    currentBox = selAtom.getBox().getRectangle();\n    frame.getContentPane().repaint();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3327, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [472], "initializationEnd": [484], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.addWindowListener(WindowListener)", "jFrame.setSize(int,int)", "jFrame.setTitle(String)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setLocationRelativeTo(Window)"], "configurationStart": [520, 556, 587, 781, 840], "configurationEnd": [550, 581, 775, 834, 874], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 935, "focalAPIEnd": 958, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(RehaKassenbuchTab)", "jFrame.setVisible(boolean)"], "useStart": [935, 999], "useEnd": [969, 1022], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi-2/tree/master/RehaKassenbuch/src/rehaKassenbuch/RehaKassenbuch.java", "rawCode": "  /** ***************** */\n  public JFrame getJFrame() {\n    try {\n      UIManager.setLookAndFeel(\"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\");\n    } catch (ClassNotFoundException e) {\n      e.printStackTrace();\n    } catch (InstantiationException e) {\n      e.printStackTrace();\n    } catch (IllegalAccessException e) {\n      e.printStackTrace();\n    } catch (UnsupportedLookAndFeelException e) {\n      e.printStackTrace();\n    }\n    thisClass = this;\n    jFrame = new JFrame();\n    sqlInfo.setFrame(jFrame);\n    jFrame.addWindowListener(this);\n    jFrame.setSize(1000, 500);\n    jFrame.setTitle(\n        \"Thera-Pi Kassenbuch erstellen / bearbeiten [IK: \"\n            + aktIK\n            + \"] \"\n            + \"[Server-IP: \"\n            + dbIpAndName\n            + \"]\");\n    jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    jFrame.setLocationRelativeTo(null);\n    RehaKassenbuchTab kbtab = new RehaKassenbuchTab();\n    jFrame.getContentPane().add(kbtab);\n    kbtab.setHeader(0);\n    jFrame.setVisible(true);\n    thisFrame = jFrame;\n    return jFrame;\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3328, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [62], "initializationEnd": [94], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setPreferredSize(Dimension)"], "configurationStart": [100, 313], "configurationEnd": [152, 361], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 367, "focalAPIEnd": 389, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(VisualizationPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [367, 410, 428], "useEnd": [404, 422, 450], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zyzzyplyx/secret-octo-cyril/tree/master/src/apps/server/visualization/VisualizationPanel.java", "rawCode": "  public static void main(String args[]) {\n    JFrame frame = new JFrame(\"Visualization Test\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    Game theGame = GameRepository.getDefaultRepository().getGame(\"biddingTicTacToe\");\n    VisualizationPanel theVisual = new VisualizationPanel(theGame);\n    frame.setPreferredSize(new Dimension(1200, 900));\n    frame.getContentPane().add(theVisual);\n    frame.pack();\n    frame.setVisible(true);\n\n    StateMachine theMachine = new ProverStateMachine();\n    theMachine.initialize(theGame.getRules());\n    try {\n      MachineState theCurrentState = theMachine.getInitialState();\n      do {\n        theVisual.observe(new ServerNewGameStateEvent(theCurrentState));\n        theCurrentState = theMachine.getRandomNextState(theCurrentState);\n        Thread.sleep(2750);\n        System.out.println(\"State: \" + theCurrentState);\n      } while (!theMachine.isTerminal(theCurrentState));\n      theVisual.observe(new ServerNewGameStateEvent(theCurrentState));\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3329, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [210], "initializationEnd": [239], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [358], "configurationEnd": [431], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 592, "focalAPIEnd": 614, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JSplitPane)"], "useStart": [592], "useEnd": [629], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/corintio/opentestbed/tree/master/src/main/java/ww10/gui/SwingGUI.java", "rawCode": "  void initialize() {\n\n    statusbar = new javax.swing.JProgressBar();\n    actionPanel = new ActionPanel(dataModel);\n    averageProfitPanel = new AverageProfitPanel(dataModel);\n\n    // set up frame\n    frame = new JFrame(\"Wetenschapsweek\");\n    JSplitPane splitPane = new javax.swing.JSplitPane();\n\n    JTabbedPane tabs = new javax.swing.JTabbedPane();\n\n    frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n    splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);\n\n    splitPane.setBottomComponent(tabs);\n    splitPane.setLeftComponent(statusbar);\n\n    frame.getContentPane().add(splitPane);\n\n    // this.progressFrame.setExtendedState(Frame.MAXIMIZED_BOTH);\n    // Toolkit tk = Toolkit.getDefaultToolkit();\n    // int xSize = ((int) tk.getScreenSize().getWidth());\n    // int ySize = ((int) tk.getScreenSize().getHeight());\n    // this.progressFrame.setSize(xSize, ySize);\n    // this.progressFrame.setSize(1200, 800);\n    this.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    statusbar.setStringPainted(true);\n    // setting this causes gnome bars to be on top\n    // this.progressFrame.setResizable(false);\n    this.frame.setLocation(0, 0);\n    // Toolkit tk = Toolkit.getDefaultToolkit();\n    // int xSize = ((int) tk.getScreenSize().getWidth());\n    // int ySize = ((int) tk.getScreenSize().getHeight());\n    // this.progressFrame.setSize(xSize, ySize);\n    if (!this.frame.isDisplayable()) {\n      // Can only do this when the frame is not visible\n      this.frame.setUndecorated(true);\n    }\n    GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();\n    if (gd.isFullScreenSupported()) {\n      gd.setFullScreenWindow(this.frame);\n    } else {\n      // Can't run fullscreen, need to bodge around it (setSize to screen size, etc)\n    }\n    // this.frame.addKeyListener(new KeyListener() {\n    //\n    // public void keyPressed(KeyEvent e) {\n    // }\n    //\n    // public void keyReleased(KeyEvent e) {\n    // }\n    //\n    // public void keyTyped(KeyEvent e) {\n    // if (e.getKeyChar() == 'f') {\n    // // progressFrame.setResizable(false);\n    // // // progressFrame.setUndecorated(true);\n    // // GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n    // // GraphicsDevice graphicsDevice = ge.getDefaultScreenDevice();\n    // // graphicsDevice.setFullScreenWindow(progressFrame);\n    // // //myDevice.setFullScreenWindow(null);\n    // } else if (e.getKeyChar() == 'x') {\n    // System.exit(0);\n    // }\n    // }\n    //\n    // });\n    tabs.addTab(\"Average Profit\", averageProfitPanel);\n    tabs.addTab(\"Actions\", actionPanel);\n\n    this.frame.pack(); // not needed?\n    this.frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3330, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [492], "initializationEnd": [535], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [541], "configurationEnd": [593], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 599, "focalAPIEnd": 621, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JToolBar,*)", "jFrame.getContentPane()", "property.add(ScatterPlot,*)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [599, 660, 660, 717, 735], "useEnd": [654, 682, 711, 729, 757], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ninesunqian/excitedmind/tree/master/prefuse-demos/src/main/java/prefuse/demos/ScatterPlot.java", "rawCode": "  public static void main(String[] argv) {\n    String data = \"/fisher.iris.txt\";\n    String xfield = \"SepalLength\";\n    String yfield = \"PetalLength\";\n    String sfield = \"Species\";\n    if (argv.length >= 3) {\n      data = argv[0];\n      xfield = argv[1];\n      yfield = argv[2];\n      sfield = (argv.length > 3 ? argv[3] : null);\n    }\n\n    final ScatterPlot sp = demo(data, xfield, yfield, sfield);\n    JToolBar toolbar = getEncodingToolbar(sp, xfield, yfield, sfield);\n\n    JFrame frame = new JFrame(\"p r e f u s e | s c a t t e r\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(toolbar, BorderLayout.NORTH);\n    frame.getContentPane().add(sp, BorderLayout.CENTER);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3331, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [246], "initializationEnd": [258], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 44, "tryExpressionEnd": 48, "tryBlockStart": 44, "tryBlockEnd": 526, "catchExpressionStart": 403, "catchExpressionEnd": 435, "catchBlockStart": 403, "catchBlockEnd": 469, "exceptionHandlingCallStart": [443], "exceptionHandlingCallEnd": [462], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 266, "focalAPIEnd": 285, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [266, 301, 318, 345], "useEnd": [293, 310, 337, 394], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/markus1978/clickwatch/tree/master/external/edu.uci.ics.jung/src/samples/graph/southern/TestSouthernWomenBipartite.java", "rawCode": "  public static void main(String[] s) {\n    try {\n      FileReader fr = new FileReader(\"samples/datasets/southern_women_data.txt\");\n\n      System.out.println(\"loading : \");\n\n      JPanel jp = new TestSouthernWomenBipartite(fr);\n      JFrame jf = new JFrame();\n      jf.getContentPane().add(jp);\n      jf.pack();\n      jf.setVisible(true);\n      jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3332, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [445], "initializationEnd": [457], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [465], "configurationEnd": [526], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 534, "focalAPIEnd": 562, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JComponent,*)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [534, 603, 629], "useEnd": [595, 621, 657], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PerEr/ExtensionTest/tree/master/apps/widgetloader/src/main/java/com/example/prototype/widgetloader/view/TestFrame.java", "rawCode": "  private void onWidgetSelected(String text) {\n    String widgetName = text;\n    String parameters = \"\";\n\n    int ix = text.indexOf(\",\");\n    if (ix > 0) {\n      widgetName = text.substring(0, ix);\n      parameters = text.substring(ix + 1);\n    }\n\n    JComponent widget =\n        widgetRegistry.instantiate(widgetName, PropertyBuilder.fromString(parameters));\n    if (widget != null) {\n      widget.setVisible(true);\n\n      JFrame widgetFrame = new JFrame();\n      widgetFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n      widgetFrame.getContentPane().add(widget, BorderLayout.CENTER);\n      widgetFrame.pack();\n      widgetFrame.setVisible(true);\n    } else {\n      logError(\"Failed to instantiate widget \" + widgetName);\n    }\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3333, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [79], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)"], "configurationStart": [130], "configurationEnd": [161], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 167, "focalAPIEnd": 187, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [167, 221, 247], "useEnd": [215, 241, 297], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ggaavv/Equinox-Clock/tree/master/contiki-2.5/examples/z1/rssi_scanner/ViewRSSI.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    JFrame win = new JFrame(\"RSSI Viewer\");\n    ViewRSSI panel;\n    win.setBounds(10, 10, 590, 590);\n    win.getContentPane().add(panel = new ViewRSSI());\n    win.setVisible(true);\n    win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    panel.handleInput();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3334, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [150], "initializationEnd": [170], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(Window)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [176, 205, 244], "configurationEnd": [199, 238, 296], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 303, "focalAPIEnd": 325, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setVisible(boolean)"], "useStart": [303, 350], "useEnd": [344, 372], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgothel/jogl-demos/tree/master/src/redbook/src/glredbook10/smooth.java", "rawCode": "  public static void main(String[] args) {\n    smooth demo = new smooth();\n    //\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"smooth\");\n    frame.setSize(500, 500);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    frame.getContentPane().add(demo.drawable);\n    frame.setVisible(true);\n    demo.drawable.requestFocusInWindow();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3335, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [150], "initializationEnd": [170], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(Window)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [176, 205, 244], "configurationEnd": [199, 238, 296], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 303, "focalAPIEnd": 325, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setVisible(boolean)"], "useStart": [303, 350], "useEnd": [344, 372], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgothel/jogl-demos/tree/master/src/redbook/src/glredbook10/accnot.java", "rawCode": "  public static void main(String[] args) {\n    accnot demo = new accnot();\n    //\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"accnot\");\n    frame.setSize(250, 250);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    frame.getContentPane().add(demo.drawable);\n    frame.setVisible(true);\n    demo.drawable.requestFocusInWindow();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3336, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 40, "focalAPIEnd": 67, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setCursor(Cursor)"], "useStart": [40], "useEnd": [104], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ggervais/GameEngine/tree/master/src/com/ggervais/gameengine/game/Game.java", "rawCode": "  private void setDefaultCursor() {\n    this.frame.getContentPane().setCursor(Cursor.getDefaultCursor());\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3337, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [520], "initializationEnd": [532], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [538], "configurationEnd": [590], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 690, "focalAPIEnd": 712, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(VrpPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [690, 729, 747], "useEnd": [723, 741, 769], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sryza/dco/tree/master/thesis/src/main/java/pls/vrp/TestGreedyInitializer.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    File f = new File(\"../vrptests/r1.txt\");\n    VrpProblem problem = VrpReader.readSolomon(f, 100);\n    // seems like more for the first two and less for the last works\n    VrpGreedyInitializer init = new VrpGreedyInitializer(1.0, 1.0, 0);\n    VrpSolution sol = init.nearestNeighborHeuristic(problem);\n    System.out.println(sol.getNumVehicles());\n    System.out.println(sol.getToursCost());\n    System.out.println(sol.verify(problem));\n\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    VrpPanel panel = new VrpPanel();\n    panel.setScale(problem);\n    panel.setSolution(sol);\n    frame.getContentPane().add(panel);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3338, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [79], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)"], "configurationStart": [130], "configurationEnd": [161], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 167, "focalAPIEnd": 187, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [167, 221, 247], "useEnd": [215, 241, 297], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maniacbug/contiki-avr-zigduino/tree/master/examples/sky/ViewRSSI.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    JFrame win = new JFrame(\"RSSI Viewer\");\n    ViewRSSI panel;\n    win.setBounds(10, 10, 300, 300);\n    win.getContentPane().add(panel = new ViewRSSI());\n    win.setVisible(true);\n    win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    panel.handleInput();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3339, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [79], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)"], "configurationStart": [130], "configurationEnd": [161], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 167, "focalAPIEnd": 187, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [167, 221, 247], "useEnd": [215, 241, 297], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/retornaz/contiki-cc253x/tree/master/examples/sky/ViewRSSI.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    JFrame win = new JFrame(\"RSSI Viewer\");\n    ViewRSSI panel;\n    win.setBounds(10, 10, 300, 300);\n    win.getContentPane().add(panel = new ViewRSSI());\n    win.setVisible(true);\n    win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    panel.handleInput();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3340, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [365], "initializationEnd": [391], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setJMenuBar(JMenuBar)"], "configurationStart": [437], "configurationEnd": [459], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 1054, "focalAPIEnd": 1072, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(String,Box)", "jFrame.pack()", "jFrame.show()"], "useStart": [1054, 1098, 1112], "useEnd": [1091, 1106, 1120], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/java/awt/Mixing/LWPopupMenu.java", "rawCode": "  private static void init() {\n    // *** Create instructions for the user here ***\n\n    String[] instructions = {\n      \"This is an AUTOMATIC test, simply wait until it is done.\",\n      \"The result (passed or failed) will be shown in the\",\n      \"message window below.\"\n    };\n    Sysout.createDialog();\n    Sysout.printInstructions(instructions);\n\n    JFrame f = new JFrame(\"LW menu test\");\n\n    JMenuBar menubar = new JMenuBar();\n    f.setJMenuBar(menubar);\n\n    // Create lightweight-enabled menu\n    JMenu lmenu = new JMenu(\"Lite Menu\");\n    lmenu.add(\"Salad\");\n    lmenu.add(\n        new AbstractAction(\"Fruit Plate\") {\n          public void actionPerformed(ActionEvent e) {\n            failed = false;\n          }\n        });\n    lmenu.add(\"Water\");\n    menubar.add(lmenu);\n\n    // Create Heavyweight AWT Button\n    Button heavy = new Button(\" Heavyweight Button \");\n\n    // Add heavy button to box\n    Box box = Box.createVerticalBox();\n    box.add(Box.createVerticalStrut(20));\n    box.add(heavy);\n    box.add(Box.createVerticalStrut(20));\n\n    f.getContentPane().add(\"Center\", box);\n\n    f.pack();\n    f.show();\n\n    Robot robot = Util.createRobot();\n    robot.setAutoDelay(20);\n\n    Util.waitForIdle(robot);\n\n    // Activate the menu\n    Point lLoc = lmenu.getLocationOnScreen();\n    robot.mouseMove(lLoc.x + 5, lLoc.y + 5);\n\n    robot.mousePress(InputEvent.BUTTON1_MASK);\n    robot.mouseRelease(InputEvent.BUTTON1_MASK);\n    Util.waitForIdle(robot);\n\n    // Click on the \"Fruit Plate\" menu item.\n    // It's assumed that the menu item is located\n    // above the heavyweight button.\n    Point bLoc = heavy.getLocationOnScreen();\n    robot.mouseMove(bLoc.x + 10, bLoc.y + 5);\n\n    robot.mousePress(InputEvent.BUTTON1_MASK);\n    robot.mouseRelease(InputEvent.BUTTON1_MASK);\n    Util.waitForIdle(robot);\n\n    if (failed) {\n      LWPopupMenu.fail(\"The LW menu item did not received the click.\");\n    } else {\n      LWPopupMenu.pass();\n    }\n  } // End init()\n"}, {"dataset": "getContentPane", "exampleID": 3341, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 80, "focalAPIEnd": 102, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "new BoxLayout(property,*)", "property.setLayout(GridLayout)", "jFrame.getContentPane()", "property.add(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [127, 113, 80, 606, 606, 691, 709], "useEnd": [149, 168, 169, 628, 652, 703, 731], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/moumar/beads/tree/master/src/beads_player/net/beadsproject/beads/gui/Slider2D.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(), BoxLayout.X_AXIS));\n    AudioContext ac = new AudioContext();\n\n    for (int i = 0; i < 2; i++) {\n      WavePlayer wp = new WavePlayer(ac, 500f, new SineBuffer().getDefault());\n      Gain g = new Gain(ac, 2);\n      g.addInput(wp);\n      Slider s1 = new Slider(ac, \"gain\", 0, 1, 0.5f);\n      g.setGainEnvelope(s1);\n      Slider s2 = new Slider(ac, \"freq\", 110, 5000, 440);\n      wp.setFrequencyEnvelope(s2);\n      Slider2D s2d = new Slider2D(s2, s1);\n      frame.getContentPane().add(s2d.getComponent());\n      ac.out.addInput(g);\n    }\n\n    frame.pack();\n    frame.setVisible(true);\n    ac.start();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3342, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [276], "initializationEnd": [288], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)"], "configurationStart": [348], "configurationEnd": [371], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 377, "focalAPIEnd": 399, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(GridMathDialog)", "jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [377, 417, 445], "useEnd": [411, 439, 518], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gvtools/gvtools-legacy/tree/master/extensions/extRemoteSensing/src-test-ui/es/idr/teledeteccion/gridmath/gui/CalculatorDialogTest.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n\n    try {\n      UIManager.setLookAndFeel(\"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\");\n    } catch (Exception e) {\n      System.err.println(\"No se puede cambiar al LookAndFeel\");\n    }\n\n    JFrame frame = new JFrame();\n    GridMathDialog dialog = new GridMathDialog(null);\n    frame.setSize(650, 400);\n    frame.getContentPane().add(dialog);\n    frame.setVisible(true);\n    frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3343, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [108], "initializationEnd": [120], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [126, 168], "configurationEnd": [162, 220], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 226, "focalAPIEnd": 248, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.getContentPane()", "property.add(JLabel)", "jFrame.getContentPane()", "property.add(JSpinner)", "jFrame.getContentPane()", "property.add(JLabel)", "jFrame.getContentPane()", "property.add(DrawingArea)", "jFrame.getContentPane()", "property.add(JSpinner)", "jFrame.getContentPane()", "property.add(JLabel)", "jFrame.getContentPane()", "property.add(JButton)", "jFrame.getContentPane()", "property.add(JLabel)", "jFrame.getContentPane()", "property.add(JCheckBox)", "jFrame.getContentPane()", "property.add(JCheckBox)", "jFrame.getContentPane()", "property.add(JCheckBox)", "jFrame.getContentPane()", "property.add(JLabel)", "jFrame.getContentPane()", "property.add(JLabel)", "jFrame.getContentPane()", "property.add(JLabel)"], "useStart": [226, 474, 474, 1005, 1005, 1121, 1121, 1366, 1366, 1650, 1650, 2265, 2265, 3228, 3228, 3384, 3384, 3848, 3848, 4345, 4345, 4810, 4810, 4950, 4950, 5076, 5076, 5200, 5200], "useEnd": [264, 496, 508, 1027, 1041, 1143, 1153, 1388, 1399, 1672, 1695, 2287, 2303, 3250, 3267, 3406, 3425, 3870, 3894, 4367, 4395, 4832, 4858, 4972, 4988, 5098, 5112, 5222, 5236], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/serprime/Machine-Learning-WS-2012/tree/master/exercise3/knn-java-gui/src/at/ac/tuwien/knn/gui/MainWindow.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initialize() {\n    // MAIN\n    //\n    frame = new JFrame();\n    frame.setBounds(100, 100, 1068, 810);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().setLayout(null);\n\n    JLabel jlDesc =\n        new JLabel(\n            \"Test data points are highlighted by a grey circle. The colors show different classes: (actual : predicted)\");\n    jlDesc.setBounds(35, 740, 800, 20);\n    frame.getContentPane().add(jlDesc);\n\n    // SPINNER K\n    //\n    final JSpinner spinnerK = new JSpinner(new SpinnerNumberModel(defaultK, 1, 100, 1));\n    spinnerK.setBounds(827, 117, 45, 20);\n    spinnerK.addChangeListener(\n        new ChangeListener() {\n          @Override\n          public void stateChanged(ChangeEvent e) {\n            try {\n              panel.updateK((Integer) spinnerK.getModel().getValue());\n            } catch (Exception e1) {\n              e1.printStackTrace();\n            }\n          }\n        });\n    frame.getContentPane().add(spinnerK);\n    JLabel lblK = new JLabel(\"k:\");\n    lblK.setBounds(810, 120, 16, 14);\n    frame.getContentPane().add(lblK);\n\n    // DRAWING PANEL\n    //\n    panel = new DrawingArea(this);\n    panel.setBackground(Color.WHITE);\n    panel.setBorder(new LineBorder(SystemColor.controlDkShadow));\n    panel.setBounds(33, 33, 737, 699);\n    frame.getContentPane().add(panel);\n\n    // SPINNER: PERCENTAGE SPLIT (train/test)\n    //\n    final JSpinner spinnerPercentage = new JSpinner();\n    spinnerPercentage.setBounds(917, 195, 45, 20);\n    spinnerPercentage.setModel(new SpinnerNumberModel(defaultPercentage, 5, 95, 5));\n    frame.getContentPane().add(spinnerPercentage);\n    spinnerPercentage.addChangeListener(\n        new ChangeListener() {\n          @Override\n          public void stateChanged(ChangeEvent e) {\n            try {\n              panel.updatePercentage(\n                  (Integer) spinnerPercentage.getModel().getValue(),\n                  (Integer) spinnerK.getModel().getValue());\n            } catch (Exception e1) {\n              e1.printStackTrace();\n            }\n          }\n        });\n\n    // FILE HANDLING\n    //\n    lbFilename = new JLabel(\"No dataset chosen\");\n    lbFilename.setBounds(810, 73, 232, 20);\n    frame.getContentPane().add(lbFilename);\n    JButton btnOpenFile = new JButton(\"Open file...\");\n    btnOpenFile.addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setCurrentDirectory(new File(\"./data\"));\n            int returnVal = fileChooser.showOpenDialog(frame);\n            if (returnVal == JFileChooser.APPROVE_OPTION) {\n              try {\n                updateDataFile(\n                    fileChooser.getSelectedFile(), (Integer) spinnerK.getModel().getValue());\n                lbFilename.setText(\"Dataset: \" + fileChooser.getSelectedFile().getName());\n              } catch (Exception e) {\n                lbFilename.setText(\"Error loading data from file.\");\n                e.printStackTrace();\n              }\n            }\n          }\n        });\n    btnOpenFile.setBounds(807, 33, 118, 23);\n    frame.getContentPane().add(btnOpenFile);\n\n    JLabel lblOfTestdata = new JLabel(\"% of Training-Data:\");\n    lblOfTestdata.setBounds(810, 198, 109, 14);\n    frame.getContentPane().add(lblOfTestdata);\n\n    // CHECKBOX: TEST DATA\n    //\n    JCheckBox chckbxShowTestData = new JCheckBox(\"Show Test Data\");\n    chckbxShowTestData.addItemListener(\n        new ItemListener() {\n          public void itemStateChanged(ItemEvent e) {\n            panel.updateShowTestData(e.getStateChange() == e.SELECTED);\n          }\n        });\n    chckbxShowTestData.setSelected(true);\n    chckbxShowTestData.setBounds(810, 261, 152, 23);\n    frame.getContentPane().add(chckbxShowTestData);\n\n    // CHECKBOX: TRAINING DATA\n    //\n    JCheckBox chckbxShowTrainingData = new JCheckBox(\"Show Training Data\");\n    chckbxShowTrainingData.addItemListener(\n        new ItemListener() {\n          public void itemStateChanged(ItemEvent e) {\n            panel.updateShowTrainingData(e.getStateChange() == e.SELECTED);\n          }\n        });\n    chckbxShowTrainingData.setSelected(true);\n    chckbxShowTrainingData.setBounds(810, 235, 152, 23);\n    frame.getContentPane().add(chckbxShowTrainingData);\n\n    JCheckBox chckbxShowConnection = new JCheckBox(\"Show connection to neighbours\");\n    chckbxShowConnection.addItemListener(\n        new ItemListener() {\n          public void itemStateChanged(ItemEvent e) {\n            panel.updateShowConnections(e.getStateChange() == e.SELECTED);\n          }\n        });\n    chckbxShowConnection.setSelected(true);\n    chckbxShowConnection.setBounds(810, 286, 211, 20);\n    frame.getContentPane().add(chckbxShowConnection);\n\n    lblClasses = new JLabel(\"Classes:\");\n    lblClasses.setBounds(810, 425, 76, 14);\n    frame.getContentPane().add(lblClasses);\n\n    lblXAxis = new JLabel(\"x-Axis:\");\n    lblXAxis.setBounds(810, 364, 232, 14);\n    frame.getContentPane().add(lblXAxis);\n\n    lblYAxis = new JLabel(\"y-Axis:\");\n    lblYAxis.setBounds(810, 389, 232, 14);\n    frame.getContentPane().add(lblYAxis);\n\n    // JLabel lblCorrectClassified = new JLabel(\"Correctly classified:\");\n    // lblCorrectClassified.setBounds(810, 332, 232, 14);\n    // frame.getContentPane().add(lblCorrectClassified);\n\n    try {\n      // DistributionGenerator.run();\n      this.updateDataFile(new File(\"data/knn-3-gauss.arff\"), 3);\n      // this.updateDataFile(new File(\"data/knn-data.arff\"), 3);\n      // this.updateDataFile(new File(\"data/knn_benjamin_data.arff\"), 3);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3344, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [65], "initializationEnd": [95], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 156, "focalAPIEnd": 178, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(ClickController,*)", "jFrame.addWindowListener(WindowListener)", "jFrame.pack()", "jFrame.show()"], "useStart": [156, 215, 298, 316], "useEnd": [209, 268, 310, 328], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mariya-zheleva/MDMAC/tree/master/apps/ClickController/ClickController.java", "rawCode": "  public static ClickController newWindow() {\n    JFrame frame = new JFrame(\"Click Controller\");\n    ClickController cntr = new ClickController(frame);\n    frame.getContentPane().add(cntr, BorderLayout.CENTER);\n    frame.addWindowListener(new CloseWindowAdapter(cntr));\n    cntr.enableClose();\n    frame.pack();\n    frame.show();\n    return cntr;\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3345, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [89], "initializationEnd": [116], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 153, "focalAPIEnd": 175, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "property.setBorder(*)", "property.add(JTextField,GridBagConstraints)", "property.add(JPanel,*)", "property.add(JLabel,GridBagConstraints)", "jFrame.pack()"], "useStart": [181, 232, 325, 1508, 1616, 1666], "useEnd": [226, 286, 369, 1566, 1659, 1678], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stefankeil/Labs/tree/master/121113_LabExercise6/src/UserInterface.java", "rawCode": "  /** Make the frame for the user interface. */\n  private void makeFrame() {\n    frame = new JFrame(calc.getTitle());\n\n    JPanel contentPane = (JPanel) frame.getContentPane();\n    contentPane.setLayout(new BorderLayout(8, 8));\n    contentPane.setBorder(new EmptyBorder(10, 10, 10, 10));\n\n    display = new JTextField();\n    contentPane.add(display, BorderLayout.NORTH);\n\n    JPanel buttonPanelContainer = new JPanel(new BorderLayout());\n\n    JPanel buttonPanel = new JPanel(new GridLayout(3, 6));\n    addButton(buttonPanel, \"+\");\n    addButton(buttonPanel, \"-\");\n    addButton(buttonPanel, \"*\");\n    addButton(buttonPanel, \"/\");\n    addButton(buttonPanel, \"Deg\");\n    addButton(buttonPanel, \"Hex\");\n\n    addButton(buttonPanel, \"9\");\n    addButton(buttonPanel, \"8\");\n    addButton(buttonPanel, \"7\");\n    addButton(buttonPanel, \"6\");\n    addButton(buttonPanel, \"Clear\");\n    addButton(buttonPanel, \"=\");\n\n    addButton(buttonPanel, \"5\");\n    addButton(buttonPanel, \"4\");\n    addButton(buttonPanel, \"3\");\n    addButton(buttonPanel, \"2\");\n    addButton(buttonPanel, \"1\");\n    addButton(buttonPanel, \"0\");\n\n    buttonPanelHex = new JPanel(new GridLayout(1, 6));\n    addButton(buttonPanelHex, \"A\");\n    addButton(buttonPanelHex, \"B\");\n    addButton(buttonPanelHex, \"C\");\n    addButton(buttonPanelHex, \"D\");\n    addButton(buttonPanelHex, \"E\");\n    addButton(buttonPanelHex, \"F\");\n\n    buttonPanelContainer.add(buttonPanel, BorderLayout.NORTH);\n    buttonPanelContainer.add(buttonPanelHex, BorderLayout.SOUTH);\n    contentPane.add(buttonPanelContainer, BorderLayout.CENTER);\n\n    status = new JLabel(calc.getAuthor());\n    contentPane.add(status, BorderLayout.SOUTH);\n\n    frame.pack();\n    buttonPanelHex.setVisible(false);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3346, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [83], "initializationEnd": [106], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)"], "configurationStart": [113, 171], "configurationEnd": [165, 194], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 218, "focalAPIEnd": 240, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.setContentPane(VueNouvelleSession)", "jFrame.setVisible(boolean)"], "useStart": [246, 698, 742], "useEnd": [279, 735, 764], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Projet-Tech/Projet_info4_2012/tree/master/ProjectGammon/src/test/java/fr/ujm/tse/info4/pgammon/test/vues/TestVueNouvelleSession.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Test Menu\");\n\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(816, 638);\n    Container panel = frame.getContentPane();\n    panel.setLayout(new FlowLayout());\n\n    Joueur jBlanc = new Joueur(1, \"ben\", Avatar.CHAT_JAUNE.getPath(), NiveauAssistant.NON_UTILISE);\n    Joueur jNoir = new Joueur(2, \"JM\", Avatar.CHEVAL.getPath(), NiveauAssistant.COMPLET);\n\n    // ParametreJeu param = new ParametreJeu(0, 3, true, jBlanc, jNoir);\n\n    VueNouvelleSession nouvellesession = new VueNouvelleSession();\n\n    nouvellesession.setJoueur1(jBlanc);\n    nouvellesession.setJoueur2(jNoir);\n    frame.setContentPane(nouvellesession);\n\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3347, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [243], "initializationEnd": [264], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [270], "configurationEnd": [325], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 331, "focalAPIEnd": 353, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JComponent)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [331, 699, 717], "useEnd": [365, 711, 739], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/ttools/src/main/uk/ac/starlink/ttools/plottask/SwingPainter.java", "rawCode": "  /**\n   * Displays a screen component directly.\n   *\n   * @param comp screen component\n   */\n  public void postComponent(Component comp) {\n    JComponent holder = new JPanel(new BorderLayout());\n    holder.add(comp);\n    final JFrame frame = new JFrame(winTitle_);\n    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    frame.getContentPane().add(holder);\n    Object quitKey = \"quit\";\n    holder.getInputMap().put(KeyStroke.getKeyStroke('q'), quitKey);\n    holder\n        .getActionMap()\n        .put(\n            quitKey,\n            new AbstractAction() {\n              public void actionPerformed(ActionEvent evt) {\n                frame.dispose();\n              }\n            });\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3348, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [196], "initializationEnd": [222], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 228, "focalAPIEnd": 250, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [228, 281, 299], "useEnd": [275, 293, 321], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GrupoISO/CasaRural/tree/master/jcalendar1.1.4/SRC/COM/TOEDTER/CALENDAR/JMonthChooser.java", "rawCode": "  /**\n   * Creates a JFrame with a JMonthChooser inside and can be used for testing.\n   *\n   * @param s The command line arguments\n   */\n  public static void main(String[] s) {\n    JFrame frame = new JFrame(\"MonthChooser\");\n    frame.getContentPane().add(new JMonthChooser());\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3349, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [407], "initializationEnd": [429], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setResizable(boolean)", "jFrame.setPreferredSize(Dimension)"], "configurationStart": [437, 470], "configurationEnd": [462, 516], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 613, "focalAPIEnd": 635, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JProgressBar)", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()", "jFrame.setLocationRelativeTo(Window)", "jFrame.setVisible(boolean)", "jFrame.setVisible(boolean)"], "useStart": [613, 652, 712, 732, 773, 2366], "useEnd": [644, 704, 724, 765, 795, 2389], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cgueret/LinkedData-QA/tree/master/src/main/java/nl/vu/qa_for_lod/MetricsExecutor.java", "rawCode": "  /**\n   * @param withGUI\n   * @param direction\n   * @throws Exception\n   */\n  public void processQueue(boolean withGUI, Direction direction) throws Exception {\n    logger.info(\"Start processing \" + resourceQueue.size() + \" resources\");\n\n    // Create an executor service\n    ExecutorService executorService = Executors.newFixedThreadPool(6);\n\n    // Init the GUI if needed\n    if (withGUI) {\n      frame = new JFrame(\"Progress\");\n      frame.setResizable(false);\n      frame.setPreferredSize(new Dimension(500, 32));\n      bar = new JProgressBar(0, resourceQueue.size());\n      bar.setStringPainted(true);\n      frame.getContentPane().add(bar);\n      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n      frame.pack();\n      frame.setLocationRelativeTo(null);\n      frame.setVisible(true);\n    }\n\n    // Do the processing\n    List<Future<?>> futures = new ArrayList<Future<?>>();\n    for (Resource resource : resourceQueue) {\n      MetricsTask task = new MetricsTask(this, resource, dataFetcher, extraTriples, direction);\n      Future<?> future = executorService.submit(task);\n      futures.add(future);\n    }\n\n    // Wait for all the tasks to be completed\n    for (Future<?> future : futures) {\n      try {\n        future.get();\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      } catch (ExecutionException e) {\n        e.printStackTrace();\n      }\n    }\n\n    // Remove all metrics that returned no result\n    Set<Metric> notApplicable = new HashSet<Metric>();\n    for (Metric metric : this.getMetrics()) {\n      MetricData data = metricsData.get(metric);\n      if (data.getDistribution(MetricState.BEFORE).equals(data.getDistribution(MetricState.AFTER)))\n        notApplicable.add(metric);\n    }\n    for (Metric metric : notApplicable) metricsData.remove(metric);\n\n    // Do the post processing\n    logger.info(\"Start post-processing\");\n    for (Metric metric : this.getMetrics()) {\n      MetricData data = metricsData.get(metric);\n      for (MetricState state : MetricState.values()) {\n        // Ask the metric the distance to the ideal value\n        Distribution observedDistribution = data.getDistribution(state);\n        double dist = metric.getDistanceToIdeal(observedDistribution);\n        data.setDistanceToIdeal(state, dist);\n      }\n    }\n\n    logger.info(\"Done!\");\n\n    // Hide the progress bar\n    if (withGUI) {\n      frame.setVisible(false);\n    }\n\n    // Shutdown the executor\n    executorService.shutdown();\n    try {\n      if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {\n        executorService.shutdownNow();\n        if (!executorService.awaitTermination(60, TimeUnit.SECONDS))\n          System.err.println(\"Pool did not terminate\");\n      }\n    } catch (InterruptedException ie) {\n      executorService.shutdownNow();\n      Thread.currentThread().interrupt();\n    }\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3350, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["JFrame.getContentPane()", "getMessage()", "getSQLState()", "getErrorCode()", "showMessageDialog(*,String,String,*)"], "tryExpressionStart": 28, "tryExpressionEnd": 32, "tryBlockStart": 28, "tryBlockEnd": 2204, "catchExpressionStart": 1717, "catchExpressionEnd": 1740, "catchBlockStart": 1717, "catchBlockEnd": 2109, "exceptionHandlingCallStart": [1068, 1859, 1940, 2025, 1748], "exceptionHandlingCallEnd": [1093, 1873, 1955, 2041, 2102], "configuration": ["jFrame.setVisible(boolean)"], "configurationStart": [490], "configurationEnd": [516], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 597, "focalAPIEnd": 622, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["showMessageDialog(property,String,String,*)", "jFrame.getContentPane()", "showMessageDialog(property,String)", "jFrame.getContentPane()", "showMessageDialog(property,String,String,*)", "jFrame.getContentPane()", "showMessageDialog(property,*)"], "useStart": [554, 1068, 1025, 1789, 1748, 2168, 2138], "useEnd": [743, 1093, 1154, 1814, 2102, 2193, 2197], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/setiQuest/SonATA/tree/master/sse-pkg/jseeker/DBConnectionDialog.java", "rawCode": "  public void open() {\n\n    try {\n\n      if (open) close();\n\n      String DBurl =\n          new String(\n              \"jdbc:mysql://\"\n                  + hostnameTF.getText()\n                  + \"/\"\n                  + dbnameTF.getText()\n                  + \"?user=\"\n                  + userTF.getText()\n                  + \"&password=\"\n                  + passwdTF.getText());\n\n      conn = DriverManager.getConnection(DBurl);\n      stmt = conn.createStatement();\n      open = true;\n      dbcFrame.setVisible(false);\n\n      if (dbai == null) {\n\n        JOptionPane.showMessageDialog(\n            dbcFrame.getContentPane(),\n            \"DBConnectionDialog::open()\" + \"null dbai.\",\n            \"DB Error\",\n            JOptionPane.ERROR_MESSAGE);\n        return;\n      }\n\n      // ASSUMES: ordered by timestamp puts latest revision on top\n\n      String dbquery = new String(\"SELECT * \" + \"from seeker_db_version \" + \"order by ts\" + \";\");\n\n      ResultSet rs = executeQuery(dbquery.toString());\n\n      if (!rs.next()) {\n        JOptionPane.showMessageDialog(\n            dbcFrame.getContentPane(), \"DBConnectionDialog::open()\" + \"No version records found.\");\n        return;\n\n      } else {\n\n        String version_str = rs.getString(\"revision\");\n\n        StringTokenizer st1 = new StringTokenizer(version_str);\n        st1.nextToken();\n\n        StringTokenizer st2 = new StringTokenizer(st1.nextToken(), \".\");\n\n        major_version_ = Integer.parseInt(new String(st2.nextToken()));\n        minor_version_ = Integer.parseInt(new String(st2.nextToken()));\n      }\n\n      rs.close();\n\n      dbai.initRecord();\n      dbai.getHost().setText(hostnameTF.getText());\n      dbai.getDBName().setText(dbnameTF.getText());\n\n    } catch (SQLException e) {\n      JOptionPane.showMessageDialog(\n          dbcFrame.getContentPane(),\n          \"SQLException: \"\n              + e.getMessage()\n              + \"\\n\"\n              + \"SQLState: \"\n              + e.getSQLState()\n              + \"\\n\"\n              + \"VendorError: \"\n              + e.getErrorCode(),\n          \"SQL Error\",\n          JOptionPane.ERROR_MESSAGE);\n    } catch (Exception e) {\n      JOptionPane.showMessageDialog(dbcFrame.getContentPane(), e);\n    }\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3351, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [84], "initializationEnd": [102], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [108], "configurationEnd": [168], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 174, "focalAPIEnd": 201, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [174, 240, 263], "useEnd": [234, 257, 290], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dawoodamr/Java-SNePS/tree/master/Java SNePS/src/snepsui/Commands/cmdFullDescribe.java", "rawCode": "  private void findButtonActionPerformed(ActionEvent evt) {\n    JFrame popupFrame = new JFrame(\"Find\");\n    popupFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    popupFrame.getContentPane().add(new cmdFind(network, frame));\n    popupFrame.pack();\n    popupFrame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3352, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [423], "initializationEnd": [449], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 472, "focalAPIEnd": 498, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new BoxLayout(property,*)", "property.setLayout(GridLayout)", "new ModelCourseListener(StudyProgressManager,*,Student,jFrame,JList,JTextField,JTextField,ButtonGroup,JList,JList,Container,int)", "new ModelCourseListener(StudyProgressManager,*,Student,jFrame,JList,JTextField,JTextField,ButtonGroup,JList,JList,Container,int)", "property.add(JScrollPane)", "property.add(JLabel)", "property.add(JTextField)", "property.add(JLabel)", "property.add(JTextField)", "property.add(Container)", "property.add(Container)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [519, 504, 1687, 2011, 2348, 2378, 2402, 2427, 2452, 2478, 2506, 2529, 2551], "useEnd": [556, 557, 1972, 2296, 2372, 2396, 2421, 2446, 2472, 2500, 2523, 2545, 2577], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apekkarinen/OhHa/tree/master/StudyProgress/src/studyprogress/StudyGUI.java", "rawCode": "  /**\n   * Displays the graphical add model Course - screen.\n   *\n   * @param moduleindex Index of the Module to add the Course to.\n   * @param modules The JList containing Module info.\n   * @param courses The JList containing Course info.\n   * @param summary The summary Container.\n   */\n  public void displayAddModelCourse(\n      int moduleindex, JList modules, JList courses, Container summary) {\n    JFrame addcourse = new JFrame(\"Lisää kurssi\");\n    Container base = addcourse.getContentPane();\n    base.setLayout(new BoxLayout(base, BoxLayout.Y_AXIS));\n    JLabel yearinfo = createCenteredLabel(\"vuosi\", 100, 25);\n    JTextField yearinput = createCenteredTextField(100, 25);\n    JLabel gradeinfo = createCenteredLabel(\"arvosana\", 100, 25);\n    JTextField gradeinput = createCenteredTextField(100, 25);\n    Container radiobuttons = createContainer(new FlowLayout());\n    JRadioButton fall = new JRadioButton(\"syksy\");\n    fall.setActionCommand(\"syksy\");\n    JRadioButton spring = new JRadioButton(\"kevät\");\n    spring.setActionCommand(\"kevät\");\n    ButtonGroup semester = new ButtonGroup();\n    semester.add(fall);\n    semester.add(spring);\n    radiobuttons.add(fall);\n    radiobuttons.add(spring);\n\n    JList courselist =\n        createList(\n            manager.moduleCoursesToStringArray(\n                manager.modelNameListContains(user.getModuleName(moduleindex))));\n    JScrollPane coursescroller = new JScrollPane(courselist);\n    coursescroller.setPreferredSize(new Dimension(420, 160));\n    Container buttons = createContainer(new FlowLayout());\n    JButton add = new JButton(\"Lisää kurssi\");\n    JButton back = new JButton(\"Takaisin\");\n    add.addActionListener(\n        new ModelCourseListener(\n            manager,\n            this,\n            user,\n            addcourse,\n            courselist,\n            yearinput,\n            gradeinput,\n            semester,\n            modules,\n            courses,\n            summary,\n            moduleindex));\n    back.addActionListener(\n        new ModelCourseListener(\n            manager,\n            this,\n            user,\n            addcourse,\n            courselist,\n            yearinput,\n            gradeinput,\n            semester,\n            modules,\n            courses,\n            summary,\n            moduleindex));\n    buttons.add(add);\n    buttons.add(back);\n    base.add(coursescroller);\n    base.add(yearinfo);\n    base.add(yearinput);\n    base.add(gradeinfo);\n    base.add(gradeinput);\n    base.add(radiobuttons);\n    base.add(buttons);\n    addcourse.pack();\n    addcourse.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3353, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [74], "initializationEnd": [86], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "error(*)"], "tryExpressionStart": 47, "tryExpressionEnd": 51, "tryBlockStart": 47, "tryBlockEnd": 834, "catchExpressionStart": 757, "catchExpressionEnd": 777, "catchBlockStart": 757, "catchBlockEnd": 834, "exceptionHandlingCallStart": [785, 812], "exceptionHandlingCallEnd": [804, 827], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [94], "configurationEnd": [146], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 584, "focalAPIEnd": 606, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.getContentPane()", "property.add(GMEViewer,*)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [584, 644, 644, 707, 727], "useEnd": [636, 666, 698, 719, 749], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cagrid-core/tree/master/caGrid/projects/globalModelExchange-ui/src/java/org/cagrid/gme/discoverytools/GMEViewer.java", "rawCode": "  public static void main(String[] args) {\n    try {\n      JFrame frame = new JFrame();\n      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n      ExtensionDescription ext =\n          (ExtensionDescription)\n              Utils.deserializeDocument(\n                  \"extensions\"\n                      + File.separator\n                      + \"gme-discovery\"\n                      + File.separator\n                      + \"extension.xml\",\n                  ExtensionDescription.class);\n      final GMEViewer panel = new GMEViewer(ext.getDiscoveryExtensionDescription());\n      frame.getContentPane().setLayout(new BorderLayout());\n      frame.getContentPane().add(panel, BorderLayout.CENTER);\n\n      frame.pack();\n      frame.setVisible(true);\n    } catch (Exception e) {\n      e.printStackTrace();\n      logger.error(e);\n    }\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3354, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 575, "focalAPIEnd": 597, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)"], "useStart": [575], "useEnd": [608], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/justinedelson/felix/tree/master/upnp/tester/src/main/java/org/apache/felix/upnp/tester/ControlPoint.java", "rawCode": "  private void doControlPanel() {\n    JPanel panel = new JPanel(new BorderLayout());\n    viewer = new TreeViewer();\n    viewer.setPreferredSize(new Dimension(180, 450));\n    properties = new PropertiesViewer();\n    Mediator.setPropertiesViewer(properties);\n\n    JSplitPane treeSplitter = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, viewer, properties);\n    JPanel logPanel = new LogPanel();\n    logPanel.setPreferredSize(new Dimension(180, 100));\n    JSplitPane logSplitter = new JSplitPane(JSplitPane.VERTICAL_SPLIT, treeSplitter, logPanel);\n    panel.add(logSplitter);\n    frame.getContentPane().add(panel);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3355, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [138], "initializationEnd": [155], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(Window)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [161, 190, 229], "configurationEnd": [184, 223, 281], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 288, "focalAPIEnd": 310, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setVisible(boolean)"], "useStart": [288, 335], "useEnd": [329, 357], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgothel/jogl-demos/tree/master/src/redbook/src/glredbook10/fog.java", "rawCode": "  public static void main(String[] args) {\n    fog demo = new fog();\n\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"fog\");\n    frame.setSize(450, 150);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    frame.getContentPane().add(demo.drawable);\n    frame.setVisible(true);\n    demo.drawable.requestFocusInWindow();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3356, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [85], "initializationEnd": [97], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [103], "configurationEnd": [155], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 161, "focalAPIEnd": 183, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.pack()", "jFrame.setResizable(boolean)", "jFrame.setVisible(boolean)"], "useStart": [161, 261, 279, 310], "useEnd": [255, 273, 304, 332], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pauldoo/scratch/tree/master/Sknat/src/sknat/view/Main.java", "rawCode": "  public static void main(String[] args) {\n    setLookAndFeel();\n\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(new UnitPropertyEditor(new UnitProperties(0.25, 0.25, 0.25, 0.25)));\n    frame.pack();\n    frame.setResizable(false);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3357, "initialization": ["JFrame jFrame = getWindowAncestor(JComponent)"], "initializationStart": [168], "initializationEnd": [203], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 251, "focalAPIEnd": 273, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["convertPoint(JComponent,Point,property)"], "useStart": [216], "useEnd": [274], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nodebox/nodebox/tree/master/src/main/java/nodebox/ui/ColorWell.java", "rawCode": "    public void mouseDragged(MouseEvent e) {\n      isDragging = true;\n      JComponent c = ColorWell.this;\n      Point pt = e.getPoint();\n      JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(c);\n      pt = SwingUtilities.convertPoint(c, pt, frame.getContentPane());\n      MouseEvent newEvent =\n          new MouseEvent(\n              colorPicker,\n              e.getID(),\n              e.getWhen(),\n              e.getModifiers(),\n              (int) pt.getX(),\n              (int) pt.getY(),\n              e.getClickCount(),\n              e.isPopupTrigger(),\n              e.getButton());\n      colorPicker.dispatchEvent(newEvent);\n    }\n"}, {"dataset": "getContentPane", "exampleID": 3358, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [144], "initializationEnd": [161], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(Window)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [167, 196, 235], "configurationEnd": [190, 229, 287], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 294, "focalAPIEnd": 316, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setVisible(boolean)"], "useStart": [294, 341], "useEnd": [335, 363], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgothel/jogl-demos/tree/master/src/redbook/src/glredbook10/aim.java", "rawCode": "  public static void main(String[] args) {\n    aim demo = new aim();\n    //\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"aim\");\n    frame.setSize(500, 500);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    frame.getContentPane().add(demo.drawable);\n    frame.setVisible(true);\n    demo.drawable.requestFocusInWindow();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3359, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [446], "initializationEnd": [458], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [464], "configurationEnd": [516], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 522, "focalAPIEnd": 544, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.getContentPane()", "property.add(BasicModelPanel,*)", "jFrame.getContentPane()", "property.add(JPanel,*)", "jFrame.pack()", "jFrame.setVisible(boolean)", "new JDialog(jFrame,boolean)"], "useStart": [522, 580, 580, 684, 684, 3486, 3543, 3644], "useEnd": [574, 602, 639, 706, 745, 3498, 3565, 3669], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/epsilony/tb/tree/master/src/main/java/net/epsilony/tb/implicit/demo/TriangleContourBuilderDemo.java", "rawCode": "  public void genUI() {\n    genContourBuilder();\n    genContour();\n\n    modelPanel = new BasicModelPanel();\n    mainDrawer = new TriangleContourBuilderDemoDrawer(contourBuilder);\n    modelPanel.addAndSetupModelDrawer(mainDrawer);\n    modelPanel.setPreferredSize(new Dimension(800, 600));\n    modelPanel.addMouseListener(this);\n    modelPanel.addMouseMotionListener(this);\n    modelPanel.addAndSetupModelDrawer(new DraggingDrawer());\n\n    frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().setLayout(new BorderLayout());\n    frame.getContentPane().add(modelPanel, BorderLayout.CENTER);\n\n    JPanel rightPanel = new JPanel();\n    frame.getContentPane().add(rightPanel, BorderLayout.LINE_END);\n    rightPanel.setLayout(new BoxLayout(rightPanel, BoxLayout.Y_AXIS));\n\n    ButtonGroup buttonGroup = new ButtonGroup();\n    boolean first = true;\n    LeftRadioListener buttonAction = new LeftRadioListener();\n    List<String> methods = new ArrayList<>(builderMap.keySet());\n    Collections.sort(methods);\n    for (String buttonName : methods) {\n      JRadioButton button = new JRadioButton(buttonName);\n      button.setActionCommand(buttonName);\n      if (first) {\n        button.setSelected(true);\n        first = false;\n      }\n      buttonGroup.add(button);\n      button.addActionListener(buttonAction);\n      rightPanel.add(button);\n    }\n\n    rightPanel.add(Box.createVerticalStrut(2));\n    showGradient = new JCheckBox(\"show gradient\", true);\n    showGradient.setSelected(true);\n    showGradient.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            updateGradientDrawingSetting();\n            modelPanel.repaint();\n          }\n        });\n\n    rightPanel.add(showGradient);\n    unitGradient = new JCheckBox(\"unit gradient\", true);\n    unitGradient.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            updateGradientDrawingSetting();\n            modelPanel.repaint();\n          }\n        });\n\n    rightPanel.add(unitGradient);\n    rightPanel.add(Box.createVerticalStrut(2));\n    unitGradientLength = new JSlider(1, 50);\n    rightPanel.add(unitGradientLength);\n    unitGradientLength.setValue(mainDrawer.nodeDrawer.getUnitGradientLength());\n    unitGradientLength.setEnabled(mainDrawer.nodeDrawer.isDrawGradient());\n    unitGradientLength.setPaintLabels(true);\n    unitGradientLength.setPaintTicks(true);\n    unitGradientLength.setPaintTrack(true);\n    unitGradientLength.setMajorTickSpacing(10);\n    unitGradientLength.setMinorTickSpacing(1);\n    unitGradientLength.addChangeListener(\n        new ChangeListener() {\n          @Override\n          public void stateChanged(ChangeEvent e) {\n            updateGradientDrawingSetting();\n            modelPanel.repaint();\n          }\n        });\n\n    gradientScale = new JFormattedTextField(NumberFormat.getNumberInstance());\n    gradientScale.setValue(mainDrawer.nodeDrawer.getGradientScale());\n    gradientScale.setMaximumSize(new Dimension(Short.MAX_VALUE, 30));\n    rightPanel.add(gradientScale);\n    gradientScale.setEnabled(!mainDrawer.nodeDrawer.isUnitGradient());\n    gradientScale.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            updateGradientDrawingSetting();\n            modelPanel.repaint();\n          }\n        });\n\n    frame.pack();\n    modelPanel.setZoomAllNeeded(true);\n    frame.setVisible(true);\n\n    specificationPanel = new TrackContourSpecificationPanel();\n    dialog = new JDialog(frame, false);\n    dialog.setSize(500, 400);\n    dialog.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\n    dialog.getContentPane().add(specificationPanel);\n    dialog.pack();\n    dialog.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3360, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [305], "initializationEnd": [381], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 2848, "focalAPIEnd": 2867, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.getContentPane()", "property.add(JPanel,*)", "jFrame.setSize(int,int)", "jFrame.setResizable(boolean)"], "useStart": [2848, 2903, 2903, 2963, 2989], "useEnd": [2897, 2922, 2957, 2983, 3011], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/srnsw/xena/tree/master/plugins/pdf/ext/src/jpedal_lgpl-3.83b38/src/org/jpedal/examples/simpleviewer/gui/popups/OldPreferences.java", "rawCode": "  /**\n   * createPreferanceWindow(final GUI gui) Set up all settings fields then call the required methods\n   * to build the window\n   *\n   * @param gui - Used to allow any changed settings to be saved into an external properties file.\n   */\n  public void createPreferenceWindow(final GUI gui) {\n    jf = new JFrame(Messages.getMessage(\"PageLayoutViewMenu.PreferencesWindowTitle\"));\n\n    /*\n     * Ensure current values have been set into the fields\n     */\n    for (int i = 0; i != settings.length; i++) {\n      settings[i] = new JPanel(new BorderLayout());\n    }\n\n    settingsList = new JList(new String[] {\"Display\", \"Viewer\", \"Updates\", \"MultiViewer\"});\n    settingsList.setSelectedIndex(currentListSelection);\n    settingsList.setSize(50, 100);\n\n    dpi_Input = new JTextField(dpiDefaultValue);\n    dpi_Input.setPreferredSize(\n        new Dimension(dpi_Input.getFont().getSize() * 4, dpi_Input.getFont().getSize() + 10));\n\n    maxMultiViewers = new JTextField(maxMultiViewersDefaultValue);\n    maxMultiViewers.setPreferredSize(\n        new Dimension(\n            maxMultiViewers.getFont().getSize() * 4, maxMultiViewers.getFont().getSize() + 10));\n\n    // maxMultiViewers.setMinimumSize(new Dimension(20,20));\n\n    searchStyle =\n        new JComboBox(\n            new String[] {\n              Messages.getMessage(\"PageLayoutViewMenu.WindowSearch\"),\n              Messages.getMessage(\"PageLayoutViewMenu.TabbedSearch\"),\n              Messages.getMessage(\"PageLayoutViewMenu.MenuSearch\")\n            });\n    pageLayout =\n        new JComboBox(\n            new String[] {\n              Messages.getMessage(\"PageLayoutViewMenu.SinglePage\"),\n              Messages.getMessage(\"PageLayoutViewMenu.Continuous\"),\n              Messages.getMessage(\"PageLayoutViewMenu.Facing\"),\n              Messages.getMessage(\"PageLayoutViewMenu.ContinousFacing\")\n            });\n\n    border = new JCheckBox();\n    autoScroll = new JCheckBox();\n    update = new JCheckBox();\n\n    confirm = new JButton(\"OK\");\n    cancel = new JButton(\"Cancel\");\n\n    title = new JLabel(Messages.getMessage(\"PageLayoutViewMenu.Preferences\"));\n    title.setFont(new Font(null, Font.BOLD, 14));\n\n    setButtons.add(confirm);\n    setButtons.add(Box.createHorizontalStrut(30));\n    setButtons.add(cancel);\n\n    /*\n     * Build the Settings panels\n     */\n    for (int i = 0; i < settingsList.getModel().getSize(); i++) {\n      switch (i) {\n        case 0:\n          createDisplaySettings(settings[0]);\n          break;\n        case 1:\n          createViewerSettings(settings[1]);\n          break;\n        case 2:\n          createUpdateSettings(settings[2]);\n          break;\n        case 3:\n          createMultiViewerSettings(settings[3]);\n          break;\n        default:\n          break;\n      }\n    }\n\n    // Build the preferences window\n    mainPane = buildMainPane(mainPane);\n\n    jf.getContentPane().setLayout(new BorderLayout());\n    jf.getContentPane().add(mainPane, BorderLayout.CENTER);\n    jf.setSize(400, 300);\n    jf.setResizable(false);\n\n    /*\n     * Listeners that are reqired for each setting field\n     */\n    confirm.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent arg0) {\n            dpiDefaultValue = dpi_Input.getText();\n            int dpi = Integer.parseInt(dpi_Input.getText());\n            int style = searchStyleDefaultValue = searchStyle.getSelectedIndex();\n            int pageMode = pageLayoutDefaultValue = (pageLayout.getSelectedIndex() + 1);\n\n            int borderStyle = borderDefaultValue = 0;\n            if (border.isSelected()) {\n              borderStyle = borderDefaultValue = 1;\n            }\n\n            updateDefaultValue = update.isSelected();\n\n            boolean toggleScroll = scrollDefaultValue = autoScroll.isSelected();\n\n            int maxNoOfMultiViewers = Integer.parseInt(maxMultiViewers.getText());\n            // Quick hack to remove error, as class no longer used no need to implement fully\n            gui.setPreferences(\n                dpi,\n                style,\n                borderStyle,\n                toggleScroll,\n                pageMode,\n                updateDefaultValue,\n                maxNoOfMultiViewers,\n                false,\n                false);\n\n            jf.setVisible(false);\n          }\n        });\n\n    cancel.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent arg0) {\n            jf.setVisible(false);\n          }\n        });\n\n    KeyListener numericalKeyListener =\n        new KeyListener() {\n\n          boolean consume = false;\n\n          public void keyPressed(KeyEvent e) {\n            consume = false;\n            if ((e.getKeyChar() < '0' || e.getKeyChar() > '9')\n                && (e.getKeyCode() != 8 || e.getKeyCode() != 127)) consume = true;\n          }\n\n          public void keyReleased(KeyEvent e) {}\n\n          public void keyTyped(KeyEvent e) {\n            if (consume) e.consume();\n          }\n        };\n    dpi_Input.addKeyListener(numericalKeyListener);\n    maxMultiViewers.addKeyListener(numericalKeyListener);\n\n    settingsList.addListSelectionListener(\n        new ListSelectionListener() {\n          public void valueChanged(ListSelectionEvent e) {\n            changeDisplayedSettings();\n          }\n        });\n\n    searchStyle.setSelectedIndex(searchStyleDefaultValue);\n    dpi_Input.setText(dpiDefaultValue);\n    if (borderDefaultValue == 1) border.setSelected(true);\n    else border.setSelected(false);\n    autoScroll.setSelected(scrollDefaultValue);\n\n    update.setSelected(updateDefaultValue);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3361, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [65], "initializationEnd": [95], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 156, "focalAPIEnd": 178, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(ClickController,*)", "jFrame.addWindowListener(WindowListener)", "jFrame.pack()", "jFrame.show()"], "useStart": [156, 215, 298, 316], "useEnd": [209, 268, 310, 328], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cawka/click/tree/master/apps/ClickController/ClickController.java", "rawCode": "  public static ClickController newWindow() {\n    JFrame frame = new JFrame(\"Click Controller\");\n    ClickController cntr = new ClickController(frame);\n    frame.getContentPane().add(cntr, BorderLayout.CENTER);\n    frame.addWindowListener(new CloseWindowAdapter(cntr));\n    cntr.enableClose();\n    frame.pack();\n    frame.show();\n    return cntr;\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3362, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [87], "initializationEnd": [111], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [117], "configurationEnd": [166], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 187, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JScrollPane,*)", "jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [932, 978, 1004], "useEnd": [971, 998, 1023], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IanDarwin/javasrc/tree/master/src/main/java/gui/StyledText.java", "rawCode": "  public static void main(String args[]) throws BadLocationException {\n    JFrame jf = new JFrame(\"StyledText\");\n    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    Container cp = jf.getContentPane();\n\n    JTextPane pane = new JTextPane();\n    SimpleAttributeSet set = new SimpleAttributeSet();\n    StyleConstants.setBold(set, true);\n\n    // Set the attributes before adding text\n    pane.setCharacterAttributes(set, true);\n    pane.setText(\"Eine \");\n\n    set = new SimpleAttributeSet();\n    StyleConstants.setItalic(set, true);\n    StyleConstants.setForeground(set, Color.red);\n    StyleConstants.setBackground(set, Color.blue);\n\n    Document doc = pane.getStyledDocument();\n    doc.insertString(doc.getLength(), \"Kleine \", set);\n\n    set = new SimpleAttributeSet();\n    StyleConstants.setFontSize(set, 24);\n\n    doc.insertString(doc.getLength(), \"Nachtmusic\", set);\n\n    JScrollPane scrollPane = new JScrollPane(pane);\n    cp.add(scrollPane, BorderLayout.CENTER);\n\n    jf.setSize(400, 300);\n    jf.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3363, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [619], "initializationEnd": [661], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 706, "focalAPIEnd": 728, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [706, 817, 846], "useEnd": [756, 840, 868], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/visad/visad/tree/master/examples/src/VerySimple.java", "rawCode": "  public static void main(String args[]) throws VisADException, RemoteException, IOException {\n\n    // create a netCDF reader\n    Plain plain = new Plain();\n\n    // read an image sequence from a netCDF file into a data object\n    DataImpl image_sequence = plain.open(\"images.nc\");\n\n    // create a display for the image sequence\n    DisplayImpl display = DataUtility.makeSimpleDisplay(image_sequence);\n\n    // start animation\n    AnimationControl control = (AnimationControl) display.getControl(AnimationControl.class);\n    control.setOn(true);\n\n    // create JFrame (i.e., a window) for the display\n    JFrame frame = new JFrame(\"VerySimple VisAD Application\");\n\n    // link the display to the JFrame\n    frame.getContentPane().add(display.getComponent());\n\n    // set the size of the JFrame and make it visible\n    frame.setSize(400, 400);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3364, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [277], "initializationEnd": [320], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [326], "configurationEnd": [374], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 380, "focalAPIEnd": 398, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(FisheyeMenu)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [380, 412, 426], "useEnd": [406, 420, 444], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ninesunqian/excitedmind/tree/master/prefuse-demos/src/main/java/prefuse/demos/FisheyeMenu.java", "rawCode": "  /** Run a demonstration of the FisheyeMenu */\n  public static final void main(String[] argv) {\n    // only log warnings\n    LoggerFactory.getLogger(\"prefuse\").setLevel(Level.WARNING);\n\n    FisheyeMenu fm = demo();\n\n    // create and display application window\n    JFrame f = new JFrame(\"p r e f u s e | f i s h e y e\");\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.getContentPane().add(fm);\n    f.pack();\n    f.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3365, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [9437], "initializationEnd": [9461], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 140, "tryExpressionEnd": 144, "tryBlockStart": 140, "tryBlockEnd": 9775, "catchExpressionStart": 9721, "catchExpressionEnd": 9741, "catchBlockStart": 9721, "catchBlockEnd": 9775, "exceptionHandlingCallStart": [9749], "exceptionHandlingCallEnd": [9768], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 9590, "focalAPIEnd": 9608, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JLabel)", "jFrame.pack()", "jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [9590, 9623, 9639, 9665], "useEnd": [9615, 9631, 9657, 9713], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gmfawcett/openmark-mvn/tree/master/tags/v1.3.9/src/om/graph/Test.java", "rawCode": "  /**\n   * Main method for testing the graph routines.\n   *\n   * @param args Not used.\n   */\n  public static void main(String[] args) {\n    try {\n      String sCFTest =\n          \"<world id='w1' px='0' py='0' pw='200' ph='200' xleft='0.0' xright='1.0' ybottom='0.0' ytop='1.0'><colourField id='cf'/></world>\";\n\n      String sRoundingTest =\n          \" <world id=\\\"w1\\\" px=\\\"140\\\" py=\\\"58\\\" pw=\\\"290\\\" ph=\\\"255\\\" \\r\\n\"\n              + \" xleft=\\\"0.0\\\" xright=\\\"140.0\\\" ybottom=\\\"0.0\\\" ytop=\\\"2.2\\\">\\r\\n\"\n              + \" <xAxis ticks=\\\"20,10\\\" tickSide=\\\"-\\\" numbers=\\\"20\\\" omitNumbers=\\\"0\\\" label=\\\"temperature / �C\\\" />\\r\\n\"\n              + \" <yAxis maxY=\\\"2.0\\\" ticks=\\\"1,0.1\\\" tickSide=\\\"-\\\" numbers=\\\"0.5\\\" />\\r\\n\"\n              + \" <text x=\\\"15\\\" y=\\\"2.1\\\" text=\\\"pressure / 10���Pa\\\" />\\r\\n\"\n              + \" <text x=\\\"31\\\" y=\\\"2.14\\\" text=\\\"5\\\" />\\r\\n\"\n              + \" <grid maxY=\\\"2.01\\\" xspacing=\\\"10\\\" yspacing=\\\"0.1\\\" />\\r\\n\"\n              + \" <line x='0' y='1.4' x2='100' y2='1.4' lineColour='#f00,graph1'/>\"\n              + \" </world>\";\n      /*\n      String sAxisTest=\n      \"<world id='w1' px='50' py='10' pw='500' ph='500' \"+\n      \" xleft='-1.0' xright='1.0' ytop='1.0' ybottom='-4.0'>\"+\n      \" <yAxis ticks='0.5,0.1' minY='-0.5' x='-0.5' numbers='0.5' tickSide='-' rotateLabel='no' label='Frogs' numbersFont='10px' labelMargin='-4'/>\"+\n      \" <yAxis ticks='0.5,0.1' minY='-0.5' numbers='0.5' rotateNumbers='yes' tickSide='+' label='Tadpoles' labelMargin='8'/>\"+\n      \" <yAxis ticks='0.5,0.1' minY='-0.5' x='0.5' numbers='0.5' rotateNumbers='yes' rotateFlip='yes' tickSide='both' label='Frogspawn'/>\"+\n      \" <xAxis ticks='0.5,0.1' y='-1.5' numbers='0.5' tickSide='-' label='Frogs'/>\"+\n      \" <xAxis ticks='0.5,0.1' y='-2.5' numbers='0.5' rotateNumbers='yes' tickSide='+' label='Tadpoles'/>\"+\n      \" <xAxis ticks='0.5,0.1' y='-3.5' numbers='0.5' rotateNumbers='yes' rotateFlip='yes' tickSide='both' label='Frogspawn'/>\"+\n      \" <grid xSpacing='0.2,0.1' ySpacing='0.2' maxY='-3' minY='-3.5'/>\"+\n      \"</world>\";\n\n      String sShapeTest=\n      \"<world id='w1' px='50' py='10' pw='500' ph='500' \"+\n      \" xleft='0' xright='1.0' ytop='1.0' ybottom='0'>\"+\n      \"<rectangle x='0.1' y='0.1' width='0.1' height='0.1' fillColour='#800'/>\"+\n      \"<rectangle x='0.2' y='0.2' width='0.1' height='0.1' fillColour='#800'/>\"+\n      \"<rectangle x='0.3' y='0.1' x2='0.4' y2='0.2' lineColour='#800'/>\"+\n      \"<rectangle x='0.4' y='0.2' width='0.1' height='0.1' lineColour='#800'/>\"+\n      \"<rectangle x='0.5' y='0.1' width='0.1' height='0.1' fillColour='#8ff' lineColour='#800' lineWidth='4'/>\"+\n      \"<rectangle x='0.7' y='0.1' x2='0.8' y2='0.2' lineColour='#800'/>\"+\n      \"<rectangle x='0.7:4' y='0.1:4' x2='0.8:4' y2='0.2:4' lineColour='#800'/>\"+\n\n      \"<ellipse x='0.1' y='0.5' width='0.1' fillColour='#800'/>\"+\n      \"<ellipse x='0.2' y='0.6' height='0.1' fillColour='#800'/>\"+\n      \"<ellipse x='0.3' y='0.5' width='0.07' height='0.3' lineColour='#800'/>\"+\n      \"<ellipse x='0.4' y='0.6' width='0.1' lineColour='#800'/>\"+\n      \"<ellipse x='0.5' y='0.5' width='0.1' fillColour='#8ff' lineColour='#800' lineWidth='4'/>\"+\n      \"<ellipse x='0.7' y='0.5' width='0.1' lineColour='#800'/>\"+\n      \"<ellipse x='0.7:4' y='0.5:4' width='0.1' lineColour='#800'/>\"+\n\n      \"<line x='0.3' y='0.5' x2='0.35' y2='0.15'/>\"+\n      \"<line x='0.5' y='0.5' x2='0.55' y2='0.15' lineWidth='4' lineColour='#800'/>\"+\n      \"</world>\";\n\n      String sTextTest=\n      \"<world id='w1' px='50' py='10' pw='500' ph='500' \"+\n      \" xleft='-1.0' xright='1.0' ytop='1.0' ybottom='-1.0'>\"+\n      \"<text x='0' y='0.9' align='left' text='Hello Graph!'/>\"+\n      \"<text x='0' y='0.8' align='centre' text='Hello Graph!'/>\"+\n      \"<text x='0' y='0.7' align='right' text='Hello Graph!'/>\"+\n      \"<text x='0.9' y='0' align='left' angle='90' text='Hello Graph!'/>\"+\n      \"<text x='0.8' y='0' align='centre' angle='90' text='Hello Graph!'/>\"+\n      \"<text x='0.7' y='0' align='right' angle='90' text='Hello Graph!'/>\"+\n      \"<text x='-0.9' y='0' align='left' angle='270' text='Hello Graph!'/>\"+\n      \"<text x='-0.8' y='0' align='centre' angle='270' text='Hello Graph!'/>\"+\n      \"<text x='-0.7' y='0' align='right' angle='270' text='Hello Graph!'/>\"+\n      \"<text x='0' y='-0.9' align='left' angle='360' text='Hello Graph!'/>\"+\n      \"<text x='0' y='-0.8' align='centre' angle='360' text='Hello Graph!'/>\"+\n      \"<text x='0' y='-0.7' align='right' angle='360' text='Hello Graph!'/>\"+\n      \"<text x='0' y='0' angle='255' colour='#efe' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='270' colour='#cfc' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='285' colour='#afa' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='300' colour='#8f8' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='315' colour='#6f6' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='330' colour='#4f4' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='345' colour='#2f2' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='0' colour='#000' text='Hello Graph!' font='bold 30px'/>\"+\n      \"</world>\";\n      */\n\n      String sXML =\n          \"<world id='w1' px='90' py='10' pw='200' ph='200' \"\n              + \" xleft='-1.0' xright='1.0' ytop='1.0' ybottom='-1.0'>\"\n              + \" <rectangle x='0' y='0.4' width='1' height='0.2'/>\"\n              + \" <rectangle x='0' y='0' width='0.5' height='0.4' fillColour='#fee'/>\"\n              + \" <rectangle x='0.5' y='0.3' width='0.5' height='0.2' lineColour='#f0f' fillColour='#fff' linewidth='4'/>\"\n              + \" <xAxis ticks='0.2,0.1' numbers='0.5' colour='#800' omitNumbers='0.0' tickSide='both'/>\"\n              + \" <yAxis ticks='0.2,0.1' numbers='0.5' colour='#800' omitNumbers='0.0' tickSide='-'/>\"\n              + \" <function minX='0' colour='#080' lineWidth='2.0' id='thingy'/>\"\n              + \" <parametricFunction minT='0' maxT='6.3' colour='#008' steps='300' lineWidth='1.0' id='thingy2'/>\"\n              + \" <colourField minX='-1' maxX='-0.5' minY='-1' maxY='-0.5' blockSize='1' id='thingy3'/>\"\n              + \"\"\n              + \"\"\n              + \"\"\n              + \"</world>\";\n      String sThisTest = sRoundingTest;\n      Document d = XML.parse(sThisTest);\n      World w =\n          new World(\n              new World.Context() {\n                public Color getColour(String sConstant) {\n                  if (sConstant.equals(\"fg\")) return Color.black;\n                  return null;\n                }\n\n                public boolean useAlternates() {\n                  return false;\n                }\n\n                public String getFontFamily() {\n                  return \"Verdana\";\n                }\n\n                public int getFontSize() {\n                  return 13;\n                }\n              },\n              d.getDocumentElement());\n\n      if (sThisTest == sCFTest) {\n        ColourFieldItem cfi = (ColourFieldItem) w.getItem(\"cf\");\n        cfi.setFunction(\n            new ColourFieldItem.Function() {\n              public Color f(double x, double y) {\n                if (x > 1.0 || y > 1.0 || x < 0.0 || y < 0.0) {\n                  System.err.println(\"Got: \" + x + \",\" + y);\n                  return Color.black;\n                }\n\n                return new Color((float) x, (float) y, 0.5f);\n              }\n            });\n      }\n\n      if (sThisTest == sXML) {\n        ((FunctionItem) w.getItem(\"thingy\"))\n            .setFunction(\n                new FunctionItem.Function() {\n                  public double f(double x) {\n                    return Math.sin(x * 2 * Math.PI);\n                  }\n                });\n\n        ((ParametricFunctionItem) w.getItem(\"thingy2\"))\n            .setFunction(\n                new ParametricFunctionItem.Function() {\n                  public GraphPoint f(double t) {\n                    return new GraphPoint((Math.cos(3.0 * t)), Math.sin(5.0 * t));\n                  }\n                });\n\n        ((ColourFieldItem) w.getItem(\"thingy3\"))\n            .setFunction(\n                new ColourFieldItem.Function() {\n                  public Color f(double x, double y) {\n                    float f1 =\n                        (float) (3 * Math.sqrt(Math.pow(x - (-0.8), 2) + Math.pow(y - (-0.8), 2)));\n                    float f2 =\n                        (float) (3 * Math.sqrt(Math.pow(x - (-0.6), 2) + Math.pow(y - (-0.5), 2)));\n                    return new Color(Math.min(f1, 1.0f), Math.min(f2, 1.0f), 0.0f);\n                  }\n                });\n      }\n\n      int iW = 600, iH = 600, iGraphX = 50, iGraphY = 10, iGraphW = 500, iGraphH = 500;\n      BufferedImage bi = new BufferedImage(iW, iH, BufferedImage.TYPE_INT_RGB);\n      Graphics2D g2 = bi.createGraphics();\n      boolean bAntiAlias = true;\n      g2.setRenderingHint(\n          RenderingHints.KEY_ANTIALIASING,\n          bAntiAlias ? RenderingHints.VALUE_ANTIALIAS_ON : RenderingHints.VALUE_ANTIALIAS_OFF);\n      g2.setRenderingHint(\n          RenderingHints.KEY_TEXT_ANTIALIASING,\n          bAntiAlias\n              ? RenderingHints.VALUE_TEXT_ANTIALIAS_ON\n              : RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);\n      g2.setColor(Color.yellow);\n      g2.fillRect(0, 0, iW, iH);\n      g2.setColor(Color.white);\n      g2.fillRect(iGraphX, iGraphY, iGraphW, iGraphH);\n\n      w.paint(g2);\n\n      JFrame f = new JFrame(\"Graph test\");\n      JLabel l = new JLabel(new ImageIcon(bi));\n      l.setBorder(BorderFactory.createEmptyBorder(100, 100, 100, 100));\n\n      f.getContentPane().add(l);\n      f.pack();\n      f.setVisible(true);\n      f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    } catch (Throwable t) {\n      t.printStackTrace();\n    }\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3366, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [200], "initializationEnd": [257], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 2772, "focalAPIEnd": 2803, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JLabel,GridBagConstraints)", "jFrame.getContentPane()", "property.add(JPanel)", "jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(Window)", "jFrame.setDefaultCloseOperation(int)", "jFrame.show()"], "useStart": [2772, 2953, 2953, 3061, 3121, 3160, 3218], "useEnd": [2947, 2975, 2986, 3115, 3154, 3212, 3230], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Niiner/Nikouli-Makouli-Project/tree/master/src/plug/majorplugin/generalgui/resizable/ResizableComponentDemo.java", "rawCode": "  public static void main(String[] args) {\n    try {\n      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n    } catch (Exception ex) {\n      // ignore;\n    }\n\n    JFrame frame = new JFrame(\"Resizable Components - santhosh@fiorano.com\");\n    System.out.println(new JDesktopPane().getLayout());\n\n    final JPanel panel = new JPanel(null);\n    final JPopupMenu popup = new JPopupMenu();\n    final Point location = new Point();\n\n    abstract class AddComponentAction extends AbstractAction {\n      public AddComponentAction(String name) {\n        super(name);\n      }\n\n      protected abstract Component createComponent();\n\n      public void actionPerformed(ActionEvent ae) {\n        Component comp = createComponent();\n        Dimension bounds = comp.getPreferredSize();\n        JResizer resizer = new JResizer(comp);\n        resizer.setBounds(location.x, location.y, bounds.width, bounds.height);\n        panel.add(resizer);\n        panel.repaint();\n        resizer.invalidate();\n        panel.revalidate();\n      }\n    }\n    popup.add(\n        new AddComponentAction(\"Add Tree\") {\n          protected Component createComponent() {\n            return new JTree();\n          }\n        });\n    popup.add(\n        new AddComponentAction(\"Add Table\") {\n          protected Component createComponent() {\n            JTable table =\n                new JTable(\n                    new Object[][] {\n                      {\n                        \"[xxxxxxxxxxxxxxxxxxxxxxxxxxxxx]\",\n                        \"[yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy]\",\n                        \"[zzzzzzzzzzzzzzzzzzzzzzzzzzzz]\"\n                      },\n                      {\n                        \"[xxxxxxxxxxxxxx]\",\n                        \"[yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy]\",\n                        \"[zzzzzzzzzzzzzzzzzzzzzzz]\"\n                      },\n                      {\n                        \"[xxxxxxxxxx]\",\n                        \"[yyyyyyyyyy]\",\n                        \"[zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz]\"\n                      }\n                    },\n                    new String[] {\"col1\", \"col2\", \"col3\"});\n            table.setPreferredScrollableViewportSize(new Dimension(300, 200));\n            return new JScrollPane(table);\n          }\n        });\n\n    panel.addMouseListener(\n        new MouseAdapter() {\n          public void mousePressed(MouseEvent me) {\n            showPopup(me);\n          }\n\n          public void mouseReleased(MouseEvent me) {\n            showPopup(me);\n          }\n\n          private void showPopup(MouseEvent me) {\n            if (me.isPopupTrigger()) {\n              location.setLocation(me.getPoint());\n              popup.show(panel, me.getX(), me.getY());\n            }\n          }\n        });\n\n    frame\n        .getContentPane()\n        .add(\n            new JLabel(\"Right Click and from popup, select the component to add\", JLabel.CENTER),\n            BorderLayout.NORTH);\n    frame.getContentPane().add(panel);\n\n    Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();\n    frame.setSize(screen.width - 100, screen.height - 100);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.show();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3367, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [58], "initializationEnd": [85], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 91, "focalAPIEnd": 109, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setSize(int,int)", "jFrame.pack()", "jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [91, 161, 188, 202, 227], "useEnd": [127, 182, 196, 220, 275], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chasent/Week-of-Code-2013/tree/master/src/UI/Window.java", "rawCode": "  public static void main(String[] args) {\n    JFrame f = new JFrame(\"Octo Centauri\");\n    f.getContentPane().add(new Window());\n    // f.add(new Window());\n    f.setSize(1920, 1080);\n    f.pack();\n    f.setVisible(true);\n\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3368, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [89], "initializationEnd": [101], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [107, 148], "configurationEnd": [142, 200], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 206, "focalAPIEnd": 228, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.getContentPane()", "property.add(JPanel,String)", "jFrame.getRootPane()"], "useStart": [206, 307, 307, 2907], "useEnd": [260, 329, 375, 2926], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pashamur/chat/tree/master/src/client/Signin.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initialize() {\n    frame = new JFrame();\n    frame.setBounds(100, 100, 450, 300);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().setLayout(new CardLayout(0, 0));\n\n    JPanel signin_panel = new JPanel();\n    frame.getContentPane().add(signin_panel, \"name_1367989163741677000\");\n    signin_panel.setLayout(new BoxLayout(signin_panel, BoxLayout.Y_AXIS));\n\n    Component verticalStrut0 = Box.createVerticalStrut(10);\n    signin_panel.add(verticalStrut0);\n\n    JLabel welcome_label = new JLabel(\"Welcome to GUI Chat!\");\n    welcome_label.setBackground(new Color(138, 43, 226));\n    welcome_label.setAlignmentY(0.0f);\n    welcome_label.setAlignmentX(0.5f);\n    welcome_label.setHorizontalAlignment(SwingConstants.CENTER);\n    signin_panel.add(welcome_label);\n\n    Component verticalStrut = Box.createVerticalStrut(20);\n    signin_panel.add(verticalStrut);\n\n    // Box horizontalBox = Box.createHorizontalBox();\n    // signin_panel.add(horizontalBox);\n    Box outerGrid = Box.createHorizontalBox();\n    Box labelBox = Box.createVerticalBox();\n    Box fieldsBox = Box.createVerticalBox();\n    outerGrid.add(labelBox);\n    outerGrid.add(fieldsBox);\n    signin_panel.add(outerGrid);\n\n    JLabel serverLabel = new JLabel(\"Server:\", SwingConstants.TRAILING);\n    labelBox.add(serverLabel);\n    labelBox.add(Box.createRigidArea(new Dimension(5, 5)));\n    // horizontalBox.add(ServerLabeL);\n\n    serverText = new JTextField(\"localhost\");\n    fieldsBox.add(serverText);\n    serverText.setColumns(10);\n\n    // Box PortBox = Box.createHorizontalBox();\n    // signin_panel.add(PortBox);\n\n    JLabel PortLabel = new JLabel(\"Port:\");\n    // PortBox.add(PortLabel);\n    labelBox.add(PortLabel);\n    labelBox.add(Box.createRigidArea(new Dimension(5, 5)));\n\n    PortText = new JTextField(\"1234\");\n    // PortBox.add(PortText);\n    PortText.setColumns(10);\n    fieldsBox.add(PortText);\n\n    Box horizontalBox = Box.createHorizontalBox();\n    labelBox.add(horizontalBox);\n\n    // Box signin_box = Box.createHorizontalBox();\n    // signin_panel.add(signin_box);\n\n    JLabel signin_label = new JLabel(\"Username: \");\n    signin_label.setVerticalAlignment(SwingConstants.TOP);\n    signin_label.setHorizontalAlignment(SwingConstants.TRAILING);\n    signin_label.setLabelFor(serverText);\n    labelBox.add(signin_label);\n    labelBox.add(Box.createRigidArea(new Dimension(0, 3)));\n\n    // signin_box.add(signin_label);\n\n    SigninText = new JTextField();\n    fieldsBox.add(SigninText);\n\n    JButton join_button = new JButton(\"Join Server\");\n    join_button.setAlignmentX(Component.CENTER_ALIGNMENT);\n    SigninListener signinListener =\n        new SigninListener(SigninText, client, serverText, PortText, frame);\n    join_button.addActionListener(signinListener);\n\n    // Make enter key work the same as pressing the Join Server button\n    frame.getRootPane().setDefaultButton(join_button);\n\n    SigninText.setColumns(10);\n\n    SigninText.setMaximumSize(SigninText.getPreferredSize());\n    serverText.setMaximumSize(serverText.getPreferredSize());\n    PortText.setMaximumSize(PortText.getPreferredSize());\n    Component verticalStrut2 = Box.createVerticalStrut(10);\n    signin_panel.add(verticalStrut2);\n\n    signin_panel.add(join_button);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3369, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [89], "initializationEnd": [101], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [107, 148], "configurationEnd": [142, 200], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 5126, "focalAPIEnd": 5148, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new GroupLayout(property)", "jFrame.getContentPane()", "property.setLayout(GroupLayout)"], "useStart": [5110, 7792, 7792], "useEnd": [5149, 7814, 7837], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kaety/iMat/tree/master/src/grp30/testFrame.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initialize() {\n    frame = new JFrame();\n    frame.setBounds(100, 100, 617, 560);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    Integer[] derp = {1, 2, 3};\n\n    JButton btnB = new JButton(\"Herro\");\n    btnB.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent arg0) {}\n        });\n    btnB.setAction(action);\n\n    JButton btnB_1 = new JButton(\"B 2\");\n    btnB_1.setAction(action_2);\n\n    JPanel panel = new JPanel();\n    panel.setBackground(Color.LIGHT_GRAY);\n\n    slidingPanel = new SlidingPanel();\n    slidingPanel.setBackground(Color.ORANGE);\n    JButton btnD = new JButton(\"D 1\");\n\n    JButton btnD_1 = new JButton(\"D 2\");\n\n    JButton btnD_2 = new JButton(\"D 3\");\n    GroupLayout gl_slidingPanel = new GroupLayout(slidingPanel);\n    gl_slidingPanel.setHorizontalGroup(\n        gl_slidingPanel\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                gl_slidingPanel\n                    .createSequentialGroup()\n                    .addContainerGap()\n                    .addGroup(\n                        gl_slidingPanel\n                            .createParallelGroup(Alignment.LEADING)\n                            .addGroup(\n                                gl_slidingPanel\n                                    .createSequentialGroup()\n                                    .addComponent(btnD)\n                                    .addPreferredGap(ComponentPlacement.RELATED)\n                                    .addComponent(btnD_2))\n                            .addComponent(btnD_1))\n                    .addContainerGap(280, Short.MAX_VALUE)));\n    gl_slidingPanel.setVerticalGroup(\n        gl_slidingPanel\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                gl_slidingPanel\n                    .createSequentialGroup()\n                    .addContainerGap()\n                    .addGroup(\n                        gl_slidingPanel\n                            .createParallelGroup(Alignment.BASELINE)\n                            .addComponent(btnD)\n                            .addComponent(btnD_2))\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(btnD_1)\n                    .addContainerGap(50, Short.MAX_VALUE)));\n    slidingPanel.setLayout(gl_slidingPanel);\n\n    JButton btnA = new JButton(\"A 1\");\n\n    JButton btnA_1 = new JButton(\"A 2\");\n\n    lblAmount = new JLabel(\"amount\");\n    JLabel lblTotal = new JLabel(\"Total:\");\n\n    dnmclblHerro = new DynamicLabel(1200);\n    GroupLayout gl_panel = new GroupLayout(panel);\n    gl_panel.setHorizontalGroup(\n        gl_panel\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                gl_panel\n                    .createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(btnA)\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(btnA_1)\n                    .addPreferredGap(ComponentPlacement.RELATED, 208, Short.MAX_VALUE)\n                    .addComponent(\n                        dnmclblHerro,\n                        GroupLayout.PREFERRED_SIZE,\n                        GroupLayout.DEFAULT_SIZE,\n                        GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(lblTotal)\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(lblAmount)\n                    .addContainerGap()));\n    gl_panel.setVerticalGroup(\n        gl_panel\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                gl_panel\n                    .createSequentialGroup()\n                    .addContainerGap()\n                    .addGroup(\n                        gl_panel\n                            .createParallelGroup(Alignment.LEADING)\n                            .addGroup(\n                                gl_panel\n                                    .createParallelGroup(Alignment.BASELINE)\n                                    .addComponent(btnA)\n                                    .addComponent(btnA_1))\n                            .addGroup(\n                                gl_panel\n                                    .createParallelGroup(Alignment.BASELINE)\n                                    .addComponent(lblAmount)\n                                    .addComponent(lblTotal)\n                                    .addComponent(\n                                        dnmclblHerro,\n                                        GroupLayout.PREFERRED_SIZE,\n                                        GroupLayout.DEFAULT_SIZE,\n                                        GroupLayout.PREFERRED_SIZE)))\n                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));\n    panel.setLayout(gl_panel);\n\n    searchScrollPane = new SearchScrollPane(this);\n\n    favouritesScrollPane = new FavouritesScrollPane(this);\n    GroupLayout groupLayout = new GroupLayout(frame.getContentPane());\n    groupLayout.setHorizontalGroup(\n        groupLayout\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                groupLayout\n                    .createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(btnB)\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(btnB_1)\n                    .addGap(506))\n            .addComponent(slidingPanel, GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)\n            .addComponent(panel, GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)\n            .addGroup(\n                groupLayout\n                    .createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(\n                        searchScrollPane,\n                        GroupLayout.PREFERRED_SIZE,\n                        473,\n                        GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(\n                        favouritesScrollPane, GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)\n                    .addContainerGap()));\n    groupLayout.setVerticalGroup(\n        groupLayout\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                groupLayout\n                    .createSequentialGroup()\n                    .addComponent(panel, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(\n                        slidingPanel, GroupLayout.PREFERRED_SIZE, 79, GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(ComponentPlacement.UNRELATED)\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.LEADING)\n                            .addComponent(\n                                favouritesScrollPane,\n                                GroupLayout.DEFAULT_SIZE,\n                                334,\n                                Short.MAX_VALUE)\n                            .addComponent(\n                                searchScrollPane, GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE))\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.BASELINE)\n                            .addComponent(btnB)\n                            .addComponent(btnB_1))\n                    .addContainerGap()));\n    // slidingPanel.changeState();\n    frame.getContentPane().setLayout(groupLayout);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3370, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [370], "initializationEnd": [382], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [388], "configurationEnd": [440], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 666, "focalAPIEnd": 688, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(SceneCanvas)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [666, 732, 750], "useEnd": [700, 744, 772], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kayahr/threedee/tree/master/threedee-demos/src/main/java/de/ailis/threedee/demo/AssetDemo.java", "rawCode": "  /**\n   * Main method.\n   *\n   * @param args Command line arguments\n   * @throws IOException When IO error occurs\n   */\n  public static void main(final String args[]) throws IOException {\n    // Create the assets library\n    final Assets assets = new Assets(new ClasspathAssetProvider());\n    assets.addAssets(\"duck\");\n\n    // Create the frame\n    final JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Create the canvas component displaying the scene\n    final SceneCanvas canvas = new SceneCanvas();\n    canvas.setScene(assets.getScenes().iterator().next());\n    canvas.setPreferredSize(new Dimension(640, 480));\n    frame.getContentPane().add(canvas);\n\n    // Display the frame\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3371, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [63], "initializationEnd": [343], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [367], "configurationEnd": [415], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 421, "focalAPIEnd": 439, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.getContentPane()", "property.add(JLabel,GridBagConstraints)", "jFrame.getContentPane()", "property.add(JPanel,*)", "jFrame.pack()", "jFrame.show()"], "useStart": [421, 475, 475, 2941, 2941, 2992, 3006], "useEnd": [469, 493, 546, 2959, 2986, 3000, 3014], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/src/share/demo/java2d/J2DBench/src/j2dbench/J2DBench.java", "rawCode": "  public static void startGUI() {\n    final JFrame f =\n        new JFrame(\"J2DBench\") {\n          public Dimension getPreferredSize() {\n            Dimension pref = super.getPreferredSize();\n            pref.width = Math.max(pref.width, 800);\n            pref.height = Math.max(pref.height, 600);\n            return pref;\n          }\n        };\n    guiFrame = f;\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.getContentPane().setLayout(new BorderLayout());\n    f.getContentPane().add(Group.root.getJComponent(), BorderLayout.CENTER);\n    JPanel p = new JPanel();\n    p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));\n    JButton b = new JButton(\"Run Tests...\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            if (!saveOrDiscardLastResults()) {\n              return;\n            }\n            if (verbose.isEnabled()) {\n              System.out.println(e);\n              System.out.println(\"running tests...\");\n            }\n            new Thread(\n                    new Runnable() {\n                      public void run() {\n                        runTests(true);\n                      }\n                    })\n                .start();\n            if (verbose.isEnabled()) {\n              System.out.println(\"done\");\n            }\n          }\n        });\n    p.add(b);\n\n    b = new JButton(\"Load Options\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            JFileChooser fc = getFileChooser();\n            int ret = fc.showOpenDialog(f);\n            if (ret == JFileChooser.APPROVE_OPTION) {\n              String reason = loadOptions(fc.getSelectedFile());\n              if (reason != null) {\n                System.err.println(reason);\n              }\n            }\n          }\n        });\n    p.add(b);\n\n    b = new JButton(\"Save Options\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            JFileChooser fc = getFileChooser();\n            int ret = fc.showSaveDialog(f);\n            if (ret == JFileChooser.APPROVE_OPTION) {\n              String reason = saveOptions(fc.getSelectedFile());\n              if (reason != null) {\n                System.err.println(reason);\n              }\n            }\n          }\n        });\n    p.add(b);\n\n    b = new JButton(\"Save Results\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            if (saveResults()) {\n              lastResults = null;\n            }\n          }\n        });\n    p.add(b);\n\n    b = new JButton(\"Quit\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            if (!saveOrDiscardLastResults()) {\n              return;\n            }\n            System.exit(0);\n          }\n        });\n    p.add(b);\n\n    f.getContentPane().add(p, BorderLayout.SOUTH);\n    f.pack();\n    f.show();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3372, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [85], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [110], "configurationEnd": [170], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 176, "focalAPIEnd": 203, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [176, 243, 266], "useEnd": [237, 260, 293], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dawoodamr/Java-SNePS/tree/master/Java SNePS/src/snepsui/Commands/cmdFullDescribe.java", "rawCode": "  private void buildButtonActionPerformed(ActionEvent evt) {\n    JFrame popupFrame = new JFrame(\"Build\");\n    popupFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    popupFrame.getContentPane().add(new cmdBuild(network, frame));\n    popupFrame.pack();\n    popupFrame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3373, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [708], "initializationEnd": [756], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 675, "tryExpressionEnd": 679, "tryBlockStart": 675, "tryBlockEnd": 997, "catchExpressionStart": 937, "catchExpressionEnd": 963, "catchBlockStart": 937, "catchBlockEnd": 997, "exceptionHandlingCallStart": [971], "exceptionHandlingCallEnd": [990], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 825, "focalAPIEnd": 847, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JLabel,GridBagConstraints)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [825, 887, 907], "useEnd": [879, 899, 929], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jkiddo/jolivia/tree/master/jolivia.example/src/test/java/test/Noop.java", "rawCode": "  public void hiresResponse() throws Exception {\n    final String requestBase = String.format(\"http://%s:%d\", \"192.168.1.26\", 5000);\n    final String url =\n        String.format(\n            \"%s/databases/1/items?session-id=1101478641&meta=dpap.hires,dmap.itemid,dpap.filedata&query=('dmap.itemid:1024','dmap.itemid:1025')\",\n            requestBase);\n    final DatabaseItems di = RequestHelper.requestParsed(url);\n    final ListingItem item = di.getListing().getListingItems().iterator().next();\n    final byte[] data = item.getSpecificChunk(FileData.class).getValue();\n\n    final BufferedImage image = ImageIO.read(new ByteArrayInputStream(data));\n\n    // Debugging ...\n    try {\n      final JFrame frame = new JFrame(\"Image loaded from ImageInputStream\");\n      final JLabel label = new JLabel(new ImageIcon(image));\n      frame.getContentPane().add(label, BorderLayout.CENTER);\n      frame.pack();\n      frame.setVisible(true);\n    } catch (final Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3374, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [105], "initializationEnd": [123], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 209, "focalAPIEnd": 231, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(LabelValue,*)", "jFrame.pack()", "jFrame.setVisible(boolean)", "jFrame.addWindowListener(WindowListener)"], "useStart": [209, 266, 284, 312], "useEnd": [260, 278, 306, 361], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/jsky/src/main/jsky/util/gui/LabelValue.java", "rawCode": "  /** test main: usage: java LabelValue */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Test\");\n    LabelValue lv = new LabelValue(\"test\", \"failed\");\n    lv.setText(\"passed\");\n    frame.getContentPane().add(lv, BorderLayout.CENTER);\n    frame.pack();\n    frame.setVisible(true);\n    frame.addWindowListener(new BasicWindowMonitor());\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3375, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [90], "initializationEnd": [102], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setIconImage(Image)", "jFrame.setTitle(String)", "jFrame.setBounds(int,int,int,int)", "jFrame.setMinimumSize(Dimension)"], "configurationStart": [108, 166, 289, 332, 375], "configurationEnd": [160, 283, 326, 369, 420], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 426, "focalAPIEnd": 448, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.getContentPane()", "property.add(JPanel,*)"], "useStart": [426, 668, 668], "useEnd": [482, 690, 726], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jrsaunde/PathDrop/tree/master/src/gui/Gui_Redo.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initialize() {\n\n    frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setIconImage(\n        Toolkit.getDefaultToolkit().getImage(Gui_Redo.class.getResource(\"/img/cisco_small.png\")));\n    frame.setTitle(\"Pinpoint PacketLoss\");\n    frame.setBounds(100, 100, 1400, 1000);\n    frame.setMinimumSize(new Dimension(800, 800));\n    frame.getContentPane().setLayout(new BorderLayout(0, 0));\n\n    JPanel inputpanel = new JPanel();\n    inputpanel.setBackground(new Color(57, 83, 139));\n    inputpanel.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));\n    frame.getContentPane().add(inputpanel, BorderLayout.NORTH);\n\n    try {\n      BufferedImage image = ImageIO.read(Gui_Redo.class.getResource(\"/img/cisco_small.png\"));\n      GridBagLayout gbl_inputpanel = new GridBagLayout();\n      gbl_inputpanel.columnWidths =\n          new int[] {80, 80, 100, 55, 116, 78, 116, 67, 116, 90, 116, 0, 61, 0};\n      gbl_inputpanel.rowHeights = new int[] {67, 0, 0};\n      gbl_inputpanel.columnWeights =\n          new double[] {\n            1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE\n          };\n      gbl_inputpanel.rowWeights = new double[] {0.0, 0.0, Double.MIN_VALUE};\n      inputpanel.setLayout(gbl_inputpanel);\n      JLabel lblNewLabel_8 = new JLabel(new ImageIcon(image));\n      GridBagConstraints gbc_lblNewLabel_8 = new GridBagConstraints();\n      gbc_lblNewLabel_8.ipadx = 25;\n      gbc_lblNewLabel_8.anchor = GridBagConstraints.NORTHWEST;\n      gbc_lblNewLabel_8.insets = new Insets(0, 0, 5, 5);\n      gbc_lblNewLabel_8.gridx = 0;\n      gbc_lblNewLabel_8.gridy = 0;\n      inputpanel.add(lblNewLabel_8, gbc_lblNewLabel_8);\n\n      InputLabel sourceIPLabel = new InputLabel(\"Source IP\");\n      sourceIPLabel.setHorizontalAlignment(SwingConstants.CENTER);\n      GridBagConstraints gbc_lblNewLabel = new GridBagConstraints();\n      gbc_lblNewLabel.anchor = GridBagConstraints.WEST;\n      gbc_lblNewLabel.insets = new Insets(0, 0, 5, 5);\n      gbc_lblNewLabel.gridx = 1;\n      gbc_lblNewLabel.gridy = 0;\n      inputpanel.add(sourceIPLabel, gbc_lblNewLabel);\n\n      InputField sourceIPInput = new InputField();\n      GridBagConstraints gbc_txtXxxx = new GridBagConstraints();\n      gbc_txtXxxx.fill = GridBagConstraints.HORIZONTAL;\n      gbc_txtXxxx.anchor = GridBagConstraints.WEST;\n      gbc_txtXxxx.insets = new Insets(0, 0, 5, 5);\n      gbc_txtXxxx.gridx = 2;\n      gbc_txtXxxx.gridy = 0;\n      inputpanel.add(sourceIPInput, gbc_txtXxxx);\n      sourceIPInput.setColumns(11);\n\n      InputLabel destinationIPLabel = new InputLabel(\"Destination IP\");\n      GridBagConstraints gbc_lblNewLabel_1 = new GridBagConstraints();\n      gbc_lblNewLabel_1.anchor = GridBagConstraints.WEST;\n      gbc_lblNewLabel_1.insets = new Insets(0, 0, 5, 5);\n      gbc_lblNewLabel_1.gridx = 3;\n      gbc_lblNewLabel_1.gridy = 0;\n      inputpanel.add(destinationIPLabel, gbc_lblNewLabel_1);\n\n      InputField destIPInput = new InputField();\n      GridBagConstraints gbc_textField_1 = new GridBagConstraints();\n      gbc_textField_1.fill = GridBagConstraints.HORIZONTAL;\n      gbc_textField_1.anchor = GridBagConstraints.WEST;\n      gbc_textField_1.insets = new Insets(0, 0, 5, 5);\n      gbc_textField_1.gridx = 4;\n      gbc_textField_1.gridy = 0;\n      inputpanel.add(destIPInput, gbc_textField_1);\n      destIPInput.setColumns(10);\n\n      InputLabel sourcePortLabel = new InputLabel(\"Source Port\");\n      GridBagConstraints gbc_lblNewLabel_5 = new GridBagConstraints();\n      gbc_lblNewLabel_5.anchor = GridBagConstraints.WEST;\n      gbc_lblNewLabel_5.insets = new Insets(0, 0, 5, 5);\n      gbc_lblNewLabel_5.gridx = 5;\n      gbc_lblNewLabel_5.gridy = 0;\n      inputpanel.add(sourcePortLabel, gbc_lblNewLabel_5);\n\n      InputField sourcePortInput = new InputField();\n      GridBagConstraints gbc_textField_2 = new GridBagConstraints();\n      gbc_textField_2.fill = GridBagConstraints.HORIZONTAL;\n      gbc_textField_2.anchor = GridBagConstraints.WEST;\n      gbc_textField_2.insets = new Insets(0, 0, 5, 5);\n      gbc_textField_2.gridx = 6;\n      gbc_textField_2.gridy = 0;\n      inputpanel.add(sourcePortInput, gbc_textField_2);\n      sourcePortInput.setColumns(10);\n\n      InputLabel destinationPortLabel = new InputLabel(\"Destination Port\");\n      GridBagConstraints gbc_lblNewLabel_6 = new GridBagConstraints();\n      gbc_lblNewLabel_6.anchor = GridBagConstraints.WEST;\n      gbc_lblNewLabel_6.insets = new Insets(0, 0, 5, 5);\n      gbc_lblNewLabel_6.gridx = 7;\n      gbc_lblNewLabel_6.gridy = 0;\n      inputpanel.add(destinationPortLabel, gbc_lblNewLabel_6);\n\n      InputField destPortInput = new InputField();\n      GridBagConstraints gbc_textField_3 = new GridBagConstraints();\n      gbc_textField_3.fill = GridBagConstraints.HORIZONTAL;\n      gbc_textField_3.anchor = GridBagConstraints.WEST;\n      gbc_textField_3.insets = new Insets(0, 0, 5, 5);\n      gbc_textField_3.gridx = 8;\n      gbc_textField_3.gridy = 0;\n      inputpanel.add(destPortInput, gbc_textField_3);\n      destPortInput.setColumns(10);\n\n      JToggleButton tglbtnNewToggleButton = new JToggleButton(\"Start\");\n      GridBagConstraints gbc_tglbtnNewToggleButton = new GridBagConstraints();\n      gbc_tglbtnNewToggleButton.insets = new Insets(0, 0, 5, 5);\n      gbc_tglbtnNewToggleButton.anchor = GridBagConstraints.WEST;\n      gbc_tglbtnNewToggleButton.gridx = 11;\n      gbc_tglbtnNewToggleButton.gridy = 0;\n      inputpanel.add(tglbtnNewToggleButton, gbc_tglbtnNewToggleButton);\n\n      JComboBox comboBox = new JComboBox();\n      comboBox.setModel(new DefaultComboBoxModel(new String[] {\"TCP\", \"UDP\", \"Custom\"}));\n      GridBagConstraints gbc_comboBox = new GridBagConstraints();\n      gbc_comboBox.insets = new Insets(0, 0, 5, 5);\n      gbc_comboBox.fill = GridBagConstraints.HORIZONTAL;\n      gbc_comboBox.gridx = 10;\n      gbc_comboBox.gridy = 0;\n      inputpanel.add(comboBox, gbc_comboBox);\n\n      JLabel protocolLabel = new JLabel(\"Protocol\");\n      protocolLabel.setForeground(Color.WHITE);\n      protocolLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 13));\n      GridBagConstraints gbc_protocolLabel = new GridBagConstraints();\n      gbc_protocolLabel.insets = new Insets(0, 0, 5, 0);\n      gbc_protocolLabel.gridx = 9;\n      gbc_protocolLabel.gridy = 0;\n      inputpanel.add(protocolLabel, gbc_protocolLabel);\n    } catch (IOException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3376, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [40], "initializationEnd": [63], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 299, "focalAPIEnd": 321, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(*,JPanel)", "jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [299, 382, 411], "useEnd": [353, 405, 433], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/0xfe/experiments/tree/master/java/EasyChatClient.java", "rawCode": "  public void go() {\n    JFrame frame = new JFrame(\"Easy Chat\");\n    JPanel panel = new JPanel();\n\n    outgoing = new JTextField(20);\n\n    JButton sendButton = new JButton(\"Send\");\n    sendButton.addActionListener(new SendButtonListener());\n\n    panel.add(outgoing);\n    panel.add(sendButton);\n\n    frame.getContentPane().add(BorderLayout.CENTER, panel);\n    setupNetworking();\n    frame.setSize(400, 500);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3377, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 45, "focalAPIEnd": 67, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.getContentPane()", "property.add(JLabel,GridBagConstraints)", "new FrameCloseExit(jFrame)", "jFrame.addWindowListener(WindowListener)"], "useStart": [45, 103, 103, 186, 162], "useEnd": [97, 125, 156, 211, 212], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/caadapter/tree/master/software/dvts/src/java/gov/nih/nci/caadapter/dvts/common/validation/xml/complement/XSDValidationTreeBrowser.java", "rawCode": "  public JFrame setFrame(JFrame frame) {\n    frame.getContentPane().setLayout(new BorderLayout());\n    frame.getContentPane().add(this, BorderLayout.CENTER);\n    frame.addWindowListener(new FrameCloseExit(frame));\n    return frame;\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3378, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [199], "initializationEnd": [221], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setVisible(boolean)", "jFrame.setLocationRelativeTo(Window)", "jFrame.setDefaultCloseOperation(int)", "jFrame.add(JPanel)"], "configurationStart": [227, 297, 340, 462], "configurationEnd": [253, 334, 399, 486], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 493, "focalAPIEnd": 519, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel,*)", "jFrame.getPreferredSize()", "jFrame.setSize(Dimension)", "jFrame.getPreferredSize()", "jFrame.getPreferredSize()", "centerWindow(int,int,jFrame)"], "useStart": [493, 2062, 2044, 2110, 2163, 2203], "useEnd": [554, 2090, 2091, 2138, 2191, 2241], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/propra12-orga/gruppe27/tree/master/src/de/hhu/propra12/gruppe27/bomberman/gui/menue/LosetheGame.java", "rawCode": "  /**\n   * Einblendung von \"Verloren\", \"Noch einmal\" und \"Zurueck zum Startmenue\" Jeweilige Buttons werden\n   * benannt und erstellt\n   */\n  public void losethegame() {\n\n    final JFrame framelose = new JFrame(\"Verloren\");\n    framelose.setVisible(true);\n    // framelose.setResizable(false);\n    framelose.setLocationRelativeTo(null);\n    framelose.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n    JPanel panellose = new JPanel(new GridBagLayout());\n    framelose.add(panellose);\n\n    framelose.getContentPane().add(panellose, BorderLayout.SOUTH);\n    GridBagConstraints c = new GridBagConstraints();\n\n    c.gridx = 0;\n    c.gridy = 0;\n\n    JButton buttonL0 = new JButton(loseicon);\n    c.gridx = 0;\n    c.gridy = 1;\n    // c.gridwidth = 2;\n    c.fill = GridBagConstraints.HORIZONTAL;\n    c.weightx = 2.0;\n    panellose.add(buttonL0, c);\n\n    JButton buttonL1 = new JButton(\"Noch einmal!\");\n    c.gridx = 0;\n    c.gridy = 2;\n    // c.gridwidth = 2;\n    if (system.getboolLAN() == false) {\n      panellose.add(buttonL1, c);\n    }\n\n    /**\n     * Ausgabe des Highscores, Schritte die man bis zum Spielende machen konnte Anzahl der Schritte\n     * die der Gegner bis zu deinem Tod gemacht hat\n     */\n    JButton buttonL2 = new JButton(\"Zurück zum Startmenue\");\n    c.gridx = 0;\n    c.gridy = 3;\n    // c.gridwidth = 2;\n    panellose.add(buttonL2, c);\n\n    if (system.getamplayer() == 1) {\n      JButton buttonScore =\n          new JButton(\n              \"Bis zu deinem Freitod hast du dich \" + system.getHighscoreP1() + \" Schritte bewegt\");\n      c.gridx = 0;\n      c.gridy = 4;\n      // c.gridwidth = 2;\n      panellose.add(buttonScore, c);\n    } else if (system.getboolLAN()) {\n      JButton buttonScore =\n          new JButton(\n              \"Dein Gegner hat dich innerhalb von \"\n                  + system.getHighscoreP2()\n                  + \" Schritte vernichtet\");\n      c.gridx = 0;\n      c.gridy = 4;\n      // c.gridwidth = 2;\n      panellose.add(buttonScore, c);\n    }\n\n    /** ActionListener fuer Button1 wird definiert */\n    framelose.setSize(framelose.getPreferredSize());\n    int height = framelose.getPreferredSize().height;\n    int width = framelose.getPreferredSize().width;\n    centerWindow(width, height, framelose);\n\n    buttonL1.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            GameWindow s = new GameWindow(0);\n            framelose.dispose();\n          }\n        });\n\n    /** Action Listener fuer Button 2 wird definiert */\n    buttonL2.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            Startmenue start = new Startmenue();\n            start.menueaufruf();\n\n            framelose.dispose();\n          }\n        });\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3379, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [86], "initializationEnd": [106], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [112], "configurationEnd": [172], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 178, "focalAPIEnd": 205, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [178, 246, 269], "useEnd": [240, 263, 296], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dawoodamr/Java-SNePS/tree/master/Java SNePS/src/snepsui/Commands/cmdFullDescribe.java", "rawCode": "  private void assertButtonActionPerformed(ActionEvent evt) {\n    JFrame popupFrame = new JFrame(\"Assert\");\n    popupFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    popupFrame.getContentPane().add(new cmdAssert(network, frame));\n    popupFrame.pack();\n    popupFrame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3380, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [251], "initializationEnd": [263], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 162, "tryExpressionEnd": 166, "tryBlockStart": 162, "tryBlockEnd": 512, "catchExpressionStart": 458, "catchExpressionEnd": 478, "catchBlockStart": 458, "catchBlockEnd": 512, "exceptionHandlingCallStart": [486], "exceptionHandlingCallEnd": [505], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 271, "focalAPIEnd": 294, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ComponentPresetEditor(jFrame)", "property.add(JPanel)", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [299, 271, 341, 406, 427], "useEnd": [332, 333, 398, 419, 450], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openrocket/openrocket/tree/master/swing/src/net/sf/openrocket/utils/ComponentPresetEditor.java", "rawCode": "  /** Launch the test main. */\n  public static void main(String[] args) {\n    BasicApplication app = new BasicApplication();\n    app.initializeApplication();\n    try {\n      // Application.setPreferences(new SwingPreferences());\n      JFrame dialog = new JFrame();\n      dialog.getContentPane().add(new ComponentPresetEditor(dialog));\n      dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n      dialog.pack();\n      dialog.setVisible(true);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3381, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [397], "initializationEnd": [409], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setTitle(String)", "jFrame.setBounds(int,int,int,int)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [415, 456, 504], "configurationEnd": [450, 498, 563], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 569, "focalAPIEnd": 598, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.setLocation(int,int)", "new Login(jFrame,*)", "jFrame.getContentPane()", "property.add(JPanel,String)", "new LessonsTab(jFrame)"], "useStart": [569, 951, 1006, 1116, 1116, 9413], "useEnd": [630, 981, 1035, 1145, 1183, 9441], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hhrosvick/Robo-Teach/tree/master/seng403/src/gui/RoboTeach.java", "rawCode": "  public void initialize() {\n    /**\n     * ***************************************************************************************************************************************\n     * Main Page initialization and components\n     * ***************************************************************************************************************************************\n     */\n    frmRoboteach = new JFrame();\n    frmRoboteach.setTitle(\"Robo-Teach\");\n    frmRoboteach.setBounds(100, 100, 800, 600);\n    frmRoboteach.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frmRoboteach.getContentPane().setLayout(new CardLayout(0, 0));\n\n    // get size of the screen\n    Toolkit toolkit = Toolkit.getDefaultToolkit();\n    Dimension screenSize = toolkit.getScreenSize();\n\n    // TO SHOW THE WINDOW IN THE CENTER OF THE SCREEN\n    int x = (screenSize.width - frmRoboteach.getWidth()) / 2;\n    int y = (screenSize.height - frmRoboteach.getHeight()) / 2;\n    frmRoboteach.setLocation(x, y);\n\n    // USER LOGIN\n    new Login(frmRoboteach, this);\n\n    // Creating the base panel\n    final JPanel BasePanel = new JPanel();\n    frmRoboteach.getContentPane().add(BasePanel, \"name_20408249708069\");\n    BasePanel.setLayout(new CardLayout(0, 0));\n\n    // Data needed for resizing\n    JPanel TitlePage = new JPanel();\n    BasePanel.add(TitlePage, \"TitlePage\");\n    TitlePage.setLayout(\n        new FormLayout(\n            new ColumnSpec[] {\n              FormFactory.RELATED_GAP_COLSPEC,\n              ColumnSpec.decode(\"default:grow\"),\n              FormFactory.RELATED_GAP_COLSPEC,\n              FormFactory.DEFAULT_COLSPEC,\n              FormFactory.RELATED_GAP_COLSPEC,\n              FormFactory.DEFAULT_COLSPEC,\n              FormFactory.RELATED_GAP_COLSPEC,\n              FormFactory.DEFAULT_COLSPEC,\n              FormFactory.RELATED_GAP_COLSPEC,\n              FormFactory.DEFAULT_COLSPEC,\n              FormFactory.RELATED_GAP_COLSPEC,\n              FormFactory.DEFAULT_COLSPEC,\n              FormFactory.RELATED_GAP_COLSPEC,\n              ColumnSpec.decode(\"default:grow\"),\n              FormFactory.RELATED_GAP_COLSPEC,\n              FormFactory.DEFAULT_COLSPEC,\n              FormFactory.RELATED_GAP_COLSPEC,\n              FormFactory.DEFAULT_COLSPEC,\n              FormFactory.RELATED_GAP_COLSPEC,\n              FormFactory.DEFAULT_COLSPEC,\n              FormFactory.RELATED_GAP_COLSPEC,\n              FormFactory.DEFAULT_COLSPEC,\n              FormFactory.RELATED_GAP_COLSPEC,\n              FormFactory.DEFAULT_COLSPEC,\n              FormFactory.RELATED_GAP_COLSPEC,\n              FormFactory.DEFAULT_COLSPEC,\n            },\n            new RowSpec[] {\n              FormFactory.RELATED_GAP_ROWSPEC,\n              RowSpec.decode(\"bottom:default:grow\"),\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              RowSpec.decode(\"default:grow\"),\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n            }));\n\n    /**\n     * ***************************************************************************************************************************************\n     * TitlePage initialization and components\n     * ***************************************************************************************************************************************\n     */\n\n    // Title screen picture, add picture to folder and change file name here\n    String imgStr = \"Pictures/TitlePicture.png\";\n    ImageIcon TitlePicture = new ImageIcon(imgStr);\n\n    // Creating the picture panel\n    Panel TitleLabelPanel = new Panel();\n    TitlePage.add(TitleLabelPanel, \"2, 2, 25, 9, fill, fill\");\n    TitleLabelPanel.setLayout(new BorderLayout(0, 0));\n    JLabel TitleLabel = new JLabel(\" \", TitlePicture, JLabel.CENTER);\n\n    // Creating the button panel\n    JPanel TitleButtonPanel = new JPanel();\n    TitlePage.add(TitleButtonPanel, \"2, 12, 25, 3, fill, fill\");\n    TitleButtonPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));\n\n    // Start Button Activity\n    JButton StartButton = new JButton(\"Start\");\n    StartButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent arg0) {\n            ((CardLayout) BasePanel.getLayout()).show(BasePanel, \"TabPage\");\n          }\n        });\n\n    // User Manual Button Activity\n    JButton UserManualButton = new JButton(\"User Manual\");\n    UserManualButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            UserManualWindow newWindow = new UserManualWindow(api);\n            newWindow.OpenWindow();\n          }\n        });\n\n    // Put everything onto the title panel\n    TitleButtonPanel.add(StartButton);\n    TitleLabelPanel.add(TitleLabel);\n    TitleButtonPanel.add(UserManualButton);\n\n    /**\n     * ***************************************************************************************************************************************\n     * TitlePage initialization and components\n     * ***************************************************************************************************************************************\n     */\n    JTabbedPane TabPage = new JTabbedPane(JTabbedPane.TOP);\n    BasePanel.add(TabPage, \"TabPage\");\n\n    JPanel WelcomeTab = new JPanel();\n    TabPage.addTab(\"Welcome\", null, WelcomeTab, null);\n    WelcomeTab.setLayout(\n        new FormLayout(\n            new ColumnSpec[] {\n              FormFactory.RELATED_GAP_COLSPEC,\n              FormFactory.DEFAULT_COLSPEC,\n              FormFactory.RELATED_GAP_COLSPEC,\n              ColumnSpec.decode(\"default:grow\"),\n            },\n            new RowSpec[] {\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              FormFactory.DEFAULT_ROWSPEC,\n              FormFactory.RELATED_GAP_ROWSPEC,\n              RowSpec.decode(\"default:grow\"),\n            }));\n\n    String imgStr2 = \"Pictures/WelcomePicture.png\";\n    final ImageIcon WelcomePicture = new ImageIcon(imgStr2);\n    String imgStr3 = \"Pictures/GettingStartedPicture.png\";\n    final ImageIcon GettingStartedPicture = new ImageIcon(imgStr3);\n\n    JScrollPane scrollPane = new JScrollPane();\n    WelcomeTab.add(scrollPane, \"4, 2, 1, 31, fill, fill\");\n\n    final JLabel WelcomeLabel = new JLabel(\" \", WelcomePicture, JLabel.CENTER);\n    WelcomeLabel.setOpaque(true);\n    Color white = new Color(255, 255, 255);\n    WelcomeLabel.setBackground(white);\n    scrollPane.setViewportView(WelcomeLabel);\n\n    JButton WelcomeButton = new JButton(\"Welcome\");\n    WelcomeButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent arg0) {\n            WelcomeLabel.setIcon(WelcomePicture);\n          }\n        });\n    WelcomeTab.add(WelcomeButton, \"2, 2\");\n\n    JButton GettingStartedButton = new JButton(\"Getting Started\");\n    GettingStartedButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            WelcomeLabel.setIcon(GettingStartedPicture);\n          }\n        });\n    WelcomeTab.add(GettingStartedButton, \"2, 4\");\n\n    JButton BackToTitleButton = new JButton(\"Back to Title\");\n    BackToTitleButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            ((CardLayout) BasePanel.getLayout()).show(BasePanel, \"TitlePage\");\n          }\n        });\n    WelcomeTab.add(BackToTitleButton, \"2, 6\");\n\n    /**\n     * ***************************************************************************************************************************************\n     * LessonsTab initialization and components\n     * ****************************************************************************************************************************************\n     */\n    JPanel LessonsTab1;\n    LessonsTab newLessonsTab = new LessonsTab(frmRoboteach);\n    LessonsTab1 = newLessonsTab.initialize();\n    TabPage.addTab(\"Lessons\", null, LessonsTab1, null);\n\n    /**\n     * ***************************************************************************************************************************************\n     * ProgramTab initialization and components\n     * ****************************************************************************************************************************************\n     */\n    JPanel ProgramTab1;\n    ProgramTab newTab = new ProgramTab();\n    ProgramTab1 = newTab.initialize();\n    TabPage.addTab(\"Program\", null, ProgramTab1, null);\n\n    /**\n     * ***************************************************************************************************************************************\n     * ChallengeTab initialization and components\n     * ****************************************************************************************************************************************\n     */\n    JPanel ChallengeTab1;\n    ChallengesTab newChallengeTab = new ChallengesTab();\n    ChallengeTab1 = newChallengeTab.initialize();\n    TabPage.addTab(\"Challenges\", null, ChallengeTab1, null);\n\n    /**\n     * ***************************************************************************************************************************************\n     * ChallengeTab initialization and components\n     * ****************************************************************************************************************************************\n     */\n    JPanel GradesTab1;\n    GradesTab newGradesTab = new GradesTab();\n    GradesTab1 = newGradesTab.initialize();\n    TabPage.addTab(\"Progress\", null, GradesTab1, null);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3382, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [76], "initializationEnd": [88], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 94, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setJMenuBar(JMenuBar)", "jFrame.setSize(int,int)"], "useStart": [94, 132, 190, 222], "useEnd": [126, 184, 216, 245], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/niklas88/OsmUi/tree/master/jgraphx/examples/com/mxgraph/examples/swing/editor/BasicGraphEditor.java", "rawCode": "  /** */\n  public JFrame createFrame(JMenuBar menuBar) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(this);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setJMenuBar(menuBar);\n    frame.setSize(870, 640);\n\n    // Updates the frame title\n    updateTitle();\n\n    return frame;\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3383, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [79], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)"], "configurationStart": [130], "configurationEnd": [161], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 167, "focalAPIEnd": 187, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [167, 221, 247], "useEnd": [215, 241, 297], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mkovatsc/SmartAppContiki/tree/master/examples/z1/rssi_scanner/ViewRSSI.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    JFrame win = new JFrame(\"RSSI Viewer\");\n    ViewRSSI panel;\n    win.setBounds(10, 10, 590, 590);\n    win.getContentPane().add(panel = new ViewRSSI());\n    win.setVisible(true);\n    win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    panel.handleInput();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3384, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [62], "initializationEnd": [87], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 93, "focalAPIEnd": 115, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setSize(Dimension)", "jFrame.setVisible(boolean)"], "useStart": [93, 146, 190], "useEnd": [140, 184, 212], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/and146/SPLAT-ARI/tree/master/jaiutil/src/testcases/uk/ac/starlink/jaiutil/JAIHelloWorld.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Hello World\");\n    frame.getContentPane().add(new JAIHelloWorld());\n    frame.setSize(new Dimension(200, 200));\n    frame.setVisible(true);\n    try {\n      Thread.currentThread().sleep(1000);\n    } catch (InterruptedException ex) {\n      // no action\n    }\n    System.exit(0);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3385, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [480], "initializationEnd": [1664], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.addWindowListener(WindowListener)", "jFrame.setSize(int,int)", "jFrame.setTitle(String)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setLocationRelativeTo(Window)"], "configurationStart": [1858, 1894, 1925, 2132, 2191], "configurationEnd": [1888, 1919, 2126, 2185, 2225], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 2309, "focalAPIEnd": 2332, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(OpRgafTab)", "jFrame.setVisible(boolean)"], "useStart": [2309, 2348], "useEnd": [2342, 2371], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi/tree/master/OpRgaf/src/opRgaf/OpRgaf.java", "rawCode": "  /** ***************** */\n  public JFrame getJFrame() {\n    try {\n      UIManager.setLookAndFeel(\"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\");\n    } catch (ClassNotFoundException e) {\n      e.printStackTrace();\n    } catch (InstantiationException e) {\n      e.printStackTrace();\n    } catch (IllegalAccessException e) {\n      e.printStackTrace();\n    } catch (UnsupportedLookAndFeelException e) {\n      e.printStackTrace();\n    }\n    thisClass = this;\n    jFrame =\n        new JFrame() {\n\n          /** */\n          private static final long serialVersionUID = 1L;\n\n          @Override\n          public void setVisible(final boolean visible) {\n\n            if (getState() != JFrame.NORMAL) {\n              setState(JFrame.NORMAL);\n            }\n\n            if (visible) {\n              // setDisposed(false);\n            }\n            if (!visible || !isVisible()) {\n              super.setVisible(visible);\n            }\n\n            if (visible) {\n              int state = super.getExtendedState();\n              state &= ~JFrame.ICONIFIED;\n              super.setExtendedState(state);\n              super.setAlwaysOnTop(true);\n              super.toFront();\n              super.requestFocus();\n              super.setAlwaysOnTop(false);\n            }\n          }\n\n          @Override\n          public void toFront() {\n            super.setVisible(true);\n            int state = super.getExtendedState();\n            state &= ~JFrame.ICONIFIED;\n            super.setExtendedState(state);\n            super.setAlwaysOnTop(true);\n            super.toFront();\n            super.requestFocus();\n            super.setAlwaysOnTop(false);\n          }\n        };\n\n    new InitHashMaps();\n\n    try {\n      rehaReverseServer = new RehaReverseServer(7000);\n    } catch (Exception ex) {\n      rehaReverseServer = null;\n    }\n    sqlInfo.setFrame(jFrame);\n    jFrame.addWindowListener(this);\n    jFrame.setSize(1000, 675);\n    jFrame.setTitle(\n        \"Thera-Pi Rezeptgebührrechnung/Ausfallrechnung/Mahnwesen [IK: \"\n            + aktIK\n            + \"] \"\n            + \"[Server-IP: \"\n            + dbIpAndName\n            + \"]\");\n    jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    jFrame.setLocationRelativeTo(null);\n    otab = new OpRgafTab();\n    otab.setHeader(0);\n    otab.setFirstFocus();\n\n    jFrame.getContentPane().add(otab);\n    jFrame.setVisible(true);\n    thisFrame = jFrame;\n    try {\n      new SocketClient()\n          .setzeRehaNachricht(\n              OpRgaf.rehaReversePort, \"AppName#OpRgaf#\" + Integer.toString(OpRgaf.xport));\n      new SocketClient()\n          .setzeRehaNachricht(OpRgaf.rehaReversePort, \"OpRgaf#\" + RehaIOMessages.IS_STARTET);\n    } catch (Exception ex) {\n      JOptionPane.showMessageDialog(null, \"Fehler in der Socketkommunikation\");\n    }\n    SwingUtilities.invokeLater(\n        new Runnable() {\n          public void run() {\n            otab.opRgafPanel.setzeFocus();\n          }\n        });\n    return jFrame;\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3386, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [783], "initializationEnd": [804], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 810, "focalAPIEnd": 832, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [810, 860, 878], "useEnd": [854, 872, 900], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytoscape/cytoscape2/tree/master/coreplugins/RFilters/src/main/java/filter/view/FilterView.java", "rawCode": "  /**\n   * DOCUMENT ME!\n   *\n   * @param args DOCUMENT ME!\n   */\n  public static void main(String[] args) {\n    if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n      try {\n        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n      } catch (Exception e) {\n        // TODO: Error handling.\n        System.err.println(\"Hey. Error loading L&F: on Windows\");\n\n        // TODO: REMOVE\n        // e.printStackTrace();\n      }\n    } else {\n      try {\n        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\");\n      } catch (Exception e) {\n        // TODO: Error handling.\n        System.err.println(\"Hey. Error loading L&F: on NOT Windows\");\n\n        // TODO: REMOVE\n        // e.printStackTrace();\n      }\n    }\n\n    JFrame frame = new JFrame(\"Filters\");\n    frame.getContentPane().add(new FilterView());\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3387, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [146], "initializationEnd": [195], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 201, "focalAPIEnd": 223, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(AggregateDemoHacks)", "jFrame.pack()", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [201, 237, 255, 313], "useEnd": [231, 249, 307, 335], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/picocontainer/picocontainer/tree/master/pico/gems/src/test/com/picocontainer/gems/monitors/prefuse/AggregateDemoHacks.java", "rawCode": "  public static JFrame demo(final Graph graph) throws IOException {\n    AggregateDemoHacks ad = new AggregateDemoHacks(graph);\n    JFrame frame = new JFrame(\"p r e f u s e | a g g r e g a t e d\");\n    frame.getContentPane().add(ad);\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n    return frame;\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3388, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [631], "initializationEnd": [643], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 664, "focalAPIEnd": 686, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(WheelInterface,*)", "property.add(Button,*)", "property.add(Button,*)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "jFrame.setLocation(int,int)", "jFrame.setVisible(boolean)"], "useStart": [692, 731, 773, 814, 872, 901, 934], "useEnd": [725, 767, 808, 866, 895, 928, 956], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/osate/examples/tree/master/codegen/stepper-motor/usercode-casestudy/WheelInterface.java", "rawCode": "  public static void main(String[] args) {\n    final WheelInterface demo = new WheelInterface();\n    Button btnStrat = new Button(\"Start\"), btnStop = new Button(\"Stop\");\n    btnStrat.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            demo.addIncrement(1);\n            demo.setVisible(true);\n            // demo.start();\n          }\n        });\n    btnStop.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            demo.stop();\n            demo.setVisible(false);\n          }\n        });\n    JFrame frame = new JFrame();\n    Container cp = frame.getContentPane();\n    cp.add(demo, BorderLayout.CENTER);\n    cp.add(btnStrat, BorderLayout.NORTH);\n    cp.add(btnStop, BorderLayout.SOUTH);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(500, 500);\n    frame.setLocation(500, 500);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3389, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [105], "initializationEnd": [138], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setLayout(GridLayout)"], "configurationStart": [145, 238], "configurationEnd": [203, 277], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 436, "focalAPIEnd": 464, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(Java2HtmlApplet,*)", "jFrame.setSize(int,int)", "jFrame.setVisible(boolean)", "jFrame.setResizable(boolean)"], "useStart": [436, 571, 735, 770], "useEnd": [499, 600, 763, 801], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/Javascool4/tree/master/dev/jvs4.5/trunk/dev/lib/jvs2html/src/de/java2html/Java2HtmlApplet.java", "rawCode": "  public static void main(String[] args) {\n    // Create frame to run applet in\n    JFrame appletFrame = new JFrame(\"Applet viewer frame\");\n\n    appletFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Setup layout manager\n    appletFrame.setLayout(new GridLayout());\n\n    // Create applet instanse (inset the name of your applet)\n    Java2HtmlApplet myApplet = new Java2HtmlApplet();\n\n    // Add the applet to the frame\n    appletFrame.getContentPane().add(myApplet, BorderLayout.CENTER);\n\n    // Set size of the frame (It can be resized using the mouse)\n    appletFrame.setSize(700, 420);\n\n    // Initialize the applet\n    myApplet.init();\n\n    // Start the applet\n    myApplet.start();\n\n    // Make the frame visible\n    appletFrame.setVisible(true);\n\n    appletFrame.setResizable(false);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3390, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [209], "initializationEnd": [229], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(Window)"], "configurationStart": [235, 265], "configurationEnd": [259, 299], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 305, "focalAPIEnd": 328, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [305, 363, 422], "useEnd": [357, 416, 445], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mirco89/uni/tree/master/simple/src/simple51.java", "rawCode": "  public static void main(String[] args) {\n    Camera.setCenterOfProjection(new Vector3f(5, 5, 15));\n    sceneManager = new GraphSceneManager();\n\n    renderPanel = new SimpleRenderPanel();\n    JFrame jframe = new JFrame(\"simple\");\n    jframe.setSize(500, 500);\n    jframe.setLocationRelativeTo(null);\n    jframe.getContentPane().add(renderPanel.getCanvas());\n    jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    jframe.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3391, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 45, "focalAPIEnd": 67, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "jFrame.getContentPane()", "property.add(JLabel,GridBagConstraints)", "new FrameCloseExit(jFrame)", "jFrame.addWindowListener(WindowListener)"], "useStart": [45, 103, 103, 186, 162], "useEnd": [97, 125, 156, 211, 212], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/caadapter/tree/master/software/caadapter/src/java/gov/nih/nci/caadapter/hl7/v2v3/tools/XmlTreeBrowser.java", "rawCode": "  public JFrame setFrame(JFrame frame) {\n    frame.getContentPane().setLayout(new BorderLayout());\n    frame.getContentPane().add(this, BorderLayout.CENTER);\n    frame.addWindowListener(new FrameCloseExit(frame));\n    return frame;\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3392, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [58], "initializationEnd": [70], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setLayout(GridLayout)", "jFrame.setSize(int,int)"], "configurationStart": [76, 130, 165], "configurationEnd": [124, 159, 184], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 190, "focalAPIEnd": 208, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setBackground(Color)", "jFrame.add(CButton)", "jFrame.setVisible(boolean)", "jFrame.repaint()"], "useStart": [190, 288, 302, 326], "useEnd": [233, 296, 320, 337], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ajhalbleib/aicg/tree/master/appinventor/blockslib/src/openblocks/codeblockutil/CPopupMenu.java", "rawCode": "  public static void main(String[] args) {\n    JFrame f = new JFrame();\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setLayout(new FlowLayout());\n    f.setSize(500, 300);\n    f.getContentPane().setBackground(Color.red);\n    final CButton c = new CGraphiteButton(\"hi\");\n    f.add(c);\n    f.setVisible(true);\n    f.repaint();\n    final CPopupMenu menu = new CPopupMenu();\n    for (int i = 0; i < 17; i++) {\n      menu.add(new CMenuItem(\"hi\"));\n    }\n    c.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            menu.show(c, 0, 0);\n          }\n        });\n    c.add(menu);\n    System.out.println(menu.getParent());\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3393, "initialization": ["JFrame jFrame = HashMap.get(String)", "JFrame jFrame = new JFrame(String)"], "initializationStart": [89, 145], "initializationEnd": [104, 159], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridLayout)"], "configurationStart": [167], "configurationEnd": [202], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 244, "focalAPIEnd": 266, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [244, 292, 320], "useEnd": [286, 314, 342], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sagemath/sagenb/tree/master/sagenb/data/sage3d/src/org/sagemath/TestApplet.java", "rawCode": "  public void showView(String url, String id, String name) {\n    JFrame frame = (JFrame) windows.get(id);\n    if (frame == null) {\n      frame = new JFrame(id);\n      frame.setLayout(new BorderLayout());\n      windows.put(id, frame);\n    }\n    frame.getContentPane().add(new Label(url));\n    frame.setSize(200, 50);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3394, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 53, "focalAPIEnd": 75, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridBagLayout)", "GridBagLayout.layoutContainer(property)", "property.add(JToolBar,GridBagConstraints)", "property.add(JScrollPane,GridBagConstraints)"], "useStart": [126, 153, 437, 1342], "useEnd": [147, 180, 459, 1367], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Tarinaky/uk.ac.aber.dcs.cs12420.aberpizza/tree/master/src/uk/ac/aber/dcs/cs12420/aberpizza/gui/TillReviewer.java", "rawCode": "  public void addElements() {\n    Container layout = frame.getContentPane();\n    GridBagLayout gbl = new GridBagLayout();\n    layout.setLayout(gbl);\n    gbl.layoutContainer(layout);\n    GridBagConstraints c = new GridBagConstraints();\n\n    JToolBar toolbar = new JToolBar(\"toolbar\");\n    toolbar.setFloatable(false);\n    c.fill = GridBagConstraints.HORIZONTAL;\n    c.gridx = 0;\n    c.gridy = 0;\n    c.weightx = 1;\n    c.weighty = 0;\n    layout.add(toolbar, c);\n\n    JButton button = new JButton(\"Open file...\");\n    button.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent arg0) {\n            JFileChooser chooser = new JFileChooser(\"data\");\n            chooser.showOpenDialog(frame);\n            try {\n              Till till = Till.load(chooser.getSelectedFile());\n              new TillReviewer(till);\n              frame.dispose();\n            } catch (Exception e) {\n              e.printStackTrace();\n              JOptionPane.showMessageDialog(\n                  frame, \"Could not open file as Till\", \"Error\", JOptionPane.ERROR_MESSAGE);\n            }\n          }\n        });\n    toolbar.add(button);\n\n    pane = new JPanel();\n    pane.setLayout(new GridBagLayout());\n\n    c.gridy++;\n    c.weighty = 1;\n    c.fill = GridBagConstraints.BOTH;\n    scrollPane = new JScrollPane(pane);\n    layout.add(scrollPane, c);\n\n    drawOrders();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3395, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 137, "focalAPIEnd": 155, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.setLayout(GridLayout)", "property.add(String,*)", "property.add(String,*)", "jFrame.pack()"], "useStart": [161, 209, 254, 465], "useEnd": [203, 248, 295, 473], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IanDarwin/darwinsys-api/tree/master/src/test/java/com/darwinsys/swingui/layout/RelativeLayoutTest.java", "rawCode": "  /** Construct a RelativeLayoutTest test program. */\n  public void setParentFrame(JFrame f) {\n    Button qb; // quit\n    Container cp = f.getContentPane();\n    cp.setLayout(new RelativeLayout(300, 150));\n    cp.add(\"80,20\", new Button(\"MidWidth\"));\n    cp.add(\"150,75\", qb = new Button(\"Quit\"));\n    qb.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            System.exit(0);\n          }\n        });\n    f.pack();\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3396, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [80], "configurationEnd": [132], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 138, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [138, 193, 211], "useEnd": [187, 205, 233], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nodebox/scenebuilder/tree/master/app/src/nodebox/app/DraggableNumber.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(new DraggableNumber());\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3397, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [75], "initializationEnd": [87], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setVisible(boolean)"], "configurationStart": [99], "configurationEnd": [122], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 128, "focalAPIEnd": 150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.removeAll()", "jFrame.validate()"], "useStart": [128, 168], "useEnd": [162, 184], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RorasGit/RiskySpace/tree/master/src/riskyspace/Main.java", "rawCode": "  public static JFrame getFrame() {\n    if (frame == null) {\n      frame = new JFrame();\n    }\n    frame.setVisible(false);\n    frame.getContentPane().removeAll();\n    frame.validate();\n    return frame;\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3398, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [737], "initializationEnd": [759], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 765, "focalAPIEnd": 791, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(BeanPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)", "jFrame.setVisible(boolean)", "jFrame.setVisible(boolean)"], "useStart": [765, 805, 827, 898, 959], "useEnd": [799, 821, 853, 925, 985], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/halset/openmap/tree/master/src/main/java/com/bbn/openmap/tools/beanbox/BeanPanel.java", "rawCode": "  public static void main(String[] args) {\n\n    Properties props = new Properties();\n    props.setProperty(\"beanpanel.beans.path\", \"\");\n    props.setProperty(\"beanpanel.tabs\", \"tab1 tab2 tab3\");\n    props.setProperty(\"beanpanel.tab1.name\", \"Generic\");\n    props.setProperty(\"beanpanel.tab1.beans\", \"com.bbn.openmap.examples.beanbox.SimpleBeanObject\");\n    props.setProperty(\"beanpanel.tab2.name\", \"Container\");\n    props.setProperty(\n        \"beanpanel.tab2.beans\", \"com.bbn.openmap.examples.beanbox.SimpleBeanContainer\");\n    props.setProperty(\"beanpanel.tab3.name\", \"Military\");\n    props.setProperty(\"beanpanel.tab3.beans\", \"com.bbn.openmap.examples.beanbox.Fighter\");\n\n    BeanPanel bp = new BeanPanel(props);\n    JFrame beanFrame = new JFrame(\"Bean Box\");\n    beanFrame.getContentPane().add(bp);\n    beanFrame.pack();\n    beanFrame.setVisible(true);\n\n    try {\n      Thread.sleep(2000);\n      beanFrame.setVisible(false);\n      Thread.sleep(2000);\n      beanFrame.setVisible(true);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3399, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [934], "initializationEnd": [946], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [952], "configurationEnd": [1024], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 1030, "focalAPIEnd": 1063, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [1030, 1522, 1551], "useEnd": [1089, 1545, 1584], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mosscode/icepdf/tree/master/examples/component/ViewerComponentExample.java", "rawCode": "  public static void main(String[] args) {\n    // Get a file from the command line to open\n    String filePath = args[0];\n\n    // build a component controller\n    SwingController controller = new SwingController();\n    controller.setIsEmbeddedComponent(true);\n\n    // set the viewController embeddable flag.\n    DocumentViewController viewController = controller.getDocumentViewController();\n\n    JPanel viewerComponentPanel = new JPanel();\n    viewerComponentPanel.add(viewController.getViewContainer());\n\n    // add copy keyboard command\n    ComponentKeyBinding.install(controller, viewerComponentPanel);\n\n    // add interactive mouse link annotation support via callback\n    controller\n        .getDocumentViewController()\n        .setAnnotationCallback(\n            new org.icepdf.ri.common.MyAnnotationCallback(controller.getDocumentViewController()));\n\n    // build a containing JFrame for display\n    JFrame applicationFrame = new JFrame();\n    applicationFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    applicationFrame.getContentPane().add(viewerComponentPanel);\n\n    // Now that the GUI is all in place, we can try opening a PDF\n    controller.openDocument(filePath);\n\n    // hard set the page view to single page which effectively give a single\n    // page view. This should be done after openDocument as it has code that\n    // can change the view mode if specified by the file.\n    controller.setPageViewMode(DocumentViewControllerImpl.ONE_PAGE_VIEW, false);\n\n    // show the component\n    applicationFrame.pack();\n    applicationFrame.setVisible(true);\n  }\n"}, {"dataset": "getContentPane", "exampleID": 3400, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setMinimumSize(Dimension)", "jFrame.setSize(Dimension)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [120, 192, 263], "configurationEnd": [186, 257, 315], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "property = jFrame.getContentPane()", "focalAPIStart": 975, "focalAPIEnd": 997, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["property.add(JToolBar,*)", "jFrame.getContentPane()", "property.add(JTabbedPane,*)"], "useStart": [975, 1073, 1073], "useEnd": [1030, 1095, 1132], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/esgott/szoft_arch_hazi/tree/master/laborreg_server/src/hu/laborreg/server/gui/MainWindow.java", "rawCode": "  private void initialize(\n      CourseContainer courses, LabEventContainer labEvents, DataExporter dataExporter) {\n    frame.setMinimumSize(new Dimension(MINIMUM_WIDTH, MINIMUM_HEIGHT));\n    frame.setSize(new Dimension(MINIMUM_WIDTH, MINIMUM_HEIGHT + 200));\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    translateJFileChooser();\n    fileChooser = new JFileChooser();\n    fileChooser.setFileFilter(new FileNameExtensionFilter(\"Comma Separated Values (.csv)\", \"csv\"));\n\n    courseManipulatorPanel = new CourseManipulatorPanel(courses, this);\n    courseManipulatorDialog = new DataManipulatorDialog(400, 200, courseManipulatorPanel);\n    labEventManipulatorPanel = new LabEventManipulatorPanel(labEvents, this);\n    labEventManipulatorDialog = new DataManipulatorDialog(400, 300, labEventManipulatorPanel);\n\n    toolBar.setRollover(true);\n    toolBar.setFloatable(false);\n    toolBar.setLayout(new FlowLayout(FlowLayout.LEFT));\n    createToolbarButtons();\n    frame.getContentPane().add(toolBar, BorderLayout.NORTH);\n\n    createTabs(courses, labEvents);\n    frame.getContentPane().add(tabbedPane, BorderLayout.CENTER);\n\n    this.dataExporter = dataExporter;\n  }\n"}]