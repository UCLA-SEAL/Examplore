[{"dataset": "getParameter", "exampleID": 2501, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "InstantiationException", "exceptionHandlingCall": ["getName()", "getLogger(*)", "log(*,*,*)"], "tryExpressionStart": 477, "tryExpressionEnd": 481, "tryBlockStart": 477, "tryBlockEnd": 1510, "catchExpressionStart": 1146, "catchExpressionEnd": 1180, "catchBlockStart": 1146, "catchBlockEnd": 1270, "exceptionHandlingCallStart": [1205, 1188, 1188], "exceptionHandlingCallEnd": [1234, 1235, 1263], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 751, "focalAPIEnd": 787, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Sql.consulta(value)"], "useStart": [887], "useEnd": [902], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IndieC8/ISFE-20110020/tree/master/Documents/NetBeansProjects/ISFE-20110020/src/java/dao/ObtenerMunicipio.java", "rawCode": "  /**\n   * Método encargado de obtener el municipio de la dirección física del contribuyente a la base de\n   * datos\n   *\n   * @param request servlet request\n   * @param response servlet response\n   * @throws ServletException si ocurren errores del Servlet\n   * @throws IOException Si ocurren errores de entrada y/o salida de datos\n   */\n  protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    try {\n      response.setContentType(\"text/html;charset=UTF-8\");\n      PrintWriter out = response.getWriter();\n      Sql s = new Sql();\n      String sql =\n          \"SELECT m.idMunicipio, m.nombreMunicipio FROM municipio m, localidad l WHERE l.codigoPostal=\"\n              + request.getParameter(\"codigoPostal\")\n              + \" AND l.idMunicipio = m.idMunicipio GROUP BY(m.idMunicipio)\";\n      ResultSet rs = s.consulta(sql);\n      while (rs.next()) {\n        out.println(\n            \"<option value=\\\"\"\n                + rs.getInt(\"idMunicipio\")\n                + \"\\\">\"\n                + rs.getString(\"nombreMunicipio\")\n                + \"</option>\");\n      }\n\n    } catch (InstantiationException ex) {\n      Logger.getLogger(ObtenerEstado.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalAccessException ex) {\n      Logger.getLogger(ObtenerEstado.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (SQLException ex) {\n      Logger.getLogger(ObtenerEstado.class.getName()).log(Level.SEVERE, null, ex);\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2502, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpServletRequest.getParameter(name,)!=null", "guardType": "IF {", "guardExpressionStart": 166, "guardExpressionEnd": 212, "guardBlockStart": 166, "guardBlockEnd": 744, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 170, "focalAPIEnd": 203, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getRequestURL()", "httpServletRequest.getRequestURL()", "httpServletRequest.getRequestURL()", "httpServletRequest.getRequestURL()", "httpServletRequest.getRequestURL()", "valueOf(value)"], "useStart": [308, 373, 464, 589, 669, 774], "useEnd": [331, 396, 487, 612, 692, 806], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bogeblad/infoglue/tree/master/src/java/org/infoglue/deliver/applications/filters/ViewPageFilter.java", "rawCode": "  private Integer getContentId(HttpServletRequest request) throws ServletException, Exception {\n    Integer contentId = null;\n\n    String contentIdString = null;\n    if (request.getParameter(\"contentId\") != null) {\n      contentIdString = request.getParameter(\"contentId\");\n    } else {\n      int cidIndex = request.getRequestURL().indexOf(\".cid\");\n      int cidIndexEnd = request.getRequestURL().indexOf(\"?\", cidIndex);\n      if (cidIndexEnd == -1) cidIndexEnd = request.getRequestURL().indexOf(\"/\", cidIndex);\n\n      if (cidIndex > -1) {\n        if (cidIndexEnd == -1) contentIdString = request.getRequestURL().substring(cidIndex + 4);\n        else contentIdString = request.getRequestURL().substring(cidIndex + 4, cidIndexEnd);\n      }\n    }\n\n    try {\n      contentId = Integer.valueOf(contentIdString);\n    } catch (NumberFormatException e) {\n    }\n\n    return contentId;\n  }\n"}, {"dataset": "getParameter", "exampleID": 2503, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 315, "focalAPIEnd": 345, "followUpCheck": "value != null && !value.isEmpty()", "checkType": "IF", "followUpCheckExpressionStart": 351, "followUpCheckExpressionEnd": 387, "followUpCheckBlockStart": 351, "followUpCheckBlockEnd": 488, "use": ["parseInt(value)", "httpServletRequest.setAttribute(String,boolean)", "httpServletRequest.setAttribute(String,String)", "forward(httpServletRequest,HttpServletResponse)"], "useStart": [405, 448, 506, 591], "useEnd": [427, 481, 582, 735], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/revan-kun/inTouch/tree/master/src/main/java/com/epam/lab/intouch/web/servlet/AllMembersServlet.java", "rawCode": "  /** @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */\n  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    MemberController controller = new MemberController();\n\n    int number = -1;\n\n    String temp = request.getParameter(\"number\");\n    if (temp != null && !temp.isEmpty()) {\n      number = Integer.parseInt(temp);\n    } else {\n      request.setAttribute(\"all\", true);\n    }\n\n    try {\n      request.setAttribute(\"members\", controller.getLastRegisteredMembers(number));\n\n      getServletConfig()\n          .getServletContext()\n          .getRequestDispatcher(\"/pages/allMembers.jsp\")\n          .forward(request, response);\n    } catch (DAOException e) {\n      LOG.error(\"Can't retrieve last registered members\", e);\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2504, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "sendError(int,*)"], "tryExpressionStart": 89, "tryExpressionEnd": 93, "tryBlockStart": 89, "tryBlockEnd": 579, "catchExpressionStart": 350, "catchExpressionEnd": 370, "catchBlockStart": 350, "catchBlockEnd": 579, "exceptionHandlingCallStart": [416, 392], "exceptionHandlingCallEnd": [430, 431], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 206, "focalAPIEnd": 234, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "migrateDocument(value,String,*)"], "useStart": [256, 293], "useEnd": [284, 342], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jak786/VASE/tree/master/editor/server/src/org/oryxeditor/server/BPMN2MigrationServlet.java", "rawCode": "  protected void doPost(HttpServletRequest request, HttpServletResponse response) {\n\n    try {\n      response.setContentType(\"text/json\");\n      response.setCharacterEncoding(\"UTF-8\");\n\n      String json = request.getParameter(\"data\");\n      String path = request.getParameter(\"path\");\n\n      migrateDocument(json, path, response.getWriter());\n    } catch (Exception e) {\n      try {\n        response.sendError(500, e.getMessage());\n      } catch (IOException e1) {\n        // TODO Auto-generated catch block\n        e1.printStackTrace();\n      }\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2505, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 179, "focalAPIEnd": 208, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["spaceTrimmer(value)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameterValues(String)", "httpServletRequest.getParameterValues(String)", "httpServletRequest.getParameterValues(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "acceptResponse(httpServletRequest,HttpServletResponse)", "failedResponse(httpServletRequest,HttpServletResponse)"], "useStart": [151, 250, 299, 359, 424, 525, 610, 687, 1173, 1227], "useEnd": [209, 278, 340, 399, 476, 564, 642, 720, 1206, 1260], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdbaltazar/CMSC-198-IAPPSAM-System/tree/master/src/main/com/iappsam/servlet/entities/employee/EmployeeCreation.java", "rawCode": "  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    title = entryFormatter.spaceTrimmer(request.getParameter(\"title\"));\n    name = entryFormatter.spaceTrimmer(request.getParameter(\"name\"));\n    designation = request.getParameterValues(\"designation\");\n    employeeNo = request.getParameterValues(\"employeeNo\");\n    divisionOfficeID = request.getParameterValues(\"divisionOfficeDropdown\");\n    mobileNumber = entryFormatter.spaceTrimmer(request.getParameter(\"cellphoneNumber\"));\n    landline = entryFormatter.spaceTrimmer(request.getParameter(\"landline\"));\n    emailad = entryFormatter.spaceTrimmer(request.getParameter(\"e-mail_ad\"));\n\n    boolean isFail = false;\n\n    for (int i = 0; i < designation.length; i++) {\n      designation[i] = entryFormatter.spaceTrimmer(designation[i]);\n      employeeNo[i] = entryFormatter.spaceTrimmer(employeeNo[i]);\n    }\n    for (int i = 0; i < 3; i++) {\n      if (designation[i] == null && employeeNo[i] != null) {\n        isFail = true;\n      }\n    }\n    if (!name.isEmpty() && designation != null && !isFail && entryFormatter.check(name)) {\n      acceptResponse(request, response);\n    } else {\n      failedResponse(request, response);\n      isFail = false;\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2506, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(\"put\".equalsIgnoreCase(httpServletRequest.getMethod(),))", "guardType": "IF {", "guardExpressionStart": 60, "guardExpressionEnd": 108, "guardBlockStart": 60, "guardBlockEnd": 245, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 198, "focalAPIEnd": 237, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["equalsIgnoreCase(value)"], "useStart": [175], "useEnd": [238], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/krosenvold/struts2/tree/master/plugins/rest/src/main/java/org/apache/struts2/rest/RestActionMapper.java", "rawCode": "  protected boolean isPut(HttpServletRequest request) {\n    if (\"put\".equalsIgnoreCase(request.getMethod())) {\n      return true;\n    } else {\n      return isPost(request) && \"put\".equalsIgnoreCase(request.getParameter(HTTP_METHOD_PARAM));\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2507, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 113, "focalAPIEnd": 140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["generateWsdlId(value)", "getBaseUrl(httpServletRequest)", "writeResponse(httpServletRequest,HttpServletResponse)"], "useStart": [287, 364, 397], "useEnd": [310, 390, 420], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SINTEF-9012/oryx-neffics/tree/master/editor/server/src/org/oryxeditor/server/WSDL2XFormsServlet.java", "rawCode": "  protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException {\n    wsdlUrl = req.getParameter(\"wsdlUrl\");\n    forms = new HashMap<String, Map<String, String>>();\n\n    HashMap<String, Document> distinctXFormsDocs =\n        getXFormDocuments(getWSDL(), generateWsdlId(wsdlUrl));\n    saveXFormsInOryxRepository(distinctXFormsDocs, Repository.getBaseUrl(req));\n    writeResponse(req, res);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2508, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "\"subjectArea\".equals(httpServletRequest.getParameter(\"type\",),)", "guardType": "IF {", "guardExpressionStart": 114, "guardExpressionEnd": 169, "guardBlockStart": 114, "guardBlockEnd": 527, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 200, "focalAPIEnd": 226, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["coumputeCourseNumbers(value,PrintWriter)", "httpServletRequest.getParameter(String)", "coumputeDays(value,PrintWriter)", "httpServletRequest.getParameter(String)", "coumputeTimes(value,PrintWriter)"], "useStart": [178, 349, 336, 459, 445], "useEnd": [232, 375, 381, 485, 491], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jaliste/unitime/tree/master/JavaSource/org/unitime/timetable/action/ajax/SectioningDemoAjax.java", "rawCode": "  protected void coumputeSuggestionList(HttpServletRequest request, PrintWriter out)\n      throws Exception {\n    if (\"subjectArea\".equals(request.getParameter(\"type\"))) {\n      coumputeCourseNumbers(request.getParameter(\"id\"), out);\n    } else if (\"timePattern\".equals(request.getParameter(\"type\"))) {\n      out.print(\"<days>\");\n      coumputeDays(request.getParameter(\"id\"), out);\n      out.print(\"</days>\");\n      out.print(\"<times>\");\n      coumputeTimes(request.getParameter(\"id\"), out);\n      out.print(\"</times>\");\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2509, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 162, "focalAPIEnd": 192, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["forwardToMenuFrameJsp(HttpServletRequest,HttpServletResponse,value)", "logInFail(httpServletRequest,HttpServletResponse)"], "useStart": [231, 292], "useEnd": [281, 320], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdbaltazar/CMSC-198-IAPPSAM-System/tree/master/src/main/com/iappsam/servlet/LoginServlet.java", "rawCode": "  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    String username = request.getParameter(USERNAME);\n\n    if (loginModule.login(request)) forwardToMenuFrameJsp(request, response, username);\n    else logInFail(request, response);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2510, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.getSession(boolean)"], "configurationStart": [114], "configurationEnd": [139], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 161, "focalAPIEnd": 191, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 296, "followUpCheckExpressionEnd": 315, "followUpCheckBlockStart": 296, "followUpCheckBlockEnd": 757, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getSession(boolean)"], "useStart": [211, 260, 378], "useEnd": [239, 289, 402], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thomasbecker/jetty-7/tree/master/test-jetty-webapp/src/main/java/com/acme/SessionDump.java", "rawCode": "  protected void handleForm(HttpServletRequest request, HttpServletResponse response) {\n    HttpSession session = request.getSession(false);\n    String action = request.getParameter(\"Action\");\n    String name = request.getParameter(\"Name\");\n    String value = request.getParameter(\"Value\");\n\n    if (action != null) {\n      if (action.equals(\"New Session\")) {\n        session = request.getSession(true);\n        session.setAttribute(\"test\", \"value\");\n      } else if (session != null) {\n        if (action.equals(\"Invalidate\")) session.invalidate();\n        else if (action.equals(\"Set\") && name != null && name.length() > 0)\n          session.setAttribute(name, value);\n        else if (action.equals(\"Remove\")) session.removeAttribute(name);\n      }\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2511, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 259, "focalAPIEnd": 297, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "User.setInfo(value)"], "useStart": [321, 373, 529, 1026, 3136], "useEnd": [349, 401, 560, 1056, 3156], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hellonoam/8cookies/tree/master/bfc backend google app engine/src/backend/ReceiveData.java", "rawCode": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws IOException, ServletException {\n    logger.severe(\"inside do get\");\n    // reading the params in this request\n    // reading the cookies as json\n    String reqString = request.getParameter(\"dataFromClient\");\n    String username = request.getParameter(\"user\");\n    String password = request.getParameter(\"pass\");\n    double version = 0;\n    // reading version number and raising exception if missing\n    try {\n      String versionString = request.getParameter(\"version\");\n      if (versionString != null) version = Double.parseDouble(versionString);\n    } catch (NumberFormatException e) {\n      logger.severe(\"version was missing\");\n    }\n    // setting serial to be -1 or the serial received. if serial isn't received, an old version\n    // of the extension made this request. shouldn't happen\n    int serial = -1;\n    logger.severe(\"got request from: \" + username + \" version: \" + version);\n    try {\n      serial = Integer.parseInt(request.getParameter(\"serial\"));\n    } catch (NumberFormatException e) {\n      response.sendError(\n          HttpServletResponse.SC_CONFLICT,\n          \"serial conflict - serial missing\" + \" - update was rejected\");\n      return;\n    }\n\n    logger.fine(\"serial \" + serial);\n    // authenticates users\n    AuthenticationResponse auth = DatabaseInteraction.authenticate(username, password);\n    if (auth.getResponseType() == AuthenticationResponse.BLOCKED) {\n      response.sendError(\n          HttpServletResponse.SC_FORBIDDEN,\n          \"wrong passwrod too many times wait:\" + auth.getWaitTime());\n      logger.fine(\"wrong passwrod too many times\");\n      return;\n    }\n    if (auth.getResponseType() != AuthenticationResponse.VALID) {\n      response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"received incorrect credentials\");\n      logger.fine(\"received incorrect credentials\");\n      return;\n    }\n    // user has been authenticated\n    User u = DatabaseInteraction.getUser(username);\n    if (version == 0) u.setSerial(-1);\n    else if (u.getSerial() == -1) u.setSerial(serial);\n    else if (serial != u.getSerial()) { // CONFLICT!!\n      u.setSerial(serial);\n      // saves user to db after serial has been updated\n      boolean succ = DatabaseInteraction.updateOrSaveUser(u);\n      if (!succ) logger.severe(\"failed to update serial of user\");\n      String infoString = u.getInfo();\n      if (infoString != null && !infoString.equals(\"\")) {\n        JSONObject jsonResponse = DatabaseInteraction.newJSONInstance();\n        try {\n          // sends needed information to the server\n          jsonResponse.append(\"info\", u.getInfo());\n          jsonResponse.append(\"salt\", u.getSalt());\n          response.setContentType(\"text/html\");\n          PrintWriter out = response.getWriter();\n          // sends the users the updated browsing session\n          out.println(jsonResponse);\n          out.close();\n        } catch (JSONException e) {\n          e.printStackTrace();\n          logger.severe(\"failed to send info to client after conflict\");\n        }\n      }\n      return;\n    }\n    // no conflict\n    u.setInfo(reqString);\n    logger.fine(\"updated data of existing user\");\n    if (DatabaseInteraction.updateOrSaveUser(u)) {\n      response.setContentType(\"text/html\");\n      PrintWriter out = response.getWriter();\n      // sends message to client that the info has been received successfully\n      out.println(\"received\");\n      out.close();\n      logger.fine(\"data received successfully\");\n    } else {\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"faild to update/save user\");\n      logger.severe(\"ERROR: failed to update/save user\");\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2512, "initialization": ["HttpServletRequest httpServletRequest = createMock(*)"], "initializationStart": [208], "initializationEnd": [253], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.getSession()", "httpServletRequest.setAttribute(String,SecureUrlAccessHelper)"], "configurationStart": [275, 321], "configurationEnd": [295, 368], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 390, "focalAPIEnd": 427, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["expect(value)", "replay(httpServletRequest)", "FilterChain.doFilter(httpServletRequest,HttpServletResponse)"], "useStart": [374, 464, 565], "useEnd": [428, 488, 598], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rickyclarkson/katari/tree/master/dev/katari-core/src/test/java/com/globant/katari/core/security/SecureUrlMacroFilterTest.java", "rawCode": "  /**\n   * Initialize request field.\n   *\n   * @param securityDebugValue the param value in the request.\n   */\n  private void initRequestMock(final String securityDebugValue) throws Exception {\n    request = EasyMock.createMock(HttpServletRequest.class);\n    EasyMock.expect(request.getSession()).andReturn(session);\n    request.setAttribute(\"secureUrlHelper\", helper);\n    EasyMock.expect(request.getParameter(\"securityDebug\")).andReturn(securityDebugValue);\n    EasyMock.replay(request);\n\n    // init chain\n    chain = EasyMock.createMock(FilterChain.class);\n    chain.doFilter(request, response);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.replay(chain);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2513, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 299, "focalAPIEnd": 327, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "getTask(value)", "httpServletRequest.getRequestDispatcher(String)", "RequestDispatcher.forward(httpServletRequest,HttpServletResponse)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.getRequestDispatcher(String)", "RequestDispatcher.forward(httpServletRequest,HttpServletResponse)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.getRequestDispatcher(String)", "RequestDispatcher.forward(httpServletRequest,HttpServletResponse)", "httpServletRequest.getRequestDispatcher(String)", "RequestDispatcher.forward(httpServletRequest,HttpServletResponse)"], "useStart": [356, 415, 834, 880, 1004, 1055, 1102, 1235, 1284, 1329, 1389, 1440], "useEnd": [387, 440, 868, 903, 1036, 1090, 1125, 1267, 1319, 1352, 1432, 1463], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vrchlpet/WA2_Project_control/tree/master/src/ProjectControl/src/org/cvut/wa2/projectcontrol/FinishTaskServlet.java", "rawCode": "  @Override\n  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n      throws ServletException, IOException {\n    UserService userService = UserServiceFactory.getUserService();\n\n    RequestDispatcher disp = null;\n\n    if (userService.isUserLoggedIn()) {\n\n      String taskName = req.getParameter(\"taskName\");\n      String subtaskName = req.getParameter(\"subtaskName\");\n\n      CompositeTask ct = TaskDAO.getTask(taskName);\n\n      if (ct != null) {\n\n        Task t = null;\n\n        x:\n        for (Task task : ct.getSubtasks()) {\n          if (task.getTaskName().equals(subtaskName)) {\n            t = task;\n            break x;\n          }\n        }\n\n        if (t != null) {\n          t.setTaskStatus(Status.finished);\n          PersistenceManager pm = PMF.get();\n          pm.makePersistent(ct);\n          disp = req.getRequestDispatcher(\"/tasks\");\n          disp.forward(req, resp);\n        } else {\n          String errText = \"Subtask \" + subtaskName + \" doesnt exist.\";\n          req.setAttribute(\"err\", errText);\n          disp = req.getRequestDispatcher(\"err.jsp\");\n          disp.forward(req, resp);\n        }\n\n      } else {\n        String errText = \"Composite task \" + taskName + \" doesnt exist.\";\n        req.setAttribute(\"err\", errText);\n        disp = req.getRequestDispatcher(\"err.jsp\");\n        disp.forward(req, resp);\n      }\n\n    } else {\n      disp = req.getRequestDispatcher(\"/projectcontrol\");\n      disp.forward(req, resp);\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2514, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 363, "focalAPIEnd": 396, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getDomainObject(value)", "httpServletRequest.setAttribute(String,CreateAcquisitionRequestItemActivityInformation)", "httpServletRequest.setAttribute(String,WorkflowProcess)", "performActivityPostback(CreateAcquisitionRequestItemActivityInformation,httpServletRequest)"], "useStart": [332, 1010, 1072, 1125], "useEnd": [397, 1066, 1112, 1202], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ist-dsi/expenditures/tree/master/expenditure-tracking/src/main/java/pt/ist/expenditureTrackingSystem/presentationTier/actions/acquisitions/ExpenditureProcessesAction.java", "rawCode": "  public ActionForward itemPostBack(\n      final ActionMapping mapping,\n      final ActionForm form,\n      final HttpServletRequest request,\n      final HttpServletResponse response) {\n    CreateAcquisitionRequestItemActivityInformation activityInformation =\n        getRenderedObject(\"activityBean\");\n    WorkflowProcess process = FenixFramework.getDomainObject(request.getParameter(\"processId\"));\n    RenderUtils.invalidateViewState();\n    activityInformation.setRecipient(null);\n    activityInformation.setAddress(null);\n\n    if (activityInformation\n        .getCreateItemSchemaType()\n        .equals(CreateItemSchemaType.EXISTING_DELIVERY_INFO)) {\n      activityInformation.setDeliveryInfo(\n          activityInformation\n              .getAcquisitionRequest()\n              .getRequester()\n              .getDeliveryInfoByRecipientAndAddress(\n                  activityInformation.getRecipient(), activityInformation.getAddress()));\n    } else {\n      activityInformation.setDeliveryInfo(null);\n    }\n\n    request.setAttribute(\"information\", activityInformation);\n    request.setAttribute(\"process\", process);\n    return new ProcessManagement().performActivityPostback(activityInformation, request);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2515, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.getCookies()"], "configurationStart": [287], "configurationEnd": [307], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 849, "focalAPIEnd": 899, "followUpCheck": "value == null || value.equals(\"\")", "checkType": "IF", "followUpCheckExpressionStart": 905, "followUpCheckExpressionEnd": 941, "followUpCheckBlockStart": 905, "followUpCheckBlockEnd": 1123, "use": ["createCookie(*,value,*)"], "useStart": [1016], "useEnd": [1087], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nan21/nan21.dnet.core/tree/master/nan21.dnet.core.web/src/main/java/net/nan21/dnet/core/web/controller/ui/extjs/AbstractUiExtjsController.java", "rawCode": "  /**\n   * Resolve the user's current language from the cookie.\n   *\n   * @param request\n   * @param response\n   * @return\n   * @throws Exception\n   */\n  private String resolveLang(HttpServletRequest request, HttpServletResponse response)\n      throws Exception {\n    Cookie[] cookies = request.getCookies();\n    Cookie c = this.getCookie(cookies, Constants.COOKIE_NAME_LANG);\n    if (c == null) {\n      String defaultValue =\n          this.getSystemConfig()\n              .getSysParamValue(\n                  SysParams.CORE_DEFAULT_LANGUAGE, SysParams.CORE_DEFAULT_LANGUAGE_DEFVAL);\n      if (defaultValue == null || defaultValue.equals(\"\")) {\n        defaultValue = Constants.DEFAULT_LANGUAGE;\n      }\n      c = this.createCookie(Constants.COOKIE_NAME_LANG, defaultValue, 60 * 60 * 24 * 365);\n      response.addCookie(c);\n    }\n\n    String lang = request.getParameter(Constants.REQUEST_PARAM_LANG);\n    if (lang == null || lang.equals(\"\")) {\n      lang = c.getValue();\n    } else {\n      c.setMaxAge(0);\n      c = this.createCookie(Constants.COOKIE_NAME_LANG, lang, 60 * 60 * 24 * 365);\n      response.addCookie(c);\n    }\n    return lang;\n  }\n"}, {"dataset": "getParameter", "exampleID": 2516, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 737, "focalAPIEnd": 765, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getAttribute(String)"], "useStart": [785, 993], "useEnd": [813, 1034], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/WISE-Community/WISE-VLE/tree/master/src/main/java/utils/FileManager.java", "rawCode": "  /**\n   * Given a <code>HttpServletRequest</code> request with the parameters: param1=fullpath including\n   * filename and param2=data to write to file, creates the file if it does not already exists and\n   * writes the data to that file. NOTE: I don't think this is used anymore since it was used to\n   * create metadata files in the project but we now store metadata in the db. step files are\n   * created in createNode and do not use this function.\n   *\n   * @param <code>HttpServletRequest</code> request\n   */\n  private void createFile(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    /*\n     * get the file name\n     * e.g.\n     * /node_1.or\n     */\n    String fileName = request.getParameter(\"path\");\n    String data = request.getParameter(\"data\");\n\n    /*\n     * get the project folder path\n     * e.g.\n     * /Users/geoffreykwan/dev/apache-tomcat-5.5.27/webapps/curriculum/667\n     */\n    String projectFolderPath = (String) request.getAttribute(\"projectFolderPath\");\n\n    /*\n     * get the full file path\n     * e.g.\n     * /Users/geoffreykwan/dev/apache-tomcat-5.5.27/webapps/curriculum/667/node_1.or\n     */\n    String fullFilePath = projectFolderPath + fileName;\n\n    if (this.standAlone || SecurityUtils.isAllowedAccess(request, fullFilePath)) {\n      this.writeFile(fullFilePath, data, false);\n    } else {\n      response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2517, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 152, "focalAPIEnd": 181, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)"], "useStart": [203, 275, 376], "useEnd": [233, 302, 406], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kaspervandenberg/aida/tree/master/Search/search/src/main/java/org/vle/aid/client/indexClient.java", "rawCode": "  public void processRequest(HttpServletRequest request, HttpServletResponse response)\n      throws IOException, ServletException {\n\n    String index = request.getParameter(\"index\");\n    String config = request.getParameter(\"config\").replaceAll(\"%2F\", \"/\");\n    String src = request.getParameter(\"src\").replaceAll(\"%2F\", \"/\");\n    log.info(\"SRC: \" + src);\n    String button = request.getParameter(\"button\");\n    String retXML;\n\n    PrintWriter out = response.getWriter();\n    service = new Service();\n    try {\n      call = (Call) service.createCall();\n    } catch (ServiceException e) {\n      log.severe(e.toString());\n    }\n\n    if (button != null) {\n      response.setContentType(\"text/xml;charset=UTF-8\");\n\n      try {\n        call.setTargetEndpointAddress(endpoint + \"IndexWS\");\n        call.setOperationName(\"indexFromCFG\");\n        retXML = (String) call.invoke(new Object[] {config, index, src});\n        out.println(retXML);\n\n      } catch (RemoteException e) {\n        log.severe(\"RemoteException: \" + e.toString());\n\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new PrintWriter(sw);\n        e.printStackTrace(pw);\n\n        log.severe(sw.toString());\n      }\n\n    } else {\n\n      // File indexDir = new File(\"/scratch/emeij/indexes/\");\n      // File listIndexes[] = indexDir.listFiles();\n      // reader = IndexReader.open(\"/scratch/emeij/indexes/\" + \"baseline\");\n\n      response.setContentType(\"text/html;charset=UTF-8\");\n\n      out.println(\"<html>\");\n      out.println(\"<head>\");\n      out.println(\"<title>Servlet IndexServlet</title>\");\n      out.println(\"</head>\");\n      out.println(\"<body>\");\n      out.println(\"<h1>LuceneIndexer</h1>\");\n      out.println(\"<form name=\\\"QCK\\\" method=\\\"get\\\">\");\n      out.println(\"index:\");\n\n      out.println(\"<br><br>\");\n\n      out.println(\"index:\");\n      out.println(\"<br>\");\n      out.println(\"<input type=\\\"text\\\" name=\\\"index\\\" size=\\\"25\\\" value=\\\"\\\">\");\n      out.println(\"<br><br>\");\n\n      out.println(\"config:\");\n      out.println(\"<br>\");\n      out.println(\"<input type=\\\"text\\\" name=\\\"config\\\" size=\\\"25\\\" value=\\\"\\\">\");\n      out.println(\"<br><br>\");\n\n      out.println(\"src:\");\n      out.println(\"<br>\");\n      out.println(\"<input type=\\\"text\\\" name=\\\"src\\\" size=\\\"25\\\" value=\\\"10\\\">\");\n      out.println(\"<br><br>\");\n\n      out.println(\"<input type=\\\"submit\\\" value=\\\"Submit\\\" name=\\\"button\\\">\");\n      out.println(\"</form>\");\n      out.println(\"</body>\");\n      out.println(\"</html>\");\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2518, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ParserConfigurationException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 123, "tryExpressionEnd": 127, "tryBlockStart": 123, "tryBlockEnd": 648, "catchExpressionStart": 517, "catchExpressionEnd": 556, "catchBlockStart": 517, "catchBlockEnd": 590, "exceptionHandlingCallStart": [564], "exceptionHandlingCallEnd": [583], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 188, "focalAPIEnd": 212, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getBytes(String)"], "useStart": [434], "useEnd": [455], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mduduzik/flowframe/tree/master/editors/oryx/frontend/src/main/java/org/oryxeditor/server/ValidatorServlet.java", "rawCode": "  protected void doPost(HttpServletRequest req, HttpServletResponse res)\n      throws ServletException, IOException {\n\n    try {\n      res.setContentType(\"text/json\");\n\n      String rdf = req.getParameter(\"data\");\n\n      DocumentBuilder builder;\n      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n      builder = factory.newDocumentBuilder();\n      Document document = builder.parse(new ByteArrayInputStream(rdf.getBytes(\"UTF-8\")));\n\n      processDocument(document, res.getWriter());\n\n    } catch (ParserConfigurationException e) {\n      e.printStackTrace();\n    } catch (SAXException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2519, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 216, "focalAPIEnd": 245, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "EventSessionBean.makeReservation(String,String,String,value,String,String,Integer,Date,Date)"], "useStart": [270, 323, 376, 430, 486, 794, 971, 1025, 1100, 1169, 1261, 1324, 1379, 1457, 1524, 1677], "useEnd": [303, 351, 409, 460, 519, 825, 1002, 1056, 1134, 1211, 1300, 1355, 1411, 1490, 1565, 1807], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/liuxian-nus/Test/tree/master/IRMS/IRMSCustomer-war/src/java/servlet/CEMSServlet.java", "rawCode": "  private EventEntity registerEvent(HttpServletRequest request) throws ParseException {\n\n    System.out.println(\"CEMSServlet: registerEvent has started!\");\n    EventEntity ee = new EventEntity();\n\n    String title = request.getParameter(\"title\");\n    String eventName = request.getParameter(\"eventName\");\n    String name = request.getParameter(\"name\");\n    String eventType = request.getParameter(\"eventType\");\n    String email = request.getParameter(\"e-mail\");\n    String dateString = request.getParameter(\"startDate\");\n    System.out.println(\"startDate passed in is \" + dateString);\n    DateFormat formatter;\n    formatter = new SimpleDateFormat(\"MM/dd/yyyy\");\n    Date startDate = formatter.parse(dateString);\n    System.out.println(\"startDate is \" + startDate);\n\n    String endDateString = request.getParameter(\"endDate\");\n    System.out.println(\"startDate passed in is \" + endDateString);\n    Date endDate = formatter.parse(endDateString);\n\n    String phoneNumber = request.getParameter(\"contact\");\n    String address = request.getParameter(\"address\");\n    Integer eventScale = Integer.parseInt(request.getParameter(\"eventScale\"));\n    String countryOfResidence = request.getParameter(\"countryOfResidence\");\n    Double estimatedBudget = Double.parseDouble(request.getParameter(\"estimatedBudget\"));\n    String company = request.getParameter(\"company\");\n    String industry = request.getParameter(\"industry\");\n    boolean isPublic = Boolean.parseBoolean(request.getParameter(\"subscribe\"));\n    String preferredLanguage = request.getParameter(\"preferredLanguage\");\n\n    System.out.println(\"CEMSServlet:registerEvent: All data has been passed in already!\");\n\n    ee =\n        eventSessionBean.makeReservation(\n            eventName, eventType, eventName, title, name, email, eventScale, startDate, endDate);\n    ee =\n        eventSessionBean.completeReservation(\n            ee,\n            address,\n            phoneNumber,\n            countryOfResidence,\n            estimatedBudget,\n            company,\n            industry,\n            preferredLanguage,\n            isPublic);\n    System.out.println(\"CEMSServlet:registerEvent:Event has been created successfully!\");\n\n    return ee;\n  }\n"}, {"dataset": "getParameter", "exampleID": 2520, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 353, "focalAPIEnd": 388, "followUpCheck": "value == null || \"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value)", "checkType": "IF", "followUpCheckExpressionStart": 398, "followUpCheckExpressionEnd": 522, "followUpCheckBlockStart": 398, "followUpCheckBlockEnd": 628, "use": ["getSafePathInfo(httpServletRequest)", "doLogin(httpServletRequest,HttpServletResponse,Session,*,boolean)", "doError(httpServletRequest,HttpServletResponse,Session,int)", "getSafePathInfo(httpServletRequest)", "doLogin(httpServletRequest,HttpServletResponse,Session,*,boolean)", "doError(httpServletRequest,HttpServletResponse,Session,int)", "doError(httpServletRequest,HttpServletResponse,Session,int)", "includeGalleryNav(PrintWriter,httpServletRequest,Session,String)", "includeWorksite(httpServletRequest,HttpServletResponse,Session,Site,SitePage,String,String)"], "useStart": [562, 535, 1109, 1326, 1299, 1388, 1747, 2270, 2483], "useEnd": [591, 599, 1150, 1355, 1363, 1429, 1788, 2314, 2557], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sakai-mirror/portal/tree/master/portal-impl/impl/src/java/org/sakaiproject/portal/charon/CharonPortal.java", "rawCode": "  protected void doGallery(\n      HttpServletRequest req,\n      HttpServletResponse res,\n      Session session,\n      String siteId,\n      String pageId,\n      String toolContextPath)\n      throws ToolException, IOException {\n    // check to default site id\n    if (siteId == null) {\n      if (session.getUserId() == null) {\n        String forceLogin = req.getParameter(PARAM_FORCE_LOGIN);\n        if (forceLogin == null\n            || \"yes\".equalsIgnoreCase(forceLogin)\n            || \"true\".equalsIgnoreCase(forceLogin)) {\n          doLogin(req, res, session, URLUtils.getSafePathInfo(req), false);\n          return;\n        }\n        siteId = ServerConfigurationService.getGatewaySiteId();\n      } else {\n        siteId = SiteService.getUserSiteId(session.getUserId());\n      }\n    }\n\n    // if no page id, see if there was a last page visited for this site\n    if (pageId == null) {\n      pageId = (String) session.getAttribute(ATTR_SITE_PAGE + siteId);\n    }\n\n    // find the site, for visiting\n    Site site = null;\n    try {\n      site = getSiteVisit(siteId);\n    } catch (IdUnusedException e) {\n      doError(req, res, session, ERROR_GALLERY);\n      return;\n    } catch (PermissionException e) {\n      // if not logged in, give them a chance\n      if (session.getUserId() == null) {\n        doLogin(req, res, session, URLUtils.getSafePathInfo(req), false);\n      } else {\n        doError(req, res, session, ERROR_GALLERY);\n      }\n      return;\n    }\n\n    // find the page, or use the first page if pageId not found\n    SitePage page = site.getPage(pageId);\n    if (page == null) {\n      List pages = site.getOrderedPages();\n      if (!pages.isEmpty()) {\n        page = (SitePage) pages.get(0);\n      }\n    }\n    if (page == null) {\n      doError(req, res, session, ERROR_GALLERY);\n      return;\n    }\n\n    // store the last page visited\n    session.setAttribute(ATTR_SITE_PAGE + siteId, page.getId());\n\n    // form a context sensitive title\n    String title =\n        ServerConfigurationService.getString(\"ui.service\", \"Sakai\")\n            + \" : \"\n            + site.getTitle()\n            + \" : \"\n            + page.getTitle();\n\n    // start the response\n    PrintWriter out = startResponse(res, title, site.getSkin(), true);\n\n    // the 'little' top area\n    includeGalleryNav(out, req, session, siteId);\n\n    String siteType = calcSiteType(siteId);\n    out.println(\n        \"<div id=\\\"container\\\"\" + ((siteType != null) ? \" class=\\\"\" + siteType + \"\\\"\" : \"\") + \">\");\n\n    includeWorksite(req, res, session, site, page, toolContextPath, \"gallery\");\n    out.println(\"<div>\");\n\n    includeBottom(out);\n\n    // end the response\n    endResponse(out);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2521, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 431, "focalAPIEnd": 467, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setFecha_inicio(value)", "httpServletRequest.getParameter(String)"], "useStart": [413, 489], "useEnd": [468, 522], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cheto7/DSI_USB/tree/master/src/java/Reportes/DownloadXLS.java", "rawCode": "  @Override\n  public ActionForward execute(\n      ActionMapping mapping,\n      ActionForm form,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws Exception {\n\n    response.setContentType(\"application/octet-stream\");\n\n    ExcelCreator excelCreator = new ExcelCreator();\n\n    HSSFWorkbook workbook = excelCreator.createWorkbook(new ArrayList());\n\n    Periodo p = new Periodo();\n    p.setFecha_inicio(request.getParameter(\"fecha_inicio\"));\n    p.setFecha_fin(request.getParameter(\"fecha_fin\"));\n\n    response.setHeader(\n        \"Content-Disposition\", \"attachment; filename=MaterialCantidad\" + p.getFecha_fin() + \".xls\");\n\n    HSSFCellStyle headerCellStyle = workbook.createCellStyle();\n    HSSFFont boldFont = workbook.createFont();\n    boldFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);\n    headerCellStyle.setFont(boldFont);\n\n    HSSFCellStyle tituloStyle = workbook.createCellStyle();\n    HSSFFont tituloFont = workbook.createFont();\n    tituloFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);\n    tituloFont.setFontHeightInPoints((short) 12);\n    tituloFont.setUnderline(HSSFFont.U_SINGLE);\n    tituloStyle.setFont(tituloFont);\n\n    HSSFSheet sheet = workbook.createSheet(\"Listados\");\n    short cero = 0;\n    short uno = 1;\n    short dos = 2;\n    short width = 15000;\n    short contador = 1;\n\n    String fecha = DBMS.getInstance().obtenerFecha();\n\n    sheet.setColumnWidth(cero, width);\n    HSSFRow row = sheet.createRow(0);\n    HSSFCell cell = row.createCell(cero);\n    cell.setCellStyle(tituloStyle);\n    cell.setCellValue(\"Listados Generales EPP\");\n    row = sheet.createRow(contador++);\n    cell = row.createCell(cero);\n    cell.setCellStyle(headerCellStyle);\n    cell.setCellValue(\"Fecha: \" + fecha);\n\n    row = sheet.createRow(contador++);\n    cell = row.createCell(cero);\n    cell.setCellStyle(headerCellStyle);\n    cell.setCellValue(\"Listados clasificados por Material durante el período\");\n\n    contador++;\n    row = sheet.createRow(contador++);\n    cell = row.createCell(cero);\n    cell.setCellStyle(headerCellStyle);\n    cell.setCellValue(\"Equipo\");\n\n    cell = row.createCell(uno);\n    cell.setCellStyle(headerCellStyle);\n    cell.setCellValue(\"Funcionalidad\");\n\n    cell = row.createCell(dos);\n    cell.setCellStyle(headerCellStyle);\n    cell.setCellValue(\"Norma\");\n\n    cell = row.createCell((short) 3);\n    cell.setCellStyle(headerCellStyle);\n    cell.setCellValue(\"Talla\");\n\n    cell = row.createCell((short) 4);\n    cell.setCellStyle(headerCellStyle);\n    cell.setCellValue(\"Cantidad aprobada\");\n\n    cell = row.createCell((short) 5);\n    cell.setCellStyle(headerCellStyle);\n    cell.setCellValue(\"En existencia\");\n\n    // String usuario = (String) session.getAttribute(\"usuarioAutenticado\");\n    ArrayList<Equipo> pedidos = DBMS.getInstance().obtenerMaterialCantidad(p);\n\n    HSSFCell celltemp;\n    String areaAnterior = null;\n    for (short i = 0; i < pedidos.size(); i++) {\n      row = sheet.createRow(contador++);\n\n      if (!pedidos.get(i).getSector().equals(areaAnterior)) {\n        row = sheet.createRow(contador++);\n        celltemp = row.createCell((short) 0);\n        celltemp.setCellValue(pedidos.get(i).getSector());\n        celltemp.setCellStyle(headerCellStyle);\n        areaAnterior = pedidos.get(i).getSector();\n        row = sheet.createRow(contador++);\n      }\n\n      celltemp = row.createCell((short) 0);\n      celltemp.setCellValue(pedidos.get(i).getNombre_vista());\n\n      celltemp = row.createCell((short) 1);\n      celltemp.setCellValue(pedidos.get(i).getFuncionalidad());\n\n      celltemp = row.createCell((short) 2);\n      celltemp.setCellValue(pedidos.get(i).getNorma());\n\n      celltemp = row.createCell((short) 3);\n      celltemp.setCellValue(pedidos.get(i).getTalla());\n\n      celltemp = row.createCell((short) 4);\n      celltemp.setCellValue(pedidos.get(i).getCantidad());\n\n      celltemp = row.createCell((short) 5);\n      celltemp.setCellValue(pedidos.get(i).getSerial()); // existencia del equipo\n    }\n\n    ServletOutputStream out = response.getOutputStream();\n    workbook.write(out);\n\n    out.flush();\n\n    out.close();\n\n    return mapping.findForward(SUCCESS);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2522, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 200, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["val.find(value)", "setProperties(Supplier,httpServletRequest)"], "useStart": [322, 543], "useEnd": [338, 571], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ne-sachirou/nimunimu/tree/master/src/tk/c4se/halt/ih31/nimunimu/model/SupplierModel.java", "rawCode": "  /**\n   * @param req\n   * @param resp\n   * @throws DBAccessException\n   */\n  public void putRequest(HttpServletRequest req, HttpServletResponse resp)\n      throws DBAccessException {\n    val idStr = req.getParameter(\"id\");\n    val repo = new SupplierRepository();\n    Supplier supplier = null;\n    try {\n      supplier = repo.find(idStr);\n    } catch (DBAccessException e) {\n      e.printStackTrace();\n      throw e;\n    }\n    if (supplier == null) {\n      throw new DBAccessException(\"Supplier \" + idStr + \" is not found in DB.\");\n    }\n    setProperties(supplier, req);\n    try {\n      repo.update(supplier);\n    } catch (DBAccessException e1) {\n      e1.printStackTrace();\n      throw e1;\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2523, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 144, "focalAPIEnd": 167, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 219, "followUpCheckExpressionEnd": 235, "followUpCheckBlockStart": 219, "followUpCheckBlockEnd": 343, "use": ["httpServletRequest.getParameter(String)"], "useStart": [189], "useEnd": [213], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/larrytin/cloudlet/tree/master/core/server/src/test/java/org/cloudlet/core/servlet/JUnitServlet.java", "rawCode": "  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp)\n      throws ServletException, IOException {\n    String clz = req.getParameter(CLASS);\n    String method = req.getParameter(METHOD);\n    if (clz == null) {\n      PrintWriter w = resp.getWriter();\n      w.write(\"No test class is specified.\");\n      return;\n    }\n    String[] args;\n    if (method != null) {\n      args = new String[4];\n      args[0] = \"-c\";\n      args[1] = clz;\n      args[2] = \"-m\";\n      args[3] = method;\n    } else {\n      args = new String[2];\n      args[0] = \"-c\";\n      args[1] = clz;\n    }\n    try {\n      TestRunner runner = new TestRunner(new PrintStream(resp.getOutputStream()));\n      runner.start(args);\n    } catch (Exception e) {\n      e.printStackTrace(resp.getWriter());\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2524, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 255, "focalAPIEnd": 287, "followUpCheck": "StringUtils.isNotEmpty(value)", "checkType": "IF", "followUpCheckExpressionStart": 293, "followUpCheckExpressionEnd": 330, "followUpCheckBlockStart": 293, "followUpCheckBlockEnd": 2240, "use": ["decode(value)", "ICellTreedotService.getCellTreedotById(value)"], "useStart": [396, 502], "useEnd": [424, 549], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jior/isdp/tree/master/workspace/glaf-isdp/src/main/java/com/glaf/isdp/web/rest/IsdpDataTableResource.java", "rawCode": "  @GET\n  @POST\n  @Path(\"/treeJson\")\n  @ResponseBody\n  @Produces({MediaType.APPLICATION_OCTET_STREAM})\n  public byte[] treeJson(@Context HttpServletRequest request) {\n    ArrayNode responseJSON = new ObjectMapper().createArrayNode();\n    String moduleId = request.getParameter(\"moduleId\");\n    if (StringUtils.isNotEmpty(moduleId)) {\n      logger.debug(\"->moduleId:\" + moduleId);\n      moduleId = EncodeUtils.decode(moduleId);\n      logger.debug(\"moduleId:\" + moduleId);\n      CellTreedot cellTreedot = cellTreedotService.getCellTreedotById(moduleId);\n      if (cellTreedot != null) {\n        if (cellTreedot.getModetableId() != null) {\n          CellDataTable dataTable =\n              cellDataTableService.getCellDataTable(cellTreedot.getModetableId());\n          if (dataTable != null && dataTable.getTablename() != null) {\n            TablePageQuery query = new TablePageQuery();\n            query.setFirstResult(0);\n            query.setMaxResults(5000);\n            query.tableName(dataTable.getTablename());\n            query.orderAsc(\"parent_id\").orderAsc(\"listno\");\n            List<Map<String, Object>> rows = tablePageService.getTableData(query);\n            if (rows != null && !rows.isEmpty()) {\n              List<ITree> treeModels = new ArrayList<ITree>();\n              for (Map<String, Object> dataMap : rows) {\n                TreeTableModel tree = new TreeTableModel();\n                tree.setDataMap(dataMap);\n                tree.setId(ParamUtils.getString(dataMap, \"id\"));\n                tree.setIndexId(ParamUtils.getInt(dataMap, \"index_id\"));\n                tree.setParentId(ParamUtils.getInt(dataMap, \"parent_id\"));\n                tree.setIndexName(ParamUtils.getString(dataMap, \"name\"));\n                tree.setLevel(ParamUtils.getInt(dataMap, \"nlevel\"));\n                tree.setListno(ParamUtils.getInt(dataMap, \"listno\"));\n                tree.setTreeId(ParamUtils.getString(dataMap, \"treeid\"));\n                treeModels.add(tree);\n              }\n              logger.debug(\"treeModels size:\" + treeModels.size());\n              JacksonTreeHelper treeHelper = new JacksonTreeHelper();\n              responseJSON = treeHelper.getTreeArrayNode(treeModels);\n            }\n          }\n        }\n      }\n    }\n\n    try {\n      return responseJSON.toString().getBytes(\"UTF-8\");\n    } catch (IOException e) {\n      return responseJSON.toString().getBytes();\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2525, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 85, "focalAPIEnd": 111, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "parseInt(value)", "httpServletRequest.getParameter(String)"], "useStart": [121, 201, 184, 311], "useEnd": [158, 227, 228, 348], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rmuchoa/GestaoFrota/tree/master/sistema-carona-rp/src/java/controller/ViagemController.java", "rawCode": "  public Boolean rejeitarViagem(HttpServletRequest request) {\n    System.out.println(request.getParameter(\"id\") + \"--\" + request.getParameter(\"justificativa\"));\n    Integer viagemId = Integer.parseInt(request.getParameter(\"id\"));\n    viagem = viagemDAO.buscarPorId(viagemId);\n    viagem.setJustificativaRejeite(request.getParameter(\"justificativa\"));\n    viagem.setSituacao(new SituacaoDAO().buscarPorDescricao(\"REJEITADA\"));\n    for (SolicitacaoViagem solicitacao : viagem.getSolicitacoes()) {\n      solicitacao.setSituacao(new SituacaoDAO().buscarPorDescricao(\"REJEITADA\"));\n    }\n\n    notifica.notificaCanceladaViagem(viagem);\n    return viagemDAO.rejeitarViagem(viagem);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2526, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 286, "focalAPIEnd": 340, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getControlById(value)", "new WebEngineEvent(SessionContext,value)", "IResourceControl.attachResource(httpServletRequest,HttpServletResponse)"], "useStart": [393, 567, 684], "useEnd": [421, 600, 716], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xwic/jWic/tree/master/de.jwic.core/src/de/jwic/web/WebEngine.java", "rawCode": "  /**\n   * Render a jWic resource control.\n   *\n   * @param sc\n   * @param req\n   * @param res\n   * @param markReloaded\n   */\n  private void renderResourceControl(\n      SessionContext sc, HttpServletRequest req, HttpServletResponse res, boolean markReloaded) {\n\n    String controlId = req.getParameter(IResourceControl.URL_CONTROLID_PARAM);\n    try {\n      Control ctrl = controlId != null ? sc.getControlById(controlId) : null;\n      if (ctrl instanceof IResourceControl) {\n        IResourceControl control = (IResourceControl) ctrl;\n        WebEngineEvent event = new WebEngineEvent(sc, controlId);\n        fireEvent(EngineEvent.preResourceRequest, event);\n        try {\n          control.attachResource(req, res);\n        } catch (Throwable t) {\n          log.error(\"Error during IResourceControl.attachResource\", t);\n        }\n        fireEvent(EngineEvent.postResourceRequest, event);\n      }\n    } catch (ControlNotFoundException cnfe) {\n      // the control does no longer exist, send back notification\n      log.debug(\n          \"ResourceRequest to control id '\"\n              + controlId\n              + \"' failed. A control with this id does not exist.\");\n      try {\n        res.sendError(HttpServletResponse.SC_NOT_FOUND, \"A control with this ID can not be found.\");\n      } catch (IOException e) {\n        log.error(\"Error sending control not found exception.\", e);\n      }\n      return;\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2527, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 53, "focalAPIEnd": 79, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/INightmare/apache-isis/tree/master/framework/viewer/html/src/main/java/org/apache/isis/viewer/html/request/ServletRequest.java", "rawCode": "  @Override\n  public String getTaskId() {\n    return request.getParameter(\"id\");\n  }\n"}, {"dataset": "getParameter", "exampleID": 2528, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 145, "focalAPIEnd": 173, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["NavigatorServlet.pathForTestDeployment(value)", "new MoodleTabularReport(value,TestDeployment)", "MoodleTabularReport.handleReport(httpServletRequest,HttpServletResponse)"], "useStart": [222, 291, 336], "useEnd": [254, 330, 374], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gmfawcett/openmark-mvn/tree/master/branches/v1.14/src/om/tnavigator/reports/std/MoodleFormatReport.java", "rawCode": "  public void handleReport(String suffix, HttpServletRequest request, HttpServletResponse response)\n      throws Exception {\n    String testId = request.getParameter(\"test\");\n    TestDeployment deploy = new TestDeployment(ns.pathForTestDeployment(testId));\n\n    MoodleTabularReport report = new MoodleTabularReport(testId, deploy);\n    report.handleReport(request, response);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2529, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 177, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseInt(value)"], "useStart": [160], "useEnd": [203], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nickleus-j/StorySenseWeb/tree/master/StorySense/src/ajaxReviewer/StoryDetailGiver.java", "rawCode": "  @Override\n  public void executeCustomCode(HttpServletRequest request, HttpServletResponse response) {\n    response.setContentType(\"text/html\");\n    int sID = Integer.parseInt(request.getParameter(\"q\"));\n\n    DAOFactory myDAOFactory = DAOFactory.getInstance(DAOFactory.MYSQL);\n    AcomplishmentDAO myAcomDAO = myDAOFactory.createAcomplishmentDAO();\n    UserDAO myUserDao = myDAOFactory.createUserDAO();\n    Acomplishment acom;\n    User user;\n    try {\n      PrintWriter out = response.getWriter();\n      if (sID > 0) {\n        acom = myAcomDAO.getStory(sID);\n        user = myUserDao.getUser(acom.getAccountID());\n        out.write(\"<h2>\" + acom.getName() + \"</h2>\");\n        out.write(\"<h4>by: \" + user.getName() + \"</h4>\");\n      }\n    } catch (IOException ioE) {\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2530, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 279, "focalAPIEnd": 308, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Rpx.authInfo(value)"], "useStart": [513], "useEnd": [532], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/peacekeeper/personaldatastore/tree/master/pds.web.signin.rpxnow/src/main/java/pds/web/signin/rpxnow/RpxnowSignInPanel.java", "rawCode": "  @Override\n  public void onExternalCall(\n      PDSApplication pdsApplication, HttpServletRequest request, HttpServletResponse response)\n      throws IOException {\n\n    TaskQueueHandle taskQueueHandle = pdsApplication.getTaskQueueHandle();\n\n    // read token\n\n    String token = request.getParameter(\"token\");\n    log.debug(\"token: \" + token);\n\n    // make RPXnow call and parse response\n\n    Rpx rpx = new Rpx(this.rpxnowSignUpMethod.getApiKey(), this.rpxnowSignUpMethod.getBaseUrl());\n\n    Element rspElement = rpx.authInfo(token);\n    Element profileElement = (Element) rspElement.getElementsByTagName(\"profile\").item(0);\n    Element identifierElement = (Element) profileElement.getElementsByTagName(\"identifier\").item(0);\n    Element displayNameElement =\n        (Element) profileElement.getElementsByTagName(\"displayName\").item(0);\n\n    String rpxnowIdentifier = XmlUtils.getTextContent(identifierElement);\n    String rpxnowDisplayName =\n        displayNameElement != null ? XmlUtils.getTextContent(displayNameElement) : null;\n\n    log.debug(\"RPXnow identifier: \" + rpxnowIdentifier);\n    log.debug(\"RPXnow displayName: \" + rpxnowDisplayName);\n\n    String identifier = rpxnowDisplayName != null ? rpxnowDisplayName : rpxnowIdentifier;\n    XRI3Segment canonical = null;\n    if (rpxnowIdentifier.startsWith(\"xri://\"))\n      canonical = new XRI3Segment(rpxnowIdentifier.substring(6));\n    if (canonical == null\n        && (rpxnowIdentifier.startsWith(\"=!\") || rpxnowIdentifier.startsWith(\"@!\")))\n      canonical = new XRI3Segment(rpxnowIdentifier);\n    if (canonical == null) canonical = new XRI3Segment(\"=(\" + rpxnowIdentifier + \")\");\n\n    String endpointUrl = this.rpxnowSignUpMethod.getEndpoint();\n    if (!endpointUrl.endsWith(\"/\")) endpointUrl += \"/\";\n    endpointUrl += canonical.toString() + \"/\";\n\n    log.debug(\"identifier: \" + identifier);\n    log.debug(\"canonical: \" + canonical);\n    log.debug(\"endpoint: \" + endpointUrl);\n\n    // try to open the context\n\n    XdiClient xdiClient = pdsApplication.getXdiClient();\n\n    try {\n\n      final XdiEndpoint endpoint =\n          xdiClient.resolveEndpointManually(endpointUrl, identifier, canonical, null);\n\n      pdsApplication.enqueueTask(\n          taskQueueHandle,\n          new Runnable() {\n\n            public void run() {\n\n              try {\n\n                PDSApplication.getApp().openEndpoint(endpoint);\n              } catch (Exception ex) {\n\n                MessageDialog.problem(\n                    \"Sorry, we could not open your Personal Cloud: \" + ex.getMessage(), ex);\n                return;\n              }\n            }\n          });\n      response.sendRedirect(\"/\");\n    } catch (final Exception ex) {\n\n      pdsApplication.enqueueTask(\n          taskQueueHandle,\n          new Runnable() {\n\n            public void run() {\n\n              MessageDialog.problem(\n                  \"Sorry, we could not open your Personal Cloud: \" + ex.getMessage(), ex);\n              return;\n            }\n          });\n      response.sendRedirect(\"/\");\n      return;\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2531, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "InstantiationException", "exceptionHandlingCall": ["getName()", "getLogger(*)", "log(*,*,*)"], "tryExpressionStart": 447, "tryExpressionEnd": 451, "tryBlockStart": 447, "tryBlockEnd": 1404, "catchExpressionStart": 1040, "catchExpressionEnd": 1074, "catchBlockStart": 1040, "catchBlockEnd": 1164, "exceptionHandlingCallStart": [1099, 1082, 1082], "exceptionHandlingCallEnd": [1128, 1129, 1157], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 701, "focalAPIEnd": 737, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Sql.consulta(value)"], "useStart": [781], "useEnd": [796], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IndieC8/ISFE-20110020/tree/master/Documents/NetBeansProjects/ISFE-20110020/src/java/dao/ObtenerLocalidad.java", "rawCode": "  /**\n   * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.\n   *\n   * @param request servlet request\n   * @param response servlet response\n   * @throws ServletException is hay errores con el servlet\n   * @throws IOException si hay errores de entrada y/o salida de datos\n   */\n  protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    try {\n      response.setContentType(\"text/html;charset=UTF-8\");\n      PrintWriter out = response.getWriter();\n      Sql s = new Sql();\n      String sql =\n          \"select idLocalidad, nombreLocalidad from localidad where codigoPostal='\"\n              + request.getParameter(\"codigoPostal\")\n              + \"';\";\n      ResultSet rs = s.consulta(sql);\n      while (rs.next()) {\n        out.println(\n            \"<option value=\\\"\"\n                + rs.getInt(\"idLocalidad\")\n                + \"\\\">\"\n                + rs.getString(\"nombreLocalidad\")\n                + \"</option>\");\n      }\n\n    } catch (InstantiationException ex) {\n      Logger.getLogger(ObtenerEstado.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalAccessException ex) {\n      Logger.getLogger(ObtenerEstado.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (SQLException ex) {\n      Logger.getLogger(ObtenerEstado.class.getName()).log(Level.SEVERE, null, ex);\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2532, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpServletRequest.getParameter(name,)!=null", "guardType": "IF {", "guardExpressionStart": 6853, "guardExpressionEnd": 6896, "guardBlockStart": 6853, "guardBlockEnd": 7140, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 6857, "focalAPIEnd": 6887, "followUpCheck": "value.length >= 1", "checkType": "IF", "followUpCheckExpressionStart": 6975, "followUpCheckExpressionEnd": 7001, "followUpCheckBlockStart": 6975, "followUpCheckBlockEnd": 7045, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)"], "useStart": [7452, 7596], "useEnd": [7480, 7634], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hsr/oscars/tree/master/ion-war/src/main/java/edu/internet2/ion/ionui/servlets/IONUserList.java", "rawCode": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws IOException, ServletException {\n\n    String methodName = \"IONUserList\";\n    PrintWriter out = response.getWriter();\n\n    // authenticate the reservation\n    /* //porting comment\n    UserSession userSession = new UserSession();\n    String userName = userSession.checkSession(out, request, methodName);\n    if (userName == null) {\n    return;\n    }\n    */\n    // new addition for porting\n    String transId = PathTools.getLocalDomainId() + \"-IONUI-\" + UUID.randomUUID().toString();\n    OSCARSNetLogger netLogger = new OSCARSNetLogger();\n    netLogger.init(ServiceNames.SVC_IONUI, transId);\n    OSCARSNetLogger.setTlogger(netLogger);\n    this.log.info(netLogger.start(methodName));\n\n    ServletCore core = (ServletCore) getServletContext().getAttribute(ServletCore.CORE);\n    if (core == null) {\n      ServletUtils.fatalError(out, methodName);\n    }\n    CoordClient coordClient = core.getCoordClient();\n    // get authZ client\n    AuthZClient authZClient = core.getAuthZClient();\n    // AuthNclient\n    AuthNPolicyClient authNPolicyClient = core.getAuthNPolicyClient();\n\n    CheckSessionReply sessionReply = IONUIUtils.getUserSession(request, methodName, out, core);\n    String userName = sessionReply.getUserName();\n    this.log.debug(\"userName from sessionReply=\" + userName);\n    if (userName == null) {\n      this.log.warn(\n          netLogger.error(methodName, ErrSev.MINOR, \"No user session: cookies invalid, user null\"));\n      return;\n    }\n    // end new addition\n\n    response.setContentType(\"application/json\");\n\n    /*\n    AaaRmiInterface rmiClient = userSession.getAaaInterface();\n\n    //verify is admin\n    String organization = \"\";\n    boolean isAdmin = false;\n    try {\n    HashMap<String, Object> attrQueryParams = new HashMap<String, Object>();\n    attrQueryParams.put(\"objectType\", ModelObject.ATTRIBUTE);\n    attrQueryParams.put(\"operation\", ModelOperation.LIST);\n    attrQueryParams.put(\"listBy\", \"username\");\n    attrQueryParams.put(\"username\", userName);\n    HashMap<String, Object> attrQueryResponse =\n    rmiClient.manageAaaObjects(attrQueryParams);\n    List<Attribute> attrs = (List<Attribute>) attrQueryResponse.get(\"attributes\");\n    for(Attribute attr : attrs){\n    if(IONAuthenticateAdmin.ION_ADMIN_ATTR_NAME.equals(attr.getName())){\n    isAdmin = true;\n    break;\n    }\n    }\n    if(!isAdmin){\n    throw new Exception(\"You do not have administrator privileges\");\n    }\n\n    //get user institution\n    organization = rmiClient.getInstitution(userName);\n    } catch (Exception e) {\n    ServletUtils.handleFailure(out, log, e, methodName);\n    return;\n    }\n    */\n    // comment above for porting. Replaced by below block\n    // verify is admin\n    String organization = \"\";\n    boolean isAdmin = false;\n    try {\n      List<AttributeType> userAttributes = sessionReply.getAttributes();\n      isAdmin = IONUIUtils.isAdminUser(userAttributes);\n      if (!isAdmin) {\n        throw new Exception(\"You do not have administrator privileges\");\n      }\n\n      // get user institution\n      // get user institution from SessionReply object itself?\n      organization = IONUIUtils.getUsersOrg(userAttributes);\n      /*Object[] soapReq = new Object[]{userName};\n      Object[] resp = authNPolicyClient.invoke(\"listInsts\", soapReq);\n      ListInstsReply reply = (ListInstsReply) resp[0];\n      List<String> institutions = reply.getName();\n      log.error (\"obtained institutions list:\"+ institutions);\n      */\n    } catch (Exception e) {\n      ServletUtils.handleFailure(out, log, e, methodName);\n      return;\n    }\n\n    // query derby for allowed users\n    HashMap<String, Boolean> userMap = new HashMap<String, Boolean>();\n    Connection conn = null;\n    try {\n      // Connection conn = DriverManager.getConnection(\"jdbc:derby:ion\");\n      conn = DBUtil.getDBConnection();\n      PreparedStatement userStmt =\n          conn.prepareStatement(\n              \"SELECT username \" + \"FROM adminOrganizationUsers WHERE organization=?\");\n\n      this.log.debug(\n          \"SELECT username FROM adminOrganizationUsers WHERE organization=\" + organization);\n\n      userStmt.setString(1, organization);\n      ResultSet users = userStmt.executeQuery();\n      while (users.next()) {\n        userMap.put(users.getString(1), true);\n        this.log.debug(\"Got user: \" + users.getString(1));\n      }\n      conn.close();\n    } catch (SQLException e) {\n      this.log.error(e.getMessage());\n      ServletUtils.handleFailure(out, \"Unable to load users\", methodName);\n      try {\n        if (conn != null) conn.close();\n      } catch (SQLException sqlEx) {\n        ServletUtils.handleFailure(out, \"Unable to close DB Conn\", methodName);\n      }\n\n      return;\n    }\n\n    // query rmi for users\n    // commenting below block to replace for porting\n    /*\n    List<User> rmiUserList = null;\n    try{\n    HashMap<String, Object> userListRequest = new HashMap<String, Object>();\n    userListRequest.put(\"objectType\", ModelObject.USER);\n    userListRequest.put(\"operation\", ModelOperation.LIST);\n    userListRequest.put(\"listType\", \"plain\");\n    HashMap<String, Object> userListRmiResp = rmiClient.manageAaaObjects(userListRequest);\n    rmiUserList = (List<User>) userListRmiResp.get(\"users\");\n    }catch(Exception e){\n    this.log.error(e.getMessage());\n    ServletUtils.handleFailure(out, \"Unable to load users\", methodName);\n    return;\n    }\n    */\n    List<UserDetails> allUsers = null;\n    try {\n      ListUsersParams req = new ListUsersParams();\n      // TBD do we need any atributes?\n      // req.setAttribute(attributeName);\n      Object[] soapReq = new Object[] {req};\n      Object[] resp = authNPolicyClient.invoke(\"listUsers\", soapReq);\n      ListUsersReply reply = (ListUsersReply) resp[0];\n      allUsers = reply.getUserDetails();\n    } catch (OSCARSServiceException osEx) {\n      log.error(\"Exception while getting all users: \" + osEx.toString());\n      osEx.printStackTrace();\n      ServletUtils.handleFailure(out, log, osEx, methodName);\n      return;\n    }\n\n    // add all the users in our institution to the allowed user list\n    /*\n    for(User user : rmiUserList){\n    if (user.getInstitution().getName().equals(organization)) {\n    userMap.put(user.getLogin(), true);\n    }\n    }\n    */\n    // comment above to replace with below for porting\n    for (UserDetails user : allUsers) {\n      if (user.getInstitution().equals(organization)) {\n        userMap.put(user.getLogin(), true);\n        // TBD change to debug\n        log.debug(\"-Adding user \" + user.getLogin() + \" to the list\");\n      }\n    }\n\n    // combine user lists\n    Map<String, Object> outputMap = new HashMap<String, Object>();\n    ArrayList<HashMap<String, String>> userList = new ArrayList<HashMap<String, String>>();\n    String sortField = \"login\";\n    boolean sortAsc = true;\n    if (request.getParameter(\"sortBy\") != null) {\n      String[] sortParts = request.getParameter(\"sortBy\").split(\" \");\n      if (sortParts.length >= 1) {\n        sortField = sortParts[0];\n      }\n      if (sortParts.length == 2) {\n        sortAsc = \"asc\".equals(sortParts[1]);\n      }\n    }\n\n    // commented 2 lines below for porting\n    /*\n    User[] sortedUsers = new User[rmiUserList.size()];\n    rmiUserList.toArray(sortedUsers);\n    */\n    UserDetails[] sortedUsers = new UserDetails[allUsers.size()];\n    allUsers.toArray(sortedUsers);\n\n    int page = 0;\n    try {\n      page = Integer.parseInt(request.getParameter(\"page\"));\n    } catch (Exception e) {\n    }\n    int resultsPerPage = 10;\n    try {\n      resultsPerPage = Integer.parseInt(request.getParameter(\"resultsPerPage\"));\n    } catch (Exception e) {\n    }\n\n    int start = page * resultsPerPage;\n    int num_seen = 0;\n    boolean hasNextPage = false;\n\n    // commented below line for porting and replaced\n    // Arrays.sort(sortedUsers, new UserComparator<User>(sortField, sortAsc));\n    Arrays.sort(sortedUsers, new UserComparator<UserDetails>(sortField, sortAsc));\n    for (int i = 0; i < sortedUsers.length; i++) {\n      // this.log.debug(\"Got user from RMI \"+sortedUsers[i].getLogin());\n      this.log.debug(\"Got user from SQL-DB \" + sortedUsers[i].getLogin());\n      if (!userMap.containsKey(sortedUsers[i].getLogin())) {\n        this.log.debug(\"User \" + sortedUsers[i].getLogin() + \" not found\");\n        continue;\n      }\n\n      num_seen++;\n      if (num_seen < start) {\n        continue;\n      }\n\n      if (num_seen > start + resultsPerPage) {\n        hasNextPage = true;\n        break;\n      }\n\n      HashMap<String, String> userDataMap = new HashMap<String, String>();\n      userDataMap.put(\"login\", sortedUsers[i].getLogin());\n      userDataMap.put(\"lastName\", sortedUsers[i].getLastName());\n      userDataMap.put(\"firstName\", sortedUsers[i].getFirstName());\n      // userDataMap.put(\"organization\", sortedUsers[i].getInstitution().getName());\n      // commented above to replace with below for porting\n      userDataMap.put(\"organization\", sortedUsers[i].getInstitution());\n      userDataMap.put(\"phone\", sortedUsers[i].getPhonePrimary());\n      userDataMap.put(\"email\", sortedUsers[i].getEmailPrimary());\n      userList.add(userDataMap);\n    }\n    outputMap.put(\"page\", new Integer(page));\n    outputMap.put(\"hasNextPage\", new Boolean(hasNextPage));\n    outputMap.put(\"userData\", userList);\n    JSONObject jsonObject = JSONObject.fromObject(outputMap);\n\n    out.println(\"{}&&\" + jsonObject);\n    this.log.debug(methodName + \".finish\");\n  }\n"}, {"dataset": "getParameter", "exampleID": 2533, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.getServletPath()"], "configurationStart": [183], "configurationEnd": [207], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 242, "focalAPIEnd": 268, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["pageIndexResolve(value)"], "useStart": [286], "useEnd": [313], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bingluo/nauty/tree/master/src/cn/seu/cose/controller/CatController.java", "rawCode": "  @RequestMapping(\"/about/cat-{catId}\")\n  public String viewAboutCat(\n      Model model, @PathVariable(\"catId\") int catId, HttpServletRequest request) {\n    model.addAttribute(\"url\", request.getServletPath());\n    String pageIndex = (String) request.getParameter(\"pn\");\n    int index = pageIndexResolve(pageIndex);\n    return view(model, catId, index);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2534, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 90, "focalAPIEnd": 138, "followUpCheck": "!check(value,ErrorCode.ERROR_PARAMETER_APPID_EMPTY,ErrorCode.ERROR_PARAMETER_APPID_NULL)", "checkType": "IF", "followUpCheckExpressionStart": 369, "followUpCheckExpressionEnd": 473, "followUpCheckBlockStart": 369, "followUpCheckBlockEnd": 501, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)"], "useStart": [165, 247, 315], "useEnd": [217, 302, 362], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gckjdev/GroupBuy_API_Server/tree/master/src/com/orange/groupbuy/api/service/FindAllProductsWithPrice.java", "rawCode": "  @Override\n  public boolean setDataFromRequest(HttpServletRequest request) {\n    appId = request.getParameter(ServiceConstant.PARA_APPID);\n    String maxCountStr = request.getParameter(ServiceConstant.PARA_MAX_COUNT);\n    String startOffsetStr = request.getParameter(ServiceConstant.PRAR_START_OFFSET);\n    city = request.getParameter(ServiceConstant.PARA_CITY);\n\n    if (!check(\n        appId, ErrorCode.ERROR_PARAMETER_APPID_EMPTY, ErrorCode.ERROR_PARAMETER_APPID_NULL)) {\n      return false;\n    }\n\n    maxCount = Integer.parseInt(maxCountStr);\n    startOffset = Integer.parseInt(startOffsetStr);\n    return true;\n  }\n"}, {"dataset": "getParameter", "exampleID": 2535, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new ServletException(*)"], "tryExpressionStart": 240, "tryExpressionEnd": 244, "tryBlockStart": 240, "tryBlockEnd": 2439, "catchExpressionStart": 2375, "catchExpressionEnd": 2395, "catchBlockStart": 2375, "catchBlockEnd": 2439, "exceptionHandlingCallStart": [2409], "exceptionHandlingCallEnd": [2432], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 274, "focalAPIEnd": 315, "followUpCheck": "StringUtil.isEmpty(value)", "checkType": "IF", "followUpCheckExpressionStart": 323, "followUpCheckExpressionEnd": 360, "followUpCheckBlockStart": 323, "followUpCheckBlockEnd": 399, "use": ["getEndpoint(value)", "httpServletRequest.getParameter(String)", "new DropboxService(value)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getHeader(String)"], "useStart": [422, 793, 946, 1328, 1406, 1588], "useEnd": [463, 821, 978, 1360, 1434, 1619], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenNTF/SocialSDK/tree/master/domino/com.ibm.xsp.sbtsdk/src/main/java/com/ibm/xsp/extlib/sbt/files/type/DropboxFiles.java", "rawCode": "  @Override\n  public void serviceProxy(HttpServletRequest request, HttpServletResponse servletResponse)\n      throws ServletException, IOException {\n    // TODO make use of findUrl functionality here instead of cloning the EndpointBean\n    try {\n      String endpointName = request.getParameter(PARAM_ENDPOINT_NAME);\n      if (StringUtil.isEmpty(endpointName)) {\n        endpointName = TYPE;\n      }\n      Endpoint bean = EndpointFactory.getEndpoint(endpointName);\n\n      if (bean == null) {\n        throw new ServletException(\"AuthorizationBean not found in application scope\");\n      }\n\n      // TODO - padraic review with phil what clone is about\n      AbstractEndpoint clonedBean = (AbstractEndpoint) bean;\n      clonedBean.setUrl(\"https://api-content.dropbox.com/\");\n\n      String path = request.getParameter(\"path\");\n\n      // DropboxFiles Service - https://api-content.dropbox.com/<version>/files/dropbox/<path>\n      DropboxService svc = new DropboxService(endpointName);\n      String href = buildHref(path, bean);\n      HandlerInputStream handler = new HandlerInputStream();\n      Object file;\n      try {\n        file = svc.get(href, handler).getData();\n      } catch (ClientServicesException e) {\n        throw new FacesExceptionEx(e, \"Failed to execute proxy request\");\n      }\n\n      servletResponse.setContentType(request.getParameter(\"mimeType\"));\n\n      String nameUTF8 = URLEncoder.encode(request.getParameter(\"path\"), \"utf-8\"); // $NON-NLS-1$\n      nameUTF8 = nameUTF8.replaceAll(\"\\\\+\", \"%20\"); // $NON-NLS-1$ //$NON-NLS-2$\n\n      // PEDS954UQU\n      String userAgent = request.getHeader(\"User-Agent\"); // $NON-NLS-1$\n      if (StringUtil.isNotEmpty(userAgent) && userAgent.contains(\"Firefox\")) // $NON-NLS-1$\n        // use the format of value of non-acsii charset: filename*=\"utf8''nameUTF8\"\n        servletResponse.setHeader(\n            \"Content-Disposition\",\n            \"attachment; filename*=\\\"utf8\\'\\'\"\n                + nameUTF8\n                + '\"'); // $NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$\n      else\n        servletResponse.setHeader(\n            \"Content-Disposition\",\n            \"attachment; filename=\" + nameUTF8 + \"\"); // $NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$\n\n      OutputStream out = servletResponse.getOutputStream();\n      try {\n        StreamUtil.copyStream((InputStream) file, out);\n      } finally {\n        out.close();\n      }\n    } catch (Exception e) {\n      throw new ServletException(e);\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2536, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 85, "focalAPIEnd": 113, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "Colaborador.setNome(value)", "httpServletRequest.setAttribute(String,String)"], "useStart": [137, 260, 311, 378, 442, 535, 925], "useEnd": [175, 289, 341, 410, 468, 560, 1009], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PETSistemas/PETSistemas/tree/master/src/java/br/ufms/facom/petsistemas/controller/colaborador/ColaboradorServlet.java", "rawCode": "  private void atualizarColaborador(HttpServletRequest request) {\n\n    String nome = request.getParameter(\"nome\");\n    String dataNasc = request.getParameter(\"dataNascimento\");\n    Date dataNascimento = Utilitarios.stringParaData(dataNasc);\n    String email = request.getParameter(\"email\");\n    String lattes = request.getParameter(\"lattes\");\n    int situacao = Integer.valueOf(request.getParameter(\"situacao\"));\n    Long id = Long.parseLong(request.getParameter(\"id\"));\n\n    Colaborador colaborador = controladorBD.retrieve(id);\n\n    colaborador.setNome(nome);\n    colaborador.setDataNascimento(dataNascimento);\n    colaborador.setDataNascimentoFormatada(Utilitarios.dataParaString(dataNascimento));\n\n    colaborador.setSituacao(situacao);\n    colaborador.setEmail(email);\n    colaborador.setLinkLattes(lattes);\n\n    (new ColaboradorDAOImplementacao()).atualizar(colaborador);\n    controladorBD.atualizar(colaborador);\n\n    request.setAttribute(\"mensagem\", \"Colaborador \" + nome + \" cadastrado com sucesso!\");\n  }\n"}, {"dataset": "getParameter", "exampleID": 2537, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 200, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseInt(value)", "httpServletRequest.setAttribute(String,Tbowen)"], "useStart": [275, 303], "useEnd": [296, 339], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/believeus/believeus/tree/master/src/main/java/cn/believeus/action/AdminBowenAction.java", "rawCode": "  public ActionForward bowenDetail(\n      ActionMapping mapping,\n      ActionForm form,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws Exception {\n    String jId = request.getParameter(\"jId\");\n    Tbowen bowen = bowenService.getTBowenById(Integer.parseInt(jId));\n    request.setAttribute(\"bowen\", bowen);\n    return mapping.findForward(\"bowenDetail\");\n  }\n"}, {"dataset": "getParameter", "exampleID": 2538, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 179, "focalAPIEnd": 207, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "parseLong(value)"], "useStart": [231, 281, 336, 395, 450, 497, 828], "useEnd": [258, 307, 368, 425, 474, 524, 853], "hasFinally": 1, "cleanUpCall": ["PersistenceManager.close()"], "finallyExpressionStart": 2583, "finallyExpressionEnd": 2591, "finallyBlockStart": 2583, "finallyBlockEnd": 2620, "cleanUpCallStart": [2601], "cleanUpCallEnd": [2611], "url": "https://github.com/rodericj/TopDish/tree/master/server/old/java/TopDish-Memcache1/src/com/topdish/AddFlagServlet.java", "rawCode": "  public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    PersistenceManager pm = PMF.get().getPersistenceManager();\n\n    String reviewIDs = req.getParameter(\"reviewID\");\n    String photoIDs = req.getParameter(\"photoID\");\n    String dishIDs = req.getParameter(\"dishID\");\n    String restaurantIDs = req.getParameter(\"restaurantID\");\n    String restDishIds = req.getParameter(\"restDishId\");\n    String flagTypeS = req.getParameter(\"type\");\n    String comment = req.getParameter(\"comment\");\n\n    long reviewID = 0;\n    long photoID = 0;\n    long dishID = 0;\n    long restaurantID = 0;\n    long restDishId = 0;\n    int flagType = 0;\n\n    TDUser creator = null;\n    Review review = null;\n    Photo photo = null;\n    Dish dish = null;\n    Restaurant restaurant = null;\n    try {\n      reviewID = Long.parseLong(reviewIDs);\n    } catch (NumberFormatException e) {\n      // not a long\n    }\n\n    try {\n      photoID = Long.parseLong(photoIDs);\n    } catch (NumberFormatException e) {\n      // not a long\n    }\n\n    try {\n      dishID = Long.parseLong(dishIDs);\n    } catch (NumberFormatException e) {\n      // not a long\n    }\n\n    try {\n      restaurantID = Long.parseLong(restaurantIDs);\n    } catch (NumberFormatException e) {\n      // not a long\n    }\n\n    try {\n      restDishId = Long.parseLong(restDishIds);\n    } catch (NumberFormatException e) {\n      // not a long\n    }\n\n    try {\n      flagType = Integer.parseInt(flagTypeS);\n    } catch (NumberFormatException e) {\n      // not an integer\n    }\n\n    try {\n      creator = TDUserService.getUser(pm);\n    } catch (UserNotLoggedInException e) {\n      // forward to log in page\n      UserService userService = UserServiceFactory.getUserService();\n      String url =\n          \"flag.jsp?reviewID=\"\n              + reviewID\n              + \"&photoID=\"\n              + photoID\n              + \"&dishID=\"\n              + dishID\n              + \"&restaurantID=\"\n              + restaurantID\n              + \"&type=\"\n              + flagType;\n      resp.sendRedirect(userService.createLoginURL(url));\n    } catch (UserNotFoundException e) {\n      // user not found...panic?\n      // redirect back to front page\n      resp.sendRedirect(\"index.jsp\");\n    }\n\n    if (dishID != 0) {\n      try {\n        dish = pm.getObjectById(Dish.class, dishID);\n        Flag flag = new Flag(flagType, creator.getKey(), dish.getCreator(), comment);\n\n        pm.makePersistent(flag);\n        dish.addFlag(flag);\n        creator.addFlag(flag);\n        pm.makePersistent(dish);\n        pm.makePersistent(creator);\n      } finally {\n        pm.close();\n      }\n\n      // TODO: find a better place to redirect\n      resp.sendRedirect(\"dishDetail.jsp?dishID=\" + dishID);\n    } else if (restaurantID != 0) {\n      try {\n        restaurant = pm.getObjectById(Restaurant.class, restaurantID);\n        Flag flag = new Flag(flagType, creator.getKey(), restaurant.getCreator(), comment);\n\n        pm.makePersistent(flag);\n        restaurant.addFlag(flag);\n        creator.addFlag(flag);\n        pm.makePersistent(restaurant);\n        pm.makePersistent(creator);\n      } finally {\n        pm.close();\n      }\n\n      if (restDishId > 0) resp.sendRedirect(\"dishDetail.jsp?dishID=\" + restDishId);\n      else resp.sendRedirect(\"index.jsp\");\n    } else if (reviewID != 0 || photoID != 0) {\n      Flag flag = null;\n\n      if (reviewID != 0) {\n        try {\n          review = pm.getObjectById(Review.class, reviewID);\n          flag = new Flag(flagType, creator.getKey(), review.getCreator(), comment);\n\n          pm.makePersistent(flag);\n          review.addFlag(flag);\n          creator.addFlag(flag);\n          pm.makePersistent(review);\n          pm.makePersistent(creator);\n        } finally {\n          pm.close();\n        }\n\n        // TODO: find a better place to redirect\n        resp.sendRedirect(\"index.jsp\");\n      }\n      if (photoID != 0) {\n        try {\n          photo = pm.getObjectById(Photo.class, photoID);\n          flag = new Flag(flagType, creator.getKey(), photo.getCreator(), comment);\n\n          pm.makePersistent(flag);\n          photo.addFlag(flag);\n          creator.addFlag(flag);\n          pm.makePersistent(photo);\n          pm.makePersistent(flag);\n        } finally {\n          pm.close();\n        }\n\n        // TODO: find a better place to redirect\n        resp.sendRedirect(\"index.jsp\");\n      }\n    } else {\n      // redirect back to front page\n      resp.sendRedirect(\"index.jsp\");\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2539, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.getSession()"], "configurationStart": [576], "configurationEnd": [596], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 750, "focalAPIEnd": 783, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "valueOf(value)", "showForm(httpServletRequest,HttpServletResponse,BindException)", "showForm(httpServletRequest,HttpServletResponse,BindException)", "httpServletRequest.getContextPath()"], "useStart": [815, 891, 953, 1029, 1620, 1801, 1885], "useEnd": [851, 926, 986, 1050, 1655, 1836, 1909], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jblaya/openmrs-core/tree/master/web/src/main/java/org/openmrs/web/controller/patient/MergePatientsFormController.java", "rawCode": "  /**\n   * The onSubmit function receives the form/command object that was modified by the input form and\n   * saves it to the db\n   *\n   * @see\n   *     org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,\n   *     javax.servlet.http.HttpServletResponse, java.lang.Object,\n   *     org.springframework.validation.BindException)\n   */\n  protected ModelAndView onSubmit(\n      HttpServletRequest request, HttpServletResponse response, Object obj, BindException errors)\n      throws Exception {\n\n    HttpSession httpSession = request.getSession();\n\n    if (Context.isAuthenticated()) {\n      String view = getSuccessView();\n      PatientService ps = Context.getPatientService();\n\n      String pref = request.getParameter(\"preferred\");\n      String[] nonPreferred = request.getParameter(\"nonPreferred\").split(\",\");\n      String redirectURL = request.getParameter(\"redirectURL\");\n      String modalMode = request.getParameter(\"modalMode\");\n\n      Patient preferred = ps.getPatient(Integer.valueOf(pref));\n      List<Patient> notPreferred = new ArrayList<Patient>();\n\n      view = view + \"?patientId=\" + preferred.getPatientId();\n      for (int i = 0; i < nonPreferred.length; i++) {\n        notPreferred.add(ps.getPatient(Integer.valueOf(nonPreferred[i])));\n        view = view + \"&patientId=\" + nonPreferred[i];\n      }\n\n      try {\n        ps.mergePatients(preferred, notPreferred);\n      } catch (APIException e) {\n        log.error(\"Unable to merge patients\", e);\n        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR, \"Patient.merge.fail\");\n        return showForm(request, response, errors);\n      }\n\n      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR, \"Patient.merged\");\n\n      if (\"true\".equals(modalMode)) {\n        return showForm(request, response, errors);\n      }\n\n      int index = redirectURL.indexOf(request.getContextPath(), 2);\n      if (index != -1) {\n        redirectURL = redirectURL.substring(index);\n        if (redirectURL.contains(getSuccessView())) redirectURL = \"findDuplicatePatients.htm\";\n      } else redirectURL = view;\n\n      return new ModelAndView(new RedirectView(redirectURL));\n    }\n\n    return new ModelAndView(new RedirectView(getFormView()));\n  }\n"}, {"dataset": "getParameter", "exampleID": 2540, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 193, "focalAPIEnd": 221, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "setNome(value)"], "useStart": [244, 296, 408, 461, 510, 579, 633, 689, 816], "useEnd": [275, 325, 439, 490, 538, 608, 665, 721, 859], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RemoSperlongano/AgenziaViaggiVoyager/tree/master/AgenziaDiViaggio/src/gestioneutenti/servlet/NuovoUtente.java", "rawCode": "  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    System.err.println(\"servlet NUOVO UTENTE\");\n    String nome = request.getParameter(\"nome\");\n    String cognome = request.getParameter(\"cognome\");\n    String citta = request.getParameter(\"citta\");\n    GregorianCalendar nascita =\n        DateUtils.getGregorianCalendarFromString(request.getParameter(\"nascita\"));\n    String sesso = request.getParameter(\"sesso\");\n    String mail = request.getParameter(\"mail\");\n    int ruolo = (int) Integer.parseInt(request.getParameter(\"ruolo\"));\n    String username = request.getParameter(\"username\");\n    String password = request.getParameter(\"password\");\n\n    System.err.println(\"servlet NUOVO UTENTE\" + nome);\n\n    UtenteBean utenteBean =\n        new UtenteBean()\n            .setNome(nome)\n            .setCognome(cognome)\n            .setCitta(citta)\n            .setNascita(nascita)\n            .setSesso(sesso)\n            .setMail(mail)\n            .setRuolo(FactoryRuoli.getInstance().assegnaRuolo(ruolo))\n            .setUsername(username)\n            .setPassword(password);\n\n    System.err.println(\"servlet NUOVO UTENTE BEAN\" + utenteBean.getNome());\n\n    try {\n      this.controllerAmministraUtenti.nuovo(utenteBean);\n    } catch (DatiUtenteInconsistentiException | LoginInconsistenteException e) {\n      System.err.println(\"servlet NUOVO UTENTE: ERRORE!!!\");\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2541, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 144, "focalAPIEnd": 196, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 622, "followUpCheckExpressionEnd": 649, "followUpCheckBlockStart": 622, "followUpCheckBlockEnd": 1106, "use": ["value.split(String)", "setSessionObject(httpServletRequest,*,String)", "setSessionObject(httpServletRequest,*,String)", "setSessionObject(httpServletRequest,*,String)", "setSessionObject(httpServletRequest,*,String)", "setSessionObject(httpServletRequest,*,String)", "setSessionObject(httpServletRequest,*,String)"], "useStart": [671, 3213, 3303, 3400, 3490, 3568, 3642], "useEnd": [697, 3297, 3394, 3484, 3562, 3636, 3712], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cadsr-uml-model-browser/tree/master/software/umlmodelbrowser/src/java/gov/nih/nci/ncicb/cadsr/umlmodelbrowser/struts/actions/UMLSearchAction.java", "rawCode": "  private void getFormValuesFromTreeCrumb(\n      HttpServletRequest request, UMLBrowserQueryService queryService) {\n    String treeBreadCrumb = request.getParameter(TreeConstants.TREE_BREADCRUMBS);\n    log.info(\"Setting formValues from TreeBreadCrumb: \" + treeBreadCrumb);\n    String[] treeCrumbs = null;\n    String caDSRContext = \"\";\n    String context = \"\";\n    String projectsText = \"\";\n    String projectName = \"\";\n    String treeCrumbProjectId = \"\";\n    String subProjectName = \"\";\n    String treeCrumbSubProjectId = \"\";\n    String packageName = \"\";\n    String treeCrumbPackageId = \"\";\n    String className = \"\";\n    if (treeBreadCrumb != null) {\n      treeCrumbs = treeBreadCrumb.split(\">>\");\n      for (int i = 0; i < treeCrumbs.length; i++) {\n        if (i == 0) caDSRContext = treeCrumbs[0];\n        if (i == 1) context = treeCrumbs[1];\n        if (i == 2) projectsText = treeCrumbs[2];\n        if (i == 3) projectName = treeCrumbs[3];\n        if (i == 4) subProjectName = treeCrumbs[4];\n        if (i == 5) packageName = treeCrumbs[5];\n        if (i == 6) className = treeCrumbs[6];\n      }\n    }\n    List<Project> formProjects = new ArrayList<Project>();\n    List<SubProject> formSubProjects = new ArrayList<SubProject>();\n    List<UMLPackageMetadata> formPackages = new ArrayList<UMLPackageMetadata>();\n    if (projectName != null || !projectName.equals(\"\")) {\n      Project formProject = new Project();\n      formProject.setLongName(projectName);\n      formProjects = queryService.findProject(formProject);\n      // System.out.println(\".... found \"+formProjects.size()+\" projects with LongName\n      // \"+projectName);\n      for (Object obj : formProjects) {\n        Project proj = (Project) obj;\n        treeCrumbProjectId = proj.getId(); // //Get Project Id to set in form\n        // System.out.println(\"........ProjectId: \"+proj.getId());\n        formSubProjects = (List<SubProject>) proj.getSubProjectCollection();\n        log.debug(\"--- \" + formSubProjects.size() + \" subProjects for the project \" + projectName);\n        if (formSubProjects.size() != 0) {\n          for (Object oSub : formSubProjects) {\n            SubProject formSub = (SubProject) oSub;\n            if (subProjectName.equalsIgnoreCase(formSub.getName())) {\n              treeCrumbSubProjectId = formSub.getId();\n              // System.out.println(\"........Sub_ProjectId: \"+formSub.getId());\n            }\n          } // Get subproject Id to set in form\n        } else { // If subproject does not exist for a Project, Rearrange breadcrumbs\n          log.debug(\"---Rearranging BreadCrumbs\");\n          className = packageName;\n          packageName = subProjectName;\n        }\n        formPackages = (List<UMLPackageMetadata>) proj.getUMLPackageMetadataCollection();\n        if (!packageName.equals(\"\")) {\n          for (Object oPackage : formPackages) {\n            UMLPackageMetadata formPackage = (UMLPackageMetadata) oPackage;\n            if (packageName.equalsIgnoreCase(formPackage.getName())) {\n              treeCrumbPackageId = formPackage.getId();\n\n              // System.out.println(\"........PackageId: \"+formPackage.getId());\n            }\n          }\n        } // Get package Id to set in form\n      }\n    }\n    setSessionObject(request, UMLBrowserFormConstants.PROJECT_IDSEQ, treeCrumbProjectId);\n    setSessionObject(request, UMLBrowserFormConstants.SUB_PROJECT_IDSEQ, treeCrumbSubProjectId);\n    setSessionObject(request, UMLBrowserFormConstants.PACKAGE_IDSEQ, treeCrumbPackageId);\n    setSessionObject(request, UMLBrowserFormConstants.CLASS_NAME, className);\n    setSessionObject(request, UMLBrowserFormConstants.ATTRIBUT_NAME, \"\");\n    setSessionObject(request, UMLBrowserFormConstants.PROJECT_VERSION, \"\");\n  }\n"}, {"dataset": "getParameter", "exampleID": 2542, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 364, "focalAPIEnd": 396, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["readNewsFile(value)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "showJSP(httpServletRequest,HttpServletResponse,String)", "httpServletRequest.getParameter(String)", "writeNewsFile(value,String)", "showJSP(httpServletRequest,HttpServletResponse,String)", "showJSP(httpServletRequest,HttpServletResponse,String)"], "useStart": [497, 592, 691, 763, 937, 1012, 1071, 1227], "useEnd": [540, 634, 725, 831, 965, 1062, 1139, 1295], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DSpace/DSpace-SVN-Deprecated/tree/master/dspace-jspui/dspace-jspui-api/src/main/java/org/dspace/app/webui/servlet/admin/NewsEditServlet.java", "rawCode": "  protected void doDSPost(Context c, HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException, SQLException, AuthorizeException {\n    // Get submit button\n    String button = UIUtil.getSubmitButton(request, \"submit\");\n\n    String news = \"\";\n\n    // Are we editing the top news or the sidebar news?\n    String position = request.getParameter(\"position\");\n\n    if (button.equals(\"submit_edit\")) {\n      // get the existing text from the file\n      news = ConfigurationManager.readNewsFile(position);\n\n      // pass the position back to the JSP\n      request.setAttribute(\"position\", position);\n\n      // pass the existing news back to the JSP\n      request.setAttribute(\"news\", news);\n\n      // show news edit page\n      JSPManager.showJSP(request, response, \"/dspace-admin/news-edit.jsp\");\n    } else if (button.equals(\"submit_save\")) {\n      // get text string from form\n      news = (String) request.getParameter(\"news\");\n\n      // write the string out to file\n      ConfigurationManager.writeNewsFile(position, news);\n\n      JSPManager.showJSP(request, response, \"/dspace-admin/news-main.jsp\");\n    } else {\n      // the user hit cancel, so return to the main news edit page\n      JSPManager.showJSP(request, response, \"/dspace-admin/news-main.jsp\");\n    }\n\n    c.complete();\n  }\n"}, {"dataset": "getParameter", "exampleID": 2543, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 184, "focalAPIEnd": 212, "followUpCheck": "StringUtils.isNotEmpty(value)", "checkType": "IF", "followUpCheckExpressionStart": 218, "followUpCheckExpressionEnd": 251, "followUpCheckBlockStart": 218, "followUpCheckBlockEnd": 306, "use": ["new ModelAndView(value,ModelMap)"], "useStart": [267], "useEnd": [299], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jior/wechat/tree/master/src/main/java/com/glaf/wechat/web/springmvc/WxContentController.java", "rawCode": "  @RequestMapping(\"/choose\")\n  public ModelAndView choose(HttpServletRequest request, ModelMap modelMap) {\n    RequestUtils.setRequestParameterToAttribute(request);\n\n    String view = request.getParameter(\"view\");\n    if (StringUtils.isNotEmpty(view)) {\n      return new ModelAndView(view, modelMap);\n    }\n\n    String x_view = ViewProperties.getString(\"wxContent.choose\");\n    if (StringUtils.isNotEmpty(x_view)) {\n      return new ModelAndView(x_view, modelMap);\n    }\n\n    return new ModelAndView(\"/wx/content/choose_contents\", modelMap);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2544, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 164, "focalAPIEnd": 186, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseLong(value)", "getDefaultModel(httpServletRequest)"], "useStart": [149, 351], "useEnd": [187, 371], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdwyah/orig-myhippocampus/tree/master/src/main/java/com/aavu/server/web/controllers/ShowTopicController.java", "rawCode": "  @Override\n  protected ModelAndView handleRequestInternal(HttpServletRequest req, HttpServletResponse arg1)\n      throws Exception {\n\n    long id = Long.parseLong(req.getParameter(\"id\"));\n\n    Topic result = topicService.getForID(id);\n    List<FullTopicIdentifier> onThisIsland = topicService.getTopicIdsWithTag(id);\n\n    Map<String, Object> model = getDefaultModel(req);\n    model.put(\"topic\", result);\n    model.put(\"onThisIsland\", onThisIsland);\n    model.put(\"command\", new SearchCommand());\n\n    return new ModelAndView(getView(), model);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2545, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 183, "focalAPIEnd": 215, "followUpCheck": "value == null || value.length() == 0", "checkType": "IF", "followUpCheckExpressionStart": 221, "followUpCheckExpressionEnd": 268, "followUpCheckBlockStart": 221, "followUpCheckBlockEnd": 325, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guoliqiang/coding/tree/master/third_part/hadoop/hadoop-1.1.2/src/hdfs/org/apache/hadoop/hdfs/server/namenode/DfsServlet.java", "rawCode": "  /** Get filename from the request */\n  protected String getFilename(HttpServletRequest request, HttpServletResponse response)\n      throws IOException {\n    final String filename = request.getParameter(\"filename\");\n    if (filename == null || filename.length() == 0) {\n      throw new IOException(\"Invalid filename\");\n    }\n    return filename;\n  }\n"}, {"dataset": "getParameter", "exampleID": 2546, "initialization": ["HttpServletRequest httpServletRequest = PojoInvocation.getRequest()", "String name = ActionMapping.getParameter()"], "initializationStart": [86, 303], "initializationEnd": [109, 325], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(name==null)", "guardType": "IF {", "guardExpressionStart": 331, "guardExpressionEnd": 349, "guardBlockStart": 331, "guardBlockEnd": 392, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 543, "focalAPIEnd": 570, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getMethod(Method[],value)"], "useStart": [592], "useEnd": [622], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/seasarorg/s2struts/tree/master/s2struts/src/main/java/org/seasar/struts/pojo/commands/DispatchCommand.java", "rawCode": "  public String execute(PojoInvocation invocation) {\n    HttpServletRequest request = invocation.getRequest();\n    ActionMapping mapping = invocation.getActionMapping();\n    Class actionInterface = invocation.getActionInterface();\n    Object action = invocation.getActionInstance();\n\n    String param = mapping.getParameter();\n    if (param == null) {\n      return invocation.execute();\n    }\n\n    Method[] methods = actionInterface.getMethods();\n    if (methods.length < 2) {\n      return invocation.execute();\n    }\n\n    String methodName = request.getParameter(param);\n    Method method = getMethod(methods, methodName);\n    if (method == null) {\n      return invocation.execute();\n    }\n    return (String) MethodUtil.invoke(method, action, null);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2547, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 193, "focalAPIEnd": 221, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "getIntParameter(httpServletRequest,String,int)", "getIntParameter(httpServletRequest,String,int)", "writePDFContent(httpServletRequest,HttpServletResponse,JFreeChart[],Statistic[],*,*,int,int)", "getIntParameter(httpServletRequest,String,int)", "getIntParameter(httpServletRequest,String,int)", "generateSparklinesGraph(value,int,int,String,*,*,*)", "getIntParameter(httpServletRequest,String,int)", "getIntParameter(httpServletRequest,String,int)", "generateGraph(value,int,int,String,*,*,*)"], "useStart": [247, 307, 363, 430, 657, 723, 2404, 2571, 2639, 2718, 2988, 3056, 3136], "useEnd": [281, 336, 396, 457, 706, 773, 2496, 2620, 2688, 2955, 3037, 3106, 3363], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vyloy/lnvc/tree/master/lvmc/openfire_src/src/plugins/monitoring/src/java/org/jivesoftware/openfire/reporting/graph/GraphServlet.java", "rawCode": "  @Override\n  protected void service(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    // retrieve parameters\n    String statisticKey = request.getParameter(\"stat\");\n    String timePeriod = request.getParameter(\"timeperiod\");\n    String graphcolor = request.getParameter(\"color\");\n    boolean sparkLines = request.getParameter(\"sparkline\") != null;\n    boolean pdfFormat = request.getParameter(\"pdf\") != null;\n    long[] dateRange = GraphEngine.parseTimePeriod(timePeriod);\n    int width;\n    int height;\n\n    if (pdfFormat) {\n      // PDF A4 page = 595 wide - (50px * 2 margins) = 495\n      width = ParamUtils.getIntParameter(request, \"width\", 495);\n      height = ParamUtils.getIntParameter(request, \"height\", 252);\n      JFreeChart[] charts;\n      Statistic[] stats;\n      if (request.getParameter(\"pdf\").equalsIgnoreCase(\"all\")) {\n        String[] statKeys = statsViewer.getAllHighLevelStatKeys();\n        List<String> statList = Arrays.asList(statKeys);\n        Collections.sort(\n            statList,\n            new Comparator<String>() {\n              public int compare(String stat1, String stat2) {\n                String statName1 = statsViewer.getStatistic(stat1)[0].getName();\n                String statName2 = statsViewer.getStatistic(stat2)[0].getName();\n                return statName1.toLowerCase().compareTo(statName2.toLowerCase());\n              }\n            });\n        charts = new JFreeChart[statList.size()];\n        stats = new Statistic[statList.size()];\n        int index = 0;\n        for (String statName : statList) {\n          stats[index] = statsViewer.getStatistic(statName)[0];\n          charts[index] =\n              graphEngine.generateChart(\n                  statName,\n                  width,\n                  height,\n                  graphcolor,\n                  dateRange[0],\n                  dateRange[1],\n                  (int) dateRange[2]);\n          index++;\n        }\n      } else {\n        charts =\n            new JFreeChart[] {\n              graphEngine.generateChart(\n                  statisticKey,\n                  width,\n                  height,\n                  graphcolor,\n                  dateRange[0],\n                  dateRange[1],\n                  (int) dateRange[2])\n            };\n        stats = new Statistic[] {statsViewer.getStatistic(statisticKey)[0]};\n      }\n      writePDFContent(request, response, charts, stats, dateRange[0], dateRange[1], width, height);\n    } else {\n      byte[] chart;\n      if (sparkLines) {\n        width = ParamUtils.getIntParameter(request, \"width\", 200);\n        height = ParamUtils.getIntParameter(request, \"height\", 50);\n        chart =\n            graphEngine.generateSparklinesGraph(\n                statisticKey,\n                width,\n                height,\n                graphcolor,\n                dateRange[0],\n                dateRange[1],\n                (int) dateRange[2]);\n      } else {\n        width = ParamUtils.getIntParameter(request, \"width\", 590);\n        height = ParamUtils.getIntParameter(request, \"height\", 300);\n        chart =\n            graphEngine.generateGraph(\n                statisticKey,\n                width,\n                height,\n                graphcolor,\n                dateRange[0],\n                dateRange[1],\n                (int) dateRange[2]);\n      }\n\n      writeImageContent(response, chart, \"image/png\");\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2548, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 327, "focalAPIEnd": 354, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["equalsIgnoreCase(value)", "httpServletRequest.getReader()"], "useStart": [306, 426], "useEnd": [355, 445], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/panbasten/BA/tree/master/kettle/kettle-base/src/main/java/org/pentaho/di/www/AddJobServlet.java", "rawCode": "  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    if (isJettyMode() && !request.getRequestURI().startsWith(CONTEXT_PATH)) {\n      return;\n    }\n\n    if (log.isDebug()) logDebug(\"Addition of job requested\");\n\n    boolean useXML = \"Y\".equalsIgnoreCase(request.getParameter(\"xml\"));\n\n    PrintWriter out = response.getWriter();\n    BufferedReader in = request.getReader(); // read from the client\n    if (log.isDetailed()) logDetailed(\"Encoding: \" + request.getCharacterEncoding());\n\n    if (useXML) {\n      response.setContentType(\"text/xml\");\n      out.print(XMLHandler.getXMLHeader());\n    } else {\n      response.setContentType(\"text/html\");\n      out.println(\"<HTML>\");\n      out.println(\"<HEAD><TITLE>Add job</TITLE></HEAD>\");\n      out.println(\"<BODY>\");\n    }\n\n    response.setStatus(HttpServletResponse.SC_OK);\n\n    try {\n      // First read the complete transformation in memory from the request\n      int c;\n      StringBuffer xml = new StringBuffer();\n      while ((c = in.read()) != -1) {\n        xml.append((char) c);\n      }\n\n      // Parse the XML, create a job configuration\n      //\n      // System.out.println(xml);\n      //\n      JobConfiguration jobConfiguration = JobConfiguration.fromXML(xml.toString());\n      JobMeta jobMeta = jobConfiguration.getJobMeta();\n      JobExecutionConfiguration jobExecutionConfiguration =\n          jobConfiguration.getJobExecutionConfiguration();\n      jobMeta.setLogLevel(jobExecutionConfiguration.getLogLevel());\n      jobMeta.setArguments(jobExecutionConfiguration.getArgumentStrings());\n      jobMeta.injectVariables(jobExecutionConfiguration.getVariables());\n\n      // If there was a repository, we know about it at this point in time.\n      //\n      final Repository repository = jobConfiguration.getJobExecutionConfiguration().getRepository();\n\n      String carteObjectId = UUID.randomUUID().toString();\n      SimpleLoggingObject servletLoggingObject =\n          new SimpleLoggingObject(CONTEXT_PATH, LoggingObjectType.CARTE, null);\n      servletLoggingObject.setContainerObjectId(carteObjectId);\n      servletLoggingObject.setLogLevel(jobExecutionConfiguration.getLogLevel());\n\n      // Create the transformation and store in the list...\n      //\n      final Job job = new Job(repository, jobMeta, servletLoggingObject);\n\n      // Setting variables\n      //\n      job.initializeVariablesFrom(null);\n      job.getJobMeta().setInternalKettleVariables(job);\n      job.injectVariables(jobConfiguration.getJobExecutionConfiguration().getVariables());\n      job.setIgnoringCheckpoints(jobExecutionConfiguration.isIgnoringCheckpoint());\n\n      // Also copy the parameters over...\n      //\n      job.copyParametersFrom(jobMeta);\n      job.clearParameters();\n      String[] parameterNames = job.listParameters();\n      for (int idx = 0; idx < parameterNames.length; idx++) {\n        // Grab the parameter value set in the job entry\n        //\n        String thisValue = jobExecutionConfiguration.getParams().get(parameterNames[idx]);\n        if (!Const.isEmpty(thisValue)) {\n          // Set the value as specified by the user in the job entry\n          //\n          jobMeta.setParameterValue(parameterNames[idx], thisValue);\n        }\n      }\n      jobMeta.activateParameters();\n\n      job.setSocketRepository(getSocketRepository());\n\n      getJobMap().addJob(job.getJobname(), carteObjectId, job, jobConfiguration);\n\n      // Make sure to disconnect from the repository when the job finishes.\n      //\n      if (repository != null) {\n        job.addJobListener(\n            new JobAdapter() {\n              public void jobFinished(Job job) {\n                repository.disconnect();\n              }\n            });\n      }\n\n      String message =\n          \"Job '\" + job.getJobname() + \"' was added to the list with id \" + carteObjectId;\n\n      if (useXML) {\n        out.println(new WebResult(WebResult.STRING_OK, message, carteObjectId));\n      } else {\n        out.println(\"<H1>\" + message + \"</H1>\");\n        out.println(\n            \"<p><a href=\\\"\"\n                + convertContextPath(GetJobStatusServlet.CONTEXT_PATH)\n                + \"?name=\"\n                + job.getJobname()\n                + \"&id=\"\n                + carteObjectId\n                + \"\\\">Go to the job status page</a><p>\");\n      }\n    } catch (Exception ex) {\n      if (useXML) {\n        out.println(new WebResult(WebResult.STRING_ERROR, Const.getStackTracker(ex)));\n      } else {\n        out.println(\"<p>\");\n        out.println(\"<pre>\");\n        ex.printStackTrace(out);\n        out.println(\"</pre>\");\n      }\n    }\n\n    if (!useXML) {\n      out.println(\"<p>\");\n      out.println(\"</BODY>\");\n      out.println(\"</HTML>\");\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2549, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 95, "focalAPIEnd": 125, "followUpCheck": "!StringUtils.isEmpty(value)", "checkType": "IF", "followUpCheckExpressionStart": 200, "followUpCheckExpressionEnd": 238, "followUpCheckBlockStart": 200, "followUpCheckBlockEnd": 352, "use": ["new Locale(value)", "httpServletRequest.getSession()", "httpServletRequest.getLocale()"], "useStart": [322, 465, 794], "useEnd": [345, 485, 813], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DSpace/webmvc/tree/master/webmvc-api/src/main/java/org/dspace/webmvc/utils/Authenticate.java", "rawCode": "  public static Locale getSessionLocale(HttpServletRequest request) {\n    String paramLocale = request.getParameter(\"locale\");\n    Locale sessionLocale = null;\n    Locale supportedLocale = null;\n\n    if (!StringUtils.isEmpty(paramLocale)) {\n      /* get session locale according to user selection */\n      sessionLocale = new Locale(paramLocale);\n    }\n\n    if (sessionLocale == null) {\n      /* get session locale set by application */\n      HttpSession session = request.getSession();\n      // sessionLocale = (Locale) Config.get(session, Config.FMT_LOCALE);\n      sessionLocale = (Locale) session.getAttribute(\"FMT_LOCALE\");\n    }\n\n    /*\n     * if session not set by selection or application then default browser\n     * locale\n     */\n    if (sessionLocale == null) {\n      sessionLocale = request.getLocale();\n    }\n\n    if (sessionLocale == null) {\n      sessionLocale = I18nUtil.DEFAULTLOCALE;\n    }\n    supportedLocale = I18nUtil.getSupportedLocale(sessionLocale);\n\n    return supportedLocale;\n  }\n"}, {"dataset": "getParameter", "exampleID": 2550, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 204, "focalAPIEnd": 230, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 237, "followUpCheckExpressionEnd": 258, "followUpCheckBlockStart": 237, "followUpCheckBlockEnd": 796, "use": ["parseInt(value)"], "useStart": [311], "useEnd": [337], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/INCF/eeg2/tree/master/src/main/java/cz/zcu/kiv/eegdatabase/logic/controller/scenario/AddScenarioController.java", "rawCode": "  @Override\n  protected Object formBackingObject(HttpServletRequest request) throws Exception {\n    AddScenarioCommand data = (AddScenarioCommand) super.formBackingObject(request);\n\n    String idString = request.getParameter(\"id\");\n\n    if (idString != null) {\n      // Editing existing scenario\n      int id = Integer.parseInt(idString);\n\n      log.debug(\"Loading scenario to the command object for editing.\");\n      Scenario scenario = scenarioDao.read(id);\n\n      data.setId(id);\n      data.setTitle(scenario.getTitle());\n      data.setLength(new Integer(scenario.getScenarioLength()).toString());\n      data.setDescription(scenario.getDescription());\n      data.setPrivateNote(scenario.isPrivateScenario());\n      data.setResearchGroup(scenario.getResearchGroup().getResearchGroupId());\n    }\n\n    return data;\n  }\n"}, {"dataset": "getParameter", "exampleID": 2551, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.getPathInfo()"], "configurationStart": [105], "configurationEnd": [137], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 160, "focalAPIEnd": 198, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 204, "followUpCheckExpressionEnd": 224, "followUpCheckBlockStart": 204, "followUpCheckBlockEnd": 405, "use": ["value.replaceFirst(String,String)", "httpServletRequest.getRequestURL()"], "useStart": [240, 314], "useEnd": [286, 348], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/georchestra/geonetwork/tree/master/web/src/main/java/org/geonetwork/map/wmc/WmcServlet.java", "rawCode": "  protected String getBaseUrl(HttpServletRequest httpServletRequest) {\n    final String additionalPath = httpServletRequest.getPathInfo();\n    String fullUrl = httpServletRequest.getParameter(\"url\");\n    if (fullUrl != null) {\n      return fullUrl.replaceFirst(additionalPath + \"$\", \"\");\n    } else {\n      return httpServletRequest.getRequestURL().toString().replaceFirst(additionalPath + \"$\", \"\");\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2552, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.getSession()"], "configurationStart": [496], "configurationEnd": [516], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 669, "focalAPIEnd": 709, "followUpCheck": "!Util.isNullOrTrimmedBlank(value)", "checkType": "IF", "followUpCheckExpressionStart": 715, "followUpCheckExpressionEnd": 771, "followUpCheckBlockStart": 715, "followUpCheckBlockEnd": 847, "use": ["PropertyList.setAsTextFieldText(value)", "display(ActionMapping,ActionForm,httpServletRequest,HttpServletResponse)"], "useStart": [780, 1178], "useEnd": [840, 1219], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MiniSEC/adito_reload/tree/master/adito/branches/openvpn-als/openvpnals/src/net/openvpn/als/policyframework/actions/AbstractResourceDispatchAction.java", "rawCode": "  /**\n   * Toggle show personal policies.\n   *\n   * @param mapping\n   * @param form\n   * @param request\n   * @param response\n   * @return forward\n   * @throws Exception\n   */\n  public ActionForward toogleShowPersonalPolicies(\n      ActionMapping mapping,\n      ActionForm form,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws Exception {\n    AbstractResourceForm policyForm = (AbstractResourceForm) form;\n\n    Resource resource = ResourceStack.peekEditingStack(request.getSession());\n    SessionInfo session = this.getSessionInfo(request);\n\n    PropertyList selectedPolicies = new PropertyList();\n    String requestSelectedPolicies = request.getParameter(\"selectedPolicies\");\n    if (!Util.isNullOrTrimmedBlank(requestSelectedPolicies)) {\n      selectedPolicies.setAsTextFieldText(requestSelectedPolicies);\n    }\n    MultiSelectPoliciesSelectionModel policyModel =\n        initSelectModel(\n            selectedPolicies,\n            ((AbstractResourceForm) form).isShowPersonalPolicies(),\n            resource,\n            session);\n\n    policyForm.setPolicyModel(policyModel);\n    policyForm.setSelectedPolicies(selectedPolicies);\n\n    return display(mapping, form, request, response);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2553, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "request.getParameter(name,)!=null", "guardType": "IF {", "guardExpressionStart": 596, "guardExpressionEnd": 687, "guardBlockStart": 596, "guardBlockEnd": 767, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 600, "focalAPIEnd": 636, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/camptocamp/secureOWS/tree/master/owsproxyserver/src/com/camptocamp/owsproxy/OWSProxyServlet.java", "rawCode": "  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    String queryString = request.getQueryString();\n\n    // Some WMS Client, like ArcMAP, only send the QUERY_LAYERS parameter without a LAYERS\n    // parameter.\n    // However, some WMS server like MapServer fail in case there is no LAYERS parameter send.\n    // Thus, we add a LAYERS parameter in case only a QUERY_LAYERS parameter is available.\n    // -> Keep this in sync with the code in\n    // org.deegree.ogcwebservices.wms.operation.GetFeatureInfo::create()\n    if (request.getParameter(\"QUERY_LAYERS\") != null && request.getParameter(\"LAYERS\") == null) {\n      queryString += \"&LAYERS=\" + request.getParameter(\"QUERY_LAYERS\");\n    }\n\n    String endPoint = \"\" + SERVICE_END_POINT;\n\n    try {\n      HttpClient client = new HttpClient();\n      if (queryString != null) {\n        if (endPoint.indexOf(\"?\") < 0) endPoint += \"?\";\n        endPoint += queryString;\n      }\n      System.out.println(\"End point: \" + endPoint);\n      HttpMethod method = new GetMethod(endPoint);\n\n      // Execute the method.\n      int statusCode = client.executeMethod(method);\n\n      if (statusCode != HttpStatus.SC_OK) {\n        System.err.println(\"Method failed: \" + method.getStatusLine());\n      }\n\n      String header = \"Content-Type\";\n      Header contentTypeHeader = method.getResponseHeader(header);\n      if (contentTypeHeader != null) {\n        response.setContentType(contentTypeHeader.getValue());\n      }\n\n      byte[] cache = new byte[response.getBufferSize()];\n      InputStream in = method.getResponseBodyAsStream();\n      ServletOutputStream out = response.getOutputStream();\n      for (int read = in.read(cache); read > 0; read = in.read(cache)) {\n        out.write(cache, 0, read);\n      }\n\n    } catch (Exception e) {\n      throw new ServletException(e);\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2554, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 485, "focalAPIEnd": 509, "followUpCheck": "(value != null) && (!\"0\".equals(value))", "checkType": "IF", "followUpCheckExpressionStart": 870, "followUpCheckExpressionEnd": 908, "followUpCheckBlockStart": 870, "followUpCheckBlockEnd": 1911, "use": ["httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "TestTrailer.setId(value)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)"], "useStart": [550, 601, 654, 962, 1419, 1691, 1994], "useEnd": [595, 648, 697, 983, 1463, 1739, 2039], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Bhamni/OpenElis/tree/master/openelis/src/us/mn/state/health/lims/testtrailer/action/TestTrailerAction.java", "rawCode": "  protected ActionForward performAction(\n      ActionMapping mapping,\n      ActionForm form,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws Exception {\n    // The first job is to determine if we are coming to this action with an\n    // ID parameter in the request. If there is no parameter, we are\n    // creating a new TestTrailer.\n    // If there is a parameter present, we should bring up an existing\n    // TestTrailer to edit.\n\n    String id = request.getParameter(ID);\n\n    String forward = FWD_SUCCESS;\n    request.setAttribute(ALLOW_EDITS_KEY, \"true\");\n    request.setAttribute(PREVIOUS_DISABLED, \"true\");\n    request.setAttribute(NEXT_DISABLED, \"true\");\n\n    DynaActionForm dynaForm = (DynaActionForm) form;\n\n    // initialize the form\n    dynaForm.initialize(mapping);\n\n    TestTrailer testTrailer = new TestTrailer();\n\n    if ((id != null) && (!\"0\".equals(id))) { // this is an existing\n      // testTrailer\n\n      testTrailer.setId(id);\n      TestTrailerDAO testTrailerDAO = new TestTrailerDAOImpl();\n      testTrailerDAO.getData(testTrailer);\n\n      isNew = false; // this is to set correct page title\n\n      // do we need to enable next or previous?\n      // bugzilla 1427 pass in name not id\n      List testTrailers = testTrailerDAO.getNextTestTrailerRecord(testTrailer.getTestTrailerName());\n      if (testTrailers.size() > 0) {\n        // enable next button\n        request.setAttribute(NEXT_DISABLED, \"false\");\n      }\n      // bugzilla 1427 pass in name not id\n      testTrailers = testTrailerDAO.getPreviousTestTrailerRecord(testTrailer.getTestTrailerName());\n      if (testTrailers.size() > 0) {\n        // enable next button\n        request.setAttribute(PREVIOUS_DISABLED, \"false\");\n      }\n      // end of logic to enable next or previous button\n\n    } else { // this is a new testTrailer\n\n      isNew = true; // this is to set correct page title\n    }\n\n    if (testTrailer.getId() != null && !testTrailer.getId().equals(\"0\")) {\n      request.setAttribute(ID, testTrailer.getId());\n    }\n\n    // populate form from valueholder\n    PropertyUtils.copyProperties(form, testTrailer);\n\n    return mapping.findForward(forward);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2555, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 189, "focalAPIEnd": 217, "followUpCheck": "null == value", "checkType": "IF", "followUpCheckExpressionStart": 223, "followUpCheckExpressionEnd": 240, "followUpCheckBlockStart": 223, "followUpCheckBlockEnd": 345, "use": ["getUserByUdid(value)"], "useStart": [396], "useEnd": [427], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/good-life/PushTalk/tree/master/server-java/src/org/pushtalk/server/api/UserInfoServlet.java", "rawCode": "  @Override\n  public void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    LOG.debug(\"api - user info\");\n\n    String udid = request.getParameter(\"udid\");\n    if (null == udid) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"udid is required!\");\n      return;\n    }\n    LOG.debug(\"udid - \" + udid);\n\n    User user = talkService.getUserByUdid(udid);\n    if (null == user) {\n      response.sendError(HttpServletResponse.SC_NO_CONTENT, \"the udid is not registered!\");\n      return;\n    }\n\n    Set<String> channels = new HashSet<String>();\n    for (Channel channel : user.getChannelList()) {\n      LOG.debug(\"channel: \" + channel.getName());\n      channels.add(ServiceUtils.postfixAliasAndTag(channel.getName()));\n    }\n\n    Gson gson = new Gson();\n    Map<String, Object> params = new HashMap<String, Object>();\n    params.put(\"username\", ServiceUtils.postfixAliasAndTag(user.getName()));\n    params.put(\"channels\", channels);\n\n    String info = gson.toJson(params);\n    LOG.info(\"The user info: \" + info);\n\n    response.getOutputStream().write(info.getBytes());\n  }\n"}, {"dataset": "getParameter", "exampleID": 2556, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 168, "focalAPIEnd": 201, "followUpCheck": "GenericValidator.isBlankOrNull(value) || true|| (true)", "checkType": "IF", "followUpCheckExpressionStart": 524, "followUpCheckExpressionEnd": 793, "followUpCheckBlockStart": 524, "followUpCheckBlockEnd": 1017, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "createTestReflexXML(value,String,String,String,String,StringBuilder)", "sendData(*,String,httpServletRequest,HttpServletResponse)"], "useStart": [228, 286, 341, 404, 926, 1023], "useEnd": [263, 317, 373, 443, 1010, 1086], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Bhamni/OpenElis/tree/master/openelis/src/us/mn/state/health/lims/common/provider/query/TestReflexUserChoiceProvider.java", "rawCode": "  @Override\n  public void processRequest(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    String resultIds = request.getParameter(\"resultIds\");\n    String analysisIds = request.getParameter(\"analysisIds\");\n    String testIds = request.getParameter(\"testIds\");\n    String rowIndex = request.getParameter(\"rowIndex\");\n    String accessionNumber = request.getParameter(\"accessionNumber\");\n\n    StringBuilder xml = new StringBuilder();\n\n    String result = VALID;\n\n    if (GenericValidator.isBlankOrNull(resultIds)\n        || GenericValidator.isBlankOrNull(testIds)\n        || GenericValidator.isBlankOrNull(rowIndex)\n        || (GenericValidator.isBlankOrNull(analysisIds)\n            && GenericValidator.isBlankOrNull(accessionNumber))) {\n      result = INVALID;\n      xml.append(\"Internal error, please contact Admin and file bug report\");\n    } else {\n      result = createTestReflexXML(resultIds, analysisIds, testIds, accessionNumber, rowIndex, xml);\n    }\n\n    ajaxServlet.sendData(xml.toString(), result, request, response);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2557, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 246, "tryExpressionEnd": 250, "tryBlockStart": 246, "tryBlockEnd": 365, "catchExpressionStart": 311, "catchExpressionEnd": 331, "catchBlockStart": 311, "catchBlockEnd": 365, "exceptionHandlingCallStart": [339], "exceptionHandlingCallEnd": [358], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 270, "focalAPIEnd": 303, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/awwong1/c391proj/tree/master/WEB-INF/classes/manage_Groups.java", "rawCode": "  /**\n   * Checks to see if a group name has been entered in the \"new_group\" box\n   *\n   * @param HttpServletRequest\n   */\n  public void check_new_group(HttpServletRequest request) {\n    String new_group = \"\";\n    /* check new group value */\n    try {\n      new_group = request.getParameter(\"new_group\");\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n\n    /* add to new group to database */\n    if (new_group != null && !new_group.isEmpty()) {\n      database.add_group(user, new_group);\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2558, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 107, "focalAPIEnd": 137, "followUpCheck": "value == null || value.trim().length() == 0", "checkType": "IF", "followUpCheckExpressionStart": 143, "followUpCheckExpressionEnd": 193, "followUpCheckBlockStart": 143, "followUpCheckBlockEnd": 793, "use": ["httpServletRequest.getRequestURL()"], "useStart": [1529], "useEnd": [1552], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/trifork/HAIBA-LPRimporter/tree/master/src/main/java/dk/nsi/haiba/lprimporter/status/StatusReporter.java", "rawCode": "  @RequestMapping(value = \"/status\")\n  public ResponseEntity<String> reportStatus() {\n\n    String manual = request.getParameter(\"manual\");\n    if (manual == null || manual.trim().length() == 0) {\n      // no value set, use default set in the import executor\n      manual = \"\" + importExecutor.isManualOverride();\n    } else {\n      // manual flag is set on the request\n      if (manual.equalsIgnoreCase(\"true\")) {\n        // flag is true, start the importer in a new thread\n        importExecutor.setManualOverride(true);\n        Runnable importer =\n            new Runnable() {\n              public void run() {\n                importExecutor.doProcess(true);\n              }\n            };\n        importer.run();\n      } else {\n        importExecutor.setManualOverride(false);\n      }\n    }\n\n    HttpHeaders headers = new HttpHeaders();\n    String body = \"OK\";\n    HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR;\n    body = \"OK\";\n\n    try {\n      if (!statusRepo.isHAIBADBAlive()) {\n        body = \"HAIBA Database is _NOT_ running correctly\";\n      } else if (!statusRepo.isLPRDBAlive()) {\n        body = \"LPR Database is _NOT_ running correctly\";\n      } else if (statusRepo.isOverdue()) {\n        // last run information is applied to body later\n        body = \"Is overdue\";\n      } else {\n        status = HttpStatus.OK;\n      }\n    } catch (Exception e) {\n      body = e.getMessage();\n    }\n\n    body += \"</br>\";\n    body = addLastRunInformation(body);\n\n    body += \"</br>------------------</br>\";\n\n    String url = request.getRequestURL().toString();\n    body += \"<a href=\\\"\" + url + \"?manual=true\\\">Manual start importer</a>\";\n    body += \"</br>\";\n    body += \"<a href=\\\"\" + url + \"?manual=false\\\">Scheduled start importer</a>\";\n    body += \"</br>\";\n    if (manual.equalsIgnoreCase(\"true\")) {\n      body += \"status: MANUAL\";\n    } else {\n      // default\n      body += \"status: SCHEDULED - \" + cron;\n    }\n\n    headers.setContentType(MediaType.TEXT_HTML);\n\n    return new ResponseEntity<String>(body, headers, status);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2559, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 138, "focalAPIEnd": 180, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getCookies()", "DocumentEJB.findDocuments(value,String,String,String,String,String,String,String,SimpleDate,SimpleDate,String,String,String,String,String,String,String,String,String,String)"], "useStart": [213, 286, 348, 414, 478, 543, 614, 678, 736, 802, 874, 948, 1000, 1051, 1111, 1170, 1229, 1282, 1334, 1867, 2142], "useEnd": [254, 315, 378, 445, 510, 586, 656, 707, 773, 838, 918, 979, 1029, 1081, 1141, 1200, 1259, 1312, 1364, 1887, 2746], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/projeto-coruja/Projeto-Coruja/tree/master/GraoPara-BD2/src/main/java/webview/worker/SearchWorker.java", "rawCode": "  public static void listAllDocuments(HttpServletRequest request, JspWriter out)\n      throws IOException {\n\n    String tipoCodiceCaixa = request.getParameter(\"tipoCodCodiceCaixa\");\n    String tituloCodiceCaixa = request.getParameter(\"tituloCodiceCaixa\");\n    String codCodiceCaixaDe = request.getParameter(\"codDe\");\n    String codCodiceCaixaAte = request.getParameter(\"codAte\");\n    String anoInicioCodiceCaixa = request.getParameter(\"epocaDe\");\n    String anoFimCodiceCaixa = request.getParameter(\"epocaAte\");\n\n    String tipoCodDocumento = request.getParameter(\"tipoDaIdentificacao\");\n    String codDocumento = request.getParameter(\"numDaIdentificacao\");\n\n    String autor = request.getParameter(\"autor\");\n    String ocupacaoAutor = request.getParameter(\"autorOcupacao\");\n\n    String destinatario = request.getParameter(\"destinatario\");\n    String ocupacaoDestinatario = request.getParameter(\"destinatarioOcupacao\");\n\n    String tipoDocumento = request.getParameter(\"tipoDoc\");\n    String local = request.getParameter(\"local\");\n    String resumo = request.getParameter(\"resumo\");\n\n    String palavraChave1 = request.getParameter(\"chave1\");\n    String palavraChave2 = request.getParameter(\"chave2\");\n    String palavraChave3 = request.getParameter(\"chave3\");\n\n    String anoIni = request.getParameter(\"anoIni\");\n    String anoFim = request.getParameter(\"anoFim\");\n    String dataIni = null, dataFim = null;\n    ;\n    SimpleDate dataDocIni = null, dataDocFim = null;\n\n    if (isInit(anoIni)) {\n      dataIni = anoIni;\n    } else {\n      dataIni = minData;\n    }\n    if (isInit(anoFim)) {\n      dataFim = anoFim + \"/12/31\";\n    } else {\n      dataFim = maxData;\n    }\n\n    dataDocIni = SimpleDate.parse(dataIni);\n    dataDocFim = SimpleDate.parse(dataFim);\n\n    DocumentEJB search = new DocumentEJB();\n    List<DTO> docs = null;\n\n    String c_status = null;\n\n    if (request.getCookies().length > 1) {\n      try {\n        c_status =\n            WebUtility.selectCookie(request.getCookies(), WebUtility.cookie_status).getValue();\n      } catch (NullPointerException e) {\n        c_status = null;\n      }\n    }\n    try {\n      docs =\n          search.findDocuments(\n              tipoCodiceCaixa,\n              codCodiceCaixaDe,\n              codCodiceCaixaAte,\n              tituloCodiceCaixa,\n              anoInicioCodiceCaixa,\n              anoFimCodiceCaixa,\n              tipoCodDocumento,\n              codDocumento,\n              dataDocIni,\n              dataDocFim,\n              autor,\n              ocupacaoAutor,\n              destinatario,\n              ocupacaoDestinatario,\n              tipoDocumento,\n              local,\n              resumo,\n              palavraChave1,\n              palavraChave2,\n              palavraChave3);\n\n      String lastCodex = \"\";\n      for (DTO d : docs) {\n\n        Documento doc = (Documento) d;\n\n        String codDoc[] = doc.getCod().split(\"-\");\n        if (!lastCodex.equals(doc.getCodiceCaixa().getCod())) {\n          if (!lastCodex.equals(\"\")) {\n            out.println(\"</table>\");\n            out.println(\"<br />\");\n          }\n          out.println(\n              \"<h1 class=\\\"resultLabel\\\">\"\n                  + doc.getCodiceCaixa().getCod().replace(\"-\", \" - \")\n                  + \": \"\n                  + doc.getCodiceCaixa().getTitulo()\n                  + \" (\"\n                  + doc.getCodiceCaixa().getAnoInicio()\n                  + \" - \"\n                  + doc.getCodiceCaixa().getAnoFim()\n                  + \")</h1>\");\n          out.println(\"<br />\");\n          out.println(\"<table class=\\\"tableResultList\\\">\");\n        } else {\n          out.println(\"<tr class=\\\"trList\\\">\");\n          out.println(\"<td class=\\\"tdList\\\" colspan=\\\"4\\\"><br /></td>\");\n          out.println(\"</tr>\");\n        }\n        out.println(\"<tr class=\\\"trList\\\">\");\n        out.println(\n            \"<td class=\\\"tdList\\\" rowspan=\\\"5\\\"><label class=\\\"labelExibe\\\">\"\n                + codDoc[0]\n                + \"<br />\"\n                + codDoc[1]\n                + \"</label></td>\");\n        out.println(\n            \"<td class=\\\"tdResultCenterList\\\" ><label class=\\\"labelExibe\\\">\"\n                + doc.getTipoDocumento().getNome()\n                + \"</label></td>\");\n        out.println(\n            \"<td class=\\\"tdResultCenterList\\\" ><label class=\\\"labelExibe\\\">\"\n                + doc.getLocal()\n                + \"</label></td>\");\n        out.println(\n            \"<td class=\\\"tdList\\\" rowspan=\\\"5\\\"><label class=\\\"labelExibe\\\">\"\n                + (doc.getUrl() != null && !doc.getUrl().equals(\"\")\n                    ? \"<a href=\\\"\" + doc.getUrl() + \"\\\">URL</a>\"\n                    : \"\"));\n        if (c_status != null && c_status.equals(AuthBean.LoginSuccessAdmin)) {\n          out.println(\n              \"<a href=\\\"/GraoPara/protected/admin/editarDocumentos.jsp?\"\n                  + \"container=\"\n                  + doc.getCodiceCaixa().getCod()\n                  + \"&codigoDoDocumento=\"\n                  + doc.getCod()\n                  + \"\\\">\"\n                  + \"<img src=\\\"/GraoPara/images/edit.png\\\" title=\\\"Editar\\\" alt=\\\"Editar\\\"/></a> \"\n                  + \"<br>\"\n                  + \"<a href=\\\"javascript:confirmAction('Você tem certeza que quer deletar o documento \\\\'\"\n                  + doc.getCod().replace(\"-\", \" - \")\n                  + \"\\\\'?','/GraoPara/protected/admin/removeDoc?container=\"\n                  + doc.getCodiceCaixa().getCod()\n                  + \"&codigo=\"\n                  + doc.getCod()\n                  + \"')\\\">\"\n                  + \"<img src=\\\"/GraoPara/images/remove.png\\\" title=\\\"Remover\\\" alt=\\\"Remover\\\"/></a></td> \");\n        }\n        out.println(\"</label></td>\");\n        out.println(\"</tr>\");\n        out.println(\"<tr class=\\\"trList\\\">\");\n        out.println(\n            \"<td class=\\\"tdResultCenterList\\\" ><label class=\\\"labelExibe\\\">\"\n                + doc.getAutor().getNome()\n                + \"</label></td>\");\n        out.println(\n            \"<td class=\\\"tdResultCenterList\\\" ><label class=\\\"labelExibe\\\">\"\n                + doc.getAutor().getOcupacao()\n                + \"</label></td>\");\n        out.println(\"</tr>\");\n        out.println(\"<tr class=\\\"trList\\\">\");\n        out.println(\n            \"<td class=\\\"tdResultCenterList\\\" ><label class=\\\"labelExibe\\\">\"\n                + doc.getDestinatario().getNome()\n                + \"</label></td>\");\n        out.println(\n            \"<td class=\\\"tdResultCenterList\\\" ><label class=\\\"labelExibe\\\">\"\n                + doc.getDestinatario().getOcupacao()\n                + \"</label></td>\");\n        out.println(\"</tr>\");\n        out.println(\"<tr class=\\\"trList\\\">\");\n        out.println(\n            \"<td class=\\\"tdResultCenterList\\\" ><label class=\\\"labelExibe\\\">\"\n                + (doc.getData() != null ? doc.getData().format() : \"Sem data.\")\n                + \"</label></td>\");\n        out.println(\n            \"<td class=\\\"tdResultCenterList\\\" ><label class=\\\"labelExibe\\\">\"\n                + (doc.getPalavraChave1() != null ? doc.getPalavraChave1().getPalavra() : \"\")\n                + (doc.getPalavraChave2() != null\n                    ? (doc.getPalavraChave1() != null ? \" - \" : \"\")\n                        + doc.getPalavraChave2().getPalavra()\n                        + \" \"\n                    : \"\")\n                + (doc.getPalavraChave3() != null\n                    ? (doc.getPalavraChave1() != null || doc.getPalavraChave2() != null\n                            ? \" - \"\n                            : \"\")\n                        + doc.getPalavraChave3().getPalavra()\n                        + \" \"\n                    : \"\")\n                + \"</label></td>\");\n        out.println(\"</tr>\");\n        out.println(\"<tr class=\\\"trList\\\">\");\n        out.println(\n            \"<td class=\\\"tdList\\\" colspan=\\\"2\\\"><label class=\\\"labelExibe\\\">\"\n                + doc.getResumo()\n                + \"</label></td>\");\n        out.println(\"</tr>\");\n\n        lastCodex = doc.getCodiceCaixa().getCod();\n      }\n      out.println(\"</table>\");\n\n    } catch (UnreachableDataBaseException e) {\n      out.write(\"<script>\");\n      out.write(\n          \"alert('Problemas ao acessar o banco de dados. Contate o suporte técnico e tente novamente mais tarde ');\");\n      // out.write(\"window.location.replace('/GraoPara/public/index.jsp');\");\n      out.write(\"</script>\");\n      e.printStackTrace();\n    } catch (DocumentNotFoundException e) {\n      out.write(\"<script>\");\n      out.write(\"alert('Nenhum documento encontrado!');\");\n      out.write(\"history.go(-1)\");\n      out.write(\"</script>\");\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2560, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["getName()", "getLogger(*)", "log(*,*,*)"], "tryExpressionStart": 552, "tryExpressionEnd": 556, "tryBlockStart": 552, "tryBlockEnd": 4906, "catchExpressionStart": 4050, "catchExpressionEnd": 4083, "catchBlockStart": 4050, "catchBlockEnd": 4167, "exceptionHandlingCallStart": [4108, 4091, 4091], "exceptionHandlingCallEnd": [4131, 4132, 4160], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "\"Buscar\".equals(httpServletRequest.getParameter(\"Factura\",),)", "guardType": "IF {", "guardExpressionStart": 655, "guardExpressionEnd": 708, "guardBlockStart": 655, "guardBlockEnd": 4043, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 739, "focalAPIEnd": 772, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["decodificarBase64(value)", "httpServletRequest.getParameter(String)", "parseInt(value)", "parseInt(value)"], "useStart": [794, 855, 1024, 1919], "useEnd": [830, 884, 1051, 1946], "hasFinally": 1, "cleanUpCall": ["PrintWriter.close()"], "finallyExpressionStart": 4872, "finallyExpressionEnd": 4880, "finallyBlockStart": 4872, "finallyBlockEnd": 4906, "cleanUpCallStart": [4888], "cleanUpCallEnd": [4899], "url": "https://github.com/IndieC8/ISFE-20110020/tree/master/Documents/NetBeansProjects/ISFE-20110020/src/java/dao/Impresa.java", "rawCode": "  /**\n   * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.\n   *\n   * @param request servlet request\n   * @param response servlet response\n   * @throws ServletException if a servlet-specific error occurs\n   * @throws IOException if an I/O error occurs\n   */\n  protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    response.setContentType(\"text/html;charset=UTF-8\");\n    PrintWriter out = response.getWriter();\n    Sql s = new Sql();\n    try {\n      /*\n       * TODO output your page here. You may use following sample code.\n       */\n      if (\"Buscar\".equals(request.getParameter(\"Factura\"))) {\n\n        String idUsuario = request.getParameter(\"idUsuario\");\n        idUsuario = Cifrado.decodificarBase64(idUsuario);\n        String fecha = request.getParameter(\"Fecha\"); /*\n* aaaa/mm/dd\n*/\n\n        String consulta =\n            \"SELECT COUNT(*) as contador FROM factura WHERE idUsuario = \"\n                + Integer.parseInt(idUsuario)\n                + \" AND fechaElaboracion = \"\n                + fecha\n                + \"\";\n        ResultSet rs;\n        rs = s.consulta(consulta);\n\n        int Columnas = 0;\n        if (rs.next()) {\n          Columnas = rs.getInt(\"contador\");\n        }\n\n        if (Columnas > 0) {\n          out.println(\"<table align= \\\"center\\\" id=\\\"ResultadoBusquedaFactua\\\">\");\n          out.println(\"<tr>\");\n          out.println(\n              \"<th align=\\\"center\\\">&nbsp; &nbsp; &nbsp; Nombre de la Factura &nbsp; &nbsp;</th>\");\n          out.println(\"<th align=\\\"center\\\">&nbsp; &nbsp; &nbsp; Fecha &nbsp; &nbsp;</th>\");\n          out.println(\"<th align=\\\"center\\\">&nbsp; &nbsp;</th>\");\n          out.println(\"</tr>\");\n\n          consulta =\n              \"SELECT f.idFactura,f.fechaElaboracion, f.nombreXML FROM factura f, folios fo WHERE f.idUsuario = \"\n                  + Integer.parseInt(idUsuario)\n                  + \" AND f.fechaElaboracion = \"\n                  + fecha\n                  + \" AND f.idFolio = fo.idFolio AND fo.usado = 1\";\n          rs = s.consulta(consulta);\n          while (rs.next()) {\n            out.println(\"<tr>\");\n            out.println(\n                \"<td Style=\\\"font-size: 10px;\\\" align=\\\"center\\\">\"\n                    + rs.getString(\"nombreXML\")\n                    + \"</td>\");\n            out.println(\n                \"<td Style=\\\"font-size: 10px;\\\" align=\\\"center\\\">\"\n                    + rs.getString(\"fechaElaboracion\")\n                    + \"</td>\");\n            out.println(\n                \"<td align=\\\"center\\\"><span><img src=\\\"../images/formularios/pdfICON.jpg\\\" title=\\\"Generar PDF\\\" alt=\\\"Generar PDF\\\" style=\\\"cursor:pointer\\\" onClick=\\\"GenerarPDF(\"\n                    + rs.getInt(\"idFactura\")\n                    + \")\\\"/></span></td>\");\n            out.println(\"</tr>\");\n          }\n\n          out.println(\"</table>\");\n          out.println(\"<br/><br/>\");\n        } else {\n          out.println(\"0\");\n        }\n      } else if (\"generarPDF\".equals(request.getParameter(\"Factura\"))) {\n        Sql sqlPDF = new Sql();\n        String query =\n            \"select nombreXML,facturaXML from factura where idFactura=\"\n                + request.getParameter(\"idFacturaImpresa\")\n                + \";\";\n        ResultSet rs = sqlPDF.consulta(query);\n        String path = this.getServletContext().getRealPath(\"/\");\n        File xml = null;\n        String nombre = null;\n        while (rs.next()) {\n          nombre = rs.getString(\"nombreXML\");\n          xml = new File(path + nombre + \".xml\");\n          FileOutputStream fos = new FileOutputStream(xml);\n          byte[] buffer = new byte[1];\n          InputStream is = rs.getBinaryStream(2);\n          while (is.read(buffer) > 0) {\n            fos.write(buffer);\n          }\n          fos.close();\n        }\n\n        File pdf = PDF.generarArchivoPDF(xml, path, nombre + \".pdf\");\n        response.sendRedirect(\"PDF.jsp?nombrePDF=\" + nombre);\n        // PDF.visualizarPDF(pdf, response, request);\n\n      }\n    } catch (FileNotFoundException ex) {\n      Logger.getLogger(Impresa.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (FOPException ex) {\n      Logger.getLogger(Impresa.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (TransformerConfigurationException ex) {\n      Logger.getLogger(Impresa.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (TransformerException ex) {\n      Logger.getLogger(Impresa.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InstantiationException ex) {\n      Logger.getLogger(Impresa.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalAccessException ex) {\n      Logger.getLogger(Impresa.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (SQLException ex) {\n      Logger.getLogger(Impresa.class.getName()).log(Level.SEVERE, null, ex);\n\n    } finally {\n      out.close();\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2561, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SortException", "exceptionHandlingCall": ["error(String,*)", "new ServletException(*)"], "tryExpressionStart": 576, "tryExpressionEnd": 580, "tryBlockStart": 576, "tryBlockEnd": 7799, "catchExpressionStart": 7573, "catchExpressionEnd": 7598, "catchBlockStart": 7573, "catchBlockEnd": 7686, "exceptionHandlingCallStart": [7606, 7655], "exceptionHandlingCallEnd": [7641, 7679], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 675, "focalAPIEnd": 703, "followUpCheck": "value != null && !\"\".equals(value)", "checkType": "IF", "followUpCheckExpressionStart": 2085, "followUpCheckExpressionEnd": 2122, "followUpCheckBlockStart": 2085, "followUpCheckBlockEnd": 2179, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "getIntParameter(httpServletRequest,String)", "getIntParameter(httpServletRequest,String)", "getIntParameter(httpServletRequest,String)", "getIntParameter(httpServletRequest,String)", "getIntParameter(httpServletRequest,String)", "getCollectionLocation(httpServletRequest)", "getCommunityLocation(httpServletRequest)", "getBrowseIndex(value)"], "useStart": [726, 778, 834, 891, 942, 998, 1061, 1123, 1185, 1238, 1299, 1369, 1428, 1489, 1850, 1941, 2138], "useEnd": [755, 807, 868, 920, 970, 1033, 1091, 1158, 1218, 1278, 1340, 1407, 1470, 1528, 1887, 1977, 2170], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DSpace/DSpace-SVN-Deprecated/tree/master/dspace-jspui/dspace-jspui-api/src/main/java/org/dspace/app/webui/servlet/AbstractBrowserServlet.java", "rawCode": "  /**\n   * Create a BrowserScope from the current request\n   *\n   * @param context The database context\n   * @param request The servlet request\n   * @param response The servlet response\n   * @return A BrowserScope for the current parameters\n   * @throws ServletException\n   * @throws IOException\n   * @throws SQLException\n   * @throws AuthorizeException\n   */\n  protected BrowserScope getBrowserScopeForRequest(\n      Context context, HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException, SQLException, AuthorizeException {\n    try {\n      // first, lift all the stuff out of the request that we might need\n      String type = request.getParameter(\"type\");\n      String order = request.getParameter(\"order\");\n      String value = request.getParameter(\"value\");\n      String valueLang = request.getParameter(\"value_lang\");\n      String month = request.getParameter(\"month\");\n      String year = request.getParameter(\"year\");\n      String startsWith = request.getParameter(\"starts_with\");\n      String valueFocus = request.getParameter(\"vfocus\");\n      String valueFocusLang = request.getParameter(\"vfocus_lang\");\n      String authority = request.getParameter(\"authority\");\n      int focus = UIUtil.getIntParameter(request, \"focus\");\n      int offset = UIUtil.getIntParameter(request, \"offset\");\n      int resultsperpage = UIUtil.getIntParameter(request, \"rpp\");\n      int sortBy = UIUtil.getIntParameter(request, \"sort_by\");\n      int etAl = UIUtil.getIntParameter(request, \"etal\");\n\n      // get the community or collection location for the browse request\n      // Note that we are only interested in getting the \"smallest\" container,\n      // so if we find a collection, we don't bother looking up the community\n      Collection collection = null;\n      Community community = null;\n      collection = UIUtil.getCollectionLocation(request);\n      if (collection == null) {\n        community = UIUtil.getCommunityLocation(request);\n      }\n\n      // process the input, performing some inline validation\n      BrowseIndex bi = null;\n      if (type != null && !\"\".equals(type)) {\n        bi = BrowseIndex.getBrowseIndex(type);\n      }\n\n      if (bi == null) {\n        if (sortBy > 0) {\n          bi = BrowseIndex.getBrowseIndex(SortOption.getSortOption(sortBy));\n        } else {\n          bi = BrowseIndex.getBrowseIndex(SortOption.getDefaultSortOption());\n        }\n      }\n\n      // If we don't have a sort column\n      if (bi != null && sortBy == -1) {\n        // Get the default one\n        SortOption so = bi.getSortOption();\n        if (so != null) {\n          sortBy = so.getNumber();\n        }\n      } else if (bi != null && bi.isItemIndex() && !bi.isInternalIndex()) {\n        // If a default sort option is specified by the index, but it isn't\n        // the same as sort option requested, attempt to find an index that\n        // is configured to use that sort by default\n        // This is so that we can then highlight the correct option in the navigation\n        SortOption bso = bi.getSortOption();\n        SortOption so = SortOption.getSortOption(sortBy);\n        if (bso != null && bso.equals(so)) {\n          BrowseIndex newBi = BrowseIndex.getBrowseIndex(so);\n          if (newBi != null) {\n            bi = newBi;\n            type = bi.getName();\n          }\n        }\n      }\n\n      if (order == null && bi != null) {\n        order = bi.getDefaultOrder();\n      }\n\n      // If the offset is invalid, reset to 0\n      if (offset < 0) {\n        offset = 0;\n      }\n\n      // if no resultsperpage set, default to 20\n      if (resultsperpage < 0) {\n        resultsperpage = 20;\n      }\n\n      // if year and perhaps month have been selected, we translate these into \"startsWith\"\n      // if startsWith has already been defined then it is overwritten\n      if (year != null && !\"\".equals(year) && !\"-1\".equals(year)) {\n        startsWith = year;\n        if ((month != null) && !\"-1\".equals(month) && !\"\".equals(month)) {\n          // subtract 1 from the month, so the match works appropriately\n          if (\"ASC\".equals(order)) {\n            month = Integer.toString((Integer.parseInt(month) - 1));\n          }\n\n          // They've selected a month as well\n          if (month.length() == 1) {\n            // Ensure double-digit month number\n            month = \"0\" + month;\n          }\n\n          startsWith = year + \"-\" + month;\n\n          if (\"ASC\".equals(order)) {\n            startsWith = startsWith + \"-32\";\n          }\n        }\n      }\n\n      // determine which level of the browse we are at: 0 for top, 1 for second\n      int level = 0;\n      if (value != null || authority != null) {\n        level = 1;\n      }\n\n      // if sortBy is still not set, set it to 0, which is default to use the primary index value\n      if (sortBy == -1) {\n        sortBy = 0;\n      }\n\n      // figure out the setting for author list truncation\n      if (etAl == -1) // there is no limit, or the UI says to use the default\n      {\n        int limitLine = ConfigurationManager.getIntProperty(\"webui.browse.author-limit\");\n        if (limitLine != 0) {\n          etAl = limitLine;\n        }\n      } else // if the user has set a limit\n      {\n        if (etAl == 0) // 0 is the user setting for unlimited\n        {\n          etAl = -1; // but -1 is the application setting for unlimited\n        }\n      }\n\n      // log the request\n      String comHandle = \"n/a\";\n      if (community != null) {\n        comHandle = community.getHandle();\n      }\n      String colHandle = \"n/a\";\n      if (collection != null) {\n        colHandle = collection.getHandle();\n      }\n\n      String arguments =\n          \"type=\"\n              + type\n              + \",order=\"\n              + order\n              + \",value=\"\n              + value\n              + \",month=\"\n              + month\n              + \",year=\"\n              + year\n              + \",starts_with=\"\n              + startsWith\n              + \",vfocus=\"\n              + valueFocus\n              + \",focus=\"\n              + focus\n              + \",rpp=\"\n              + resultsperpage\n              + \",sort_by=\"\n              + sortBy\n              + \",community=\"\n              + comHandle\n              + \",collection=\"\n              + colHandle\n              + \",level=\"\n              + level\n              + \",etal=\"\n              + etAl;\n\n      log.info(LogManager.getHeader(context, \"browse\", arguments));\n\n      // set up a BrowseScope and start loading the values into it\n      BrowserScope scope = new BrowserScope(context);\n      scope.setBrowseIndex(bi);\n      scope.setOrder(order);\n      scope.setFilterValue(value != null ? value : authority);\n      scope.setFilterValueLang(valueLang);\n      scope.setJumpToItem(focus);\n      scope.setJumpToValue(valueFocus);\n      scope.setJumpToValueLang(valueFocusLang);\n      scope.setStartsWith(startsWith);\n      scope.setOffset(offset);\n      scope.setResultsPerPage(resultsperpage);\n      scope.setSortBy(sortBy);\n      scope.setBrowseLevel(level);\n      scope.setEtAl(etAl);\n      scope.setAuthorityValue(authority);\n\n      // assign the scope of either Community or Collection if necessary\n      if (community != null) {\n        scope.setBrowseContainer(community);\n      } else if (collection != null) {\n        scope.setBrowseContainer(collection);\n      }\n\n      // For second level browses on metadata indexes, we need to adjust the default sorting\n      if (bi != null && bi.isMetadataIndex() && scope.isSecondLevel() && scope.getSortBy() <= 0) {\n        scope.setSortBy(1);\n      }\n\n      return scope;\n    } catch (SortException se) {\n      log.error(\"caught exception: \", se);\n      throw new ServletException(se);\n    } catch (BrowseException e) {\n      log.error(\"caught exception: \", e);\n      throw new ServletException(e);\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2562, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "error(*)"], "tryExpressionStart": 341, "tryExpressionEnd": 345, "tryBlockStart": 341, "tryBlockEnd": 2582, "catchExpressionStart": 2502, "catchExpressionEnd": 2523, "catchBlockStart": 2502, "catchBlockEnd": 2582, "exceptionHandlingCallStart": [2531, 2559], "exceptionHandlingCallEnd": [2551, 2575], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 512, "focalAPIEnd": 541, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setTitle(value)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "getInt(httpServletRequest,String)", "getInt(httpServletRequest,String)", "getInt(httpServletRequest,String)", "getInt(httpServletRequest,String)", "getInt(httpServletRequest,String)", "getInt(httpServletRequest,String)", "getInt(httpServletRequest,String)", "getDate(httpServletRequest,String)", "getDate(httpServletRequest,String)", "httpServletRequest.getParameterValues(String)", "httpServletRequest.getParameterValues(String)"], "useStart": [496, 568, 623, 679, 737, 807, 879, 948, 1018, 1096, 1175, 1246, 1315, 1606, 2020], "useEnd": [542, 599, 651, 711, 775, 851, 919, 989, 1059, 1145, 1217, 1288, 1355, 1646, 2059], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jior/wechat/tree/master/src/main/java/com/glaf/apps/vote/web/springmvc/WxVoteController.java", "rawCode": "  @ResponseBody\n  @RequestMapping(\"/saveWxVote\")\n  public byte[] saveWxVote(HttpServletRequest request) {\n    User user = RequestUtils.getUser(request);\n    String actorId = user.getActorId();\n    Map<String, Object> params = RequestUtils.getParameterMap(request);\n    logger.debug(\"params:\" + params);\n    WxVote wxVote = new WxVote();\n    try {\n      Tools.populate(wxVote, params);\n      Long accountId = RequestUtils.getLong(request, \"accountId\");\n      wxVote.setAccountId(accountId);\n      wxVote.setTitle(request.getParameter(\"title\"));\n      wxVote.setContent(request.getParameter(\"content\"));\n      wxVote.setIcon(request.getParameter(\"icon\"));\n      wxVote.setKeywords(request.getParameter(\"keywords\"));\n      wxVote.setStatus(RequestUtils.getInt(request, \"status\"));\n      wxVote.setShowIconFlag(RequestUtils.getInt(request, \"showIconFlag\"));\n      wxVote.setSignFlag(RequestUtils.getInt(request, \"signFlag\"));\n      wxVote.setMultiFlag(RequestUtils.getInt(request, \"multiFlag\"));\n      wxVote.setLimitFlag(RequestUtils.getInt(request, \"limitFlag\"));\n      wxVote.setLimitTimeInterval(RequestUtils.getInt(request, \"limitTimeInterval\"));\n      wxVote.setResultFlag(RequestUtils.getInt(request, \"resultFlag\"));\n      wxVote.setStartDate(RequestUtils.getDate(request, \"startDate\"));\n      wxVote.setEndDate(RequestUtils.getDate(request, \"endDate\"));\n      wxVote.setRelationIds(request.getParameter(\"relationIds\"));\n      wxVote.setCreateBy(actorId);\n\n      Map<Integer, WxVoteItem> dataMap =\n          new java.util.concurrent.ConcurrentHashMap<Integer, WxVoteItem>();\n      String[] titleArray = request.getParameterValues(\"item_title\");\n      if (titleArray != null && titleArray.length > 0) {\n        int index = 0;\n        for (String t : titleArray) {\n          WxVoteItem item = new WxVoteItem();\n          item.setName(t);\n          item.setValue(String.valueOf(index));\n          wxVote.addItem(item);\n          dataMap.put(index, item);\n          index++;\n        }\n      }\n\n      String[] sortArray = request.getParameterValues(\"item_sort\");\n      if (sortArray != null && sortArray.length > 0) {\n        int index = 0;\n        for (String sort : sortArray) {\n          WxVoteItem item = dataMap.get(index++);\n          if (item != null && StringUtils.isNotEmpty(sort) && StringUtils.isNumeric(sort)) {\n            item.setSort(Integer.parseInt(sort));\n          }\n        }\n      }\n\n      this.wxVoteService.save(wxVote);\n\n      return ResponseUtils.responseJsonResult(true);\n    } catch (Exception ex) {\n      ex.printStackTrace();\n      logger.error(ex);\n    }\n    return ResponseUtils.responseJsonResult(false);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2563, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "NumberFormatException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 214, "tryExpressionEnd": 218, "tryBlockStart": 214, "tryBlockEnd": 365, "catchExpressionStart": 289, "catchExpressionEnd": 321, "catchBlockStart": 289, "catchBlockEnd": 365, "exceptionHandlingCallStart": [335], "exceptionHandlingCallEnd": [358], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 250, "focalAPIEnd": 280, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseLong(value)", "saveMessages(httpServletRequest,*)", "httpServletRequest.getUserPrincipal()", "createReturnUrl(httpServletRequest,long)", "httpServletRequest.getSession()", "httpServletRequest.setAttribute(String,ComplexTaskInfoVO)"], "useStart": [235, 685, 1661, 3177, 3540, 3657], "useEnd": [281, 755, 1687, 3209, 3560, 3691], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/smee/elateXam/tree/master/examServer/src/main/java/de/thorstenberger/examServer/webapp/action/ComplexTaskOverviewAction.java", "rawCode": "  @Override\n  public ActionForward execute(\n      ActionMapping mapping,\n      ActionForm form,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws Exception {\n\n    long taskId;\n\n    try {\n      taskId = Long.parseLong(request.getParameter(\"taskId\"));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(e);\n    }\n\n    TaskManager tm = getTaskManager();\n    TaskDef td = tm.getTaskDef(taskId);\n\n    TaskDef_Complex ctd;\n\n    try {\n      ctd = (TaskDef_Complex) td;\n    } catch (ClassCastException e) {\n      throw new RuntimeException(\"invalid type: \\\"\" + td.getType() + \"\\\", \" + e.getMessage());\n    }\n\n    if (ctd == null) {\n      saveMessages(request, new ActionMessage(\"errors.invalidtask\", taskId));\n      return mapping.findForward(\"mainMenu\");\n    }\n    ComplexTaskInfoVO tivo = new ComplexTaskInfoVO();\n    tivo.setActive(ctd.isActive());\n    if (ctd.getDeadline() != null) {\n      tivo.setDeadline(DateUtil.getStringFromMillis(ctd.getDeadline()));\n    }\n    tivo.setShortDescription(ctd.getShortDescription());\n    tivo.setStopped(ctd.isStopped());\n    tivo.setTitle(ctd.getComplexTaskDefRoot().getTitle());\n    tivo.setType(ctd.getType());\n    tivo.setId(\"\" + ctd.getId());\n\n    tivo.setMaxTries(ctd.getComplexTaskDefRoot().getTries());\n    tivo.setTime(ctd.getComplexTaskDefRoot().getTimeInMinutesWithoutKindnessExtensionTime());\n    tivo.setStartText(ctd.getComplexTaskDefRoot().getStartText());\n    tivo.setShowHandlingHintsBeforeStart(\n        ctd.getComplexTaskDefRoot().isShowHandlingHintsBeforeStart());\n    tivo.setSpecificDescription(ctd.getComplexTaskDefRoot().getDescription());\n\n    if (request.getUserPrincipal() == null) throw new RuntimeException(\"Not logged in.\");\n\n    String login = request.getUserPrincipal().getName();\n    UserManager userManager = (UserManager) getBean(\"userManager\");\n    User user = userManager.getUserByUsername(login);\n\n    ComplexTasklet tasklet = (ComplexTasklet) tm.getTaskletContainer().getTasklet(taskId, login);\n    if (tasklet == null) {\n      tasklet = (ComplexTasklet) tm.getTaskletContainer().createTasklet(taskId, login);\n    }\n\n    tivo.setUsedTries(tasklet.getComplexTaskHandlingRoot().getNumberOfTries());\n    tivo.setCanStartNewTry(tasklet.canStartNewTry());\n    tivo.setCanContinueTry(tasklet.canContinueTry());\n\n    if (tasklet.canContinueTry()) {\n      if (tasklet.getComplexTaskDefRoot().hasTimeRestriction()) {\n        tivo.setCtDeadline(\n            DateUtil.getStringFromMillis(\n                tasklet.getActiveTry().getStartTime()\n                    + tasklet.getActiveTry().getTimeExtension()\n                    + ctd.getComplexTaskDefRoot().getTimeInMinutesWithoutKindnessExtensionTime()\n                        * 60\n                        * 1000));\n      }\n    }\n\n    if (ctd.isShowCorrectionToUsers() && tasklet.hasOrPassedStatus(Tasklet.Status.SOLVED)) {\n      tivo.setCorrectionVisible(true);\n    }\n\n    TaskModelViewDelegateObject delegateObject =\n        new TaskModelViewDelegateObjectImpl(\n            taskId,\n            tm,\n            login,\n            user.getFirstName() + \" \" + user.getLastName(),\n            response.encodeURL(createReturnUrl(request, taskId)),\n            ((ConfigManager) getBean(\"configManager\")).getRandomSeed());\n\n    // request.getSession().setAttribute( EPReservedKeys.PRINCIPAL, request.getUserPrincipal() );\n    // request.getSession().setAttribute( TaskContants.TASK_MODEL_VIEW_DELEGATE_OBJECT_KEY_PREFIX +\n    // taskId, delegateObject );\n    String sessionId = request.getSession().getId();\n    TaskModelViewDelegate.storeDelegateObject(sessionId, taskId, delegateObject);\n\n    request.setAttribute(\"task\", tivo);\n\n    return mapping.findForward(\"success\");\n  }\n"}, {"dataset": "getParameter", "exampleID": 2564, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.getSession()"], "configurationStart": [211], "configurationEnd": [231], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 335, "focalAPIEnd": 360, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameterValues(String)", "httpServletRequest.getPathInfo()", "add(*,value,String[])"], "useStart": [386, 437, 583, 803, 796], "useEnd": [411, 462, 629, 824, 853], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bastienMPDL/Imeji/tree/master/imeji_presentation/src/main/java/de/mpg/imeji/presentation/history/HistoryFilter.java", "rawCode": "  public void doFilter(ServletRequest serv, ServletResponse resp, FilterChain chain)\n      throws IOException, ServletException {\n    HttpServletRequest request = (HttpServletRequest) serv;\n    servletContext = request.getSession().getServletContext();\n    HistorySession hs = getHistorySession(request, resp);\n    String q = (String) request.getParameter(\"q\");\n    String h = (String) request.getParameter(\"h\");\n    String f = (String) request.getParameter(\"f\");\n    // Parameter used by pretty query to pass parameter defined in pretty-config in the url pattern\n    String[] ids = request.getParameterValues(\"com.ocpsoft.vP_0\");\n    // If f exists, then it is a filter, not added to history\n    if (f == null) {\n      if (h == null) {\n        // if h not defined, then it is a new page\n        hs.add(request.getPathInfo().replaceAll(\"/\", \"\"), q, ids);\n      } else if (!\"\".equals(h)) {\n        // If h defined, then it is an history link\n        hs.remove(Integer.parseInt(h));\n      }\n    }\n    chain.doFilter(serv, resp);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2565, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 841, "focalAPIEnd": 865, "followUpCheck": "StringUtils.isEmpty(value)", "checkType": "IF", "followUpCheckExpressionStart": 1296, "followUpCheckExpressionEnd": 1326, "followUpCheckBlockStart": 1296, "followUpCheckBlockEnd": 1344, "use": ["httpServletRequest.getParameter(String)", "getIntParam(httpServletRequest,String,int)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "getDoubleParam(httpServletRequest,String,*)", "httpServletRequest.getParameter(String)", "toKML(value,SpatialPrefixTree,List<String>)"], "useStart": [912, 1817, 1871, 2327, 2831, 3799, 3994], "useEnd": [939, 1846, 1899, 2355, 2896, 3825, 4027], "hasFinally": 1, "cleanUpCall": ["closeQuietly(InputStream)"], "finallyExpressionStart": 1602, "finallyExpressionEnd": 1610, "finallyBlockStart": 1602, "finallyBlockEnd": 1653, "cleanUpCallStart": [1620], "cleanUpCallEnd": [1644], "url": "https://github.com/ryantxu/spatial-solr-sandbox/tree/master/spatial-demo/src/main/java/com/spatial4j/demo/servlet/GridInfoServlet.java", "rawCode": "  @Override\n  protected void doPost(HttpServletRequest req, HttpServletResponse res)\n      throws ServletException, IOException {\n    // Initialize the SpatialContext from the request parameters.\n    JtsSpatialContext ctx;\n    HashMap<String, String> ctxParams = new HashMap<String, String>();\n    ctxParams.put(\"spatialContextFactory\", JtsSpatialContextFactory.class.getName());\n    ctxParams.put(\"geo\", \"true\");\n    ctxParams.put(\"autoIndex\", \"true\");\n    ctxParams.put(\"normWrapLongitude\", \"true\"); // our country dataset needs this\n    for (Map.Entry<String, String[]> entry : req.getParameterMap().entrySet()) {\n      ctxParams.put(entry.getKey(), (entry.getValue())[0]);\n    }\n    ctx =\n        (JtsSpatialContext)\n            SpatialContextFactory.makeSpatialContext(ctxParams, getClass().getClassLoader());\n\n    //\n    String name = req.getParameter(\"name\");\n    Shape shape = null;\n    String country = req.getParameter(\"country\");\n    if (country != null && country.length() == 3) {\n      InputStream in = WicketApplication.getStreamFromDataResource(\"countries-poly.txt\");\n      try {\n        SampleDataReader reader = new SampleDataReader(in);\n        while (reader.hasNext()) {\n          SampleData data = reader.next();\n          if (country.equalsIgnoreCase(data.id)) {\n            if (StringUtils.isEmpty(name)) name = data.name;\n            shape = ctx.readShapeFromWkt(data.shape);\n            break;\n          }\n        }\n      } catch (ParseException e) {\n        log(e.toString(), e);\n        res.sendError(HttpServletResponse.SC_BAD_REQUEST, e.toString());\n        return;\n      } finally {\n        IOUtils.closeQuietly(in);\n      }\n\n      if (shape == null) {\n        res.sendError(HttpServletResponse.SC_BAD_REQUEST, \"unable to find: \" + country);\n        return;\n      }\n    }\n    int depth = getIntParam(req, \"depth\", 16);\n\n    String gridtype = req.getParameter(\"gridType\");\n\n    SpatialPrefixTree grid;\n    if (\"geohash\".equals(gridtype)) {\n      grid = new GeohashPrefixTree(ctx, depth);\n    } else if (\"quad\".equals(gridtype)) {\n      grid = new QuadPrefixTree(ctx, depth);\n    } else {\n      res.sendError(HttpServletResponse.SC_BAD_REQUEST, \"unknown grid type: \" + gridtype);\n      return;\n    }\n\n    // If they don't set a country, then use the input\n    if (shape == null) {\n      String geo = req.getParameter(\"geometry\");\n      if (geo == null) {\n        res.sendError(HttpServletResponse.SC_BAD_REQUEST, \"missing parameter: 'geometry'\");\n        return;\n      }\n      try {\n        shape = ctx.readShapeFromWkt(geo);\n      } catch (Exception ex) {\n        ex.printStackTrace();\n        res.sendError(HttpServletResponse.SC_BAD_REQUEST, \"error parsing geo: \" + ex);\n        return;\n      }\n    }\n    SpatialArgs args = new SpatialArgs(SpatialOperation.Intersects, shape);\n    double distErrPct = getDoubleParam(req, \"distErrPct\", SpatialArgs.DEFAULT_DISTERRPCT);\n    double distErr = args.resolveDistErr(grid.getSpatialContext(), distErrPct);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Cell> allCells = grid.getCells(shape, detailLevel, true, true);\n    int totalCells = allCells.size();\n    List<Cell> leafCells = new ArrayList<>(allCells.size() / 2);\n    int biggestLevel = 100; // that is a leaf\n    for (Cell cell : allCells) {\n      if (!cell.isLeaf()) continue;\n      leafCells.add(cell);\n      biggestLevel = Math.min(biggestLevel, cell.getLevel());\n    }\n    String msg =\n        \"Using detail level \"\n            + detailLevel\n            + \" (biggest is \"\n            + biggestLevel\n            + \")\"\n            + \" yielding \"\n            + leafCells.size()\n            + \" leaf tokens, \"\n            + totalCells\n            + \" total.\";\n    log(msg);\n\n    List<String> info = cellsToTokenStrings(leafCells);\n    String format = req.getParameter(\"format\");\n    if (\"kml\".equals(format)) {\n      if (name == null || name.length() < 2) {\n        name = \"KML - \" + new Date(System.currentTimeMillis());\n      }\n      Kml kml = KMLHelper.toKML(name, grid, info);\n\n      res.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + name + \".kml\\\";\");\n      res.setContentType(\"application/vnd.google-earth.kml+xml\");\n      kml.marshal(res.getOutputStream());\n      return;\n    }\n\n    res.setContentType(\"text/plain\");\n    PrintStream out = new PrintStream(res.getOutputStream());\n    out.println(msg);\n    out.println(info.toString());\n  }\n"}, {"dataset": "getParameter", "exampleID": 2566, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 201, "focalAPIEnd": 255, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseDouble(value)", "httpServletRequest.getParameter(String)"], "useStart": [182, 473], "useEnd": [256, 512], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenIotOrg/openiot/tree/master/modules/x-gsn/src/main/java/org/openiot/gsn/http/rest/RestStreamHanlder.java", "rawCode": "  /** This happens at the client */\n  public void doPut(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException {\n    double notificationId =\n        Double.parseDouble(request.getParameter(PushDelivery.NOTIFICATION_ID_KEY));\n    PushRemoteWrapper notification =\n        NotificationRegistry.getInstance().getNotification(notificationId);\n    try {\n      if (notification != null) {\n        boolean status = notification.manualDataInsertion(request.getParameter(PushDelivery.DATA));\n        if (status) response.setStatus(SUCCESS_200);\n        else response.setStatus(_300);\n      } else {\n        logger.warn(\"Received a Http put request for an INVALID notificationId: \" + notificationId);\n        response.sendError(_300);\n      }\n    } catch (IOException e) {\n      logger.warn(\"Failed in writing the status code into the connection.\\n\" + e.getMessage(), e);\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2567, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 156, "focalAPIEnd": 184, "followUpCheck": "memcache.contains(\"userProfile_\" + value)", "checkType": "IF", "followUpCheckExpressionStart": 273, "followUpCheckExpressionEnd": 322, "followUpCheckBlockStart": 273, "followUpCheckBlockEnd": 628, "use": ["createKey(String,value)", "UserProfile.setUsername(value)", "getUserEntity(value)"], "useStart": [458, 2095, 2154], "useEnd": [503, 2128, 2177], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RobertMcDermot/CS1530Project/tree/master/Addendum/src/com/cs1530/group4/addendum/server/GetUserProfileServlet.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  private void performActions(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String username = req.getParameter(\"username\");\n    UserProfile userProfile = new UserProfile();\n\n    Entity profileEntity = null;\n    if (memcache.contains(\"userProfile_\" + username))\n      profileEntity = ((Entity) memcache.get(\"userProfile_\" + username));\n    else {\n      try {\n        profileEntity = datastore.get(KeyFactory.createKey(\"UserProfile\", username));\n        memcache.put(\"userProfile_\" + username, profileEntity);\n      } catch (EntityNotFoundException ex) {\n      }\n    }\n\n    if (profileEntity != null) {\n      if (profileEntity.hasProperty(\"address\"))\n        userProfile.setAddress((String) profileEntity.getProperty(\"address\"));\n      if (profileEntity.hasProperty(\"birthday\"))\n        userProfile.setBirthday((String) profileEntity.getProperty(\"birthday\"));\n      if (profileEntity.hasProperty(\"braggingRights\"))\n        userProfile.setBraggingRights((String) profileEntity.getProperty(\"braggingRights\"));\n      if (profileEntity.hasProperty(\"college\"))\n        userProfile.setCollege((String) profileEntity.getProperty(\"college\"));\n      if (profileEntity.hasProperty(\"email\"))\n        userProfile.setEmail((String) profileEntity.getProperty(\"email\"));\n      if (profileEntity.hasProperty(\"gender\"))\n        userProfile.setGender((String) profileEntity.getProperty(\"gender\"));\n      if (profileEntity.hasProperty(\"highSchool\"))\n        userProfile.setHighSchool((String) profileEntity.getProperty(\"highSchool\"));\n      if (profileEntity.hasProperty(\"introduction\"))\n        userProfile.setIntroduction((String) profileEntity.getProperty(\"introduction\"));\n      if (profileEntity.hasProperty(\"name\"))\n        userProfile.setName((String) profileEntity.getProperty(\"name\"));\n      if (profileEntity.hasProperty(\"phone\"))\n        userProfile.setPhone((String) profileEntity.getProperty(\"phone\"));\n      if (profileEntity.hasProperty(\"tagline\"))\n        userProfile.setTagline((String) profileEntity.getProperty(\"tagline\"));\n    }\n\n    userProfile.setUsername(username);\n    Entity userEntity = getUserEntity(username);\n    if (userEntity != null && userEntity.hasProperty(\"courseList\"))\n      userProfile.setCourseList((ArrayList<String>) userEntity.getProperty(\"courseList\"));\n    else userProfile.setCourseList(new ArrayList<String>());\n\n    resp.setContentType(\"application/json\");\n    Gson gson = new Gson();\n    String json = gson.toJson(userProfile);\n    resp.getWriter().print(json);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2568, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 226, "focalAPIEnd": 252, "followUpCheck": "value.equalsIgnoreCase(\"delete\")", "checkType": "IF", "followUpCheckExpressionStart": 258, "followUpCheckExpressionEnd": 296, "followUpCheckBlockStart": 258, "followUpCheckBlockEnd": 432, "use": ["doDelete(httpServletRequest,HttpServletResponse)", "doPut(httpServletRequest,HttpServletResponse)"], "useStart": [305, 395], "useEnd": [324, 411], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CSC440NotUserFriendly/Not_User_Friendly/tree/master/Documents/Code References/CodeLabEx1/src/com/google/appengine/codelab/ItemServlet.java", "rawCode": "  /** Redirects to delete or insert entity based on the action in the HTTP request. */\n  protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n      throws ServletException, IOException {\n    String action = req.getParameter(\"action\");\n    if (action.equalsIgnoreCase(\"delete\")) {\n      doDelete(req, resp);\n      return;\n    } else if (action.equalsIgnoreCase(\"put\")) {\n      doPut(req, resp);\n      return;\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2569, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 627, "focalAPIEnd": 654, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setNgoId(value)", "httpServletRequest.getParameter(String)", "httpServletRequest.getSession()", "httpServletRequest.getRequestDispatcher(String)", "RequestDispatcher.forward(httpServletRequest,HttpServletResponse)", "httpServletRequest.getRequestDispatcher(String)", "RequestDispatcher.include(httpServletRequest,HttpServletResponse)"], "useStart": [608, 678, 771, 905, 956, 1011, 1142], "useEnd": [655, 705, 791, 948, 985, 1051, 1171], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AshishNamdev/Socioware/tree/master/src/java/controller/NgoLoginServlet.java", "rawCode": "  /**\n   * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.\n   *\n   * @param request servlet request\n   * @param response servlet response\n   * @throws ServletException if a servlet-specific error occurs\n   * @throws IOException if an I/O error occurs\n   */\n  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    response.setContentType(\"text/html;charset=UTF-8\");\n    PrintWriter out = response.getWriter();\n    NgoLogin ngo_login = new NgoLogin();\n    RequestDispatcher rd = null;\n\n    ngo_login.setNgoId(request.getParameter(\"nid\"));\n    ngo_login.setPwd(request.getParameter(\"pwd\"));\n\n    if (ngo_login.isValidNgo()) {\n      HttpSession session = request.getSession();\n      session.setAttribute(\"nid\", ngo_login.getNgoId());\n      session.setMaxInactiveInterval(5000);\n      rd = request.getRequestDispatcher(\"NgoHome.jsp\");\n      rd.forward(request, response);\n    } else {\n      rd = request.getRequestDispatcher(\"Home.jsp\");\n      out.println(\"<span id='response'>User Id and Password Do not Match</span>\");\n      rd.include(request, response);\n    }\n    out.close();\n  }\n"}, {"dataset": "getParameter", "exampleID": 2570, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "PlatformException", "exceptionHandlingCall": ["printStackTrace()", "setSuccess(*)", "getMessage()", "setMessage(*)"], "tryExpressionStart": 188, "tryExpressionEnd": 192, "tryBlockStart": 188, "tryBlockEnd": 1134, "catchExpressionStart": 851, "catchExpressionEnd": 879, "catchBlockStart": 851, "catchBlockEnd": 996, "exceptionHandlingCallStart": [887, 914, 974, 955], "exceptionHandlingCallEnd": [906, 947, 988, 989], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 352, "focalAPIEnd": 380, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)"], "useStart": [403, 453, 737], "useEnd": [432, 480, 768], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eastseven/tsm/tree/master/tsm/src/main/java/com/justinmobile/tsm/application/web/ApplicationVersionController.java", "rawCode": "  @RequestMapping\n  public @ResponseBody JsonMessage subReportFinishTest(\n      HttpServletRequest request, @RequestParam Long appverId) {\n    JsonMessage message = new JsonMessage();\n    try {\n      ApplicationVersionTestReport testReport = new ApplicationVersionTestReport();\n      SpringMVCUtils.bindObject(request, testReport);\n      String year = request.getParameter(\"year\");\n      String month = request.getParameter(\"month\");\n      String day = request.getParameter(\"day\");\n      SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd\");\n      Date date = sdf.parse(year + month + day);\n      Calendar calendar = Calendar.getInstance();\n      calendar.setTime(date);\n      testReport.setTestDate(calendar);\n      String subType = request.getParameter(\"subType\");\n      applicationVersionManager.finishTest(testReport, appverId, subType);\n    } catch (PlatformException e) {\n      e.printStackTrace();\n      message.setSuccess(Boolean.FALSE);\n      message.setMessage(e.getMessage());\n    } catch (Exception e) {\n      e.printStackTrace();\n      message.setSuccess(Boolean.FALSE);\n      message.setMessage(e.getMessage());\n    }\n    return message;\n  }\n"}, {"dataset": "getParameter", "exampleID": 2571, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getName()", "getLogger(*)", "log(*,*,*)"], "tryExpressionStart": 411, "tryExpressionEnd": 415, "tryBlockStart": 411, "tryBlockEnd": 1214, "catchExpressionStart": 936, "catchExpressionEnd": 960, "catchBlockStart": 936, "catchBlockEnd": 1052, "exceptionHandlingCallStart": [985, 968, 968], "exceptionHandlingCallEnd": [1016, 1017, 1045], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 441, "focalAPIEnd": 473, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["PrintWriter.close()"], "finallyExpressionStart": 1180, "finallyExpressionEnd": 1188, "finallyBlockStart": 1180, "finallyBlockEnd": 1214, "cleanUpCallStart": [1196], "cleanUpCallEnd": [1207], "url": "https://github.com/shresthap/clubuml2013/tree/master/tags/release-1.0/Backend/ClubUml _new/src/controller/ValidateServlet.java", "rawCode": "  /** @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */\n  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    // TODO Auto-generated method stub\n    response.setContentType(\"text/html;charset=UTF-8\");\n    PrintWriter out = response.getWriter();\n\n    /*\n     * check user before registion.\n     */\n    try {\n      String username = request.getParameter(\"username\");\n      Class.forName(\"com.mysql.jdbc.Driver\");\n      Connection con =\n          DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clubuml2\", \"root\", \"\");\n      Statement stmnt = con.createStatement();\n      String sql = \"SELECT * FROM user where username = '\" + username + \"'\";\n      ResultSet rs = stmnt.executeQuery(sql);\n\n      if (rs.next()) out.println(\"<font color='red'>name exist!\");\n      else out.println(\"<font color='green'>name ok!\");\n\n    } catch (SQLException ex) {\n      Logger.getLogger(ValidateServlet.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (ClassNotFoundException ex) {\n      Logger.getLogger(ValidateServlet.class.getName()).log(Level.SEVERE, null, ex);\n    } finally {\n      out.close();\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2572, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 786, "focalAPIEnd": 814, "followUpCheck": "value == null || value.equals(\"\")", "checkType": "IF", "followUpCheckExpressionStart": 1276, "followUpCheckExpressionEnd": 1318, "followUpCheckBlockStart": 1276, "followUpCheckBlockEnd": 1393, "use": ["httpServletRequest.getPathInfo()", "httpServletRequest.getQueryString()", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "value.indexOf(String)", "value.substring(*)", "escapeUrl(value)", "escapeUrl(value)"], "useStart": [953, 997, 1359, 1413, 5418, 5400, 6852, 6960], "useEnd": [970, 1017, 1386, 1438, 5444, 5466, 6880, 6988], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta02/kernel-impl/src/main/java/org/sakaiproject/content/impl/CollectionAccessFormatter.java", "rawCode": "  /** Format the collection as an HTML display. */\n  public static void format(\n      ContentCollection x,\n      Reference ref,\n      HttpServletRequest req,\n      HttpServletResponse res,\n      String accessPointTrue,\n      String accessPointFalse) {\n    // do not allow directory listings for /attachments and its subfolders\n    if (ContentHostingService.isAttachmentResource(x.getId())) {\n      try {\n        res.sendError(HttpServletResponse.SC_NOT_FOUND);\n        return;\n      } catch (java.io.IOException e) {\n        return;\n      }\n    }\n\n    PrintWriter out = null;\n    // don't set the writer until we verify that\n    // getallresources is going to work.\n    boolean printedHeader = false;\n    boolean printedDiv = false;\n\n    String path = ref.getId();\n    String basedir = req.getParameter(\"sbasedir\");\n    // path may have been transformed by an alias\n    // we need origpath to check whether there was as trailing /\n    String origpath = req.getPathInfo();\n    String querystring = req.getQueryString();\n    // set access to /access/content, must skip http://host\n    String access = accessPointFalse;\n    int i = access.indexOf(\"://\");\n    if (i > 0) i = access.indexOf(\"/\", i + 3);\n    if (i > 0) access = access.substring(i);\n\n    boolean sferyx = true;\n    if (basedir == null || basedir.equals(\"\")) {\n      sferyx = false;\n      basedir = req.getParameter(\"basedir\");\n    }\n    String field = req.getParameter(\"field\");\n\n    // System.out.println(\"basedir \" + basedir);\n\n    if (field == null) field = \"url\";\n\n    try {\n      List members = x.getMemberResources();\n      // we will need resources. getting them once makes the sort a whole lot faster\n      // System.out.println(\"before sort have \" + members.size());\n\n      boolean hasCustomSort = false;\n      try {\n        hasCustomSort =\n            x.getProperties().getBooleanProperty(ResourceProperties.PROP_HAS_CUSTOM_SORT);\n      } catch (Exception e) {\n        // use false that's already there\n      }\n\n      if (sferyx || basedir != null)\n        Collections.sort(\n            members, new ContentHostingComparator(ResourceProperties.PROP_DISPLAY_NAME, true));\n      else if (hasCustomSort)\n        Collections.sort(\n            members, new ContentHostingComparator(ResourceProperties.PROP_CONTENT_PRIORITY, true));\n      else\n        Collections.sort(\n            members, new ContentHostingComparator(ResourceProperties.PROP_DISPLAY_NAME, true));\n\n      // System.out.println(\"after sort have \" + members.size());\n\n      Iterator xi = members.iterator();\n\n      res.setContentType(\"text/html; charset=UTF-8\");\n\n      out = res.getWriter();\n\n      if (sferyx) {\n        out.println(\n            \"<html><head><meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=windows-1252\\\"><title>Control Panel - FileBrowser</title></head><body bgcolor=\\\"#FFFFFF\\\" topmargin=\\\"0\\\" leftmargin=\\\"0\\\"><b><font color=\\\"#000000\\\" face=\\\"Arial\\\" size=\\\"3\\\">Path:&nbsp;\"\n                + access\n                + Validator.escapeHtml(path)\n                + \"</font></b><table border=\\\"0\\\" width=\\\"100%\\\" bgcolor=\\\"#FFFFFF\\\" cellspacing=\\\"0\\\" cellpadding=\\\"0\\\">\");\n        printedHeader = true;\n\n      } else {\n        ResourceProperties pl = x.getProperties();\n        out.println(\n            \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \\\"http://www.w3.org/TR/html4/loose.dtd\\\">\");\n        out.println(\"<html><head>\");\n        out.println(\n            \"<title>\"\n                + \"Index of \"\n                + pl.getProperty(ResourceProperties.PROP_DISPLAY_NAME)\n                + \"</title>\");\n        String webappRoot = ServerConfigurationService.getServerUrl();\n        out.println(\n            \"<link href=\\\"\"\n                + webappRoot\n                + \"/library/skin/default/access.css\\\" type=\\\"text/css\\\" rel=\\\"stylesheet\\\" media=\\\"screen\\\" />\");\n        if (basedir != null) {\n          out.println(\"<script type=\\\"text/javascript\\\">\");\n          out.println(\"function seturl(url) {\");\n          out.println(\n              \"window.opener.document.forms[0].\"\n                  + Validator.escapeJavascript(field)\n                  + \".value = url; window.close();\");\n          out.println(\"}\");\n          out.println(\"</script>\");\n        }\n\n        out.println(\"</head><body>\");\n        out.println(\"<div class=\\\"directoryIndex\\\">\");\n        // for content listing it's best to use a real title\n        if (basedir != null) out.println(\"<h2>Contents of \" + access + path + \"</h2>\");\n        else {\n          out.println(\"<h2>\" + pl.getProperty(ResourceProperties.PROP_DISPLAY_NAME) + \"</h2>\");\n          String desc = pl.getProperty(ResourceProperties.PROP_DESCRIPTION);\n          if (desc != null && !desc.equals(\"\")) out.println(\"<p>\" + desc + \"</p>\");\n        }\n\n        out.println(\"<table summary=\\\"Directory index\\\">\");\n        printedHeader = true;\n        printedDiv = true;\n      }\n\n      int slashes = countSlashes(path);\n\n      // basedir will be a full url:\n      // http://host:8080/access/content/group/db5a4d0c-3dfd-4d10-8018-41db42ac7c8b/\n      // possibly with a file name on the end.\n      // xss is just the file name. Compute a prefix\n\n      String filepref = \"\";\n      // /content\n      String relaccess = accessPointTrue;\n      if (basedir != null && !basedir.equals(\"none\")) {\n        // start bases after /access/content, since it isn't in path\n        String bases = basedir.substring(basedir.indexOf(relaccess) + relaccess.length());\n        int lastslash = 0;\n        // path is always a directory, so it ends in /\n        // do that for base as well\n        if (!bases.endsWith(\"/\")) {\n          lastslash = bases.lastIndexOf(\"/\");\n          if (lastslash > 0) bases = bases.substring(0, lastslash + 1);\n        }\n        // path and bases should now be comparable, starting\n        // at /user or /group and ending in /\n        // bases: /a/b/c/\n        // path: /a/b/d/\n        // need ../d\n        // this code is used in a context where we know there\n        // actually is overlap\n        while (bases.length() > path.length()\n            || (!bases.equals(\"/\") && !bases.equals(path.substring(0, bases.length())))) {\n          lastslash = bases.lastIndexOf(\"/\", bases.length() - 2);\n          if (lastslash < 0) break;\n          filepref = filepref + \"../\";\n          bases = bases.substring(0, lastslash + 1);\n        }\n        // bases is now the common part, e.g. /a/b/ /a/b/c\n        // add the rest of path\n        if (path.length() > bases.length())\n          filepref = filepref + Validator.escapeUrl(path.substring(bases.length()));\n      } else if (basedir != null && basedir.equals(\"none\")) {\n        filepref = access + Validator.escapeUrl(path);\n      }\n\n      // for web content format, need to be able to choose main URL\n\n      String baseparam = \"\";\n      if (sferyx) baseparam = \"?sbasedir=\" + Validator.escapeUrl(basedir);\n      else if (basedir != null)\n        baseparam =\n            \"?basedir=\" + Validator.escapeUrl(basedir) + \"&field=\" + Validator.escapeUrl(field);\n\n      if (slashes > 3) {\n        // go up a level\n        String uplev = path.substring(0, path.length() - 1);\n        uplev = access + uplev.substring(0, uplev.lastIndexOf('/') + 1);\n\n        if (sferyx)\n          out.println(\n              \"<tr><td align=\\\"center\\\" left=\\\"50%\\\" height=\\\"20\\\"><b><a href=\\\"../\"\n                  + baseparam\n                  + \"\\\">Up one level</a></b></td><td width=\\\"20%\\\"></td><td width=\\\"30%\\\"></td></tr><form name=\\\"fileSelections\\\">\");\n        else if (basedir != null)\n          out.println(\n              \"<tr><td><a href=\\\"../\"\n                  + baseparam\n                  + \"\\\">Up one level</a></td><td><b>Folder</b>\"\n                  + \"</td><td>\"\n                  + \"</td><td>\"\n                  + \"</td><td>\"\n                  + \"</td></tr>\");\n        else out.println(\"<tr><td><a href=\\\"../\\\">Up one level</a> [Folder]</td><td></td></tr>\");\n      } else if (sferyx)\n        out.println(\n            \"<tr><td align=\\\"center\\\" left=\\\"50%\\\" height=\\\"20\\\">&nbsp;</td><td width=\\\"20%\\\"></td><td width=\\\"30%\\\"></td></tr><form name=\\\"fileSelections\\\">\");\n\n      while (xi.hasNext()) {\n        // System.out.println(\"hasnext\");\n        Entity nextres = (Entity) xi.next();\n        ResourceProperties properties = nextres.getProperties();\n        boolean isCollection = properties.getBooleanProperty(ResourceProperties.PROP_IS_COLLECTION);\n        String xs = nextres.getId();\n\n        ContentResource content = null;\n        if (isCollection) {\n          xs = xs.substring(0, xs.length() - 1);\n          xs = xs.substring(xs.lastIndexOf('/') + 1) + '/';\n        } else {\n          content = (ContentResource) nextres;\n          xs = xs.substring(xs.lastIndexOf('/') + 1);\n        }\n\n        // System.out.println(\"id \" + xs);\n\n        try {\n\n          if (isCollection) {\n            if (sferyx)\n              out.println(\n                  \"<tr><td bgcolor=\\\"#FFF678\\\" align=\\\"LEFT\\\"><font face=\\\"Arial\\\" size=\\\"3\\\">&nbsp;<a href=\\\"\"\n                      + Validator.escapeUrl(xs)\n                      + baseparam\n                      + \"\\\">\"\n                      + Validator.escapeHtml(xs)\n                      + \"</a></font></td><td bgcolor=\\\"#FFF678\\\" align=\\\"RIGHT\\\"><font face=\\\"Arial\\\" size=\\\"3\\\" color=\\\"#000000\\\">File Folder</font></td><td>&nbsp;</td></tr>\");\n            else if (basedir != null)\n              out.println(\n                  \"<tr><td><button type=button onclick=\\\"seturl('\"\n                      + filepref\n                      + Validator.escapeHtml(xs)\n                      + \"')\\\">Choose</button>&nbsp;<a href=\\\"\"\n                      + Validator.escapeUrl(xs)\n                      + baseparam\n                      + \"\\\">\"\n                      + Validator.escapeHtml(xs)\n                      + \"</a></td><td><b>Folder</b>\"\n                      + \"</td><td>\"\n                      + \"</td><td>\"\n                      + \"</td><td>\"\n                      + \"</td></tr>\");\n            else {\n              String desc = properties.getProperty(ResourceProperties.PROP_DESCRIPTION);\n              if (desc == null) desc = \"\";\n\n              out.println(\n                  \"<tr><td><a href=\\\"\"\n                      + Validator.escapeUrl(xs)\n                      + baseparam\n                      + \"\\\">\"\n                      + Validator.escapeHtml(\n                          properties.getProperty(ResourceProperties.PROP_DISPLAY_NAME))\n                      + \"</a> [Folder]</td><td>\"\n                      + Validator.escapeHtml(desc)\n                      + \"</td></tr>\");\n            }\n          } else {\n            long filesize = ((content.getContentLength() - 1) / 1024) + 1;\n            String createdBy =\n                getUserProperty(properties, ResourceProperties.PROP_CREATOR).getDisplayName();\n            Time modTime = properties.getTimeProperty(ResourceProperties.PROP_MODIFIED_DATE);\n            String modifiedTime =\n                modTime.toStringLocalShortDate() + \" \" + modTime.toStringLocalShort();\n            String filetype = content.getContentType();\n\n            if (sferyx)\n              out.println(\n                  \"<tr><td bgcolor=\\\"#FFFFFF\\\" align=\\\"LEFT\\\"><font face=\\\"Arial\\\" size=\\\"3\\\">&nbsp;&nbsp;</font><input type=\\\"submit\\\" name=\\\"selectedFiles\\\" value=\\\"\"\n                      + filepref\n                      + Validator.escapeUrl(xs)\n                      + \"\\\"></td><td bgcolor=\\\"#FFFFFF\\\" align=\\\"RIGHT\\\"><font face=\\\"Arial\\\" size=\\\"3\\\">\"\n                      + filesize\n                      + \"</font></td><td bgcolor=\\\"#FFFFFF\\\" align=\\\"LEFT\\\"><font face=\\\"Arial\\\" size=\\\"3\\\">&nbsp;&nbsp;\"\n                      + modifiedTime\n                      + \"</font></td></tr>\");\n            else if (basedir != null)\n              out.println(\n                  \"<tr><td><button type=button onclick=\\\"seturl('\"\n                      + filepref\n                      + Validator.escapeHtml(xs)\n                      + \"')\\\">Choose</button>&nbsp;&nbsp;\"\n                      + Validator.escapeHtml(xs)\n                      + \"</td><td>\"\n                      + filesize\n                      + \"</td><td>\"\n                      + createdBy\n                      + \"</td><td>\"\n                      + filetype\n                      + \"</td><td>\"\n                      + modifiedTime\n                      + \"</td></tr>\");\n            else {\n              String desc = properties.getProperty(ResourceProperties.PROP_DESCRIPTION);\n              if (desc == null) desc = \"\";\n\n              out.println(\n                  \"<tr><td><a href=\\\"\"\n                      + Validator.escapeUrl(xs)\n                      + \"\\\" target=_blank>\"\n                      + Validator.escapeHtml(\n                          properties.getProperty(ResourceProperties.PROP_DISPLAY_NAME))\n                      + \"</a></td><td>\"\n                      + Validator.escapeHtml(desc)\n                      + \"</td></tr>\");\n            }\n          }\n        } catch (Throwable ignore) {\n          if (sferyx)\n            out.println(\n                \"<tr><td bgcolor=\\\"#FFFFFF\\\" align=\\\"LEFT\\\"><font face=\\\"Arial\\\" size=\\\"3\\\">&nbsp;&nbsp;</font><input type=\\\"submit\\\" name=\\\"selectedFiles\\\" value=\\\"\"\n                    + filepref\n                    + Validator.escapeHtml(xs)\n                    + \"\\\"></td><td bgcolor=\\\"#FFFFFF\\\" align=\\\"RIGHT\\\"><font face=\\\"Arial\\\" size=\\\"3\\\">&nbsp</font></td><td bgcolor=\\\"#FFFFFF\\\" align=\\\"LEFT\\\"><font face=\\\"Arial\\\" size=\\\"3\\\">&nbsp;&nbsp;</font></td></tr>\");\n          else if (basedir != null)\n            out.println(\n                \"<tr><td><button type=button onclick=\\\"seturl('\"\n                    + filepref\n                    + Validator.escapeHtml(xs)\n                    + \"')\\\">Choose</button>&nbsp;&nbsp;\"\n                    + Validator.escapeHtml(xs)\n                    + \"</td><td>\"\n                    + \"</td><td>\"\n                    + \"</td><td>\"\n                    + \"</td><td>\"\n                    + \"</td></tr>\");\n          else\n            out.println(\n                \"<tr><td><a href=\\\"\"\n                    + Validator.escapeUrl(xs)\n                    + \"\\\" target=_blank>\"\n                    + Validator.escapeHtml(xs)\n                    + \"</a></td><td></tr>\");\n        }\n      }\n\n    } catch (Throwable ignore) {\n    }\n\n    if (out != null && printedHeader) {\n      out.println(\"</table>\");\n      if (printedDiv) out.println(\"</div>\");\n      out.println(\"</body></html>\");\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2573, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 81, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "new Socio(value,String)"], "useStart": [142, 187, 259, 362], "useEnd": [181, 253, 334, 390], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/uqbar-project/ejercicios-ui/tree/master/web/jsp/videoclub-ui-jsp/trunk/src/main/java/uqbar/videoclub/util/BusquedaSocioUtil.java", "rawCode": "  public static Socio getSocio(HttpServletRequest request) {\n    String nombre = request.getParameter(\"nombreBuscar\");\n    String direccion = request.getParameter(\"direccionBuscar\");\n    request.setAttribute(\"nombreBuscar\", nombre != null ? nombre : \"\");\n    request.setAttribute(\"direccionBuscar\", direccion != null ? direccion : \"\");\n    Socio socioBusqueda = new Socio(nombre, direccion);\n    return socioBusqueda;\n  }\n"}, {"dataset": "getParameter", "exampleID": 2574, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "httpServletRequest.getParameter(name,)!=null", "guardType": "IF {", "guardExpressionStart": 83, "guardExpressionEnd": 123, "guardBlockStart": 83, "guardBlockEnd": 221, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 87, "focalAPIEnd": 114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.equals(String)"], "useStart": [139], "useEnd": [181], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IAAS/oryx-editor/tree/master/poem-jvm/src/java/org/b3mn/poem/handler/CollectionHandler.java", "rawCode": "  protected boolean checkParameter(HttpServletRequest req, String parameter) {\n    if (req.getParameter(parameter) != null) {\n      return req.getParameter(parameter).equals(\"true\");\n    } else {\n      return false;\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2575, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.getSession()", "httpServletRequest.getSession()"], "configurationStart": [520, 679], "configurationEnd": [540, 699], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 819, "focalAPIEnd": 860, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["HistopathologyManager.get(value)", "saveErrors(httpServletRequest,ActionMessages)", "saveErrors(httpServletRequest,ActionMessages)"], "useStart": [3136, 3760, 4156], "useEnd": [3183, 3784, 4180], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/camod/tree/master/software/camod/src/gov/nih/nci/camod/webapp/action/HistopathologyAction.java", "rawCode": "  /**\n   * Save\n   *\n   * @param mapping\n   * @param form\n   * @param request\n   * @param response\n   * @return\n   * @throws Exception\n   */\n  public ActionForward saveMetastasis(\n      ActionMapping mapping,\n      ActionForm form,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws Exception {\n\n    log.debug(\"<HistopathologyAction> Entering 'saveMetastasis' method\");\n\n    // Create a form to edit\n    AssociatedMetastasisForm assocMetastasisForm = (AssociatedMetastasisForm) form;\n    request.getSession().setAttribute(Constants.FORMDATA, assocMetastasisForm);\n\n    // Grab the current modelID from the session\n    String theModelId = (String) request.getSession().getAttribute(Constants.MODELID);\n\n    // Grab the current aHistopathID from the session\n    String aHistopathologyID = request.getParameter(\"aHistopathologyID\");\n\n    log.debug(\n        \"<HistopathologyAction saveMetastasis> following Characteristics:\"\n            + \"\\n\\t ParentHistopathID: \"\n            + aHistopathologyID\n            + \"\\n\\t organ: \"\n            + assocMetastasisForm.getOrgan()\n            + \"\\n\\t organTissueName: \"\n            + assocMetastasisForm.getOrganTissueName()\n            + \"\\n\\t organTissueCode: \"\n            + assocMetastasisForm.getOrganTissueCode()\n            + \"\\n\\t DiagnosisName: \"\n            + assocMetastasisForm.getDiagnosisName()\n            + \"\\n\\t DiagnosisCode: \"\n            + assocMetastasisForm.getDiagnosisCode()\n            + \"\\n\\t TumorClassification: \"\n            + assocMetastasisForm.getTumorClassification()\n            + \"\\n\\t OtherTumorClassification: \"\n            + assocMetastasisForm.getOtherTumorClassification()\n            + \"\\n\\t ageOfOnset: \"\n            + assocMetastasisForm.getAgeOfOnset()\n            + \"\\n\\t ageOfDetection: \"\n            + assocMetastasisForm.getAgeOfDetection()\n            + \"\\n\\t weightOfTumor: \"\n            + assocMetastasisForm.getWeightOfTumor()\n            + \"\\n\\t volumeOfTumor: \"\n            + assocMetastasisForm.getVolumeOfTumor()\n            + \"\\n\\t tumorIncidenceRate: \"\n            + assocMetastasisForm.getTumorIncidenceRate()\n            + \"\\n\\t survivalInfo: \"\n            + assocMetastasisForm.getMethodOfObservation()\n            + \"\\n\\t grossDescription: \"\n            + assocMetastasisForm.getGrossDescription()\n            + \"\\n\\t microscopicDescription: \"\n            + assocMetastasisForm.getMicroscopicDescription()\n            + \"\\n\\t observation: \"\n            + assocMetastasisForm.getObservation()\n            + \"\\n\\t methodOfObservation: \"\n            + assocMetastasisForm.getMethodOfObservation()\n            + \"\\n\\t comparativeData: \"\n            + assocMetastasisForm.getComparativeData()\n            + \"\\n\\t comments: \"\n            + assocMetastasisForm.getComments()\n            + \"\\n\\t user: \"\n            + (String) request.getSession().getAttribute(\"camod.loggedon.username\"));\n\n    String theForward = \"AnimalModelTreePopulateAction\";\n\n    HistopathologyManager theHistopathologyManager =\n        (HistopathologyManager) getBean(\"histopathologyManager\");\n    Histopathology theParentHistopathology = theHistopathologyManager.get(aHistopathologyID);\n\n    // retrieve model and update w/ new values\n    AnimalModelManager theAnimalModelManager = (AnimalModelManager) getBean(\"animalModelManager\");\n    AnimalModel theAnimalModel = theAnimalModelManager.get(theModelId);\n\n    try {\n\n      theHistopathologyManager.addAssociatedMetastasis(\n          theAnimalModel, theParentHistopathology, assocMetastasisForm);\n\n      log.debug(\"New metastasis created\");\n\n      ActionMessages msg = new ActionMessages();\n      msg.add(\n          ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"assocmetastasis.creation.successful\"));\n      saveErrors(request, msg);\n\n      log.debug(\"<HistopathologyAction> Exiting 'saveMetastasis' method\");\n\n    } catch (Exception e) {\n      log.error(\"Exception occurred creating AssociatedExpression\", e);\n\n      // Encountered an error saving the model.\n      ActionMessages msg = new ActionMessages();\n      msg.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.admin.message\"));\n      saveErrors(request, msg);\n    }\n\n    log.debug(\"<HistopathologyAction> Exiting saveMetastasis\");\n    return mapping.findForward(theForward);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2576, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 221, "focalAPIEnd": 245, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new JID(value)", "httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)"], "useStart": [213, 287, 334], "useEnd": [246, 309, 358], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/app-inventor-gallery/aig/tree/master/backend-appengine/appengine-java-sdk-1.5.0.1/demos/helloxmpp/src/com/google/appengine/demos/helloxmpp/HelloXmpp.java", "rawCode": "  public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {\n    Message message =\n        new MessageBuilder()\n            .withMessageType(MessageType.CHAT)\n            .withFromJid(new JID(req.getParameter(\"from\")))\n            .withRecipientJids(new JID(req.getParameter(\"to\")))\n            .withBody(req.getParameter(\"body\"))\n            .build();\n    processMessage(message, res);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2577, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.getSession()"], "configurationStart": [246], "configurationEnd": [266], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 313, "focalAPIEnd": 348, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "MemberController.getById(value)"], "useStart": [462, 715], "useEnd": [492, 743], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/revan-kun/inTouch/tree/master/src/main/java/com/epam/lab/intouch/web/servlet/MemberFeelingServlet.java", "rawCode": "  /** @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */\n  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    Member liker = (Member) request.getSession().getAttribute(\"member\");\n    String strOwner = request.getParameter(\"memberLiker\");\n    MemberController controller = new MemberController();\n    Member owner = new Member();\n\n    String status = request.getParameter(\"status\");\n\n    /*String own = \"grispin@gmail.com\";\n    //Member ownM = new Member();\n\n\n\n    String lik = \"dobkin@epam.com\";\n    Member likM = new Member();\n    likM.setLogin(lik);\n    String st = \"like\";*/\n\n    try {\n      owner = controller.getById(strOwner);\n      likeControler.setRating(owner, liker, status);\n    } catch (DAOException | DataAccessingException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    response.sendRedirect(\"/InTouch/member?login=\" + strOwner);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2578, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.setCharacterEncoding(String)"], "configurationStart": [129], "configurationEnd": [166], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 386, "focalAPIEnd": 418, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 426, "followUpCheckExpressionEnd": 447, "followUpCheckBlockStart": 426, "followUpCheckBlockEnd": 508, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/niles2005/visitors/tree/master/src/com/inesazt/visitors/manager/action/LogoutAction.java", "rawCode": "  public void doPage(HttpServletRequest request, HttpServletResponse response)\n      throws IOException, ServletException {\n\n    request.setCharacterEncoding(\"UTF-8\");\n    ServletOutputStream sos = response.getOutputStream();\n    response.setContentType(\"text/html; charset=UTF-8\");\n\n    String retInfo = doAction(request, response);\n\n    if (retInfo != null) {\n      String callback = request.getParameter(\"callback\");\n      if (callback != null) {\n        retInfo = callback + \"(\" + retInfo + \");\";\n      }\n\n      sos.write(retInfo.getBytes(\"UTF-8\"));\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2579, "initialization": ["String name = Enumeration.nextElement()"], "initializationStart": [944], "initializationEnd": [959], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "println(*)", "printStackTrace()"], "tryExpressionStart": 452, "tryExpressionEnd": 456, "tryBlockStart": 452, "tryBlockEnd": 1557, "catchExpressionStart": 1462, "catchExpressionEnd": 1484, "catchBlockStart": 1462, "catchBlockEnd": 1557, "exceptionHandlingCallStart": [1504, 1492, 1529], "exceptionHandlingCallEnd": [1520, 1521, 1550], "configuration": ["httpServletRequest.getParameterNames()"], "configurationStart": [852], "configurationEnd": [875], "guardCondition": "!(name.equals(\"style\",)||name.equals(\"source\",))", "guardType": "IF {", "guardExpressionStart": 969, "guardExpressionEnd": 1022, "guardBlockStart": 969, "guardBlockEnd": 1149, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 1050, "focalAPIEnd": 1072, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new StringValue(value)"], "useStart": [1115], "useEnd": [1137], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jesseeichar/debrief/tree/master/trunk/contribs/saxon6_5_5/samples/java/SaxonServlet.java", "rawCode": "  /** Apply stylesheet to source document */\n  private void apply(String style, String source, HttpServletRequest req, HttpServletResponse res)\n      throws TransformerException, java.io.IOException {\n\n    ServletOutputStream out = res.getOutputStream();\n\n    if (style == null) {\n      out.println(\"No style parameter supplied\");\n      return;\n    }\n    if (source == null) {\n      out.println(\"No source parameter supplied\");\n      return;\n    }\n    try {\n      Templates pss = tryCache(style);\n      Transformer transformer = pss.newTransformer();\n      Properties details = pss.getOutputProperties();\n\n      String mime = pss.getOutputProperties().getProperty(OutputKeys.MEDIA_TYPE);\n      if (mime == null) {\n        // guess\n        res.setContentType(\"text/html\");\n      } else {\n        res.setContentType(mime);\n      }\n\n      Enumeration p = req.getParameterNames();\n      while (p.hasMoreElements()) {\n        String name = (String) p.nextElement();\n        if (!(name.equals(\"style\") || name.equals(\"source\"))) {\n          String value = req.getParameter(name);\n          transformer.setParameter(name, new StringValue(value));\n        }\n      }\n\n      String path = getServletContext().getRealPath(source);\n      if (path == null) {\n        throw new TransformerException(\"Source file \" + source + \" not found\");\n      }\n      File sourceFile = new File(path);\n      transformer.transform(new StreamSource(sourceFile), new StreamResult(out));\n    } catch (Exception err) {\n      out.println(err.getMessage());\n      err.printStackTrace();\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2580, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 823, "focalAPIEnd": 849, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseLong(value)"], "useStart": [808], "useEnd": [850], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/webgenome/tree/master/tags/WEBGENOME_R3.2_6MAR2009_BUILD1/java/webui/src/org/rti/webgenome/webui/struts/cart/RemovePlotAction.java", "rawCode": "  /**\n   * Execute action.\n   *\n   * @param mapping Routing information for downstream actions\n   * @param form Form data\n   * @param request Servlet request object\n   * @param response Servlet response object\n   * @return Identification of downstream action as configured in the struts-config.xml file\n   * @throws Exception All exceptions thrown by classes in the method are passed up to a registered\n   *     exception handler configured in the struts-config.xml file\n   */\n  public ActionForward execute(\n      final ActionMapping mapping,\n      final ActionForm form,\n      final HttpServletRequest request,\n      final HttpServletResponse response)\n      throws Exception {\n\n    // Get shopping cart\n    ShoppingCart cart = this.getShoppingCart(request);\n\n    // Get ID of plot to remove\n    long id = Long.parseLong(request.getParameter(\"id\"));\n\n    // If there are references to plot, deny request to delete\n    if (this.getDbService().isPlotReferenced(id)) {\n      return mapping.findForward(\"referenced\");\n    }\n\n    // Retrieve plot\n    Plot plot = cart.getPlot(id);\n\n    // Remove plot\n    cart.removePlot(id);\n    if (PageContext.standAloneMode(request)) {\n      this.getDbService().updateShoppingCart(cart);\n    }\n\n    // Get rid of image files\n    for (String fileName : plot.getAllImageFileNames()) {\n      this.getImageFileManager().deleteImageFile(fileName);\n    }\n\n    // Get rid of plot interactivity files\n    this.getDataFileManager().deleteDataFiles(plot);\n\n    // remove from db\n    this.dbService.deletePlot(plot);\n\n    // TODO: Stand-alone specific actions\n\n    return mapping.findForward(\"success\");\n  }\n"}, {"dataset": "getParameter", "exampleID": 2581, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 86, "focalAPIEnd": 118, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "isNotEmpty(value)"], "useStart": [140, 184], "useEnd": [170, 216], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vorburger/mifos-head/tree/master/application/src/main/java/org/mifos/framework/struts/action/MifosRequestProcessor.java", "rawCode": "  private boolean isReportRequest(HttpServletRequest request) {\n    String reportId = request.getParameter(\"reportId\");\n    String method = request.getParameter(\"method\");\n\n    return StringUtils.isNotEmpty(reportId) && \"loadAddList\".equals(method);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2582, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 112, "focalAPIEnd": 140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getSession()", "HttpSession.setAttribute(String,value)"], "useStart": [168, 190], "useEnd": [184, 224], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/secure-software-engineering/soot-infoflow/tree/master/securiBench/securibench/micro/session/Session1.java", "rawCode": "  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String name = req.getParameter(FIELD_NAME);\n    HttpSession session = req.getSession();\n    session.setAttribute(\"name\", name);\n    String s2 = (String) session.getAttribute(\"name\");\n\n    PrintWriter writer = resp.getWriter();\n    writer.println(s2); /* BAD */\n  }\n"}, {"dataset": "getParameter", "exampleID": 2583, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 559, "focalAPIEnd": 601, "followUpCheck": "!value.equals(\"populateMicroarrays\")", "checkType": "IF", "followUpCheckExpressionStart": 651, "followUpCheckExpressionEnd": 697, "followUpCheckBlockStart": 651, "followUpCheckBlockEnd": 802, "use": ["clean(value)", "setCancerModel(httpServletRequest)", "httpServletRequest.getSession()", "httpServletRequest.getParameter(String)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.getSession()", "setComments(httpServletRequest,*)"], "useStart": [719, 944, 1005, 1151, 2196, 2285, 2370, 2494], "useEnd": [749, 967, 1025, 1201, 2279, 2364, 2399, 2542], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/camod/tree/master/software/camod/src/gov/nih/nci/camod/webapp/action/ViewModelAction.java", "rawCode": "  /**\n   * Populate the session and/or request with the objects necessary to display the page.\n   *\n   * @param mapping the struts action mapping\n   * @param form the web form\n   * @param request HTTPRequest\n   * @param response HTTPResponse\n   * @return\n   * @throws Exception\n   */\n  public ActionForward populateMicroarrays(\n      ActionMapping mapping,\n      ActionForm form,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws Exception {\n    // Get and clean method to prevent Cross-Site Scripting\n    String methodName = request.getParameter(\"unprotected_method\");\n    log.debug(\"methodName: \" + methodName);\n    if (!methodName.equals(\"populateMicroarrays\")) {\n      methodName = SafeHTMLUtil.clean(methodName);\n      log.debug(\"methodName: \" + methodName);\n    }\n\n    List modelsByMicroArrayColl = new ArrayList();\n    final Map<String, List> microArrayAnimalModelMap = new HashMap<String, List>();\n\n    setCancerModel(request);\n\n    AnimalModel am = (AnimalModel) request.getSession().getAttribute(Constants.ANIMALMODEL);\n    Set<MicroArrayData> maColl = am.getMicroArrayDataCollection();\n    String modelID = request.getParameter(Constants.Parameters.MODELID);\n\n    for (MicroArrayData ma : maColl) {\n      modelsByMicroArrayColl =\n          QueryManagerSingleton.instance()\n              .getRelatedModelsForThisMicroArray(ma.getUrl(), ma.getExperimentName(), modelID);\n      log.info(\"ViewModelAction modelsByMicroArrayColl: \" + modelsByMicroArrayColl.size());\n      microArrayAnimalModelMap.put(ma.getUrl(), modelsByMicroArrayColl);\n    }\n\n    // Get external properties file\n    Properties camodProperties = new Properties();\n    String camodPropertiesFileName = null;\n\n    camodPropertiesFileName = System.getProperty(\"gov.nih.nci.camod.camodProperties\");\n\n    try {\n\n      FileInputStream in = new FileInputStream(camodPropertiesFileName);\n      camodProperties.load(in);\n\n    } catch (FileNotFoundException e) {\n      log.error(\"Caught exception finding file for properties: \", e);\n      e.printStackTrace();\n    } catch (IOException e) {\n      log.error(\"Caught exception finding file for properties: \", e);\n      e.printStackTrace();\n    }\n\n    request.setAttribute(\"uri_start\", camodProperties.getProperty(\"caarray.uri_start\"));\n    request.setAttribute(\"uri_end\", camodProperties.getProperty(\"caarray.uri_end\"));\n    request\n        .getSession()\n        .setAttribute(Constants.RELATED_MODELS_BY_MICROARRAY, microArrayAnimalModelMap);\n\n    setComments(request, Constants.Pages.MICROARRAY);\n\n    return mapping.findForward(\"viewMicroarrays\");\n  }\n"}, {"dataset": "getParameter", "exampleID": 2584, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 163, "focalAPIEnd": 193, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["delete(value)"], "useStart": [200], "useEnd": [238], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/geosolutions-it/geobatch/tree/master/src/web/core/src/main/java/it/geosolutions/geobatch/ui/mvc/UpdateFtpUserController.java", "rawCode": "  @Override\n  protected ModelAndView handleRequestInternal(\n      HttpServletRequest request, HttpServletResponse response) throws Exception {\n    String userId = request.getParameter(\"userId\");\n\n    server.getUserManager().delete(userId);\n\n    List<FtpUser> ftpUsers = server.getUserManager().getAllUsers();\n\n    ModelAndView mav = new ModelAndView(\"ftpUsers\");\n    mav.addObject(\"ftpUsers\", ftpUsers);\n\n    return mav;\n  }\n"}, {"dataset": "getParameter", "exampleID": 2585, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 153, "focalAPIEnd": 181, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "format(String,value,long)", "registerAmount(value,long)"], "useStart": [216, 261, 345], "useEnd": [242, 338, 396], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/globant/googleappengine-training/tree/master/shoppingcard/jorge.spinsanti/src/gaetraining/exercise2/SavePaymentAndNotifServlet.java", "rawCode": "  @Override\n  protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n      throws ServletException, IOException {\n    String username = req.getParameter(\"username\");\n    long amount = Long.parseLong(req.getParameter(\"amount\"));\n    logger.info(String.format(\"save payment for username %s and amount %d\", username, amount));\n    TransactionService.registerAmount(username, amount);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2586, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 241, "focalAPIEnd": 295, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 804, "followUpCheckExpressionEnd": 828, "followUpCheckBlockStart": 804, "followUpCheckBlockEnd": 1845, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getSession()", "getStatus(value)"], "useStart": [317, 391, 1351], "useEnd": [362, 411, 1402], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/inspector-cochise/cochise/tree/master/WebGUI/src/main/java/org/akquinet/web/QuestStatusServlet.java", "rawCode": "  /** @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */\n  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    String requestedId = request.getParameter(CommonData.PARAM_REQUESTED_QUEST);\n    String action = request.getParameter(CommonData.PARAM_ACTION);\n\n    HttpSession session = request.getSession();\n    if (!AuthenticatorServlet.authenticate(session)) {\n      if (action != null && action.equals(CommonData.ACTION_IS_AVAILABLE)) {\n        response.getWriter().print(\"false\");\n      } else {\n        response.sendRedirect(response.encodeRedirectURL(CommonData.LOGIN_SERVLET_URL));\n      }\n      return;\n    }\n\n    if (action == null || action.equals(CommonData.ACTION_QUEST_STATUS)) {\n      if (requestedId == null) {\n        // in this case we will return a list of all available questions\n        StringBuilder answer = new StringBuilder();\n\n        Iterator<String> it = QuestionManager.getDefault().getQuestionIds().iterator();\n        while (it.hasNext()) {\n          String current = it.next();\n          answer.append(current);\n          if (it.hasNext()) {\n            answer.append(',');\n          }\n        }\n\n        response.getWriter().print(answer.toString());\n        return;\n      } else {\n        try {\n          switch (QuestionManager.getDefault().getStatus(requestedId)) {\n            case BAD:\n              response.getWriter().print(\"neg\");\n              return;\n            case GOOD:\n              response.getWriter().print(\"pos\");\n              return;\n            case OPEN:\n              response.getWriter().print(\"ope\");\n              return;\n          }\n        } catch (NullPointerException e) {\n          response.getWriter().print(\"requested question unknown\");\n          return;\n        }\n      }\n    }\n    if (action.equals(CommonData.ACTION_IS_AVAILABLE)) {\n      response.getWriter().print(\"true\");\n    } else if (action.equals(CommonData.ACTION_IS_STALE)) {\n      if (QuestionManager.getDefault().isStale(request.getParameter(\"quest\"))) {\n        response.getWriter().print(\"true\");\n      } else {\n        response.getWriter().print(\"false\");\n      }\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2587, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.setCharacterEncoding(String)"], "configurationStart": [129], "configurationEnd": [166], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 386, "focalAPIEnd": 418, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 426, "followUpCheckExpressionEnd": 447, "followUpCheckBlockStart": 426, "followUpCheckBlockEnd": 508, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/niles2005/visitors/tree/master/src/com/inesazt/visitors/manager/action/LoginAction.java", "rawCode": "  public void doPage(HttpServletRequest request, HttpServletResponse response)\n      throws IOException, ServletException {\n\n    request.setCharacterEncoding(\"UTF-8\");\n    ServletOutputStream sos = response.getOutputStream();\n    response.setContentType(\"text/html; charset=UTF-8\");\n\n    String retInfo = doAction(request, response);\n\n    if (retInfo != null) {\n      String callback = request.getParameter(\"callback\");\n      if (callback != null) {\n        retInfo = callback + \"(\" + retInfo + \");\";\n      }\n\n      sos.write(retInfo.getBytes(\"UTF-8\"));\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2588, "initialization": ["HttpServletRequest httpServletRequest = AsyncContext.getRequest()"], "initializationStart": [376], "initializationEnd": [401], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 506, "focalAPIEnd": 538, "followUpCheck": "(value == null) || true", "checkType": "IF", "followUpCheckExpressionStart": 660, "followUpCheckExpressionEnd": 698, "followUpCheckBlockStart": 660, "followUpCheckBlockEnd": 1031, "use": ["deleteTopic(value)"], "useStart": [1037], "useEnd": [1094], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Comcast/cmb/tree/master/src/com/comcast/cns/controller/CNSDeleteTopicAction.java", "rawCode": "  /**\n   * Delete the topic with the topicArn in the request variable \"TopicArn\". Send the response out as\n   * XML to response.\n   *\n   * @param user The user who owns the topic we are deleting\n   * @param asyncContext\n   */\n  @Override\n  public boolean doAction(User user, AsyncContext asyncContext) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) asyncContext.getRequest();\n    HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n\n    String arn = request.getParameter(\"TopicArn\");\n    String userId = user.getUserId();\n    logger.debug(\"event=cns_topic_delete arn=\" + arn + \" userid=\" + userId);\n\n    if ((arn == null) || (userId == null)) {\n      logger.error(\n          \"event=cns_topic_delete errro_code=InvalidParameters topic_arn=\"\n              + arn\n              + \" user_id=\"\n              + userId);\n      throw new CMBException(\n          CNSErrorCodes.CNS_InvalidParameter,\n          \"request parameter does not comply with the associated constraints.\");\n    }\n\n    PersistenceFactory.getTopicPersistence().deleteTopic(arn);\n    String out = CNSTopicPopulator.getDeleteTopicResponse();\n    writeResponse(out, response);\n    return true;\n  }\n"}, {"dataset": "getParameter", "exampleID": 2589, "initialization": ["String name = Enumeration.nextElement()"], "initializationStart": [558], "initializationEnd": [582], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.getRequestURL()", "httpServletRequest.getParameterNames()"], "configurationStart": [85, 379], "configurationEnd": [108, 406], "guardCondition": "\"GET\".equals(httpServletRequest.getMethod(),)", "guardType": "IF {", "guardExpressionStart": 126, "guardExpressionEnd": 164, "guardBlockStart": 126, "guardBlockEnd": 715, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 627, "focalAPIEnd": 653, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(value)"], "useStart": [592], "useEnd": [654], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/neuro4j/nms/tree/master/demo/weblog/jclient/src/main/java/org/neuro4j/weblog/client/WeblogFilter.java", "rawCode": "  private String getRequestURL(HttpServletRequest request) {\n    String requestURL = request.getRequestURL().toString();\n\n    if (\"GET\".equals(request.getMethod())) {\n      // add parameters for storing\n      // POST method parameters are not stored because they can be huge (e.g. file upload)\n      StringBuffer sb = new StringBuffer(requestURL);\n      Enumeration paramNames = request.getParameterNames();\n      if (paramNames.hasMoreElements()) {\n        sb.append(\"?\");\n      }\n      while (paramNames.hasMoreElements()) {\n        String name = (String) paramNames.nextElement();\n        sb.append(name).append(\"=\").append(request.getParameter(name)).append(\"&\");\n      }\n      requestURL = sb.toString();\n    }\n    return requestURL;\n  }\n"}, {"dataset": "getParameter", "exampleID": 2590, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)"], "configurationStart": [498, 549, 603], "configurationEnd": [543, 597, 647], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 666, "focalAPIEnd": 690, "followUpCheck": "StringUtil.isNullorNill(value) || \"0\".equals(value)", "checkType": "IF", "followUpCheckExpressionStart": 697, "followUpCheckExpressionEnd": 747, "followUpCheckBlockStart": 697, "followUpCheckBlockEnd": 809, "use": ["httpServletRequest.getParameter(String)", "httpServletRequest.getParameter(String)", "ReferenceTables.setId(value)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "httpServletRequest.setAttribute(String,String)", "getForward(*,value,String)"], "useStart": [893, 964, 1126, 1853, 2015, 2588, 2754, 2989, 3078, 3133, 3371, 3440], "useEnd": [930, 997, 1151, 1896, 2058, 2635, 2801, 3035, 3125, 3176, 3420, 3491], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Bhamni/OpenElis/tree/master/openelis/src/us/mn/state/health/lims/referencetables/action/ReferenceTablesNextPreviousAction.java", "rawCode": "  protected ActionForward performAction(\n      ActionMapping mapping,\n      ActionForm form,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws Exception {\n    // The first job is to determine if we are coming to this action with an\n    // ID parameter in the request. If there is no parameter, we are\n    // creating a new Analyte.\n    // If there is a parameter present, we should bring up an existing\n    // Analyte to edit.\n    String forward = FWD_SUCCESS;\n    request.setAttribute(ALLOW_EDITS_KEY, \"true\");\n    request.setAttribute(PREVIOUS_DISABLED, \"false\");\n    request.setAttribute(NEXT_DISABLED, \"false\");\n\n    String id = request.getParameter(ID);\n\n    if (StringUtil.isNullorNill(id) || \"0\".equals(id)) {\n      isNew = true;\n    } else {\n      isNew = false;\n    }\n\n    BaseActionForm dynaForm = (BaseActionForm) form;\n\n    String start = (String) request.getParameter(\"startingRecNo\");\n    String direction = (String) request.getParameter(\"direction\");\n\n    // System.out.println(\"This is ID from request \" + id);\n    ReferenceTables referenceTables = new ReferenceTables();\n\n    referenceTables.setId(id);\n    try {\n\n      ReferenceTablesDAO referenceTablesDAO = new ReferenceTablesDAOImpl();\n      // retrieve analyte by id since the name may have changed\n      referenceTablesDAO.getData(referenceTables);\n\n      if (FWD_NEXT.equals(direction)) {\n        // bugzilla 1427 pass in name not id\n        List referenceTableses =\n            referenceTablesDAO.getNextReferenceTablesRecord(referenceTables.getId());\n        if (referenceTableses != null && referenceTableses.size() > 0) {\n          referenceTables = (ReferenceTables) referenceTableses.get(0);\n          referenceTablesDAO.getData(referenceTables);\n          if (referenceTableses.size() < 2) {\n            // disable next button\n            request.setAttribute(NEXT_DISABLED, \"true\");\n          }\n          id = referenceTables.getId();\n        } else {\n          // just disable next button\n          request.setAttribute(NEXT_DISABLED, \"true\");\n        }\n      }\n\n      if (FWD_PREVIOUS.equals(direction)) {\n        // bugzilla 1427 pass in name not id\n        List referenceTableses =\n            referenceTablesDAO.getPreviousReferenceTablesRecord(referenceTables.getId());\n        if (referenceTableses != null && referenceTableses.size() > 0) {\n          referenceTables = (ReferenceTables) referenceTableses.get(0);\n          referenceTablesDAO.getData(referenceTables);\n          if (referenceTableses.size() < 2) {\n            // disable previous button\n            request.setAttribute(PREVIOUS_DISABLED, \"true\");\n          }\n          id = referenceTables.getId();\n        } else {\n          // just disable next button\n          request.setAttribute(PREVIOUS_DISABLED, \"true\");\n        }\n      }\n\n    } catch (LIMSRuntimeException lre) {\n      // bugzilla 2154\n      LogEvent.logError(\"ReferenceTablesNextPreviousAction\", \"performAction()\", lre.toString());\n      request.setAttribute(ALLOW_EDITS_KEY, \"false\");\n      // disable previous and next\n      request.setAttribute(PREVIOUS_DISABLED, \"true\");\n      request.setAttribute(NEXT_DISABLED, \"true\");\n      forward = FWD_FAIL;\n    }\n    if (forward.equals(FWD_FAIL)) return mapping.findForward(forward);\n\n    if (referenceTables.getId() != null && !referenceTables.getId().equals(\"0\")) {\n      request.setAttribute(ID, referenceTables.getId());\n    }\n\n    return getForward(mapping.findForward(forward), id, start);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2591, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 179, "focalAPIEnd": 213, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getParameter(String)", "new ReconClearSimilarCellsOperation(JSONObject,value,String)"], "useStart": [241, 291], "useEnd": [277, 366], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdunck/google-refine/tree/master/main/src/com/google/refine/commands/recon/ReconClearSimilarCellsCommand.java", "rawCode": "  @Override\n  protected AbstractOperation createOperation(\n      Project project, HttpServletRequest request, JSONObject engineConfig) throws Exception {\n\n    String columnName = request.getParameter(\"columnName\");\n    String similarValue = request.getParameter(\"similarValue\");\n\n    return new ReconClearSimilarCellsOperation(engineConfig, columnName, similarValue);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2592, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 269, "focalAPIEnd": 297, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getTeam(value)", "httpServletRequest.getParameter(String)"], "useStart": [322, 403], "useEnd": [350, 431], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ananas-project/ananas-playground/tree/master/playground/point-abc-server/src/ananas/webapp/point_abc_server/ServiceABC.java", "rawCode": "  /** @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */\n  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    JSONObject json = null;\n    final String team = request.getParameter(\"team\");\n    final Team aTeam = this.getCore().getTeam(team);\n    if (aTeam != null) {\n      final String user = request.getParameter(\"user\");\n      User aUser = aTeam.getUser(user);\n      if (aUser != null) {\n        json = aUser.getJSON();\n      } else {\n        json = aTeam.getJSON();\n      }\n    } else {\n      json = new JSONObject();\n      json.put(\"team\", team + \"\");\n    }\n\n    response.setStatus(200);\n    response.setContentType(\"text/plain\");\n    ServletOutputStream out = response.getOutputStream();\n    out.print(json.toString());\n  }\n"}, {"dataset": "getParameter", "exampleID": 2593, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 465, "focalAPIEnd": 501, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 563, "followUpCheckExpressionEnd": 587, "followUpCheckBlockStart": 563, "followUpCheckBlockEnd": 609, "use": ["httpServletRequest.getParameter(String)"], "useStart": [521], "useEnd": [557], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/johnugeorge/Hadoop-mdfs/tree/master/hadoop-1.2.1/build/src/org/apache/hadoop/hdfs/server/namenode/dfshealth_jsp.java", "rawCode": "  public void generateDFSHealthReport(JspWriter out, NameNode nn, HttpServletRequest request)\n      throws IOException {\n    FSNamesystem fsn = nn.getNamesystem();\n    ArrayList<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>();\n    ArrayList<DatanodeDescriptor> dead = new ArrayList<DatanodeDescriptor>();\n    jspHelper.DFSNodesStatus(live, dead);\n\n    ArrayList<DatanodeDescriptor> decommissioning = fsn.getDecommissioningNodes();\n\n    sorterField = request.getParameter(\"sorter/field\");\n    sorterOrder = request.getParameter(\"sorter/order\");\n    if (sorterField == null) sorterField = \"name\";\n    if (sorterOrder == null) sorterOrder = \"ASC\";\n\n    // Find out common suffix. Should this be before or after the sort?\n    String port_suffix = null;\n    if (live.size() > 0) {\n      String name = live.get(0).getName();\n      int idx = name.indexOf(':');\n      if (idx > 0) {\n        port_suffix = name.substring(idx);\n      }\n\n      for (int i = 1; port_suffix != null && i < live.size(); i++) {\n        if (live.get(i).getName().endsWith(port_suffix) == false) {\n          port_suffix = null;\n          break;\n        }\n      }\n    }\n\n    counterReset();\n\n    long total = fsn.getCapacityTotal();\n    long remaining = fsn.getCapacityRemaining();\n    long used = fsn.getCapacityUsed();\n    long nonDFS = fsn.getCapacityUsedNonDFS();\n    float percentUsed = fsn.getCapacityUsedPercent();\n    float percentRemaining = fsn.getCapacityRemainingPercent();\n\n    out.print(\n        \"<div id=\\\"dfstable\\\"> <table>\\n\"\n            + rowTxt()\n            + colTxt()\n            + \"Configured Capacity\"\n            + colTxt()\n            + \":\"\n            + colTxt()\n            + StringUtils.byteDesc(total)\n            + rowTxt()\n            + colTxt()\n            + \"DFS Used\"\n            + colTxt()\n            + \":\"\n            + colTxt()\n            + StringUtils.byteDesc(used)\n            + rowTxt()\n            + colTxt()\n            + \"Non DFS Used\"\n            + colTxt()\n            + \":\"\n            + colTxt()\n            + StringUtils.byteDesc(nonDFS)\n            + rowTxt()\n            + colTxt()\n            + \"DFS Remaining\"\n            + colTxt()\n            + \":\"\n            + colTxt()\n            + StringUtils.byteDesc(remaining)\n            + rowTxt()\n            + colTxt()\n            + \"DFS Used%\"\n            + colTxt()\n            + \":\"\n            + colTxt()\n            + StringUtils.limitDecimalTo2(percentUsed)\n            + \" %\"\n            + rowTxt()\n            + colTxt()\n            + \"DFS Remaining%\"\n            + colTxt()\n            + \":\"\n            + colTxt()\n            + StringUtils.limitDecimalTo2(percentRemaining)\n            + \" %\"\n            + rowTxt()\n            + colTxt()\n            + \"<a href=\\\"dfsnodelist.jsp?whatNodes=LIVE\\\">Live Nodes</a> \"\n            + colTxt()\n            + \":\"\n            + colTxt()\n            + live.size()\n            + rowTxt()\n            + colTxt()\n            + \"<a href=\\\"dfsnodelist.jsp?whatNodes=DEAD\\\">Dead Nodes</a> \"\n            + colTxt()\n            + \":\"\n            + colTxt()\n            + dead.size()\n            + rowTxt()\n            + colTxt()\n            + \"<a href=\\\"dfsnodelist.jsp?whatNodes=DECOMMISSIONING\\\">\"\n            + \"Decommissioning Nodes</a> \"\n            + colTxt()\n            + \":\"\n            + colTxt()\n            + decommissioning.size()\n            + rowTxt()\n            + colTxt()\n            + \"Number of Under-Replicated Blocks\"\n            + colTxt()\n            + \":\"\n            + colTxt()\n            + fsn.getUnderReplicatedBlocks()\n            + \"</table></div><br>\\n\");\n\n    if (live.isEmpty() && dead.isEmpty()) {\n      out.print(\"There are no datanodes in the cluster\");\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2594, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 185, "focalAPIEnd": 215, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 260, "followUpCheckExpressionEnd": 282, "followUpCheckBlockStart": 260, "followUpCheckBlockEnd": 402, "use": ["parseInt(value)"], "useStart": [318], "useEnd": [345], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/eclipse.platform.ua/tree/master/org.eclipse.help.webapp/src/org/eclipse/help/internal/webapp/service/AboutService.java", "rawCode": "  private void getAboutPlugins(StringBuilder buf, HttpServletRequest req, HttpServletResponse resp)\n      throws IOException {\n    service = Utils.ABOUT_PLUGIN;\n\n    String sortParam = req.getParameter(\"sortColumn\"); // $NON-NLS-1$\n    int sortColumn = 3;\n    if (sortParam != null) {\n      try {\n        sortColumn = Integer.parseInt(sortParam);\n      } catch (NumberFormatException e) {\n      }\n    }\n\n    String title = WebappResources.getString(\"aboutPlugins\", locale); // $NON-NLS-1$\n    buf.append(\"<aboutPlugins\\n title=\\\"\"); // $NON-NLS-1$\n    buf.append(XMLGenerator.xmlEscape(title));\n    buf.append(\"\\\"\"); // $NON-NLS-1$\n\n    List<PluginDetails> plugins = new ArrayList<>();\n\n    Bundle[] bundles = HelpWebappPlugin.getContext().getBundles();\n    for (Bundle bundle : bundles) {\n      plugins.add(pluginDetails(bundle));\n    }\n\n    Comparator<PluginDetails> pluginComparator = new PluginComparator(sortColumn);\n    Collections.sort(plugins, pluginComparator);\n\n    String[] headerColumns =\n        new String[] {\n          \"provider\", // $NON-NLS-1$\n          \"pluginName\", // $NON-NLS-1$\n          \"version\", // $NON-NLS-1$\n          \"pluginId\" // $NON-NLS-1$\n        };\n\n    for (String headerColumn : headerColumns) {\n      buf.append(\"\\n \"); // $NON-NLS-1$\n      buf.append(headerColumn);\n      buf.append(\"=\\\"\"); // $NON-NLS-1$\n      buf.append(XMLGenerator.xmlEscape(WebappResources.getString(headerColumn, locale)));\n      buf.append(\"\\\"\"); // $NON-NLS-1$\n    }\n    buf.append(\">\"); // $NON-NLS-1$\n\n    for (PluginDetails details : plugins) {\n      buf.append(\"\\n <plugin\"); // $NON-NLS-1$\n      for (int i = 0; i < headerColumns.length; i++) {\n        buf.append(\"\\n \"); // $NON-NLS-1$\n        buf.append(headerColumns[i]);\n        buf.append(\"=\\\"\"); // $NON-NLS-1$\n        buf.append(XMLGenerator.xmlEscape(details.columns[i]));\n        buf.append(\"\\\"\"); // $NON-NLS-1$\n      }\n      buf.append(\">\\n </plugin>\"); // $NON-NLS-1$\n    }\n    buf.append(\"\\n</aboutPlugins>\"); // $NON-NLS-1$\n  }\n"}, {"dataset": "getParameter", "exampleID": 2595, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.setCharacterEncoding(String)"], "configurationStart": [220], "configurationEnd": [257], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 293, "focalAPIEnd": 320, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["valueOf(value)"], "useStart": [277], "useEnd": [321], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/loveingenioustech/Study/tree/master/web-demo/src/main/java/servlet/TipServlet.java", "rawCode": "  /** @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */\n  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    request.setCharacterEncoding(\"UTF-8\");\n    Integer key = Integer.valueOf(request.getParameter(\"key\"));\n\n    Product product = null;\n\n    try {\n      product = getProduct(key);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n\n    // Sent back data\n    response.setContentType(\"text/xml; charset=UTF-8\");\n    response.setHeader(\"Cache-Control\", \"no-cache\");\n    PrintWriter out = response.getWriter();\n    out.println(\"<response>\");\n    out.println(\"<content>\" + product.getContents() + \"</content>\");\n    out.println(\"</response>\");\n    out.close();\n  }\n"}, {"dataset": "getParameter", "exampleID": 2596, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 137, "focalAPIEnd": 164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["WeatherService.retrieveForecast(value)"], "useStart": [188], "useEnd": [224], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sonatype/maven-reference-en/tree/master/examples/ch-multi-spring/simple-parent/simple-webapp/src/main/java/org/sonatype/mavenbook/web/WeatherController.java", "rawCode": "  public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)\n      throws Exception {\n\n    String zip = request.getParameter(\"zip\");\n    Weather weather = weatherService.retrieveForecast(zip);\n    weatherDAO.save(weather);\n    return new ModelAndView(\"weather\", \"weather\", weather);\n  }\n"}, {"dataset": "getParameter", "exampleID": 2597, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 378, "focalAPIEnd": 411, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["println(value)"], "useStart": [340], "useEnd": [412], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rcg0/arc/tree/master/webapps/arc-server-v2/WEB-INF/classes/src/DeleteMessage.java", "rawCode": "  /** */\n  public void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    HttpSession session = request.getSession(false);\n\n    Tablon tablon = new Tablon();\n\n    if (session != null) {\n\n      User user = (User) session.getAttribute(\"user\");\n\n      if (user != null) {\n        System.out.println(\"el parametro: \" + request.getParameter(\"messageId\"));\n        tablon.deleteMessageFromTablon(request.getParameter(\"messageId\"));\n      }\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2598, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 731, "tryExpressionEnd": 735, "tryBlockStart": 731, "tryBlockEnd": 2683, "catchExpressionStart": 2171, "catchExpressionEnd": 2195, "catchBlockStart": 2171, "catchBlockEnd": 2230, "exceptionHandlingCallStart": [2203], "exceptionHandlingCallEnd": [2223], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(httpServletRequest.getParameter(name,)==null)", "guardType": "IF {", "guardExpressionStart": 906, "guardExpressionEnd": 954, "guardBlockStart": 906, "guardBlockEnd": 1103, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 910, "focalAPIEnd": 945, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new SimpleDateFormat(value)", "httpServletRequest.getParameter(String)"], "useStart": [1037, 1114], "useEnd": [1094, 1145], "hasFinally": 1, "cleanUpCall": ["ResultSet.close()"], "finallyExpressionStart": 2348, "finallyExpressionEnd": 2356, "finallyBlockStart": 2348, "finallyBlockEnd": 2683, "cleanUpCallStart": [2410], "cleanUpCallEnd": [2424], "url": "https://github.com/kef/hieos/tree/master/src/logbrowser/src/java/com/vangent/hieos/logbrowser/servlets/GetDateServlet.java", "rawCode": "  /**\n   * @param req\n   * @param res\n   */\n  public void doGet(HttpServletRequest req, HttpServletResponse res) {\n    PreparedStatement dateStatement = null;\n    Log log = new Log();\n    try {\n      Connection con = log.getConnection();\n      System.out.println(\"LOG (dateStatement) = \" + this.sqlCommand);\n      dateStatement = con.prepareStatement(this.sqlCommand);\n    } catch (SQLException e) {\n      logger.error(e);\n    } catch (LoggerException e) {\n      logger.error(e);\n    }\n    if (dateStatement == null) {\n      try {\n        log.closeConnection();\n        return; // EARLY EXIT: Can not continue processing\n      } catch (LoggerException ex) {\n        logger.error(ex);\n      }\n    }\n    ResultSet result = null;\n    try {\n      result = dateStatement.executeQuery();\n      TreeSet<Date> set = new TreeSet<Date>();\n      SimpleDateFormat sdf = null;\n      SimpleDateFormat sdf2 = null;\n      if (req.getParameter(\"formatDisplayed\") == null) {\n        sdf = new SimpleDateFormat(\"yyyy-MMM dd\");\n      } else {\n        sdf = new SimpleDateFormat(req.getParameter(\"formatDisplayed\"));\n      }\n      if (req.getParameter(\"formatValue\") == null) {\n        sdf2 = new SimpleDateFormat(\"yyyy-MM-dd\");\n      } else {\n        sdf2 = new SimpleDateFormat(req.getParameter(\"formatValue\"));\n      }\n      Timestamp timeStamp = null;\n      String stringTmp = null;\n      Date d = null;\n      while (result.next()) {\n        timeStamp = result.getTimestamp(1);\n        stringTmp = sdf.format(timeStamp);\n        d = sdf.parse(stringTmp);\n        set.add(d);\n      }\n      Object[] stArray = set.toArray();\n      StringBuffer time = new StringBuffer();\n      res.setContentType(\"text/xml\");\n      time.append(\"<select>\");\n      time.append(\"<option value ='0' ></option>\\n\");\n      for (int i = stArray.length - 1; i > -1; i--) {\n        time.append(\n            \"<option value ='\"\n                + sdf2.format((Date) stArray[i])\n                + \"' > \"\n                + sdf.format((Date) stArray[i])\n                + \"</option>\\n\");\n      }\n      time.append(\"</select >\");\n      stArray = null;\n      res.getWriter().write(time.toString());\n      time = null;\n    } catch (SQLException e1) {\n      e1.printStackTrace();\n    } catch (ParseException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        if (result != null) {\n          result.close();\n        }\n        if (dateStatement != null) {\n          dateStatement.close();\n        }\n        log.closeConnection();\n      } catch (LoggerException ex) {\n        logger.error(ex);\n      } catch (SQLException se) {\n        logger.error(se);\n      }\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2599, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["httpServletRequest.getSession()", "httpServletRequest.getAttribute(String)"], "configurationStart": [392, 654], "configurationEnd": [412, 695], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 890, "focalAPIEnd": 931, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 943, "followUpCheckExpressionEnd": 982, "followUpCheckBlockStart": 943, "followUpCheckBlockEnd": 1139, "use": ["new StringTokenizer(value,String)", "Map.get(value)", "httpServletRequest.setAttribute(String,boolean)", "ProtocolEventDetailsForm.setCollectionProtocolEventkey(value)", "httpServletRequest.setAttribute(String,Collection<NameValueBean>)"], "useStart": [1171, 1418, 1647, 2769, 3707], "useEnd": [1223, 1476, 1689, 2851, 3761], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jimmccusker/caTissue/tree/master/software/caTissue/modules/core/src/main/java/edu/wustl/catissuecore/action/ProtocolEventDetailsAction.java", "rawCode": "  /**\n   * Inits the specimenrequirement form.\n   *\n   * @param mapping ActionMapping\n   * @param protocolEventDetailsForm protocolEventDetails Form\n   * @param request HttpServletRequest\n   */\n  private void initSpecimenrequirementForm(\n      ActionMapping mapping,\n      ProtocolEventDetailsForm protocolEventDetailsForm,\n      HttpServletRequest request) {\n    final HttpSession session = request.getSession();\n    final Map collectionProtocolEventMap =\n        (Map) session.getAttribute(Constants.COLLECTION_PROTOCOL_EVENT_SESSION_MAP);\n\n    // If flow is from Specimen Requirement page save button.\n    String collectionProtocolEventKey = (String) request.getAttribute(Constants.EVENT_KEY);\n\n    if (collectionProtocolEventKey == null) {\n      // If flow is from Specimen Tree View if Event Node is clicked to\n      // open Event page in Edit mode.\n      collectionProtocolEventKey = request.getParameter(Constants.EVENT_KEY);\n    }\n    if (collectionProtocolEventKey == null) {\n      // If flow is when user Clicks Define Event button.\n      collectionProtocolEventKey = (String) session.getAttribute(Constants.NEW_EVENT_KEY);\n    }\n    final StringTokenizer st = new StringTokenizer(collectionProtocolEventKey, \"_\");\n    if (st.hasMoreTokens()) {\n      collectionProtocolEventKey = st.nextToken();\n    }\n    final CollectionProtocolEventBean collectionProtocolEventBean =\n        (CollectionProtocolEventBean) collectionProtocolEventMap.get(collectionProtocolEventKey);\n    if (collectionProtocolEventBean != null\n        && new Long(collectionProtocolEventBean.getId()) != null\n        && collectionProtocolEventBean.getId() > 0) {\n      request.setAttribute(\"isPersistent\", true);\n    }\n    protocolEventDetailsForm.setClinicalDiagnosis(\n        collectionProtocolEventBean.getClinicalDiagnosis());\n    protocolEventDetailsForm.setClinicalStatus(collectionProtocolEventBean.getClinicalStatus());\n    protocolEventDetailsForm.setCollectionPointLabel(\n        collectionProtocolEventBean.getCollectionPointLabel());\n    protocolEventDetailsForm.setStudyCalendarEventPoint(\n        collectionProtocolEventBean.getStudyCalenderEventPoint());\n\n    protocolEventDetailsForm.setCollectionEventComments(\n        collectionProtocolEventBean.getCollectedEventComments());\n    protocolEventDetailsForm.setCollectionEventContainer(\n        collectionProtocolEventBean.getCollectionContainer());\n    protocolEventDetailsForm.setReceivedEventComments(\n        collectionProtocolEventBean.getReceivedEventComments());\n    protocolEventDetailsForm.setReceivedEventReceivedQuality(\n        collectionProtocolEventBean.getReceivedQuality());\n    protocolEventDetailsForm.setCollectionEventCollectionProcedure(\n        collectionProtocolEventBean.getCollectionProcedure());\n    protocolEventDetailsForm.setCollectionProtocolEventkey(collectionProtocolEventKey);\n\n    protocolEventDetailsForm.setLabelFormat(collectionProtocolEventBean.getLabelFormat());\n    protocolEventDetailsForm.setSpecimenProcessingProcedure(\n        collectionProtocolEventBean.getSpecimenProcessingProcedure());\n\n    if (collectionProtocolEventBean != null) {\n      Collection<NameValueBean> sppBean = new LinkedHashSet<NameValueBean>();\n      Locale locale = CommonServiceLocator.getInstance().getDefaultLocale();\n\n      Object[] spp = collectionProtocolEventBean.getSpecimenProcessingProcedure();\n      if (spp != null) {\n        for (int i = 0; i < spp.length; i++) {\n          NameValueBean nvb = new NameValueBean(spp[i], spp[i]);\n\n          nvb.getName().toLowerCase(locale);\n\n          sppBean.add(nvb);\n        }\n      }\n      Collection<NameValueBean> sppBeans = new ArrayList<NameValueBean>();\n      sppBeans.addAll(sppBean);\n      request.setAttribute(Constants.SELECTED_SPP, sppBeans);\n    }\n  }\n"}, {"dataset": "getParameter", "exampleID": 2600, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = httpServletRequest.getParameter(name)", "focalAPIStart": 618, "focalAPIEnd": 644, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["httpServletRequest.getSession(boolean)", "SessionStore.getSessionLogin(value)", "genLoginTemplate(httpServletRequest,HttpServletResponse,Context,Session,*)", "genLoginTemplate(httpServletRequest,HttpServletResponse,Context,*,String)", "genLoginTemplate(httpServletRequest,HttpServletResponse,Context,*,String)"], "useStart": [772, 1298, 2600, 2790, 2948], "useEnd": [819, 1330, 2659, 2851, 3007], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/larsar/moria/tree/master/moria/src/no/feide/moria/servlet/LoginServlet.java", "rawCode": "  /**\n   * Generates a template for the loginPage. The request should contain a valid Moria sessionID.\n   *\n   * @param request The http request\n   * @param response The http response\n   * @param context The Velocity context\n   * @return Template, a login form or an error message if the session is invalid.\n   */\n  private Template loginPage(\n      HttpServletRequest request, HttpServletResponse response, Context context)\n      throws ParseErrorException, ResourceNotFoundException, Exception {\n\n    log.finer(\"loginPage(HttpServletRequest, HttpServletResponse, Context\");\n\n    /* Get session ID */\n    String id = request.getParameter(\"id\");\n    log.fine(\"SessionID: \" + id);\n\n    /* Try to use SSO */\n    Session existingSession = null;\n    HttpSession httpSession = ((HttpServletRequest) request).getSession(true);\n\n    /* Find existing session */\n    String existingSessionID = (String) httpSession.getAttribute(\"moriaID\");\n\n    try {\n      existingSession = sessionStore.getSessionSSO(existingSessionID);\n    } catch (NoSuchSessionException e) {\n      /* If no old session exist, then SSO is impossible.\n       * Continue with normal authentication. */\n      log.fine(\"Did not find SSO session: \" + existingSessionID);\n      existingSession = null;\n    }\n\n    try {\n      Session session = sessionStore.getSessionLogin(id);\n\n      httpSession.setAttribute(\"moriaID\", session.getID());\n\n      if (existingSession != null) {\n        log.fine(\"Existing SSO session found.\");\n\n        /* Session has to be authenticated and locked to be\n        used in SSO. If not locked another web service is\n        using the session. */\n        if (existingSession.isAuthenticated() && existingSession.isLocked()) {\n          HashMap cachedAttributes = existingSession.getCachedAttributes();\n          if (cachedAttributes != null && cachedAttributes.size() > 0) {\n\n            if (session.getAllowSso()) {\n              log.info(\"Redirect to WebService (SSO), \" + session.getWebService().getName());\n              String wsID = session.getWebService().getId();\n              stats.incStatsCounter(wsID, \"loginSSO\");\n              session.setCachedAttributes(cachedAttributes);\n              sessionStore.deleteSession(existingSession);\n              // stats.decStatsCounter(wsID, \"activeSessions\");\n              stats.decreaseCounter(\"sessionsSSOActive\");\n              session.unlock(existingSession.getBackendInstance());\n              redirectToWebService(response, session);\n              return null;\n            }\n          }\n        }\n      }\n\n      session.initiateAuthentication();\n\n      return genLoginTemplate(request, response, context, session, null);\n    } catch (NoSuchSessionException e) {\n      log.warning(\"Request Login page: DENIED, Session not found: \" + id);\n      return genLoginTemplate(request, response, context, null, NOSESSION);\n    } catch (SessionException e) {\n      log.warning(\"Session exception:\\n\" + e);\n      return genLoginTemplate(request, response, context, null, GENERIC);\n    }\n  }\n"}]