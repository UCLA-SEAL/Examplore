[{"dataset": "listAdd", "exampleID": 4901, "initialization": ["List list = new ArrayList(*)", "Object e = Iterator.next()"], "initializationStart": [325, 448], "initializationEnd": [355, 459], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 556, "focalAPIEnd": 571, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Teiid-Designer/teiid-designer/tree/master/plugins/org.teiid.designer.metamodels.relational/src/org/teiid/designer/metamodels/relational/provider/ForeignKeyAssociationProvider.java", "rawCode": "  /**\n   * Gather all ForeignKey instances from the selection list of objects that are contained by the\n   * specified Table\n   *\n   * @return\n   */\n  static List getForeignKeys(final List eObjects, final Table container) {\n    CoreArgCheck.isNotNull(eObjects);\n    CoreArgCheck.isNotNull(container);\n    final List result = new ArrayList(eObjects.size());\n    for (Iterator iter = eObjects.iterator(); iter.hasNext(); ) {\n      final Object obj = iter.next();\n      if (obj instanceof ForeignKey && ((ForeignKey) obj).eContainer() == container) {\n        result.add(obj);\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4902, "initialization": ["List list = new Vector()", "Object e = SqlReader.readSqlResultRecord(ResultSet)"], "initializationStart": [1849, 2968], "initializationEnd": [1861, 3002], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["debugFields(Object[])", "warn(String,*)"], "tryExpressionStart": 2937, "tryExpressionEnd": 2941, "tryBlockStart": 2937, "tryBlockEnd": 3157, "catchExpressionStart": 3182, "catchExpressionEnd": 3205, "catchBlockStart": 3182, "catchBlockEnd": 3280, "exceptionHandlingCallStart": [3250, 3213], "exceptionHandlingCallEnd": [3269, 3273], "configuration": ["list.add(String)"], "configurationStart": [2887], "configurationEnd": [2896], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 3016, "guardExpressionEnd": 3032, "guardBlockStart": 3016, "guardBlockEnd": 3075, "focalAPI": " = list.add(e)", "focalAPIStart": 3049, "focalAPIEnd": 3060, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["currentTimeMillis()"], "finallyExpressionStart": 3396, "finallyExpressionEnd": 3404, "finallyBlockStart": 3396, "finallyBlockEnd": 4334, "cleanUpCallStart": [3451], "cleanUpCallEnd": [3477], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/KNL-1107/kernel-impl/src/main/java/org/sakaiproject/db/impl/BasicSqlService.java", "rawCode": "  /**\n   * Process a query, filling in with fields, and return the results as a List, one per record read.\n   * If a reader is provided, it will be called for each record to prepare the Object placed into\n   * the List. Otherwise, the first field of each record, as a String, will be placed in the list.\n   *\n   * @param callerConn The db connection object to use (if not null).\n   * @param sql The sql statement.\n   * @param fields The array of fields for parameters.\n   * @param reader The reader object to read each record.\n   * @return The List of things read, one per record.\n   */\n  public List dbRead(Connection callerConn, String sql, Object[] fields, SqlReader reader) {\n    // check for a transaction conncetion\n    if (callerConn == null) {\n      callerConn = (Connection) threadLocalManager().get(TRANSACTION_CONNECTION);\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\n          \"dbRead(Connection \"\n              + callerConn\n              + \", String \"\n              + sql\n              + \", Object[] \"\n              + Arrays.toString(fields)\n              + \", SqlReader \"\n              + reader\n              + \")\");\n    }\n\n    // for DEBUG\n    long start = 0;\n    long connectionTime = 0;\n    int lenRead = 0;\n    long stmtTime = 0;\n    long resultsTime = 0;\n    int count = 0;\n\n    if (LOG.isDebugEnabled()) {\n      String userId = usageSessionService().getSessionId();\n      StringBuilder buf = new StringBuilder();\n      if (fields != null) {\n        buf.append(fields[0]);\n        for (int i = 1; i < fields.length; i++) {\n          buf.append(\", \");\n          buf.append(fields[i]);\n        }\n      }\n      LOG.debug(\"Sql.dbRead: \" + userId + \"\\n\" + sql + \"\\n\" + buf);\n    }\n\n    Connection conn = null;\n    PreparedStatement pstmt = null;\n    ResultSet result = null;\n    ResultSetMetaData meta = null;\n    List rv = new Vector();\n\n    try {\n      if (m_showSql) {\n        start = System.currentTimeMillis();\n      }\n\n      // borrow a new connection if we are not provided with one to use\n      if (callerConn != null) {\n        conn = callerConn;\n      } else {\n        conn = borrowConnection();\n      }\n      if (m_showSql) {\n        connectionTime = System.currentTimeMillis() - start;\n      }\n      if (m_showSql) {\n        start = System.currentTimeMillis();\n      }\n      pstmt = conn.prepareStatement(sql);\n\n      // put in all the fields\n      prepareStatement(pstmt, fields);\n\n      result = pstmt.executeQuery();\n\n      if (m_showSql) {\n        stmtTime = System.currentTimeMillis() - start;\n      }\n      if (m_showSql) {\n        start = System.currentTimeMillis();\n      }\n\n      while (result.next()) {\n        if (m_showSql) {\n          count++;\n        }\n\n        // without a reader, we read the first String from each record\n        if (reader == null) {\n          String s = result.getString(1);\n          if (s != null) {\n            rv.add(s);\n          }\n        } else {\n          try {\n            Object obj = reader.readSqlResultRecord(result);\n            if (obj != null) {\n              rv.add(obj);\n            }\n          } catch (SqlReaderFinishedException e) {\n            break;\n          }\n        }\n      }\n    } catch (SQLException e) {\n      LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n    } catch (UnsupportedEncodingException e) {\n      LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n    } finally {\n      if (m_showSql) {\n        resultsTime = System.currentTimeMillis() - start;\n      }\n      if (null != result) {\n        try {\n          result.close();\n        } catch (SQLException e) {\n          LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n        }\n      }\n      if (null != pstmt) {\n        try {\n          pstmt.close();\n        } catch (SQLException e) {\n          LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n        }\n      }\n\n      // return the connection only if we have borrowed a new one for this call\n      if (callerConn == null) {\n        if (null != conn) {\n          // if we commit on read\n          if (m_commitAfterRead) {\n            try {\n              conn.commit();\n            } catch (SQLException e) {\n              LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n            }\n          }\n          returnConnection(conn);\n        }\n      }\n    }\n\n    if (m_showSql)\n      debug(\n          \"Sql.dbRead: time: \"\n              + connectionTime\n              + \" / \"\n              + stmtTime\n              + \" / \"\n              + resultsTime\n              + \" #: \"\n              + count,\n          sql,\n          fields);\n\n    return rv;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4903, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()"], "initializationStart": [78, 181], "initializationEnd": [93, 192], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 235, "focalAPIEnd": 261, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/akosicki/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/src/org/eclipse/dltk/ui/browsing/PackagesViewHierarchicalContentProvider.java", "rawCode": "  private void addFragmentsToMap(List elements) {\n    List packageFragments = new ArrayList();\n    for (Iterator iter = elements.iterator(); iter.hasNext(); ) {\n      Object elem = iter.next();\n      if (elem instanceof IScriptFolder) packageFragments.add(elem);\n    }\n    addFragmentsToMap(\n        (IScriptFolder[]) packageFragments.toArray(new IScriptFolder[packageFragments.size()]));\n  }\n"}, {"dataset": "listAdd", "exampleID": 4904, "initialization": ["List list = new ArrayList(int)"], "initializationStart": [72], "initializationEnd": [88], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 94, "focalAPIEnd": 111, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["List.add(list)"], "useStart": [117], "useEnd": [133], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/tools/tree/master/ide/eclipse/jaggery/org.eclipse.php.debug.ui/src/org/eclipse/php/internal/debug/ui/launching/LaunchConfigurationsTabsRegistry.java", "rawCode": "  private void addAsList(List target, Object element) {\n    List list = new ArrayList(3);\n    list.add(element);\n    target.add(list);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4905, "initialization": ["List list = new ArrayList()"], "initializationStart": [160], "initializationEnd": [175], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 181, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Map.put(String,list)"], "useStart": [202], "useEnd": [222], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xwiki-contrib/retired/tree/master/adnotatio/src/main/java/adnotatio/common/data/PropertiesContainer.java", "rawCode": "  /** @see adnotatio.common.data.IPropertiesContainer#setValue(java.lang.String, Object) */\n  public void setValue(String name, Object value) {\n    List list = new ArrayList();\n    list.add(value);\n    fMap.put(name, list);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4906, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.set(int,Object)", "list.add(String)"], "configurationStart": [832, 913], "configurationEnd": [858, 927], "guardCondition": "!(list.size()>=index)", "guardType": "IF {", "guardExpressionStart": 806, "guardExpressionEnd": 831, "guardBlockStart": 806, "guardBlockEnd": 961, "focalAPI": " = list.add(e)", "focalAPIStart": 937, "focalAPIEnd": 952, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/getrailo/railo/tree/master/railo-java/railo-core/src/railo/runtime/util/VariableUtilImpl.java", "rawCode": "  public Object set(PageContext pc, Object coll, Collection.Key key, Object value)\n      throws PageException {\n    // Objects\n    if (coll instanceof Objects) {\n      ((Objects) coll).set(pc, key, value);\n      return value;\n    }\n    // Collection\n    else if (coll instanceof Collection) {\n      ((Collection) coll).set(key, value);\n      return value;\n    }\n    // Map\n    else if (coll instanceof Map) {\n      /* no idea why this is here\n      try {\n      Reflector.setProperty(coll,key.getString(),value);\n      return value;\n      }\n      catch(Throwable t) {t.printStackTrace();}*/\n      ((Map) coll).put(key.getString(), value);\n      return value;\n    }\n    // List\n    else if (coll instanceof List) {\n      List list = ((List) coll);\n      int index = Caster.toIntValue(key.getString());\n      if (list.size() >= index) list.set(index - 1, value);\n      else {\n        while (list.size() < index - 1) list.add(null);\n        list.add(value);\n      }\n      return value;\n    }\n    // Native Array\n    else if (Decision.isNativeArray(coll)) {\n      try {\n        return ArrayUtil.set(coll, Caster.toIntValue(key.getString()) - 1, value);\n      } catch (Exception e) {\n        throw new ExpressionException(\n            \"invalid index [\" + key.getString() + \"] for Native Array, can't expand Native Arrays\");\n      }\n    }\n    // Node\n    else if (coll instanceof Node) {\n      return XMLUtil.setProperty((Node) coll, key, value);\n    }\n    // Direct Object Access\n    if (pc.getConfig().getSecurityManager().getAccess(SecurityManager.TYPE_DIRECT_JAVA_ACCESS)\n        == SecurityManager.VALUE_YES) {\n      try {\n        Reflector.setProperty(coll, key.getString(), value);\n        return value;\n      } catch (PageException pe) {\n      }\n    }\n    throw new ExpressionException(\n        \"can't assign value to a Object of this type [\"\n            + Type.getName(coll)\n            + \"] with key \"\n            + key.getString());\n  }\n"}, {"dataset": "listAdd", "exampleID": 4907, "initialization": ["Object e = Map.get(Object)", "List list = new ArrayList()"], "initializationStart": [190, 298], "initializationEnd": [203, 313], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 375, "focalAPIEnd": 390, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Map.put(Object,list)"], "useStart": [406], "useEnd": [425], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dancres/blitzjavaspaces/tree/master/src/main/java/com/go/trove/net/HttpHeaderMap.java", "rawCode": "  /**\n   * Returns all the values associated with the given key. Changes to the returned list will be\n   * reflected in this map.\n   */\n  public List getAll(Object key) {\n    Object value = mMap.get(key);\n    if (value instanceof List) {\n      return ((List) value);\n    } else {\n      List list = new ArrayList();\n      if (value != null || mMap.containsKey(key)) {\n        list.add(value);\n      }\n      mMap.put(key, list);\n      return list;\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4908, "initialization": ["List list = new LinkedList()", "Object e = Iterator.next()"], "initializationStart": [229, 384], "initializationEnd": [245, 395], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 514, "focalAPIEnd": 527, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.iterator()"], "useStart": [546], "useEnd": [561], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/markus1978/clickwatch/tree/master/external/edu.uci.ics.jung/src/edu/uci/ics/jung/utils/UnifiedUserData.java", "rawCode": "  /**\n   * Returns an <code>Iterator</code> which can be used to iterate over all the user data repository\n   * keys for this object.\n   *\n   * @return Iterator\n   */\n  public Iterator getUserDatumKeyIterator() {\n    List keys = new LinkedList();\n    // Pair key_pair = getObjectKey();\n    for (Iterator iter = key_meta_map.keySet().iterator(); iter.hasNext(); ) {\n      Object key = iter.next();\n      Map key_map = getKeyMap(key);\n      // if (key_map.containsKey(key_pair))\n      if (key_map.containsKey(this)) keys.add(key);\n    }\n    return keys.iterator();\n    // return getStorage().keySet().iterator();\n  }\n"}, {"dataset": "listAdd", "exampleID": 4909, "initialization": ["List list = new Vector()", "Object e = SqlReader.readSqlResultRecord(ResultSet)"], "initializationStart": [1849, 2859], "initializationEnd": [1861, 2893], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["debugFields(Object[])", "getRow()", "Log.warn(String)"], "tryExpressionStart": 2826, "tryExpressionEnd": 2830, "tryBlockStart": 2826, "tryBlockEnd": 3026, "catchExpressionStart": 3049, "catchExpressionEnd": 3069, "catchBlockStart": 3049, "catchBlockEnd": 3294, "exceptionHandlingCallStart": [3198, 3267, 3081], "exceptionHandlingCallEnd": [3217, 3282, 3283], "configuration": ["list.add(String)"], "configurationStart": [2784], "configurationEnd": [2793], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 2909, "guardExpressionEnd": 2925, "guardBlockStart": 2909, "guardBlockEnd": 2938, "focalAPI": " = list.add(e)", "focalAPIStart": 2926, "focalAPIEnd": 2937, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["currentTimeMillis()"], "finallyExpressionStart": 3405, "finallyExpressionEnd": 3413, "finallyBlockStart": 3405, "finallyBlockEnd": 4327, "cleanUpCallStart": [3450], "cleanUpCallEnd": [3476], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.0.16/kernel-impl/src/main/java/org/sakaiproject/db/impl/BasicSqlService.java", "rawCode": "  /**\n   * Process a query, filling in with fields, and return the results as a List, one per record read.\n   * If a reader is provided, it will be called for each record to prepare the Object placed into\n   * the List. Otherwise, the first field of each record, as a String, will be placed in the list.\n   *\n   * @param callerConn The db connection object to use (if not null).\n   * @param sql The sql statement.\n   * @param fields The array of fields for parameters.\n   * @param reader The reader object to read each record.\n   * @return The List of things read, one per record.\n   */\n  public List dbRead(Connection callerConn, String sql, Object[] fields, SqlReader reader) {\n    // check for a transaction conncetion\n    if (callerConn == null) {\n      callerConn = (Connection) threadLocalManager().get(TRANSACTION_CONNECTION);\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\n          \"dbRead(Connection \"\n              + callerConn\n              + \", String \"\n              + sql\n              + \", Object[] \"\n              + Arrays.toString(fields)\n              + \", SqlReader \"\n              + reader\n              + \")\");\n    }\n\n    // for DEBUG\n    long start = 0;\n    long connectionTime = 0;\n    int lenRead = 0;\n    long stmtTime = 0;\n    long resultsTime = 0;\n    int count = 0;\n\n    if (LOG.isDebugEnabled()) {\n      String userId = usageSessionService().getSessionId();\n      StringBuilder buf = new StringBuilder();\n      if (fields != null) {\n        buf.append(fields[0]);\n        for (int i = 1; i < fields.length; i++) {\n          buf.append(\", \");\n          buf.append(fields[i]);\n        }\n      }\n      LOG.debug(\"Sql.dbRead: \" + userId + \"\\n\" + sql + \"\\n\" + buf);\n    }\n\n    Connection conn = null;\n    PreparedStatement pstmt = null;\n    ResultSet result = null;\n    ResultSetMetaData meta = null;\n    List rv = new Vector();\n\n    try {\n      if (m_showSql) start = System.currentTimeMillis();\n\n      // borrow a new connection if we are not provided with one to use\n      if (callerConn != null) {\n        conn = callerConn;\n      } else {\n        conn = borrowConnection();\n      }\n      if (m_showSql) connectionTime = System.currentTimeMillis() - start;\n      if (m_showSql) start = System.currentTimeMillis();\n\n      pstmt = conn.prepareStatement(sql);\n\n      // put in all the fields\n      prepareStatement(pstmt, fields);\n\n      result = pstmt.executeQuery();\n\n      if (m_showSql) stmtTime = System.currentTimeMillis() - start;\n      if (m_showSql) start = System.currentTimeMillis();\n\n      while (result.next()) {\n        if (m_showSql) count++;\n\n        try {\n          // without a reader, we read the first String from each record\n          if (reader == null) {\n            String s = result.getString(1);\n            if (s != null) rv.add(s);\n          } else {\n            try {\n              Object obj = reader.readSqlResultRecord(result);\n              if (obj != null) rv.add(obj);\n            } catch (SqlReaderFinishedException e) {\n              break;\n            }\n          }\n        } catch (Throwable t) {\n          LOG.warn(\n              \"Sql.dbRead: unable to read a result from sql: \"\n                  + sql\n                  + debugFields(fields)\n                  + \" row: \"\n                  + result.getRow());\n        }\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n    } finally {\n      if (m_showSql) resultsTime = System.currentTimeMillis() - start;\n\n      if (null != result) {\n        try {\n          result.close();\n        } catch (SQLException e) {\n          LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n        }\n      }\n      if (null != pstmt) {\n        try {\n          pstmt.close();\n        } catch (SQLException e) {\n          LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n        }\n      }\n\n      // return the connection only if we have borrowed a new one for this call\n      if (callerConn == null) {\n        if (null != conn) {\n          // if we commit on read\n          if (m_commitAfterRead) {\n            try {\n              conn.commit();\n            } catch (SQLException e) {\n              LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n            }\n          }\n\n          returnConnection(conn);\n        }\n      }\n    }\n\n    if (m_showSql)\n      debug(\n          \"Sql.dbRead: time: \"\n              + connectionTime\n              + \" / \"\n              + stmtTime\n              + \" / \"\n              + resultsTime\n              + \" #: \"\n              + count,\n          sql,\n          fields);\n\n    return rv;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4910, "initialization": ["List list = Map.get(String)", "List list = new ArrayList()"], "initializationStart": [79, 141], "initializationEnd": [98, 156], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 203, "focalAPIEnd": 220, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/justinedelson/felix/tree/master/maven-obr-plugin/src/main/java/org/osgi/impl/bundle/obr/resource/CapabilityImpl.java", "rawCode": "  public void addProperty(String key, Object value) {\n    List values = (List) properties.get(key);\n    if (values == null) {\n      values = new ArrayList();\n      properties.put(key, values);\n    }\n    values.add(value);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4911, "initialization": ["Object e = prepareLob(Connection,*)"], "initializationStart": [375], "initializationEnd": [420], "hasTryCatch": 1, "exceptionType": "InvocationTargetException", "exceptionHandlingCall": ["getTargetException()"], "tryExpressionStart": 271, "tryExpressionEnd": 275, "tryBlockStart": 271, "tryBlockEnd": 1615, "catchExpressionStart": 783, "catchExpressionEnd": 820, "catchBlockStart": 783, "catchBlockEnd": 1495, "exceptionHandlingCallStart": [834], "exceptionHandlingCallEnd": [857], "configuration": ["e.getClass()"], "configurationStart": [465], "configurationEnd": [479], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 553, "focalAPIEnd": 578, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdbc-bare/spring-jdbc-bare/tree/master/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/lob/OracleLobHandler.java", "rawCode": "    /**\n     * Create a LOB instance for the given PreparedStatement, populating it via the given callback.\n     */\n    protected Object createLob(PreparedStatement ps, boolean clob, LobCallback callback)\n        throws SQLException {\n\n      Connection con = null;\n      try {\n        con = getOracleConnection(ps);\n        initOracleDriverClasses(con);\n        Object lob = prepareLob(con, clob ? clobClass : blobClass);\n        callback.populateLob(lob);\n        lob.getClass().getMethod(\"close\", (Class[]) null).invoke(lob, (Object[]) null);\n        this.createdLobs.add(lob);\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Created new Oracle \" + (clob ? \"CLOB\" : \"BLOB\"));\n        }\n        return lob;\n      } catch (SQLException ex) {\n        throw ex;\n      } catch (InvocationTargetException ex) {\n        if (ex.getTargetException() instanceof SQLException) {\n          throw (SQLException) ex.getTargetException();\n        } else if (con != null && ex.getTargetException() instanceof ClassCastException) {\n          throw new InvalidDataAccessApiUsageException(\n              \"OracleLobCreator needs to work on [oracle.jdbc.OracleConnection], not on [\"\n                  + con.getClass().getName()\n                  + \"]: specify a corresponding NativeJdbcExtractor\",\n              ex.getTargetException());\n        } else {\n          throw new DataAccessResourceFailureException(\n              \"Could not create Oracle LOB\", ex.getTargetException());\n        }\n      } catch (Exception ex) {\n        throw new DataAccessResourceFailureException(\"Could not create Oracle LOB\", ex);\n      }\n    }\n"}, {"dataset": "listAdd", "exampleID": 4912, "initialization": ["List list = get(Object)"], "initializationStart": [345], "initializationEnd": [353], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 398, "focalAPIEnd": 423, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["List.add(list)"], "useStart": [482], "useEnd": [494], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rajish/configs/tree/master/.emacs.d/plugins/jdee/java/src/jde/util/MultiValueMap.java", "rawCode": "  /**\n   * inserts value into the map for key as a single element or, if values already exist, as an entry\n   * in key's list.\n   *\n   * @param key an <code>Object</code> value\n   * @param value an <code>Object</code> value\n   * @return null\n   */\n  public Object put(Object key, Object value) {\n    if (containsKey(key)) {\n      Object other = get(key);\n      if (other instanceof List) {\n        ((List) other).add(value);\n      } else {\n        List l = new ArrayList();\n        l.add(other);\n        l.add(value);\n        super.put(key, l);\n      }\n    } else {\n      super.put(key, value);\n    }\n    return null;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4913, "initialization": ["Object e = Map.get(String)", "List list = new ArrayList()"], "initializationStart": [333, 451], "initializationEnd": [346, 466], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 478, "focalAPIEnd": 493, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Map.put(String,list)", "list.add(Object)"], "useStart": [505, 547], "useEnd": [526, 564], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdeolive/geotools-old/tree/master/modules/extension/xsd/xsd-core/src/main/java/org/geotools/xs/bindings/XSAnyTypeBinding.java", "rawCode": "  private void mapBinding(Map map, List attributes) {\n    for (Iterator i = attributes.iterator(); i.hasNext(); ) {\n      Node attribute = (Node) i.next();\n      String name = attribute.getComponent().getName();\n      Object value = attribute.getValue();\n\n      if (map.containsKey(name)) {\n        List values;\n        Object obj = map.get(name);\n\n        if (obj instanceof List) {\n          values = (List) obj;\n        } else {\n          values = new ArrayList();\n          values.add(obj);\n          map.put(name, values);\n        }\n\n        values.add(value);\n      } else {\n        map.put(name, value);\n      }\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4914, "initialization": ["List list = new ArrayList()", "Object e = UIBlockContext.getItemObj()"], "initializationStart": [122, 198], "initializationEnd": [137, 217], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 225, "guardExpressionEnd": 244, "guardBlockStart": 225, "guardBlockEnd": 282, "focalAPI": " = list.add(e)", "focalAPIStart": 255, "focalAPIEnd": 273, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.size()", "list.add(String)", "UIBlockContext.querySplit(list)"], "useStart": [297, 487, 809], "useEnd": [310, 503, 834], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jiongs/cocit/tree/master/src/core/com/kmetop/demsy/ui/datasource/UiDataset.java", "rawCode": "  public Map process(UIBlockContext parser) {\n    Map ctx = new HashMap();\n    this.init(parser, ctx);\n\n    List result = new ArrayList();\n    if (parser.getPageSize() == 1) {\n      Object record = parser.getItemObj();\n      if (record != null) {\n        result.add(record);\n      }\n    }\n    if (result.size() == 0) {\n      result = parser.query(getExpr(parser));\n      if (parser.getBlock().isFillBlank())\n        for (int i = result.size(); i < parser.getPageSize(); i++) {\n          result.add(null);\n        }\n    }\n\n    UIBlockDataModel data = parser.getCatalog();\n    if (parser.getCellCount() == 1) {\n      for (Object obj : result) {\n        if (obj == null) data.addItem(new UIBlockDataModel());\n        else data.addItem(parser.makeDataModel(obj));\n      }\n    } else {\n      List<List> listlist = parser.querySplit(result);\n      for (List list : listlist) {\n        UIBlockDataModel row = new UIBlockDataModel();\n        data.addItem(row);\n        for (Object obj : list) {\n          if (obj == null) row.addItem(parser.makeDataModel(null));\n          else row.addItem(parser.makeDataModel(obj));\n        }\n      }\n    }\n\n    ctx.put(\"data\", data);\n    ctx.put(\"pager\", parser.getPager());\n\n    return ctx;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4915, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.add(int,Object)"], "configurationStart": [285], "configurationEnd": [299], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 375, "focalAPIEnd": 386, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/FoxyCorndog/WorkspaceOld/tree/master/slick/src/org/newdawn/slick/util/pathfinding/AStarPathFinder.java", "rawCode": "    /**\n     * Add an element to the list - causes sorting\n     *\n     * @param o The element to add\n     */\n    public void add(Object o) {\n      // float the new entry\n      for (int i = 0; i < list.size(); i++) {\n        if (((Comparable) list.get(i)).compareTo(o) > 0) {\n          list.add(i, o);\n          break;\n        }\n      }\n      if (!list.contains(o)) {\n        list.add(o);\n      }\n      // Collections.sort(list);\n    }\n"}, {"dataset": "listAdd", "exampleID": 4916, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()"], "initializationStart": [405, 515], "initializationEnd": [420, 530], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 598, "focalAPIEnd": 615, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.addAll(List)"], "useStart": [901], "useEnd": [925], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dgiormov/javaee.wtp/tree/master/plugins/org.eclipse.jst.j2ee.core/j2ee-validation/org/eclipse/jst/j2ee/model/internal/validation/DuplicatesTable.java", "rawCode": "  /**\n   * If there are duplicates in this table, return a list of the duplicates. Otherwise, return an\n   * empty list.\n   */\n  private List getElements(Boolean type) {\n    if (type == null) {\n      return Collections.EMPTY_LIST;\n    }\n\n    // Else, get the duplicate elements from the list\n    Set keys = keySet();\n    if (keys == null) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List elements = new ArrayList();\n    Iterator iterator = keys.iterator();\n    while (iterator.hasNext()) {\n      Object key = iterator.next();\n      Object value = get(key);\n      if (value == type) {\n        elements.add(key);\n      }\n    }\n\n    if (type == DUPLICATE) {\n      // Also add the elements from the \"duplicates\" list.\n      if (_duplicates != null) {\n        iterator = _duplicates.values().iterator();\n        while (iterator.hasNext()) {\n          List dupList = (List) iterator.next();\n          elements.addAll(dupList);\n        }\n      }\n    }\n\n    return elements;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4917, "initialization": ["List list = new ArrayList()", "Object e = DTDNode.getParentNode()", "Object e = Object.getParentNode()"], "initializationStart": [190, 371, 1296], "initializationEnd": [205, 391, 1331], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.addAll(List)", "list.addAll(List)", "list.add(String)"], "configurationStart": [468, 613, 1163], "configurationEnd": [540, 686, 1195], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 1339, "guardExpressionEnd": 1358, "guardBlockStart": 1339, "guardBlockEnd": 1397, "focalAPI": " = list.add(e)", "focalAPIStart": 1369, "focalAPIEnd": 1388, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(String)", "list.add(String)"], "useStart": [1508, 1665], "useEnd": [1563, 1720], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/FrecherxDachs/eclipse-sse-modifications/tree/master/bundles/org.eclipse.wst.dtd.ui/src/org/eclipse/wst/dtd/ui/views/contentoutline/DTDTreeContentProvider.java", "rawCode": "  /**\n   * @param element get the tree parents of this element\n   * @return {@link List} of parents of the given element\n   */\n  private List getParents(Object element) {\n    List parents = new ArrayList();\n\n    Object parent = null;\n    if (element instanceof DTDNode) {\n      DTDNode node = (DTDNode) element;\n      if (element instanceof Attribute) {\n        parent = node.getParentNode();\n        if (parent != null && parent instanceof AttributeList) {\n          parents.addAll(getElementParentsOfAttributeList((AttributeList) parent));\n        }\n      } else if (element instanceof AttributeList) {\n        parents.addAll(getElementParentsOfAttributeList((AttributeList) element));\n      }\n\n      // if showing in the logical order, return the IndexedNodeList\n      // acting as a parent in the tree\n      if (isShowLogicalOrder()) {\n        Object[] indexedNodeLists = getChildren(((DTDModelImpl) fInputObject).getDTDFile());\n        for (int i = 0; i < indexedNodeLists.length && parent == null; i++) {\n          if (indexedNodeLists[i] instanceof NodeList) {\n            if (((NodeList) indexedNodeLists[i]).getNodes().contains(element)) {\n              parents.add(indexedNodeLists[i]);\n            }\n          }\n        }\n      }\n\n      // try and get the simple parent\n      parent = ((DTDNode) element).getParentNode();\n      if (parent != null) {\n        parents.add(parent);\n      }\n\n      // if no parents found must be new nodes so refresh from root\n      if (parents.size() == 0) {\n        parents.add(((DTDModelImpl) fInputObject).getDTDFile());\n      }\n    } else if (element instanceof NodeList && fInputObject instanceof DTDModelImpl) {\n      parents.add(((DTDModelImpl) fInputObject).getDTDFile());\n    }\n\n    return parents;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4918, "initialization": ["List list = new ArrayList(int)", "Object e = getSelectedObject(ISelection)"], "initializationStart": [290, 325], "initializationEnd": [306, 375], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 383, "focalAPIEnd": 404, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Teiid-Designer/teiid-designer/tree/master/plugins/org.teiid.designer.diagram.ui/src/org/teiid/designer/diagram/ui/pakkage/actions/AddToDiagramAction.java", "rawCode": "  @Override\n  public void selectionChanged(IWorkbenchPart thePart, ISelection theSelection) {\n    super.selectionChanged(thePart, theSelection);\n    boolean enable = false;\n    List sourceEObjects = null;\n    if (SelectionUtilities.isSingleSelection(theSelection)) {\n      sourceEObjects = new ArrayList(1);\n      Object o = SelectionUtilities.getSelectedObject(theSelection);\n      sourceEObjects.add(o);\n    } else if (SelectionUtilities.isMultiSelection(theSelection)) {\n      sourceEObjects = SelectionUtilities.getSelectedEObjects(theSelection);\n    }\n    enable = true;\n\n    setEnabled(enable);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4919, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 741, "focalAPIEnd": 756, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/KenMacD/ted-orig/tree/master/src/main/java/net/sf/torrentsniffer/bencoding/BencodingImpl.java", "rawCode": "  /**\n   * Inserts an object into the current List or Dictionary.\n   *\n   * @param stack\n   */\n  private void addObject(Stack stack, Object value) {\n    // The object that we are adding to\n    if (stack.size() == 0) {\n      if (!(value instanceof Dictionary)) {\n        throw new BencodingException(\"Root object is not a Dictionary \" + value.getClass());\n      }\n\n      stack.push(value);\n    } else {\n      Object object = stack.peek();\n      if (object instanceof Dictionary) {\n        // log.debug(\"Adding to Dictionary\");\n        Dictionary dictionary = (Dictionary) object;\n        dictionary.addValue(value);\n      } else if (object instanceof List) {\n        // log.debug(\"Adding to List\");\n        List list = (List) object;\n        list.add(value);\n      } else {\n        throw new RuntimeException(\"Not a valid collection \" + object.getClass());\n      }\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4920, "initialization": ["List list = new ArrayList()"], "initializationStart": [96], "initializationEnd": [111], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 117, "focalAPIEnd": 133, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(String)", "list.add(String)"], "useStart": [139, 166], "useEnd": [160, 204], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bogeblad/infoglue2/tree/master/src/java/org/infoglue/deliver/util/webservices/DynamicWebserviceSerializer.java", "rawCode": "  /** */\n  private List createResultList(final Class c, final int size) {\n    final List list = new ArrayList();\n    list.add(MARKER);\n    list.add(c.getName());\n    list.add(new Integer(size).toString());\n    return list;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4921, "initialization": ["List list = new ArrayList()", "Object e = CommandResult.getReturnValue()"], "initializationStart": [674, 1238], "initializationEnd": [689, 1261], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.addAll(List)"], "configurationStart": [1497], "configurationEnd": [1540], "guardCondition": "e!=null &&  !(e!=null&&e instanceof Collection)", "guardType": "IF {", "guardExpressionStart": 1274, "guardExpressionEnd": 1296, "guardBlockStart": 1274, "guardBlockEnd": 1717, "focalAPI": " = list.add(e)", "focalAPIStart": 1582, "focalAPIEnd": 1609, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(Object)", "new CommandResult(IStatus,list)"], "useStart": [1663, 1984], "useEnd": [1690, 2023], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schmeedy/gmf/tree/master/org.eclipse.gmf.runtime/plugins/org.eclipse.gmf.runtime.emf.ui/src/org/eclipse/gmf/runtime/emf/ui/action/WriteCommand.java", "rawCode": "  /**\n   * Computes a command result based on the contents of my {@link CompositeTransactionalCommand}\n   * delegate.\n   *\n   * @return the command result\n   */\n  private CommandResult computeResult() {\n\n    if (compositeDelegate.size() == 0) {\n      return null;\n\n    } else if (compositeDelegate.size() == 1) {\n      IUndoableOperation operation = (IUndoableOperation) compositeDelegate.iterator().next();\n\n      if (operation instanceof ICommand) {\n        return ((ICommand) operation).getCommandResult();\n      }\n      return new CommandResult(Status.OK_STATUS);\n    }\n\n    IStatus worst = Status.OK_STATUS;\n    List statuses = new ArrayList();\n    List returnValues = new ArrayList();\n\n    for (Iterator i = compositeDelegate.iterator(); i.hasNext(); ) {\n      IUndoableOperation operation = (IUndoableOperation) i.next();\n\n      if (operation instanceof ICommand) {\n        ICommand command = (ICommand) operation;\n        CommandResult result = command.getCommandResult();\n\n        if (result != null) {\n          IStatus nextStatus = result.getStatus();\n\n          if (nextStatus.getSeverity() > worst.getSeverity()) {\n            worst = nextStatus;\n          }\n          statuses.add(nextStatus);\n\n          Object nextValue = result.getReturnValue();\n\n          if (nextValue != null) {\n\n            if (getClass().isInstance(command)) {\n              // unwrap the values from other composites\n              if (nextValue != null && nextValue instanceof Collection) {\n                returnValues.addAll((Collection) nextValue);\n\n              } else {\n                returnValues.add(nextValue);\n              }\n\n            } else {\n              returnValues.add(nextValue);\n            }\n          }\n        }\n      }\n    }\n\n    IStatus status =\n        new MultiStatus(\n            worst.getPlugin(),\n            worst.getCode(),\n            (IStatus[]) statuses.toArray(new IStatus[statuses.size()]),\n            worst.getMessage(),\n            null);\n\n    return new CommandResult(status, returnValues);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4922, "initialization": ["Object e = readElement(ResultSet,Object,*,*)"], "initializationStart": [198], "initializationEnd": [284], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 290, "guardExpressionEnd": 310, "guardBlockStart": 290, "guardBlockEnd": 333, "focalAPI": " = list.add(e)", "focalAPIStart": 311, "focalAPIEnd": 332, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/drepshas/hib-core/tree/master/hibernate-core/src/main/java/org/hibernate/collection/internal/PersistentSet.java", "rawCode": "  public Object readFrom(\n      ResultSet rs, CollectionPersister persister, CollectionAliases descriptor, Object owner)\n      throws HibernateException, SQLException {\n    Object element =\n        persister.readElement(rs, owner, descriptor.getSuffixedElementAliases(), getSession());\n    if (element != null) tempList.add(element);\n    return element;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4923, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 164, "focalAPIEnd": 183, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/akosicki/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/core refactoring/org/eclipse/dltk/internal/corext/refactoring/reorg/MoveModifications.java", "rawCode": "  private void add(Object element, RefactoringArguments args, IParticipantDescriptorFilter filter) {\n    Assert.isNotNull(element);\n    Assert.isNotNull(args);\n    fMoves.add(element);\n    fMoveArguments.add(args);\n    fParticipantDescriptorFilter.add(filter);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4924, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()"], "initializationStart": [178, 295], "initializationEnd": [193, 304], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 362, "focalAPIEnd": 379, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schmeedy/gmf/tree/master/org.eclipse.gmf.runtime/tests/org.eclipse.gmf.tests.runtime.diagram.ui/src/org/eclipse/gmf/tests/runtime/diagram/ui/AbstractTestBase.java", "rawCode": "  /** Return the supplied editpart's {@link ShapeNodeEditPart}children. */\n  protected List getShapesIn(IGraphicalEditPart parent) {\n    assertNotNull(parent);\n    List shapes = new ArrayList();\n\n    Iterator it = parent.getChildren().iterator();\n    while (it.hasNext()) {\n      Object child = it.next();\n      if (child instanceof ShapeNodeEditPart) {\n        shapes.add(child);\n      }\n    }\n    return shapes;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4925, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()", "Object e = getOwner(Object)"], "initializationStart": [988, 1091, 1112], "initializationEnd": [1003, 1100, 1123], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 1187, "focalAPIEnd": 1206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prat0318/fop/tree/master/argouml/src/argouml-app/src/org/argouml/ui/targetmanager/TargetManager.java", "rawCode": "  /**\n   * Sets the given collection to the current targets. If the collection equals the current targets,\n   * then does nothing. When setting the targets, a TargetEvent will be fired to each interested\n   * listener. Note that the first element returned by an Iterator on targetList will be taken to be\n   * the primary target (see getTarget()), and that an event will be fired also in case that that\n   * element would not equal the element returned by getTarget(). Note also that any nulls within\n   * the Collection will be ignored.\n   *\n   * @param targetsCollection The new targets list.\n   */\n  public synchronized void setTargets(Collection targetsCollection) {\n    Iterator ntarg;\n\n    if (isInTargetTransaction()) {\n      return;\n    }\n\n    Collection targetsList = new ArrayList();\n    if (targetsCollection != null) {\n      targetsList.addAll(targetsCollection);\n    }\n\n    /* Remove duplicates and take care of getOwner()\n     * and remove nulls: */\n    List modifiedList = new ArrayList();\n    Iterator it = targetsList.iterator();\n    while (it.hasNext()) {\n      Object o = it.next();\n      o = getOwner(o);\n      if ((o != null) && !modifiedList.contains(o)) {\n        modifiedList.add(o);\n      }\n    }\n    targetsList = modifiedList;\n\n    Object[] oldTargets = null;\n\n    // check if there are new elements in the list\n    // if the old and new list are of the same size\n    // set the oldTargets to the correct selection\n    if (targetsList.size() == targets.size()) {\n      boolean first = true;\n      ntarg = targetsList.iterator();\n\n      while (ntarg.hasNext()) {\n        Object targ = ntarg.next();\n        if (targ == null) {\n          continue;\n        }\n        if (!targets.contains(targ) || (first && targ != getTarget())) {\n          oldTargets = targets.toArray();\n          break;\n        }\n        first = false;\n      }\n    } else {\n      oldTargets = targets.toArray();\n    }\n\n    if (oldTargets == null) {\n      return;\n    }\n\n    startTargetTransaction();\n\n    umlListener.removeAllListeners(targets);\n    targets.clear();\n\n    // implement set-like behaviour. The same element\n    // may not be added more then once.\n    ntarg = targetsList.iterator();\n    while (ntarg.hasNext()) {\n      Object targ = ntarg.next();\n      if (targets.contains(targ)) {\n        continue;\n      }\n      targets.add(targ);\n      umlListener.addListener(targ);\n    }\n\n    internalOnSetTarget(TargetEvent.TARGET_SET, oldTargets);\n\n    endTargetTransaction();\n  }\n"}, {"dataset": "listAdd", "exampleID": 4926, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.set(int,Object)", "list.add(String)"], "configurationStart": [1060, 1139], "configurationEnd": [1078, 1153], "guardCondition": "!(list.size()>i)", "guardType": "IF {", "guardExpressionStart": 1029, "guardExpressionEnd": 1049, "guardBlockStart": 1029, "guardBlockEnd": 1197, "focalAPI": " = list.add(e)", "focalAPIStart": 1173, "focalAPIEnd": 1188, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/springrichclient/springrcp/tree/master/spring-richclient-sandbox/src/main/java/org/springframework/richclient/beans/AbstractMemberPropertyAccessor.java", "rawCode": "  /**\n   * Helper method for subclasses to set values of indexed properties, like map-values,\n   * collection-values or array-values.\n   *\n   * @param assemblageType either map or collection or array\n   * @param assemblage the assemblage to set the value on\n   * @param index the index to set the value at\n   * @param value the value to set\n   * @return the assemblage\n   */\n  protected Object setAssemblageValue(\n      Class assemblageType, Object assemblage, Object index, Object value) {\n    if (assemblageType.isArray()) {\n      int i = ((Integer) index).intValue();\n      if (Array.getLength(assemblage) <= i) {\n        Object newAssemblage = Array.newInstance(assemblageType.getComponentType(), i + 1);\n        System.arraycopy(assemblage, 0, newAssemblage, 0, Array.getLength(assemblage));\n        assemblage = newAssemblage;\n      }\n      Array.set(assemblage, i, value);\n    } else if (List.class.isAssignableFrom(assemblageType)) {\n      int i = ((Integer) index).intValue();\n      List list = (List) assemblage;\n      if (list.size() > i) {\n        list.set(i, value);\n      } else {\n        while (list.size() < i) {\n          list.add(null);\n        }\n        list.add(value);\n      }\n    } else if (Map.class.isAssignableFrom(assemblageType)) {\n      ((Map) assemblage).put(index, value);\n    } else if (assemblage instanceof Collection) {\n      ((Collection) assemblage).add(value);\n    } else {\n      throw new IllegalArgumentException(\"assemblage must be of type array, collection or map.\");\n    }\n    return assemblage;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4927, "initialization": ["List list = List.get(int)", "List list = new ArrayList()"], "initializationStart": [161, 227], "initializationEnd": [196, 242], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["e.getClass()"], "configurationStart": [173], "configurationEnd": [185], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 249, "focalAPIEnd": 260, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(*,list)"], "useStart": [266], "useEnd": [307], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cadsr-semantic-tools/tree/master/software/SIW/src/java/gov/nih/nci/ncicb/cadsr/loader/ElementsLists.java", "rawCode": "  /**\n   * Add an element to this list.\n   *\n   * @param o an <code>Object</code>\n   */\n  public synchronized void addElement(Object o) {\n    List list = (List) objects.get(o.getClass().getName());\n    if (list == null) list = new ArrayList();\n\n    list.add(o);\n    objects.put(o.getClass().getName(), list);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4928, "initialization": ["List list = new ArrayList()", "Object e = getFile(Resource)"], "initializationStart": [277, 566], "initializationEnd": [292, 605], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 617, "guardExpressionEnd": 634, "guardBlockStart": 617, "guardBlockEnd": 678, "focalAPI": " = list.add(e)", "focalAPIStart": 649, "focalAPIEnd": 665, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(Object)"], "useStart": [1233], "useEnd": [1249], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schmeedy/gmf/tree/master/org.eclipse.gmf.runtime/plugins/org.eclipse.gmf.runtime.emf.type.core/src/org/eclipse/gmf/runtime/emf/type/core/commands/EditElementCommand.java", "rawCode": "  protected static List getAffectedFiles(IEditCommandRequest request) {\n    Map cacheMaps = (Map) request.getParameter(RequestCacheEntries.Cache_Maps);\n    if (cacheMaps != null) {\n      return (List) cacheMaps.get(RequestCacheEntries.Affected_Files);\n    }\n\n    List result = new ArrayList();\n    List elements = request.getElementsToEdit();\n    int size;\n    if (elements != null && ((size = elements.size()) > 0)) {\n      if (size == 1) {\n        Resource resource = ((EObject) elements.get(0)).eResource();\n        if (resource != null) {\n          IFile file = WorkspaceSynchronizer.getFile(resource);\n          if (file != null) {\n            result.add(file);\n          }\n        }\n      } else {\n        Map resourcesToFileMap = new HashMap();\n        for (int i = 0; i < size; ++i) {\n          Resource resource = ((EObject) elements.get(i)).eResource();\n          if (resource != null) {\n            Object file = resourcesToFileMap.get(resource);\n            // if it is in the Map, then it is in the List already as well\n            if (file == null) {\n              file = WorkspaceSynchronizer.getFile(resource);\n              if (file != null) {\n                resourcesToFileMap.put(resource, file);\n                result.add(file);\n              }\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4929, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 84, "focalAPIEnd": 112, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bennidi/mbassador/tree/master/src/test/java/net/engio/mbassy/listeners/ObjectListener.java", "rawCode": "  @Handler(priority = Integer.MAX_VALUE)\n  public void handle(Object message) {\n    handledMessages.add(message);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4930, "initialization": ["List list = new ArrayList(int)", "Object e = Iterator.next()"], "initializationStart": [80, 187], "initializationEnd": [96, 198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 252, "focalAPIEnd": 271, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/tools/tree/master/ide/eclipse/jaggery/org.eclipse.php.ui/src/org/eclipse/php/internal/ui/refactor/processors/ReorgUtils.java", "rawCode": "  public static IWorkingSet[] getWorkingSets(List elements) {\n    List result = new ArrayList(1);\n    for (Iterator iter = elements.iterator(); iter.hasNext(); ) {\n      Object element = iter.next();\n      if (element instanceof IWorkingSet) {\n        result.add(element);\n      }\n    }\n    return (IWorkingSet[]) result.toArray(new IWorkingSet[result.size()]);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4931, "initialization": ["List list = new ArrayList()", "Object e = List.get(int)"], "initializationStart": [566, 736], "initializationEnd": [581, 785], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 793, "guardExpressionEnd": 813, "guardBlockStart": 793, "guardBlockEnd": 854, "focalAPI": " = list.add(e)", "focalAPIStart": 824, "focalAPIEnd": 845, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/FrecherxDachs/eclipse-sse-modifications/tree/master/bundles/org.eclipse.wst.sse.ui/src/org/eclipse/wst/sse/ui/internal/contentassist/CompletionProposalComputerRegistry.java", "rawCode": "  /**\n   * Gets all of the {@link CompletionProposalContentTypeContext}s associated with the given content\n   * type ID. A context is considered associated if its associated content type ID is either the\n   * given content type ID or is a base content type ID of the given content type ID.\n   *\n   * @param contentTypeID get the contexts for this content type ID\n   * @return {@link List} of {@link CompletionProposalContentTypeContext}s associated with the given\n   *     content type ID\n   */\n  private List getContexts(String contentTypeID) {\n    List contexts = new ArrayList();\n    IContentType contentType = Platform.getContentTypeManager().getContentType(contentTypeID);\n\n    while (contentType != null) {\n      Object context = this.fActivationContexts.get(contentType.getId());\n      if (context != null) {\n        contexts.add(context);\n      }\n\n      contentType = contentType.getBaseType();\n    }\n\n    return contexts;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4932, "initialization": ["List list = new ArrayList()", "Object e = parseValue(CharacterIterator)"], "initializationStart": [216, 273], "initializationEnd": [231, 298], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 306, "focalAPIEnd": 321, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maqetta/maqetta/tree/master/maqetta.core.server/src/org/davinci/server/util/JSONReader.java", "rawCode": "  private static List parseArray(CharacterIterator it) {\n    it.next();\n    JSONReader.parseWhitespace(it);\n    if (it.current() == ']') {\n      it.next();\n      return Collections.EMPTY_LIST;\n    }\n\n    List list = new ArrayList();\n    while (true) {\n      Object value = JSONReader.parseValue(it);\n      list.add(value);\n      JSONReader.parseWhitespace(it);\n      if (it.current() == ',') {\n        it.next();\n        JSONReader.parseWhitespace(it);\n        continue;\n      }\n\n      if (it.current() != ']') {\n        throw JSONReader.error(\n            \"expected an array close ']' but was '\" + it.current() + \"'\",\n            it); // $NON-NLS-1$ //$NON-NLS-2$\n      }\n      break;\n    }\n    it.next();\n    return list;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4933, "initialization": ["List list = new ArrayList(int)"], "initializationStart": [689], "initializationEnd": [705], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 715, "focalAPIEnd": 745, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["BuildPathBasePage.setSelection(list,boolean)"], "useStart": [755], "useEnd": [789], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jacob-carlborg/descent/tree/master/descent.ui/src/descent/internal/ui/wizards/buildpaths/BuildPathsBlock.java", "rawCode": "  public void setElementToReveal(IClasspathEntry entry, String attributeKey) {\n    int pageIndex = getPageIndex(entry.getEntryKind());\n    if (fTabFolder == null) {\n      fPageIndex = pageIndex;\n    } else {\n      fTabFolder.setSelection(pageIndex);\n      CPListElement element = findElement(entry);\n      if (element != null) {\n        Object elementToSelect = element;\n\n        if (attributeKey != null) {\n          Object attrib = element.findAttributeElement(attributeKey);\n          if (attrib != null) {\n            elementToSelect = attrib;\n          }\n        }\n        BuildPathBasePage page = (BuildPathBasePage) fTabFolder.getItem(pageIndex).getData();\n        List selection = new ArrayList(1);\n        selection.add(elementToSelect);\n        page.setSelection(selection, true);\n      }\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4934, "initialization": ["Object e = Hashtable.get(String)", "List list = new Vector()"], "initializationStart": [268, 375], "initializationEnd": [285, 387], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(e==null) && e instanceof String", "guardType": "IF {", "guardExpressionStart": 291, "guardExpressionEnd": 309, "guardBlockStart": 291, "guardBlockEnd": 322, "focalAPI": " = list.add(e)", "focalAPIStart": 395, "focalAPIEnd": 408, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.addAll(List)"], "useStart": [503], "useEnd": [526], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.3.0-b02/kernel-util/src/main/java/org/sakaiproject/util/BaseResourceProperties.java", "rawCode": "  /**\n   * Access a named property as a List of (String), good for single or multi-valued properties.\n   *\n   * @param name The property name.\n   * @return the property value, or null if not found.\n   */\n  public List getPropertyList(String name) {\n    Object value = m_props.get(name);\n    if (value == null) return null;\n\n    if (value instanceof String) {\n      List rv = new Vector();\n      rv.add(value);\n      return rv;\n    } else if (value instanceof List) {\n      List rv = new Vector();\n      rv.addAll((List) value);\n      return rv;\n    }\n\n    return null;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4935, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 45, "focalAPIEnd": 67, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tengstrand/Laja/tree/master/src/main/java/net/sf/laja/parser/template/Out.java", "rawCode": "  public void addStatement(Object obj) {\n    statementList.add(obj);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4936, "initialization": ["List list = new ArrayList()", "Object e = findParameter(Map<Class, Object>,*)"], "initializationStart": [668, 760], "initializationEnd": [683, 800], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 808, "guardExpressionEnd": 830, "guardBlockStart": 808, "guardBlockEnd": 880, "focalAPI": " = list.add(e)", "focalAPIStart": 841, "focalAPIEnd": 871, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.toArray()"], "useStart": [899], "useEnd": [924], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/weslien/playpal/tree/master/custom/cmscore/app/origo/helpers/ReflectionHelper.java", "rawCode": "  /**\n   * Tries to match up the parameter types to known entities and constructs the array of parameters.\n   *\n   * @param parameterTypes an array of types this trigger method takes\n   * @param parameters possible parameters for this invocation\n   * @return a list of parameters matching the parameter types\n   * @throws UnknownParameterTypeException is thrown when there is no matching parameter for a\n   *     specified parameter type in the method\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static Object[] getInvocationParameters(\n      Class[] parameterTypes, Map<Class, Object> parameters) throws UnknownParameterTypeException {\n    List foundParameters = new ArrayList();\n\n    for (Class parameterType : parameterTypes) {\n      Object parameter = findParameter(parameters, parameterType);\n      if (parameter != null) {\n        foundParameters.add(parameter);\n      }\n    }\n\n    return foundParameters.toArray();\n  }\n"}, {"dataset": "listAdd", "exampleID": 4937, "initialization": ["List list = new ArrayList()", "Object e = toMongoObject(*,boolean)", "Object e = toDBObject(*,Map<Object, DBObject>)"], "initializationStart": [409, 841, 891], "initializationEnd": [424, 868, 926], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.add(String)", "list.add(String)", "e.removeField(*)"], "configurationStart": [479, 638, 989], "configurationEnd": [495, 675, 1046], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 1059, "focalAPIEnd": 1074, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["DBObject.put(String,list)"], "useStart": [1167], "useEnd": [1193], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/allanbank/morphia-async/tree/master/morphia/src/main/java/com/google/code/morphia/mapping/EmbeddedMapper.java", "rawCode": "  private void writeCollection(\n      final MappedField mf,\n      final DBObject dbObject,\n      Map<Object, DBObject> involvedObjects,\n      String name,\n      Object fieldValue,\n      Mapper mapr) {\n    Iterable coll = null;\n\n    if (fieldValue != null)\n      if (mf.isArray) coll = Arrays.asList((Object[]) fieldValue);\n      else coll = (Iterable) fieldValue;\n\n    if (coll != null) {\n      List values = new ArrayList();\n      for (Object o : coll) {\n        if (null == o) values.add(null);\n        else if (mapr.converters.hasSimpleValueConverter(mf)\n            || mapr.converters.hasSimpleValueConverter(o.getClass()))\n          values.add(mapr.converters.encode(o));\n        else {\n          Object val;\n          if (Collection.class.isAssignableFrom(o.getClass())\n              || Map.class.isAssignableFrom(o.getClass())) val = mapr.toMongoObject(o, true);\n          else val = mapr.toDBObject(o, involvedObjects);\n\n          if (!shouldSaveClassName(o, val, mf))\n            ((DBObject) val).removeField(Mapper.CLASS_NAME_FIELDNAME);\n\n          values.add(val);\n        }\n      }\n      if (values.size() > 0 || mapr.getOptions().storeEmpties) {\n        dbObject.put(name, values);\n      }\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4938, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 2436, "focalAPIEnd": 2455, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/theyelllowdart/hk2/tree/master/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/WriteableView.java", "rawCode": "    @Override\n    public synchronized boolean add(Object object) {\n      Object param = object;\n      Object handler = null;\n      try {\n        handler = Proxy.getInvocationHandler(object);\n      } catch (IllegalArgumentException e) {\n        // ignore, this is a leaf\n      }\n      if (handler != null && handler instanceof WriteableView) {\n        ConfigBean master = ((WriteableView) handler).getMasterView();\n        String key = master.model.key;\n        if (key != null) {\n          // remove leading @\n          key = key.substring(1);\n          // check that we are not adding a duplicate key element\n          String keyValue = ((WriteableView) handler).getPropertyValue(key);\n          for (Object o : proxied) {\n            // the proxied object can be a read-only or a writeable view, we need\n            // to be careful\n            // ToDo : we need to encasulate this test.\n            String value = null;\n            if (Proxy.getInvocationHandler(o) instanceof WriteableView) {\n              ConfigBean masterView = ((WriteableView) handler).getMasterView();\n              String masterViewKey = masterView.model.key;\n              if (masterViewKey != null && key.equals(masterViewKey.substring(1))) {\n                value = ((WriteableView) Proxy.getInvocationHandler(o)).getPropertyValue(key);\n              }\n            } else {\n              Dom cbo = Dom.unwrap((ConfigBeanProxy) o);\n              String cboKey = cbo.model.key;\n              if (cboKey != null && key.equals(cboKey.substring(1))) {\n                value = cbo.attribute(key);\n              }\n            }\n            if (keyValue != null && value != null && keyValue.equals(value)) {\n              Dom parent = Dom.unwrap(readView);\n              throw new IllegalArgumentException(\n                  \"A \"\n                      + master.getProxyType().getSimpleName()\n                      + \" with the same key \\\"\"\n                      + keyValue\n                      + \"\\\" already exists in \"\n                      + parent.getProxyType().getSimpleName()\n                      + \" \"\n                      + parent.getKey());\n            }\n          }\n        }\n        param =\n            ((WriteableView) handler)\n                .getMasterView()\n                .createProxy((Class<ConfigBeanProxy>) master.getImplementationClass());\n      }\n      changeEvents.add(new PropertyChangeEvent(defaultView, id, null, param));\n      return proxied.add(object);\n    }\n"}, {"dataset": "listAdd", "exampleID": 4939, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "nodes.contains(e,)", "guardType": "IF {", "guardExpressionStart": 72, "guardExpressionEnd": 109, "guardBlockStart": 72, "guardBlockEnd": 125, "focalAPI": " = list.add(e)", "focalAPIStart": 110, "focalAPIEnd": 124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["order(*,list,Set,boolean)", "list.add(Object)"], "useStart": [260, 352], "useEnd": [301, 366], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/panbasten/BA/tree/master/mondrian/mondrian-model/src/main/java/com/tonbeller/wcf/tree/NodeSorter.java", "rawCode": "  void order(Object node, List list, Set nodes, boolean preOrder) {\n    if (preOrder && nodes.contains(node)) list.add(node);\n    if (expanded.contains(node)) {\n      Object[] children = model.getChildren(node);\n      for (int i = 0; i < children.length; i++) order(children[i], list, nodes, preOrder);\n    }\n    if (!preOrder && nodes.contains(node)) list.add(node);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4940, "initialization": ["Object e = Hashtable.get(String)", "List list = new Vector()"], "initializationStart": [268, 375], "initializationEnd": [285, 387], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(e==null) && e instanceof String", "guardType": "IF {", "guardExpressionStart": 291, "guardExpressionEnd": 309, "guardBlockStart": 291, "guardBlockEnd": 322, "focalAPI": " = list.add(e)", "focalAPIStart": 395, "focalAPIEnd": 408, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.addAll(List)"], "useStart": [503], "useEnd": [526], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/kernel-1.3.x/kernel-util/src/main/java/org/sakaiproject/util/BaseResourceProperties.java", "rawCode": "  /**\n   * Access a named property as a List of (String), good for single or multi-valued properties.\n   *\n   * @param name The property name.\n   * @return the property value, or null if not found.\n   */\n  public List getPropertyList(String name) {\n    Object value = m_props.get(name);\n    if (value == null) return null;\n\n    if (value instanceof String) {\n      List rv = new Vector();\n      rv.add(value);\n      return rv;\n    } else if (value instanceof List) {\n      List rv = new Vector();\n      rv.addAll((List) value);\n      return rv;\n    }\n\n    return null;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4941, "initialization": ["Object e = new Object()"], "initializationStart": [183], "initializationEnd": [195], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 201, "focalAPIEnd": 213, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.size()", "list.get(int)", "list.add(String)", "list.size()", "list.get(int)"], "useStart": [264, 254, 293, 357, 347], "useEnd": [276, 281, 308, 369, 374], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codefireX/platform_libcore/tree/master/luni/src/test/java/tests/api/java/util/ArrayListTest.java", "rawCode": "  /** java.util.ArrayList#add(java.lang.Object) */\n  public void test_addLjava_lang_Object() {\n    // Test for method boolean java.util.ArrayList.add(java.lang.Object)\n    Object o = new Object();\n    alist.add(o);\n    assertTrue(\"Failed to add Object\", alist.get(alist.size() - 1) == o);\n    alist.add(null);\n    assertNull(\"Failed to add null\", alist.get(alist.size() - 1));\n  }\n"}, {"dataset": "listAdd", "exampleID": 4942, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()"], "initializationStart": [384, 632], "initializationEnd": [399, 641], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 651, "guardExpressionEnd": 665, "guardBlockStart": 651, "guardBlockEnd": 675, "focalAPI": " = list.add(e)", "focalAPIStart": 666, "focalAPIEnd": 674, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/david-mcneil/stringtemplate/tree/master/java/release-3.2/src/org/antlr/stringtemplate/language/ASTExpr.java", "rawCode": "  /**\n   * Return the everything but the first attribute if multiple valued or null if single-valued. Used\n   * in <names:rest()>.\n   */\n  public Object rest(Object attribute) {\n    if (attribute == null) {\n      return null;\n    }\n    Object theRest = attribute;\n    attribute = convertAnythingIteratableToIterator(attribute);\n    if (attribute instanceof Iterator) {\n      List a = new ArrayList();\n      Iterator it = (Iterator) attribute;\n      if (!it.hasNext()) {\n        return null; // if not even one value return null\n      }\n      it.next(); // ignore first value\n      while (it.hasNext()) {\n        Object o = (Object) it.next();\n        if (o != null) a.add(o);\n      }\n      return a;\n    } else {\n      theRest = null; // rest of single-valued attribute is null\n    }\n\n    return theRest;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4943, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 164, "focalAPIEnd": 184, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/akosicki/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.core.manipulation/src/org/eclipse/dltk/internal/corext/refactoring/rename/RenameModifications.java", "rawCode": "  private void add(Object element, RefactoringArguments args, IParticipantDescriptorFilter filter) {\n    Assert.isNotNull(element);\n    Assert.isNotNull(args);\n    fRename.add(element);\n    fRenameArguments.add(args);\n    fParticipantDescriptorFilter.add(filter);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4944, "initialization": ["Object e = Map.get(Object)", "List list = new ArrayList(int)"], "initializationStart": [74, 212], "initializationEnd": [86, 228], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(e instanceof List) && !(e==null)", "guardType": "IF {", "guardExpressionStart": 144, "guardExpressionEnd": 160, "guardBlockStart": 144, "guardBlockEnd": 191, "focalAPI": " = list.add(e)", "focalAPIStart": 236, "focalAPIEnd": 251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/src/org/eclipse/dltk/internal/ui/workingsets/WorkingSetModel.java", "rawCode": "    private List getAllElements(Map map, Object key) {\n      Object obj = map.get(key);\n      if (obj instanceof List) return (List) obj;\n      if (obj == null) return Collections.EMPTY_LIST;\n      List result = new ArrayList(1);\n      result.add(obj);\n      return result;\n    }\n"}, {"dataset": "listAdd", "exampleID": 4945, "initialization": ["List list = new ArrayList(int)"], "initializationStart": [364], "initializationEnd": [380], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 392, "focalAPIEnd": 414, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/penSecIT/commons-vfs/tree/master/tags/vfs-1.0/core/src/main/java/org/apache/commons/vfs/provider/AbstractFileObject.java", "rawCode": "  /**\n   * This method is meant to add a object where this object holds a strong reference then. E.g. a\n   * archive-filesystem creates a list of all childs and they shouldnt get garbage collected until\n   * the container is garbage collected\n   *\n   * @param strongRef\n   */\n  public void holdObject(Object strongRef) {\n    if (objects == null) {\n      objects = new ArrayList(5);\n    }\n    objects.add(strongRef);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4946, "initialization": ["List list = new ArrayList(int)", "Object e = Iterator.next()"], "initializationStart": [80, 187], "initializationEnd": [96, 198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 252, "focalAPIEnd": 271, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/panchenko/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/core refactoring/org/eclipse/dltk/internal/corext/refactoring/reorg/ReorgUtils.java", "rawCode": "  public static IWorkingSet[] getWorkingSets(List elements) {\n    List result = new ArrayList(1);\n    for (Iterator iter = elements.iterator(); iter.hasNext(); ) {\n      Object element = iter.next();\n      if (element instanceof IWorkingSet) {\n        result.add(element);\n      }\n    }\n    return (IWorkingSet[]) result.toArray(new IWorkingSet[result.size()]);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4947, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()"], "initializationStart": [178, 295], "initializationEnd": [193, 304], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 362, "focalAPIEnd": 379, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/gmf-runtime/tree/master/org.eclipse.gmf.tests.runtime.diagram.ui/src/org/eclipse/gmf/tests/runtime/diagram/ui/AbstractTestBase.java", "rawCode": "  /** Return the supplied editpart's {@link ShapeNodeEditPart}children. */\n  protected List getShapesIn(IGraphicalEditPart parent) {\n    assertNotNull(parent);\n    List shapes = new ArrayList();\n\n    Iterator it = parent.getChildren().iterator();\n    while (it.hasNext()) {\n      Object child = it.next();\n      if (child instanceof ShapeNodeEditPart) {\n        shapes.add(child);\n      }\n    }\n    return shapes;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4948, "initialization": ["List list = Map.get(Object)", "List list = new ArrayList()"], "initializationStart": [84, 127], "initializationEnd": [94, 142], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 175, "focalAPIEnd": 183, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mz2/nmica-extra/tree/master/src/biobits/utils/MapUtils.java", "rawCode": "  public static void pushMapping(Map map, Object a, Object b) {\n    List l = (List) map.get(a);\n    if (l == null) {\n      l = new ArrayList();\n      map.put(a, l);\n    }\n    l.add(b);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4949, "initialization": ["List list = new ArrayList(int)"], "initializationStart": [688], "initializationEnd": [704], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 714, "focalAPIEnd": 744, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["BuildPathBasePage.setSelection(list,boolean)"], "useStart": [754], "useEnd": [788], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/tools/tree/master/ide/eclipse/jaggery/org.eclipse.php.ui/src/org/eclipse/php/internal/ui/preferences/includepath/AbstractIncludepathsBlock.java", "rawCode": "  public void setElementToReveal(IBuildpathEntry entry, String attributeKey) {\n    int pageIndex = getPageIndex(entry.getEntryKind());\n    if (fTabFolder == null) {\n      fPageIndex = pageIndex;\n    } else {\n      fTabFolder.setSelection(pageIndex);\n      BPListElement element = findElement(entry);\n      if (element != null) {\n        Object elementToSelect = element;\n        if (attributeKey != null) {\n          Object attrib = element.findAttributeElement(attributeKey);\n          if (attrib != null) {\n            elementToSelect = attrib;\n          }\n        }\n        BuildPathBasePage page = (BuildPathBasePage) fTabFolder.getItem(pageIndex).getData();\n        List selection = new ArrayList(1);\n        selection.add(elementToSelect);\n        page.setSelection(selection, true);\n      }\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4950, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 50, "focalAPIEnd": 73, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/YongJiang/org.eclipse.birt.engine/tree/master/plugins/org.eclipse.birt.report.engine/src/org/eclipse/birt/report/engine/adapter/ExpressionUtil.java", "rawCode": "  public void addNewExpression(Object expr) {\n    this.newExprs.add(expr);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4951, "initialization": ["List list = new ArrayList(*)", "Object e = createExecutableExtension(*)"], "initializationStart": [1610, 3310], "initializationEnd": [1833, 3373], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.add(IClasspathContainer)"], "configurationStart": [2632], "configurationEnd": [2667], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 3467, "focalAPIEnd": 3504, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(Object)"], "useStart": [4243], "useEnd": [4280], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dgiormov/web.fragment.fix/tree/master/plugins/org.eclipse.jem.proxy/proxy/org/eclipse/jem/internal/proxy/core/ProxyLaunchSupport.java", "rawCode": "  /**\n   * Fill in the launch info config info and contribs. The contribs sent in may be expanded due to\n   * extension points and a new one created. Either the expanded copy or the original (if no change)\n   * will be stored in the launchinfo and returned from this call.\n   *\n   * @param aContribs this should never be <code>null</code>. Pass in {@link\n   *     ProxyLaunchSupport#EMPTY_CONFIG_CONTRIBUTORS} in that case.\n   * @param launchInfo\n   * @param projectName\n   * @return a modified aContribs if any change was made to it. This will never be <code>null</code>\n   *     . It will return an empty list if aContribs was null and no changes were made.\n   * @throws JavaModelException\n   * @throws CoreException\n   * @since 1.0.0\n   */\n  public static IConfigurationContributor[] fillInLaunchInfo(\n      IConfigurationContributor[] aContribs, LaunchInfo launchInfo, String projectName)\n      throws JavaModelException, CoreException {\n    if (projectName != null) {\n      projectName = projectName.trim();\n      if (projectName.length() > 0) {\n        IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);\n        IJavaProject javaProject = JavaCore.create(project);\n        if (javaProject != null && javaProject.exists()) {\n          launchInfo.configInfo = createDefaultConfigurationContributionInfo(javaProject);\n          if (!launchInfo.configInfo.getContainerIds().isEmpty()\n              || !launchInfo.configInfo.getContainers().isEmpty()\n              || !launchInfo.configInfo.getPluginIds().isEmpty()) {\n            List computedContributors =\n                new ArrayList(\n                    launchInfo.configInfo.getContainerIds().size()\n                        + launchInfo.configInfo.getContainers().size()\n                        + launchInfo.configInfo.getPluginIds().size());\n            // Note: We don't care about the visibility business here. For contributors to proxy it\n            // means\n            // some classes in the projects/plugins/etc. need configuration whether they are visible\n            // or not.\n            // This is because even though not visible, some other visible class may instantiate it.\n            // So it\n            // needs the configuration.\n            // First handle explicit classpath containers that implement IConfigurationContributor\n            for (Iterator iter = launchInfo.configInfo.getContainers().keySet().iterator();\n                iter.hasNext(); ) {\n              IClasspathContainer container = (IClasspathContainer) iter.next();\n              if (container instanceof IConfigurationContributor)\n                computedContributors.add(container);\n            }\n\n            // Second add in contributors that exist for a container id.\n            for (Iterator iter = launchInfo.configInfo.getContainerIds().values().iterator();\n                iter.hasNext(); ) {\n              ContainerPaths paths = (ContainerPaths) iter.next();\n              IConfigurationElement[] contributors =\n                  ProxyPlugin.getPlugin()\n                      .getContainerConfigurations(paths.getContainerId(), paths.getAllPaths());\n              if (contributors != null)\n                for (int i = 0; i < contributors.length; i++) {\n                  Object contributor =\n                      contributors[i].createExecutableExtension(ProxyPlugin.PI_CLASS);\n                  if (contributor instanceof IConfigurationContributor)\n                    computedContributors.add(contributor);\n                }\n            }\n\n            // Finally add in contributors that exist for a plugin id.\n            for (Iterator iter = launchInfo.configInfo.getPluginIds().keySet().iterator();\n                iter.hasNext(); ) {\n              String pluginId = (String) iter.next();\n              IConfigurationElement[] contributors =\n                  ProxyPlugin.getPlugin().getPluginConfigurations(pluginId);\n              if (contributors != null)\n                for (int i = 0; i < contributors.length; i++) {\n                  Object contributor =\n                      contributors[i].createExecutableExtension(ProxyPlugin.PI_CLASS);\n                  if (contributor instanceof IConfigurationContributor)\n                    computedContributors.add(contributor);\n                }\n            }\n\n            // Now turn into array\n            if (!computedContributors.isEmpty()) {\n              IConfigurationContributor[] newContribs =\n                  new IConfigurationContributor[aContribs.length + computedContributors.size()];\n              System.arraycopy(aContribs, 0, newContribs, 0, aContribs.length);\n              IConfigurationContributor[] cContribs =\n                  (IConfigurationContributor[])\n                      computedContributors.toArray(\n                          new IConfigurationContributor[computedContributors.size()]);\n              System.arraycopy(cContribs, 0, newContribs, aContribs.length, cContribs.length);\n              aContribs = newContribs;\n            }\n          }\n        }\n      }\n    }\n\n    launchInfo.contributors = aContribs;\n    return aContribs;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4952, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()"], "initializationStart": [64, 170], "initializationEnd": [79, 178], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 233, "focalAPIEnd": 244, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["populateAdapterList(list,List)"], "useStart": [304], "useEnd": [342], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/FrecherxDachs/eclipse-sse-modifications/tree/master/bundles/org.eclipse.wst.xsd.ui/src-adt-xsd/org/eclipse/wst/xsd/ui/internal/adapters/XSDSchemaAdapter.java", "rawCode": "  public List getDirectives(XSDSchema schema) {\n    List list = new ArrayList();\n    for (Iterator i = schema.getContents().iterator(); i.hasNext(); ) {\n      Object o = i.next();\n      if (o instanceof XSDSchemaDirective) {\n        list.add(o);\n      }\n    }\n    List adapterList = new ArrayList();\n    populateAdapterList(list, adapterList);\n    return adapterList;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4953, "initialization": ["List list = new ArrayList()", "Object e = getData()"], "initializationStart": [857, 2212], "initializationEnd": [872, 2230], "hasTryCatch": 1, "exceptionType": "CoreException", "exceptionHandlingCall": ["getMessage()", "logError(int,*,*)"], "tryExpressionStart": 2238, "tryExpressionEnd": 2242, "tryBlockStart": 2238, "tryBlockEnd": 3657, "catchExpressionStart": 3571, "catchExpressionEnd": 3595, "catchBlockStart": 3571, "catchBlockEnd": 3657, "exceptionHandlingCallStart": [3630, 3605], "exceptionHandlingCallEnd": [3644, 3648], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e instanceof IVirtualComponent||e instanceof IProject&&(IProject) e.hasNature(JavaCore.NATURE_ID,) && j2eeComponentSet.contains(e,)", "guardType": "IF {", "guardExpressionStart": 2421, "guardExpressionEnd": 2460, "guardBlockStart": 2421, "guardBlockEnd": 2505, "focalAPI": " = list.add(e)", "focalAPIStart": 2475, "focalAPIEnd": 2492, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(Object)", "list.get(int)"], "useStart": [3522, 3744], "useEnd": [3539, 3755], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dgiormov/web.fragment.fix/tree/master/plugins/org.eclipse.jst.j2ee.ui/j2ee_ui/org/eclipse/jst/j2ee/internal/AddModulestoEARPropertiesPage.java", "rawCode": "  public void refresh() {\n    if (availableComponentsViewer.getContentProvider() == null) {\n      return;\n    }\n    IWorkspaceRoot input = ResourcesPlugin.getWorkspace().getRoot();\n    availableComponentsViewer.setInput(input);\n    GridData data = new GridData(GridData.FILL_BOTH);\n    int numlines = Math.min(10, availableComponentsViewer.getTable().getItemCount());\n    data.heightHint = availableComponentsViewer.getTable().getItemHeight() * numlines;\n    availableComponentsViewer.getTable().setLayoutData(data);\n\n    // [Bug 238264] for all the jars in the cache temparaly list them in the grid\n    // until the user applys the changes\n    for (IVirtualComponent jarComponent : this.addedJARComponents) {\n      availableComponentsViewer.add(jarComponent);\n    }\n\n    TableItem[] items = availableComponentsViewer.getTable().getItems();\n    List list = new ArrayList();\n    // Object[] comps = getComponentsInEar();\n    List cpComps;\n    List cpLibComps = new LinkedList();\n    HashSet j2eeComponentSet = new HashSet();\n    HashSet j2eeLibComponentSet = new HashSet();\n    if (isVersion5) {\n      if (j2eeComponentList.isEmpty()) {\n        List comps = getComponentsInEar(false);\n        j2eeComponentList.addAll(comps);\n      }\n      if (j2eeLibElementList.isEmpty()) {\n        List comps = getComponentsInEar(true);\n        j2eeLibElementList.addAll(comps);\n      }\n      // get all Classpath contributions to the Ear\n      cpComps = getCPComponentsInEar(false);\n      j2eeComponentList.addAll(cpComps);\n      cpLibComps = getCPComponentsInEar(true);\n      j2eeLibElementList.addAll(cpLibComps);\n      for (int i = 0; i < j2eeLibElementList.size(); i++) {\n        j2eeLibComponentSet.add(j2eeLibElementList.get(i));\n      }\n\n    } else {\n      if (j2eeComponentList.isEmpty()) {\n        List comps = getComponentsInEar(false);\n        j2eeComponentList.addAll(comps);\n      }\n      // get all Classpath contributions to the Ear\n      cpComps = getCPComponentsInEar(false);\n      j2eeComponentList.addAll(cpComps);\n    }\n    for (int i = 0; i < j2eeComponentList.size(); i++) {\n      j2eeComponentSet.add(j2eeComponentList.get(i));\n    }\n\n    for (int i = 0; i < items.length; i++) {\n      Object element = items[i].getData();\n      try {\n        if (element instanceof IVirtualComponent\n            || (element instanceof IProject\n                && ((IProject) element).hasNature(JavaCore.NATURE_ID))) {\n          if (j2eeComponentSet.contains(element)) {\n            list.add(element);\n          }\n          boolean shouldBeDisabled = false;\n          if (element instanceof VirtualArchiveComponent) {\n            shouldBeDisabled = isPhysicallyAdded((VirtualArchiveComponent) element);\n            if (shouldBeDisabled) {\n              items[i].setChecked(true);\n              items[i].setGrayed(true);\n            }\n          }\n          if (isVersion5) {\n            DoubleCheckboxTableItem dcbItem = (DoubleCheckboxTableItem) items[i];\n            boolean secondEnabled = true;\n            if (element instanceof IVirtualComponent)\n              secondEnabled = !secondShouldBeDisabled((IVirtualComponent) element);\n            if (shouldBeDisabled) {\n              dcbItem.setSecondChecked(isInLibDir((VirtualArchiveComponent) element));\n              dcbItem.setSecondEnabled(false);\n            } else {\n              dcbItem.setSecondChecked(j2eeLibComponentSet.contains(element));\n              dcbItem.setSecondEnabled(secondEnabled);\n            }\n            if (j2eeLibComponentSet.contains(element)) list.add(element);\n          }\n        }\n      } catch (CoreException e) {\n        J2EEUIPlugin.logError(0, e.getMessage(), e);\n      }\n    }\n\n    for (int i = 0; i < list.size(); i++) availableComponentsViewer.setChecked(list.get(i), true);\n    GridData btndata =\n        new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_BEGINNING);\n    buttonColumn.setLayoutData(btndata);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4954, "initialization": ["List list = new ArrayList(int)"], "initializationStart": [123], "initializationEnd": [139], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 145, "focalAPIEnd": 166, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Context.setNodeSet(list)"], "useStart": [172], "useEnd": [196], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/geoquest/Public-GQ-Player-Android--1/tree/master/GQ_Android/libs/jaxen/jaxen-1.1.4/src/java/test/org/jaxen/test/XPathTestBase.java", "rawCode": "  private Context getContext(Object contextNode) {\n    Context context = new Context(getContextSupport());\n    List list = new ArrayList(1);\n    list.add(contextNode);\n    context.setNodeSet(list);\n    return context;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4955, "initialization": ["Object e = executeAndGetSingleValue(Connection,String)"], "initializationStart": [262], "initializationEnd": [336], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 342, "guardExpressionEnd": 367, "guardBlockStart": 342, "guardBlockEnd": 618, "focalAPI": " = list.add(e)", "focalAPIStart": 418, "focalAPIEnd": 448, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/netspective/sparx-2001/tree/master/Sparx/java/com/netspective/sparx/xif/db/policy/PostgreSQLDatabasePolicy.java", "rawCode": "  public Object handleAutoIncPreDmlExecute(\n      Connection conn,\n      ValueContext vc,\n      String seqOrTableName,\n      String autoIncColumnName,\n      List columnNames,\n      List columnValues)\n      throws SQLException {\n    Object autoIncValue =\n        executeAndGetSingleValue(conn, \"select nextval('\" + seqOrTableName + \"')\");\n    if (autoIncValue != null) {\n      columnNames.add(autoIncColumnName);\n      columnValues.add(autoIncValue);\n      return autoIncValue;\n    } else\n      throw new SQLException(\n          \"Unable to obtain next PostgreSQL sequence value from sequence '\" + seqOrTableName + \"'\");\n  }\n"}, {"dataset": "listAdd", "exampleID": 4956, "initialization": ["List list = new ArrayList()", "Object e = List.get(int)"], "initializationStart": [56, 140], "initializationEnd": [71, 165], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 173, "guardExpressionEnd": 197, "guardBlockStart": 173, "guardBlockEnd": 240, "focalAPI": " = list.add(e)", "focalAPIStart": 208, "focalAPIEnd": 231, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pillarone/risk-analytics-core/tree/master/src/groovy/org/pillarone/riskanalytics/core/parameterization/ComboBoxMatrixMultiDimensionalParameter.java", "rawCode": "  public List getHeadersAsObjects() {\n    List result = new ArrayList();\n    for (Object title : columnTitles) {\n      Object titleObject = comboBoxValues.get(title);\n      if (titleObject != null) {\n        result.add(titleObject);\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4957, "initialization": ["Object e = QuaxUti.funCallArg(Object,int)"], "initializationStart": [506], "initializationEnd": [529], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 539, "focalAPIEnd": 556, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(Object)"], "useStart": [585], "useEnd": [599], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/panbasten/BA/tree/master/mondrian/mondrian-model/src/main/java/com/tonbeller/jpivot/olap/query/Quax.java", "rawCode": "  /**\n   * add FunCall to list\n   *\n   * @param oFun\n   * @param list\n   */\n  private void funToList(Object oFun, List list) {\n    if (uti.isFunCallTo(oFun, \"Union\")) {\n      Object oArg0 = uti.funCallArg(oFun, 0);\n      Object oArg1 = uti.funCallArg(oFun, 1);\n      funToList(oArg0, list);\n      funToList(oArg1, list);\n    } else if (uti.isFunCallTo(oFun, \"{}\")) {\n      for (int i = 0; i < uti.funCallArgCount(oFun); i++) {\n        // member sets are resolved to single members\n        Object oMember = uti.funCallArg(oFun, i);\n        list.add(oMember);\n      }\n    } else {\n      list.add(oFun);\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4958, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()"], "initializationStart": [99, 252], "initializationEnd": [114, 263], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 310, "focalAPIEnd": 322, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(Object)"], "useStart": [496], "useEnd": [508], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mlundblad/bc-java/tree/master/prov/src/main/jdk1.3/org/bouncycastle/jce/provider/CertStoreCollectionSpi.java", "rawCode": "  public Collection engineGetCRLs(CRLSelector selector) throws CertStoreException {\n    List col = new ArrayList();\n    Iterator iter = params.getCollection().iterator();\n\n    if (selector == null) {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if (obj instanceof CRL) {\n          col.add(obj);\n        }\n      }\n    } else {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if ((obj instanceof CRL) && selector.match((CRL) obj)) {\n          col.add(obj);\n        }\n      }\n    }\n\n    return col;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4959, "initialization": ["List list = new ArrayList(*)", "Object e = List.get(int)"], "initializationStart": [361, 626], "initializationEnd": [400, 650], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.addAll(List)"], "configurationStart": [566], "configurationEnd": [589], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 705, "focalAPIEnd": 724, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.addAll(List)"], "useStart": [789], "useEnd": [812], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/KDReleng/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/src/org/eclipse/dltk/internal/ui/scriptview/WorkingSetDropAdapter.java", "rawCode": "  private void performWorkingSetReordering() {\n    WorkingSetModel model = fPackageExplorer.getWorkingSetModel();\n    List activeWorkingSets = new ArrayList(Arrays.asList(model.getActiveWorkingSets()));\n    int index = activeWorkingSets.indexOf(fWorkingSet);\n    if (index != -1) {\n      if (getCurrentLocation() == LOCATION_AFTER) index++;\n      List result = new ArrayList(activeWorkingSets.size());\n      List selected = new ArrayList(Arrays.asList(fElementsToAdds));\n      for (int i = 0; i < activeWorkingSets.size(); i++) {\n        if (i == index) {\n          result.addAll(selected);\n        }\n        Object element = activeWorkingSets.get(i);\n        if (!selected.contains(element)) {\n          result.add(element);\n        }\n      }\n      if (index == activeWorkingSets.size()) result.addAll(selected);\n      model.setActiveWorkingSets((IWorkingSet[]) result.toArray(new IWorkingSet[result.size()]));\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4960, "initialization": ["Object e = create(*,String)", "Object e = create(*,String)"], "initializationStart": [367, 521], "initializationEnd": [401, 551], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 608, "focalAPIEnd": 626, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DevBoost/EMFText/tree/master/Deprecated/org.emftext.runtime.antlr/src/org/antlr/runtime/tree/CommonTreeNodeStream.java", "rawCode": "  /**\n   * As we flatten the tree, we use UP, DOWN nodes to represent the tree structure. When debugging\n   * we need unique nodes so instantiate new ones when uniqueNavigationNodes is true.\n   */\n  protected void addNavigationNode(final int ttype) {\n    Object navNode = null;\n    if (ttype == Token.DOWN) {\n      if (hasUniqueNavigationNodes()) {\n        navNode = adaptor.create(Token.DOWN, \"DOWN\");\n      } else {\n        navNode = down;\n      }\n    } else {\n      if (hasUniqueNavigationNodes()) {\n        navNode = adaptor.create(Token.UP, \"UP\");\n      } else {\n        navNode = up;\n      }\n    }\n    nodes.add(navNode);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4961, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 146, "focalAPIEnd": 166, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bogeblad/infoglue/tree/master/src/java/org/infoglue/deliver/util/webservices/DynamicWebservice.java", "rawCode": "  /** */\n  private void addArgument(final String name, final QName type, final Object value) {\n    parameters.add(new Parameter(name, type));\n    arguments.add(value);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4962, "initialization": ["List list = new ArrayList(*)", "Object e = List.get(int)"], "initializationStart": [215, 368], "initializationEnd": [264, 381], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.add(String)"], "configurationStart": [754], "configurationEnd": [764], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 869, "focalAPIEnd": 879, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["AEMonitor.exit()"], "finallyExpressionStart": 939, "finallyExpressionEnd": 947, "finallyBlockStart": 939, "finallyBlockEnd": 978, "cleanUpCallStart": [956], "cleanUpCallEnd": [971], "url": "https://github.com/alevy/comet/tree/master/vuze/org/gudy/azureus2/core3/download/impl/DownloadManagerStateImpl.java", "rawCode": "  protected List getListAttributeSupport(String attribute_name) {\n    informWillRead(attribute_name);\n\n    try {\n      this_mon.enter();\n\n      List values = (List) attributes.get(attribute_name);\n\n      List res = new ArrayList(values != null ? values.size() : 0);\n\n      if (values != null) {\n\n        for (int i = 0; i < values.size(); i++) {\n\n          Object o = values.get(i);\n\n          if (o instanceof byte[]) {\n\n            byte[] bytes = (byte[]) o;\n\n            String s = null;\n\n            try {\n\n              s = StringInterner.intern(new String(bytes, Constants.DEFAULT_ENCODING));\n\n            } catch (UnsupportedEncodingException e) {\n\n              Debug.printStackTrace(e);\n            }\n\n            if (s != null) {\n              res.add(s);\n              values.set(i, s);\n            }\n          } else if (o instanceof String) {\n\n            res.add(o);\n          }\n        }\n      }\n\n      return (res);\n\n    } finally {\n\n      this_mon.exit();\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4963, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()"], "initializationStart": [347, 458], "initializationEnd": [362, 469], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "selector.match(e,)", "guardType": "IF {", "guardExpressionStart": 480, "guardExpressionEnd": 504, "guardBlockStart": 480, "guardBlockEnd": 540, "focalAPI": " = list.add(e)", "focalAPIStart": 517, "focalAPIEnd": 529, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rtyley/test-bc-java-cvsimport/tree/master/crypto/src/org/bouncycastle/util/CollectionStore.java", "rawCode": "  /**\n   * Return the matches in the collection for the passed in selector.\n   *\n   * @param selector the selector to match against.\n   * @return a possibly empty collection of matching objects.\n   */\n  public Collection getMatches(Selector selector) {\n    if (selector == null) {\n      return new ArrayList(_local);\n    } else {\n      List col = new ArrayList();\n      Iterator iter = _local.iterator();\n\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if (selector.match(obj)) {\n          col.add(obj);\n        }\n      }\n\n      return col;\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4964, "initialization": ["Object e = get(ISourceModule)", "List list = new ArrayList()"], "initializationStart": [122, 320], "initializationEnd": [159, 335], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["e.add(String)"], "configurationStart": [243], "configurationEnd": [275], "guardCondition": "!(e instanceof List) && e!=null", "guardType": "IF {", "guardExpressionStart": 169, "guardExpressionEnd": 188, "guardBlockStart": 169, "guardBlockEnd": 624, "focalAPI": " = list.add(e)", "focalAPIStart": 349, "focalAPIEnd": 365, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(String)", "put(ISourceModule,list)", "list.add(String)", "put(ISourceModule,list)"], "useStart": [379, 414, 537, 570], "useEnd": [400, 457, 558, 613], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/vjet.all/tree/master/dltk/core/org.eclipse.dltk.mod.core/search/org/eclipse/dltk/mod/core/mixin/MixinModel.java", "rawCode": "    void addInfo(ElementInfo info, ISourceModule module) {\n      if (info.object != null) {\n        final Object object = this.sourceModuleToObject.get(module);\n        if (object != null) {\n          if (object instanceof List) {\n            ((List) object).add(info.object);\n          } else {\n            List list = new ArrayList();\n            list.add(object);\n            list.add(info.object);\n            this.sourceModuleToObject.put(module, list);\n          }\n        } else {\n          List list = new ArrayList();\n          list.add(info.object);\n          this.sourceModuleToObject.put(module, list);\n        }\n      }\n    }\n"}, {"dataset": "listAdd", "exampleID": 4965, "initialization": ["List list = new ArrayList(int)"], "initializationStart": [403], "initializationEnd": [429], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(e instanceof ArrayList) && !(e==null)", "guardType": "IF {", "guardExpressionStart": 122, "guardExpressionEnd": 139, "guardBlockStart": 122, "guardBlockEnd": 174, "focalAPI": " = list.add(e)", "focalAPIStart": 435, "focalAPIEnd": 446, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/toddlipcon/jetty-hadoop-fix/tree/master/modules/util/src/main/java/org/mortbay/util/LazyList.java", "rawCode": "  /** Ensure the capcity of the underlying list. */\n  public static Object ensureSize(Object list, int initialSize) {\n    if (list == null) return new ArrayList(initialSize);\n    if (list instanceof ArrayList) {\n      ArrayList ol = (ArrayList) list;\n      if (ol.size() > initialSize) return ol;\n      ArrayList nl = new ArrayList(initialSize);\n      nl.addAll(ol);\n      return nl;\n    }\n    List l = new ArrayList(initialSize);\n    l.add(list);\n    return l;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4966, "initialization": ["List list = new ArrayList(*)", "Object e = Iterator.next()"], "initializationStart": [450, 555], "initializationEnd": [477, 564], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 604, "focalAPIEnd": 612, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(String)", "list.add(String)", "list.add(String)"], "useStart": [676, 957, 1237], "useEnd": [712, 993, 1278], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nmacs/lm3s-uclinux/tree/master/lib/classpath/java/security/cert/X509CRLSelector.java", "rawCode": "  /**\n   * Sets the issuer names criterion. Pass <code>null</code> to clear this value. CRLs matched by\n   * this selector must have an issuer name in this set.\n   *\n   * @param names The issuer names.\n   * @throws IOException If any of the elements in the collection is not a valid name.\n   */\n  public void setIssuerNames(Collection<?> names) throws IOException {\n    if (names == null) {\n      issuerNames = null;\n      return;\n    }\n    List l = new ArrayList(names.size());\n    for (Iterator it = names.iterator(); it.hasNext(); ) {\n      Object o = it.next();\n      if (o instanceof X500Principal) l.add(o);\n      else if (o instanceof String) {\n        try {\n          l.add(new X500Principal((String) o));\n        } catch (IllegalArgumentException iae) {\n          IOException ioe = new IOException(\"malformed name: \" + o);\n          ioe.initCause(iae);\n          throw ioe;\n        }\n      } else if (o instanceof byte[]) {\n        try {\n          l.add(new X500Principal((byte[]) o));\n        } catch (IllegalArgumentException iae) {\n          IOException ioe = new IOException(\"malformed name\");\n          ioe.initCause(iae);\n          throw ioe;\n        }\n      } else if (o instanceof InputStream) {\n        try {\n          l.add(new X500Principal((InputStream) o));\n        } catch (IllegalArgumentException iae) {\n          IOException ioe = new IOException(\"malformed name\");\n          ioe.initCause(iae);\n          throw ioe;\n        }\n      } else\n        throw new IOException(\"not a valid name: \" + (o != null ? o.getClass().getName() : \"null\"));\n    }\n    issuerNames = l;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4967, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 151, "focalAPIEnd": 178, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cagrid-core/tree/master/caGrid/projects/gts/src/gov/nih/nci/cagrid/gts/service/TrustedAuthoritySelectStatement.java", "rawCode": "  public void addWhereField(String field, String operator, Object value) {\n    this.whereFields.add(field);\n    this.whereOperators.add(operator);\n    this.whereValues.add(value);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4968, "initialization": ["List list = new ArrayList(int)"], "initializationStart": [506], "initializationEnd": [522], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 386, "guardExpressionEnd": 433, "guardBlockStart": 386, "guardBlockEnd": 749, "focalAPI": " = list.add(e)", "focalAPIStart": 530, "focalAPIEnd": 557, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new RuntimeTypeConverter(list,boolean,List,boolean)"], "useStart": [631], "useEnd": [695], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Teiid-Designer/teiid-designer/tree/master/plugins/org.teiid.designer.transformation/src/org/teiid/designer/transformation/util/RuntimeTypeConverter.java", "rawCode": "  /**\n   * Static Method to determine if the runtime types of two items exactly match.\n   *\n   * @param primaryObj the primary Object\n   * @param secondaryObj the secondary Object\n   * @return <code>true</code> if items match; <code>false</code> otherwise.\n   */\n  public static boolean isExplicitMatch(Object primaryObj, Object secondaryObj) {\n    boolean isExplicitMatch = false;\n    if (primaryObj != null && secondaryObj != null) {\n      List primaryList = new ArrayList(1);\n      List secondaryList = new ArrayList(1);\n      primaryList.add(primaryObj);\n      secondaryList.add(secondaryObj);\n      RuntimeTypeConverter rtc = new RuntimeTypeConverter(primaryList, true, secondaryList, true);\n      isExplicitMatch = rtc.isExplicitMatch();\n    }\n    return isExplicitMatch;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4969, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()"], "initializationStart": [109, 234], "initializationEnd": [124, 242], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 290, "focalAPIEnd": 309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new MultiElementRemovedEvent(*,list)"], "useStart": [450], "useEnd": [492], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chanwit/groovy/tree/master/src/main/groovy/util/ObservableList.java", "rawCode": "  public boolean retainAll(Collection c) {\n    if (c == null) {\n      return false;\n    }\n\n    List values = new ArrayList();\n    if (c != null) {\n      for (Iterator i = delegate.iterator(); i.hasNext(); ) {\n        Object element = i.next();\n        if (!c.contains(element)) {\n          values.add(element);\n        }\n      }\n    }\n\n    boolean success = delegate.retainAll(c);\n    if (success && !values.isEmpty()) {\n      pcs.firePropertyChange(new MultiElementRemovedEvent(this, values));\n    }\n\n    return success;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4970, "initialization": ["Object e = HashMap.get(IResource)", "List list = getNewList()"], "initializationStart": [303, 529], "initializationEnd": [332, 541], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e!=item && !(e==null) && e instanceof Item", "guardType": "IF {", "guardExpressionStart": 340, "guardExpressionEnd": 368, "guardBlockStart": 340, "guardBlockEnd": 809, "focalAPI": " = list.add(e)", "focalAPIStart": 553, "focalAPIEnd": 578, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(Item)", "HashMap.put(IResource,list)", "list.add(Item)"], "useStart": [590, 616, 776], "useEnd": [604, 651, 790], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/vjet.all/tree/master/dltk/core/org.eclipse.dltk.mod.ui/src/org/eclipse/dltk/mod/ui/viewsupport/ResourceToItemsMapper.java", "rawCode": "  /**\n   * Adds a new item to the map.\n   *\n   * @param element Element to map\n   * @param item The item used for the element\n   */\n  public void addToMap(Object element, Item item) {\n    IResource resource = getCorrespondingResource(element);\n    if (resource != null) {\n      Object existingMapping = fResourceToItem.get(resource);\n      if (existingMapping == null) {\n        fResourceToItem.put(resource, item);\n      } else if (existingMapping instanceof Item) {\n        if (existingMapping != item) {\n          List list = getNewList();\n          list.add(existingMapping);\n          list.add(item);\n          fResourceToItem.put(resource, list);\n        }\n      } else { // List\n        List list = (List) existingMapping;\n        if (!list.contains(item)) {\n          list.add(item);\n        }\n      }\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4971, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()"], "initializationStart": [260, 376], "initializationEnd": [275, 385], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 395, "guardExpressionEnd": 409, "guardBlockStart": 395, "guardBlockEnd": 419, "focalAPI": " = list.add(e)", "focalAPIStart": 410, "focalAPIEnd": 418, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DevBoost/EMFText/tree/master/Deprecated/org.emftext.sdk.antlr3_2_0/src-sdk/org/antlr/stringtemplate/language/ASTExpr.java", "rawCode": "  /** Return a new list w/o null values. */\n  public Object strip(Object attribute) {\n    if (attribute == null) {\n      return null;\n    }\n    attribute = convertAnythingIteratableToIterator(attribute);\n    if (attribute instanceof Iterator) {\n      List a = new ArrayList();\n      Iterator it = (Iterator) attribute;\n      while (it.hasNext()) {\n        Object o = (Object) it.next();\n        if (o != null) a.add(o);\n      }\n      return a;\n    }\n    return attribute; // strip(x)==x when x single-valued attribute\n  }\n"}, {"dataset": "listAdd", "exampleID": 4972, "initialization": ["List list = new ArrayList()"], "initializationStart": [145], "initializationEnd": [160], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 168, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jeffbrown/grailsnolib/tree/master/grails-plugin-controllers/src/main/groovy/org/codehaus/groovy/grails/web/metaclass/BindDynamicMethod.java", "rawCode": "  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private List convertToListIfString(Object o) {\n    if (o instanceof String) {\n      List list = new ArrayList();\n      list.add(o);\n      o = list;\n    }\n    return (List) o;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4973, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()"], "initializationStart": [146, 272], "initializationEnd": [161, 281], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 378, "focalAPIEnd": 403, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setResult(list)"], "useStart": [424], "useEnd": [450], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/rap/tree/master/bundles/org.eclipse.rap.ui.workbench/Eclipse UI/org/eclipse/ui/dialogs/FilteredItemsSelectionDialog.java", "rawCode": "  protected void computeResult() {\n\n    List selectedElements = ((StructuredSelection) list.getSelection()).toList();\n\n    List objectsToReturn = new ArrayList();\n\n    Object item = null;\n\n    for (Iterator it = selectedElements.iterator(); it.hasNext(); ) {\n      item = it.next();\n\n      if (!(item instanceof ItemsListSeparator)) {\n        accessedHistoryItem(item);\n        objectsToReturn.add(item);\n      }\n    }\n\n    setResult(objectsToReturn);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4974, "initialization": ["List list = getDataList()"], "initializationStart": [209], "initializationEnd": [222], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.add(int,Object)"], "configurationStart": [275], "configurationEnd": [298], "guardCondition": "!(idx<list.size()) && !(e==null)", "guardType": "IF {", "guardExpressionStart": 41, "guardExpressionEnd": 58, "guardBlockStart": 41, "guardBlockEnd": 66, "focalAPI": " = list.add(e)", "focalAPIStart": 319, "focalAPIEnd": 337, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.size()"], "useStart": [351], "useEnd": [366], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ramesesinc/shared/tree/master/client/client-ui-extended/src/com/rameses/osiris2/common/ListController.java", "rawCode": "  public void addItem(Object data) {\n    if (data == null) return;\n\n    int idx = -1;\n    try {\n      idx = getListItems().indexOf(getSelectedItem());\n    } catch (Exception ign) {;\n    }\n\n    List dataList = getDataList();\n    if (idx >= 0 && idx < dataList.size()) {\n      dataList.add(idx, data);\n    } else {\n      dataList.add(data);\n      idx = dataList.size() - 1;\n    }\n\n    refresh();\n    setSelectedItem(idx);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4975, "initialization": ["List list = new ArrayList()"], "initializationStart": [405], "initializationEnd": [420], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.add(String)"], "configurationStart": [575], "configurationEnd": [587], "guardCondition": "!(e==null)", "guardType": "IF {", "guardExpressionStart": 543, "guardExpressionEnd": 562, "guardBlockStart": 543, "guardBlockEnd": 643, "focalAPI": " = list.add(e)", "focalAPIStart": 616, "focalAPIEnd": 632, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["List.add(list)"], "useStart": [658], "useEnd": [672], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lqjliu/ghlh/tree/master/src/main/java/com/common/db/DBAgentOO.java", "rawCode": "  public List selectDataList(String sql) throws Exception {\n    // System.outprintln(\"sql = \" + sql);\n    Connection conn = null;\n    if (this.isInTransaction) {\n      conn = this.connection;\n    } else {\n      conn = this.getConnection();\n    }\n    Statement st = conn.createStatement();\n    ResultSet rs = st.executeQuery(sql);\n    List data = new ArrayList();\n    while (rs.next()) {\n      List temp = new ArrayList();\n      for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {\n        Object o_temp = rs.getObject(i + 1);\n        if (o_temp == null) {\n          temp.add(\"\");\n        } else {\n          temp.add(o_temp);\n        }\n      }\n      data.add(temp);\n    }\n    rs.close();\n    st.close();\n    return data;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4976, "initialization": ["List list = new ArrayList()", "Object e = List.get(int)"], "initializationStart": [927, 1706], "initializationEnd": [942, 1716], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 1904, "focalAPIEnd": 1931, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.addAll(List)"], "useStart": [2102], "useEnd": [2129], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emmanuelbernard/hibernate-core-ogm/tree/master/hibernate-core/src/main/java/org/hibernate/engine/query/spi/HQLQueryPlan.java", "rawCode": "  public List performList(QueryParameters queryParameters, SessionImplementor session)\n      throws HibernateException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"Find: \" + getSourceQuery());\n      queryParameters.traceParameters(session.getFactory());\n    }\n    boolean hasLimit =\n        queryParameters.getRowSelection() != null\n            && queryParameters.getRowSelection().definesLimits();\n    boolean needsLimit = hasLimit && translators.length > 1;\n    QueryParameters queryParametersToUse;\n    if (needsLimit) {\n      LOG.needsLimit();\n      RowSelection selection = new RowSelection();\n      selection.setFetchSize(queryParameters.getRowSelection().getFetchSize());\n      selection.setTimeout(queryParameters.getRowSelection().getTimeout());\n      queryParametersToUse = queryParameters.createCopyUsing(selection);\n    } else {\n      queryParametersToUse = queryParameters;\n    }\n\n    List combinedResults = new ArrayList();\n    IdentitySet distinction = new IdentitySet();\n    int includedCount = -1;\n    translator_loop:\n    for (int i = 0; i < translators.length; i++) {\n      List tmp = translators[i].list(session, queryParametersToUse);\n      if (needsLimit) {\n        // NOTE : firstRow is zero-based\n        int first =\n            queryParameters.getRowSelection().getFirstRow() == null\n                ? 0\n                : queryParameters.getRowSelection().getFirstRow().intValue();\n        int max =\n            queryParameters.getRowSelection().getMaxRows() == null\n                ? -1\n                : queryParameters.getRowSelection().getMaxRows().intValue();\n        final int size = tmp.size();\n        for (int x = 0; x < size; x++) {\n          final Object result = tmp.get(x);\n          if (!distinction.add(result)) {\n            continue;\n          }\n          includedCount++;\n          if (includedCount < first) {\n            continue;\n          }\n          combinedResults.add(result);\n          if (max >= 0 && includedCount > max) {\n            // break the outer loop !!!\n            break translator_loop;\n          }\n        }\n      } else {\n        combinedResults.addAll(tmp);\n      }\n    }\n    return combinedResults;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4977, "initialization": ["List list = new LinkedList()", "Object e = Iterator.next()"], "initializationStart": [45, 154], "initializationEnd": [61, 164], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 219, "focalAPIEnd": 233, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/gmf-runtime/tree/master/org.eclipse.gmf.examples.runtime.diagram.logic/src/org/eclipse/gmf/examples/runtime/diagram/logic/internal/commands/ModifyPortsColorCommand.java", "rawCode": "  private List getPorts() {\n    List ports = new LinkedList();\n    for (Iterator itr = ep.getChildren().iterator(); itr.hasNext(); ) {\n      Object obj = itr.next();\n      if (obj instanceof TerminalEditPart) {\n        ports.add(obj);\n      }\n    }\n    return ports;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4978, "initialization": ["List list = new ArrayList(int)", "Object e = List.get(int)"], "initializationStart": [259, 378], "initializationEnd": [294, 397], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 405, "guardExpressionEnd": 425, "guardBlockStart": 405, "guardBlockEnd": 452, "focalAPI": " = list.add(e)", "focalAPIStart": 426, "focalAPIEnd": 451, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/vjet.all/tree/master/eclipse/plugins/org.eclipse.vjet.eclipse.ui/src/org/eclipse/vjet/eclipse/internal/ui/editor/semantic/highlighting/VjoSemanticHighlightingReconciler.java", "rawCode": "  /**\n   * Reconcile positions based on the AST subtrees\n   *\n   * @param subtrees the AST subtrees\n   */\n  private void reconcilePositions(IJstNode jstNode) {\n    jstNode.accept(fCollector);\n    List oldPositions = fRemovedPositions;\n    List newPositions = new ArrayList(fNOfRemovedPositions);\n    for (int i = 0, n = oldPositions.size(); i < n; i++) {\n      Object current = oldPositions.get(i);\n      if (current != null) newPositions.add(current);\n    }\n    fRemovedPositions = newPositions;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4979, "initialization": ["List list = getSelectedElements()"], "initializationStart": [290], "initializationEnd": [311], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "list.remove(oldElement,)", "guardType": "IF {", "guardExpressionStart": 321, "guardExpressionEnd": 353, "guardBlockStart": 321, "guardBlockEnd": 401, "focalAPI": " = list.add(e)", "focalAPIStart": 366, "focalAPIEnd": 390, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new StructuredSelection(list)"], "useStart": [451], "useEnd": [484], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/panchenko/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/src/org/eclipse/dltk/internal/ui/wizards/dialogfields/ListDialogField.java", "rawCode": "  /** Replaces an element. */\n  public void replaceElement(E oldElement, E newElement) throws IllegalArgumentException {\n    int idx = fElements.indexOf(oldElement);\n    if (idx != -1) {\n      fElements.set(idx, newElement);\n      if (isOkToUse(fTableControl)) {\n        List<E> selected = getSelectedElements();\n        if (selected.remove(oldElement)) {\n          selected.add(newElement);\n        }\n        fTable.refresh();\n        selectElements(new StructuredSelection(selected));\n      }\n      dialogFieldChanged();\n    } else {\n      throw new IllegalArgumentException();\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4980, "initialization": ["Object e = Hashtable.get(String)", "List list = new Vector()"], "initializationStart": [268, 375], "initializationEnd": [285, 387], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(e==null) && e instanceof String", "guardType": "IF {", "guardExpressionStart": 291, "guardExpressionEnd": 309, "guardBlockStart": 291, "guardBlockEnd": 322, "focalAPI": " = list.add(e)", "focalAPIStart": 395, "focalAPIEnd": 408, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.addAll(List)"], "useStart": [503], "useEnd": [526], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta07/kernel-util/src/main/java/org/sakaiproject/util/BaseResourceProperties.java", "rawCode": "  /**\n   * Access a named property as a List of (String), good for single or multi-valued properties.\n   *\n   * @param name The property name.\n   * @return the property value, or null if not found.\n   */\n  public List getPropertyList(String name) {\n    Object value = m_props.get(name);\n    if (value == null) return null;\n\n    if (value instanceof String) {\n      List rv = new Vector();\n      rv.add(value);\n      return rv;\n    } else if (value instanceof List) {\n      List rv = new Vector();\n      rv.addAll((List) value);\n      return rv;\n    }\n\n    return null;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4981, "initialization": ["Object e = List.get(int)", "List list = new ArrayList()"], "initializationStart": [835, 1289], "initializationEnd": [854, 1304], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 1314, "focalAPIEnd": 1333, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(Object)"], "useStart": [1343], "useEnd": [1362], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdeolive/geotools-old/tree/master/modules/library/main/src/main/java/org/geotools/feature/visitor/MedianVisitor.java", "rawCode": "  /**\n   * Given a list, determines the median value and returns it. For numbers, the middle value is\n   * returned, or the average of the two middle numbers if there are an even number of elements. For\n   * non-numeric values (strings, etc) where the number of elements is even, a list containing the\n   * two middle elements is returned.\n   *\n   * @param list an arraylist which is to be sorted and its median extracted\n   * @return the median\n   */\n  private static Object findMedian(List list) {\n    if (list.size() < 1) {\n      return null;\n    }\n    Object median;\n    Collections.sort(list);\n\n    int index = -1;\n    index = (int) list.size() / 2;\n\n    if ((list.size() % 2) == 0) {\n      // even number of elements, so we must average the 2 middle ones, or\n      // return a list for non-numeric elements\n      Object input1 = list.get(index - 1);\n      Object input2 = list.get(index);\n\n      if ((input1 instanceof Number) && (input2 instanceof Number)) {\n        Number num1 = (Number) input1;\n        Number num2 = (Number) input2;\n        Number[] numbers = new Number[2];\n        numbers[0] = num1;\n        numbers[1] = num2;\n        median = CalcUtil.average(numbers);\n      } else { // NaN\n        // return a list containing the two middle elements\n        List newList = new ArrayList();\n        newList.add(input1);\n        newList.add(input2);\n        median = newList;\n      }\n    } else {\n      // an odd number of elements are in the list, so we simply return\n      // the one in the middle, which we've already calculated the index\n      // for.\n      median = list.get(index);\n    }\n    return median;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4982, "initialization": ["Object e = create(*,String)", "Object e = create(*,String)"], "initializationStart": [367, 521], "initializationEnd": [401, 551], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 608, "focalAPIEnd": 626, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DevBoost/EMFText/tree/master/Core/Commons/org.emftext.commons.antlr3_4_0/src/org/antlr/runtime3_4_0/tree/BufferedTreeNodeStream.java", "rawCode": "  /**\n   * As we flatten the tree, we use UP, DOWN nodes to represent the tree structure. When debugging\n   * we need unique nodes so instantiate new ones when uniqueNavigationNodes is true.\n   */\n  protected void addNavigationNode(final int ttype) {\n    Object navNode = null;\n    if (ttype == Token.DOWN) {\n      if (hasUniqueNavigationNodes()) {\n        navNode = adaptor.create(Token.DOWN, \"DOWN\");\n      } else {\n        navNode = down;\n      }\n    } else {\n      if (hasUniqueNavigationNodes()) {\n        navNode = adaptor.create(Token.UP, \"UP\");\n      } else {\n        navNode = up;\n      }\n    }\n    nodes.add(navNode);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4983, "initialization": ["Object e = Map.get(String)", "List list = new LinkedList()"], "initializationStart": [879, 934], "initializationEnd": [907, 950], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 960, "focalAPIEnd": 987, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(String)", "Map.put(String,list)"], "useStart": [997, 1035], "useEnd": [1025, 1074], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/frenchc/jetm/tree/master/modules/jetm-core/src/main/java/etm/core/configuration/PropertyConfig.java", "rawCode": "  public void addProperty(String propertyName, String propertyValue) {\n    if (propertyValue.startsWith(\"${\") && propertyValue.endsWith(\"}\")) {\n      String systemKey = propertyValue.substring(2, propertyValue.length() - 1);\n      propertyValue = System.getProperty(systemKey, propertyValue);\n    }\n\n    if (properties == null) {\n      properties = new HashMap();\n    }\n    int dotIndex = propertyName.indexOf(\".\");\n    if (dotIndex > 0) {\n      String name = propertyName.substring(0, dotIndex);\n      String key = propertyName.substring(dotIndex + 1);\n      if (properties.containsKey(name)) {\n        ((Map) properties.get(name)).put(key, propertyValue);\n      } else {\n        Map map = new HashMap();\n        map.put(key, propertyValue);\n        properties.put(name, map);\n      }\n    } else {\n      if (properties.containsKey(propertyName)) {\n        Object currentValue = properties.get(propertyName);\n        List valueList = new LinkedList();\n        valueList.add(currentValue);\n        valueList.add(propertyValue);\n        properties.put(propertyName, valueList);\n      } else {\n        properties.put(propertyName, propertyValue);\n      }\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4984, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 52, "focalAPIEnd": 82, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/rap/tree/master/tests/org.eclipse.rap.ui.tests/Eclipse JFace Tests/org/eclipse/jface/tests/viewers/CheckStateProviderTestsUtil.java", "rawCode": "    public boolean isGrayed(Object element) {\n      isGrayedInvokedOn.add(element);\n      return true;\n    }\n"}, {"dataset": "listAdd", "exampleID": 4985, "initialization": ["List list = new ArrayList()", "Object e = JavaEEBinaryComponentHelper.getPrimaryRootObject()"], "initializationStart": [262, 1053], "initializationEnd": [277, 1082], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "e!=null", "guardType": "IF {", "guardExpressionStart": 1100, "guardExpressionEnd": 1125, "guardBlockStart": 1100, "guardBlockEnd": 1196, "focalAPI": " = list.add(e)", "focalAPIStart": 1146, "focalAPIEnd": 1177, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new J2EEBinaryModulesItemProvider(Application,*,list)"], "useStart": [1511], "useEnd": [1585], "hasFinally": 1, "cleanUpCall": ["JavaEEBinaryComponentHelper.dispose()"], "finallyExpressionStart": 1213, "finallyExpressionEnd": 1221, "finallyBlockStart": 1213, "finallyBlockEnd": 1330, "cleanUpCallStart": [1279], "cleanUpCallEnd": [1295], "url": "https://github.com/dgiormov/javaee.wtp/tree/master/plugins/org.eclipse.jst.j2ee.ui/j2ee_ui/org/eclipse/jst/j2ee/internal/provider/ModulesItemProvider.java", "rawCode": "  protected List initChildren(Object object) {\n    localChildren = new ArrayList();\n    Application app = (Application) getParent();\n    IVirtualComponent ear = ComponentUtilities.findComponent(app);\n    List modules = app.getModules();\n    List binaryModules = new ArrayList();\n    IVirtualReference[] refs = ear.getReferences();\n    for (int i = 0; i < modules.size(); i++) {\n      Module module = (Module) modules.get(i);\n      String moduleURI = module.getUri();\n      boolean foundBinary = false;\n      if (moduleURI != null) {\n        String moduleName = new Path(moduleURI).lastSegment();\n        for (int j = 0; j < refs.length && !foundBinary; j++) {\n          IVirtualComponent component = refs[j].getReferencedComponent();\n          if (component.isBinary()) {\n            if (refs[j].getArchiveName().equals(moduleName)) {\n              foundBinary = true;\n              JavaEEBinaryComponentHelper helper = null;\n              try {\n                helper = new JavaEEBinaryComponentHelper(component);\n                Object binaryModule = helper.getPrimaryRootObject();\n                if (binaryModule != null) {\n                  binaryModules.add(binaryModule);\n                }\n              } finally {\n                if (helper != null) {\n                  helper.dispose();\n                }\n              }\n            }\n          }\n        }\n      }\n      if (!foundBinary) {\n        localChildren.add(module);\n      }\n    }\n\n    if (!binaryModules.isEmpty()) {\n      localChildren.add(new J2EEBinaryModulesItemProvider(app, getAdapterFactory(), binaryModules));\n    }\n\n    return localChildren;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4986, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["e.toString()"], "configurationStart": [547], "configurationEnd": [559], "guardCondition": "!(e instanceof Raw) && !(e==null)", "guardType": "IF {", "guardExpressionStart": 468, "guardExpressionEnd": 482, "guardBlockStart": 468, "guardBlockEnd": 1442, "focalAPI": " = list.add(e)", "focalAPIStart": 989, "focalAPIEnd": 1003, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.size()"], "useStart": [1281], "useEnd": [1295], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/commons/tree/master/openjpa-2.2.0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java", "rawCode": "  /**\n   * Append a user parameter value for a specific column. User parameters are marked as opposed to\n   * the parameters inserted by the internal runtime system. This helps to reuse the buffer by\n   * reparmeterizing it with new set of user parameters while the 'internal' parameters remain\n   * unchanged.\n   *\n   * @param userParam if non-null, designates a 'user' parameter.\n   */\n  public SQLBuffer appendValue(Object o, Column col, Parameter userParam) {\n    if (o == null) _sql.append(\"NULL\");\n    else if (o instanceof Raw) _sql.append(o.toString());\n    else {\n      _sql.append(PARAMETER_TOKEN);\n\n      // initialize param and col lists; we hold off on col list until\n      // we get the first non-null col\n      if (_params == null) _params = new ArrayList();\n      if (_userParams == null) _userParams = new ArrayList();\n      if (col != null && _cols == null) {\n        _cols = new ArrayList();\n        while (_cols.size() < _params.size()) _cols.add(null);\n      }\n\n      _params.add(o);\n      if (userParam != null) {\n        Object param = userParam;\n        if (userParam instanceof CollectionParam) param = ((CollectionParam) userParam).clone();\n        _userParams.add(param);\n        if (_userIndex == null) _userIndex = new ArrayList();\n        int index = _params.size() - 1;\n        _userIndex.add(index);\n        _userIndex.add(param);\n      } else _userParams.add(o);\n      if (_cols != null) _cols.add(col);\n    }\n    return this;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4987, "initialization": ["Object e = MappedField.getDbObjectValue(DBObject)", "List list = new BasicDBList()"], "initializationStart": [384, 553], "initializationEnd": [413, 570], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(e instanceof List) && e!=null", "guardType": "IF {", "guardExpressionStart": 419, "guardExpressionEnd": 437, "guardBlockStart": 419, "guardBlockEnd": 1143, "focalAPI": " = list.add(e)", "focalAPIStart": 580, "focalAPIEnd": 597, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/allanbank/morphia-async/tree/master/morphia/src/main/java/com/google/code/morphia/mapping/EmbeddedMapper.java", "rawCode": "  private void readCollection(\n      final DBObject dbObject,\n      final MappedField mf,\n      final Object entity,\n      EntityCache cache,\n      Mapper mapr) {\n    // multiple documents in a List\n    Collection values =\n        mf.isSet()\n            ? mapr.getOptions().objectFactory.createSet(mf)\n            : mapr.getOptions().objectFactory.createList(mf);\n\n    Object dbVal = mf.getDbObjectValue(dbObject);\n    if (dbVal != null) {\n\n      List dbVals = null;\n      if (dbVal instanceof List) dbVals = (List) dbVal;\n      else {\n        dbVals = new BasicDBList();\n        dbVals.add(dbVal);\n      }\n\n      for (Object o : dbVals) {\n\n        DBObject dbObj = (DBObject) o;\n        Object newEntity = null;\n\n        if (dbObj != null) {\n          // run converters\n          if (mapr.converters.hasSimpleValueConverter(mf)\n              || mapr.converters.hasSimpleValueConverter(mf.getSubClass()))\n            newEntity = mapr.converters.decode(mf.getSubClass(), dbObj, mf);\n          else {\n            newEntity = readMapOrCollectionOrEntity(dbObj, mf, cache, mapr);\n          }\n        }\n\n        values.add(newEntity);\n      }\n    }\n    if (values.size() > 0) {\n      if (mf.getType().isArray()) {\n        mf.setFieldValue(\n            entity,\n            ReflectionUtils.convertToArray(mf.getSubClass(), ReflectionUtils.iterToList(values)));\n      } else {\n        mf.setFieldValue(entity, values);\n      }\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 4988, "initialization": ["List list = new ArrayList()", "Object e = ListIterator.next()"], "initializationStart": [283, 397], "initializationEnd": [298, 406], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 468, "focalAPIEnd": 488, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/gmf-runtime/tree/master/org.eclipse.gmf.examples.runtime.diagram.logic/src/org/eclipse/gmf/examples/runtime/diagram/logic/internal/editpolicies/CircuitCompartmentCanonicalEditPolicy.java", "rawCode": "  protected List getSemanticChildrenList() {\n    EObject modelRef = resolveSemanticElement();\n\n    Circuit circuitElement = (Circuit) modelRef;\n    if (circuitElement == null) return Collections.EMPTY_LIST;\n    List allChildren = circuitElement.getChildren();\n    List ledElements = new ArrayList();\n\n    ListIterator li = allChildren.listIterator();\n    while (li.hasNext()) {\n      Object obj = li.next();\n      if (obj instanceof Element && !(obj instanceof Wire)) ledElements.add(obj);\n    }\n\n    return ledElements;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4989, "initialization": ["Object e = List.get(int)", "List list = new ArrayList(int)"], "initializationStart": [1042, 1308], "initializationEnd": [1072, 1324], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.add(Integer)"], "configurationStart": [1336], "configurationEnd": [1349], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 1361, "focalAPIEnd": 1375, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ArrayList.add(list)"], "useStart": [1387], "useEnd": [1403], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_dalvik/tree/master/libcore/security/src/main/java/java/security/cert/X509CertSelector.java", "rawCode": "  /**\n   * Returns the criterion for subject alternative names.\n   *\n   * <p>the certificate must contain all or at least one of the specified subject alternative names.\n   * The behavior is specified by {@link #getMatchAllSubjectAltNames}.\n   *\n   * <p>The subject alternative names is a collection with an entry for each name included in the\n   * criterion. The name is specified as a {@code List}, the first entry is an {@code Integer}\n   * specifying the name type (0-8), the second entry is byte array specifying the name in ASN.1 DER\n   * encoded form)\n   *\n   * @return the names collection or {@code null} if none specified.\n   * @since Android 1.0\n   */\n  public Collection<List<?>> getSubjectAlternativeNames() {\n    if (subjectAltNames == null) {\n      return null;\n    }\n    ArrayList result = new ArrayList();\n    for (int tag = 0; tag < 9; tag++) {\n      if (subjectAltNames[tag] != null) {\n        Integer teg = new Integer(tag);\n        for (int name = 0; name < subjectAltNames[tag].size(); name++) {\n          Object neim = subjectAltNames[tag].get(name);\n          if (neim instanceof byte[]) {\n            byte[] arr_neim = (byte[]) neim;\n            neim = new byte[arr_neim.length];\n            System.arraycopy(arr_neim, 0, neim, 0, arr_neim.length);\n          }\n          List list = new ArrayList(2);\n          list.add(teg);\n          list.add(neim);\n          result.add(list);\n        }\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4990, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 70, "focalAPIEnd": 88, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Teiid-Designer/teiid-designer/tree/master/plugins/org.teiid.designer.diagram.ui/src/org/teiid/designer/diagram/ui/layout/DiagramLayout.java", "rawCode": "  public void add(Object newNode) {\n    if (!nodes.contains(newNode)) nodes.add(newNode);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4991, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 94, "focalAPIEnd": 114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/saschaiseli/opentrainingcenter/tree/master/mockito/org/mockito/internal/listeners/CollectCreatedMocks.java", "rawCode": "  public void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings) {\n    toBeFilled.add(mock);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4992, "initialization": ["Object e = IStructuredSelection.getFirstElement()", "List list = new ArrayList()"], "initializationStart": [465, 565], "initializationEnd": [492, 580], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 586, "focalAPIEnd": 605, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["handleResult(list,*,*)"], "useStart": [743], "useEnd": [830], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AmanziTel/awe-rdt/tree/master/org.rubypeople.rdt.ui/src/org/rubypeople/rdt/internal/corext/buildpath/EditFiltersOperation.java", "rawCode": "  /**\n   * Method which runs the actions with a progress monitor.<br>\n   * This operation requires the following query:\n   * <li>IInclusionExclusionQuery\n   *\n   * @param monitor a progress monitor, can be <code>null</code>\n   */\n  public void run(IProgressMonitor monitor) throws InvocationTargetException {\n    EditFilterAction action = new EditFilterAction();\n    IStructuredSelection selection = fCPInformationProvider.getSelection();\n    Object firstElement = selection.getFirstElement();\n    action.selectionChanged(selection);\n    action.run();\n    List l = new ArrayList();\n    l.add(firstElement);\n    if (fListener != null) {\n      List entries = action.getCPListElements();\n      fListener.classpathEntryChanged(entries);\n    }\n    fCPInformationProvider.handleResult(l, null, ILoadpathInformationProvider.EDIT_FILTERS);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4993, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 48, "focalAPIEnd": 64, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jacksonicson/twospot/tree/master/3party/apache-xmlrpc-3.1.2/apache-xmlrpc-3.1.2-src/common/src/main/java/org/apache/xmlrpc/parser/ObjectArrayParser.java", "rawCode": "  protected void addResult(Object pValue) {\n    list.add(pValue);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4994, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()"], "initializationStart": [70, 172], "initializationEnd": [85, 181], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.add(String)"], "configurationStart": [249], "configurationEnd": [312], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 325, "focalAPIEnd": 348, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["SimpleFeatureCollection.containsAll(list)"], "useStart": [367], "useEnd": [408], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/boundlessgeo/geotools-2.7.x/tree/master/modules/plugin/feature-pregeneralized/src/main/java/org/geotools/data/gen/PreGeneralizedFeatureCollection.java", "rawCode": "  public boolean containsAll(Collection coll) {\n    List searchColl = new ArrayList();\n    Iterator it = coll.iterator();\n    while (it.hasNext()) {\n      Object feature = it.next();\n      if (feature instanceof PreGeneralizedSimpleFeature)\n        searchColl.add(((PreGeneralizedSimpleFeature) feature).feature);\n      else searchColl.add(feature);\n    }\n    return backendCollection.containsAll(searchColl);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4995, "initialization": ["List list = new ArrayList()", "Object e = Iterator.next()"], "initializationStart": [108, 261], "initializationEnd": [123, 272], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 327, "focalAPIEnd": 339, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.add(Object)"], "useStart": [529], "useEnd": [541], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ripple/ripple-lib-java/tree/master/ripple-bouncycastle/src/main/java/org/ripple/bouncycastle/jce/provider/CertStoreCollectionSpi.java", "rawCode": "  public Collection engineGetCertificates(CertSelector selector) throws CertStoreException {\n    List col = new ArrayList();\n    Iterator iter = params.getCollection().iterator();\n\n    if (selector == null) {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if (obj instanceof Certificate) {\n          col.add(obj);\n        }\n      }\n    } else {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if ((obj instanceof Certificate) && selector.match((Certificate) obj)) {\n          col.add(obj);\n        }\n      }\n    }\n\n    return col;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4996, "initialization": ["List list = new ArrayList(int)", "Object e = Expr.evaluate(Context)"], "initializationStart": [172, 316], "initializationEnd": [196, 343], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 352, "focalAPIEnd": 378, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/geoquest/Public-GQ-Player-Android--1/tree/master/GQ_Android/libs/jaxen/jaxen-1.1.4/src/java/main/org/jaxen/expr/DefaultFunctionCallExpr.java", "rawCode": "  public List evaluateParams(Context context) throws JaxenException {\n    List paramExprs = getParameters();\n    int paramSize = paramExprs.size();\n\n    List paramValues = new ArrayList(paramSize);\n\n    for (int i = 0; i < paramSize; ++i) {\n      Expr eachParam = (Expr) paramExprs.get(i);\n\n      Object eachValue = eachParam.evaluate(context);\n\n      paramValues.add(eachValue);\n    }\n    return paramValues;\n  }\n"}, {"dataset": "listAdd", "exampleID": 4997, "initialization": ["List list = new ArrayList(*)", "Object e = getAdaptedContributorResource(Object)"], "initializationStart": [569, 834], "initializationEnd": [598, 893], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(e==null)", "guardType": "IF {", "guardExpressionStart": 904, "guardExpressionEnd": 925, "guardBlockStart": 904, "guardBlockEnd": 1033, "focalAPI": " = list.add(e)", "focalAPIStart": 1042, "focalAPIEnd": 1064, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getCommonClass(list)"], "useStart": [1128], "useEnd": [1152], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maihde/org.eclipse.rap/tree/master/bundles/org.eclipse.rap.ui.workbench/Eclipse UI/org/eclipse/ui/internal/ObjectContributorManager.java", "rawCode": "  /**\n   * Returns the common denominator resource class for the given collection of objects. Do not\n   * return a resource class if the objects are resources themselves so as to prevent double\n   * registration of actions.\n   */\n  private Class getCommonResourceClass(List objects) {\n    if (objects == null || objects.size() == 0) {\n      return null;\n    }\n    Class resourceClass = LegacyResourceSupport.getResourceClass();\n    if (resourceClass == null) {\n      // resources plug-in not loaded - no resources. period.\n      return null;\n    }\n\n    List testList = new ArrayList(objects.size());\n\n    for (int i = 0; i < objects.size(); i++) {\n      Object object = objects.get(i);\n\n      if (object instanceof IAdaptable) {\n        if (resourceClass.isInstance(object)) {\n          continue;\n        }\n\n        Object resource = LegacyResourceSupport.getAdaptedContributorResource(object);\n\n        if (resource == null) {\n          // Not a resource and does not adapt. No common resource class\n          return null;\n        }\n        testList.add(resource);\n      } else {\n        return null;\n      }\n    }\n\n    return getCommonClass(testList);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4998, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 61, "focalAPIEnd": 107, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jaejaejae/ramonCS2103/tree/master/CS2103/lib/apache-log4j-1.2.16/src/main/java/org/apache/log4j/lf5/viewer/LogBrokerMonitor.java", "rawCode": "  public void addDisplayedProperty(Object messageLine) {\n    _displayedLogBrokerProperties.add(messageLine);\n  }\n"}, {"dataset": "listAdd", "exampleID": 4999, "initialization": ["List list = new ArrayList(*)", "Object e = getFunctionArgValue(String,String,Object)", "Object e = getFunctionArgValue(String,String,Object)", "Object e = getFunctionArgValue(String,String,*)"], "initializationStart": [504, 1132, 1424, 1626], "initializationEnd": [534, 1179, 1471, 1674], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 1695, "focalAPIEnd": 1715, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Teiid-Designer/teiid-designer/tree/master/plugins/org.teiid.designer.query.ui/src/org/teiid/query/ui/builder/model/FunctionEditorModel.java", "rawCode": "  public void setFunctionName(String theName) {\n    IFunctionForm functionForm = findFunctionForm(theName);\n    CoreArgCheck.isNotNull(functionForm);\n\n    if ((selectedFunctionForm == null) || !selectedFunctionForm.equals(functionForm)) {\n      selectedFunctionForm = functionForm;\n\n      // set new function arguments\n      List prevArgValues = argValues;\n      int prevNumArgs = (prevArgValues == null) ? 0 : prevArgValues.size();\n      argNames = selectedFunctionForm.getArgNames();\n      argValues = new ArrayList(argNames.size());\n\n      // reuse prior arg values if possible\n      String functionName = selectedFunctionForm.getName();\n\n      for (int numArgs = argNames.size(), i = 0; i < numArgs; i++) {\n        // set value\n        String argName = (String) argNames.get(i);\n        Object value = null;\n\n        if (i < prevNumArgs) {\n          Object arg = prevArgValues.get(i);\n\n          if (!BuilderUtils.isConversionTypeConstant(arg)\n              && !BuilderUtils.isConversionTypeArg(functionName, argName)) {\n            // keep value when both old/new argNames are not conversion type constants\n            value = getFunctionArgValue(functionName, argName, arg);\n          } else if (BuilderUtils.isConversionTypeConstant(arg)\n              && BuilderUtils.isConversionTypeArg(functionName, argName)) {\n            // keep value when both old/new argNames are conversion type constants\n            value = getFunctionArgValue(functionName, argName, arg);\n          }\n        }\n\n        // if value is not set yet get undefined value or conversion type constant\n        if (value == null) {\n          value = getFunctionArgValue(functionName, argName, null);\n        }\n\n        argValues.add(value);\n      }\n      fireModelChanged(SELECTED_FUNCTION);\n    }\n  }\n"}, {"dataset": "listAdd", "exampleID": 5000, "initialization": ["List list = new ArrayList()", "Object e = StringTokenizer.nextElement()"], "initializationStart": [353, 431], "initializationEnd": [368, 455], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = list.add(e)", "focalAPIStart": 463, "focalAPIEnd": 476, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lazyman/rapid-framework/tree/master/rapid-core/src/main/java/cn/org/rapid_framework/util/StringTokenizerUtils.java", "rawCode": "  /**\n   * 将str将多个分隔符进行切分，\n   *\n   * <p>示例：StringTokenizerUtils.split(\"1,2;3 4\",\" ,;\"); 返回: [\"1\",\"2\",\"3\",\"4\"]\n   *\n   * @param str\n   * @param seperators\n   * @return\n   */\n  @SuppressWarnings(\"all\")\n  public static String[] split(String str, String seperators) {\n    StringTokenizer tokenlizer = new StringTokenizer(str, seperators);\n    List result = new ArrayList();\n\n    while (tokenlizer.hasMoreElements()) {\n      Object s = tokenlizer.nextElement();\n      result.add(s);\n    }\n    return (String[]) result.toArray(new String[result.size()]);\n  }\n"}]